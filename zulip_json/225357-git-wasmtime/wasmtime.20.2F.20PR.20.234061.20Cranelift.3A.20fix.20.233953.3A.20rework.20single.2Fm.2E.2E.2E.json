[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR addresses the longstanding issue with loads trying to merge<br>\ninto compares on x86-64, and more generally, with the lowering<br>\nframework falsely recognizing \"single uses\" of one op by<br>\nanother (which would normally allow merging of side-effecting ops like<br>\nloads) when there is <em>indirect</em> duplication.</p>\n<p>To fix this, we replace the direct <code>value_uses</code> count with a<br>\ntransitive notion of uniqueness (not unlike Rust's <code>&amp;</code>/<code>&amp;mut</code> and how<br>\na <code>&amp;mut</code> downgrades to <code>&amp;</code> when accessed through another <code>&amp;</code>!). A<br>\nvalue is used multiple times transitively if it has multiple direct<br>\nuses, or is used by another op that is used multiple times<br>\ntransitively.</p>\n<p>The canonical example of badness is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ifcmp</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">selectif</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">selectif</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>both <code>v3</code> and <code>v4</code> effectively merge the <code>ifcmp</code> (<code>v2</code>), so even<br>\nthough the use of <code>v1</code> is \"unique\", it is codegenned twice. This is<br>\nwhy we <del>can't have nice things</del> can't merge loads into<br>\ncompares (#3953).</p>\n<p>There is quite a subtle and interesting design space around this<br>\nproblem and how we might solve it. See the long doc-comment on<br>\n<code>ValueUseState</code> in this PR for more justification for the particular<br>\ndesign here. In particular, this design deliberately simplifies a bit<br>\nrelative to an \"optimal\" solution: some uses can <em>become</em> unique<br>\ndepending on merging, but we don't design our data structures for such<br>\nupdates because that would require significant extra costly<br>\ntracking (some sort of transitive refcounting). For example, in the<br>\nabove, if <code>selectif</code> somehow did not merge <code>ifcmp</code>, then we would only<br>\ncodegen the <code>ifcmp</code> once into its result register (and use that<br>\nregister twice); then the load <em>is</em> uniquely used, and could be<br>\nmerged. But that requires transitioning from \"multiple use\" back to<br>\n\"unique use\" with careful tracking as we do pattern-matching, which<br>\nI've chosen to make out-of-scope here for now. In practice, I don't<br>\nthink it will matter too much (and we can always improve later).</p>\n<p>With this PR, we can now re-enable load-op merging for compares.<br>\nThe first commit makes the core lowering logic change, while the<br>\nsecond commit makes the x64 backend changes; the last two commits<br>\nupdate filetests.</p>\n<p>@fitzgen, I'll note in particular that this differs from the color-based<br>\napproach I had described earlier today to you; I realized that doesn't<br>\nquite work, and I think the above is probably the best we can do without<br>\nsignificantly more heavyweight bookkeeping. Let me know if you've got<br>\nany better ideas though!</p>\n</blockquote>",
        "id": 279639022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650520061
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a>.</p>",
        "id": 279639023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650520061
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a>.</p>",
        "id": 279639024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650520061
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-948829964\">PR review</a>.</p>",
        "id": 279699413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650556488
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-948829964\">PR review</a>.</p>",
        "id": 279699414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650556488
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r855328551\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the comments here can be removed.</p>\n</blockquote>",
        "id": 279699415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650556488
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r855331943\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// into flags users (`selectif`, `trueif`, branches) and can\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 279699416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650556488
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r855333280\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// codegen-ed in multiple places, where it is incorporated as a\n</code></pre></div>\n<p>I don't even know if this is more grammatically correct.</p>\n</blockquote>",
        "id": 279699417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650556488
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>.</p>",
        "id": 279727454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569074
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-949121211\">PR review</a>.</p>",
        "id": 279727500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569102
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r855525776\">PR review comment</a>:</p>\n<blockquote>\n<p>I went with <code>codegen'd</code>. Someday dictionaries will catch up with compiler engineer jargon and tell us the right answer; until then that seems right to me :-)</p>\n</blockquote>",
        "id": 279727501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569102
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-949121305\">PR review</a>.</p>",
        "id": 279727517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569108
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r855525842\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 279727519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569108
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r855525936\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 279727528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569114
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-949121403\">PR review</a>.</p>",
        "id": 279727529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569114
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>.</p>",
        "id": 279727599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650569158
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>.</p>",
        "id": 279766050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650590636
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>.</p>",
        "id": 279767142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650591610
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>.</p>",
        "id": 279858351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650650315
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-950608434\">PR review</a>.</p>",
        "id": 279886544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650666953
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-950608434\">PR review</a>.</p>",
        "id": 279886545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650666953
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r856608258\">PR review comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let mark_all_uses_as_multiple = |value_ir_uses: &amp;mut SecondaryMap&lt;Value, ValueUseState&gt;,\n</code></pre></div>\n<p>I think this might make it more clear.</p>\n</blockquote>",
        "id": 279886546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650666953
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r856591462\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // a DFS. We iterate over all instructions and mark their args\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 279886547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650666953
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r856613908\">PR review comment</a>:</p>\n<blockquote>\n<p>So the invariant is that if <code>value</code> is used multiple times, the inputs <code>[i]</code> to the instruction that created <code>value</code> are also used multiple times. Perhaps we should add a <code>debug_assert!</code> here that at least the next level up <code>[i]</code> are indeed already marked as multiple, if <code>value</code> has them. Everything looks correct but it might be smart to add something like this to keep things correct.</p>\n</blockquote>",
        "id": 279886548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650666954
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r856616419\">PR review comment</a>:</p>\n<blockquote>\n<p>As I considered what this might look like, I started to wonder as well if we even need the stack structure? Why not use the actual stack instead?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">mark_all</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_ir_uses</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">SecondaryMap</span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ValueDef</span>::<span class=\"nb\">Result</span><span class=\"p\">(</span><span class=\"n\">src_inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">value_def</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">inst_args</span><span class=\"p\">(</span><span class=\"n\">src_inst</span><span class=\"p\">).</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value_ir_uses</span><span class=\"p\">[</span><span class=\"n\">input</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">ValueUseState</span>::<span class=\"n\">Multiple</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"> </span><span class=\"c1\">// seems like we could factor out the ValueDef::Result / inst_args.iter into a helper and use it here</span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mark_all</span><span class=\"o\">..</span><span class=\"p\">.(</span><span class=\"n\">value_ir_uses</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Not sure it works with mutability rules and all that; just thought I would mention it.</p>\n</blockquote>",
        "id": 279886549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650666954
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a> from <code>lowering-unique-use</code> to <code>main</code>.</p>",
        "id": 279894461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650673835
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#pullrequestreview-950731648\">PR review</a>.</p>",
        "id": 279894576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650673958
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061#discussion_r856686682\">PR review comment</a>:</p>\n<blockquote>\n<p>Added the <code>debug_assert</code>, thanks!</p>\n<p>Re: explicit stack vs. recursion, I wrote it this way to avoid running out of stack when long chains exist in the input... preemptively addressing a future fuzzbug I guess :-) This is a practice I picked up in SpiderMonkey (no recursion bounded by user-controlled input sizes) and seems like a good practice in general that I <em>think</em> we follow in most places.</p>\n</blockquote>",
        "id": 279894577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650673958
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4061\">PR #4061</a>.</p>",
        "id": 279896238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650675649
    }
]