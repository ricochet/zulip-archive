[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928\">issue #3928</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Presently, the <code>instantiate</code> family of functions (<code>Linker::instantiate</code>, <code>InstancePre::instantiate</code>, their _async cousins etc) error with an <code>anyhow::Error</code>. To inspect those errors, we can try downcasting to <code>wasmtime_runtime::InstantiationError</code>. </p>\n<h4>Benefit</h4>\n<p>Users who need to inspect those errors need to keep their deps of wasmtime and wasmtime_runtime in sync. wasmtime_runtime's API is not designed for stable use. Stabilizing this error API gets rid of a possible runtime dep for users.</p>\n<p>The <code>InstantiationError::Limit</code> variant is used when a wasmtime pooling allocator is out of instances. This is the only way that wasmtime crate users can observe this condition. There should be a stable way to observe this.</p>\n<p>The <code>InstantiationError::Trap</code> variant contains a <code>wasmtime_runtime::Trap</code>, which is different from a <code>wasmtime::Trap</code> in ways that aren't useful to wasmtime users, and can be confusing.</p>\n<h4>Implementation</h4>\n<p>I think it makes sense for the instantiate family of functions to still error with an <code>anyhow::Error</code>, but wasmtime should export types to try downcasting that error to.</p>\n<p>Wasmtime should not re-export <code>wasmtime_runtime::InstantiationError</code> because it exposes the wrong sort of <code>Trap</code>. Instead it should map the variants to types which are in the public API.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">InstantiationError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Link</span><span class=\"p\">(</span><span class=\"n\">LinkError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Trap</span><span class=\"p\">(</span><span class=\"n\">Trap</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Limit</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Resource variant: just return the anyhow::Error here.</li>\n<li>Link variant: re-export <code>wasmtime_runtime::LinkError</code> for downcasting to that variant, since this is just a string wrapper.</li>\n<li>Trap variant: map the contents to a <code>wasmtime::Trap</code>.</li>\n<li>Limit variant: Wasmtime could define a new public type <code>PoolingAllocatorLimit</code> and <code>impl Error</code> on it, and map the <code>InstantiationError::Limit</code> variant to that type.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>There are probably other good ideas I haven't thought of here! I am very open to suggestions.<br>\n</p>\n</blockquote>",
        "id": 275277384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647281927
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928#issuecomment-1068092762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928\">issue #3928</a>:</p>\n<blockquote>\n<p>Personally I'm hesitant to expose error-enums because in the limit every function would needs its own error enum. For example <code>InstantiatePre::instantiate</code> can't return an <code>InstantiationError::Link</code>, but <code>Instance::new</code> and <code>Linker::instantiate</code> can. There's also a number of other cases like <code>Func::call</code> which can fail for any number of reasons but we lump them all into <code>anyhow::Error</code>.</p>\n<p>That being said though it definitely makes sense to want to work with specific kinds of errors and handle those differently than others. For that though we've relied on downcasting where possible. For example for instantiations that fail because of a trap you should be able to <code>downcast_ref::&lt;wasmtime::Trap&gt;()</code> and get the trap out. I don't think we have downcasts for other errors though.</p>\n<p>In that sense I would personally prefer to have specific errors you can downcast to instead of having specific errors returned from each API. Is there a particular error you're thinking of looking for beyond traps?</p>\n</blockquote>",
        "id": 275385270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647356654
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928#issuecomment-1068197569\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928\">issue #3928</a>:</p>\n<blockquote>\n<p>I think we are in agreement, and I just wasn't clear in the language I used for the proposal above. The error I need most is the Limit error, but I figured we could cover all four variants pretty easily.</p>\n</blockquote>",
        "id": 275398417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647361947
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928\">issue #3928</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Presently, the <code>instantiate</code> family of functions (<code>Linker::instantiate</code>, <code>InstancePre::instantiate</code>, their _async cousins etc) error with an <code>anyhow::Error</code>. To inspect those errors, we can try downcasting to <code>wasmtime_runtime::InstantiationError</code>. </p>\n<h4>Benefit</h4>\n<p>Users who need to inspect those errors need to keep their deps of wasmtime and wasmtime_runtime in sync. wasmtime_runtime's API is not designed for stable use. Stabilizing this error API gets rid of a possible runtime dep for users.</p>\n<p>The <code>InstantiationError::Limit</code> variant is used when a wasmtime pooling allocator is out of instances. This is the only way that wasmtime crate users can observe this condition. There should be a stable way to observe this.</p>\n<p>The <code>InstantiationError::Trap</code> variant contains a <code>wasmtime_runtime::Trap</code>, which is different from a <code>wasmtime::Trap</code> in ways that aren't useful to wasmtime users, and can be confusing.</p>\n<h4>Implementation</h4>\n<p>I think it makes sense for the instantiate family of functions to still error with an <code>anyhow::Error</code>, but wasmtime should export types to try downcasting that error to.</p>\n<p>Wasmtime should not re-export <code>wasmtime_runtime::InstantiationError</code> because it exposes the wrong sort of <code>Trap</code>. Instead it should map the variants to types which are in the public API.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">InstantiationError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Link</span><span class=\"p\">(</span><span class=\"n\">LinkError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Trap</span><span class=\"p\">(</span><span class=\"n\">Trap</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Limit</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Resource variant: just return the anyhow::Error here.</li>\n<li>Link variant: re-export <code>wasmtime_runtime::LinkError</code> for downcasting to that variant, since this is just a string wrapper.</li>\n<li>Trap variant: map the contents to a <code>wasmtime::Trap</code>.</li>\n<li>Limit variant: Wasmtime could define a new public type <code>PoolingAllocatorLimit</code> and <code>impl Error</code> on it, and map the <code>InstantiationError::Limit</code> variant to that type.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>There are probably other good ideas I haven't thought of here! I am very open to suggestions.<br>\n</p>\n</blockquote>",
        "id": 276393001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066321
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3928\">issue #3928</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Presently, the <code>instantiate</code> family of functions (<code>Linker::instantiate</code>, <code>InstancePre::instantiate</code>, their _async cousins etc) error with an <code>anyhow::Error</code>. To inspect those errors, we can try downcasting to <code>wasmtime_runtime::InstantiationError</code>. </p>\n<h4>Benefit</h4>\n<p>Users who need to inspect those errors need to keep their deps of wasmtime and wasmtime_runtime in sync. wasmtime_runtime's API is not designed for stable use. Stabilizing this error API gets rid of a possible runtime dep for users.</p>\n<p>The <code>InstantiationError::Limit</code> variant is used when a wasmtime pooling allocator is out of instances. This is the only way that wasmtime crate users can observe this condition. There should be a stable way to observe this.</p>\n<p>The <code>InstantiationError::Trap</code> variant contains a <code>wasmtime_runtime::Trap</code>, which is different from a <code>wasmtime::Trap</code> in ways that aren't useful to wasmtime users, and can be confusing.</p>\n<h4>Implementation</h4>\n<p>I think it makes sense for the instantiate family of functions to still error with an <code>anyhow::Error</code>, but wasmtime should export types to try downcasting that error to.</p>\n<p>Wasmtime should not re-export <code>wasmtime_runtime::InstantiationError</code> because it exposes the wrong sort of <code>Trap</code>. Instead it should map the variants to types which are in the public API.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">InstantiationError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Resource</span><span class=\"p\">(</span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Link</span><span class=\"p\">(</span><span class=\"n\">LinkError</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Trap</span><span class=\"p\">(</span><span class=\"n\">Trap</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Limit</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Resource variant: just return the anyhow::Error here.</li>\n<li>Link variant: re-export <code>wasmtime_runtime::LinkError</code> for downcasting to that variant, since this is just a string wrapper.</li>\n<li>Trap variant: map the contents to a <code>wasmtime::Trap</code>.</li>\n<li>Limit variant: Wasmtime could define a new public type <code>PoolingAllocatorLimit</code> and <code>impl Error</code> on it, and map the <code>InstantiationError::Limit</code> variant to that type.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>There are probably other good ideas I haven't thought of here! I am very open to suggestions.<br>\n</p>\n</blockquote>",
        "id": 276393002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648066321
    }
]