[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a> from <code>alexcrichton:fix-fuzz-oom</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is a fix for a fuzz failure that came in the other day where a module took more than 2GB of memory to compile, triggering the fuzzer to fail. Investigating locally it looks like the problem lies in the basic-block padding added recently. Turning on that option increases the memory usage of Cranelift from ~70M to ~2.5G. The setting in the test was to add <code>1&lt;&lt;14</code> bytes of padding between all basic blocks, and with a lot of basic blocks that can add up quite quickly.</p>\n<p>The solution implemented here is to implement a per-function limit of the amount of padding that can be injected. I've set it to 1MB for now which is hopefully enough to continue to stress the various bits of the <code>MachBuffer</code> while not blowing limits accidentally while fuzzing.</p>\n<p>After this commit the fuzz test case in question jumps from 70M to 470M with basic block padding enabled, which while still large is a bit more modest and sticks within the limits of the fuzzer.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 376053015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689605440
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376053018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689605441
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376053019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689605441
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#pullrequestreview-1533037839\">PR review</a>.</p>",
        "id": 376060319,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689606529
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#discussion_r1265515327\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this would limit it to a single conditional branch where the branch destination doesn't fit and thus a veneer needs to be inserted on AArch64. Maybe bump it to 1 &lt;&lt; 21?</p>\n</blockquote>",
        "id": 376060321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689606529
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376093348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689610779
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376093349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689610779
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376093350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689610779
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#pullrequestreview-1533175030\">PR review</a>.</p>",
        "id": 376094108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689610864
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#discussion_r1265603935\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a good point yeah and was something I was worried about as well. I'm a bit worried though that bumping this to 21 (predictably) doubles the memory usage.</p>\n<p>I've instead opted for a different strategy now:</p>\n<ul>\n<li>Each function gets at most 64M of padding</li>\n<li>Padding is only enabled for fuzz test cases with &lt;10 functions</li>\n</ul>\n<p>That should help continue to explore interesting cases while avoiding the large memory increases seen prior I think</p>\n</blockquote>",
        "id": 376094109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689610864
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#pullrequestreview-1533724547\">PR review</a>.</p>",
        "id": 376166627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689629154
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#discussion_r1265919521\">PR review comment</a>:</p>\n<blockquote>\n<p>*doesn't</p>\n</blockquote>",
        "id": 376166629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689629154
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376367861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689689901
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736#pullrequestreview-1536014232\">PR review</a>:</p>\n<blockquote>\n<p>I'm fine with this but wonder if @cfallin might have an opinion: limiting the Cranelift functions to a padded 64MB makes it possible that some of the larger islands never get fuzzed? IIRC, don't we have 2GB islands on x86?</p>\n</blockquote>",
        "id": 376491178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689721760
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376685473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689776600
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376685782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689776650
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6736\">PR #6736</a>.</p>",
        "id": 376712668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689781444
    }
]