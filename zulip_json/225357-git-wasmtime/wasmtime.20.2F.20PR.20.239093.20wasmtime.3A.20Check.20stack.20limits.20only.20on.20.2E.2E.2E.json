[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a> from <code>jameysharp:wasmtime-probe-stack</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Currently, we do an explicit check for stack overflow on entry to every WebAssembly function. But that costs some time, and is a significant performance hit for very short functions.</p>\n<p>This commit instead switches Wasmtime to relying on guard pages at the end of the stack to catch stack overflow, so the MMU does this check for \"free\". This means we may allow deeper recursion in guest code than we did before.</p>\n<p>To make this work, we need Wasmtime's signal handlers to recognize when a guest memory fault is in a stack guard page and report the appropriate stack-overflow trap code.</p>\n<p>Note that we can't turn host-code signals into guest traps, so the signal handlers have to verify that the signal occurred in guest code.</p>\n<p>When the guest calls host code (explicitly due to calling an imported host function, or implicitly due to a libcall inserted by Wasmtime or Cranelift), we also need to ensure that there is enough stack space available for the host code to not hit the guard pages. We do that by checking the stack limit that the embedder provided in the trampolines where we exit wasm.</p>\n<hr>\n<p>I've been laid off from Fastly so I won't be pursuing this further, but I feel good about the work I put into it so far and want to leave it here in case anyone else wants to pick it up.</p>\n</blockquote>",
        "id": 457462042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1723146003
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 488892789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734112432
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 488916840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734122414
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2542298287\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>I've now rebased this and ported it to main. There some test failures at the moment.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">stack_overflow</span><span class=\"p\">::</span><span class=\"n\">host_always_has_some_stack</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">overflowed</span><span class=\"w\"> </span><span class=\"n\">its</span><span class=\"w\"> </span><span class=\"n\">stack</span>\n<span class=\"n\">fatal</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">stack</span><span class=\"w\"> </span><span class=\"n\">overflow</span>\n</code></pre></div>\n<p>which I'm looking into.<br>\n</p>\n</blockquote>",
        "id": 488916892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734122442
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2542430775\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"pulley\", \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: pulley</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 488925929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734126277
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2552410097\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>The stack overflow in the host appears to be because the stack limit checks are in the trampolines, however host libcalls don't use trampolines. The testcase disables sse4_1 and does <code>f32.ceil</code>, which causes it to get a host libcall, so it calls from guest to host without a trampoline, and therefore without checking the stack limit.<br>\n</p>\n</blockquote>",
        "id": 489854016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734561824
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2552433650\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>I remember talking about the libcall problem at the time with @jameysharp but have only vague recollections of the various answers we came up with; but IIRC we did decide that recognizing the overflow by fault address in guard page was more reliable than trying to deduce fault reason from PC (because we don't know the first instruction that might touch the guard page in the &lt;1 page frame size case); I see this PR does that with some logic checking if the fault address is within a certain distance of SP; I remember us realizing that this might also (should also?) work for libcalls because natively compiled code is also compatible with a guard-page scheme. So I guess I'm curious: what's the reason that this condition isn't triggering in this case?</p>\n<p>(Apologies if I've lost too much context -- it's been a long time and I skimmed this PR again but there are many subtleties!)</p>\n</blockquote>",
        "id": 489856703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734563096
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2552437664\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>Also it seems like libcalls should probably do stack checks as well, since I would be hesitant to try and recover from runtime code hitting the guard page, so it might make sense to make the locals use trampolines like imports do.</p>\n</blockquote>",
        "id": 489857229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734563314
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2552464121\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>If it helps I've got an <a href=\"https://github.com/alexcrichton/wasmtime/commits/remove-stack-limit/\">old wasmtime branch</a> which removed the stack limit checks from functions through generating trampolines for all libcalls. I never pushed that over the finish line though in terms of polish and testing</p>\n</blockquote>",
        "id": 489860104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734564846
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2555508897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>I've lost the context I had on this.</p>\n<p>I believe Wasmtime libcalls work correctly in this PR, because they use Wasmtime's trampolines, which this PR makes do stack limit checks. It's only the Cranelift libcalls that still don't work.</p>\n<p>There was some reason why we can only safely use the guard page if we see that the faulting instruction is in Cranelift-compiled code. I think because our only recourse in the signal handler is to fully unwind the stack, and we can't trigger Rust panic unwinding let alone any libc cleanup, so there's no telling what invariants are broken if we just rewind the stack in native code. But the specific way we use Cranelift is always safe to just drop everything at any time.</p>\n<p>I remember at one point intending to add support to Cranelift for inserting a stack limit check immediately before any libcall, or insert it in the prologue like today but only if some libcalls appear somewhere in the function. I don't remember if that was the last plan I had in mind or if something had superceded it.</p>\n<p>I definitely carefully considered Alex's old branch. I only found out about it after landing on the idea of checking the stack pointer in the signal handler, and it was reassuring to see we'd both landed in the same place there.</p>\n<p>I was not comfortable with the specific mechanism in that branch for getting stack limit checks into Cranelift libcalls.</p>\n<ul>\n<li>The idea there was that Cranelift makes us supply the function for it to call, so let's supply a function that does a stack limit check.</li>\n<li>But we need the vmctx to find the stack limit, and Cranelift doesn't pass that to libcalls. (I discussed changing that with Chris, IIRC; I think we decided not to.)</li>\n<li>So Alex needed to look up the vmctx again, from thread-locals. Nobody wants to do that from Cranelift, so we need to call into Rust to do the thread-local lookup.</li>\n<li>But we need to do a stack limit check before calling into Rust!</li>\n<li>We can assume some upper bound on how much stack we'll need for the thread-local lookup. So Alex did something I think involving synthesizing a Cranelift function that would touch the stack some distance down; to hit the guard page and trigger the signal handler, maybe? And it was recursive for reasons I didn't understand, doing this four times or something. </li>\n<li>If that function returns then it's safe to call the Rust function to get the vmctx, then do the stack limit check by hand, then call the real libcall. These steps can be represented in CLIF, so the signal handler protects this function too.</li>\n</ul>\n<p>End result was calling two extra Cranelift functions plus a Rust function before the real libcall could run, and that felt like a lot of trouble to me.</p>\n<p>I hope this helps!</p>\n</blockquote>",
        "id": 490025222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734632814
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 490078520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734658614
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2556108034\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>@jameysharp Thanks, that's useful context!</p>\n<p>@alexcrichton Thanks for that branch. It's worth considering that approach, however if possible, I'd like to try taking an approach where we just pass vmctx to the libcalls and use trampolines, so that they work the same as other Wasmtime builtins, rather than having the libcall code do special things.</p>\n<p>I've now added patches to experiment with making the calls to ceil/floor/etc. work like normal Wasmtime builtins, meaning they get a vmctx and a trampoline in the normal way. This involves handling them in the Wasm-to-Cranelift translator, which is a little annoying, but has the nice side effect of eliminating a whole separate relocation mechanism from Wasmtime, so I think it's an overall simplification. See the changes in crates/cranelift/src/translate/code_translator.rs for the place where this hooks in.</p>\n<p>There's a test failure in <a href=\"http://host_sefault.rs\">host_sefault.rs</a>. The test attempts to trigger a crash by deliberately misconfiguring the host, and with this patch, we interpret the crash as a Wasm trap, which causes the test to fail. I need to investigate more.</p>\n<p>There are lots of Pulley failures still. I haven't yet looked at how all this interacts with Pulley.</p>\n<p>And the patch is a bit rough still. I need to tidy up all the loose ends around x86_pshufb and <code>__m128i</code> and things, and some bits of unnecessary relocation code left behind, and probably other things too.</p>\n</blockquote>",
        "id": 490080404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734659866
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2557368799\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<blockquote>\n<p>This involves handling them in the Wasm-to-Cranelift translator, which is a little annoying, but has the nice side effect of eliminating a whole separate relocation mechanism from Wasmtime, so I think it's an overall simplification</p>\n</blockquote>\n<p>Oh I really like that strategy, much better than the hack I had <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n<blockquote>\n<p>There are lots of Pulley failures still. I haven't yet looked at how all this interacts with Pulley.</p>\n</blockquote>\n<p>Feel free to ignore any pulley failures where possible, but if that's causing issues I can help take a deeper look too!</p>\n</blockquote>",
        "id": 490196929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734713200
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 490241318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734734930
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 490242314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734735584
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 490245506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734737855
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2557927829\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>The patch is now tidied up more. I still need to fix the <a href=\"http://host_segfault.rs\">host_segfault.rs</a> test, and there's a todo to figure out the stack pointer on s390x, but I think it's otherwise in pretty good shape.</p>\n<p>@alexcrichton The CI shows a lot of pulley failures; any help you could provide with those would be appreciated!</p>\n</blockquote>",
        "id": 490251792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734742804
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2573373759\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>Ah I think what's happening there is that the pulley stack is different from the native stack so the limit recorded when we enter wasm isn't actually the limit that needs to be checked by wasm itself. I think an easy fix though would be to skip stack limit checks on Pulley entirely since that already has to check all decrements manually anyway. (basically just generate different CLIF for pulley targets)</p>\n</blockquote>",
        "id": 492128711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736178135
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494044615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1736989038
    },
    {
        "content": "<p>sunfishcode updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494255643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737072285
    },
    {
        "content": "<p><strong>sunfishcode</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a> as ready for review.</p>",
        "id": 494258384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073883
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494258386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073884
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494258387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073884
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494258388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073884
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494258389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073884
    },
    {
        "content": "<p><strong>sunfishcode</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494258390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737073885
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#issuecomment-2597193109\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>:</p>\n<blockquote>\n<p>I've now figured got all the pulley interactions untangled, and fixed the <a href=\"http://host_segfault.rs\">host_segfault.rs</a> test in a defensible way, and that fixes all the remaining test failures, and I believe this is now ready for review.</p>\n<p>As a recap of what's here:</p>\n<ul>\n<li>\n<p>This PR eliminates all Cranelift-generated builtins from Wasmtime, and deletes the associated relocation handling. For things like floor/ceil/etc. without sse4 and vector swizzles on x86 without pshufb, Wasmtime inserts libcalls in the Wasm-to-cranelift translator instead, so that they work like all other libcalls in Wasmtime. That's a nice simplification, and it helps this PR by ensuring that all libcalls go through the same trampoline mechanism, which can ensure that we handle stack overflow for them consistently.</p>\n</li>\n<li>\n<p>This PR switches Wasmtime to rely on the stack guard pages for catching most stack overflows, when signal-handling is available, and in this mode it only does explicit checks on exits from Wasm code, such as trampoline calls into host functions. This reduces the overhead of entering Wasm because we no longer need explicit stack overflow checks on entrypoints.<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 494259192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737074384
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093\">PR #9093</a>.</p>",
        "id": 494386418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737128196
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#pullrequestreview-2559327860\">PR review</a>:</p>\n<blockquote>\n<p>Thanks again for continuing to push on this! I've left a number of comments below, although nothing too major. I've additionally pushed a commit with <code>prtest:full</code> (feel free to remove that and push your own) to run the full test suite before getting to the merge queue.</p>\n<p>Some high-level questions though:</p>\n<ul>\n<li>I may have missed it during this review, but IIRC we currently have inline stack probes turned off and this PR will require us to turn them back on, right?</li>\n<li>Could you review the stack overflow tests we currently have and ensure they're testing all the various bits necessary to stress this new scheme?</li>\n</ul>\n<p>For testing and example is that the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6ac02e1092af3ed5dd57c9af30133b1d2b9d28f1/tests/all/stack_overflow.rs#L8\">existing tests</a> don't stress this PR. At each level of recursion they call out to the host meaning that we'll never get close to the guard page. IIRC I rewrote that test at some point to instead perform N recursive calls and then call the host, after which the test would do a bit of a search to figure out what N causes stack overflow and it would test N-10..N to ensure that stack overflow wouldn't happen (or something like that). I never felt happy enough with the test coverage to land something, but regardless I feel that our current testing of stack overflow is insufficient to land this since I think that test doesn't ever hit the guard page.</p>\n</blockquote>",
        "id": 494392372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920378620\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you add some comments as to why stack overflow traps are ignored here?</p>\n</blockquote>",
        "id": 494392379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920376847\">PR review comment</a>:</p>\n<blockquote>\n<p>If you're up for it, and it's ok to defer this to later, our stack overflow story is complicated enough it might be worth having a dedicated page in <code>docs/*.md</code> to talk about. Just for internal documentation, not necessarily user facting, but I feel like we've got a lot of scattered bits about stack overflow in various places as our strategy has evolved over time. For example the \"The Wasm spec...\" bit here is duplicated with <code>save_last_wasm_exit_fp_and_pc</code> below and neither gives a complete picture of how stack overflow is handled. In reality to understand how stack overflow works it requires understanding lots of locations, which is where I think a <code>docs/*.md</code> would be good that every place could point back to.</p>\n<p>I realize though that reorganizing docs is mostly orthogonal to this PR, so I think it's ok to defer this to later if you'd prefer to not tackle this now.</p>\n</blockquote>",
        "id": 494392381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920382637\">PR review comment</a>:</p>\n<blockquote>\n<p>How does this end up working? I would have thought that <code>i8x16</code> being empty or <code>__m128i</code> are both incompatible with Pulley's <code>[i8; 16]</code> definition...</p>\n</blockquote>",
        "id": 494392382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920390467\">PR review comment</a>:</p>\n<blockquote>\n<p>This'll want to be removed because the sp for Pulley is tracked in <code>x_regs</code>. In generally ideally this PR wouldn't have any changes to Pulley here </p>\n</blockquote>",
        "id": 494392386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920380241\">PR review comment</a>:</p>\n<blockquote>\n<p>Would it be possible to drop this type definition entirely? Ideally we do want this to be <code>__m128i</code> on x86 because that is guaranteed to be an xmm register in the ABI. I think this might be possible by putting <code>#[cfg(target_arch = \"x86_64\")]</code> on the definitions of the intrinsics themselves? (IIRC the macro already supports feature-gated intrinsics so I think it should support platform-specific intrinsics as well)</p>\n</blockquote>",
        "id": 494392388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920385019\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh I see the pulley changes down below...</p>\n<p>Could this <code>call</code> macro be updated on Pulley to just skip the shuffle/swizzle intrinsics entirely? That way it'd fall into a panic at the bottom of this function. That would also avoid the need to update pulley with methods that can't be supported and are just fixing the build for these bits too</p>\n</blockquote>",
        "id": 494392389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920389507\">PR review comment</a>:</p>\n<blockquote>\n<p>This'll definitely want some comments as to what's going on here. For example why the <code>-128</code> and why the <code>+4096</code>? (e.g. why 128, why 4096 instead of <code>page_size</code>, etc)</p>\n</blockquote>",
        "id": 494392391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920402348\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be split out into a new expectation of \"WasmStackOverflow\" which requires that the <code>STACK_OVERFLOW_CODE</code> is exited with? I'd ideally prefer to be as strict as possible when matching on this.</p>\n</blockquote>",
        "id": 494392394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129963
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920388098\">PR review comment</a>:</p>\n<blockquote>\n<p>I suspect this won't be able to get past CI, so I pushed a commit to this PR with <code>prtest:full</code> to run the full test suite to help catch this earlier</p>\n</blockquote>",
        "id": 494392398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129964
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920373897\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the <code>is_pulley</code> check get lifted to the outer conditional to avoid two levels of nesting?</p>\n</blockquote>",
        "id": 494392399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129964
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9093#discussion_r1920385850\">PR review comment</a>:</p>\n<blockquote>\n<p>For this my hope is that with a <code>#[cfg]</code> on the intrinsic definition we could avoid needing to define this entirely</p>\n</blockquote>",
        "id": 494392400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1737129964
    }
]