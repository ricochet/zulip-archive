[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8737\">PR #8737</a> from <code>rvolosatovs:feat/wasmtime-rpc</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This is the first step in RPC-based Wasmtime plugin functionality support based on <a href=\"https://github.com/wrpc/wrpc\">https://github.com/wrpc/wrpc</a></p>\n<p>I will update this PR with more info going forward, but in short <code>wasmtime-rpc</code>, using wRPC, provides a way to extend the host runtime using interfaces defined in WIT without statically-generated bindings.<br>\nwRPC encodes values using Component Model Value Encoding (<a href=\"https://github.com/WebAssembly/component-model/pull/336\">https://github.com/WebAssembly/component-model/pull/336</a>) on the wire - this encoding is implemented in this PR directly using wasmtime values and types. The implementation depends on <a href=\"https://docs.rs/wasm-tokio/latest/wasm_tokio/\">https://docs.rs/wasm-tokio/latest/wasm_tokio/</a> developed by me in <a href=\"https://github.com/wrpc/wasm-tokio\">https://github.com/wrpc/wasm-tokio</a></p>\n<p>wRPC is built on top of a core \"transport\" abstraction, which provides a bidirectional, multiplexed byte streams.<br>\nBest supported wRPC transport is currently based on <a href=\"https://nats.io/\">https://nats.io/</a> (implementation available at <a href=\"https://github.com/wrpc/wrpc/blob/86d06a487f3ab3ad71c476c0038dbb759282388a/crates/transport-nats/src/lib.rs\">https://github.com/wrpc/wrpc/blob/86d06a487f3ab3ad71c476c0038dbb759282388a/crates/transport-nats/src/lib.rs</a>), but IPC transport is currently underway and the protocol is completely transport-agnostic.<br>\nYou can see a basic \"static\" outgoing transport implemented in the test.</p>\n<p>The end goal here is that developers should be able to choose the \"polyfill strategy\" having a way to e.g. polyfill every component import missing from the linker, or a particular instance import etc. For this first step, I've only added functionality to polyfill a single function at a time given a linker instance, instance name, function name and its' type.</p>\n<p>I've decided to omit the resource support from this PR, which is currently being redesigned in wRPC <a href=\"https://github.com/wrpc/wrpc/issues/101\">https://github.com/wrpc/wrpc/issues/101</a>.</p>\n<p>Note, wRPC contains a subtree-merged <code>wit-bindgen</code> adaptation with support for Go and Rust, but they are currently out-of-sync with latest CM value encoding spec (mostly around flag and char encoding).</p>\n<p>wRPC fully supports async proposal as it currently stands, i.e. native <code>future</code> and <code>stream</code> types. An example WIT: <a href=\"https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/wit/deps/wrpc-http/types.wit#L16-L38\">https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/wit/deps/wrpc-http/types.wit#L16-L38</a> and example usage of generated bindings in Go <a href=\"https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/cmd/http-outgoing-client-nats/main.go#L38-L68\">https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/cmd/http-outgoing-client-nats/main.go#L38-L68</a></p>\n</blockquote>",
        "id": 442337501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717439433
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8737\">PR #8737</a>:</p>\n<blockquote>\n<p>This is the first step in RPC-based Wasmtime plugin functionality support based on <a href=\"https://github.com/wrpc/wrpc\">https://github.com/wrpc/wrpc</a></p>\n<p>I will update this PR with more info going forward, but in short <code>wasmtime-rpc</code>, using wRPC, provides a way to extend the host runtime using interfaces defined in WIT without statically-generated bindings.<br>\nwRPC encodes values using Component Model Value Encoding (<a href=\"https://github.com/WebAssembly/component-model/pull/336\">https://github.com/WebAssembly/component-model/pull/336</a>) on the wire - this encoding is implemented in this PR directly using wasmtime values and types. The implementation depends on <a href=\"https://docs.rs/wasm-tokio/latest/wasm_tokio/\">https://docs.rs/wasm-tokio/latest/wasm_tokio/</a> developed by me in <a href=\"https://github.com/wrpc/wasm-tokio\">https://github.com/wrpc/wasm-tokio</a></p>\n<p>wRPC is built on top of a core \"transport\" abstraction, which provides bidirectional, multiplexed byte streams.<br>\nBest supported wRPC transport is currently based on <a href=\"https://nats.io/\">https://nats.io/</a> (implementation available at <a href=\"https://github.com/wrpc/wrpc/blob/86d06a487f3ab3ad71c476c0038dbb759282388a/crates/transport-nats/src/lib.rs\">https://github.com/wrpc/wrpc/blob/86d06a487f3ab3ad71c476c0038dbb759282388a/crates/transport-nats/src/lib.rs</a>), but IPC transport is currently underway and the protocol is completely transport-agnostic.<br>\nYou can see a basic \"static\" outgoing transport implemented in the test.</p>\n<p>The end goal here is that developers should be able to choose the \"polyfill strategy\" having a way to e.g. polyfill every component import missing from the linker, or a particular instance import etc. For this first step, I've only added functionality to polyfill a single function at a time given a linker instance, instance name, function name and its' type.</p>\n<p>I've decided to omit the resource support from this PR, which is currently being redesigned in wRPC <a href=\"https://github.com/wrpc/wrpc/issues/101\">https://github.com/wrpc/wrpc/issues/101</a>.</p>\n<p>Note, wRPC contains a subtree-merged <code>wit-bindgen</code> adaptation with support for Go and Rust, but they are currently out-of-sync with latest CM value encoding spec (mostly around flag and char encoding).</p>\n<p>wRPC fully supports async proposal as it currently stands, i.e. native <code>future</code> and <code>stream</code> types. An example WIT: <a href=\"https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/wit/deps/wrpc-http/types.wit#L16-L38\">https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/wit/deps/wrpc-http/types.wit#L16-L38</a> and example usage of generated bindings in Go <a href=\"https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/cmd/http-outgoing-client-nats/main.go#L38-L68\">https://github.com/wrpc/http/blob/5b9a324c74d72b27d8559c54b419a54609d01c68/examples/go/http-outgoing-client/cmd/http-outgoing-client-nats/main.go#L38-L68</a></p>\n</blockquote>",
        "id": 442340622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717440242
    },
    {
        "content": "<p>rvolosatovs updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8737\">PR #8737</a>.</p>",
        "id": 442566851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717517034
    }
]