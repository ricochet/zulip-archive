[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844\">PR #5844</a> from <code>riscv-extend</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR improves codegen for signed and zero extensions on the riscv64 backend.</p>\n<p>The current status is that we have two lowerings. Either we do a <code>shl + shr</code>, or we do an <code>andi, reg, 255</code> for zero exending I8's.</p>\n<p>This PR moves the extension logic into ISLE and adds a few more optimizations.</p>\n<p>For the base instruction set we have the following:</p>\n<ul>\n<li><code>shl + shr</code> as a generic fallback</li>\n<li><code>andi, reg, 255</code> for zero extending <code>I8</code>'s</li>\n<li><code>addiw, reg, 0</code> for sign extending <code>I32</code>'s into <code>I64</code>'s (this is also known as <code>sext.w</code>)</li>\n</ul>\n<p>With the <code>zbb</code> extension we get a few more lowerings:</p>\n<ul>\n<li><code>sext.b</code> for sign extending <code>I8</code>'s</li>\n<li><code>sext.h</code> for sign extending <code>I16</code>'s</li>\n<li><code>zext.h</code> for zero extending <code>I16</code>'s</li>\n</ul>\n<p>Additionally we also use <code>zbkb</code> for the remaining cases:</p>\n<ul>\n<li><code>packw</code> for zero extending <code>I16</code>'s</li>\n<li><code>pack</code> for zero extending <code>I32</code>'s</li>\n</ul>\n<p>With the right extensions we are now guaranteed to have a single instruction extension (for &lt;= 64 bits) and at most two for I128, which is nice.</p>\n<p>I've also cleaned up the I128 codegen cases a little bit.</p>\n<hr>\n<p>Unfortunately I can't remove the <code>Inst::Extend</code> since its used in some ABI code and as part of the atomic lowerings.</p>\n<p>I don't think we have a way to call into the ISLE lowerings in these cases right?</p>\n<hr>\n<p>Notes about the test diffs:</p>\n<p>Capstone does not recognize most of the <code>zbb</code> or <code>zbkb</code> instructions.</p>\n<p><code>Inst::Extend</code> used to report for example <code>sext.b</code>, but actually always lowers as <code>shl + shr</code>, which makes it seem that in some cases we are lowering more instructions. This is not the case, its just that we were printing the wrong instruction.</p>\n<p>The capstone disassembly diff is the correct one in these cases.</p>\n<hr>\n<p><code>zbkb</code> is available from qemu 7.1.0 onwards. Although the testing situation here is quite tricky since we don't have a solid way of detecting these extensions automatically.</p>\n<p>I've tested these manually by force enabling the extensions and running the runtests.</p>\n</blockquote>",
        "id": 329068783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676928111
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844\">PR #5844</a> from <code>riscv-extend</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR improves codegen for signed and zero extensions on the riscv64 backend.</p>\n<p>The current status is that we have two lowerings. Either we do a <code>shl + shr</code>, or we do an <code>andi, reg, 255</code> for zero exending I8's.</p>\n<p>This PR moves the extension logic into ISLE and adds a few more optimizations.</p>\n<p>For the base instruction set we have the following:</p>\n<ul>\n<li><code>shl + shr</code> as a generic fallback</li>\n<li><code>andi, reg, 255</code> for zero extending <code>I8</code>'s</li>\n<li><code>addiw, reg, 0</code> for sign extending <code>I32</code>'s into <code>I64</code>'s (this is also known as <code>sext.w</code>)</li>\n</ul>\n<p>With the <code>zbb</code> extension we get a few more lowerings:</p>\n<ul>\n<li><code>sext.b</code> for sign extending <code>I8</code>'s</li>\n<li><code>sext.h</code> for sign extending <code>I16</code>'s</li>\n<li><code>zext.h</code> for zero extending <code>I16</code>'s</li>\n</ul>\n<p>Additionally we also use <code>zbkb</code> for the remaining cases:</p>\n<ul>\n<li><code>packw</code> for zero extending <code>I16</code>'s</li>\n<li><code>pack</code> for zero extending <code>I32</code>'s</li>\n</ul>\n<p>With the right extensions we are now guaranteed to have a single instruction extension for &lt;= 64 bits and at most two for I128, which is nice.</p>\n<p>I've also cleaned up the I128 codegen cases a little bit.</p>\n<hr>\n<p>Unfortunately I can't remove the <code>Inst::Extend</code> since its used in some ABI code and as part of the atomic lowerings.</p>\n<p>I don't think we have a way to call into the ISLE lowerings in these cases right?</p>\n<hr>\n<p>Notes about the test diffs:</p>\n<p>Capstone does not recognize most of the <code>zbb</code> or <code>zbkb</code> instructions.</p>\n<p><code>Inst::Extend</code> used to report for example <code>sext.b</code>, but actually always lowers as <code>shl + shr</code>, which makes it seem that in some cases we are lowering more instructions. This is not the case, its just that we were printing the wrong instruction.</p>\n<p>The capstone disassembly diff is the correct one in these cases.</p>\n<hr>\n<p><code>zbkb</code> is available from qemu 7.1.0 onwards. Although the testing situation here is quite tricky since we don't have a solid way of detecting these extensions automatically.</p>\n<p>I've tested these manually by force enabling the extensions and running the runtests.</p>\n</blockquote>",
        "id": 329068869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676928146
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844\">PR #5844</a> from <code>riscv-extend</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR improves codegen for signed and zero extensions on the riscv64 backend.</p>\n<p>The current status is that we have two lowerings. Either we do a <code>shl + shr</code>, or we do an <code>andi, reg, 255</code> for zero exending I8's.</p>\n<p>This PR moves the extension logic into ISLE and adds a few more optimizations.</p>\n<p>For the base instruction set we have the following:</p>\n<ul>\n<li><code>shl + shr</code> as a generic fallback</li>\n<li><code>andi, reg, 255</code> for zero extending <code>I8</code>'s</li>\n<li><code>addiw, reg, 0</code> for sign extending <code>I32</code>'s into <code>I64</code>'s (this is also known as <code>sext.w</code>)</li>\n</ul>\n<p>With the <code>zbb</code> extension we get a few more lowerings:</p>\n<ul>\n<li><code>sext.b</code> for sign extending <code>I8</code>'s</li>\n<li><code>sext.h</code> for sign extending <code>I16</code>'s</li>\n<li><code>zext.h</code> for zero extending <code>I16</code>'s</li>\n</ul>\n<p>Additionally we also use <code>zbkb</code> for the remaining cases:</p>\n<ul>\n<li><code>packw</code> for zero extending <code>I16</code>'s</li>\n<li><code>pack</code> for zero extending <code>I32</code>'s</li>\n</ul>\n<p>With the right extensions we are now guaranteed to have a single instruction extension for &lt;= 64 bits and at most two for I128, which is nice.</p>\n<p>I've also cleaned up the I128 codegen cases a little bit.</p>\n<hr>\n<p>Unfortunately I can't remove the <code>Inst::Extend</code> since its used in some ABI code and is part of the atomic lowerings.</p>\n<p>I don't think we have a way to call into the ISLE lowerings in these cases right?</p>\n<hr>\n<p>Notes about the test diffs:</p>\n<p>Capstone does not recognize most of the <code>zbb</code> or <code>zbkb</code> instructions.</p>\n<p><code>Inst::Extend</code> used to report for example <code>sext.b</code>, but actually always lowers as <code>shl + shr</code>, which makes it seem that in some cases we are lowering more instructions. This is not the case, its just that we were printing the wrong instruction.</p>\n<p>The capstone disassembly diff is the correct one in these cases.</p>\n<hr>\n<p><code>zbkb</code> is available from qemu 7.1.0 onwards. Although the testing situation here is quite tricky since we don't have a solid way of detecting these extensions automatically.</p>\n<p>I've tested these manually by force enabling the extensions and running the runtests.</p>\n</blockquote>",
        "id": 329083437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676937690
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844\">PR #5844</a> from <code>riscv-extend</code> to <code>main</code>.</p>",
        "id": 329177716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676982628
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1308196155\">PR review</a>.</p>",
        "id": 329313563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677022559
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1308196155\">PR review</a>.</p>",
        "id": 329313564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677022559
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1113590661\">PR review comment</a>:</p>\n<blockquote>\n<p>Just noting for completeness: This term could safely be made <code>(decl pure ...)</code>. It's not necessary though since the constructor is only used on the RHS of an impure term. It's also a nice motivating example for #5771.</p>\n</blockquote>",
        "id": 329313565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677022560
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1113667604\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think any of these rules overlap with each other, so it should be safe to place them all at the same priority. If I'm wrong, ISLE will tell you so :grin: </p>\n</blockquote>",
        "id": 329313566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677022560
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1113604535\">PR review comment</a>:</p>\n<blockquote>\n<p>A thought: <code>rule 9</code> here could use <code>fits_in_64</code> and still be correct in isolation. That has the advantage of matching the structure of <code>rule 8</code> (the signed case), which is nice for reasoning; but the disadvantage that it does a recursive call to <code>extend</code> just to discover that both type arguments are the same and return the input unchanged.</p>\n<p>If you did make that change though you could delete <code>rule 10</code>, because <code>rule 9</code> would produce the same result without the special case. I think that would be slightly nicer.</p>\n<p>Also, rules 8 and 9 can share the same priority since they differ on the <code>ExtendOp</code> argument. They do currently need a different priority than all the other rules though since ISLE can't yet figure out that <code>$I128</code> doesn't overlap with <code>fits_in_64</code>. I want to fix that sooner or later...</p>\n</blockquote>",
        "id": 329313568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677022560
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1309019853\">PR review</a>.</p>",
        "id": 329397507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064144
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1114178101\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that worked! I had the idea that isle wasn't able to reason very well past things like <code>fits_in_64</code> and would start throwing overlap errors. I guess I was wrong!</p>\n</blockquote>",
        "id": 329397509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064144
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1309024807\">PR review</a>.</p>",
        "id": 329398046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064306
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1114180906\">PR review comment</a>:</p>\n<blockquote>\n<p>Having something like a match would be really nice! Or at least being able to scope these rules so that they don't accidentally get used by other rules.</p>\n</blockquote>",
        "id": 329398047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064306
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844\">PR #5844</a> from <code>riscv-extend</code> to <code>main</code>.</p>",
        "id": 329399780,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064836
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1309042436\">PR review</a>.</p>",
        "id": 329400215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064967
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1114191992\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that ended up being a bit cleaner! I like having the signed and unsigned rules being \"visually\" equal. Thanks!</p>\n<blockquote>\n<p>They do currently need a different priority than all the other rules though since ISLE can't yet figure out that $I128 doesn't overlap with fits_in_64. I want to fix that sooner or later...</p>\n</blockquote>\n<p>Oh, I think that might be why I started thinking that ISLE wouldn't reason past <code>fits_in_64</code>, good to know that its only in I128's.</p>\n</blockquote>",
        "id": 329400216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677064967
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844\">PR #5844</a>.</p>",
        "id": 329500989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677090655
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1309943252\">PR review</a>.</p>",
        "id": 329503264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677091363
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1114799764\">PR review comment</a>:</p>\n<blockquote>\n<p>That's not quite it. The issue is that ISLE doesn't know anything about when an extractor like <code>fits_in_64</code> will match. If you have two patterns where one is <code>$I64</code> and the other is <code>$I32</code>, it can see that those are different. If the patterns are both <code>fits_in_64</code>, it knows that both patterns will produce the same result on the same input so it can check deeper in the tree of patterns. But if the patterns are <code>fits_in_64</code> versus <code>fits_in_32</code>, or versus <code>$I16</code>, ISLE can't draw any conclusions about whether those overlap or not.</p>\n<p>I want to fix this by making ISLE understand or-patterns, then defining <code>fits_in_64</code> as the equivalent of <code>$I8 | $I16 | ...</code>. By making more semantics visible to ISLE, we'll get better pattern-matching code out as well as more precise overlap checks. Someday...</p>\n</blockquote>",
        "id": 329503267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677091363
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#pullrequestreview-1309995776\">PR review</a>.</p>",
        "id": 329507679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677092675
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#discussion_r1114835665\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, makes sense, Thanks for explaining that!</p>\n</blockquote>",
        "id": 329507681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677092675
    }
]