[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>Currently, to avoid issues with (i) the PC-relative addressing range of <code>LDR</code>, and (ii) the fact that the constant pool needs to be relocatable, the aarch64 backend emits constants inline with code and branches around them. This is obviously suboptimal for code-density and branchiness reasons.</p>\n<p>To handle the first issue, we should use the <code>ConstantPool</code> to collect constants, as the old backend does, and then modify our emission logic to defer constant emission to the end <em>unless</em> we're about to go out of range of pending constant references, in which case we emit a \"constant island\".</p>\n<p>To handle the second issue, we need to emit constant-pool relocations.</p>\n<p>It's still unclear how we can handle the intersection of these two, i.e., when constant references become out-of-range because the client relocates the constant pool further away. One known use case of the relocatable constant pool is for SpiderMonkey to insert its own epilogue into Wasm functions; there, at least, we can bound how much further away the constant pool will be, so perhaps we can just have a slightly-conservative limit for when we must emit a constant island.</p>\n</blockquote>",
        "id": 194494136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587154397
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>Currently, to avoid issues with (i) the PC-relative addressing range of <code>LDR</code>, and (ii) the fact that the constant pool needs to be relocatable, the aarch64 backend emits constants inline with code and branches around them. This is obviously suboptimal for code-density and branchiness reasons.</p>\n<p>To handle the first issue, we should use the <code>ConstantPool</code> to collect constants, as the old backend does, and then modify our emission logic to defer constant emission to the end <em>unless</em> we're about to go out of range of pending constant references, in which case we emit a \"constant island\".</p>\n<p>To handle the second issue, we need to emit constant-pool relocations.</p>\n<p>It's still unclear how we can handle the intersection of these two, i.e., when constant references become out-of-range because the client relocates the constant pool further away. One known use case of the relocatable constant pool is for SpiderMonkey to insert its own epilogue into Wasm functions; there, at least, we can bound how much further away the constant pool will be, so perhaps we can just have a slightly-conservative limit for when we must emit a constant island.</p>\n</blockquote>",
        "id": 194494137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587154397
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>Currently, to avoid issues with (i) the PC-relative addressing range of <code>LDR</code>, and (ii) the fact that the constant pool needs to be relocatable, the aarch64 backend emits constants inline with code and branches around them. This is obviously suboptimal for code-density and branchiness reasons.</p>\n<p>To handle the first issue, we should use the <code>ConstantPool</code> to collect constants, as the old backend does, and then modify our emission logic to defer constant emission to the end <em>unless</em> we're about to go out of range of pending constant references, in which case we emit a \"constant island\".</p>\n<p>To handle the second issue, we need to emit constant-pool relocations.</p>\n<p>It's still unclear how we can handle the intersection of these two, i.e., when constant references become out-of-range because the client relocates the constant pool further away. One known use case of the relocatable constant pool is for SpiderMonkey to insert its own epilogue into Wasm functions; there, at least, we can bound how much further away the constant pool will be, so perhaps we can just have a slightly-conservative limit for when we must emit a constant island.</p>\n</blockquote>",
        "id": 194494138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587154397
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-615448466\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-615448466\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>For reference, there are other things to think about with constant pools; see #1385.</p>\n</blockquote>",
        "id": 194495473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587155173
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>Currently, to avoid issues with (i) the PC-relative addressing range of <code>LDR</code>, and (ii) the fact that the constant pool needs to be relocatable, the aarch64 backend emits constants inline with code and branches around them. This is obviously suboptimal for code-density and branchiness reasons.</p>\n<p>To handle the first issue, we should use the <code>ConstantPool</code> to collect constants, as the old backend does, and then modify our emission logic to defer constant emission to the end <em>unless</em> we're about to go out of range of pending constant references, in which case we emit a \"constant island\".</p>\n<p>To handle the second issue, we need to emit constant-pool relocations.</p>\n<p>It's still unclear how we can handle the intersection of these two, i.e., when constant references become out-of-range because the client relocates the constant pool further away. One known use case of the relocatable constant pool is for SpiderMonkey to insert its own epilogue into Wasm functions; there, at least, we can bound how much further away the constant pool will be, so perhaps we can just have a slightly-conservative limit for when we must emit a constant island.</p>\n</blockquote>",
        "id": 194515911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587169297
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-722039082\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>There is a set of constants that might be particularly problematic - those generated for <code>Inst::LoadExtName</code>. The complication is that we need to emit relocations that modify the value in the constant pool itself. @cfallin, has a scheme similar to a Global Offset Table (GOT) been considered?</p>\n<p>There is also another problem that is quite similar - lack of deferred emission of instructions, in particular traps. Consider integer division; currently the AArch64 backend generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"w\"></span>\n<span class=\"n\">cbnz</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"n\">udf</span><span class=\"w\"></span>\n<span class=\"n\">cmn</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">ccmp</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"n\">nzcv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"></span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">vc</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"n\">udf</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The natural expectation is that most of the time the <code>UDF</code> instructions are not going to be executed, so this sequence has the same deficiencies as inline constants, i.e. lower code density and more complcated control flow. Furthermore, it contains forward conditional branches, which may very well be predicted as not taken - exactly the opposite of the common case.</p>\n<p>I think that both issues (the one in the previous paragraph and constant pools) could be solved simultaneously.</p>\n<p>BTW the limited range of literal loads could be extended by emitting a combination of <code>ADRP</code> + <code>LDR</code> instead of just a literal load, which gives a range of approximately 8 GB (4 GB in either direction).</p>\n</blockquote>",
        "id": 215656555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604534379
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-722039082\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>There is a set of constants that might be particularly problematic - those generated for <code>Inst::LoadExtName</code>. The complication is that we need to emit relocations that modify the value in the constant pool itself. @cfallin, has a scheme similar to a Global Offset Table (GOT) been considered?</p>\n<p>There is also another problem that is quite similar - lack of deferred emission of instructions, in particular traps. Consider integer division; currently the AArch64 backend generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">div</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"w\"></span>\n<span class=\"n\">cbnz</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"n\">udf</span><span class=\"w\"></span>\n<span class=\"n\">cmn</span><span class=\"w\"> </span><span class=\"n\">rm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">ccmp</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"n\">nzcv</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"></span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">vc</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"n\">udf</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The natural expectation is that most of the time the <code>UDF</code> instructions are not executed, so this sequence has the same deficiencies as inline constants, i.e. lower code density and more complicated control flow. Furthermore, it contains forward conditional branches, which may very well be predicted as not taken - exactly the opposite of the common case.</p>\n<p>I think that both issues (the one in the previous paragraph and constant pools) could be solved simultaneously.</p>\n<p>BTW the limited range of literal loads could be extended by emitting a combination of <code>ADRP</code> + <code>LDR</code> instead of just a literal load, which gives a range of approximately 8 GB (4 GB in either direction).</p>\n</blockquote>",
        "id": 215656818,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604534524
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-722095006\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<blockquote>\n<p>There is a set of constants that might be particularly problematic - those generated for Inst::LoadExtName. The complication is that we need to emit relocations that modify the value in the constant pool itself. @cfallin, has a scheme similar to a Global Offset Table (GOT) been considered?</p>\n</blockquote>\n<p>@akirilov-arm no, we haven't considered anything like a GOT, though at some point we do need to fill out support for relocation types like this. Certainly the early/bringup work for the aarch64 backend was the JIT use-case, where GOTs are not really used (or at least, e.g. SpiderMonkey has a table of wasm functions and IIRC globals but it generates custom code for accesses); so we've gotten away with the relatively simple set of relocation types so far.</p>\n<p>Longer-term, I think we ought to just emit the proper relocations for e.g. GOT references; we'll have to wire through the relocation-type support to the relevant backends, including <code>cranelift-object</code> (if not already there) and wasmtime's relocation handling; and we'll have to have a notion of \"memory model\" which is sort of a superset of our current <code>RelocDistance</code>, indicating when a symbol is external and the compilation mode calls for a GOT.</p>\n<blockquote>\n<p>deferred emission of instructions, in particular traps.</p>\n</blockquote>\n<p>This is an interesting one: my first instinct is that it might be simpler to handle this case directly during lowering, by keeping a list of deferred trap-paths (combination of <code>MachLabel</code> and <code>TrapCode</code>) and emitting and binding to labels a sequence of trap instructions at the tail of the function. There are some complications there for SpiderMonkey (it expects a fallthrough return and stitches its own epilogue on after Cranelift returns) but otherwise I think it would work. If we need a more general mechanism, we could defer emission via a mechanism on the <code>MachBuffer</code>, but I'm hesitant to add that complexity unless we really do need it. Open to other ideas here, of course :-)</p>\n</blockquote>",
        "id": 215665795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1604544028
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-772813940\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>This is done, right?</p>\n</blockquote>",
        "id": 225079370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385432
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-772818353\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>We actually currently synthesize up to 64-bit values inline with <code>MOVZ</code>/<code>MOVK</code>/<code>MOVN</code> instructions, and use this for f32/f64 as well (integer constant then move to float reg). 128-bit constants are included inline and then branched around. @abrown added the constant-pool functionality but we haven't made use of this in the aarch64 backend yet. It is still worthwhile, I think, at least to evaluate; let's leave it open to track.</p>\n</blockquote>",
        "id": 225080582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612385898
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-772933228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>Some 64-bit floating-point constants are also <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L1370\">loaded</a> from an inline literal (these cases may be reduced further - refer to the comments). Note that based on my microbenchmark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2296#issuecomment-768218260\">data</a> in #2296, it definitely makes sense to consider using constant pools.</p>\n</blockquote>",
        "id": 225104360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612398827
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-772936897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>@akirilov-arm: yes, sorry, that update somehow slipped off my radar -- thanks very much for the detailed evaluation! I agree that based on that update, we should probably at least replace the inline-constant cases with constant pool usages; the branch-around seems to have a significant impact.</p>\n</blockquote>",
        "id": 225105154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612399390
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-772941009\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>@cfallin This is a side question, but do we have a mechanism to share a constant between several users instead of rematerializing it each time? This is particularly relevant to the bitmask extraction operations, in which case the constants are always the same. Of course, the increased register pressure is a trade-off to consider.</p>\n<p>Also, some of the proposals to the Wasm SIMD specification (see <a href=\"https://github.com/WebAssembly/simd/issues/395\">WebAssembly/simd#395</a> for example) are made with such a capability in mind.</p>\n</blockquote>",
        "id": 225105945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612400038
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-772951091\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>@akirilov-arm we can share within a single function at least: @abrown's work in #2328 added deduplication of <code>VCodeConstant</code>s and the plumbing to use the <code>MachBuffer</code>'s constant-island support to emit them. (We also dedup statically, i.e. at the codegen crate level: the \"well-known constant\" option takes a <code>&amp;'static [u8]</code> to avoid carrying duplicates of constant data by value in the VCode.)</p>\n<p>We can't dedup <em>across</em> function bodies; that might be nice to have, but it would require a bit more plumbing due to our separate function compilation (which enables other things like parallelization). In principle we could have an \"rodata object\" that we aggregate from all <code>MachCompileResult</code>s after-the-fact, I suppose. Do you think we need that level of deduplication?</p>\n</blockquote>",
        "id": 225107790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612401462
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-773499404\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2468\">https://github.com/bytecodealliance/wasmtime/pull/2468</a> may be somewhat applicable to this thread; I wanted an ergonomic way to add constants during lowering (<code>LowerCtx::emit_constant</code>) and that PR is a few steps down that path. I abandoned it since it is not strictly necessary (more of a \"nice to have\") but I can finish it if we figure out some of this stuff out. E.g., it would be sort of nice to have a global rodata.</p>\n</blockquote>",
        "id": 225197908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612461744
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-773526937\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>@cfallin </p>\n<blockquote>\n<p>Do you think we need that level of deduplication?</p>\n</blockquote>\n<p>No, I don't think so. As for the existing deduplication - if I understand correctly, it avoids keeping several copies of the same data inside the pool, but each use of the data still requires a literal load. I was thinking more in the direction of keeping the constant data live in a register and avoiding memory operations; this approach might be relevant even for more complicated integer constants, say those that need more than 2 instructions to materialize (arbitrary limit - I don't have hard data to justify it).</p>\n</blockquote>",
        "id": 225204219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612464492
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549#issuecomment-773614614\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">Issue #1549</a>:</p>\n<blockquote>\n<p>Ah, OK. In theory, at least for constant duplication at the CLIF level, this may be covered by CSE. Constants that arise during lowering will not be CSE'd, so either post-lowering opts or constant rematerialization at the regalloc level could help. We might get to either or both of these someday. A constant pool with dedup is still better than literal loads from separate constant locations if we're going to do multiple literal loads (perhaps because opts are disabled or we haven't implemented remat yet); so these are complimentary I think.</p>\n</blockquote>",
        "id": 225225079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612474048
    }
]