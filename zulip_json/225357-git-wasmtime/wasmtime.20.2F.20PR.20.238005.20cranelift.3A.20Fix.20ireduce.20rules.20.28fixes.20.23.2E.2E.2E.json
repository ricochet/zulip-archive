[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8005\">PR #8005</a>.</p>",
        "id": 423730000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083513
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8005\">PR #8005</a>.</p>",
        "id": 423730001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083513
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8005\">PR #8005</a> from <code>jameysharp:fix-ireduce-opts</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>We had two optimization rules which started off like this:</p>\n<p>(rule (simplify (ireduce smallty val@(binary_op _ op x y)))<br>\n      (if-let _ (reducible_modular_op val))<br>\n      ...)</p>\n<p>This was intended to check that <code>x</code> and <code>y</code> came from an instruction which not only was a binary op but also matched <code>reducible_modular_op</code>.</p>\n<p>Unfortunately, both <code>binary_op</code> and <code>reducible_modular_op</code> were multi-terms.</p>\n<ul>\n<li>So <code>binary_op</code> would search the eclass rooted at <code>val</code> to find each instruction that uses a binary operator.</li>\n<li>Then <code>reducible_modular_op</code> would search the entire eclass again to find an instruction which matched its criteria.</li>\n</ul>\n<p>Nothing ensured that both searches would find the same instruction.</p>\n<p>The reason these rules were written this way was because they had additional guards (<code>will_simplify_with_ireduce</code>) which made them fairly complex, and it seemed desirable to not have to copy those guards for every operator where we wanted to apply this optimization.</p>\n<p>However, we've decided that checking whether the rule is actually an improvement is not desirable. In general, that should be the job of the cost function. Blindly adding equivalent expressions gives us more opportunities for other rules to fire, and we have global recursion and growth limits to keep the process from going too wild.</p>\n<p>As a result, we can just delete those guards. That allows us to write the rules in a more straightforward way.</p>\n<p>cc: @elliottt @cfallin @lpereira</p>\n</blockquote>",
        "id": 423730002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083513
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8005\">PR #8005</a>.</p>",
        "id": 423730143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083614
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8005\">PR #8005</a>:</p>\n<blockquote>\n<p>We had two optimization rules which started off like this:</p>\n<p>(rule (simplify (ireduce smallty val@(binary_op _ op x y)))<br>\n      (if-let _ (reducible_modular_op val))<br>\n      ...)</p>\n<p>This was intended to check that <code>x</code> and <code>y</code> came from an instruction which not only was a binary op but also matched <code>reducible_modular_op</code>.</p>\n<p>Unfortunately, both <code>binary_op</code> and <code>reducible_modular_op</code> were multi-terms.</p>\n<ul>\n<li>So <code>binary_op</code> would search the eclass rooted at <code>val</code> to find each instruction that uses a binary operator.</li>\n<li>Then <code>reducible_modular_op</code> would search the entire eclass again to find an instruction which matched its criteria.</li>\n</ul>\n<p>Nothing ensured that both searches would find the same instruction.</p>\n<p>The reason these rules were written this way was because they had additional guards (<code>will_simplify_with_ireduce</code>) which made them fairly complex, and it seemed desirable to not have to copy those guards for every operator where we wanted to apply this optimization.</p>\n<p>However, we've decided that checking whether the rule is actually an improvement is not desirable. In general, that should be the job of the cost function. Blindly adding equivalent expressions gives us more opportunities for other rules to fire, and we have global recursion and growth limits to keep the process from going too wild.</p>\n<p>As a result, we can just delete those guards. That allows us to write the rules in a more straightforward way.</p>\n<p>Fixes #7999.</p>\n<p>cc: @elliottt @cfallin @lpereira</p>\n</blockquote>",
        "id": 423730178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709083636
    }
]