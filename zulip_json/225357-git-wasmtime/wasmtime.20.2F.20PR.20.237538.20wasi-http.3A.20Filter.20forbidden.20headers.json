[
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>.</p>",
        "id": 402070399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699996276
    },
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a> from <code>elliottt:trevor/filter-out-forbidden-headrs</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Make sure that forbidden headers don't show up in either <code>incoming-request</code> or<br>\n<code>outgoing-response</code> values.<br>\n&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 402070401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699996276
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>.</p>",
        "id": 402070402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699996276
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>Make sure that forbidden headers don't show up in either <code>incoming-request</code> or <code>outgoing-response</code> values. One place that this PR doesn't currently address is incoming trailers. The <code>future-trailers.get</code> method returns a new <code>fields</code> resource every time it's called once it has resolved, and it's not clear where the best place to filter forbidden headers is in that case. I think the right fix for that would be to make <code>future-trailers.get</code> method return a result exactly once, like our other <code>future-*.get</code> methods, enabling us to apply the filter when we create the new owned <code>fields</code> resource.<br>\n&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 402071564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699996755
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>.</p>",
        "id": 402071609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699996776
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#pullrequestreview-1730854752\">PR review</a>:</p>\n<blockquote>\n<p>Should this be backported to Wasmtime 15 as well?</p>\n</blockquote>",
        "id": 402074333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699997884
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>.</p>",
        "id": 402084751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700002275
    },
    {
        "content": "<p>sporkmonger <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-1867011562\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>I'm wondering if this is the really the right place for this logic, particularly on incoming requests. I'm using the incoming request type in the context of detections (rather than in request handlers) where it's preferred that these headers _aren't_ stripped because they may carry information indicating malicious behavior by a client. If they're stripped in a constructor before they can be inspected, detections will be potentially working with missing crucial information. I want to be able to compose detection logic with request handlers, which is why I'm using the same type.</p>\n</blockquote>",
        "id": 409474832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703197862
    },
    {
        "content": "<p>sporkmonger edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-1867011562\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>I'm wondering if this is the really the right place for this logic, particularly on incoming requests (as opposed to outgoing requests). I'm using the incoming request type in the context of detections (rather than in request handlers) where it's preferred that these headers _aren't_ stripped because they may carry information indicating malicious behavior by a client. If they're stripped in a constructor before they can be inspected, detections will be potentially working with missing crucial information. I want to be able to compose detection logic with request handlers, which is why I'm using the same type.</p>\n</blockquote>",
        "id": 409475337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703198049
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313578058\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>@elliottt Sorry for chiming in super late here, but @bacongobbler and I tripped over this code today and have some questions about it.</p>\n<p>For context: we're currently working on porting an ASP.NET Core app to WASI.  This app happens to use Dapr, which in turn uses gRPC, which sets a <code>TE: trailers</code> header on outgoing requests, which is currently rejected by <code>is_forbidden_header</code> by way of <code>HostFields::from_list</code>.</p>\n<p>Our questions:</p>\n<ul>\n<li>In your PR summary, you said \"Make sure that forbidden headers don't show up in either incoming-request or outgoing-response values,\" but this code also affects outgoing requests as well since <code>is_forbidden_header</code> is used when constructing headers for any purpose.  Was that intentional?  I'm assuming so, but wanted to verify.</li>\n<li>I can see that the <code>WasiHttpView</code> trait _also_ has an <code>is_forbidden_header</code> function, presumably so embedders can override it, but AFAICT the <code>WasiHttpView</code> version is never used -- only the top-level function is used.  Am I missing something?  Or, if not, was that also intentional?</li>\n<li>Where did the <code>FORBIDDEN_HEADERS</code> list come from?  I found <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\">https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name</a> and see some overlap, but it's not an exact match.</li>\n</ul>\n<p>I have other questions about how to use gRPC via wasi-http, but they're probably off topic here, so I'll ask those elsewhere.</p>\n</blockquote>",
        "id": 465568085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724793223
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313621543\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>In your PR summary, you said \"Make sure that forbidden headers don't show up in either incoming-request or outgoing-response values,\" but this code also affects outgoing requests as well since <code>is_forbidden_header</code> is used when constructing headers for any purpose.  Was that intentional?  I'm assuming so, but wanted to verify.</li>\n</ul>\n</blockquote>\n<p>That was intentional. The list seemed pretty small, and the overlap between requests and responses seemed acceptable.</p>\n<blockquote>\n<ul>\n<li>I can see that the <code>WasiHttpView</code> trait _also_ has an <code>is_forbidden_header</code> function, presumably so embedders can override it, but AFAICT the <code>WasiHttpView</code> version is never used -- only the top-level function is used.  Am I missing something?  Or, if not, was that also intentional?</li>\n</ul>\n</blockquote>\n<p>It's called in <code>types_impl.rs</code>, but called as <code>is_forbidden_header(self, ...)</code> rather than as a method of <code>self</code>.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/src/types_impl.rs#L131\">https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/src/types_impl.rs#L131</a></p>\n<p>There's a test that ensures it's working by adding a custom forbidden header.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/tests/all/main.rs#L204-L208\">https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/tests/all/main.rs#L204-L208</a></p>\n<blockquote>\n<ul>\n<li>Where did the <code>FORBIDDEN_HEADERS</code> list come from?  I found <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\">https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name</a> and see some overlap, but it's not an exact match.</li>\n</ul>\n</blockquote>\n<p>It grew slightly over time, and was informed by some folks that @lukewagner coordinated with in Fastly, he might remember more context about where the full list came from.</p>\n</blockquote>",
        "id": 465571947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724794534
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313621543\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>In your PR summary, you said \"Make sure that forbidden headers don't show up in either incoming-request or outgoing-response values,\" but this code also affects outgoing requests as well since <code>is_forbidden_header</code> is used when constructing headers for any purpose.  Was that intentional?  I'm assuming so, but wanted to verify.</li>\n</ul>\n</blockquote>\n<p>That was intentional. The list seemed pretty small, and the overlap between requests and responses seemed acceptable.</p>\n<blockquote>\n<ul>\n<li>I can see that the <code>WasiHttpView</code> trait _also_ has an <code>is_forbidden_header</code> function, presumably so embedders can override it, but AFAICT the <code>WasiHttpView</code> version is never used -- only the top-level function is used.  Am I missing something?  Or, if not, was that also intentional?</li>\n</ul>\n</blockquote>\n<p>It's called in <code>types_impl.rs</code>, but called as <code>is_forbidden_header(self, ...)</code> rather than as a method of <code>self</code>.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/src/types_impl.rs#L131\">https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/src/types_impl.rs#L131</a></p>\n<p>That function ultimately bottoms out in the <code>view</code>'s function here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/src/types.rs#L253\">https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/src/types.rs#L253</a></p>\n<p>There's a test that ensures it's working by adding a custom forbidden header.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/tests/all/main.rs#L204-L208\">https://github.com/bytecodealliance/wasmtime/blob/8abaa75f55dbaddf6e4c3a5e5d26bf82fa53bc1e/crates/wasi-http/tests/all/main.rs#L204-L208</a></p>\n<blockquote>\n<ul>\n<li>Where did the <code>FORBIDDEN_HEADERS</code> list come from?  I found <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\">https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name</a> and see some overlap, but it's not an exact match.</li>\n</ul>\n</blockquote>\n<p>It grew slightly over time, and was informed by some folks that @lukewagner coordinated with in Fastly, he might remember more context about where the full list came from.</p>\n<p>(edited to add the link to the actual call to <code>view.is_forbidden_header</code>)</p>\n</blockquote>",
        "id": 465572478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724794712
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313639664\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>Thanks, @elliottt!  As I learn more about gRPC, I'm realizing that gRPC-on-wasi-http isn't possible given the current state of wasi-http, so we'll pursue the wasi-sockets route instead.</p>\n</blockquote>",
        "id": 465575420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724795379
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313640999\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<blockquote>\n<p>It grew slightly over time, and was informed by some folks that @lukewagner coordinated with in Fastly, he might remember more context about where the full list came from.</p>\n</blockquote>\n<p>FWIW, the list is in <a href=\"https://docs.google.com/document/d/1HBwd7Ca7PkstWXsuuLRFRdeZ_tItLnaNkWBDRR2MMy0/edit#heading=h.a18kcxv87ye0\">this doc, this section</a>.  Ideally I think this list would go into the wasi-http spec itself, but what's in the doc was the result of asking various HTTP folks (inside and outside Fastly).</p>\n</blockquote>",
        "id": 465575625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724795448
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313655910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>It's unfortunate that wasi-http can't support gRPC as currently specified! Concretely, it seems to me that setting a header <code>TE: trailers</code> (directives list here <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/TE\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/TE</a>) and other values should be \"ok\" if the underlying http implementation is actually able to accept those (e.g. whatwg fetch cannot support <code>TE: trailers</code>, but hyper can). Should we refine the spec to allow this behavior?</p>\n</blockquote>",
        "id": 465577384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724796248
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313667913\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>We'll also need some way for the guest to _require_ HTTP/2.</p>\n<p>And yeah, I'd definitely be in favor of making wasi-http gRPC-compatible!</p>\n</blockquote>",
        "id": 465578535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724796845
    },
    {
        "content": "<p>lukewagner <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313705362\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>Yes, agreed on the goal of making wasi-http gRPC-compatible; that has been a goal since the beginning (and the reason we have <code>trailers</code> in the first place).</p>\n<p>The goal of putting <code>TE</code> in the definitely-forbidden list is so that the host is empowered to set this as a transport-/implementation-detail (similar to <code>Transport-Encoding</code>).  Could we perhaps have some \"expect-trailers\" flag on <code>outgoing-request</code> that clients can set that tells the host impl to both set <code>TE: trailers</code> and also require H2 (or, reading <a href=\"https://www.rfc-editor.org/rfc/rfc9110#section-6.5.1\">RFC 9110 6.5.1</a>, maybe it even works for HTTP/1.1?).</p>\n</blockquote>",
        "id": 465582390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724799048
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2313712581\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>I think the trailers issue and the \"require H2\" issue are somewhat orthogonal.  The latter is because gRPC <a href=\"https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md\">is defined to use HTTP/2 specifically</a>.</p>\n</blockquote>",
        "id": 465583324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724799556
    },
    {
        "content": "<p>pavelsavara <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2314463897\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<p>This will be impossible or interesting in JCO because of browser <code>fetch</code> limitations.</p>\n</blockquote>",
        "id": 465657394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724828055
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538#issuecomment-2315155153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7538\">PR #7538</a>:</p>\n<blockquote>\n<blockquote>\n<p>This will be impossible or interesting in JCO because of browser <code>fetch</code> limitations.</p>\n</blockquote>\n<p>That's true, but a wasi-aockets-based solution would also be difficult or impossible.  The grpc-web protocol exists specifically to handle the browser case, so presumably an app intended to be maximally portable would be prepared to fall back to that.</p>\n</blockquote>",
        "id": 465744577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1724847097
    }
]