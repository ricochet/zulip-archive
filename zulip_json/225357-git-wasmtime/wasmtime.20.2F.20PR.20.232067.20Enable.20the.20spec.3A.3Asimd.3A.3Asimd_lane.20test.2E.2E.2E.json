[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067\">PR #2067</a> from <code>simd_lane</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR enables the <code>spec::simd::simd_lane</code> test for AArch64. Of particular note is that it was necessary to make compromises in the <code>Shuffle</code> implementation because the <code>TBL</code> instruction requires consecutive registers for the table.</p>\n</blockquote>",
        "id": 204804925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595514753
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#pullrequestreview-456137299\">PR Review</a>.</p>",
        "id": 205169501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595884724
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#discussion_r461171684\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could we expand these doc comments (on <code>VecTbl</code> and <code>VecTbl2</code>) a bit? I went to the manual to understand what tbl/tbx do; but it would be helpful to summarize. Especially the <code>is_extension</code> bit that alters the way that <code>rd</code> is treated (full overwrite vs. conditional one), and the requirement that <code>rn2</code> is immediately after <code>rn</code> for <code>VecTbl2</code>.</p>\n</blockquote>",
        "id": 205169502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595884724
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#pullrequestreview-456137299\">PR Review</a>.</p>",
        "id": 205169503,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595884724
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#discussion_r461174253\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'd prefer for this helper to retain the <code>Option&lt;u128&gt;</code> return value -- it forces the caller to handle the wrong-instruction-type case explicitly with something like <code>const_param_to_u128(...).expect(\"Invalid const insn for i128 const\")</code> if it should be infallible, or do something else if the input may or may not be a constant.</p>\n<p>Actually, ideally, we'd handle <code>u128</code> constants with the same machinery as <code>u64</code> ones, via the <code>constant</code> field on <code>LowerCtx::get_input()</code>'s returned information. This would let us dedup and handle constant pools in the machine-independent code. I'm happy to defer that to later, though!</p>\n</blockquote>",
        "id": 205169504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595884724
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#pullrequestreview-458752190\">PR Review</a>.</p>",
        "id": 205531676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596142750
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#discussion_r463267737\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Just to check my understanding of your idea (otherwise I'd go for the simpler solution for the time being) - I don't think that it would help us for <code>Opcode::Shuffle</code> because the mask is not an input from the point of view of <code>LowerCtx::get_input()</code> (<code>Opcode::Vconst</code> is different, of course).</p>\n<p>As for the constant pool improvements - yes, I was keeping that in mind and I think that concentrating the constant handling in as few places as possible would help eventually, hence why I made the changes to this helper. In fact I don't think I understand the practical distinction between <code>DataFlowGraph::constants</code> and <code>DataFlowGraph::immediates</code> - at least in the cases of <code>Opcode::Vconst</code> and <code>Opcode::Shuffle</code> the handling is pretty much equivalent.</p>\n</blockquote>",
        "id": 205531677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596142750
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#pullrequestreview-458880312\">PR Review</a>.</p>",
        "id": 205552264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596162418
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067#discussion_r463372667\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, I am fine with the design suggested in the first paragraph -- just return <code>Option&lt;u128&gt;</code>. I need to do more work to make use of the constant-pool functionality in <code>MachBuffer</code>, so we can revisit this later.</p>\n</blockquote>",
        "id": 205552265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596162418
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067\">PR #2067</a> from <code>simd_lane</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR enables the <code>spec::simd::simd_lane</code> test for AArch64. Of particular note is that it was necessary to make compromises in the <code>Shuffle</code> implementation because the <code>TBL</code> instruction requires consecutive registers for the table.</p>\n</blockquote>",
        "id": 205919415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596554035
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067\">PR #2067</a> from <code>simd_lane</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR enables the <code>spec::simd::simd_lane</code> test for AArch64. Of particular note is that it was necessary to make compromises in the <code>Shuffle</code> implementation because the <code>TBL</code> instruction requires consecutive registers for the table.</p>\n</blockquote>",
        "id": 206130004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596714202
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2067\">PR #2067</a>.</p>",
        "id": 206172309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596735236
    }
]