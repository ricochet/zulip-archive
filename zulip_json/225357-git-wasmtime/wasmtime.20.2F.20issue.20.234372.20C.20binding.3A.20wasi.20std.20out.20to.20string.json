[
    {
        "content": "<p>ShuP1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Rust library can bind WritePipe to WasiCtx stdout which can be far simpler and effective than OS files went dealing with multiple short-lived instances.</p>\n<p>It is not currently possible with C/C++ bindings</p>\n<h4>Benefit</h4>\n<ul>\n<li>Avoid useless error-prone and slow interactions by filesystem</li>\n<li>Allow simpler integration in freestanding targets</li>\n</ul>\n<h4>Implementation</h4>\n<p>Leverage existing <a href=\"https://docs.rs/wasi-common/0.38.1/wasi_common/index.html\">wasi_common</a>::<a href=\"https://docs.rs/wasi-common/0.38.1/wasi_common/pipe/index.html\">pipe</a>::<a href=\"https://docs.rs/wasi-common/0.38.1/wasi_common/pipe/struct.WritePipe.html\">WritePipe</a> and ReadPipe on the rust side to implemented a binding in <code>c-api</code> crate.</p>\n<h4>Alternatives</h4>\n<p>Export some basic filesystem operations in c binding<br>\n</p>\n</blockquote>",
        "id": 288335844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656866074
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Rust library can bind WritePipe to WasiCtx stdout which can be far simpler and effective than OS files went dealing with multiple short-lived instances.</p>\n<p>It is not currently possible with C/C++ bindings</p>\n<h4>Benefit</h4>\n<ul>\n<li>Avoid useless error-prone and slow interactions by filesystem</li>\n<li>Allow simpler integration in freestanding targets</li>\n</ul>\n<h4>Implementation</h4>\n<p>Leverage existing <a href=\"https://docs.rs/wasi-common/0.38.1/wasi_common/index.html\">wasi_common</a>::<a href=\"https://docs.rs/wasi-common/0.38.1/wasi_common/pipe/index.html\">pipe</a>::<a href=\"https://docs.rs/wasi-common/0.38.1/wasi_common/pipe/struct.WritePipe.html\">WritePipe</a> and ReadPipe on the rust side to implemented a binding in <code>c-api</code> crate.</p>\n<h4>Alternatives</h4>\n<p>Export some basic filesystem operations in c binding<br>\n</p>\n</blockquote>",
        "id": 288691892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657123060
    },
    {
        "content": "<p>gzurl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372#issuecomment-1206390646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<p>+1 for this feature.</p>\n<p>When embedding Wasmtime in C (or C++), and enabling WASI extensions for a Wasm module, there is no way to capture stdout into a string. The only alternative seems to use [wasi.h]wasi_config_set_stdout_file(), which brings many other drawbacks (ie: no buffering, slow down, etc.)</p>\n</blockquote>",
        "id": 292146707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659702538
    },
    {
        "content": "<p>guregu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372#issuecomment-1296592355\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<p>Is this the blocker issue for <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/34\">https://github.com/bytecodealliance/wasmtime-go/issues/34</a> and <a href=\"https://github.com/bytecodealliance/wasmtime-py/issues/34\">https://github.com/bytecodealliance/wasmtime-py/issues/34</a>? (cc @alexcrichton)</p>\n<p>I would love to switch to wasmtime for my projects but this is preventing me from doing so.<br>\nWe also need the ability to set a string for stdin as well. I'm not sure if there is a separate issue for that.</p>\n</blockquote>",
        "id": 307042066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667197216
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372#issuecomment-1297253938\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<p>Yes this is required for those issues.</p>\n</blockquote>",
        "id": 307133679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667229744
    },
    {
        "content": "<p>ShuP1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372#issuecomment-1300622979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<p>The binding for <code>stdout</code>/<code>stderr</code> is a bit more complicated</p>\n<p>First this api needs to return a new opaque struct for retrieve output after <code>store</code> drop.</p>\n<p>Furthermore there is 2 properties of <code>WritePipe</code> than should probably be accessible:</p>\n<ul>\n<li>bounded or not:<ul>\n<li>provide a <code>&amp;mut [u8]</code> for preallocated bounded size</li>\n<li>use an internal <code>Vec&lt;u8&gt;</code> for unpredictable unbounded size</li>\n</ul>\n</li>\n<li>shared: <em>(note: internally buffer is always in <code>Arc&lt;RwLock&lt;T&gt;&gt;</code>)</em><ul>\n<li><a href=\"https://docs.rs/wasi-common/latest/wasi_common/pipe/struct.WritePipe.html#method.new_in_memory\">WritePipe::new_in_memory</a> can only be read after <code>store</code> drop</li>\n<li><a href=\"https://docs.rs/wasi-common/latest/wasi_common/pipe/struct.WritePipe.html#method.from_shared\">WritePipe::from_shared</a> allows to read between function calls</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 307545889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667401567
    },
    {
        "content": "<p>ShuP1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372#issuecomment-1300640999\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4372\">issue #4372</a>:</p>\n<blockquote>\n<p>Side question: is <code>stdin</code> <em>streaming</em> a desired feature ?</p>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">wasi_read_pipe_t</span><span class=\"w\"> </span><span class=\"n\">in</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">wasi_config_set_stdin_pipe</span><span class=\"p\">(</span><span class=\"n\">wasi_config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">in</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"n\">wasi_read_pipe_write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">binary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime_func_call</span><span class=\"p\">(...);</span><span class=\"w\"> </span><span class=\"c1\">// consume stdin</span>\n<span class=\"n\">wasi_read_pipe_write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">binary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasmtime_func_call</span><span class=\"p\">(...);</span><span class=\"w\"></span>\n<span class=\"n\">wasi_read_pipe_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">in</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 307547677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667401970
    }
]