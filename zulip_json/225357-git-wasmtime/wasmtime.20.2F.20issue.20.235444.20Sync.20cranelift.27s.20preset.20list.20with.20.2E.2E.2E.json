[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Cranelift already has a bunch of presets for cpu families. It doesn't include newer cpu families though. This is a request to also add those newer cpu families.</p>\n<h4>Benefit</h4>\n<p>This allows passing the rustc <code>-Ctarget-cpu</code> argument directly to Cranelift in cg_clif without requiring a map from LLVM cpu name to Cranelift preset.</p>\n</blockquote>",
        "id": 316028039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671107386
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Cranelift already has a bunch of presets for cpu families. It doesn't include newer cpu families though. This is a request to also add those newer cpu families.</p>\n<h4>Benefit</h4>\n<p>This allows passing the rustc <code>-Ctarget-cpu</code> argument directly to Cranelift in cg_clif without requiring a map from LLVM cpu name to Cranelift preset.</p>\n</blockquote>",
        "id": 316086330,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671122403
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1353376065\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>Sounds reasonable to me!</p>\n<p>Do our existing names already match LLVM's names? If any don't, I think we should keep the current names as aliases in addition to the LLVM names.</p>\n<p>I'd also encourage whoever implements this to leave a comment in each relevant file in <code>cranelift/codegen/meta/src/isa/</code> with a link to the corresponding source in LLVM.</p>\n<p>@bjorn3, I'm labeling this as a \"good first issue\". If you'd like somebody else to take it on, could you comment here with links to the best sources for LLVM's CPU family names?</p>\n</blockquote>",
        "id": 316086670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671122492
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1353419992\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do our existing names already match LLVM's names? If any don't, I think we should keep the current names as aliases in addition to the LLVM names.</p>\n</blockquote>\n<p>I believe they do at least for x86_64.</p>\n<blockquote>\n<p>If you'd like somebody else to take it on, could you comment here with links to the best sources for LLVM's CPU family names?</p>\n</blockquote>\n<p>For x86/x86_64 this is: <a href=\"https://github.com/llvm/llvm-project/blob/d4493dd1ed58ac3f1eab0c4ca6e363e2b15bfd1c/llvm/lib/Target/X86/X86.td#L1300-L1643\">https://github.com/llvm/llvm-project/blob/d4493dd1ed58ac3f1eab0c4ca6e363e2b15bfd1c/llvm/lib/Target/X86/X86.td#L1300-L1643</a> The actual feature lists are declared in the section above.</p>\n</blockquote>",
        "id": 316093515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671124297
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1353455867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>A thought: would it make sense to have variants/architecture levels for x86 in <code>target-lexicon</code>, the same way it seems to have these for at least ARM, RISC-V and a few others? I'm definitely in favor of de-facto standardization in this case; there's no reason to try to define a different view of the world than what LLVM does. But the place for that might be in a crate whose job is to provide a taxonomy of targets :-)</p>\n</blockquote>",
        "id": 316097488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671125307
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1353461593\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>target-lexicon parses rustc target triples. Rustc target triples distinguish between variants for arm, riscv and a couple of others, but they do not distinguish between target levels on x86_64 and only basic difference on x86 (i586 without sse and i686 with sse). These variants where rustc distinguishes between them generally affect the abi or are significant perf improvements for regular usecases.</p>\n</blockquote>",
        "id": 316098703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671125618
    },
    {
        "content": "<p>MozarellaMan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1359367387\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>Hey! I was looking at giving this a try, I just have a few questions. If I'm understanding this right - it would be basically making sure cranelift has at least these presets that rustc (on x86_64) has:</p>\n<p>From running: <code>rustc --print target-cpus</code></p>\n<blockquote>\n<p><code>alderlake\n    amdfam10\n    athlon\n    athlon-4\n    athlon-fx\n    athlon-mp\n    athlon-tbird\n    athlon-xp\n    athlon64\n    athlon64-sse3\n    atom\n    barcelona\n    bdver1\n    bdver2\n    bdver3\n    bdver4\n    bonnell\n    broadwell\n    btver1\n    btver2\n    c3\n    c3-2\n    cannonlake\n    cascadelake\n    cooperlake\n    core-avx-i\n    core-avx2\n    core2\n    corei7\n    corei7-avx\n    generic\n    geode\n    goldmont\n    goldmont-plus\n    haswell\n    i386\n    i486\n    i586\n    i686\n    icelake-client\n    icelake-server\n    ivybridge\n    k6\n    k6-2\n    k6-3\n    k8\n    k8-sse3\n    knl\n    knm\n    lakemont\n    nehalem\n    nocona\n    opteron\n    opteron-sse3\n    penryn\n    pentium\n    pentium-m\n    pentium-mmx\n    pentium4\n    pentium4m\n    pentiumpro\n    prescott\n    rocketlake\n    sandybridge\n    sapphirerapids\n    silvermont\n    skx\n    skylake\n    skylake-avx512\n    slm\n    tigerlake\n    tremont\n    westmere\n    winchip-c6\n    winchip2\n    x86-64\n    x86-64-v2\n    x86-64-v3\n    x86-64-v4\n    yonah\n    znver1\n    znver2\n    znver3</code></p>\n</blockquote>\n<p>From @bjorn3's link I can compare what feature settings LLVM has and what settings cranelift has in <code>cranelift/codegen/meta/src/isa/</code>. It looks like this would require a few new settings in cranelift. </p>\n<p>For example LLVM has: <code>def FeatureSGX     : SubtargetFeature&lt;\"sgx\", \"HasSGX\", \"true\",\n                                      \"Enable Software Guard Extensions\"&gt;;</code><br>\nWhich isn't present in cranelift's settings... but from what I understand these feature settings are only useful if cranelift actually uses them right?</p>\n<p>Also, each <code>BoolSettingIndex</code> in <code>cranelift/codegen/meta/src/isa/</code> has a <code>comment</code> field - what is that?</p>\n</blockquote>",
        "id": 316952169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671543550
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1359424203\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>I think adding new features isn't necessary until Cranelift actually starts using them.</p>\n<p>The comment argument seems to indicate which cpuid bit determines if the feature is available or not. Not sure if it is used anywhere though.</p>\n</blockquote>",
        "id": 316959392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671545505
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1359829565\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>I agree, don't bother adding new features; we should only add them when we have a use for them.</p>\n<p>The <code>comment</code> field appears to be literally used in a Rust doc comment in the generated source code. The <code>Flags</code> types that have those doc comments apparently aren't visible on <a href=\"http://docs.rs\">docs.rs</a> though, so that's not super helpful. Figuring out why they're missing would be nice...</p>\n</blockquote>",
        "id": 316998762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671556771
    },
    {
        "content": "<p>MozarellaMan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1363077924\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>From looking at this a bit more, it seems like a ton of the target cpus in LLVM's list would basically be the same as the baseline cranelift preset. Is it worth adding these? Or just the newer CPU familes that use at least one of the features cranelift uses?</p>\n</blockquote>",
        "id": 317405920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671727142
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1363085037\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it worth adding these?</p>\n</blockquote>\n<p>Yes, otherwise passing <code>-Ctarget-cpu=some_cpu_that_wasnt_added_as_preset</code> to rustc when using cg_clif would still fail due to the missing preset. Older ones are less of a priority though, so if you consider it too much work to add all, I did be happy if you only add newer ones too.</p>\n</blockquote>",
        "id": 317406939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671727417
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1382597172\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>Fixed by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5490\">https://github.com/bytecodealliance/wasmtime/pull/5490</a></p>\n</blockquote>",
        "id": 321281573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673654810
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Cranelift already has a bunch of presets for cpu families. It doesn't include newer cpu families though. This is a request to also add those newer cpu families.</p>\n<h4>Benefit</h4>\n<p>This allows passing the rustc <code>-Ctarget-cpu</code> argument directly to Cranelift in cg_clif without requiring a map from LLVM cpu name to Cranelift preset.</p>\n</blockquote>",
        "id": 321281574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673654810
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1382599792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>I wasn't going to close this yet since so far we only have the Intel CPU presets, not AMD or other vendors. But at least we have a solid idea of how to finish off the work now!</p>\n</blockquote>",
        "id": 321282121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673655230
    },
    {
        "content": "<p>jameysharp reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Cranelift already has a bunch of presets for cpu families. It doesn't include newer cpu families though. This is a request to also add those newer cpu families.</p>\n<h4>Benefit</h4>\n<p>This allows passing the rustc <code>-Ctarget-cpu</code> argument directly to Cranelift in cg_clif without requiring a map from LLVM cpu name to Cranelift preset.</p>\n</blockquote>",
        "id": 321282122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673655231
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1382681233\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>Right, forgot about AMD.</p>\n</blockquote>",
        "id": 321309580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673680817
    },
    {
        "content": "<p>MozarellaMan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-1382789984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>Will be looking at doing the AMD ones now, sorry I just started with Intel ones to get feedback on the approach :)</p>\n</blockquote>",
        "id": 321368094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673707694
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Cranelift already has a bunch of presets for cpu families. It doesn't include newer cpu families though. This is a request to also add those newer cpu families.</p>\n<h4>Benefit</h4>\n<p>This allows passing the rustc <code>-Ctarget-cpu</code> argument directly to Cranelift in cg_clif without requiring a map from LLVM cpu name to Cranelift preset.</p>\n</blockquote>",
        "id": 446312254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719083505
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444#issuecomment-2184159485\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5444\">issue #5444</a>:</p>\n<blockquote>\n<p>Fixed by <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5575\">https://github.com/bytecodealliance/wasmtime/pull/5575</a></p>\n</blockquote>",
        "id": 446312256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719083505
    }
]