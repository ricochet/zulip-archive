[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">Issue #1749</a>:</p>\n<blockquote>\n<p>Right now, to check if for interrupts:</p>\n<ul>\n<li>we load the interrupts pointer from the vmctx</li>\n<li>we dereference it to get the maybe-interrupted value</li>\n<li>we compare that against the interrupt-has-been-requested value</li>\n<li>and finally we conditionally trap when the comparison returned true.</li>\n</ul>\n<p>There is no fast/slow path split here. Interrupts happen rarely, but we always perform those four steps.</p>\n<p>By using virtual memory tricks, we can create a fast path for the common case when no interrupts are requested. We reserve a page of memory as the \"interrupt page\" and point to it from the vmctx. This replaces the current interrupt pointer on the vmctx. When interrupts are not requested, this page is readable. When an interrupt is requested, remove the readable bit via mprotect, and wait.</p>\n<p>Now, all that our loop headers do is:</p>\n<ul>\n<li>load the pointer to the interrupts page from the vmctx</li>\n<li>(attempt to) read the first byte from the interrupts page</li>\n</ul>\n<p>When the interrupts page is readable and an interrupt is not requested, we just have those two loads as our fast path.</p>\n<p>When the interrupts page is not readable because an interrupt is requested, a signal is generated, so our signal handler needs to recognize+handle this case.</p>\n<p>IIRC, essentially this same trick is used in some JVMs for synchronizing at safepoints for stop-the-world GC phases (e.g. root marking).</p>\n<p>The one open question is how to detect stack overflows with this setup, since our interrupt handling and stack overflow code is very intertwined. Not totally sure here.</p>\n<p>+cc @alexcrichton </p>\n</blockquote>",
        "id": 198552055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590267912
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">Issue #1749</a>:</p>\n<blockquote>\n<p>Right now, to check if for interrupts:</p>\n<ul>\n<li>we load the interrupts pointer from the vmctx</li>\n<li>we dereference it to get the maybe-interrupted value</li>\n<li>we compare that against the interrupt-has-been-requested value</li>\n<li>and finally we conditionally trap when the comparison returned true.</li>\n</ul>\n<p>There is no fast/slow path split here. Interrupts happen rarely, but we always perform those four steps.</p>\n<p>By using virtual memory tricks, we can create a fast path for the common case when no interrupts are requested. We reserve a page of memory as the \"interrupt page\" and point to it from the vmctx. This replaces the current interrupt pointer on the vmctx. When interrupts are not requested, this page is readable. When an interrupt is requested, remove the readable bit via mprotect, and wait.</p>\n<p>Now, all that our loop headers do is:</p>\n<ul>\n<li>load the pointer to the interrupts page from the vmctx</li>\n<li>(attempt to) read the first byte from the interrupts page</li>\n</ul>\n<p>When the interrupts page is readable and an interrupt is not requested, we just have those two loads as our fast path.</p>\n<p>When the interrupts page is not readable because an interrupt is requested, a signal is generated, so our signal handler needs to recognize+handle this case.</p>\n<p>IIRC, essentially this same trick is used in some JVMs for synchronizing at safepoints for stop-the-world GC phases (e.g. root marking).</p>\n<p>The one open question is how to detect stack overflows with this setup, since our interrupt handling and stack overflow code is very intertwined. Not totally sure here.</p>\n<p>+cc @alexcrichton </p>\n</blockquote>",
        "id": 198552056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590267913
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">Issue #1749</a>:</p>\n<blockquote>\n<p>Right now, to check if for interrupts:</p>\n<ul>\n<li>we load the interrupts pointer from the vmctx</li>\n<li>we dereference it to get the maybe-interrupted value</li>\n<li>we compare that against the interrupt-has-been-requested value</li>\n<li>and finally we conditionally trap when the comparison returned true.</li>\n</ul>\n<p>There is no fast/slow path split here. Interrupts happen rarely, but we always perform those four steps.</p>\n<p>By using virtual memory tricks, we can create a fast path for the common case when no interrupts are requested. We reserve a page of memory as the \"interrupt page\" and point to it from the vmctx. This replaces the current interrupt pointer on the vmctx. When interrupts are not requested, this page is readable. When an interrupt is requested, remove the readable bit via mprotect, and wait.</p>\n<p>Now, all that our loop headers do is:</p>\n<ul>\n<li>load the pointer to the interrupts page from the vmctx</li>\n<li>(attempt to) read the first byte from the interrupts page</li>\n</ul>\n<p>When the interrupts page is readable and an interrupt is not requested, we just have those two loads as our fast path.</p>\n<p>When the interrupts page is not readable because an interrupt is requested, a signal is generated, so our signal handler needs to recognize+handle this case.</p>\n<p>IIRC, essentially this same trick is used in some JVMs for synchronizing at safepoints for stop-the-world GC phases (e.g. root marking).</p>\n<p>The one open question is how to detect stack overflows with this setup, since our interrupt handling and stack overflow code is very intertwined. Not totally sure here.</p>\n<p>+cc @alexcrichton </p>\n</blockquote>",
        "id": 198552057,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590267913
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">Issue #1749</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/957677c6f50f57430abe06977dbb9c1b839b5b69/crates/environ/src/func_environ.rs#L1272-L1296\">Right now</a>, to check if for interrupts:</p>\n<ul>\n<li>we load the interrupts pointer from the vmctx</li>\n<li>we dereference it to get the maybe-interrupted value</li>\n<li>we compare that against the interrupt-has-been-requested value</li>\n<li>and finally we conditionally trap when the comparison returned true.</li>\n</ul>\n<p>There is no fast/slow path split here. Interrupts happen rarely, but we always perform those four steps.</p>\n<p>By using virtual memory tricks, we can create a fast path for the common case when no interrupts are requested. We reserve a page of memory as the \"interrupt page\" and point to it from the vmctx. This replaces the current interrupt pointer on the vmctx. When interrupts are not requested, this page is readable. When an interrupt is requested, remove the readable bit via mprotect, and wait.</p>\n<p>Now, all that our loop headers do is:</p>\n<ul>\n<li>load the pointer to the interrupts page from the vmctx</li>\n<li>(attempt to) read the first byte from the interrupts page</li>\n</ul>\n<p>When the interrupts page is readable and an interrupt is not requested, we just have those two loads as our fast path.</p>\n<p>When the interrupts page is not readable because an interrupt is requested, a signal is generated, so our signal handler needs to recognize+handle this case.</p>\n<p>IIRC, essentially this same trick is used in some JVMs for synchronizing at safepoints for stop-the-world GC phases (e.g. root marking).</p>\n<p>The one open question is how to detect stack overflows with this setup, since our interrupt handling and stack overflow code is very intertwined. Not totally sure here.</p>\n<p>+cc @alexcrichton </p>\n</blockquote>",
        "id": 198552074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590267958
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749#issuecomment-634051909\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1749\">Issue #1749</a>:</p>\n<blockquote>\n<p>Seems like a great idea! One thing that would be good to measure before committing to this is the overhead of the current strategy to see how much of an improvement this trick is. That way if it's like a 20% speedup even if we can't figure it out for stack checks it seems worthwhile.</p>\n<p>For stack checks I think they'll fundamentally always need to have a comparison of some kind, but we could still have stack checks and interrupt checks in loops check the same memory location. We could basically \"malloc a word for the stack check limit\" by allocating a page from the OS, and then on interrupt we unmap it.</p>\n</blockquote>",
        "id": 198767599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590502449
    }
]