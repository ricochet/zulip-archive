[
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>Hi everyone,</p>\n<p>This is asking for help/advice. I have JIT struct very similar to the one in the toy demo. I only generate code that builds a wrapper function that only calls a rust function. Mainly following those examples <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs\">(jit-minimal)</a> and (<a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/pull/60/files\">cranelift-call rust function</a>). Now I instantiate one single instance for each thread from that JIT struct and use each independently only in their own thread to call the function through the pointer I get from that respective JITModule instance. The problem is that I'm getting segmentation faults randomly (as in sometimes they happen sometimes not) when I try to call the functions through the returned pointers and this happens only in multi threaded testing, I never had this issue a single time when I tested my code in single threaded environment. Are there any limitations to using the JITModule in multithreaded environments or any common pitfalls that I should watch for? If needed, I can try to write a minimal example (although wouldn't be very different from the samples above). </p>\n<p>I even tried without calling free_memory at all and still the same problem (only when running in multiple threads as mentioned)</p>\n<p>Random guessing, Is there anything shared across JITModules? Perhaps something related to those relocation tables?</p>\n</blockquote>",
        "id": 301510902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664477884
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>Hi everyone,</p>\n<p>This is asking for help/advice. I have JIT struct very similar to the one in the toy demo. I only generate code that builds a wrapper function that only calls a rust function. Mainly following those examples <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs\">jit-minimal</a> and <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/pull/60/files\">cranelift-call rust function</a>. Now I instantiate one single instance for each thread from that JIT struct and use each independently only in their own thread to call the function through the pointer I get from that respective JITModule instance. The problem is that I'm getting segmentation faults randomly (as in sometimes they happen sometimes not) when I try to call the functions through the returned pointers and this happens only in multi threaded testing, I never had this issue a single time when I tested my code in single threaded environment. Are there any limitations to using the JITModule in multithreaded environments or any common pitfalls that I should watch for? If needed, I can try to write a minimal example (although wouldn't be very different from the samples above). </p>\n<p>I even tried without calling free_memory at all and still the same problem (only when running in multiple threads as mentioned)</p>\n<p>Random guessing, Is there anything shared across JITModules? Perhaps something related to those relocation tables?</p>\n</blockquote>",
        "id": 301511180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664477972
    },
    {
        "content": "<p>mokhaled2992 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>Hi everyone,</p>\n<p>This is asking for help/advice. I have JIT struct very similar to the one in the toy demo. I only generate code that builds a wrapper function that only calls a rust function. Mainly following those examples; <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs\">jit-minimal</a> and <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/pull/60/files\">cranelift-call rust function</a>. Now I instantiate one single instance for each thread from that JIT struct and use each independently only in their own thread to call the function through the pointer I get from that respective JITModule instance. The problem is that I'm getting segmentation faults randomly (as in sometimes they happen sometimes not) when I try to call the functions through the returned pointers and this happens only in multi threaded testing, I never had this issue a single time when I tested my code in single threaded environment. Are there any limitations to using the JITModule in multithreaded environments or any common pitfalls that I should watch for? If needed, I can try to write a minimal example (although wouldn't be very different from the samples above). </p>\n<p>I even tried without calling free_memory at all and still the same problem (only when running in multiple threads as mentioned)</p>\n<p>Random guessing, Is there anything shared across JITModules? Perhaps something related to those relocation tables?</p>\n</blockquote>",
        "id": 301511228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664477987
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issuecomment-1262709377\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>I think incorrect premissions is the most likely issue. If selinux-fix fixes it, incorrect permissions is almost definitively the issue. Not quite sure why that would happen without selinux-fix though.</p>\n</blockquote>",
        "id": 301513980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664478945
    },
    {
        "content": "<p>mokhaled2992 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issuecomment-1263732125\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>@bjorn3  Thanks man <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️. The <code>selinux-fix</code> did the job. Perhaps a note somewhere in the demo or in the README abot this feature flag would be great and saves alot of frustration :)</p>\n</blockquote>",
        "id": 301676782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664552489
    },
    {
        "content": "<p>mokhaled2992 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issuecomment-1263732125\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>@bjorn3  Thanks man <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️. The <code>selinux-fix</code> did the job. Perhaps a note somewhere in the demo or in the README about this feature flag would be great and saves alot of frustration :)</p>\n</blockquote>",
        "id": 301676849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664552509
    },
    {
        "content": "<p>mokhaled2992 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>Hi everyone,</p>\n<p>This is asking for help/advice. I have JIT struct very similar to the one in the toy demo. I only generate code that builds a wrapper function that only calls a rust function. Mainly following those examples; <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs\">jit-minimal</a> and <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/pull/60/files\">cranelift-call rust function</a>. Now I instantiate one single instance for each thread from that JIT struct and use each independently only in their own thread to call the function through the pointer I get from that respective JITModule instance. The problem is that I'm getting segmentation faults randomly (as in sometimes they happen sometimes not) when I try to call the functions through the returned pointers and this happens only in multi threaded testing, I never had this issue a single time when I tested my code in single threaded environment. Are there any limitations to using the JITModule in multithreaded environments or any common pitfalls that I should watch for? If needed, I can try to write a minimal example (although wouldn't be very different from the samples above). </p>\n<p>I even tried without calling free_memory at all and still the same problem (only when running in multiple threads as mentioned)</p>\n<p>Random guessing, Is there anything shared across JITModules? Perhaps something related to those relocation tables?</p>\n</blockquote>",
        "id": 301676932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664552524
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980#issuecomment-1263769281\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4980\">issue #4980</a>:</p>\n<blockquote>\n<p>Opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4986\">https://github.com/bytecodealliance/wasmtime/issues/4986</a>.</p>\n</blockquote>",
        "id": 301684866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664554697
    }
]