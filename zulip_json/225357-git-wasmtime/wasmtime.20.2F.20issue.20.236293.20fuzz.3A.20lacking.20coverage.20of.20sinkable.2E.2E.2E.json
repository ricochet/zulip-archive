[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293\">issue #6293</a>:</p>\n<blockquote>\n<p>@alexcrichton sent me a [coverage report] for the ISLE-generated lowerings for x64. I noticed by searching for \"sinkable_load\" that various operations (FP?) are not using the case where the load is sunk. In the Wasmtime meeting, @alexcrichton pointed out that the fact that we don't know whether the address is aligned could be preventing load-sinking here, but recall ([here]) that VEX- and EVEX-encoded instructions do not have the alignment restriction. Since @alexcrichton has been adding VEX-encoded versions of many instructions, I would think that we should be able to load-sink in that case (i.e., \"can load sink MINUS alignment restriction\" AND \"have AVX\").</p>\n<p>[coverage report]: <a href=\"https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html\">https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html</a><br>\n[here]: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4767#issuecomment-1432149408\">https://github.com/bytecodealliance/wasmtime/issues/4767#issuecomment-1432149408</a></p>\n<p>I don't know what to do with this issue exactly, but @fitzgen thought I should record it as one. As mentioned in the Wasmtime meeting, it would be great to have better ways to find coverage gaps. This is at least one x64 lowering gap that I noticed (there are likely others) so here's an issue!</p>\n</blockquote>",
        "id": 353391349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682614120
    },
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293\">issue #6293</a>:</p>\n<blockquote>\n<p>@alexcrichton sent me a [coverage report] for the ISLE-generated lowerings for x64. I noticed by searching for \"sinkable_load\" that various operations (FP?) are not using the case where the load is sunk. In the Wasmtime meeting, @alexcrichton pointed out that the fact that we don't know whether the address is aligned could be preventing load-sinking here, but recall ([here]) that VEX- and EVEX-encoded instructions do not have the alignment restriction. Since @alexcrichton has been adding VEX-encoded versions of many instructions, I would think that we should be able to load-sink in that case (i.e., \"can load sink MINUS alignment restriction\" AND \"have AVX\").</p>\n<p>[coverage report]: <a href=\"https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html\">https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html</a><br>\n[here]: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4767#issuecomment-1432149408\">https://github.com/bytecodealliance/wasmtime/issues/4767#issuecomment-1432149408</a></p>\n<p>I don't know what to do with this issue exactly, but @fitzgen thought I should record it as one. As mentioned in the Wasmtime meeting, it would be great to have better ways to find coverage gaps. This is at least one x64 lowering gap that I noticed (there are likely others) so here's an issue!</p>\n</blockquote>",
        "id": 353391460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682614135
    },
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293\">issue #6293</a>:</p>\n<blockquote>\n<p>@alexcrichton sent me a [coverage report] for the ISLE-generated lowerings for x64. I noticed by searching for \"sinkable_load\" that various operations (FP?) are not using the case where the load is sunk. In the Wasmtime meeting, @alexcrichton pointed out that the fact that we don't know whether the address is aligned could be preventing load-sinking here, but recall ([here]) that VEX- and EVEX-encoded instructions do not have the alignment restriction. Since @alexcrichton has been adding VEX-encoded versions of many instructions, I would think that we should be able to load-sink in that case (i.e., \"can load sink MINUS alignment restriction\" AND \"have AVX\").</p>\n<p>[coverage report]: <a href=\"https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html\">https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html</a><br>\n[here]: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4767#issuecomment-1432149408\">https://github.com/bytecodealliance/wasmtime/issues/4767#issuecomment-1432149408</a></p>\n<p>I don't know what to do with this issue exactly, but @fitzgen thought I should record it as one. As mentioned in the Wasmtime meeting, it would be great to have better ways to find coverage gaps. This is at least one x64 lowering gap that I noticed (there are likely others) so here's an issue!</p>\n</blockquote>",
        "id": 353391461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682614135
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293#issuecomment-1526024676\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293\">issue #6293</a>:</p>\n<blockquote>\n<p>cc: @cfallin, @jameysharp, @elliottt</p>\n</blockquote>",
        "id": 353391597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682614153
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293#issuecomment-1526033064\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293\">issue #6293</a>:</p>\n<blockquote>\n<p>Here's another dimension to this issue: even when the sinkable loads are used, they are used very infrequently. Why is that?</p>\n<p>E.g., <a href=\"https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html#L12895\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">line</span><span class=\"w\">    </span><span class=\"n\">count</span>\n<span class=\"mi\">12895</span><span class=\"w\">   </span><span class=\"mf\">7.98</span><span class=\"n\">k</span><span class=\"w\">                                   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v38</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">C</span>::<span class=\"n\">unpack_value_array_2</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v37</span><span class=\"p\">);</span>\n<span class=\"mi\">12896</span><span class=\"w\">   </span><span class=\"mf\">7.98</span><span class=\"n\">k</span><span class=\"w\">                                   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v58</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">C</span>::<span class=\"n\">sinkable_load</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v38</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"mi\">12897</span><span class=\"w\">   </span><span class=\"mf\">7.98</span><span class=\"n\">k</span><span class=\"w\">                                   </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v59</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v58</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"mi\">12898</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">                                       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1045</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">constructor_put_in_xmm</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v38</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"mi\">12899</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">                                       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1056</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">constructor_sink_load_to_xmm_mem</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v59</span><span class=\"p\">);</span>\n<span class=\"mi\">12900</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">                                       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1081</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">constructor_x64_mulss</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1045</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1056</span><span class=\"p\">);</span>\n<span class=\"mi\">12901</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">                                       </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v1082</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">constructor_output_xmm</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1081</span><span class=\"p\">);</span>\n<span class=\"mi\">12902</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">                                       </span><span class=\"c1\">// Rule at src/isa/x64/lower.isle line 2189.</span>\n<span class=\"mi\">12903</span><span class=\"w\">   </span><span class=\"mi\">2</span><span class=\"w\">                                       </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v1082</span><span class=\"p\">);</span>\n<span class=\"mi\">12904</span><span class=\"w\">   </span><span class=\"mf\">7.97</span><span class=\"n\">k</span><span class=\"w\">                                   </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The sinkable load is only used a very low percentage of times.</p>\n</blockquote>",
        "id": 353395011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682614603
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293#issuecomment-1526057668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6293\">issue #6293</a>:</p>\n<blockquote>\n<p>As for the frequency issue, I think it may be because it's just so rare to generate the precise shape of load-then-op. That's a pretty wishy-washy excuse though and I wouldn't be confident in it.</p>\n<p>As for lack of sinkable loads in some blocks <a href=\"https://storage.googleapis.com/oss-fuzz-coverage/wasmtime/reports/20230425/linux/src/wasmtime/target/debug/build/cranelift-codegen-d3be7d5f89248fcc/out/isle_x64.rs.html#L12804\">this is one example</a> which is <code>f32x4.add</code> doesn't do anything with sinkable loads. The conditions for this are:</p>\n<ul>\n<li>AVX is enabled</li>\n<li>SIMD is enabled</li>\n<li>SIMD is used with <code>fadd</code> plus a load</li>\n</ul>\n<p>Even with all that in place it looks like <code>f32x4.add</code> alone was only translated 101 times meaning that if we go from the previous 2/7980 hit rate then we basically need to drastically increase the <code>f32x4.add</code> frequence to get it to hit the sinkable load path.</p>\n<p>One aspect here I think is that SIMD is conditionally enabled, whereas <code>f32.add</code> is always enabled, which may end up causing simd to be a bit rarer.</p>\n</blockquote>",
        "id": 353403910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1682615803
    }
]