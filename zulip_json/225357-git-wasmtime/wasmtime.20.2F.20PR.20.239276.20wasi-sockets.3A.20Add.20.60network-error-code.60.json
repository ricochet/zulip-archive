[
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 471213569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726651949
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 471213570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726651949
    },
    {
        "content": "<p>badeend opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a> from <code>badeend:network-error-code</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Implements <a href=\"https://github.com/WebAssembly/wasi-sockets/pull/105\">https://github.com/WebAssembly/wasi-sockets/pull/105</a></p>\n<p>This function downcasts a stream error to a network-related error.<br>\nSimilar to the existing <code>filesystem-error-code</code> and <code>http-error-code</code> functions.</p>\n<p>Unit test is missing because I couldn't figure out a reliable way to fail a TCP stream mid-connection. Suggestions are welcome.</p>\n</blockquote>",
        "id": 471213573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726651949
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 471243839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726661693
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 471243840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726661693
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2358757836\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>Thanks for this! Before I think too hard about a unit test though this PR is the unfortunate victim of \"first proposal to add WITs with <code>@unstable</code>\". As implemented this provides unrestricted access to the <code>@unstable</code> version of the API which is not the intention of the annotation. The theory is that <code>@unstable</code> would translate to some sort of <code>-S</code> flag such as <code>-Snetwork-error-code</code> or something like that. That would be there during development and then when <code>@unstable</code> is turned to stable then <code>-Snetwork-error-code</code> becomes a noop effectively.</p>\n<p>I say that this is an \"unfortunate victim\" because this infrastructure hasn't been built yet. Ideally what needs to happen I think is that the calls to <code>add_to_linker</code> all need to be parameterized by feature flags where the default is the empty set. So in a sense we need a set of flags for all WASI proposals which are passed during the original call to <code>add_to_linker</code> and then that set is built up on the CLI.</p>\n<p>From a technical perspective though this PR otherwise looks good to me. Would you be up for helping out with the infrastructure for plumbing flags through?</p>\n</blockquote>",
        "id": 471284610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726672588
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2358822971\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>I'll give it a try</p>\n</blockquote>",
        "id": 471292169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726674202
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2359187617\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>Do you have any preference on how to thread through the feature names down into the generated code? I have three suggestions so far:</p>\n<ul>\n<li>Add <code>component_model_unstable_features</code> setting to <code>wasmtime::Config</code></li>\n<li>Add <code>unstable_features</code> setting to <code>wasmtime::component::Linker</code></li>\n<li>Add <code>features</code> parameter to generated <code>add_to_linker_*</code> methods and all layers below and above it.</li>\n</ul>\n</blockquote>",
        "id": 471326692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726685607
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2359203517\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>I'd recommend the <code>add_to_linker_*</code> route and it would automatically be used when <code>features</code> is specified in the <code>bindgen!</code> macro (it's a WASI-specific or bindings-specific thing, less about engine state)</p>\n</blockquote>",
        "id": 471328340,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726686152
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 472768289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727295644
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2386784968\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>I'm attempting to only generate the new parameter on add_to_linker  _if_ the bindgen config specifies unstable features. I'm running into a problem when the <code>with</code> option is used to forward to existing interfaces. For example:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/9fc41baefb70c87e767a1cd2a22b961629ecb576/crates/wasi/src/bindings.rs#L161-L166\">https://github.com/bytecodealliance/wasmtime/blob/9fc41baefb70c87e767a1cd2a22b961629ecb576/crates/wasi/src/bindings.rs#L161-L166</a></p>\n<p>Within the bindgen macro I don't know for which of those interfaces I need to forward the <code>features</code> parameter to their respective <code>add_to_linker</code> call.</p>\n<p>One way to make it work is to simply unconditionally add the parameter to every generated add_to_linker function, regardless of wheter its needed or not. But that will be a backwards incompatible change.</p>\n<p>Suggestions?</p>\n</blockquote>",
        "id": 474111314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727810674
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2386912773\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>IIRC there are per-interface <code>add_to_linker</code> functions plus one large \"add everything to the linker\" function. I'd expect that each per-interface function has a flags/options struct as appropriate for the contents of the interface, and then the one large function would take the union of all the options of all the other interfaces. Would that be reasonable to implement?</p>\n<p>Even when <code>with</code> is used we could say that the detection of whether or not the flags are used is independent of <code>with</code> configuration and if the flags type itself lived in the module generated it would be able to reuse the type that <code>with</code> points to I think.</p>\n</blockquote>",
        "id": 474115524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727812174
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2386955645\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>If every interface defines its own fresh options type, then a bindgen! using <code>with</code> must generate a separate parameter for each \"with\"ed interface, right?</p>\n<p>So the example from above would produce</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">add_to_linker</span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Linker</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">clocks_options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">clocks</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">random_options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">random</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">cli_options</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">cli</span><span class=\"p\">::</span><span class=\"n\">Options</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">etc</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 474118029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727813078
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2386984764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>I might bikeshed to a <code>struct WorldOptions { /* all the fields here */ }</code> to avoid needing to remember what order everything is in, but otherwise yeah the top-level function would take all the flags for sure</p>\n</blockquote>",
        "id": 474119655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727813736
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2386992335\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>For the world that could work. But I'm specifically concerned here about the <code>with</code>-included interfaces, which come from a different code generation and don't share the options type of the currently generating world type.</p>\n</blockquote>",
        "id": 474120272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727813987
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2387060264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>Could you detail a bit more how <code>with</code> complicates this? From my perspective there's no extra complications, so I'm not sure what you're meaning. The <code>bindgen!</code> using <code>with</code> still has full WIT type information so should be able to know, even without knowing what was generated, that some of the interfaces on the other end are unstable-gated. That means that it should know that there's an <code>Options</code> type already generated and the <code>with</code> says how to go find that type. Given that and the fact that <code>bindgen!</code> would always generate a fresh the-whole-world's-options-type it seems naively to me like it would work, but I fear I'm missing something.</p>\n<p>One possible piece perhaps is that I'm thinking now that Wasmtime might want to unconditionally always use <code>all_features</code> and remove that macro option entirely. It would then always generate the <code>Options</code> structs for unstable-gated interfaces no matter what, so <code>features</code>/<code>all_features</code> in the macro config would go away.</p>\n</blockquote>",
        "id": 474126211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727816201
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2395388748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<blockquote>\n<p>The bindgen! using <code>with</code> still has full WIT type information so should be able to know, even without knowing what was generated, that some of the interfaces on the other end are unstable-gated. </p>\n</blockquote>\n<p>You're right. I've got it working in: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9381\">https://github.com/bytecodealliance/wasmtime/pull/9381</a></p>\n</blockquote>",
        "id": 475087618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728211414
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 475893349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728486877
    },
    {
        "content": "<p>badeend <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#issuecomment-2402643652\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>:</p>\n<blockquote>\n<p>I've updated the PR with the latest main</p>\n</blockquote>",
        "id": 475895957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728487352
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276#pullrequestreview-2357584792\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 475906619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728489644
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9276\">PR #9276</a>.</p>",
        "id": 475911671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728491037
    }
]