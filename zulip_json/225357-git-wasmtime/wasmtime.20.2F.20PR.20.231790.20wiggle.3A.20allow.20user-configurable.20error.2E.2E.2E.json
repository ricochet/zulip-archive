[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a> from <code>pch/wiggle_error_transforms</code> to <code>master</code>:</p>\n<blockquote>\n<p>One issue we've had with wiggle ergonomics is that we often want to use a rich error type (a Rust enum that uses <code>thiserror::Error</code>, or maybe an <code>anyhow::Error</code>) to write the library code that ends up in an impl of the wiggle-defined module traits. However, those module traits require an error type that corresponds to the witx document.</p>\n<p>Because Rust doesn't have <code>try</code>, there's not a lot of good mechanical ways to automatically replace all uses of a witx document error type like wasi's <code>Errno</code> with a rich type and a conversion function.<br>\nSo, this PR adds a totally opt-in facility to wiggle to perform such a conversion on the user's behalf.</p>\n<p>The new test <code>src/wiggle/tests/errors.rs</code> shows how the types work out on a modified version of the <code>array</code> test. A new optional wiggle proc-macro argument <code>errors</code> gives a mapping of witx identifiers (less the leading <code>$</code>, because proc macro parsing is enough trouble without that) to the user's desired error type, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>wiggle::from_witx!({\n    witx: [&quot;tests/arrays.witx&quot;],\n    ctx: WasiCtx,\n    errors: { errno =&gt; RichError },\n});\n</code></pre></div>\n\n\n<p>When the <code>errors</code> config is provided, a <code>UserErrorConversion</code> trait is defined in <code>types</code> that the user must implement for their ctx type. The method names in this enum are determined mechanically.</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; types::UserErrorConversion for WasiCtx&lt;&#39;a&gt; {\n    fn errno_from_rich_error(&amp;self, _e: RichError) -&gt; types::Errno {\n        unimplemented!();\n    }\n}\n</code></pre></div>\n\n\n<p>The <code>RichError</code> type is then used in place of <code>types::Errno</code> in the witx module traits:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; arrays::Arrays for WasiCtx&lt;&#39;a&gt; {\n    fn populate_excuses(&amp;self, _excuses: &amp;types::ExcuseArray) -&gt; Result&lt;(), RichError&gt; {\n        unimplemented!()\n    }\n   (snip)\n}\n</code></pre></div>\n\n\n<p>Open questions:</p>\n<ul>\n<li>The syntax of the arguments is pretty arbitrary. I wanted to permit full paths to the user's rich error type, but then I ran into a problem figuring out a sensible and unique method name from that, so I punted. Ideally we'd add optional syntax for specifying the method name.</li>\n<li>I wasn't always consistent about what to call this feature in the code - is this an ErrorTransform, is this a UserError? The naming could stand some bikeshedding.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199205696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590782963
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/kubkon\">kubkon</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a>.</p>",
        "id": 199205738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590782977
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/kubkon\">kubkon</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a>.</p>",
        "id": 199205741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590782977
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a> from <code>pch/wiggle_error_transforms</code> to <code>master</code>:</p>\n<blockquote>\n<p>One issue we've had with wiggle ergonomics is that we often want to use a rich error type (a Rust enum that uses <code>thiserror::Error</code>, or maybe an <code>anyhow::Error</code>) to write the library code that ends up in an impl of the wiggle-defined module traits. However, those module traits require an error type that corresponds to the witx document.</p>\n<p>Because Rust doesn't have <code>try</code>, there's not a lot of good mechanical ways to automatically replace all uses of a witx document error type like wasi's <code>Errno</code> with a rich type and a conversion function.<br>\nSo, this PR adds a totally opt-in facility to wiggle to perform such a conversion on the user's behalf.</p>\n<p>The new test <code>src/wiggle/tests/errors.rs</code> shows how the types work out on a modified version of the <code>array</code> test. A new optional wiggle proc-macro argument <code>errors</code> gives a mapping of witx identifiers (less the leading <code>$</code>, because proc macro parsing is enough trouble without that) to the user's desired error type, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>wiggle::from_witx!({\n    witx: [&quot;tests/arrays.witx&quot;],\n    ctx: WasiCtx,\n    errors: { errno =&gt; RichError },\n});\n</code></pre></div>\n\n\n<p>When the <code>errors</code> config is provided, a <code>UserErrorConversion</code> trait is defined in <code>types</code> that the user must implement for their ctx type. The method names in this enum are determined mechanically.</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; types::UserErrorConversion for WasiCtx&lt;&#39;a&gt; {\n    fn errno_from_rich_error(&amp;self, _e: RichError) -&gt; types::Errno {\n        unimplemented!();\n    }\n}\n</code></pre></div>\n\n\n<p>The <code>RichError</code> type is then used in place of <code>types::Errno</code> in the witx module traits:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; arrays::Arrays for WasiCtx&lt;&#39;a&gt; {\n    fn populate_excuses(&amp;self, _excuses: &amp;types::ExcuseArray) -&gt; Result&lt;(), RichError&gt; {\n        unimplemented!()\n    }\n   (snip)\n}\n</code></pre></div>\n\n\n<p>Open questions:</p>\n<ul>\n<li>The syntax of the arguments is pretty arbitrary. I wanted to permit full paths to the user's rich error type, but then I ran into a problem figuring out a sensible and unique method name from that, so I punted. Ideally we'd add optional syntax for specifying the method name, and require the syntax if a sensible name cant be determined by some simple check (currently <a href=\"https://docs.rs/syn/1.0.28/syn/struct.Path.html#method.get_ident\">https://docs.rs/syn/1.0.28/syn/struct.Path.html#method.get_ident</a>)</li>\n<li>I wasn't always consistent about what to call this feature in the code - is this an ErrorTransform, is this a UserError? The naming could stand some bikeshedding.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199205941,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590783055
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a> from <code>pch/wiggle_error_transforms</code> to <code>master</code>:</p>\n<blockquote>\n<p>One issue we've had with wiggle ergonomics is that we often want to use a rich error type (a Rust enum that uses <code>thiserror::Error</code>, or maybe an <code>anyhow::Error</code>) to write the library code that ends up in an impl of the wiggle-defined module traits. However, those module traits require an error type that corresponds to the witx document.</p>\n<p>Because Rust doesn't have <code>try</code>, there's not a lot of good mechanical ways to automatically replace all uses of a witx document error type like wasi's <code>Errno</code> with a rich type and a conversion function.<br>\nSo, this PR adds a totally opt-in facility to wiggle to perform such a conversion on the user's behalf.</p>\n<p>The new test <code>src/wiggle/tests/errors.rs</code> shows how the types work out on a modified version of the <code>array</code> test. A new optional wiggle proc-macro argument <code>errors</code> gives a mapping of witx identifiers (less the leading <code>$</code>, because proc macro parsing is enough trouble without that) to the user's desired error type, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub enum RichError { (snip) }\nwiggle::from_witx!({\n    witx: [&quot;tests/arrays.witx&quot;],\n    ctx: WasiCtx,\n    errors: { errno =&gt; RichError },\n});\n</code></pre></div>\n\n\n<p>When the <code>errors</code> config is provided, a <code>UserErrorConversion</code> trait is defined in <code>types</code> that the user must implement for their ctx type. The method names in this enum are determined mechanically.</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; types::UserErrorConversion for WasiCtx&lt;&#39;a&gt; {\n    fn errno_from_rich_error(&amp;self, _e: RichError) -&gt; types::Errno {\n        unimplemented!();\n    }\n}\n</code></pre></div>\n\n\n<p>The <code>RichError</code> type is then used in place of <code>types::Errno</code> in the witx module traits:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; arrays::Arrays for WasiCtx&lt;&#39;a&gt; {\n    fn populate_excuses(&amp;self, _excuses: &amp;types::ExcuseArray) -&gt; Result&lt;(), RichError&gt; {\n        unimplemented!()\n    }\n   (snip)\n}\n</code></pre></div>\n\n\n<p>Open questions:</p>\n<ul>\n<li>The syntax of the arguments is pretty arbitrary. I wanted to permit full paths to the user's rich error type, but then I ran into a problem figuring out a sensible and unique method name from that, so I punted. Ideally we'd add optional syntax for specifying the method name, and require the syntax if a sensible name cant be determined by some simple check (currently <a href=\"https://docs.rs/syn/1.0.28/syn/struct.Path.html#method.get_ident\">https://docs.rs/syn/1.0.28/syn/struct.Path.html#method.get_ident</a>)</li>\n<li>I wasn't always consistent about what to call this feature in the code - is this an ErrorTransform, is this a UserError? The naming could stand some bikeshedding.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199206129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590783155
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790#pullrequestreview-421267016\">PR Review</a>.</p>",
        "id": 199207958,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590784100
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790#pullrequestreview-421279974\">PR Review</a>.</p>",
        "id": 199210617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590785548
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a> from <code>pch/wiggle_error_transforms</code> to <code>master</code>:</p>\n<blockquote>\n<p>One issue we've had with wiggle ergonomics is that we often want to use a rich error type (a Rust enum that uses <code>thiserror::Error</code>, or maybe an <code>anyhow::Error</code>) to write the library code that ends up in an impl of the wiggle-defined module traits. However, those module traits require an error type that corresponds to the witx document.</p>\n<p>Because Rust doesn't have <code>try</code>, there's not a lot of good mechanical ways to automatically replace all uses of a witx document error type like wasi's <code>Errno</code> with a rich type and a conversion function.<br>\nSo, this PR adds a totally opt-in facility to wiggle to perform such a conversion on the user's behalf.</p>\n<p>The new test <code>src/wiggle/tests/errors.rs</code> shows how the types work out on a modified version of the <code>array</code> test. A new optional wiggle proc-macro argument <code>errors</code> gives a mapping of witx identifiers (less the leading <code>$</code>, because proc macro parsing is enough trouble without that) to the user's desired error type, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub enum RichError { (snip) }\nwiggle::from_witx!({\n    witx: [&quot;tests/arrays.witx&quot;],\n    ctx: WasiCtx,\n    errors: { errno =&gt; RichError },\n});\n</code></pre></div>\n\n\n<p>When the <code>errors</code> config is provided, a <code>UserErrorConversion</code> trait is defined in <code>types</code> that the user must implement for their ctx type. The method names in this enum are determined mechanically.</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; types::UserErrorConversion for WasiCtx&lt;&#39;a&gt; {\n    fn errno_from_rich_error(&amp;self, _e: RichError) -&gt; types::Errno {\n        unimplemented!();\n    }\n}\n</code></pre></div>\n\n\n<p>The <code>RichError</code> type is then used in place of <code>types::Errno</code> in the witx module traits:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a&gt; arrays::Arrays for WasiCtx&lt;&#39;a&gt; {\n    fn populate_excuses(&amp;self, _excuses: &amp;types::ExcuseArray) -&gt; Result&lt;(), RichError&gt; {\n        unimplemented!()\n    }\n   (snip)\n}\n</code></pre></div>\n\n\n<p>Open questions:</p>\n<ul>\n<li>The syntax of the arguments is pretty arbitrary. I wanted to permit full paths to the user's rich error type, but then I ran into a problem figuring out a sensible and unique method name from that, so I punted. Ideally we'd add optional syntax for specifying the method name, and require the syntax if a sensible name cant be determined by some simple check (currently <a href=\"https://docs.rs/syn/1.0.28/syn/struct.Path.html#method.get_ident\">https://docs.rs/syn/1.0.28/syn/struct.Path.html#method.get_ident</a>)</li>\n<li>I wasn't always consistent about what to call this feature in the code - is this an ErrorTransform, is this a UserError? The naming could stand some bikeshedding.</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 199276020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590872840
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a>.</p>",
        "id": 199430413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591049555
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790#pullrequestreview-422861548\">PR Review</a>.</p>",
        "id": 199519383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115876
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1790\">PR #1790</a>.</p>",
        "id": 199519498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591115920
    }
]