[
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1205327755\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<p>As I stated in the linked issue, IMHO the CLIF instruction definition should be updated.</p>\n</blockquote>",
        "id": 292014362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659622971
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1205368342\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<blockquote>\n<p>As I stated in the linked issue, IMHO the CLIF instruction definition should be updated.</p>\n</blockquote>\n<p>You are right, I didn't read your comment properly, ill mark this as draft until we make that decision.</p>\n</blockquote>",
        "id": 292018529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659624802
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1205368342\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<blockquote>\n<p>As I stated in the linked issue, IMHO the CLIF instruction definition should be updated.</p>\n</blockquote>\n<p>You are right, I didn't read your comment properly (sorry!), ill mark this as draft until we make that decision.</p>\n</blockquote>",
        "id": 292018570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659624820
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1209788150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<p>@akirilov-arm I've updated the documentation, is this all you meant, or did I miss something else?</p>\n<p>Also, cc @cfallin since I can't request reviews.</p>\n</blockquote>",
        "id": 292642921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660073258
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1210666744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<p>I also think zero extending the unsigned operations is probably the better choice.</p>\n<p>However, what if we instead altered the type of the instruction to accept the full <code>Imm128</code>?</p>\n<p>I don't think this would grow the size of <code>InstructionData</code> since we already have <code>Shuffle</code> which also stores a <code>Imm128</code>. However <code>Shuffle</code> stores the immediate in the <code>DataFlowGraph</code>, we could do the same, and in this legalization pass emit the appropriate <code>iconst</code> / <code>iconcat</code> / <code>sextend</code> depending on what the constant is.</p>\n<p>Would storing the Imm in the DFG for these operations cause performance issues?</p>\n</blockquote>",
        "id": 292753468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660137691
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1211044612\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<p>Actually that would be the ideal design: from first principles one would expect \"with immediate\" variants of 128-bit ops to carry 128-bit (16-byte) immediates.</p>\n<p>However we can't carry that inline in the instruction, as you're hinting, because <code>InstructionData</code> is 16 bytes total (and we want to keep it that way).</p>\n<p>I suspect that indirecting for all constants would have some nontrivial overhead, though it might be a bit of work to measure (a lot of refactoring).</p>\n<p>I had another thought, though, that may be more \"honest\" about the costs: what if we (i) limited <code>op_imm</code> instructions and the <code>iconst</code> instruction to work for up to 64 bits only? Producers that want to emit full 128-bit values already produce two <code>iconst</code>s and <code>iconcat</code> them. In some sense, trying to allow <code>iconst.i128 -1</code> or the <code>op_imm</code> folded variant is lulling producers into a false sense of what's supported. As soon as one writes <code>iconst.i128 -0x8000_0000_0000_0001</code> one finds out that there are only half as many bits in the immediate field as the type otherwise implies.</p>\n<p>Thoughts on that?</p>\n</blockquote>",
        "id": 292801716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660153437
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1211044612\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<p>Actually that would be the ideal design: from first principles one would expect \"with immediate\" variants of 128-bit ops to carry 128-bit (16-byte) immediates.</p>\n<p>However we can't carry that inline in the instruction, as you're hinting, because <code>InstructionData</code> is 16 bytes total (and we want to keep it that way).</p>\n<p>I suspect that indirecting for all constants would have some nontrivial overhead, though it might be a bit of work to measure (a lot of refactoring).</p>\n<p>I had another thought, though, that may be more \"honest\" about the costs: what if we limited (i) <code>op_imm</code> instructions and (ii) the <code>iconst</code> instruction to work for up to 64 bits only? Producers that want to emit full 128-bit values already produce two <code>iconst</code>s and <code>iconcat</code> them. In some sense, trying to allow <code>iconst.i128 -1</code> or the <code>op_imm</code> folded variant is lulling producers into a false sense of what's supported. As soon as one writes <code>iconst.i128 -0x8000_0000_0000_0001</code> one finds out that there are only half as many bits in the immediate field as the type otherwise implies.</p>\n<p>Thoughts on that?</p>\n</blockquote>",
        "id": 292801824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660153464
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1211139200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<blockquote>\n<p>I suspect that indirecting for all constants would have some nontrivial overhead, though it might be a bit of work to measure (a lot of refactoring).</p>\n</blockquote>\n<p>I was proposing that only for <code>*_imm</code> variants. The way I see it, these instructions are already just sort of \"helpers\" in the sense that they just construct a pattern that we recognize (i.e. <code>iadd</code> + <code>iconst</code>), they could just emit more advanced patterns to support i128 (i.e. <code>iadd+iconst+sext</code> or <code>iadd+iconst+iconcat</code> all in 64bits).</p>\n<p>Having more operations only work up to <code>i64</code> to me feels like <code>i128</code> is a second class citizen, which is sort of true for the current backends, but I don't really like it at the lang level.</p>\n<p>I don't know, I'm a bit undecided on this, I'd like to hear what other people think.<br>\n</p>\n</blockquote>",
        "id": 292814869,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660158149
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1211144015\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<p>Generally I agree at an IR-design level: it would be nice to have orthogonality here, and allow all types up through <code>i128</code> in all places where integers are allowed.</p>\n<p>This compromise feels similar to \"small immediates\" in RISC ISAs though: we have a relatively small struct size for instructions, and its size is critical for performance, and its entire width would be taken by just the <code>i128</code> immediate (hence it would need to grow). So in that sense I don't think we can have an <em>inline</em> <code>Imm128</code>.</p>\n<p>I would be curious to see the overhead of a \"every immediate is indirect\" approach, if you're up for prototyping that. If it's actually negligible, then I think it's a reasonable change to make.</p>\n</blockquote>",
        "id": 292815676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660158428
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602#issuecomment-1212299750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4602\">issue #4602</a>:</p>\n<blockquote>\n<blockquote>\n<p>I would be curious to see the overhead of a \"every immediate is indirect\" approach, if you're up for prototyping that. If it's actually negligible, then I think it's a reasonable change to make.</p>\n</blockquote>\n<p>Me too, and I think we could mitigate some of the cost (if it is non-negligible) by having two const <code>InstructionData</code> variants, one inline up to 64bits and one in the DFG for larger values, and choose between them when the user emits a <code>iconst</code> (can we do this?).</p>\n<p>Although right now I don't have a lot of time to try this out. </p>\n<p>I'm planning on addressing the feedback above and getting this merged, is that okay, or would you prefer restricting the types that we accept?</p>\n</blockquote>",
        "id": 292978302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660240364
    }
]