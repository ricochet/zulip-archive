[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a> from <code>multi-reg-framework</code> to <code>main</code>:</p>\n<blockquote>\n<p>This will allow for support for <code>I128</code> values everywhere, and <code>I64</code><br>\nvalues on 32-bit targets (e.g., ARM32 and x86-32). It does not alter the<br>\nmachine backends to build such support; it just adds the framework for<br>\nthe MachInst backends to <em>reason</em> about a <code>Value</code> residing in more than<br>\none register.</p>\n<p>This is a finalized version of the framework part of the draft PR (#2504); I128<br>\noperator implementations will come in a followup PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221492105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740367
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a>.</p>",
        "id": 221492106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740367
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a>.</p>",
        "id": 221492107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740367
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561266234\">PR Review</a>.</p>",
        "id": 221565627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609786930
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551506609\">PR Review Comment</a>:</p>\n<blockquote>\n<p>These and a few other methods are the same in all cases. Please move them to a single unconditional impl block.</p>\n</blockquote>",
        "id": 221565628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609786930
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a> from <code>multi-reg-framework</code> to <code>main</code>:</p>\n<blockquote>\n<p>This will allow for support for <code>I128</code> values everywhere, and <code>I64</code><br>\nvalues on 32-bit targets (e.g., ARM32 and x86-32). It does not alter the<br>\nmachine backends to build such support; it just adds the framework for<br>\nthe MachInst backends to <em>reason</em> about a <code>Value</code> residing in more than<br>\none register.</p>\n<p>This is a finalized version of the framework part of the draft PR (#2504); I128<br>\noperator implementations will come in a followup PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221578985,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609793604
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a> from <code>multi-reg-framework</code> to <code>main</code>:</p>\n<blockquote>\n<p>This will allow for support for <code>I128</code> values everywhere, and <code>I64</code><br>\nvalues on 32-bit targets (e.g., ARM32 and x86-32). It does not alter the<br>\nmachine backends to build such support; it just adds the framework for<br>\nthe MachInst backends to <em>reason</em> about a <code>Value</code> residing in more than<br>\none register.</p>\n<p>This is a finalized version of the framework part of the draft PR (#2504); I128<br>\noperator implementations will come in a followup PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221579733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609793951
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561341162\">PR Review</a>.</p>",
        "id": 221579885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609794009
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551565918\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 221579887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609794009
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561369290\">PR Review</a>.</p>",
        "id": 221585589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609796933
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561835329\">PR Review</a>.</p>",
        "id": 221660621,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561835329\">PR Review</a>.</p>",
        "id": 221660622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551969178\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: and <code>VALUE_REGS_PARTS</code> here too?</p>\n</blockquote>",
        "id": 221660623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551967768\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This unconditionally does four tests, but the invariant is that if part <code>n</code> is invalid, then part <code>k</code> for <code>k&gt;=n</code> are invalid too. So using explicit branches with short-circuiting might be better (and penalize the \"general\" case of having a 1:1 mapping less), at the cost of slightly more verbosity. Of course if rustc can vectorize this, please ignore me :-)</p>\n</blockquote>",
        "id": 221660625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551968491\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Does it require a different R type?</p>\n</blockquote>",
        "id": 221660626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551969061\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: <code>VALUE_REGS_PARTS</code> here instead of 4?</p>\n</blockquote>",
        "id": 221660627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551977234\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is the above clone actually necessary, if we just <code>iter</code> (and not <code>into_iter</code>) here?</p>\n</blockquote>",
        "id": 221660628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551972238\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This comment needs pluralization too.</p>\n</blockquote>",
        "id": 221660629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551982392\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Are these adds guaranteed to not overflow? (and in <code>offset</code> too?)</p>\n</blockquote>",
        "id": 221660630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551983150\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe rename <code>into_reg</code> to <code>into_regs</code>? Below it's a bit weird that <code>regs</code> goes into <code>into_reg</code> (singular).</p>\n</blockquote>",
        "id": 221660631,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551971876\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: this comment needs an update</p>\n</blockquote>",
        "id": 221660632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551993173\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(Second time I see an instance of this, so asking, but it might be false.) Could it be that the <code>reg_class</code> arg is now always ignored, since the type is used instead? If so, we could change the signature of <code>gen_constant</code> and all its callers to reflect this.</p>\n</blockquote>",
        "id": 221660634,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861225
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551987413\">PR Review Comment</a>:</p>\n<blockquote>\n<p>/me wears the premature optimization hat</p>\n<p>Could we use <code>SmallVec&lt;[M::I; VALUE_REGS_PARTS]&gt;</code> here, and for the other helpers (and some of their callers too)? It documents the 1:1 mapping between move/load/store Inst and real reg present in the value-regs, and may even reduce the number of dynamic allocations.</p>\n</blockquote>",
        "id": 221660635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861226
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551991242\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I imagine this is implemented in a subsequent PR?</p>\n</blockquote>",
        "id": 221660637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861226
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551991506\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe add an assert that the value doesn't overflow the i64 range, in case we'd support i128 in the future? (unless this is already correctly replaced in a subsequent PR)</p>\n</blockquote>",
        "id": 221660639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861226
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551995275\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Design thought: would it make sense to have a <code>alloc_singlereg_tmp</code> helper that avoids the constructing of an <code>Option</code> and unwrapping it, and returns only a single reg without using the <code>ValueRegs</code> construct? This line being repeated so many times makes me wary of the penalty cost of this multi-regs-per-value machinery for the general case where it's unused...</p>\n</blockquote>",
        "id": 221660640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861226
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r551997676\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This change might not be needed. (Can't wait for removing the above <code>allow(dead_code)</code> once and for all!)</p>\n</blockquote>",
        "id": 221660641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861226
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552002812\">PR Review Comment</a>:</p>\n<blockquote>\n<p>preexisting: There should be only one valid reference type per arch, can you cause the <code>R32</code> arm to panic?</p>\n</blockquote>",
        "id": 221660642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609861226
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561907803\">PR Review</a>.</p>",
        "id": 221662322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609862001
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552020351\">PR Review Comment</a>:</p>\n<blockquote>\n<p>For the 4 element case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ValueRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">parts</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ValueRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Return the number of registers used.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// If rustc/LLVM is smart enough, this might even be vectorized...</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">.LCPI0_0:</span>\n    <span class=\"na\">.quad</span>   <span class=\"mi\">1</span>\n    <span class=\"na\">.quad</span>   <span class=\"mi\">1</span>\n\n<span class=\"nl\">playground:</span><span class=\"err\">:</span><span class=\"nl\">ValueRegs:</span><span class=\"err\">:</span><span class=\"nl\">len:</span>\n    <span class=\"nf\">movdqu</span>  <span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">),</span> <span class=\"nv\">%xmm0</span>\n    <span class=\"nf\">pcmpeqd</span> <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span>\n    <span class=\"nf\">pcmpeqd</span> <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n    <span class=\"nf\">pxor</span>    <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n    <span class=\"nf\">pshufd</span>  <span class=\"no\">$246</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span>\n    <span class=\"nf\">movdqa</span>  <span class=\"no\">.LCPI0_0</span><span class=\"p\">(</span><span class=\"nv\">%rip</span><span class=\"p\">),</span> <span class=\"nv\">%xmm2</span>\n    <span class=\"nf\">pand</span>    <span class=\"nv\">%xmm2</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span>\n    <span class=\"nf\">pshufd</span>  <span class=\"no\">$212</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n    <span class=\"nf\">pand</span>    <span class=\"nv\">%xmm2</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n    <span class=\"nf\">paddq</span>   <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span>\n    <span class=\"nf\">pshufd</span>  <span class=\"no\">$78</span><span class=\"p\">,</span> <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span>\n    <span class=\"nf\">paddq</span>   <span class=\"nv\">%xmm0</span><span class=\"p\">,</span> <span class=\"nv\">%xmm1</span>\n    <span class=\"nf\">movq</span>    <span class=\"nv\">%xmm1</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">retq</span>\n</code></pre></div>\n<p>For the 2 element case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">ValueRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">parts</span>: <span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ValueRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Return the number of registers used.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// If rustc/LLVM is smart enough, this might even be vectorized...</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">playground:</span><span class=\"err\">:</span><span class=\"nl\">ValueRegs:</span><span class=\"err\">:</span><span class=\"nl\">len:</span>\n    <span class=\"nf\">xorl</span>    <span class=\"nv\">%eax</span><span class=\"p\">,</span> <span class=\"nv\">%eax</span>\n    <span class=\"nf\">cmpl</span>    <span class=\"no\">$-1</span><span class=\"p\">,</span> <span class=\"nv\">%edi</span>\n    <span class=\"nf\">setne</span>   <span class=\"nv\">%al</span>\n    <span class=\"nf\">movabsq</span> <span class=\"no\">$-4294967296</span><span class=\"p\">,</span> <span class=\"nv\">%rcx</span>\n    <span class=\"nf\">cmpq</span>    <span class=\"nv\">%rcx</span><span class=\"p\">,</span> <span class=\"nv\">%rdi</span>\n    <span class=\"nf\">adcq</span>    <span class=\"no\">$0</span><span class=\"p\">,</span> <span class=\"nv\">%rax</span>\n    <span class=\"nf\">retq</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 221662325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609862002
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-561937061\">PR Review</a>.</p>",
        "id": 221667262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609863999
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552042518\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Even better, for n=2 everything is in registers; scalar replacement of aggregates FTW \\o/</p>\n</blockquote>",
        "id": 221667263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609863999
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562200618\">PR Review</a>.</p>",
        "id": 221713787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609887862
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552251132\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thanks @bjorn3 for showing the assembly here. I think that, yes, we want to avoid control flow and let the compiler use its cleverness here.</p>\n</blockquote>",
        "id": 221713788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609887862
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562200968\">PR Review</a>.</p>",
        "id": 221713851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609887913
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552251422\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, in some cases -- for example going from <code>ValueRegs&lt;Reg&gt;</code> to <code>ValueRegs&lt;Writable&lt;Reg&gt;&gt;</code> or vice-versa.</p>\n</blockquote>",
        "id": 221713852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609887913
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562227536\">PR Review</a>.</p>",
        "id": 221719328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891664
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552273846\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, unfortunately, as <code>self.emit()</code> needs <code>&amp;mut self</code> and <code>self.retval_regs.iter()</code> holds a <code>&amp;self</code> for the duration of the loop.</p>\n</blockquote>",
        "id": 221719329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891664
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562230301\">PR Review</a>.</p>",
        "id": 221719516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891825
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552274768\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I believe so; the largest type we support a load/store for is 16 bytes, so to overflow the <code>i64</code> we would need to generate 2^60 instructions; we would OOM the address space before we overflowed.</p>\n</blockquote>",
        "id": 221719517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891825
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562231054\">PR Review</a>.</p>",
        "id": 221719658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891962
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552276713\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Indeed!</p>\n</blockquote>",
        "id": 221719659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891962
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562263851\">PR Review</a>.</p>",
        "id": 221723898,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609895974
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552310336\">PR Review Comment</a>:</p>\n<blockquote>\n<p>There were occasional merge conflicts on these type lists before and I think it's cleaner just to import <code>types::*</code> here as we do in some other files; updated.</p>\n</blockquote>",
        "id": 221723899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609895974
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a> from <code>multi-reg-framework</code> to <code>main</code>:</p>\n<blockquote>\n<p>This will allow for support for <code>I128</code> values everywhere, and <code>I64</code><br>\nvalues on 32-bit targets (e.g., ARM32 and x86-32). It does not alter the<br>\nmachine backends to build such support; it just adds the framework for<br>\nthe MachInst backends to <em>reason</em> about a <code>Value</code> residing in more than<br>\none register.</p>\n<p>This is a finalized version of the framework part of the draft PR (#2504); I128<br>\noperator implementations will come in a followup PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221724005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896072
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562264407\">PR Review</a>.</p>",
        "id": 221724012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896088
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552310764\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, good point; I went ahead and carried this refactor through all the backends.</p>\n</blockquote>",
        "id": 221724014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896088
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562264421\">PR Review</a>.</p>",
        "id": 221724017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896092
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552310772\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 221724018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896092
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267254\">PR Review</a>.</p>",
        "id": 221724520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896659
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313413\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done, sort of; this type is exposed up to the ABI trait and I'm not sure I want to expose a detail like \"max number of value registers per value\" there, but it does seem reasonable to pick a small-ish SmallVec size and standardize it; so I went through the ABI code with a <code>SmallVec&lt;[Inst; 4]&gt;</code>-shaped paintbrush using a new <code>SmallInstVec&lt;Inst&gt;</code> typedef.</p>\n</blockquote>",
        "id": 221724521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896659
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a> from <code>multi-reg-framework</code> to <code>main</code>:</p>\n<blockquote>\n<p>This will allow for support for <code>I128</code> values everywhere, and <code>I64</code><br>\nvalues on 32-bit targets (e.g., ARM32 and x86-32). It does not alter the<br>\nmachine backends to build such support; it just adds the framework for<br>\nthe MachInst backends to <em>reason</em> about a <code>Value</code> residing in more than<br>\none register.</p>\n<p>This is a finalized version of the framework part of the draft PR (#2504); I128<br>\noperator implementations will come in a followup PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221724522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896659
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267295\">PR Review</a>.</p>",
        "id": 221724529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896666
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313458\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 221724530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896667
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267372\">PR Review</a>.</p>",
        "id": 221724534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896679
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313517\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done (here and x64)!</p>\n</blockquote>",
        "id": 221724535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896680
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267422\">PR Review</a>.</p>",
        "id": 221724544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896687
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313558\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 221724545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896687
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267450\">PR Review</a>.</p>",
        "id": 221724546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896692
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313583\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 221724547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896692
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267492\">PR Review</a>.</p>",
        "id": 221724554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896702
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313632\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 221724555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896702
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#pullrequestreview-562267519\">PR Review</a>.</p>",
        "id": 221724558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896708
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538#discussion_r552313651\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 221724559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609896708
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a> from <code>multi-reg-framework</code> to <code>main</code>:</p>\n<blockquote>\n<p>This will allow for support for <code>I128</code> values everywhere, and <code>I64</code><br>\nvalues on 32-bit targets (e.g., ARM32 and x86-32). It does not alter the<br>\nmachine backends to build such support; it just adds the framework for<br>\nthe MachInst backends to <em>reason</em> about a <code>Value</code> residing in more than<br>\none register.</p>\n<p>This is a finalized version of the framework part of the draft PR (#2504); I128<br>\noperator implementations will come in a followup PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221725204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609897516
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2538\">PR #2538</a>.</p>",
        "id": 221799834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609955927
    }
]