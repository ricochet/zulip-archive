[
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>vconcat</code> and <code>vsplit</code> instructions are not currently implemented in any Cranelift backend. At a quick glance through the history, I'm not sure they've ever been implemented, except as a legalization pass that's since been deleted. Let's remove them.</p>\n<h4>Benefit</h4>\n<p>We won't have to maintain the instruction definitions or add new rules in the backends to implement these instructions.</p>\n<h4>Implementation</h4>\n<p>Remove the instruction definitions from <code>cranelift/codegen/meta/src/shared/instructions.rs</code> and the references to these opcodes from <code>cranelift/interpreter/src/step.rs</code>. I just merged #5462 which implemented <code>vsplit</code> in the interpreter and added a test for it, <code>cranelift/filetests/filetests/runtests/simd-vsplit.clif</code>, which would also need to be deleted. I think that's it!</p>\n<p>This would supersede #5457.</p>\n<h4>Alternatives</h4>\n<p>We could clarify the semantics of these instructions and implement them in the backends and interpreter, but without a compelling use case it's not clear why we would.</p>\n</blockquote>",
        "id": 316379333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671233394
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>vconcat</code> and <code>vsplit</code> instructions are not currently implemented in any Cranelift backend. At a quick glance through the history, I'm not sure they've ever been implemented, except as a legalization pass that's since been deleted. Let's remove them.</p>\n<h4>Benefit</h4>\n<p>We won't have to maintain the instruction definitions or add new rules in the backends to implement these instructions.</p>\n<h4>Implementation</h4>\n<p>Remove the instruction definitions from <code>cranelift/codegen/meta/src/shared/instructions.rs</code> and the references to these opcodes from <code>cranelift/interpreter/src/step.rs</code>. I just merged #5462 which implemented <code>vsplit</code> in the interpreter and added a test for it, <code>cranelift/filetests/filetests/runtests/simd-vsplit.clif</code>, which would also need to be deleted. I think that's it!</p>\n<p>This would supersede #5457.</p>\n<h4>Alternatives</h4>\n<p>We could clarify the semantics of these instructions and implement them in the backends and interpreter, but without a compelling use case it's not clear why we would.</p>\n</blockquote>",
        "id": 316379334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671233394
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>vconcat</code> and <code>vsplit</code> instructions are not currently implemented in any Cranelift backend. At a quick glance through the history, I'm not sure they've ever been implemented, except as a legalization pass that's since been deleted. Let's remove them.</p>\n<h4>Benefit</h4>\n<p>We won't have to maintain the instruction definitions or add new rules in the backends to implement these instructions.</p>\n<h4>Implementation</h4>\n<p>Remove the instruction definitions from <code>cranelift/codegen/meta/src/shared/instructions.rs</code> and the references to these opcodes from <code>cranelift/interpreter/src/step.rs</code>. I just merged #5462 which implemented <code>vsplit</code> in the interpreter and added a test for it, <code>cranelift/filetests/filetests/runtests/simd-vsplit.clif</code>, which would also need to be deleted. I think that's it!</p>\n<p>This would supersede #5457.</p>\n<h4>Alternatives</h4>\n<p>We could clarify the semantics of these instructions and implement them in the backends and interpreter, but without a compelling use case it's not clear why we would.</p>\n</blockquote>",
        "id": 316379335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671233394
    },
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>vconcat</code> and <code>vsplit</code> instructions are not currently implemented in any Cranelift backend. At a quick glance through the history, I'm not sure they've ever been implemented, except as a legalization pass that's since been deleted. Let's remove them.</p>\n<h4>Benefit</h4>\n<p>We won't have to maintain the instruction definitions or add new rules in the backends to implement these instructions.</p>\n<h4>Implementation</h4>\n<p>Remove the instruction definitions from <code>cranelift/codegen/meta/src/shared/instructions.rs</code> and the references to these opcodes from <code>cranelift/interpreter/src/step.rs</code>. I just merged #5462 which implemented <code>vsplit</code> in the interpreter and added a test for it, <code>cranelift/filetests/filetests/runtests/simd-vsplit.clif</code>, which would also need to be deleted. I think that's it!</p>\n<p>This would supersede #5457.</p>\n<h4>Alternatives</h4>\n<p>We could clarify the semantics of these instructions and implement them in the backends and interpreter, but without a compelling use case it's not clear why we would.</p>\n</blockquote>",
        "id": 316379337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671233394
    },
    {
        "content": "<p>MozarellaMan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463#issuecomment-1356181315\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<p>Sounds good to me,  I did also have a quick ctrl+f for the instruction and saw it wasn't being used â€” but didn't know the reason. I'd be happy to pick this up!</p>\n</blockquote>",
        "id": 316434219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671274725
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463#issuecomment-1356292683\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<p>The original purpose for the iconcat/isplit and vconcat/vsplit instructions was that it allows legalization to split full-width operations into two half-width operations without having to implement the full-width operations in every backend. So for example a 256bit vector add could be emulated using two 128bit vector adds. After legalization all concat and split instructions would be gone.</p>\n</blockquote>",
        "id": 316469852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671288713
    },
    {
        "content": "<p>MozarellaMan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463#issuecomment-1356347027\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<p>Ah, so would they still be needed then for that use case? Also - what exactly is a \"legalization\" pass? Is that just a pass that lowers the IR to backend instructions? Sorry if this is a stupid question :) </p>\n</blockquote>",
        "id": 316489957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671298312
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463#issuecomment-1356354723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<p>Legalization is a pass that lowers complex clif ir instructions to simpler ones. For example until recently we had a heap_addr instruction which lowered to a series of clif ir instructions that does bound checking. Most of the work that legalization did has been subsumed by the move to the new backend framework 2 years ago. I believe the plan is to eventually remove it entirely at some point.</p>\n</blockquote>",
        "id": 316492628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671299758
    },
    {
        "content": "<p>MozarellaMan <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463#issuecomment-1356404940\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<p>Thanks for the context, that is pretty fascinating. Sorry for more questions, what was different about the new backend framework that made a separate legalisation pass unnecessary?</p>\n</blockquote>",
        "id": 316502439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671305603
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463#issuecomment-1356444219\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<p>The old backend framework used clif ir all the way to the end. So high level instructions that are performed using multiple machine instructions needed to be lowered to simpler clif ir instructions that could then be encoded using a single machine instruction each. The new backend framework however lowers from clif ir to a backend specific ir. This lowering can split high level instructions as necessary for the specific architecture, avoiding the need to modify the clif ir during compilation (except for optional optimization passes and the last remaining bits of the legalizer). For example <a href=\"https://github.com/bytecodealliance/wasmtime/blob/93ae9078c5a2588b5241bd7221ace459d2b04d54/cranelift/codegen/src/isa/x64/lower.isle#L92-L103\">https://github.com/bytecodealliance/wasmtime/blob/93ae9078c5a2588b5241bd7221ace459d2b04d54/cranelift/codegen/src/isa/x64/lower.isle#L92-L103</a> lowers an iadd.i128 as add + adc.</p>\n</blockquote>",
        "id": 316504411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671306914
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5463\">issue #5463</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>vconcat</code> and <code>vsplit</code> instructions are not currently implemented in any Cranelift backend. At a quick glance through the history, I'm not sure they've ever been implemented, except as a legalization pass that's since been deleted. Let's remove them.</p>\n<h4>Benefit</h4>\n<p>We won't have to maintain the instruction definitions or add new rules in the backends to implement these instructions.</p>\n<h4>Implementation</h4>\n<p>Remove the instruction definitions from <code>cranelift/codegen/meta/src/shared/instructions.rs</code> and the references to these opcodes from <code>cranelift/interpreter/src/step.rs</code>. I just merged #5462 which implemented <code>vsplit</code> in the interpreter and added a test for it, <code>cranelift/filetests/filetests/runtests/simd-vsplit.clif</code>, which would also need to be deleted. I think that's it!</p>\n<p>This would supersede #5457.</p>\n<h4>Alternatives</h4>\n<p>We could clarify the semantics of these instructions and implement them in the backends and interpreter, but without a compelling use case it's not clear why we would.</p>\n</blockquote>",
        "id": 316857764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671496960
    }
]