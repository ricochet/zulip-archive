[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a>.</p>",
        "id": 221492187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740506
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.<br>\n</p>\n</blockquote>",
        "id": 221492188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740507
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a>.</p>",
        "id": 221492189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740507
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a>, <a href=\"https://github.com/bnjbvr\">bnjbvr</a> and <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a>.</p>",
        "id": 221492190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609740507
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.<br>\n</p>\n</blockquote>",
        "id": 221492665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609741319
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops and misc fixes.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.</p>\n<p>Also includes ridealong fixes developed while bringing up cg_clif<br>\nsupport, because they are difficult to completely separate due to<br>\nother refactors that occurred in this PR:</p>\n<ul>\n<li>\n<p>fix REX prefix logic for some 8-bit instructions.</p>\n<p>When using an 8-bit register in 64-bit mode on x86-64, the REX prefix<br>\nsemantics are somewhat subtle: without the REX prefix, register numbers<br>\n4--7 correspond to the second-to-lowest byte of the first four registers<br>\n(AH, CH, BH, DH), whereas with the REX prefix, these register numbers<br>\ncorrespond to the usual encoding (SPL, BPL, SIL, DIL). We could always<br>\nemit a REX byte for instructions with 8-bit cases (this is harmless even<br>\nif unneeded), but this would unnecessarily inflate code size; instead,<br>\nthe usual approach is to emit it only for these registers.</p>\n<p>This logic was present in some cases but missing for some other<br>\ninstructions: divide, not, negate, shifts.</p>\n<p>Fixes #2508.</p>\n</li>\n<li>\n<p>avoid unaligned SSE loads on some f64 ops.</p>\n<p>The implementations of several FP ops, such as fabs/fneg, used SSE<br>\ninstructions. This is not a problem per-se, except that load-op merging<br>\ndid not take <em>alignment</em> into account. Specifically, if an op on an f64<br>\nloaded from memory happened to merge that load, and the instruction into<br>\nwhich it was merged was an SSE instruction, then the SSE instruction<br>\nimposes stricter (128-bit) alignment requirements than the load.f64 did.</p>\n<p>This PR simply forces any instruction lowerings that could use SSE<br>\ninstructions to implement non-SIMD operations to take inputs in<br>\nregisters only, and avoid load-op merging.</p>\n<p>Fixes #2507.</p>\n</li>\n<li>\n<p>two bugfixes exposed by cg_clif: urem/srem.i8, select.b1.</p>\n<ul>\n<li>\n<p>urem/srem.i8: the 8-bit form of the DIV instruction on x86-64 places<br>\n  the remainder in AH, not RDX, different from all the other width-forms<br>\n  of this instruction.</p>\n</li>\n<li>\n<p>select.b1: we were not recognizing selects of boolean values as<br>\n  integer-typed operations, so we were generating XMM moves instead (!).</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 221492730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609741397
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops and misc fixes.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.</p>\n<p>Also includes ridealong fixes developed while bringing up cg_clif<br>\nsupport, because they are difficult to completely separate due to<br>\nother refactors that occurred in this PR:</p>\n<ul>\n<li>\n<p>fix REX prefix logic for some 8-bit instructions.</p>\n<p>When using an 8-bit register in 64-bit mode on x86-64, the REX prefix<br>\nsemantics are somewhat subtle: without the REX prefix, register numbers<br>\n4--7 correspond to the second-to-lowest byte of the first four registers<br>\n(AH, CH, BH, DH), whereas with the REX prefix, these register numbers<br>\ncorrespond to the usual encoding (SPL, BPL, SIL, DIL). We could always<br>\nemit a REX byte for instructions with 8-bit cases (this is harmless even<br>\nif unneeded), but this would unnecessarily inflate code size; instead,<br>\nthe usual approach is to emit it only for these registers.</p>\n<p>This logic was present in some cases but missing for some other<br>\ninstructions: divide, not, negate, shifts.</p>\n<p>Fixes #2508.</p>\n</li>\n<li>\n<p>avoid unaligned SSE loads on some f64 ops.</p>\n<p>The implementations of several FP ops, such as fabs/fneg, used SSE<br>\ninstructions. This is not a problem per-se, except that load-op merging<br>\ndid not take <em>alignment</em> into account. Specifically, if an op on an f64<br>\nloaded from memory happened to merge that load, and the instruction into<br>\nwhich it was merged was an SSE instruction, then the SSE instruction<br>\nimposes stricter (128-bit) alignment requirements than the load.f64 did.</p>\n<p>This PR simply forces any instruction lowerings that could use SSE<br>\ninstructions to implement non-SIMD operations to take inputs in<br>\nregisters only, and avoid load-op merging.</p>\n<p>Fixes #2507.</p>\n</li>\n<li>\n<p>two bugfixes exposed by cg_clif: urem/srem.i8, select.b1.</p>\n<ul>\n<li>\n<p>urem/srem.i8: the 8-bit form of the DIV instruction on x86-64 places<br>\n  the remainder in AH, not RDX, different from all the other width-forms<br>\n  of this instruction.</p>\n</li>\n<li>\n<p>select.b1: we were not recognizing selects of boolean values as<br>\n  integer-typed operations, so we were generating XMM moves instead (!).</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 221579144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609793668
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops and misc fixes.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.</p>\n<p>Also includes ridealong fixes developed while bringing up cg_clif<br>\nsupport, because they are difficult to completely separate due to<br>\nother refactors that occurred in this PR:</p>\n<ul>\n<li>\n<p>fix REX prefix logic for some 8-bit instructions.</p>\n<p>When using an 8-bit register in 64-bit mode on x86-64, the REX prefix<br>\nsemantics are somewhat subtle: without the REX prefix, register numbers<br>\n4--7 correspond to the second-to-lowest byte of the first four registers<br>\n(AH, CH, BH, DH), whereas with the REX prefix, these register numbers<br>\ncorrespond to the usual encoding (SPL, BPL, SIL, DIL). We could always<br>\nemit a REX byte for instructions with 8-bit cases (this is harmless even<br>\nif unneeded), but this would unnecessarily inflate code size; instead,<br>\nthe usual approach is to emit it only for these registers.</p>\n<p>This logic was present in some cases but missing for some other<br>\ninstructions: divide, not, negate, shifts.</p>\n<p>Fixes #2508.</p>\n</li>\n<li>\n<p>avoid unaligned SSE loads on some f64 ops.</p>\n<p>The implementations of several FP ops, such as fabs/fneg, used SSE<br>\ninstructions. This is not a problem per-se, except that load-op merging<br>\ndid not take <em>alignment</em> into account. Specifically, if an op on an f64<br>\nloaded from memory happened to merge that load, and the instruction into<br>\nwhich it was merged was an SSE instruction, then the SSE instruction<br>\nimposes stricter (128-bit) alignment requirements than the load.f64 did.</p>\n<p>This PR simply forces any instruction lowerings that could use SSE<br>\ninstructions to implement non-SIMD operations to take inputs in<br>\nregisters only, and avoid load-op merging.</p>\n<p>Fixes #2507.</p>\n</li>\n<li>\n<p>two bugfixes exposed by cg_clif: urem/srem.i8, select.b1.</p>\n<ul>\n<li>\n<p>urem/srem.i8: the 8-bit form of the DIV instruction on x86-64 places<br>\n  the remainder in AH, not RDX, different from all the other width-forms<br>\n  of this instruction.</p>\n</li>\n<li>\n<p>select.b1: we were not recognizing selects of boolean values as<br>\n  integer-typed operations, so we were generating XMM moves instead (!).</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 221579767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609793972
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops and misc fixes.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.</p>\n<p>Also includes ridealong fixes developed while bringing up cg_clif<br>\nsupport, because they are difficult to completely separate due to<br>\nother refactors that occurred in this PR:</p>\n<ul>\n<li>\n<p>fix REX prefix logic for some 8-bit instructions.</p>\n<p>When using an 8-bit register in 64-bit mode on x86-64, the REX prefix<br>\nsemantics are somewhat subtle: without the REX prefix, register numbers<br>\n4--7 correspond to the second-to-lowest byte of the first four registers<br>\n(AH, CH, BH, DH), whereas with the REX prefix, these register numbers<br>\ncorrespond to the usual encoding (SPL, BPL, SIL, DIL). We could always<br>\nemit a REX byte for instructions with 8-bit cases (this is harmless even<br>\nif unneeded), but this would unnecessarily inflate code size; instead,<br>\nthe usual approach is to emit it only for these registers.</p>\n<p>This logic was present in some cases but missing for some other<br>\ninstructions: divide, not, negate, shifts.</p>\n<p>Fixes #2508.</p>\n</li>\n<li>\n<p>avoid unaligned SSE loads on some f64 ops.</p>\n<p>The implementations of several FP ops, such as fabs/fneg, used SSE<br>\ninstructions. This is not a problem per-se, except that load-op merging<br>\ndid not take <em>alignment</em> into account. Specifically, if an op on an f64<br>\nloaded from memory happened to merge that load, and the instruction into<br>\nwhich it was merged was an SSE instruction, then the SSE instruction<br>\nimposes stricter (128-bit) alignment requirements than the load.f64 did.</p>\n<p>This PR simply forces any instruction lowerings that could use SSE<br>\ninstructions to implement non-SIMD operations to take inputs in<br>\nregisters only, and avoid load-op merging.</p>\n<p>Fixes #2507.</p>\n</li>\n<li>\n<p>two bugfixes exposed by cg_clif: urem/srem.i8, select.b1.</p>\n<ul>\n<li>\n<p>urem/srem.i8: the 8-bit form of the DIV instruction on x86-64 places<br>\n  the remainder in AH, not RDX, different from all the other width-forms<br>\n  of this instruction.</p>\n</li>\n<li>\n<p>select.b1: we were not recognizing selects of boolean values as<br>\n  integer-typed operations, so we were generating XMM moves instead (!).</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 221726156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609898713
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops and misc fixes.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.</p>\n<p>Also includes ridealong fixes developed while bringing up cg_clif<br>\nsupport, because they are difficult to completely separate due to<br>\nother refactors that occurred in this PR:</p>\n<ul>\n<li>\n<p>fix REX prefix logic for some 8-bit instructions.</p>\n<p>When using an 8-bit register in 64-bit mode on x86-64, the REX prefix<br>\nsemantics are somewhat subtle: without the REX prefix, register numbers<br>\n4--7 correspond to the second-to-lowest byte of the first four registers<br>\n(AH, CH, BH, DH), whereas with the REX prefix, these register numbers<br>\ncorrespond to the usual encoding (SPL, BPL, SIL, DIL). We could always<br>\nemit a REX byte for instructions with 8-bit cases (this is harmless even<br>\nif unneeded), but this would unnecessarily inflate code size; instead,<br>\nthe usual approach is to emit it only for these registers.</p>\n<p>This logic was present in some cases but missing for some other<br>\ninstructions: divide, not, negate, shifts.</p>\n<p>Fixes #2508.</p>\n</li>\n<li>\n<p>avoid unaligned SSE loads on some f64 ops.</p>\n<p>The implementations of several FP ops, such as fabs/fneg, used SSE<br>\ninstructions. This is not a problem per-se, except that load-op merging<br>\ndid not take <em>alignment</em> into account. Specifically, if an op on an f64<br>\nloaded from memory happened to merge that load, and the instruction into<br>\nwhich it was merged was an SSE instruction, then the SSE instruction<br>\nimposes stricter (128-bit) alignment requirements than the load.f64 did.</p>\n<p>This PR simply forces any instruction lowerings that could use SSE<br>\ninstructions to implement non-SIMD operations to take inputs in<br>\nregisters only, and avoid load-op merging.</p>\n<p>Fixes #2507.</p>\n</li>\n<li>\n<p>two bugfixes exposed by cg_clif: urem/srem.i8, select.b1.</p>\n<ul>\n<li>\n<p>urem/srem.i8: the 8-bit form of the DIV instruction on x86-64 places<br>\n  the remainder in AH, not RDX, different from all the other width-forms<br>\n  of this instruction.</p>\n</li>\n<li>\n<p>select.b1: we were not recognizing selects of boolean values as<br>\n  integer-typed operations, so we were generating XMM moves instead (!).</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 221800202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609956088
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-565644841\">PR Review</a>.</p>",
        "id": 222345952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393576
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-565644841\">PR Review</a>.</p>",
        "id": 222345953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393576
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r555268037\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't think I picked up why these need to be <code>Copy</code> now?</p>\n</blockquote>",
        "id": 222345954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393576
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r555266774\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You could save yourself some code with: </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">ctz</span><span class=\"p\">(</span><span class=\"mh\">0x00000000_00000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000_00000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x96</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">ctz</span><span class=\"p\">(</span><span class=\"mh\">0x00000000_00010000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000001_00000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x16</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 222345955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393576
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r555282080\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It seems preferable to me to just have <code>AluRmiROpcode::And</code> and avoid this special-casing if possible. Do you agree? If yes, I wonder if there is a way to standardize register sizes throughout <code>lower.rs</code> using <code>OperandSize</code> and trying to clarify/simplify all of the special logic related to variables like <code>is64</code>, <code>is_64</code>, <code>is_8bit</code>, etc.</p>\n</blockquote>",
        "id": 222345956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393576
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r555285178\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this is the type of logic that is tricky to understand later: where is <code>is_8bit</code> coming from? It's sort of hidden that the registers used, if encoded in the range 4..7, should always emit a REX prefix. I'm not suggesting a great alternative here (sorry!), just noting that this is the type of thing that will make the lowering code tricky to troubleshoot and extend.</p>\n</blockquote>",
        "id": 222345957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393576
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-565644841\">PR Review</a>.</p>",
        "id": 222346063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610393613
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a> from <code>x64-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR is a followup to #2538 and is dependent on it.</p>\n<p>x64 backend: implement 128-bit ops and misc fixes.</p>\n<p>This implements all of the ops on I128 that are implemented by the<br>\nlegacy x86 backend, and includes all that are required by at least one<br>\nmajor use-case (cg_clif rustc backend).</p>\n<p>The sequences are open-coded where necessary; for e.g. the bit<br>\noperations, this can be somewhat complex, but these sequences have been<br>\ntested carefully. This PR also includes a drive-by fix of clz/ctz for 8-<br>\nand 16-bit cases where they were incorrect previously.</p>\n<p>Also includes ridealong fixes developed while bringing up cg_clif<br>\nsupport, because they are difficult to completely separate due to<br>\nother refactors that occurred in this PR:</p>\n<ul>\n<li>\n<p>fix REX prefix logic for some 8-bit instructions.</p>\n<p>When using an 8-bit register in 64-bit mode on x86-64, the REX prefix<br>\nsemantics are somewhat subtle: without the REX prefix, register numbers<br>\n4--7 correspond to the second-to-lowest byte of the first four registers<br>\n(AH, CH, BH, DH), whereas with the REX prefix, these register numbers<br>\ncorrespond to the usual encoding (SPL, BPL, SIL, DIL). We could always<br>\nemit a REX byte for instructions with 8-bit cases (this is harmless even<br>\nif unneeded), but this would unnecessarily inflate code size; instead,<br>\nthe usual approach is to emit it only for these registers.</p>\n<p>This logic was present in some cases but missing for some other<br>\ninstructions: divide, not, negate, shifts.</p>\n<p>Fixes #2508.</p>\n</li>\n<li>\n<p>avoid unaligned SSE loads on some f64 ops.</p>\n<p>The implementations of several FP ops, such as fabs/fneg, used SSE<br>\ninstructions. This is not a problem per-se, except that load-op merging<br>\ndid not take <em>alignment</em> into account. Specifically, if an op on an f64<br>\nloaded from memory happened to merge that load, and the instruction into<br>\nwhich it was merged was an SSE instruction, then the SSE instruction<br>\nimposes stricter (128-bit) alignment requirements than the load.f64 did.</p>\n<p>This PR simply forces any instruction lowerings that could use SSE<br>\ninstructions to implement non-SIMD operations to take inputs in<br>\nregisters only, and avoid load-op merging.</p>\n<p>Fixes #2507.</p>\n</li>\n<li>\n<p>two bugfixes exposed by cg_clif: urem/srem.i8, select.b1.</p>\n<ul>\n<li>\n<p>urem/srem.i8: the 8-bit form of the DIV instruction on x86-64 places<br>\n  the remainder in AH, not RDX, different from all the other width-forms<br>\n  of this instruction.</p>\n</li>\n<li>\n<p>select.b1: we were not recognizing selects of boolean values as<br>\n  integer-typed operations, so we were generating XMM moves instead (!).</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 222788979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660761
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-568651616\">PR Review</a>.</p>",
        "id": 222789017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660763
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r557718802\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Much better, thanks!</p>\n</blockquote>",
        "id": 222789018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660763
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-568651961\">PR Review</a>.</p>",
        "id": 222789062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660793
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r557719074\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, I had added that for convenience in several spots but the <code>clone()</code> is no big deal; reverted.</p>\n</blockquote>",
        "id": 222789063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660793
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-568652947\">PR Review</a>.</p>",
        "id": 222789209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660879
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r557719855\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In general I would agree, except that we don't use 8-bit ops elsewhere for CLIF-level 8-bit instructions so I went for the limited-in-scope approach here. I'm totally open to a future refactor that centralizes <code>OperandSize</code> for all instructions, though -- that would remove a lot of the ad-hoc conditionals, as you note!</p>\n</blockquote>",
        "id": 222789210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660879
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#pullrequestreview-568653527\">PR Review</a>.</p>",
        "id": 222789341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660936
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539#discussion_r557720311\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps the <code>RexFlags</code> could take an <code>OperandSize</code> with its constructor, if we centralize use of <code>OperandSize</code>; that would at least enforce the need to think about it. OK if we defer to a later refactor?</p>\n</blockquote>",
        "id": 222789343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610660936
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2539\">PR #2539</a>.</p>",
        "id": 222796363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610664305
    }
]