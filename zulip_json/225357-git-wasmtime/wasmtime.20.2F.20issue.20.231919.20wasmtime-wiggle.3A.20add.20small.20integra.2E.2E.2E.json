[
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1919#issuecomment-862515285\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1919\">issue #1919</a>:</p>\n<blockquote>\n<p><code>wiggle</code> has a <code>wasmtime_integration</code> test these days.</p>\n</blockquote>",
        "id": 242904107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623860091
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1919\">issue #1919</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>The <code>wasmtime-wiggle</code> crate is tested via its use in <code>wasmtime-wasi</code>. It does not have any tests local to the crate. We should add them.</p>\n<h4>Benefit</h4>\n<p>wasi is a very complicated interface &amp; implementation that could make it hard to track down whether a bug is in wiggle, wasmtime-wiggle, or wasi-common. Having a integration test would help us narrow that down. It would also serve as documentation on how to use the crate.</p>\n<h4>Implementation</h4>\n<p>The wiggle crate's test suite has a number of witx files and implementations. We could add tests that show those integrated end-to-end with wasmtime to the wasmtime-wiggle crate.</p>\n<p>We would probably have to write the WebAssembly code that exercises these apis by hand (.wat). That is less than ideal, but I believe we should avoid adding the complication of a Rust or C wasm toolchain to the testing story.</p>\n<h4>Alternatives</h4>\n<p>Yolo?<br>\n</p>\n</blockquote>",
        "id": 242904108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1623860091
    }
]