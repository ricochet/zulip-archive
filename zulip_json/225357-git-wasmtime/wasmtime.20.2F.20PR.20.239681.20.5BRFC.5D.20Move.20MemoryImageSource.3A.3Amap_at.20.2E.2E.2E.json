[
    {
        "content": "<p>sunshowers edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>.</p>",
        "id": 484440390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732600994
    },
    {
        "content": "<p>sunshowers edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>:</p>\n<blockquote>\n<p>This is part of the work to centralize memory management into the <code>mmap</code><br>\nmodule. This commit introduces a few structures which aid in that process, and<br>\nstarts converting one of the functions (<code>MemoryImageSource::map_at</code>) into this<br>\nmodule.</p>\n<p>The structures introduced are:</p>\n<ul>\n<li>\n<p><code>MemoryBase</code>: <code>RuntimeLinearMemory::base_ptr</code> is now<br>\n<code>RuntimeLinearMemory::base</code>, which returns a <code>MemoryBase</code>. This is either a<br>\n  raw pointer or an mmap + an offset into it.</p>\n</li>\n<li>\n<p><code>MmapOffset</code>: A combination of a reference to an mmap and an offset into it.<br>\n  Logically represents a pointer into a mapped section of memory.</p>\n</li>\n<li>\n<p><code>MmapOffsetRaw</code>: Some components like <code>MemoryImageSlot</code> logically work on<br>\n  borrowed memory, but adding lifetime parameters to them would introduce<br>\n  self-reference issues. Instead, store a raw form of the <code>MmapOffset</code> such<br>\n  that it can be reconstructed at runtime. This should work for most future<br>\n  work here, but not all of it -- I've written out some comments along with<br>\n  ideas.</p>\n</li>\n</ul>\n<p>On Zulip there was a suggestion to use <code>Arc&lt;Mmap&gt;</code> rather than a lifetime<br>\nparameter. To be honest it's quite appealing! One of the challenges though<br>\nis that <code>Mmap</code> has several <code>&amp;mut</code> methods. The methods fall into two categories:</p>\n<ul>\n<li>Methods like <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/mmap.rs#L139\"><code>make_accessible</code></a>, which can be changed to be <code>&amp;self</code> since the OS performs synchronization of mapped memory.</li>\n<li>Methods like <code>slice_mut</code>, which are quite difficult to turn into <code>&amp;self</code> methods. It would be too easy to call <code>self.slice_mut(0..host_page_size()); self.slice_mut(0..host_page_size());</code> and cause an insta-UB. I spent some time looking at how to do this but found it too difficult :(</li>\n</ul>\n</blockquote>",
        "id": 484440965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732601404
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681#issuecomment-2499802334\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>:</p>\n<blockquote>\n<blockquote>\n<p>Methods like slice_mut, which are quite difficult to turn into &amp;self methods. It would be too easy to call self.slice_mut(0..host_page_size()); self.slice_mut(0..host_page_size()); and cause an insta-UB. I spent some time looking at how to do this but found it too difficult :(</p>\n</blockquote>\n<p>Ah interesting, it looks like the only seriously affected use is in some tests.</p>\n</blockquote>",
        "id": 484444686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732603980
    },
    {
        "content": "<p>sunshowers edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681#issuecomment-2499802334\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>:</p>\n<blockquote>\n<blockquote>\n<p>Methods like slice_mut, which are quite difficult to turn into &amp;self methods. It would be too easy to call self.slice_mut(0..host_page_size()); self.slice_mut(0..host_page_size()); and cause an insta-UB. I spent some time looking at how to do this but found it too difficult :(</p>\n</blockquote>\n<p>Ah interesting, it looks like the only seriously affected use is in some tests. Maybe this is more feasible than I think.</p>\n</blockquote>",
        "id": 484444701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732603991
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681#issuecomment-2499817894\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>:</p>\n<blockquote>\n<p>Moving to draft for now -- I think <code>Arc</code> is possible to make work.</p>\n</blockquote>",
        "id": 484445886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732604630
    },
    {
        "content": "<p>sunshowers closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>.</p>",
        "id": 484446213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732604780
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681#issuecomment-2499821413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">PR #9681</a>:</p>\n<blockquote>\n<p>Yeah <code>Arc</code> is definitely possible -- going to re-do this after moving over to <code>Arc</code>.</p>\n</blockquote>",
        "id": 484446214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732604782
    }
]