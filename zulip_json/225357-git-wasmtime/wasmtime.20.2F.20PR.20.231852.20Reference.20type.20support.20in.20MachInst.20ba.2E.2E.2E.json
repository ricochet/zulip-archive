[
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds the inital support to allow reftypes to flow through the<br>\nprogram when targetting aarch64. It also adds a fix to the<br>\n<code>ModuleTranslationState</code> needed to send R32/R64 types over from the<br>\nSpiderMonkey embedding.</p>\n<p>This PR does not include any support for safepoints in aarch64 or the<br>\n<code>MachInst</code> infrastructure. That work will come as a second PR, following<br>\nsome needed changes to <a href=\"http://regalloc.rs\">regalloc.rs</a>.</p>\n<p>This PR also makes a drive-by improvement to <code>Bint</code>, avoiding an<br>\nunneeded zero-extension op when the extended value comes directly from a<br>\nconditional-set (which produces a full-width 0 or 1).</p>\n<p>With this PR, and a companion patch in SpiderMonkey, we're able to make it<br>\nthrough all of the reftypes tests in the spec testsuite, though we aren't emitting<br>\nstackmaps yet so if the GC had been triggered we would have been in trouble.<br>\nStill, it's a start!</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202159980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593219849
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with wasmtime/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202160143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593220096
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202160163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593220165
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202160329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593220411
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202378821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593472344
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202727833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593714788
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202728004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593714854
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 202728785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593715240
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 203763680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594670515
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 203763839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594670601
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#pullrequestreview-448212915\">PR Review</a>.</p>",
        "id": 203850039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#pullrequestreview-448212915\">PR Review</a>.</p>",
        "id": 203850040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454439603\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: \"is right here\" is hard to parse.  Does it mean \"is correct here\"?   Or \"at this point in the frame construction, nominal SP = actual SP\" etc?  Can you clarify?</p>\n</blockquote>",
        "id": 203850041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454446226\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Errr, <code>*end*</code> is too vague.  Please specify exactly.  Do you mean: the code offset for the last (highest-addressed) byte of the instruction ..</p>\n</blockquote>",
        "id": 203850042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454441298\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can it happen that <code>Some(t)</code> is inconsistent with the second (here, ignored) component of the tuple?  It would be good to add a comment explaining the meaning of this function.  In particular why the first component has priority.</p>\n</blockquote>",
        "id": 203850043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454449598\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: <code>..rc</code> feels a bit too terse here; can you call it <code>ref_type_regclass</code> ?</p>\n</blockquote>",
        "id": 203850045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454448077\">PR Review Comment</a>:</p>\n<blockquote>\n<p>How is this used?  In particular, will we have to call <code>is_safepoint</code> on every insn that is processed?  That would seem to be an undesirable compiler performance hit, if so?  (Tell me it ain't so!)</p>\n</blockquote>",
        "id": 203850046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454451883\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nano-nit: since most of our users will be coming at this on 64-bit targets, maybe put that first in the disjunction?  That way we can save perhaps 1/3 of a nanosecond per call :-)</p>\n</blockquote>",
        "id": 203850048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>julian-seward1 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454455663\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Here and below, it concerns me that we are accepting <code>R32</code> on a 64-bit target without comment.  IIUC, if anything claiming to be <code>R32</code> turns up on a 64-bit target, we have gone way off the rails -- perhaps even to the extent of having a security problem.  In such a circumstance I would much prefer that we bring the system to a halt, even in release builds (== panic in every such <code>match</code> on <code>ty</code>s); and similarly for x64 stubs, if you have similarly modified them.</p>\n</blockquote>",
        "id": 203850049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594741719
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a> from <code>reftypes</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR adds support for reference types in the <code>MachInst</code> backend framework and on AArch64. It comes in two parts: the initial support for allowing <code>R32</code>/<code>R64</code> types to flow through the Wasm program and call boundaries, and the implementation of opcodes that support them (<code>is_null</code>, etc.); and then stackmap support to allow GCs to occur while Wasm stackframes are active.</p>\n<p>This has been tested with SpiderMonkey and is known to work there with GCs occuring during calls from Wasm into JS. We plan to do further testing in <a href=\"http://regalloc.rs\">regalloc.rs</a> directly (with our checker) too.</p>\n<p>This requires a <a href=\"http://regalloc.rs\">regalloc.rs</a> version bump (with bytecodealliance/regalloc.rs#79 included) and dep version update; the CI build here will be red until that change is made.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 203861552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747384
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#pullrequestreview-448311883\">PR Review</a>.</p>",
        "id": 203861575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747401
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454519057\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done, excellent point.</p>\n</blockquote>",
        "id": 203861576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747401
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#pullrequestreview-448312340\">PR Review</a>.</p>",
        "id": 203861642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747437
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454519453\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Sorry, this was left over from an earlier iteration that did indeed call <code>is_safepoint</code> on every instruction; but we no longer do that, and the function was dead, so I removed it.</p>\n</blockquote>",
        "id": 203861643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747437
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#pullrequestreview-448312766\">PR Review</a>.</p>",
        "id": 203861736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747475
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454519843\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Updated comment, thanks!</p>\n</blockquote>",
        "id": 203861737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747475
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#pullrequestreview-448314146\">PR Review</a>.</p>",
        "id": 203861936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747587
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#discussion_r454521043\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The type should always be consistent with the register class; the <code>Option&lt;Type&gt;</code> is only missing when the regalloc requests a spill of a realreg (for which it doesn't have a vreg, hence no vcode-level type) at a safepoint, and this will always be an <code>I64</code> reg. Added comments to clarify.</p>\n</blockquote>",
        "id": 203861937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747587
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">PR #1852</a>.</p>",
        "id": 203868655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594750952
    }
]