[
    {
        "content": "<p>seanaye opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968\">issue #2968</a>:</p>\n<blockquote>\n<p>After following the wasmtime tutorial <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a> I am unable to run the resulting output in the polyfill site.</p>\n<p>The site errors with <code>Import #0 module=\"wasi_snapshot_preview1\" error: module is not an object or function</code></p>\n<p>I have compiled the rust example in the tutorial, and even dumbed it down slighty so that it doesnt require CLI arguments. Here is my code.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_str</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">input_str</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">\"Hello World\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"s\">\"tmp/file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"s\">b\"done writing\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have confirmed that this code runs as expected in the wasmtime cli</p>\n</blockquote>",
        "id": 241640488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622904973
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968#issuecomment-855252442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968\">issue #2968</a>:</p>\n<blockquote>\n<p>The javascript polyfill is very much outdated.</p>\n</blockquote>",
        "id": 241640760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622905354
    },
    {
        "content": "<p>seanaye <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968#issuecomment-855253232\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968\">issue #2968</a>:</p>\n<blockquote>\n<p>@bjorn3 ah that makes, sense, thanks. Are there plans to update it?</p>\n</blockquote>",
        "id": 241641002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622905718
    },
    {
        "content": "<p>seanaye closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968\">issue #2968</a>:</p>\n<blockquote>\n<p>After following the wasmtime tutorial <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a> I am unable to run the resulting output in the polyfill site.</p>\n<p>The site errors with <code>Import #0 module=\"wasi_snapshot_preview1\" error: module is not an object or function</code></p>\n<p>I have compiled the rust example in the tutorial, and even dumbed it down slighty so that it doesnt require CLI arguments. Here is my code.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_str</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">input_str</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">\"Hello World\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"s\">\"tmp/file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"s\">b\"done writing\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have confirmed that this code runs as expected in the wasmtime cli</p>\n</blockquote>",
        "id": 241641003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622905719
    },
    {
        "content": "<p>seanaye reopened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968\">issue #2968</a>:</p>\n<blockquote>\n<p>After following the wasmtime tutorial <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/main/docs/WASI-tutorial.md</a> I am unable to run the resulting output in the polyfill site.</p>\n<p>The site errors with <code>Import #0 module=\"wasi_snapshot_preview1\" error: module is not an object or function</code></p>\n<p>I have compiled the rust example in the tutorial, and even dumbed it down slighty so that it doesnt require CLI arguments. Here is my code.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">input_str</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">output_fname</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"error opening output {}: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_fname</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">output_file</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"n\">input_str</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">err</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"write error: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"s\">\"Hello World\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"s\">\"tmp/file.txt\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">io</span>::<span class=\"n\">stdout</span><span class=\"p\">().</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"s\">b\"done writing\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have confirmed that this code runs as expected in the wasmtime cli</p>\n</blockquote>",
        "id": 241641004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622905729
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968#issuecomment-855265319\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2968\">issue #2968</a>:</p>\n<blockquote>\n<p>Not that I am aware of. Created a pure js polyfill for a subset of wasi a couple of months ago: <a href=\"https://github.com/bjorn3/rust/blob/compile_rustc_wasm4/rustc.html\">https://github.com/bjorn3/rust/blob/compile_rustc_wasm4/rustc.html</a> You could try if it works well enough for you.</p>\n</blockquote>",
        "id": 241645172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1622911650
    }
]