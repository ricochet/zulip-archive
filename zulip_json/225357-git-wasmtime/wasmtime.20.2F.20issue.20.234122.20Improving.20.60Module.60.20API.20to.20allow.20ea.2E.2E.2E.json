[
    {
        "content": "<p>jakubDoka opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122\">issue #4122</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Allow pre-allocating function declaration inside the modules. </p>\n<h4>Benefit</h4>\n<p>This is useful because it allows reconstructing the module declaration to a previous state when incrementally compiling and also gives user a choice to which <code>EntityRef</code> they want to allocate their declaration. If I serialize <code>RelocRecord</code> I have to make sure <code>EntityRef</code> of a given function stays the same or things get really dangerous. Doing this is very cumbersome as <code>ModuleDeclarations</code> use <code>PrimaryMap</code>.</p>\n<h4>Implementation</h4>\n<p>Implementation should be simple. Main change will happen inside <code>ModuleDeclarations</code> where you have to add ne method that will just push a default value of module Item and return newly allocated <code>EntityRef</code> to caller. Another method that is needed will accept the <code>EntityRef</code>, <code>name</code>, <code>signature</code>, and <code>linkage</code>. Upon invocation, declaration gets replaced, name inserted into hash map and symbols or whatever preparation <code>Module</code> has to do gets done.</p>\n<p>Calling method on already declared item will result into <code>panic!</code> and probably requires preserving some state on debug builds for this to work. </p>\n<h4>Alternatives</h4>\n<p>You could of course allocate anon Func with empty body and signature to manipulate FuncId but this can add useles data into final object file and you cannot reuse the allocated <code>FuncId</code> as different signature would not get accepted.</p>\n<p>Another alternative is breaking the API compatibility by changing <code>declare_function</code> in <code>Module</code> to also accept <code>EntityRef</code> the same way as <code>Variable</code> in frontend is used.</p>\n</blockquote>",
        "id": 281873519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652210589
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122\">issue #4122</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Allow pre-allocating function declaration inside the modules. </p>\n<h4>Benefit</h4>\n<p>This is useful because it allows reconstructing the module declaration to a previous state when incrementally compiling and also gives user a choice to which <code>EntityRef</code> they want to allocate their declaration. If I serialize <code>RelocRecord</code> I have to make sure <code>EntityRef</code> of a given function stays the same or things get really dangerous. Doing this is very cumbersome as <code>ModuleDeclarations</code> use <code>PrimaryMap</code>.</p>\n<h4>Implementation</h4>\n<p>Implementation should be simple. Main change will happen inside <code>ModuleDeclarations</code> where you have to add ne method that will just push a default value of module Item and return newly allocated <code>EntityRef</code> to caller. Another method that is needed will accept the <code>EntityRef</code>, <code>name</code>, <code>signature</code>, and <code>linkage</code>. Upon invocation, declaration gets replaced, name inserted into hash map and symbols or whatever preparation <code>Module</code> has to do gets done.</p>\n<p>Calling method on already declared item will result into <code>panic!</code> and probably requires preserving some state on debug builds for this to work. </p>\n<h4>Alternatives</h4>\n<p>You could of course allocate anon Func with empty body and signature to manipulate FuncId but this can add useles data into final object file and you cannot reuse the allocated <code>FuncId</code> as different signature would not get accepted.</p>\n<p>Another alternative is breaking the API compatibility by changing <code>declare_function</code> in <code>Module</code> to also accept <code>EntityRef</code> the same way as <code>Variable</code> in frontend is used.</p>\n</blockquote>",
        "id": 281886291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652216746
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122#issuecomment-1122911729\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122\">issue #4122</a>:</p>\n<blockquote>\n<p>When referencing a function or data object inside a function the full declaration needs to be known in advance.</p>\n<p>I think when serializing you should map from FuncId back to symbol name and when deserializing declare the function with the known decalaration and symbol name and then use the returned FuncId.</p>\n</blockquote>",
        "id": 281890652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652219269
    },
    {
        "content": "<p>jakubDoka <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122#issuecomment-1123192792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122\">issue #4122</a>:</p>\n<blockquote>\n<blockquote>\n<p>When referencing a function or data object inside a function the full declaration needs to be known in advance.</p>\n</blockquote>\n<p>Yes, blanc functions are not supposed to be imported by anything. When you use incremental data, some functions are invalidated, possibly removed and that implies all dependent constructs are also recompiled so by the time I compile any function depending of <code>FuncId</code> the declaration is present, otherwise I am doing things wrongly.</p>\n<blockquote>\n<p>I think when serializing you should map from FuncId back to symbol name and when deserializing declare the function with the known decalaration and symbol name and then use the returned FuncId.</p>\n</blockquote>\n<p>I have not think of this option. It seems the right solution, I'll try it out, thanks.</p>\n<p>Closing the issue for now.</p>\n</blockquote>",
        "id": 281919487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652245843
    },
    {
        "content": "<p>jakubDoka closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4122\">issue #4122</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Allow pre-allocating function declaration inside the modules. </p>\n<h4>Benefit</h4>\n<p>This is useful because it allows reconstructing the module declaration to a previous state when incrementally compiling and also gives user a choice to which <code>EntityRef</code> they want to allocate their declaration. If I serialize <code>RelocRecord</code> I have to make sure <code>EntityRef</code> of a given function stays the same or things get really dangerous. Doing this is very cumbersome as <code>ModuleDeclarations</code> use <code>PrimaryMap</code>.</p>\n<h4>Implementation</h4>\n<p>Implementation should be simple. Main change will happen inside <code>ModuleDeclarations</code> where you have to add ne method that will just push a default value of module Item and return newly allocated <code>EntityRef</code> to caller. Another method that is needed will accept the <code>EntityRef</code>, <code>name</code>, <code>signature</code>, and <code>linkage</code>. Upon invocation, declaration gets replaced, name inserted into hash map and symbols or whatever preparation <code>Module</code> has to do gets done.</p>\n<p>Calling method on already declared item will result into <code>panic!</code> and probably requires preserving some state on debug builds for this to work. </p>\n<h4>Alternatives</h4>\n<p>You could of course allocate anon Func with empty body and signature to manipulate FuncId but this can add useles data into final object file and you cannot reuse the allocated <code>FuncId</code> as different signature would not get accepted.</p>\n<p>Another alternative is breaking the API compatibility by changing <code>declare_function</code> in <code>Module</code> to also accept <code>EntityRef</code> the same way as <code>Variable</code> in frontend is used.</p>\n</blockquote>",
        "id": 281919488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652245843
    }
]