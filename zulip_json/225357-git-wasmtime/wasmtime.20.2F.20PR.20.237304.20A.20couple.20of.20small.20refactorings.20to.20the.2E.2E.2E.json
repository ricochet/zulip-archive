[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304\">PR #7304</a> from <code>elliottt:trevor/elaborate-fixes</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>@jameysharp and I noticed a couple of refactoring opportunities while reading through the elaboration pass:</p>\n<ul>\n<li>The elaboration loop doesn't need to match on the top of the stack as a reference, because each case pops it immediately. Instead we can pop and match on the popped value.</li>\n<li>Computing the cost of a <code>Result</code> value that's not in the DFG was using the block that contains the instruction to determine the level, but since the instruction is already known to not be in the DFG, this would default to <code>LoopLevel::root()</code> unconditionally. This also meant that the <code>Cost::at_level</code> function turned into an identity function on the cost given, making it unnecessary.</li>\n</ul>\n<p>Co-authored-by: Jamey Sharp &lt;<a href=\"mailto:jsharp@fastly.com\">jsharp@fastly.com</a>&gt;</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 397587988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697755968
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304\">PR #7304</a>.</p>",
        "id": 397587989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697755968
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304\">PR #7304</a>.</p>",
        "id": 397587990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697755968
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304\">PR #7304</a>.</p>",
        "id": 397588018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697755993
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304\">PR #7304</a>:</p>\n<blockquote>\n<p>@jameysharp and I noticed a couple of refactoring opportunities while reading through the elaboration pass:</p>\n<ul>\n<li>The elaboration loop doesn't need to match on the top of the stack as a reference, because each case pops it immediately. Instead we can pop and match on the popped value.</li>\n<li>Computing the cost of a pure <code>ValueDef::Result</code> was using the block that contains the instruction to determine the level, but since pure values will not be in the DFG yet, this would default to <code>LoopLevel::root()</code> unconditionally. This also meant that the <code>Cost::at_level</code> function turned into an identity function on the cost given, making it unnecessary.</li>\n</ul>\n<p>Co-authored-by: Jamey Sharp &lt;<a href=\"mailto:jsharp@fastly.com\">jsharp@fastly.com</a>&gt;</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 397590181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697757409
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304#pullrequestreview-1688867265\">PR review</a>:</p>\n<blockquote>\n<p>LGTM! Good find w.r.t. the loop-level cost factor being a no-op; I suspect this was left over from an earlier version of extraction. I'd be interested to hear any thoughts you or others have about using the loop level somehow, but I'm happy to see this merged for now!</p>\n</blockquote>",
        "id": 397593379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697759539
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7304\">PR #7304</a>.</p>",
        "id": 397597619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697762195
    }
]