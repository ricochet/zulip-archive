[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724\">PR #3724</a> from <code>s390x-isle-branchtrap</code> to <code>main</code>:</p>\n<blockquote>\n<p>In order to migrate branches to ISLE, we define a second entry<br>\npoint <code>lower_branch</code> which gets the list of branch targets as<br>\nadditional argument.</p>\n<p>This requires a small change to <code>lower_common</code>: the <code>isle_lower</code><br>\ncallback argument is changed from a function pointer to a closure.<br>\nThis allows passing the extra argument via a closure.</p>\n<p>Traps make use of the recently added facility to emit safepoints<br>\nfrom ISLE, but are otherwise straightforward.</p>\n<p>@cfallin @fitzgen </p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 269293229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643132160
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862679409\">PR review</a>.</p>",
        "id": 269299000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134381
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r791991032\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this should go in the shared prelude, next to <code>value_regs_none</code>.</p>\n</blockquote>",
        "id": 269299001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134381
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r791992689\">PR review comment</a>:</p>\n<blockquote>\n<p>And then I would expect this to go into <code>wasmtime/cranelift/codegen/src/machinst/isle.rs</code></p>\n</blockquote>",
        "id": 269299002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134381
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862679409\">PR review</a>.</p>",
        "id": 269299003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134381
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r791993493\">PR review comment</a>:</p>\n<blockquote>\n<p>And this should be in the prelude as well.</p>\n</blockquote>",
        "id": 269299004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134382
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862687036\">PR review</a>.</p>",
        "id": 269299281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134492
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r791995330\">PR review comment</a>:</p>\n<blockquote>\n<p>I see that <code>emit</code> actually isn't in the prelude, but we do <em>use</em> it from the prelude. So we should probably move <code>emit</code> to the prelude as well, since in practice it has to be the same declaration across all backends anyways. Happy to have that as part of this updated PR or we can do it in another PR.</p>\n</blockquote>",
        "id": 269299282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134492
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862692544\">PR review</a>.</p>",
        "id": 269300053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134799
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r791999850\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, that's why I didn't put it in the prelude ...</p>\n<p>I agree it makes sense to move emit / emit_safepoint there, but then we should also move the implementations to machinst/isle.re, right?</p>\n<p>I'd be happy to do that, but I think it would be better to do it in another PR, as it will touch all back-ends.<br>\n</p>\n</blockquote>",
        "id": 269300054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643134799
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862713869\">PR review</a>.</p>",
        "id": 269303223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136013
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r792015197\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, we wouldn't necessarily have to move the implementations as well, nothing is stopping us from implementing the ISLE context's <code>emit</code> trait method once for each backend even when the <code>decl</code> is in the prelude.</p>\n<p>In fact the x86_64 implementation is a little different, in that it calls a <code>mov_mitosis</code> method on each inst in <code>emitted_insts</code>, and if we made this code common then we would need to add such a method to the <code>MachInst</code> trait or something.</p>\n<p>So I think we can move just the ISLE <code>decl</code> into the prelude without moving the rust trait implementations at all. Happy to have this in a follow up PR.</p>\n</blockquote>",
        "id": 269303224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136013
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862719076\">PR review</a>.</p>",
        "id": 269303963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136310
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r792018935\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I see.   But even if we don't move the implementaton, once the <code>decl</code> is in the prelude as <code>extern constructor</code>, <em>every</em> back-end <em>must</em> implement it or it won't compile any more.   So we'll still need to touch all back-ends.  (In fact, with the x86 <code>mov_mitosis</code> implementation, I'm not sure exactly how the safepoint variant would work.  I guess only the last instruction in the list should be the safepoint?)</p>\n</blockquote>",
        "id": 269303965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136310
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r792021618\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>once the <code>decl</code> is in the prelude as <code>extern constructor</code>, _every_ back-end _must_ implement it or it won't compile any more.</p>\n</blockquote>\n<p>Correct. (Also, it is already the case that every backend must implement it or the ISLE won't compile because we are calling <code>emit</code> and assuming it is declared from inside the prelude already, it just so happens that we have N identical declarations for each backend instead of a single shared declaration in the prelude.)</p>\n<blockquote>\n<p>(In fact, with the x86 <code>mov_mitosis</code> implementation, I'm not sure exactly how the safepoint variant would work. I guess only the last instruction in the list should be the safepoint?)</p>\n</blockquote>\n<p>Yeah, I will have to think a bit about how to do this best. I think making only the last instruction a safepoint would work, but we might want to have some debug asserts in there too. Planning on tackling this after I'm done with my newtype wrappers PR by which time this PR will have merged.</p>\n</blockquote>",
        "id": 269304445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136533
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862722811\">PR review</a>.</p>",
        "id": 269304446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136534
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862730674\">PR review</a>.</p>",
        "id": 269305597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136988
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r792027256\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think making only the last instruction a safepoint would work,</p>\n</blockquote>\n<p>Yeah, I think that's the correct solution -- the expanded list should always have the form of zero or more moves, followed by the original instruction; and the safepoint bit applies to the latter.</p>\n</blockquote>",
        "id": 269305598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136988
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-862733419\">PR review</a>.</p>",
        "id": 269305967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643137151
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#discussion_r792029229\">PR review comment</a>:</p>\n<blockquote>\n<p>There are some instructions that always generate their results into a particular register, and so when our SSA-ified version of that instruction wants the result in a temp, we have to generate a move that follows the \"real\" instruction, so we can have trailing moves as well after move mitosis. This shouldn't be the case for safepoints I don't think (except maybe ABI/calling convention stuff where results are always in <code>rax</code>?) and we should be able to just debug assert this.</p>\n</blockquote>",
        "id": 269305969,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643137151
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724#pullrequestreview-868450328\">PR review</a>.</p>",
        "id": 270109912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643665364
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3724\">PR #3724</a>.</p>",
        "id": 270109928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643665370
    }
]