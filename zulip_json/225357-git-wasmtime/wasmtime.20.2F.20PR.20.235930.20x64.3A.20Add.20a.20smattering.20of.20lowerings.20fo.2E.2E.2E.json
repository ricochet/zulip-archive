[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930\">PR #5930</a> from <code>x64-shuffles</code> to <code>main</code>:</p>\n<blockquote>\n<p>I took the <a href=\"https://github.com/zeux/meshoptimizer\">meshoptimizer benchmark</a>, compiled it to wasm, and ran it through both Wasmtime and v8. One major improvement for Wasmtime was to use specialized shuffle instructions instead of the generic fallback which requires two <code>pshufd</code> with rip-relative immediates plus a <code>por</code> vs a single instruction in many cases. I trawled through the v8 disassembly and found a number of shuffle-related instructions and translated all of their lowerings to Wasmtime. On one specific benchmark in that program this PR improves the throughput by 30%, and another by 5%.<br>\n</p>\n</blockquote>",
        "id": 339617345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677968326
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930\">PR #5930</a>.</p>",
        "id": 340461601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678308574
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930\">PR #5930</a> from <code>x64-shuffles</code> to <code>main</code>.</p>",
        "id": 340477486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678314924
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333551305\">PR review</a>.</p>",
        "id": 340693236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389621
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333551305\">PR review</a>.</p>",
        "id": 340693237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389621
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131468848\">PR review comment</a>:</p>\n<blockquote>\n<p>Wish the matching logic could be visible here in ISLE but that doesn't really change how I feel about this PR.</p>\n</blockquote>",
        "id": 340693239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389621
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131484188\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // fits in 32-bits.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 340693240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389622
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131473090\">PR review comment</a>:</p>\n<blockquote>\n<p>I started to wonder how many comparisons need to be made before one can emit a shuffle lowering: I think in the end it is worth it to spend a bit more time finding the right instruction here but I wonder if there is quicker way to do so. (Just wondering, no action neeeded).</p>\n</blockquote>",
        "id": 340693241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389622
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131483188\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // When selecting from the right-hand-side offset, subtract these all by 4 which\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 340693242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389622
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131489947\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this could use some documentation; it's not exactly clear why only <code>bytes[0]</code> matters here (little-endianness-related, it would seem). This is a foundational block to all of the helpers above and it would be nice to see clearly when we expect the <code>None</code>s from this function to be the ones propagated outwards.</p>\n</blockquote>",
        "id": 340693243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389622
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131490544\">PR review comment</a>:</p>\n<blockquote>\n<p>And I get that it gets rather hairy in the helpers...</p>\n</blockquote>",
        "id": 340693244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678389622
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333893370\">PR review</a>.</p>",
        "id": 340723171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678400043
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131674124\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree! I originally was wondering how bad it would be to put this all in ISLE but I ended up concluding that it would end up with even more extractors and not necessarily simplify the overall scheme, so I opted to leave the rules in ISLE but the extraction of immediates in Rust (for better or worse)</p>\n</blockquote>",
        "id": 340723184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678400044
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131675429\">PR review comment</a>:</p>\n<blockquote>\n<p>Same! My thinking though was that there's really not all that many <code>shuffle</code> instructions in a program so if <code>shuffle</code> is 100x slower to translate than <code>load</code> it's probably not the end of the world. That being said I do think that these can be slightly optimized where instead of having an extractor-per-immediate we could have one extractor that returns an <code>enum</code> of all the possible shuffle instructions that could be used which is then pattern-matched on in ISLE. I'm not sure if it would be that much faster but it would prevent bouncing back and forth between generated code and <code>isle.rs</code> if it becomes an issue.</p>\n</blockquote>",
        "id": 340723385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678400124
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333894742\">PR review</a>.</p>",
        "id": 340723387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678400124
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930\">PR #5930</a> from <code>x64-shuffles</code> to <code>main</code>.</p>",
        "id": 340724982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678400813
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930\">PR #5930</a>.</p>",
        "id": 340725009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678400827
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333925449\">PR review</a>.</p>",
        "id": 340727844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678402011
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131706726\">PR review comment</a>:</p>\n<blockquote>\n<p>I was going to mention that V8 does this \"match once, then emit\" through separate opcodes like you mention below:</p>\n<blockquote>\n<p>Oh I meant to take a look at that but never got around to it. Interestingly though it looks like the x64 backend for v8 has individual opcodes for all the punpck* variants so it seems like they probably translate shuffles to different opcodes earlier in the pipeline than what Cranelift is doing in the backend here.</p>\n</blockquote>\n<p>I like the <code>enum</code> idea for some point in the future.</p>\n</blockquote>",
        "id": 340727845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678402011
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333960817\">PR review</a>.</p>",
        "id": 340732636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678404112
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131741268\">PR review comment</a>:</p>\n<blockquote>\n<p>Somewhere in v8 though something is translating from the wasm shuffle to each individual <code>kX64*</code> instruction though, right? I would naively expect that the translation there is on the same order-of-magnitude of complexity/time/etc for what these ISLE lowerings are generating.</p>\n</blockquote>",
        "id": 340732637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678404112
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930\">PR #5930</a>.</p>",
        "id": 340734826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678405203
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333972034\">PR review</a>.</p>",
        "id": 340735498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678405518
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333972034\">PR review</a>.</p>",
        "id": 340735499,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678405519
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131757796\">PR review comment</a>:</p>\n<blockquote>\n<p>I suppose there could be a similar version of this rule if all lanes specify to broadcast the first byte of the _second_ operand. That's, what, if every byte in the mask is 0x10?</p>\n</blockquote>",
        "id": 340735500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678405519
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131762875\">PR review comment</a>:</p>\n<blockquote>\n<p>Since ISLE will combine all the <code>u128_from_immediate</code> calls in the rules at priority 6 below, many of these rules are really cheap to evaluate together. This isn't as bad as it looks. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>The <code>enum</code> approach would let ISLE do the same collapsing for a bunch more of these rules, so yeah, that should be good. Also, all the rules that would then use the same extractor but match on different returned enum variants should then be placed at the same priority if there aren't other rules at priorities in between.</p>\n</blockquote>",
        "id": 340735501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678405519
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#pullrequestreview-1333995414\">PR review</a>.</p>",
        "id": 340738533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678407126
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5930#discussion_r1131785288\">PR review comment</a>:</p>\n<blockquote>\n<p>True! I've been going back and forth a bit on how exhaustive all these rules should be. For example this rule:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">shuffle</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u128_from_immediate</span><span class=\"w\"> </span><span class=\"mh\">0x1f1e_0f0e_1d1c_0d0c_1b1a_0b0a_1918_0908</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">x64_punpckhwd</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>could also match the <code>u128</code> with the two 64-bit halves swapped to generate a <code>punpckhwd b a</code> instruction.</p>\n<p>I added a bunch of lhs/rhs shuffles here for things like <code>pshufd</code> and <code>shufps</code> but I'm also second guessing myself doing that since I didn't actually see any such shuffles in the wild and I was just adding them here on a whim. </p>\n<p>Some of this I've been feeling would be better implemented as a egraph-style optimization. For example if all the shuffles lanes are &lt;16 then the <code>b</code> operand could be dropped. If they're all &gt;=16 then they could all be updated and the <code>a</code> operand could be dropped. For the <code>punpckhwd</code> case above it's theoretically possible where the LSB of the shuffle mask could be one of the lowest numbered bytes. You can see though that by this point it feels much more complicated than a simple rule so I also haven't tried to do this yet (plus from an egraph-perspective it's not really \"simpler\" to replace a <code>shuffle</code> with a <code>shuffle</code>)</p>\n<p>In the end I figured I'd stick to doing the obvious lowerings for each instruction a platform has along with ensuring that some various simd binaries I've been seeing all have all their shuffles special-cased. We can always add more here in the future, and I was mainly hoping that by that point it's more obivous how to solve the problem of \"could this shuffle be special-cased if the operands were swapped?\"</p>\n</blockquote>",
        "id": 340738534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678407126
    }
]