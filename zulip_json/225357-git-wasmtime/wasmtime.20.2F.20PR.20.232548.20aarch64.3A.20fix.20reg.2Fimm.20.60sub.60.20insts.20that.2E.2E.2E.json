[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2548\">PR #2548</a>.</p>",
        "id": 221718598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891084
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2548\">PR #2548</a> from <code>fix-aarch64-sp</code> to <code>main</code>:</p>\n<blockquote>\n<p>On AArch64, the zero register (xzr) and the stack pointer (xsp) are<br>\nalternately named by the same index <code>31</code> in machine code depending on<br>\ncontext. In particular, in the reg-reg-immediate ALU instruction form,<br>\nadd/subtract will use the stack pointer, not the zero register, if index<br>\n31 is given for the first (register) source arg.</p>\n<p>In a few places, we were emitting subtract instructions with the zero<br>\nregister as an argument and a reg/immediate as the second argument. When<br>\nan immediate could be incorporated directly (we have the <code>iconst</code><br>\ndefinition visible), this would result in incorrect code being<br>\ngenerated.</p>\n<p>This issue was found in <code>ineg</code> and in the sequence for vector<br>\nright-shifts.</p>\n<p>Reported by Ian Cullinan; thanks!</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 221718599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609891084
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2548#pullrequestreview-562232989\">PR Review</a>.</p>",
        "id": 221720065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609892298
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2548\">PR #2548</a>.</p>",
        "id": 221721493,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609893507
    }
]