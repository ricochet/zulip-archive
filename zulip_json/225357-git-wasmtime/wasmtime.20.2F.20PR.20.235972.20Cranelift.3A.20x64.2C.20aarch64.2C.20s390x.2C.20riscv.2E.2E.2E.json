[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a> from <code>64-bit-addresses-are-64-bits</code> to <code>main</code>:</p>\n<blockquote>\n<p>@avanhatt has been looking at our address-mode lowering and found an example where when feeding an <code>I32</code>-typed address into a load or store, we can violate assumptions and get incorrect codegen.</p>\n<p>This should never be reachable in practice, because all producers on 64-bit architectures use 64-bit types for addresses. However, our IR is insufficiently constrained, and allows loads/stores to <code>I32</code> addresses as well. This is nonsensical on a 64-bit architecture.</p>\n<p>Initially I had thought we should tighten either the instruction definition's accepted types, or the CLIF verifier, to reject this. However both are target-independent, and we don't want to bake an assumption of 64-bit-ness into the compiler core. Instead this PR tightens specific backends' lowerings to rejecct loads/stores of <code>I32</code>-typed addresses.</p>\n<p>An alternative would be to modify the definition of the instructions (the <code>iAddr</code> type set) to take only <code>I64</code>s today, since all current backends are for 64-bit ISAs; or modify the verifier to require an ISA, and make verification an ISA-specific property. The former falls apart as soon as we get a 32-bit backend (and we don't want to close that door); the latter might work, but I'm not sure I like it any better. (In its favor, word size seems like the one machine property we might actually want to parameterize CLIF correctness on.)</p>\n<p>aarch64 still has <code>lower_address</code> in Rust and no clear single place to put an LHS constraint, so I opted for an assert in the external ctor. riscv64 has no single point where we have a <code>Value</code> and produce an address (<code>gen_load</code> takes a <code>Reg</code>) so all load/store lowerings get the constraint.</p>\n<p>tl;dr: no security implications as all producers use I64-typed addresses (and must, for correct operation); but we currently accept I32-typed addresses too, and this breaks other assumptions.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 340663077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678381433
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a>.</p>",
        "id": 340663078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678381433
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#pullrequestreview-1333328061\">PR review</a>.</p>",
        "id": 340663654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678381570
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a> from <code>64-bit-addresses-are-64-bits</code> to <code>main</code>:</p>\n<blockquote>\n<p>@avanhatt has been looking at our address-mode lowering and found an example where when feeding an <code>I32</code>-typed address into a load or store, we can violate assumptions and get incorrect codegen.</p>\n<p>This should never be reachable in practice, because all producers on 64-bit architectures use 64-bit types for addresses. However, our IR is insufficiently constrained, and allows loads/stores to <code>I32</code> addresses as well. This is nonsensical on a 64-bit architecture.</p>\n<p>Initially I had thought we should tighten either the instruction definition's accepted types, or the CLIF verifier, to reject this. However both are target-independent, and we don't want to bake an assumption of 64-bit-ness into the compiler core. Instead this PR tightens specific backends' lowerings to rejecct loads/stores of <code>I32</code>-typed addresses.</p>\n<p>aarch64 still has <code>lower_address</code> in Rust and no clear single place to put an LHS constraint, so I opted for an assert in the external ctor. riscv64 has no single point where we have a <code>Value</code> and produce an address (<code>gen_load</code> takes a <code>Reg</code>) so all load/store lowerings get the constraint.</p>\n<p>tl;dr: no security implications as all producers use I64-typed addresses (and must, for correct operation); but we currently accept I32-typed addresses too, and this breaks other assumptions.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 340663677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678381575
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a> from <code>64-bit-addresses-are-64-bits</code> to <code>main</code>.</p>",
        "id": 340665321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678381984
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a>.</p>",
        "id": 340665794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678382093
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a> from <code>64-bit-addresses-are-64-bits</code> to <code>main</code>.</p>",
        "id": 340678453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385207
    },
    {
        "content": "<p>cfallin has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a>.</p>",
        "id": 340678832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385326
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a>.</p>",
        "id": 340679134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385423
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#pullrequestreview-1333474959\">PR review</a>.</p>",
        "id": 340680842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385921
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#pullrequestreview-1333474959\">PR review</a>.</p>",
        "id": 340680843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385922
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#discussion_r1131426030\">PR review comment</a>:</p>\n<blockquote>\n<p>Does <code>ty_64</code> succeed for <code>f64</code>? I guess the CLIF verifier would presumably catch that one, but it may make sense to use a purpose built extractor that is called <code>is_address_type</code> or something like that.</p>\n</blockquote>",
        "id": 340680845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678385922
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#pullrequestreview-1333480278\">PR review</a>.</p>",
        "id": 340681312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678386060
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#discussion_r1131428402\">PR review comment</a>:</p>\n<blockquote>\n<p>It looks like the instruction definition (the <code>iAddr</code> type set) includes only ints and reference types, so this case can't happen. I do like <code>is_address_type</code> though; I'll do that.</p>\n</blockquote>",
        "id": 340681314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678386060
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a> from <code>64-bit-addresses-are-64-bits</code> to <code>main</code>.</p>",
        "id": 340682376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678386384
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a>.</p>",
        "id": 340682520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678386429
    },
    {
        "content": "<p>avanhatt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972#pullrequestreview-1333514752\">PR review</a>.</p>",
        "id": 340685991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678387482
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5972\">PR #5972</a>.</p>",
        "id": 340698371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678391206
    }
]