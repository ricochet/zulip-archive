[
    {
        "content": "<p>ggjjj opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1854\">https://github.com/bytecodealliance/wasm-tools/issues/1854</a> </p>\n<p>I am using a rust application that launches the wasmtime with debug_info() set to true and loads a WASM module that implements component module. </p>\n<p>I use wasm-tools to get the module adapted to wasi by<br>\n    wasm-tools component new ./target/wasm32-wasip1/debug/module1.wasm -o ./tests/data/wasm-modules/processor-module1-$(VERSION).wasm --adapt wasi_snapshot_preview1.reactor.wasm</p>\n<p>I also confirmed that the <code>wasm-tools objdump</code> to see that the debug_info information exists.</p>\n<p>now once I launch the debugger for the rust application, I am only able to step into a <code>call()</code> function and but not in the wasm module source code. </p>\n<p>is there any other step am I missing?</p>\n</blockquote>",
        "id": 475929463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728497974
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2402990341\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Configuration of wasmtime engine</p>\n<p><code>let mut engine_config = Config::new();\n    engine_config\n        .debug_info(true)\n        .cranelift_opt_level(OptLevel::None)\n        .wasm_component_model(true);</code></p>\n</blockquote>",
        "id": 475929584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728498014
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2402991503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><code>wasm-tools objdump</code> of the module1 in question</p>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1854#issuecomment-2400748393\">https://github.com/bytecodealliance/wasm-tools/issues/1854#issuecomment-2400748393</a> </p>\n</blockquote>",
        "id": 475929669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728498049
    },
    {
        "content": "<p>ggjjj edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1854\">https://github.com/bytecodealliance/wasm-tools/issues/1854</a> </p>\n<p>I am using a rust application that launches the wasmtime with debug_info() set to true and loads a WASM module that implements component module. </p>\n<p>I use wasm-tools to get the module adapted to wasi by<br>\n<code>wasm-tools component new ./target/wasm32-wasip1/debug/module1.wasm -o ./tests/data/wasm-modules/processor-module1-$(VERSION).wasm --adapt wasi_snapshot_preview1.reactor.wasm</code></p>\n<p>I also confirmed that the <code>wasm-tools objdump</code> to see that the debug_info information exists.</p>\n<p>now once I launch the debugger for the rust application, I am only able to step into a <code>call()</code> function and but not in the wasm module source code. </p>\n<p>is there any other step am I missing?</p>\n</blockquote>",
        "id": 475929741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728498078
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403021143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Do I need to include this feature   \"debug-builtins\" in wasmtime crate to enable the debug symbols?</p>\n</blockquote>",
        "id": 475932211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728499049
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403036906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>well adding the crate feature also did not help</p>\n</blockquote>",
        "id": 475932628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728499221
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403624240\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Would you be able to share snippets of the component/embedding in question? Or perhaps a snippet using the <code>wasmtime</code> CLI? It sounds like you're doing everything right, so it may come down to the details as to why this isn't working</p>\n</blockquote>",
        "id": 475977071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728517178
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403730717\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><strong>Module Code</strong></p>\n<p><code>mod map_fah_to_cel {\n    wit_bindgen::generate!({ path: \"xxx\", world \"map-iml\",});\n    // we also use some SDK elements for the exports\n    impl exports::xx:xx::xx:xx for Module {\n    fn process(message_input) -&gt; message_output\n    }\n    export!(Module);\n}</code></p>\n</blockquote>",
        "id": 475994689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728524697
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403730717\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><strong>Module Code</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">map_fah_to_cel</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"xxx\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"s\">\"map-iml\"</span><span class=\"p\">,});</span>\n<span class=\"w\">    </span><span class=\"c1\">// we also use some SDK elements for the exports</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">xx</span><span class=\"p\">:</span><span class=\"nc\">xx</span><span class=\"p\">::</span><span class=\"n\">xx</span><span class=\"p\">:</span><span class=\"nc\">xx</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"n\">message_input</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">message_output</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Module</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</blockquote>",
        "id": 475994736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728524712
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403736295\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><strong>App code that launches the runtime and loads the module</strong></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">scope</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cm\">/*</span>\n\n<span class=\"cm\">         *  As wasm runtime &amp; module have to be running on the same OS thread,</span>\n<span class=\"cm\">         *  use new_current_thread() to build a tokio runtime with the current</span>\n<span class=\"cm\">         *  thread scheduler selected.</span>\n<span class=\"cm\">         */</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">Builder</span><span class=\"p\">::</span><span class=\"n\">new_current_thread</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">enable_all</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"n\">async_main</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">async_main</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">engine_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">engine_config</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span><span class=\"p\">::</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_file_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../../tests/data/wasm-modules/processor-module1-v1.wasm\"</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component_info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasm_component_info</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">wasm_component_info</span><span class=\"p\">.</span><span class=\"n\">insert_component</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_file_name</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"c1\">// insert_wasm_module()</span>\n<span class=\"c1\">// call_map_fn()</span>\n<span class=\"c1\">// wait for wasm device manager by join()</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 475995543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728525098
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403736952\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>My goal is to step into the source code of <code>process()</code> when the <code>call_map_fn()</code> is executed.</p>\n</blockquote>",
        "id": 475995632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728525142
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403736295\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><strong>App code that launches the runtime and loads the module</strong></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">scope</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cm\">/*</span>\n\n<span class=\"cm\">         *  As wasm runtime &amp; module have to be running on the same OS thread,</span>\n<span class=\"cm\">         *  use new_current_thread() to build a tokio runtime with the current</span>\n<span class=\"cm\">         *  thread scheduler selected.</span>\n<span class=\"cm\">         */</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">Builder</span><span class=\"p\">::</span><span class=\"n\">new_current_thread</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">enable_all</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"n\">async_main</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">async_main</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">engine_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">engine_config</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span><span class=\"p\">::</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_file_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../../tests/data/wasm-modules/processor-module1-v1.wasm\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component_info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasm_component_info</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n<span class=\"w\">         </span><span class=\"n\">wasm_component_info</span><span class=\"p\">.</span><span class=\"n\">insert_component</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_file_name</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"c1\">// insert_wasm_module()</span>\n<span class=\"c1\">// call_map_fn()</span>\n<span class=\"c1\">// wait for wasm device manager by join()</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476008874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728528664
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2403736295\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><strong>App code that launches the runtime and loads the module and I am debugging this app</strong> </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">thread</span><span class=\"p\">::</span><span class=\"n\">scope</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">scope</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cm\">/*</span>\n\n<span class=\"cm\">         *  As wasm runtime &amp; module have to be running on the same OS thread,</span>\n<span class=\"cm\">         *  use new_current_thread() to build a tokio runtime with the current</span>\n<span class=\"cm\">         *  thread scheduler selected.</span>\n<span class=\"cm\">         */</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"p\">::</span><span class=\"n\">Builder</span><span class=\"p\">::</span><span class=\"n\">new_current_thread</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">enable_all</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"n\">runtime</span><span class=\"p\">.</span><span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"n\">async_main</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">async_main</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">engine_config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">engine_config</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">cranelift_opt_level</span><span class=\"p\">(</span><span class=\"n\">OptLevel</span><span class=\"p\">::</span><span class=\"nb\">None</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_file_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../../tests/data/wasm-modules/processor-module1-v1.wasm\"</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_component_info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasm_component_info</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">();</span>\n<span class=\"w\">         </span><span class=\"n\">wasm_component_info</span><span class=\"p\">.</span><span class=\"n\">insert_component</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm_module_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_file_name</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"c1\">// insert_wasm_module()</span>\n<span class=\"c1\">// call_map_fn()</span>\n<span class=\"c1\">// wait for wasm device manager by join()</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 476024791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728533120
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405382633\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>@ggjjj I appreciate that you provided some source code here, but it is incomplete and contains syntactical errors (eg no type on <code>async_main</code>'s parameter).</p>\n<p>Could you provide a git repo containing a fully self contained example that we can simply clone as well as detailed steps reproduce with exactly that git repo? Something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Minimal</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">case</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">url</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">git</span><span class=\"o\">-</span><span class=\"n\">repo</span>\n\n<span class=\"n\">Steps</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">reproduce</span><span class=\"p\">:</span>\n\n\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">clone</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">repo</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">Run</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">repo</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">Run</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">lldb</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">until</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">reach</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">function</span>\n\n<span class=\"n\">Expected</span><span class=\"w\"> </span><span class=\"n\">Results</span>\n\n\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">You</span><span class=\"w\"> </span><span class=\"n\">stepped</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">::</span><span class=\"n\">bar</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">function</span>\n\n<span class=\"n\">Actual</span><span class=\"w\"> </span><span class=\"n\">Results</span>\n\n\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">You</span><span class=\"w\"> </span><span class=\"n\">never</span><span class=\"w\"> </span><span class=\"n\">stepped</span><span class=\"w\"> </span><span class=\"n\">through</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">::</span><span class=\"n\">bar</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">function</span>\n</code></pre></div>\n<p>The easier you can make it to reproduce the bug exactly, without needing to fix source code that doesn't build or infer steps that are implied but not explicitly described, the better we can help you and diagnose/resolve the bug that you are seeing.</p>\n<p>Thanks!</p>\n</blockquote>",
        "id": 476156337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728572674
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405670263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I understand but we are working on private code. so is there any way I can debug this further?  @fitzgen </p>\n</blockquote>",
        "id": 476184555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728581160
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405680723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Have you tried making a minimal reproducer that doesn't contain your private code?</p>\n</blockquote>",
        "id": 476185468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728581503
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405683927\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I am trying that. Is this the sample that you recommend?</p>\n<p><a href=\"https://github.com/bytecodealliance/component-docs/blob/main/component-model/examples/example-host/src/add.rs\">https://github.com/bytecodealliance/component-docs/blob/main/component-model/examples/example-host/src/add.rs</a></p>\n</blockquote>",
        "id": 476185749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728581610
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405683927\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I am trying that. Is this a sample that you recommend?</p>\n<p><a href=\"https://github.com/bytecodealliance/component-docs/blob/main/component-model/examples/example-host/src/add.rs\">https://github.com/bytecodealliance/component-docs/blob/main/component-model/examples/example-host/src/add.rs</a></p>\n</blockquote>",
        "id": 476185778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728581621
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405722405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>If you can get that example to reproduce your issue, then that sounds great. If you can't get that example to reproduce your issue, then I'd suggest trying to make calls and link modules/components together in a similar shape as your private code in an effort to find something that will reproduce the bug.</p>\n</blockquote>",
        "id": 476189398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728582943
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406145123\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Sample  tried - <code>https://github.com/bytecodealliance/wasmtime/tree/main/examples/component</code> </p>\n<p>Steps followed</p>\n<ol>\n<li>cargo build -p example-component-wasm --target wasm32-unknown-unknown</li>\n<li>cargo run --example component</li>\n</ol>\n<p>I was succesfully able to step into source code in <a href=\"http://guest.rs\">guest.rs</a></p>\n<p>Next I switched to <code>wasm32-wasip1</code> target</p>\n<p>Steps followed</p>\n<ol>\n<li>cargo build -p example-component-wasm --target wasm32-wasip1</li>\n<li>cargo run --example component</li>\n</ol>\n<p>**Error: failed to decode world from module</p>\n<p>Caused by:<br>\n    0: module was not valid<br>\n    1: failed to resolve import <code>wasi_snapshot_preview1::fd_write</code><br>\n    2: module requires an import interface named `wasi_snapshot_preview1**</p>\n</blockquote>",
        "id": 476235960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599004
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406146596\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>My goal was to convert the module to adapt to wasi-preview1</p>\n<p>by</p>\n<p><code>wasm-tools component new ./target/wasm32-wasip1/debug/guest.wasm -o ./target/wasm32-wasip1/debug/guest-wasi.wasm  --adapt wasi_snapshot_preview1.reactor.wasm</code> </p>\n<p>But I couldn't get to this step <br>\n</p>\n</blockquote>",
        "id": 476236164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599098
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406146596\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>My goal was to convert the module to adapt to wasi-preview1</p>\n<p>by</p>\n<p><code>wasm-tools component new ./target/wasm32-wasip1/debug/guest.wasm -o ./target/wasm32-wasip1/debug/guest-wasi.wasm  --adapt wasi_snapshot_preview1.reactor.wasm</code> </p>\n<p>and use guest-wasi.wasm to load in <code>main.rs</code> of component <br>\nBut I couldn't get to this step <br>\n</p>\n</blockquote>",
        "id": 476236218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599124
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406157301\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I tried to use the guest-wasi.wasm in line53 of <a href=\"http://main.rs\">main.rs</a></p>\n<div class=\"codehilite\"><pre><span></span><code>let component = convert_to_component(&quot;target/wasm32-wasip1/debug/guest-wasi.wasm&quot;)?;\n\nwhile running it\n\nI got this error\n\n**Error: decoding a component is not supported**\n</code></pre></div>\n\n</blockquote>",
        "id": 476237476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599724
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406157690\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I used 25.0.2 snapshot file <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/releases/download/v25.0.2/wasi_snapshot_preview1.reactor.wasm\">https://github.com/bytecodealliance/wasmtime/releases/download/v25.0.2/wasi_snapshot_preview1.reactor.wasm</a></p>\n</blockquote>",
        "id": 476237524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599749
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406157301\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I tried to use the guest-wasi.wasm in line53 of <a href=\"http://main.rs\">main.rs</a></p>\n<p><code>  let component = convert_to_component(\"target/wasm32-wasip1/debug/guest-wasi.wasm\")?;</code></p>\n<div class=\"codehilite\"><pre><span></span><code>while running it\n\nI got this error\n\n**Error: decoding a component is not supported**\n</code></pre></div>\n\n</blockquote>",
        "id": 476237597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599768
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406157301\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I tried to use the guest-wasi.wasm in line53 of <a href=\"http://main.rs\">main.rs</a></p>\n<p><code>  let component = convert_to_component(\"target/wasm32-wasip1/debug/guest-wasi.wasm\")?;</code><br>\n     while running it,  I got this error</p>\n<div class=\"codehilite\"><pre><span></span><code>**Error: decoding a component is not supported**\n</code></pre></div>\n\n</blockquote>",
        "id": 476237630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728599784
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406165170\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>May I know why 26.0.0 is wasmtime version when only 25.0.2 is released?<br>\n</p>\n</blockquote>",
        "id": 476238501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728600203
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2406157301\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I tried to use the guest-wasi.wasm in line53 of <a href=\"http://main.rs\">main.rs</a> after the above <code>wasm-tools</code> command</p>\n<p><code>  let component = convert_to_component(\"target/wasm32-wasip1/debug/guest-wasi.wasm\")?;</code><br>\n     while running it,  I got this error</p>\n<div class=\"codehilite\"><pre><span></span><code>**Error: decoding a component is not supported**\n</code></pre></div>\n\n</blockquote>",
        "id": 476282608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728616922
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2407874538\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>@fitzgen  Hey Nick did you get  a chance to look at this one?</p>\n</blockquote>",
        "id": 476433553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728668876
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2408198458\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>@ggjjj it looks like there's a lot going on here with quite a few possibilities of what could be going wrong. We can try to piece together everything from the snippets of information you're posting but it'd be much more helpful to us as maintainers if you're able to do what <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2405382633\">Nick mentioned above</a> with having a reproducible set of steps. It looks like you're trying a lot of things all at once and each thing is failing in different ways which may be unrelated to the original issue</p>\n</blockquote>",
        "id": 476467922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728685866
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2408769810\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Agree and apologize for including some many of the methods I tried in once. ok let me start step by step.</p>\n<p><strong>Goal 1 - try the component example with wasm32-wasip1.</strong></p>\n<p>Minimal test case: <a href=\"https://github.com/ggjjj/wasmtime\">url-of-git-repo</a></p>\n<p>Steps to reproduce:</p>\n<ul>\n<li>clone git repo</li>\n<li>cargo build -p example-component-wasm --target wasm32-wasip1</li>\n<li>cargo run --example wasm32-wasip1</li>\n</ul>\n<p>Expected Results</p>\n<ul>\n<li>Converted to <a href=\"http://74.xxx\">74.xxx</a></li>\n</ul>\n<p>Actual Results</p>\n<p>Error: failed to decode world from module</p>\n<p>Caused by:<br>\n    0: module was not valid<br>\n    1: failed to resolve import <code>wasi_snapshot_preview1::fd_write</code><br>\n    2: module requires an import interface named <code>wasi_snapshot_preview1</code></p>\n</blockquote>",
        "id": 476564306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728781219
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2408769810\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Agree and apologize for including some many of the methods I tried in once. ok let me start step by step.</p>\n<p><strong>Goal 1 - try the component example with wasm32-wasip1.</strong></p>\n<p>Minimal test case: <a href=\"https://github.com/ggjjj/wasmtime\">url-of-git-repo</a></p>\n<p>Steps to reproduce:</p>\n<ul>\n<li>clone git repo</li>\n<li>cargo build -p example-component-wasm --target wasm32-wasip1</li>\n<li>cargo run --example wasm32-wasip1</li>\n</ul>\n<p>Expected Results</p>\n<ul>\n<li>Converted to <a href=\"http://74.xxx\">74.xxx</a></li>\n</ul>\n<p>Actual Results</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">::</span><span class=\"n\">fd_write</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"err\">`</span>\n</code></pre></div>\n</blockquote>",
        "id": 476564343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728781256
    },
    {
        "content": "<p>ggjjj edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2408769810\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Agree and apologize for including some many of the methods I tried in once. ok let me start step by step.</p>\n<p><strong>Goal 1 - Try the <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/examples/component\">component example</a> with wasm32-wasip1.</strong></p>\n<p>Minimal test case: <a href=\"https://github.com/ggjjj/wasmtime\">url-of-git-repo</a></p>\n<p>Steps to reproduce:</p>\n<ul>\n<li>clone git repo</li>\n<li>cargo build -p example-component-wasm --target wasm32-wasip1</li>\n<li>cargo run --example wasm32-wasip1</li>\n</ul>\n<p>Expected Results</p>\n<ul>\n<li>Converted to <a href=\"http://74.xxx\">74.xxx</a></li>\n</ul>\n<p>Actual Results</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">resolve</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">::</span><span class=\"n\">fd_write</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"err\">`</span>\n</code></pre></div>\n</blockquote>",
        "id": 476564375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728781293
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2412309983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>@alexcrichton @fitzgen  Is the above format okay? Is there any other information needed? Please advise<br>\n</p>\n</blockquote>",
        "id": 476850252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1728938953
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2415566039\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>I figured out what I was missing. Once I defined the wasibuilder, I was able to get it all to working and eventually step into the source code. Sample is somewhat closer to the app we have in house but it does create two threads<br>\nOne thread is to create engine, linker, store and another thread is to extract and call component function. any thoughts on if that would affect the debug symbols to be lost in someway?  @alexcrichton @fitzgen </p>\n</blockquote>",
        "id": 477101972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729043760
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2415818842\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>@ggjjj from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2408769810\">your comment above</a> the error is happening because conversion to a component is a bit more subtle when the different target of <code>wasm32-wasip1</code> is used. Nowadays if you use <code>wasm32-wasip2</code> the target automatically produces a component which is probably what we should update the example to be doing.</p>\n<blockquote>\n<p>any thoughts on if that would affect the debug symbols to be lost in someway?</p>\n</blockquote>\n<p>Hm in theory no, having separate threads shouldn't affect anything. Were you able to get a reproduction we could poke around though?</p>\n</blockquote>",
        "id": 477129794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729059139
    },
    {
        "content": "<p>ggjjj closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1854\">https://github.com/bytecodealliance/wasm-tools/issues/1854</a> </p>\n<p>I am using a rust application that launches the wasmtime with debug_info() set to true and loads a WASM module that implements component module. </p>\n<p>I use wasm-tools to get the module adapted to wasi by<br>\n<code>wasm-tools component new ./target/wasm32-wasip1/debug/module1.wasm -o ./tests/data/wasm-modules/processor-module1-$(VERSION).wasm --adapt wasi_snapshot_preview1.reactor.wasm</code></p>\n<p>I also confirmed that the <code>wasm-tools objdump</code> to see that the debug_info information exists.</p>\n<p>now once I launch the debugger for the rust application, I am only able to step into a <code>call()</code> function and but not in the wasm module source code. </p>\n<p>is there any other step am I missing?</p>\n</blockquote>",
        "id": 477340595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729134752
    },
    {
        "content": "<p>ggjjj <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426#issuecomment-2418406478\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9426\">issue #9426</a>:</p>\n<blockquote>\n<p>Looks it its not the separate threads its the wasmtime version. 24.0.0 did not work. 25.0.2 worked. Thanks for all the insights. closing the issue</p>\n</blockquote>",
        "id": 477340596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729134752
    }
]