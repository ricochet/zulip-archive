[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>I ran across this uptream in cargo-wasi, but this fails to work in this repository, but only on Windows:</p>\n<div class=\"codehilite\"><pre><span></span>$ echo &quot;#[test] fn foo() {}&quot; &gt;&gt; foo.rs\n$ rustc foo.rs --target wasm32-wasi --test\n$ cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\n</pre></div>\n\n\n<p>The underlying reason can be found with <code>RUST_LOG</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$ RUST_LOG=warn cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (288 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (416 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\nerror: process didn&#39;t exit successfully: `target\\debug\\wasmtime.exe foo.wasm` (exit code: 1)\n</pre></div>\n\n\n<p>It looks like it's due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\" title=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\">these lines</a> introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a>. cc @iximeow do you know how hard it'd be to fix that warning?</p>\n</blockquote>",
        "id": 195107766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669848
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-618611093\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-618611093\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>also cc @peterhuene, you might be interested in this</p>\n</blockquote>",
        "id": 195107855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669890
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>I ran across this uptream in cargo-wasi, but this fails to work in this repository, but only on Windows:</p>\n<div class=\"codehilite\"><pre><span></span>$ echo &quot;#[test] fn foo() {}&quot; &gt;&gt; foo.rs\n$ rustc foo.rs --target wasm32-wasi --test\n$ cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\n</pre></div>\n\n\n<p>The underlying reason can be found with <code>RUST_LOG</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$ RUST_LOG=warn cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (288 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (416 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\nerror: process didn&#39;t exit successfully: `target\\debug\\wasmtime.exe foo.wasm` (exit code: 1)\n</pre></div>\n\n\n<p>It looks like it's due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\" title=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\">these lines</a> introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a>. cc @iximeow do you know how hard it'd be to fix that warning?</p>\n</blockquote>",
        "id": 195107876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587669901
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-618670136\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-618670136\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>It shouldn't be terribly hard to fix, but I haven't had the time to focus on this for a bit. #1475 is indeed the issue tracking this Cranelift limitation. It _shouldn't_ be too hard to fix, but I'm not certain on how to change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/stack_layout.rs#L19-L23\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/stack_layout.rs#L19-L23\">layout_stack</a> to fix it.</p>\n<p>Windows seems to prefer stack layouts with callee-save values closer to SP rather than the base of the call frame. Adjusting <code>layout_stack</code> so that the FPR region is positioned correctly should be all that's necessary.</p>\n<p>I'd also assumed the original ABI incompatibility would be a simple 30 minute fix, but took significantly longer to get straight, hence my hesitance to pick it up.</p>\n</blockquote>",
        "id": 195119526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587675903
    },
    {
        "content": "<p>iximeow edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-618670136\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-618670136\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>It shouldn't be terribly hard to fix, but I haven't had the time to focus on this for a bit. #1475 is indeed the issue tracking this Cranelift limitation. I'm not certain on how to change <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/stack_layout.rs#L19-L23\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/src/stack_layout.rs#L19-L23\">layout_stack</a> to fix it, so it might actually be trickier.</p>\n<p>Windows seems to prefer stack layouts with callee-save values closer to SP rather than the base of the call frame. Adjusting <code>layout_stack</code> so that the FPR region is positioned correctly should be all that's necessary.</p>\n<p>I'd also assumed the original ABI incompatibility would be a simple 30 minute fix, but took significantly longer to get straight, hence my hesitance to pick it up.</p>\n</blockquote>",
        "id": 195119677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587675963
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-622062013\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-622062013\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>When I get a spare second, I'll investigate fixing this too.</p>\n<p>For Windows x64, we should be laying out the stack like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[return address]\n[saved RBP] &lt;--- frame pointer target\n[saved integer registers]\n[saved floating point registers] &lt;-- address of last saved FPR = &quot;unwind base address&quot;\n[locals / spills]\n[callee argument space]\n[32 bytes of shadow store space]\n</code></pre></div>\n\n\n<p>The problem now is that it is laid out like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[return address]\n[saved RBP] &lt;--- frame pointer target\n[saved integer registers]\n[locals / spills]\n[saved floating point registers] &lt;--- &quot;unwind base address&quot; might be too far from FP\n[callee argument space]\n[32 bytes of shadow store space]\n</code></pre></div>\n\n\n<p>Windows unwind information expects a small, fixed-size area for register saves relative to the frame pointer, thus it only encodes a maximum offset of 240 to reach the \"unwind base address\".  By sticking the variable-sized stack allocation in-between where FRPs are saved, we can't always represent these frames for unwind.</p>\n</blockquote>",
        "id": 195890407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588275366
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>I ran across this uptream in cargo-wasi, but this fails to work in this repository, but only on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ echo &quot;#[test] fn foo() {}&quot; &gt;&gt; foo.rs\n$ rustc foo.rs --target wasm32-wasi --test\n$ cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\n</code></pre></div>\n\n\n<p>The underlying reason can be found with <code>RUST_LOG</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_LOG=warn cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (288 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (416 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\nerror: process didn&#39;t exit successfully: `target\\debug\\wasmtime.exe foo.wasm` (exit code: 1)\n</code></pre></div>\n\n\n<p>It looks like it's due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\">these lines</a> introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a>. cc @iximeow do you know how hard it'd be to fix that warning?</p>\n</blockquote>",
        "id": 198116132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589917091
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>I ran across this uptream in cargo-wasi, but this fails to work in this repository, but only on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ echo &quot;#[test] fn foo() {}&quot; &gt;&gt; foo.rs\n$ rustc foo.rs --target wasm32-wasi --test\n$ cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\n</code></pre></div>\n\n\n<p>The underlying reason can be found with <code>RUST_LOG</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_LOG=warn cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (288 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (416 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\nerror: process didn&#39;t exit successfully: `target\\debug\\wasmtime.exe foo.wasm` (exit code: 1)\n</code></pre></div>\n\n\n<p>It looks like it's due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\">these lines</a> introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a>. cc @iximeow do you know how hard it'd be to fix that warning?</p>\n</blockquote>",
        "id": 198137926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589929364
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>I ran across this uptream in cargo-wasi, but this fails to work in this repository, but only on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ echo &quot;#[test] fn foo() {}&quot; &gt;&gt; foo.rs\n$ rustc foo.rs --target wasm32-wasi --test\n$ cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\n</code></pre></div>\n\n\n<p>The underlying reason can be found with <code>RUST_LOG</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_LOG=warn cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (288 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (416 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\nerror: process didn&#39;t exit successfully: `target\\debug\\wasmtime.exe foo.wasm` (exit code: 1)\n</code></pre></div>\n\n\n<p>It looks like it's due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\">these lines</a> introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a>. cc @iximeow do you know how hard it'd be to fix that warning?</p>\n</blockquote>",
        "id": 198137927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589929364
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-631132403\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 198137961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589929386
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587#issuecomment-631356885\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a>:</p>\n<blockquote>\n<p>I nearly have a fix completed.</p>\n<p>As I was investigating this issue I discovered #1728.  As a result of using an explicit slot, there's the additional problem of accidentally saving the FPRs in the reserved area for callee shadow space, which allows for the possibility of trashing the saved values when calling into non-cranelift code (i.e. into a function that actually uses the shadow space).  The problem affects any explicit slot, but will always affect saved FPRs since it's the last explicit slot laid out currently (i.e. saved FPRs get the <em>lowest</em> address in the frame) for Windows x64.</p>\n<p>Instead of saving the FPRs as an explicit slot, I am treating them more like the GPRs: the total CSR space is calculated as the sum of the GPR and FPR space.  Like the GPRs, an explicit stack slot isn't used.  Instead, the prologue uses a relative offset from a post-adjusted SP for the saves.</p>\n<p>Here's a function that demonstrates both the limitation in this issue (notably that spills/explicits are at a <em>higher</em> address the saved FPRs) as well as the shadow space problem:</p>\n<div class=\"codehilite\"><pre><span></span><code>set opt_level=speed_and_size\nset is_pic\ntarget x86_64 haswell\n\nfunction %foo(f64, f64, f64, f64) windows_fastcall {\n    fn0 = %bar(i64) windows_fastcall\n    ss0 = explicit_slot 8\nblock0(v0: f64, v1: f64, v2: f64, v3: f64):\n; explicitly use a callee-save register\n[-, %xmm6]  v4 = fadd v0, v1\n[-, %xmm7]  v5 = fadd v0, v1\n    v6 = stack_addr.i64 ss0\n    call fn0(v6)\n    return\n}\n</code></pre></div>\n\n\n<p>Old code generation:</p>\n<div class=\"codehilite\"><pre><span></span><code>   0:   55                      push    rbp\n   1:   48 89 e5                mov     rbp, rsp\n   4:   48 83 ec 50             sub     rsp, 0x50\n   8:   4c 8d 9c 24 00 00 00 00 lea     r11, [rsp]\n  10:   41 0f 11 33             movups  xmmword ptr [r11], xmm6\n  14:   41 0f 11 7b 10          movups  xmmword ptr [r11 + 0x10], xmm7\n  19:   48 8d 84 24 28 00 00 00 lea     rax, [rsp + 0x28]\n  21:   48 89 c1                mov     rcx, rax\n  24:   e8 00 00 00 00          call    0x29\n  29:   4c 8d 9c 24 00 00 00 00 lea     r11, [rsp]\n  31:   41 0f 10 33             movups  xmm6, xmmword ptr [r11]\n  35:   41 0f 10 7b 10          movups  xmm7, xmmword ptr [r11 + 0x10]\n  3a:   48 83 c4 50             add     rsp, 0x50\n  3e:   5d                      pop     rbp\n  3f:   c3                      ret\n</code></pre></div>\n\n\n<p>Note that <code>[rsp]</code> is storing a saved FPR, which is actually the first 16 bytes of the callee's shadow space <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span>.</p>\n<p>New code generation (also with the fix to account for shadow space properly):</p>\n<div class=\"codehilite\"><pre><span></span><code>   0:   55                      push    rbp\n   1:   48 89 e5                mov     rbp, rsp\n   4:   48 83 ec 50             sub     rsp, 0x50\n   8:   0f 11 74 24 40          movups  xmmword ptr [rsp + 0x40], xmm6\n   d:   0f 11 7c 24 30          movups  xmmword ptr [rsp + 0x30], xmm7\n  12:   48 8d 84 24 28 00 00 00 lea     rax, [rsp + 0x28]\n  1a:   48 89 c1                mov     rcx, rax\n  1d:   e8 00 00 00 00          call    0x22\n  22:   0f 10 74 24 40          movups  xmm6, xmmword ptr [rsp + 0x40]\n  27:   0f 10 7c 24 30          movups  xmm7, xmmword ptr [rsp + 0x30]\n  2c:   48 83 c4 50             add     rsp, 0x50\n  30:   5d                      pop     rbp\n  31:   c3                      ret\n</code></pre></div>\n\n\n<p>With these changes, the unwind information should now always be able to describe where the saved FPRs are.</p>\n</blockquote>",
        "id": 198173219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589966794
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1587\">Issue #1587</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>I ran across this uptream in cargo-wasi, but this fails to work in this repository, but only on Windows:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ echo &quot;#[test] fn foo() {}&quot; &gt;&gt; foo.rs\n$ rustc foo.rs --target wasm32-wasi --test\n$ cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\n</code></pre></div>\n\n\n<p>The underlying reason can be found with <code>RUST_LOG</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ RUST_LOG=warn cargo run foo.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.25s\n     Running `target\\debug\\wasmtime.exe foo.wasm`\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (288 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\n WARN  cranelift_codegen::isa::x86::unwind::winx64 &gt; stack frame is too large (416 bytes) to use with Windows x64 SEH when preserving FPRs. This is a Cranelift implementation lim\nit, see https://github.com/bytecodealliance/wasmtime/issues/1475\nError: failed to run main module `foo.wasm`\n\nCaused by:\n    0: WebAssembly failed to compile\n    1: Compilation error: Implementation limit exceeded\nerror: process didn&#39;t exit successfully: `target\\debug\\wasmtime.exe foo.wasm` (exit code: 1)\n</code></pre></div>\n\n\n<p>It looks like it's due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4736a1c5774d6641af4d920a265ae3fe91c85ee8/cranelift/codegen/src/isa/x86/unwind/winx64.rs#L187-L193\">these lines</a> introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1216\">https://github.com/bytecodealliance/wasmtime/pull/1216</a>. cc @iximeow do you know how hard it'd be to fix that warning?</p>\n</blockquote>",
        "id": 198482114,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590174399
    }
]