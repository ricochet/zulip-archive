[
    {
        "content": "<p>rockwotj opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a> from <code>rockwotj:async</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This patch set extends the C API to allow for async execution of WebAssembly as well as async host calls to suspend the VM.</p>\n<p>The APIs where mostly follow the rust implementation in places, but I am happy to take suggestions for alternatives in places.</p>\n<p>Additionally, I wrote the async example in C++ because that is easier to get working cross platform and do things like spawn another thread to execute the host functions easier, I'm not sure if having C++ in the examples is desirable, but I could possibly simplify the example if we wanted to keep things in C.</p>\n<p>Fixes: #3111<br>\nFixes: #6277<br>\n</p>\n</blockquote>",
        "id": 393791051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695928846
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393791054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695928847
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393791055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695928847
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393791058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695928848
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393791506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695929048
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393792055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695929303
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393794524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695930398
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393795375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695930768
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393844102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695958160
    },
    {
        "content": "<p>rockwotj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>:</p>\n<blockquote>\n<p>This patch set extends the C API to allow for async execution of WebAssembly as well as async host calls to suspend the VM.</p>\n<p>The APIs here mostly follow the rust implementation, but I am happy to take suggestions for alternatives. </p>\n<p>Additionally, I wrote the async example in C++ because that is easier to get working cross platform and do things like spawn another thread to execute the host functions easier, I'm not sure if having C++ in the examples is desirable, but I could possibly simplify the example if we wanted to keep things in C.</p>\n<p>Fixes: #3111<br>\nFixes: #6277<br>\n</p>\n</blockquote>",
        "id": 393848214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695960426
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650897866\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this! I've written down some thoughts on the API and documentation as well, but please let me know if anything is confusing or doesn't feel actionable!</p>\n</blockquote>",
        "id": 393946588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999151
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650897866\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for this! I've written down some thoughts on the API and documentation as well, but please let me know if anything is confusing or doesn't feel actionable!</p>\n</blockquote>",
        "id": 393946590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999151
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341437820\">PR review comment</a>:</p>\n<blockquote>\n<p>Given that all this function does is box up the above structure which already has public fields, I think it'd be ok to drop this function entirely. Instead it can be replaced with manual management of the structure in C/C++</p>\n</blockquote>",
        "id": 393946591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999151
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341436091\">PR review comment</a>:</p>\n<blockquote>\n<p>From an organizational perspective, what do you think about putting all of these functions in a new <code>wasmtime/async.h</code> header? Ideally we'd go as far as generating <code>wasmtime/__config__.h</code> or something which has <code>#define WASMTIME_ASYNC 0</code> in non-async builds of the C API, but we don't need to get that fancy yet. In the meantime though having what is almost a conditional header might be a good way to mitigate that in the meantime.</p>\n</blockquote>",
        "id": 393946592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999151
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341444310\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this, and other <code>async</code> functions, be listed as safe throughout the Rust crate? For example the main reason for the unsfaety here is the <code>results</code> and <code>args</code> raw pointers but that can be mitigated one layer up where <code>wasmtime_func_call_async</code> would perform the <code>slice_from_raw_parts</code> calls, then passing safe slices to the <code>async</code> pieces here.</p>\n<p>I ask mainly because mixing <code>async</code> and <code>unsafe</code> is a recipe for bad things to happen, particularly around the lifetimes of arguments and such.</p>\n</blockquote>",
        "id": 393946593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999151
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341456275\">PR review comment</a>:</p>\n<blockquote>\n<p>This isn't quite right since the main result is transmitting through the <code>instance</code> pointer I think? Given my suggestion above though it would mean that all results are transmitted through provided pointers, too.</p>\n</blockquote>",
        "id": 393946594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999152
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341446902\">PR review comment</a>:</p>\n<blockquote>\n<p>To bikeshed this API slightly, I think it might help using this to perhaps refactor this slightly. What do you think about removing <code>wasmtime_call_future_get_results</code> and only having <code>wasmtime_call_future_poll</code>?  That way the polling method is basically a test of \"is this done yet\". </p>\n<p>The main purpose of <code>wasmtime_call_future_get_results</code> it seems is to communicate the error, but I think this would work well if the future in Rust was <code>Output = ()</code> and then APIs such as <code>wasmtime_linker_instantiate_async</code> take a <code>wasmtime_error_t**</code> as a pointer to fill in with the error, if any.</p>\n</blockquote>",
        "id": 393946596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999152
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341463417\">PR review comment</a>:</p>\n<blockquote>\n<p>This I think warrants a bit of expansion and more explanation. This might be another good use case for an <code>async.h</code> header file which could have a dedicated comment at the top discussing how async works. </p>\n<ul>\n<li>All arguments to async functions are \"captured\" for the entire duration of the future. They must stay valid and no other modifications are allowed during the lifetime of the future, or it's UB. This is a guarantee to <code>wasmtime_func_async_callback_t</code> provided by Wasmtime, but also something embedders must guarantee when calling APIs such as <code>wasmtime_linker_instantiate_async</code></li>\n<li>One point to emphasize is that this includes <code>store</code>, meaning that concurrent invocations of futures are not allowed. Instead only one future per store can be active at any one point in time. My guess is that many people may get this wrong by accident so it's definitely something I want called out in the documentation. Ideally there'd be a double-check in the C API which sets/clears a flag and panics if the flag is cleared indicating that a future is active, but that's ok to do as a follow-up.</li>\n<li>For <code>wasmtime_linker_define_async_func</code> it's worth noting that the native code defined by <code>cb</code> will not be invoked on the current stack but will be invoked on a separate stack (and a separate fiber on Windows). This can possibly be important for some embeddings.</li>\n</ul>\n<p>Basically I think it's ok for the docs on individual functions to be a bit terse, but there are a huge number of gotchas with getting async right in C. There's no protection lifetime-wise when it's most critically required for async so I'd want to make sure that we at least have some longer-form documentation explaining some of the hazards and what embedders need to consider when designing their own async support. If you're up for starting the documentation I can try to help fill it in too.</p>\n</blockquote>",
        "id": 393946597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999152
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341454504\">PR review comment</a>:</p>\n<blockquote>\n<p>One thing that worries me about this is that there's an implicit contract that while this future is alive it cannot access <code>hostcall_val_storage</code> because that's been handed out to C and it is expected to retain pointers to it. Within the <code>poll</code> method, however, there's nothing stopping the impementation from accessing this variable.</p>\n<p>I'm trying to think of how to best restructure this to best handle this, but nothing feels like a slam dunk to me. That being said, how would you feel about:</p>\n<ul>\n<li>Minmizing the size fo this <code>CHostCallFuture</code> to basically dealing with <code>wasmtime_async_continuation_t</code>. (e.g. you may be able to get away with <code>impl Future for wasmtime_async_continuation_t</code> or something like that.</li>\n<li>Moving the bulk of this function to an <code>async fn</code>. The <code>async fn</code> would take as arguments most of the struct fields here, which would guarantee they're valid for the lifetime of the function.</li>\n<li>Within the <code>async fn</code> there'd be a <code>.await</code> on <code>wasmtime_async_continuation_t</code> from above (or the equivalent thereof). This would prevent access to the local variables while the function is awaiting.</li>\n</ul>\n<p>That feels enough to me to prevent footguns for now, despite it not being 100% bulletproof.</p>\n</blockquote>",
        "id": 393946598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999152
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341436530\">PR review comment</a>:</p>\n<blockquote>\n<p>And additionally I think it might be good to place all the Rust code in a <code>crates/c-api/src/async.rs</code> or similar.</p>\n</blockquote>",
        "id": 393946599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999152
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650966907\">PR review</a>.</p>",
        "id": 393948624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999787
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341475499\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah happy to move all this to a dedicated header and source file.</p>\n</blockquote>",
        "id": 393948625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999787
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650967735\">PR review</a>.</p>",
        "id": 393948701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999815
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341476020\">PR review comment</a>:</p>\n<blockquote>\n<p>To be clear, you're talking about moving the function and linker methods into this new header too?</p>\n</blockquote>",
        "id": 393948702,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999815
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650968026\">PR review</a>.</p>",
        "id": 393948728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999825
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341476178\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good.</p>\n</blockquote>",
        "id": 393948729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695999825
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341493127\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed yeah I think that'd be a good way to organize, although if you feel differently I don't feel strongly so it's ok to leave as-is too</p>\n</blockquote>",
        "id": 393951075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696000530
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650991874\">PR review</a>.</p>",
        "id": 393951076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696000530
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650975129\">PR review</a>.</p>",
        "id": 393956954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696002337
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1650975129\">PR review</a>.</p>",
        "id": 393956955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696002337
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341480365\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds good, so the API for the new async functions would be as follows?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">wasmtime_call_future_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">wasmtime_func_call_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_context_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasmtime_func_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">func</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasmtime_val_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">nargs</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_val_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">results</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">nresults</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_error_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasm_trap_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">);</span>\n\n<span class=\"n\">WASM_API_EXTERN</span><span class=\"w\"> </span><span class=\"n\">wasmtime_call_future_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">wasmtime_linker_instantiate_async</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasmtime_linker_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">linker</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_context_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">module</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_instance_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">instance</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_error_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasm_trap_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 393956957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696002337
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651086534\">PR review</a>.</p>",
        "id": 393959200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696003160
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341550810\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that looks good to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 393959202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696003160
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341550810\">PR review comment</a>.</p>",
        "id": 393959205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696003161
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651124399\">PR review</a>.</p>",
        "id": 393965457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696004725
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341574810\">PR review comment</a>:</p>\n<blockquote>\n<p>I actually wanted to do this at first so happy to update :) </p>\n</blockquote>",
        "id": 393965459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696004726
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393971890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006846
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651175225\">PR review</a>.</p>",
        "id": 393971909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006854
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341607040\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 393971910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006855
    },
    {
        "content": "<p>rockwotj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341608340\">PR review comment</a>.</p>",
        "id": 393971991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006896
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651177163\">PR review</a>.</p>",
        "id": 393971994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006896
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341608340\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks yes this is better as I'm wrapping my head around async + unsafe in Rust <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> done.</p>\n</blockquote>",
        "id": 393971995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006896
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651181471\">PR review</a>.</p>",
        "id": 393972225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006978
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341611654\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay I took a stab at this - I wasn't able to figure out how to make <code>wasmtime_async_continuation_t</code> a future without remove the <code>caller</code> parameter, but maybe that should follow suit of the results and params args and just make the caller keep a reference to that too.</p>\n</blockquote>",
        "id": 393972226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696006978
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651197605\">PR review</a>.</p>",
        "id": 393973274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696007417
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341621489\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay I did that and see what you were saying. Nice suggestion!</p>\n</blockquote>",
        "id": 393973277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696007417
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651232470\">PR review</a>.</p>",
        "id": 393977018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696008989
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341643368\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ideally there'd be a double-check in the C API which sets/clears a flag and panics if the flag is cleared indicating that a future is active, but that's ok to do as a follow-up.</p>\n</blockquote>\n<p>Not that my embedding does this - but is it safe to call back into the VM from a async host function? That maybe a reason to not add this check.</p>\n<p>I took a stab at the documentation. I will admit documentation is not my strong suit so help is appreciated (or I'm happy to rubber duck/review a followup PR on improving the documentation).</p>\n</blockquote>",
        "id": 393977019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696008989
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393977106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696009038
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393977439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696009192
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651236934\">PR review</a>.</p>",
        "id": 393977464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696009201
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341645924\">PR review comment</a>:</p>\n<blockquote>\n<p>Correct - I've updated these docs a bit.</p>\n</blockquote>",
        "id": 393977465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696009201
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393977547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696009224
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393977859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696009383
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 393980521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696010558
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651717441\">PR review</a>.</p>",
        "id": 394097052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696090274
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1341980292\">PR review comment</a>:</p>\n<blockquote>\n<p>Does it make more sense for this error_ret to be a parameter of the initial host function call? Then this becomes the mirror to poll which just returns a boolean. </p>\n</blockquote>",
        "id": 394097053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696090274
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394128365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696122122
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1651776377\">PR review</a>.</p>",
        "id": 394128497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696122183
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342029965\">PR review comment</a>:</p>\n<blockquote>\n<p>I went ahead and did this - I quite like how it turned out.</p>\n</blockquote>",
        "id": 394128498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696122184
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394128637,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696122249
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394136633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696128026
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394286566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696208164
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653181284\">PR review</a>:</p>\n<blockquote>\n<p>Looks great to me, thank you again for working on this! </p>\n<p>I've got some minor comments but otherwise looks good to go</p>\n</blockquote>",
        "id": 394481650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267955
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653181284\">PR review</a>:</p>\n<blockquote>\n<p>Looks great to me, thank you again for working on this! </p>\n<p>I've got some minor comments but otherwise looks good to go</p>\n</blockquote>",
        "id": 394481651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267955
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342961644\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of returning <code>wasmtime_async_continuation_t</code> could that perhaps be an out-ptr? That way the contract of this function is that it always fills in <code>wasmtime_async_continuation_t</code> and then must fill in <code>trap_ret</code> and <code>results</code> by the time the continuation yields \"I'm done\"?</p>\n</blockquote>",
        "id": 394481652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267955
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342967706\">PR review comment</a>:</p>\n<blockquote>\n<p>As a small rust-ism the <code>mem::take</code> isn't required here and you can say <code>hostcall_val_storage.truncate(0)</code> and put it back into the store</p>\n</blockquote>",
        "id": 394481654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267956
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342963198\">PR review comment</a>:</p>\n<blockquote>\n<p>Mind combining this clause with the above one so the three cases of suspension are enumerated as a set?</p>\n</blockquote>",
        "id": 394481655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267956
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342966424\">PR review comment</a>:</p>\n<blockquote>\n<p>In lieu of this though there are other issues - for example in Rust this is represented in the return value as a <code>Box&lt;T&gt;</code> but that's not guaranteed to use the same allocator as <code>new</code> uses in C++. By using a retptr it would help sidestep such issues by taking allocators out of the picture.</p>\n</blockquote>",
        "id": 394481656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267956
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342968532\">PR review comment</a>:</p>\n<blockquote>\n<p>If you'd like, to avoid the <code>CallbackData</code> structure here, which I'm assuming is only required to satisfy <code>Send</code>, the <code>invoke_c_async_callback</code> function could take <code>&amp;ForeignData</code> which I think is already <code>Send</code></p>\n</blockquote>",
        "id": 394481657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696267956
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653235917\">PR review</a>.</p>",
        "id": 394486579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696269751
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342995437\">PR review comment</a>:</p>\n<blockquote>\n<p>I can't get that to work, which maybe means I'm doing something unsafe here...</p>\n<p>The compiled tells me that the reference to the captured variables can't escape the closure. I'm not sure if Wasmtime ensures that the futures are completed before deleting the host function closures, from my debugging it seems the order is correct. Additionally c_void is not <code>Send</code> so I need the wrapper type. Other suggestions or am I doing something dangerous here?</p>\n</blockquote>",
        "id": 394486581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696269751
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653235952\">PR review</a>.</p>",
        "id": 394486583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696269752
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342995452\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks! This was vestigial from the refactor :) </p>\n</blockquote>",
        "id": 394486584,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696269752
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653237136\">PR review</a>.</p>",
        "id": 394486697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696269802
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1342996197\">PR review comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 394486698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696269802
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653262019\">PR review</a>.</p>",
        "id": 394488995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696270817
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394488996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696270818
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343012499\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah this is why I originally had the <code>async_continuation_new</code> function... I can make that an out ptr instead, seems better and allows for removing a heap allocation.<br>\n</p>\n</blockquote>",
        "id": 394488997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696270818
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394489005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696270823
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394489716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696271134
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394489778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696271159
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653423750\">PR review</a>.</p>",
        "id": 394506071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277606
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343110490\">PR review comment</a>:</p>\n<blockquote>\n<p>Due to this containing a function pointer I don't think that <code>uninit</code> is actually safe to do here, could this instead</p>\n</blockquote>",
        "id": 394506072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277606
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653424348\">PR review</a>.</p>",
        "id": 394506120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277634
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343110852\">PR review comment</a>:</p>\n<blockquote>\n<p>er, sorry, hit send to soon!</p>\n<p>I take this back, I think this is fine as-is.</p>\n</blockquote>",
        "id": 394506121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277634
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343111412\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah no I see why rustc would say that, and makes sense. Sorry for the wild goose chase, this is good as-is!</p>\n</blockquote>",
        "id": 394506227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277674
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653425182\">PR review</a>.</p>",
        "id": 394506229,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277674
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653425353\">PR review</a>.</p>",
        "id": 394506250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696277688
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653472646\">PR review</a>.</p>",
        "id": 394509152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696279047
    },
    {
        "content": "<p>rockwotj edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343139336\">PR review comment</a>.</p>",
        "id": 394509155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696279047
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343139336\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I wanted to initialize a value, but you can't assign null to a function ptr in rust so this was the best I could come up with... <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> </p>\n</blockquote>",
        "id": 394509156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696279047
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653485148\">PR review</a>.</p>",
        "id": 394510043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696279445
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343144780\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah the risk of this is that it triggers UB if C accidentally doesn't fill in the structure, so the alternative would be to have a dummy function pointer which panics. I don't think it's worth it to go that far though, hence my reconsideration this is fine as is!</p>\n</blockquote>",
        "id": 394510044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696279445
    },
    {
        "content": "<p>github-merge-queue[bot] updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394530760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696291843
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394531505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696292318
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#pullrequestreview-1653841287\">PR review</a>.</p>",
        "id": 394531554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696292352
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106#discussion_r1343276478\">PR review comment</a>:</p>\n<blockquote>\n<p>I added the dummy function pointer - it's better to give guardrails.</p>\n</blockquote>",
        "id": 394531555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696292352
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394531688,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696292433
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394542864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696298457
    },
    {
        "content": "<p>rockwotj updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394545701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696299961
    },
    {
        "content": "<p><strong>rockwotj</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394598532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696326956
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7106\">PR #7106</a>.</p>",
        "id": 394653588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696345256
    }
]