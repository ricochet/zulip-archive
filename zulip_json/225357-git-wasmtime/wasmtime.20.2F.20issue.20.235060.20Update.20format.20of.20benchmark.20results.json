[
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281307518\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304530578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666031637
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281315314\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.055</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.018</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.017</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.004</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.062</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.019</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.018</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.014</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.051</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.012</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.027</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.017</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.022</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.016</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.026</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.027</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.013</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.306</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.015</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.054</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.033</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.086</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.013</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.071</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.037</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.019</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.322</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.075</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.066</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.043</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.065</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.049</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.010</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.060</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.008</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.030</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.039</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.005</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.072</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.021</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.111</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.036</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.017</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.022</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.049</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-0.147</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.011</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.033</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.007</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.454</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.350</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.017</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.006</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.002</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.003</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.004</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.001</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.025</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.010</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.000</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|-|<br>\n|Compilation|0.007|<br>\n|Execution|0.001|<br>\n|Instantiation|0.007|</p>\n</blockquote>",
        "id": 304532122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666032063
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281392095\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>@cfallin I think this is the one to address some previous comments. Note, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">https://github.com/bytecodealliance/wasmtime/pull/5064</a> is a separate PR to look at better stabilizing results.</p>\n</blockquote>",
        "id": 304544871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666036066
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281418160\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>@jlb6740 a few thoughts:</p>\n<ul>\n<li>Can we label \"Averages\" at the bottom \"Geomeans\" (and to check: they are geometric means?) so the reader knows what kind they are?</li>\n<li>To me at least, multiplying all the numbers by 100 and presenting them as percentages would make them a bit easier to visually parse. E.g. <code>0.003, 0.001, -0.004</code> is ever-so-slightly harder to read than <code>0.3%, 0.1%, -0.4%</code>.</li>\n<li>Would it be possible to sort by effect size (most sped-up to most slowed-down for example)?</li>\n</ul>\n</blockquote>",
        "id": 304548086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666037093
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281451009\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>@cfallin. These are averages of what we decided to call the change factor (python pandas calls it percent change). I definetly don't think we want to take the geomean of these numbers. The numbers are already a percentage (and not based on a diff) .. so I think taking the arithmetic average is appropriate there. Note, I updated the comments to include the formula that is used: </p>\n<p>Some Factor = (Patched_CT - Main_CT) / (Main_CT)<br>\nor<br>\nPatched Clock Ticks = Main Clock Ticks + (Main Clock Ticks * (Some Factor))</p>\n<p>This makes sense to me, but multiplying \"Some Factor\" by 100 would break this formula. <br>\n0.003 factor is not the same as .3%.<br>\n1.003 factor is equivalent to .3%<br>\n</p>\n</blockquote>",
        "id": 304551605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666038393
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281458820\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>As far as the effect size I think that is calculated in sightglass so should be doable. That said, I've found it takes a minute to noodle on these changes just because it takes so long to run and you don't know if you've broken something with your changes or to know the format is not quite like you want it. I don't want this to languish for a week while I attend to other things. Is it OK to do these other updates in another iteration? But of course close on the labels and formula here.</p>\n</blockquote>",
        "id": 304552729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666038789
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281458990\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<blockquote>\n<p>These are averages of what we decided to call the change factor (python pandas calls it percent change). I definetly don't think we want to take the geomean of these numbers. The numbers are already a percentage (and not based on a diff) .. so I think taking the arithmetic average is appropriate there.</p>\n</blockquote>\n<p>Ah, right, a geomean is warranted if raw ratio of runtime, sorry; I had been thinking in those terms and not fractional-change terms. (Can we call it \"arithmetic mean\" in the header then to specify to the reader which it is?)</p>\n<blockquote>\n<p>Some Factor = (Patched_CT - Main_CT) / (Main_CT)</p>\n<p>This makes sense to me, but multiplying \"Some Factor\" by 100 would break this formula.<br>\n0.003 factor is not the same as .3%.<br>\n1.003 factor is equivalent to .3%</p>\n</blockquote>\n<p>Isn't this just the definition of fractional change? The <code>- Main_CT / Main_CT</code> term is effectively subtracting one (the above formula can be rearranged to <code>(Patched_CT / Main_CT) - 1</code>). So if this formula reports a result of 0.003, then that is a multiplicative factor of 1.003 from old to new, and that is a 0.3% shift. In other words, if I have a runtime ratio of 1.003, then the run got 0.3% slower; to go from 1.003 to 0.3%, I subtract one and multiply by 100.</p>\n</blockquote>",
        "id": 304552750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666038798
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281472899\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Ok .. I may be confusing something here but this is how I see it:</p>\n<p>Patch = Main (1 + Factor) is what the current formula states. <br>\nSo .. let's say Main is 100 and Factor is -.003 then the Patch Clockticks would decrease to (100 - .3) =  99.7</p>\n<p>If we take the same thing with %<br>\nSo .. let's say Main is 100 and Percentage is -.3% then the Patch Clockticks would decrease to (100 * .3) = 99.7</p>\n<p>Ok .. this is why I don't like percentages <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span>. I think you are right. Hopefully I can easily change this factor to percentage in pandas with ease. I'll just make that change as I do think it is easier to read. </p>\n</blockquote>",
        "id": 304554660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666039486
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281478239\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304555412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666039795
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281734783\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304598278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666060376
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281823823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 304610743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666069899
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281832150\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-2.067%</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-9.731%</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>5.358%</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.691%</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-1.587%</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-1.157%</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-7.943%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-3.513%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>4.014%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-1.046%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.191%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-1.799%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-1.431%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>2.065%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-2.097%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-5.134%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-2.702%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-2.506%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-2.062%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.815%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.740%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>9.665%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>0.483%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.386%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-3.094%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-5.356%</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Compilation</td>\n<td>-0.783%</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>1.770%</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-21.610%</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>6.219%</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-2.431%</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-1.874%</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-4.099%</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-7.633%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.835%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>4.207%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.682%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-1.963%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>1.302%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>11.633%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>5.706%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>11.342%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>25.500%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>9.481%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>0.009%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>1.024%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-2.402%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-4.735%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>1.122%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>3.037%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-2.586%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>2.925%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>5.166%</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Instantiation</td>\n<td>-2.497%</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th>arch</th>\n<th>phase</th>\n<th>change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.293%</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-18.240%</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.483%</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.143%</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.128%</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-31.053%</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.558%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-38.342%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.241%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.106%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.239%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.129%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>2.898%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.041%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.485%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.063%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.026%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.130%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.345%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.014%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.223%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-0.153%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.215%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.132%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-3.346%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>-1.062%</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td>x86_64</td>\n<td>Execution</td>\n<td>0.034%</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|-|<br>\n|Compilation|-1.240%|<br>\n|Execution|-3.321%|<br>\n|Instantiation|1.486%|</p>\n</blockquote>",
        "id": 304611758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666070734
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281838558\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64<br>\n</p>\n</blockquote>",
        "id": 304612526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666071335
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281842775\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.</p>\n<p>Results are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) <br>\nA negative change factor means clockticks are expected to be reduced by the patch.</p>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th style=\"text-align: center;\">arch</th>\n<th style=\"text-align: center;\">phase</th>\n<th style=\"text-align: center;\">change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.983%</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">4.863%</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">0.741%</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">0.432%</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">1.810%</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">0.412%</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-3.803%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.363%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">2.021%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">5.066%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.554%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">1.328%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-3.708%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-2.336%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-0.795%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.155%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">6.049%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">0.892%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">2.154%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.150%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-5.721%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-0.942%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.220%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-0.195%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-1.808%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">-3.225%</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Compilation</td>\n<td style=\"text-align: center;\">1.566%</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th style=\"text-align: center;\">arch</th>\n<th style=\"text-align: center;\">phase</th>\n<th style=\"text-align: center;\">change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">14.789%</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-6.792%</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">7.797%</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">54.875%</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">19.314%</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">6.291%</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-0.683%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">9.086%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">8.598%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">5.321%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-1.979%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">2.882%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">14.625%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">6.266%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-2.256%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-1.146%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">2.591%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-15.002%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">2.356%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-0.031%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">-0.988%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">22.805%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">5.798%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">5.490%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">3.263%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">4.046%</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Instantiation</td>\n<td style=\"text-align: center;\">0.671%</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>wasm</th>\n<th style=\"text-align: center;\">arch</th>\n<th style=\"text-align: center;\">phase</th>\n<th style=\"text-align: center;\">change_factor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>benchmarks/blake3-scalar</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.843%</td>\n</tr>\n<tr>\n<td>benchmarks/blake3-simd</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.142%</td>\n</tr>\n<tr>\n<td>benchmarks/bz2</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">2.205%</td>\n</tr>\n<tr>\n<td>benchmarks/intgemm-simd</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.128%</td>\n</tr>\n<tr>\n<td>benchmarks/meshoptimizer</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.003%</td>\n</tr>\n<tr>\n<td>benchmarks/noop</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">9.814%</td>\n</tr>\n<tr>\n<td>benchmarks/pulldown-cmark</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-1.530%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ackermann</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">4.071%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-base64</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.085%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ctype</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.046%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ed25519</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.558%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-fib2</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.010%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-gimli</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.266%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-heapsort</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.027%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-keccak</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.302%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-matrix</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.601%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-memmove</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.028%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-minicsv</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">1.168%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-nestedloop</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.272%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-random</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.189%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-ratelimit</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.064%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-seqhash</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.254%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-sieve</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.099%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-switch</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.192%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xblabla20</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-2.433%</td>\n</tr>\n<tr>\n<td>benchmarks/shootout-xchacha20</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">0.044%</td>\n</tr>\n<tr>\n<td>benchmarks/spidermonkey</td>\n<td style=\"text-align: center;\">x86_64</td>\n<td style=\"text-align: center;\">Execution</td>\n<td style=\"text-align: center;\">-0.012%</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Averages (x64):</strong><br>\n|phase|change_factor|<br>\n |-|:-:|<br>\n|Compilation|-0.134%|<br>\n|Execution|0.444%|<br>\n|Instantiation|6.222%|</p>\n</blockquote>",
        "id": 304613127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666071769
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1281848143\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>@cfallin .. Ok. I think this is in the direction of the format we want. Is it OK to merge this as is? Adding an effect size column and sorting based on that we can do in iteration with another patch? Also .. about that. I kind of like the benchmarks being in the same predictable alphabetical order each table where you don't have to search for where a specific benchmark result is. Maybe we want to add the column but not sort?</p>\n</blockquote>",
        "id": 304613904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666072337
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1282759413\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>One final request (sorry!). \"Change factor\" makes sense to me if it's a pure ratio where 1.000 is no change; but since we're presenting only the delta (subracting 1, or subracting <code>Main_CT</code> in the numerator, or subracting 100%, all equivalent), this is a delta, not a factor. It's also now a percent. So, ironically I guess, the original <code>pct_change</code> title (can we spell it out as \"Percent change\" though?) is actually now accurate, now that we've adjusted the formula -- could we go to that? Happy to approve+merge after that!</p>\n</blockquote>",
        "id": 304801566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666114060
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1282832180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Can we mark whether the change is statistically significant or not? Otherwise there is no way to know whether to trust it or not.</p>\n</blockquote>",
        "id": 304815458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666117488
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1282856454\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>I think I've communicated this in various one-off meetings over the years, but for posterity, my ideal output would be something like:</p>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code><span class=\"gh\"># Benchmark Results</span>\n\n&lt;details&gt;\n\n&lt;summary&gt;Methods and Configuration&lt;/summary&gt;\n\n<span class=\"k\">*</span> Baseline: <span class=\"sb\">`main`</span> at commit a1b2c3\n<span class=\"k\">*</span> Comparison: <span class=\"sb\">`feature-branch`</span> at commit d4e5f6\n<span class=\"k\">*</span> Significance level: 0.01\n<span class=\"k\">*</span> Processes: N\n<span class=\"k\">*</span> Iterations per process: M\n<span class=\"k\">*</span> Engine flags: ...\n<span class=\"k\">*</span> Etc...\n\n&lt;/details&gt;\n\n<span class=\"gu\">## Statistically Significant Results</span>\n\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt; &lt;th&gt;Wasm Input&lt;/th&gt; &lt;th&gt;Architecture&lt;/th&gt; &lt;th&gt;Phase&lt;/th&gt; &lt;th&gt;Effect Size&lt;/th&gt; &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt; &lt;td&gt;&lt;code&gt;spidermonkey.wasm&lt;/code&gt;&lt;/td&gt; &lt;td&gt;x64&lt;/td&gt; &lt;td&gt;Compilation&lt;/td&gt; &lt;td&gt;1.03 ± 0.01&lt;/td&gt; &lt;/tr&gt;\n    &lt;!-- etc... sorted by largest absolute effect size ---&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\n<span class=\"gu\">## Statistically Insignificant Results</span>\n\n&lt;details&gt;\n\n&lt;summary&gt;Statistically insignificant results; hidden by default&lt;/details&gt;\n\n&lt;!-- same type of table as above --&gt;\n\n&lt;/details&gt;\n</code></pre></div>\n<p>The important bits being:</p>\n<ul>\n<li>Highlighting statistically significant changes</li>\n<li>Hiding statistically <em>in</em>significant changes behind a <code>&lt;details&gt;</code> by default</li>\n<li>Showing the effect size (what you've been calling a change factor) with its confidence interval</li>\n</ul>\n<p>FWIW, we designed the <code>sightglass-analysis</code> crate to expose reusable functions to compute statistical significance, effect size, and confidence interval: <a href=\"https://github.com/bytecodealliance/sightglass/blob/main/crates/analysis/src/effect_size.rs#L16\">https://github.com/bytecodealliance/sightglass/blob/main/crates/analysis/src/effect_size.rs#L16</a></p>\n</blockquote>",
        "id": 304818901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666118725
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1288360786\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64<br>\n</p>\n</blockquote>",
        "id": 305740010,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666581694
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1288364928\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.%0A%0AResults are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) %0AA negative change factor means clockticks are expected to be reduced by the patch.%0A%0A|wasm|arch|phase|change_factor|%0A |-|:-:|:-:|:-:|%0A|benchmarks/blake3-scalar|x86_64|Compilation|-4.631%25|%0A|benchmarks/blake3-simd|x86_64|Compilation|2.186%25|%0A|benchmarks/bz2|x86_64|Compilation|-0.093%25|%0A|benchmarks/intgemm-simd|x86_64|Compilation|-1.441%25|%0A|benchmarks/meshoptimizer|x86_64|Compilation|-0.102%25|%0A|benchmarks/noop|x86_64|Compilation|-1.682%25|%0A|benchmarks/pulldown-cmark|x86_64|Compilation|2.070%25|%0A|benchmarks/shootout-ackermann|x86_64|Compilation|-4.602%25|%0A|benchmarks/shootout-base64|x86_64|Compilation|-1.885%25|%0A|benchmarks/shootout-ctype|x86_64|Compilation|-2.564%25|%0A|benchmarks/shootout-ed25519|x86_64|Compilation|-3.418%25|%0A|benchmarks/shootout-fib2|x86_64|Compilation|-1.847%25|%0A|benchmarks/shootout-gimli|x86_64|Compilation|-3.495%25|%0A|benchmarks/shootout-heapsort|x86_64|Compilation|6.073%25|%0A|benchmarks/shootout-keccak|x86_64|Compilation|0.739%25|%0A|benchmarks/shootout-matrix|x86_64|Compilation|-8.418%25|%0A|benchmarks/shootout-memmove|x86_64|Compilation|-4.909%25|%0A|benchmarks/shootout-minicsv|x86_64|Compilation|0.607%25|%0A|benchmarks/shootout-nestedloop|x86_64|Compilation|-2.425%25|%0A|benchmarks/shootout-random|x86_64|Compilation|-2.287%25|%0A|benchmarks/shootout-ratelimit|x86_64|Compilation|3.886%25|%0A|benchmarks/shootout-seqhash|x86_64|Compilation|-2.022%25|%0A|benchmarks/shootout-sieve|x86_64|Compilation|-1.459%25|%0A|benchmarks/shootout-switch|x86_64|Compilation|-4.815%25|%0A|benchmarks/shootout-xblabla20|x86_64|Compilation|3.422%25|%0A|benchmarks/shootout-xchacha20|x86_64|Compilation|-3.053%25|%0A|benchmarks/spidermonkey|x86_64|Compilation|-0.316%25|%0A%0A|wasm|arch|phase|change_factor|%0A |-|:-:|:-:|:-:|%0A|benchmarks/blake3-scalar|x86_64|Instantiation|-30.403%25|%0A|benchmarks/blake3-simd|x86_64|Instantiation|-3.762%25|%0A|benchmarks/bz2|x86_64|Instantiation|7.500%25|%0A|benchmarks/intgemm-simd|x86_64|Instantiation|-1.067%25|%0A|benchmarks/meshoptimizer|x86_64|Instantiation|-2.640%25|%0A|benchmarks/noop|x86_64|Instantiation|-7.303%25|%0A|benchmarks/pulldown-cmark|x86_64|Instantiation|7.822%25|%0A|benchmarks/shootout-ackermann|x86_64|Instantiation|1.992%25|%0A|benchmarks/shootout-base64|x86_64|Instantiation|7.792%25|%0A|benchmarks/shootout-ctype|x86_64|Instantiation|2.504%25|%0A|benchmarks/shootout-ed25519|x86_64|Instantiation|-4.106%25|%0A|benchmarks/shootout-fib2|x86_64|Instantiation|0.998%25|%0A|benchmarks/shootout-gimli|x86_64|Instantiation|-0.532%25|%0A|benchmarks/shootout-heapsort|x86_64|Instantiation|2.495%25|%0A|benchmarks/shootout-keccak|x86_64|Instantiation|-0.245%25|%0A|benchmarks/shootout-matrix|x86_64|Instantiation|3.993%25|%0A|benchmarks/shootout-memmove|x86_64|Instantiation|-10.591%25|%0A|benchmarks/shootout-minicsv|x86_64|Instantiation|-7.414%25|%0A|benchmarks/shootout-nestedloop|x86_64|Instantiation|2.388%25|%0A|benchmarks/shootout-random|x86_64|Instantiation|-2.975%25|%0A|benchmarks/shootout-ratelimit|x86_64|Instantiation|4.045%25|%0A|benchmarks/shootout-seqhash|x86_64|Instantiation|6.400%25|%0A|benchmarks/shootout-sieve|x86_64|Instantiation|-0.312%25|%0A|benchmarks/shootout-switch|x86_64|Instantiation|-0.480%25|%0A|benchmarks/shootout-xblabla20|x86_64|Instantiation|-2.197%25|%0A|benchmarks/shootout-xchacha20|x86_64|Instantiation|-12.450%25|%0A|benchmarks/spidermonkey|x86_64|Instantiation|1.493%25|%0A%0A|wasm|arch|phase|change_factor|%0A |-|:-:|:-:|:-:|%0A|benchmarks/blake3-scalar|x86_64|Execution|0.093%25|%0A|benchmarks/blake3-simd|x86_64|Execution|-0.428%25|%0A|benchmarks/bz2|x86_64|Execution|1.562%25|%0A|benchmarks/intgemm-simd|x86_64|Execution|0.053%25|%0A|benchmarks/meshoptimizer|x86_64|Execution|0.030%25|%0A|benchmarks/noop|x86_64|Execution|4.042%25|%0A|benchmarks/pulldown-cmark|x86_64|Execution|0.612%25|%0A|benchmarks/shootout-ackermann|x86_64|Execution|18.860%25|%0A|benchmarks/shootout-base64|x86_64|Execution|0.292%25|%0A|benchmarks/shootout-ctype|x86_64|Execution|-0.073%25|%0A|benchmarks/shootout-ed25519|x86_64|Execution|0.082%25|%0A|benchmarks/shootout-fib2|x86_64|Execution|-0.094%25|%0A|benchmarks/shootout-gimli|x86_64|Execution|2.252%25|%0A|benchmarks/shootout-heapsort|x86_64|Execution|-0.083%25|%0A|benchmarks/shootout-keccak|x86_64|Execution|-1.394%25|%0A|benchmarks/shootout-matrix|x86_64|Execution|0.033%25|%0A|benchmarks/shootout-memmove|x86_64|Execution|-0.033%25|%0A|benchmarks/shootout-minicsv|x86_64|Execution|-0.293%25|%0A|benchmarks/shootout-nestedloop|x86_64|Execution|0.112%25|%0A|benchmarks/shootout-random|x86_64|Execution|-0.454%25|%0A|benchmarks/shootout-ratelimit|x86_64|Execution|-0.319%25|%0A|benchmarks/shootout-seqhash|x86_64|Execution|-5.423%25|%0A|benchmarks/shootout-sieve|x86_64|Execution|-0.227%25|%0A|benchmarks/shootout-switch|x86_64|Execution|-0.083%25|%0A|benchmarks/shootout-xblabla20|x86_64|Execution|2.013%25|%0A|benchmarks/shootout-xchacha20|x86_64|Execution|-3.499%25|%0A|benchmarks/spidermonkey|x86_64|Execution|0.748%25|%0A%0A<strong>Averages (x64):</strong>%0A|phase|change_factor|%0A |-|:-:|%0A|Compilation|-1.351%25|%0A|Execution|0.681%25|%0A|Instantiation|-1.372%25|</p>\n</blockquote>",
        "id": 305740426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666582107
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1289589186\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 305910362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666644017
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1289597392\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Change factor shows patch effect on x64 if merged compared to current head for main.%0A%0AResults are based on clocktick (CT) event cycles. Change Factor = (Patched_CT - Main_CT) / (Main_CT) %0AA negative change factor means clockticks are expected to be reduced by the patch.%0A%0A|wasm|arch|phase|change_factor|%0A |-|:-:|:-:|:-:|%0A|benchmarks/blake3-scalar|x86_64|Compilation|-2.264%25|%0A|benchmarks/blake3-simd|x86_64|Compilation|-0.952%25|%0A|benchmarks/bz2|x86_64|Compilation|-1.169%25|%0A|benchmarks/intgemm-simd|x86_64|Compilation|-0.073%25|%0A|benchmarks/meshoptimizer|x86_64|Compilation|-0.470%25|%0A|benchmarks/noop|x86_64|Compilation|1.484%25|%0A|benchmarks/pulldown-cmark|x86_64|Compilation|2.920%25|%0A|benchmarks/shootout-ackermann|x86_64|Compilation|-1.525%25|%0A|benchmarks/shootout-base64|x86_64|Compilation|3.301%25|%0A|benchmarks/shootout-ctype|x86_64|Compilation|-2.706%25|%0A|benchmarks/shootout-ed25519|x86_64|Compilation|1.641%25|%0A|benchmarks/shootout-fib2|x86_64|Compilation|-0.268%25|%0A|benchmarks/shootout-gimli|x86_64|Compilation|6.551%25|%0A|benchmarks/shootout-heapsort|x86_64|Compilation|1.015%25|%0A|benchmarks/shootout-keccak|x86_64|Compilation|-1.059%25|%0A|benchmarks/shootout-matrix|x86_64|Compilation|1.295%25|%0A|benchmarks/shootout-memmove|x86_64|Compilation|-5.877%25|%0A|benchmarks/shootout-minicsv|x86_64|Compilation|1.779%25|%0A|benchmarks/shootout-nestedloop|x86_64|Compilation|0.122%25|%0A|benchmarks/shootout-random|x86_64|Compilation|-0.916%25|%0A|benchmarks/shootout-ratelimit|x86_64|Compilation|2.141%25|%0A|benchmarks/shootout-seqhash|x86_64|Compilation|1.004%25|%0A|benchmarks/shootout-sieve|x86_64|Compilation|0.260%25|%0A|benchmarks/shootout-switch|x86_64|Compilation|3.673%25|%0A|benchmarks/shootout-xblabla20|x86_64|Compilation|-2.125%25|%0A|benchmarks/shootout-xchacha20|x86_64|Compilation|0.693%25|%0A|benchmarks/spidermonkey|x86_64|Compilation|-0.094%25|%0A%0A|wasm|arch|phase|change_factor|%0A |-|:-:|:-:|:-:|%0A|benchmarks/blake3-scalar|x86_64|Instantiation|-8.503%25|%0A|benchmarks/blake3-simd|x86_64|Instantiation|11.889%25|%0A|benchmarks/bz2|x86_64|Instantiation|10.633%25|%0A|benchmarks/intgemm-simd|x86_64|Instantiation|-20.765%25|%0A|benchmarks/meshoptimizer|x86_64|Instantiation|15.852%25|%0A|benchmarks/noop|x86_64|Instantiation|3.321%25|%0A|benchmarks/pulldown-cmark|x86_64|Instantiation|-3.284%25|%0A|benchmarks/shootout-ackermann|x86_64|Instantiation|-0.097%25|%0A|benchmarks/shootout-base64|x86_64|Instantiation|-1.808%25|%0A|benchmarks/shootout-ctype|x86_64|Instantiation|-15.002%25|%0A|benchmarks/shootout-ed25519|x86_64|Instantiation|0.630%25|%0A|benchmarks/shootout-fib2|x86_64|Instantiation|-0.610%25|%0A|benchmarks/shootout-gimli|x86_64|Instantiation|15.031%25|%0A|benchmarks/shootout-heapsort|x86_64|Instantiation|25.119%25|%0A|benchmarks/shootout-keccak|x86_64|Instantiation|5.948%25|%0A|benchmarks/shootout-matrix|x86_64|Instantiation|5.849%25|%0A|benchmarks/shootout-memmove|x86_64|Instantiation|2.700%25|%0A|benchmarks/shootout-minicsv|x86_64|Instantiation|-25.233%25|%0A|benchmarks/shootout-nestedloop|x86_64|Instantiation|3.077%25|%0A|benchmarks/shootout-random|x86_64|Instantiation|1.315%25|%0A|benchmarks/shootout-ratelimit|x86_64|Instantiation|0.327%25|%0A|benchmarks/shootout-seqhash|x86_64|Instantiation|-4.867%25|%0A|benchmarks/shootout-sieve|x86_64|Instantiation|3.642%25|%0A|benchmarks/shootout-switch|x86_64|Instantiation|-0.317%25|%0A|benchmarks/shootout-xblabla20|x86_64|Instantiation|3.272%25|%0A|benchmarks/shootout-xchacha20|x86_64|Instantiation|11.555%25|%0A|benchmarks/spidermonkey|x86_64|Instantiation|-2.845%25|%0A%0A|wasm|arch|phase|change_factor|%0A |-|:-:|:-:|:-:|%0A|benchmarks/blake3-scalar|x86_64|Execution|-1.544%25|%0A|benchmarks/blake3-simd|x86_64|Execution|-3.132%25|%0A|benchmarks/bz2|x86_64|Execution|2.717%25|%0A|benchmarks/intgemm-simd|x86_64|Execution|0.179%25|%0A|benchmarks/meshoptimizer|x86_64|Execution|0.007%25|%0A|benchmarks/noop|x86_64|Execution|-4.482%25|%0A|benchmarks/pulldown-cmark|x86_64|Execution|-0.157%25|%0A|benchmarks/shootout-ackermann|x86_64|Execution|-19.695%25|%0A|benchmarks/shootout-base64|x86_64|Execution|-0.069%25|%0A|benchmarks/shootout-ctype|x86_64|Execution|0.295%25|%0A|benchmarks/shootout-ed25519|x86_64|Execution|0.082%25|%0A|benchmarks/shootout-fib2|x86_64|Execution|0.060%25|%0A|benchmarks/shootout-gimli|x86_64|Execution|-0.897%25|%0A|benchmarks/shootout-heapsort|x86_64|Execution|0.105%25|%0A|benchmarks/shootout-keccak|x86_64|Execution|-0.574%25|%0A|benchmarks/shootout-matrix|x86_64|Execution|-0.213%25|%0A|benchmarks/shootout-memmove|x86_64|Execution|0.211%25|%0A|benchmarks/shootout-minicsv|x86_64|Execution|0.063%25|%0A|benchmarks/shootout-nestedloop|x86_64|Execution|-0.075%25|%0A|benchmarks/shootout-random|x86_64|Execution|0.101%25|%0A|benchmarks/shootout-ratelimit|x86_64|Execution|0.270%25|%0A|benchmarks/shootout-seqhash|x86_64|Execution|0.039%25|%0A|benchmarks/shootout-sieve|x86_64|Execution|0.001%25|%0A|benchmarks/shootout-switch|x86_64|Execution|0.447%25|%0A|benchmarks/shootout-xblabla20|x86_64|Execution|1.642%25|%0A|benchmarks/shootout-xchacha20|x86_64|Execution|1.066%25|%0A|benchmarks/spidermonkey|x86_64|Execution|0.598%25|%0A%0A<strong>Averages (x64):</strong>%0A|phase|change_factor|%0A |-|:-:|%0A|Compilation|0.310%25|%0A|Execution|-0.850%25|%0A|Instantiation|1.364%25|</p>\n</blockquote>",
        "id": 305911199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666644412
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1289660744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64</p>\n</blockquote>",
        "id": 305919021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666648139
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1289719907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>%0Aexecution :: cycles :: benchmarks/bz2/benchmark.wasm%0A%0A  Δ = 1513143.28 ± 1231561.44 (confidence = 99%25)%0A%0A  <a href=\"http://main.so\">main.so</a> is 1.00x to 1.02x faster than commit.so!%0A%0A  [129798904 131817054.80 138038694] commit.so%0A  [127515208 130303911.52 132506288] main.so%0A%0Ainstantiation :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [170034 196676.08 218436] commit.so%0A  [173046 202642.40 373914] main.so%0A%0Ainstantiation :: cycles :: benchmarks/bz2/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [101652 121869.28 137242] commit.so%0A  [106258 118855.28 133740] main.so%0A%0Acompilation :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [309698748 346607655.52 374942674] commit.so%0A  [301942394 349979492.32 394267312] main.so%0A%0Acompilation :: cycles :: benchmarks/bz2/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [215154062 234460165.44 267407768] commit.so%0A  [217859454 236701668.96 272852560] main.so%0A%0Aexecution :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [9344088 9469022.72 9651890] commit.so%0A  [9343350 9504960.00 9678308] main.so%0A%0Aexecution :: cycles :: benchmarks/spidermonkey/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [1090353462 1104235121.84 1117828124] commit.so%0A  [1091742374 1107584374.72 1126788480] main.so%0A%0Acompilation :: cycles :: benchmarks/spidermonkey/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [7228229446 7366056318.80 7478912292] commit.so%0A  [7210593826 7359829007.52 7506138438] main.so%0A%0Ainstantiation :: cycles :: benchmarks/spidermonkey/benchmark.wasm%0A%0A  No difference in performance.%0A%0A  [543920 582452.72 736118] commit.so%0A  [548450 582405.60 752954] <a href=\"http://main.so\">main.so</a></p>\n</blockquote>",
        "id": 305924438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666650998
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1294209544\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>/bench_x64<br>\n</p>\n</blockquote>",
        "id": 306554017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666911220
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1294234331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>instantiation :: cycles :: benchmarks/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[103568 119207.92 135522] <a href=\"http://commit.so\">commit.so</a><br>\n  [106822 126276.88 272912] <a href=\"http://main.so\">main.so</a></p>\n<p>instantiation :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[170928 190962.88 212534] <a href=\"http://commit.so\">commit.so</a><br>\n  [173412 200371.76 304700] <a href=\"http://main.so\">main.so</a></p>\n<p>instantiation :: cycles :: benchmarks/spidermonkey/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[542924 569039.60 605244] <a href=\"http://commit.so\">commit.so</a><br>\n  [539128 581279.04 757404] <a href=\"http://main.so\">main.so</a></p>\n<p>compilation :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[318068526 344151444.88 407384632] <a href=\"http://commit.so\">commit.so</a><br>\n  [306264764 350683370.00 383642122] <a href=\"http://main.so\">main.so</a></p>\n<p>compilation :: cycles :: benchmarks/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[215556738 235741942.72 275455752] <a href=\"http://commit.so\">commit.so</a><br>\n  [217886770 233020488.80 280170694] <a href=\"http://main.so\">main.so</a></p>\n<p>execution :: cycles :: benchmarks/bz2/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[127738454 131527589.52 137189426] <a href=\"http://commit.so\">commit.so</a><br>\n  [127496598 130751974.40 133060306] <a href=\"http://main.so\">main.so</a></p>\n<p>execution :: cycles :: benchmarks/spidermonkey/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[1091080444 1106099439.76 1164561264] <a href=\"http://commit.so\">commit.so</a><br>\n  [1089452668 1099986181.04 1121721354] <a href=\"http://main.so\">main.so</a></p>\n<p>compilation :: cycles :: benchmarks/spidermonkey/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[7177863870 7295968763.20 7438418366] <a href=\"http://commit.so\">commit.so</a><br>\n  [7180327178 7320723278.88 7475606826] <a href=\"http://main.so\">main.so</a></p>\n<p>execution :: cycles :: benchmarks/pulldown-cmark/benchmark.wasm</p>\n<p>No difference in performance.</p>\n<p>[9359830 9498456.32 9801272] <a href=\"http://commit.so\">commit.so</a><br>\n  [9336598 9483072.80 9601184] <a href=\"http://main.so\">main.so</a></p>\n</blockquote>",
        "id": 306558017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666913739
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1294242231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<p>Hi @cfallin @fitzgen, Instead of having the current table, how about we just highlight a few of the default benchmarks and print the default message? I think, as has already been suggested, we should be doing any formatting of the output printed in the message in sightglass itself so can work on a github markdown formatting there. Also, this patch increases the number of iterations and parallel processes to help stabilize results allowing us to close <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5064\">https://github.com/bytecodealliance/wasmtime/pull/5064</a></p>\n</blockquote>",
        "id": 306559204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666914683
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1297645531\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<blockquote>\n<p>Instead of having the current table, how about we just highlight a few of the default benchmarks and print the default message?</p>\n</blockquote>\n<p>Happy with using the default output (and separately from the github action growing a \"markdown\" output format in the sightglass tool).</p>\n<p>Not sure what you mean about \"just highlight a few of the default benchmarks\". Do you mean just run the <code>default.suite</code> set of benchmarks? If so, fine by me.</p>\n</blockquote>",
        "id": 307195927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667248203
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1298941774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<blockquote>\n<p>Will wait for @cfallin approval</p>\n</blockquote>\n<p>Ah, sorry, didn't realize you were waiting for me here too. Yes, it seems fine to me.</p>\n<p>One thing that I just realized is that the results come as a comment via your personal GitHub account. I think that we should change that -- we shouldn't have a dependence on one person's account (it's liable to break if you change or delete your account, it's problematic if one day you aren't working on Wasmtime/Cranelift any more, etc). We don't have to do it in this PR but would you be able to create a dedicated bot account for posting these comments, and give the infra a token for that instead (and somehow share the appropriate details with various folks across BA so we always have access)?</p>\n</blockquote>",
        "id": 307377909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667327449
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1298941774\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<blockquote>\n<p>Will wait for @cfallin approval</p>\n</blockquote>\n<p>Ah, sorry, didn't realize you were waiting for me here too. Yes, it seems fine to me.</p>\n<p>@cfallin Says it is still waiting for the +1. Will use bot account to send results back. May need you to create that account here though, not sure I have permission.</p>\n</blockquote>",
        "id": 307388104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667330911
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1298941774\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<blockquote>\n<p>Will wait for @cfallin approval</p>\n</blockquote>\n<p>Ah, sorry, didn't realize you were waiting for me here too. Yes, it seems fine to me.<br>\n</p>\n</blockquote>",
        "id": 307836966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667508802
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060#issuecomment-1298941774\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5060\">issue #5060</a>:</p>\n<blockquote>\n<blockquote>\n<p>Will wait for @cfallin approval</p>\n</blockquote>\n<p>Ah, sorry, didn't realize you were waiting for me here too. Yes, it seems fine to me.</p>\n<p>One thing that I just realized is that the results come as a comment via your personal GitHub account. I think that we should change that -- we shouldn't have a dependence on one person's account (it's liable to break if you change or delete your account, it's problematic if one day you aren't working on Wasmtime/Cranelift any more, etc). We don't have to do it in this PR but would you be able to create a dedicated bot account for posting these comments, and give the infra a token for that instead (and somehow share the appropriate details with various folks across BA so we always have access)?<br>\n</p>\n</blockquote>",
        "id": 307837357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667508923
    }
]