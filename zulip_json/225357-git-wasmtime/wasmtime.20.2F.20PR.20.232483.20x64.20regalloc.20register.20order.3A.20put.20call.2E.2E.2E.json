[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2483\">PR #2483</a> from <code>x64-regalloc-register-order</code> to <code>main</code>:</p>\n<blockquote>\n<p>The x64 backend currently builds the <code>RealRegUniverse</code> in a way that<br>\nis generating somewhat suboptimal code. In many blocks, we see uses of<br>\ncallee-save (non-volatile) registers (r12, r13, r14, rbx) first, even in<br>\nvery short leaf functions where there are plenty of volatiles to use.<br>\nThis is leading to unnecessary spills/reloads.</p>\n<p>On one (local) test program, a medium-sized C benchmark compiled to Wasm<br>\nand run on Wasmtime, I am seeing a ~10% performance improvement with<br>\nthis change; it will be less pronounced in programs with high register<br>\npressure (there we are likely to use all registers regardless, so the<br>\nprologue/epilogue will save/restore all callee-saves), or in programs<br>\nwith fewer calls, but this is a clear win for small functions and in<br>\nmany cases removes prologue/epilogue clobber-saves altogether.</p>\n<p>Separately, I think the RA's coalescing is tripping up a bit in some<br>\ncases; see e.g. the filetest touched by this commit that loads a value<br>\ninto %rsi then moves to %rax and returns immediately. This is an<br>\northogonal issue, though, and should be addressed (if worthwhile) in<br>\n<a href=\"http://regalloc.rs\">regalloc.rs</a>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 219046432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607323125
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2483\">PR #2483</a>.</p>",
        "id": 219046433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607323125
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2483#pullrequestreview-545897763\">PR Review</a>.</p>",
        "id": 219049745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607327558
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2483\">PR #2483</a>.</p>",
        "id": 219105476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1607359994
    }
]