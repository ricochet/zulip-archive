[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>I was looking into developing the Windows backend of Cranelift/wasmtime on Linux using cross-compilation and wine, and it actually works quite well, with one exception: I have to comment out the setjmp helper, because if I don't, this happens:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run --target x86_64-pc-windows-gnu hello.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.12s\n     Running `target/x86_64-pc-windows-gnu/debug/wasmtime.exe hello.wasm`\nwine: Call from 0x7bc5d60c to unimplemented function ntdll.dll._setjmp, aborting\nwine: Unimplemented function ntdll.dll._setjmp called at address 0x7bc5d60c (thread 003e), starting debugger...\n</code></pre></div>\n\n\n<p>This clearly looks like a bug in wine of some sort, but given that setjmp is a pervasive function and it's neither implemented in wine nor can I find any similar bug reports, what wasmtime does here is at least <em>unusual</em>. What gives?</p>\n</blockquote>",
        "id": 198334680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590074845
    },
    {
        "content": "<p>whitequark labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>I was looking into developing the Windows backend of Cranelift/wasmtime on Linux using cross-compilation and wine, and it actually works quite well, with one exception: I have to comment out the setjmp helper, because if I don't, this happens:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run --target x86_64-pc-windows-gnu hello.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.12s\n     Running `target/x86_64-pc-windows-gnu/debug/wasmtime.exe hello.wasm`\nwine: Call from 0x7bc5d60c to unimplemented function ntdll.dll._setjmp, aborting\nwine: Unimplemented function ntdll.dll._setjmp called at address 0x7bc5d60c (thread 003e), starting debugger...\n</code></pre></div>\n\n\n<p>This clearly looks like a bug in wine of some sort, but given that setjmp is a pervasive function and it's neither implemented in wine nor can I find any similar bug reports, what wasmtime does here is at least <em>unusual</em>. What gives?</p>\n</blockquote>",
        "id": 198334681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590074845
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632149862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>Er, I think I chose the wrong issue template--I'm not really sure if this is a bug in wasmtime.</p>\n</blockquote>",
        "id": 198334723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590074871
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632151329\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>According to <a href=\"https://www.geoffchappell.com/studies/windows/win32/ntdll/api/index.htm\">this page</a> ntdll.dll indeed exports <code>_setjmp</code> and it is undocumented, so maybe wasmtime shouldn't really be using it?</p>\n</blockquote>",
        "id": 198334878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590074944
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632159576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>The only reference to <code>setjmp</code> I could find is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/962f057c8a0e42bcba33850d412d77e5de5830fb/crates/runtime/src/helpers.c#L8\">https://github.com/bytecodealliance/wasmtime/blob/962f057c8a0e42bcba33850d412d77e5de5830fb/crates/runtime/src/helpers.c#L8</a> which imports it from <code>setjmp.h</code>. This is a header defined by the C specification.</p>\n</blockquote>",
        "id": 198335655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590075338
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632164687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>I believe the problem is that wasmtime <em>uses</em> a C runtime function but does not <em>link</em> to C runtime. Things happen to work pretty much by accident because ntdll happens to expose that function too. If I comment out the <code>#[link = \"ntdll\"]</code> and add <code>#[link = \"ucrt\"] extern \"C\" {}</code> then things work as I expect.</p>\n</blockquote>",
        "id": 198336206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590075612
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632167595\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>It is actually not necessary to link to <code>ucrt</code> explicitly. What is necessary is to <em>not</em> link to <code>ntdll</code>, since for some reason the <code>_setjmp</code> symbol from ntdll is preferred compared to the symbol from <code>msvcrt</code>.</p>\n</blockquote>",
        "id": 198336911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590075943
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632168343\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>The <code>setjmp</code>/<code>longjmp</code> functions are used to implement traps right now in wasmtime. They're used to jump over all the JIT code back to the original caller. IIRC there's actually a few setjmp-like functions on Windows, and we had to historically be quite careful about which precise one that we used.</p>\n<p>I suspect that what's happening here is that the header we're using ends up mapping our call to <code>_setjmp</code> and the <code>setjmp</code> symbol (no leading underscore) is actually different and defined elsewhere. I'm not sure if one is particularly more canonical than the other, but if the bare <code>setjmp</code> symbol is the way to go then it seems reasonable to add!</p>\n<p>I'm not personally too too familiar with how this works on Windows and how you'd select between them (or how they're different, really)</p>\n</blockquote>",
        "id": 198337079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590076022
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632175989\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>@alexcrichton It appears to me that the problem is that the linker command line includes the following: <code>\"-ladvapi32\" \"-lntdll\" \"-lwinapi_advapi32\" \"-lwinapi_cfgmgr32\" \"-lwinapi_gdi32\" \"-lwinapi_kernel32\" \"-lwinapi_msimg32\" \"-lwinapi_ole32\" \"-lwinapi_opengl32\" \"-lwinapi_shell32\" \"-lwinapi_user32\" \"-lwinapi_winspool\" \"-ladvapi32\" \"-lws2_32\" \"-luserenv\" \"-lmingwex\" \"-lmingw32\" \"-lmsvcrt\" \"-lmsvcrt\" \"-luser32\" \"-lkernel32\" \"-lgcc_eh\" \"-l:libpthread.a\" \"-lgcc\" \"-lmsvcrt\" \"-lkernel32\"</code> where as you can see <code>ntdll</code> appears earlier than <code>msvcrt</code> and so it is searched earlier. Is there a way to control the order here?</p>\n</blockquote>",
        "id": 198338684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590076753
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632203862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>@alexcrichton Scratch that, I removed the <code>#[link = \"ntdll\"]</code> and added it back via <code>RUSTFLAGS=\"-C link-arg=-Wl,--allow-multiple-definition -C link-arg=-lmsvcrt -C link-arg=-lntdll -Z print-link-args\"</code> but this just segfaults ld. Can we grab <code>NtQueryInformationFile</code> via <code>GetProcAddress</code> instead?</p>\n</blockquote>",
        "id": 198344222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590079091
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738#issuecomment-632234221\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>See #1739.</p>\n</blockquote>",
        "id": 198349403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590081471
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1738\">Issue #1738</a>:</p>\n<blockquote>\n<p>I was looking into developing the Windows backend of Cranelift/wasmtime on Linux using cross-compilation and wine, and it actually works quite well, with one exception: I have to comment out the setjmp helper, because if I don't, this happens:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cargo run --target x86_64-pc-windows-gnu hello.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.12s\n     Running `target/x86_64-pc-windows-gnu/debug/wasmtime.exe hello.wasm`\nwine: Call from 0x7bc5d60c to unimplemented function ntdll.dll._setjmp, aborting\nwine: Unimplemented function ntdll.dll._setjmp called at address 0x7bc5d60c (thread 003e), starting debugger...\n</code></pre></div>\n\n\n<p>This clearly looks like a bug in wine of some sort, but given that setjmp is a pervasive function and it's neither implemented in wine nor can I find any similar bug reports, what wasmtime does here is at least <em>unusual</em>. What gives?</p>\n</blockquote>",
        "id": 198361254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087381
    }
]