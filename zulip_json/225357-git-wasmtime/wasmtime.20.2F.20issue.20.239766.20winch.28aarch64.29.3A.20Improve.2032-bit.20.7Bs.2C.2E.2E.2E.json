[
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<p>While reviewing <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9762\">https://github.com/bytecodealliance/wasmtime/pull/9762</a>, I realized that in the case of 32-bit operands a sign-extension is required given that <code>cranelift-codegen</code>, only accepts 64-bit operands. </p>\n<p>The ARM64 documentation states [1], [2] that 32-bit operands for division are allowed.</p>\n<p>[1]: <a href=\"https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/SDIV--Signed-Divide-\">https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/SDIV--Signed-Divide-</a><br>\n[2]: <a href=\"https://developer.arm.com/documentation/ddi0602/2024-09/Base-Instructions/UDIV--Unsigned-divide-\">https://developer.arm.com/documentation/ddi0602/2024-09/Base-Instructions/UDIV--Unsigned-divide-</a></p>\n<p>Introducing support for 32-bit operands means that in Winch we can skip the extension sequence when dealing with 32-bit operands, similar th </p>\n<p>As a side note, it seems that when migrating to ISLE <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3572/files#diff-bd652d5af8795961ba7456cf427fdae37bb82500e9f18fa6fc1621281bd1ab58L103\">the intention was to add support for 32-bit operands</a>. </p>\n<p>cc @alexcrichton / @cfallin I'm not entirely familiar with the development history of the Aarch64 backend, is there any other reason to be aware of when considering support for 32-bit operands?<br>\n</p>\n</blockquote>",
        "id": 486996950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733751337
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766#issuecomment-2528735118\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<p>I'm not aware of any reasons why we couldn't add 32-bit variants of the <code>div</code> instruction family; going all the way back to the <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1494/files#diff-3225946418348408f8da35d60c56fde5c3997156686ebd7feab85b20a6d55bd5R902\">original PR for the aarch64 backend</a> it looks like I had only implemented <code>SDiv64</code> and <code>UDiv64</code> and added the extensions. Probably this is a case of \"no one has had occasion to add it yet\"...</p>\n<p>(Incidentally, x86-64 has 32-bit divides too; and on both architectures I'd expect that high-performance implementations would probably take ~half the latency for a 32-bit version; so not a small win for any benchmark with a divide in a critical path.)</p>\n</blockquote>",
        "id": 487048562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733763433
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<p>While reviewing <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9762\">https://github.com/bytecodealliance/wasmtime/pull/9762</a>, I realized that in the case of 32-bit operands a sign-extension is required given that <code>cranelift-codegen</code>, only accepts 64-bit operands. </p>\n<p>The ARM64 documentation states [1], [2] that 32-bit operands for division are allowed.</p>\n<p>[1]: <a href=\"https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/SDIV--Signed-Divide-\">https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/SDIV--Signed-Divide-</a><br>\n[2]: <a href=\"https://developer.arm.com/documentation/ddi0602/2024-09/Base-Instructions/UDIV--Unsigned-divide-\">https://developer.arm.com/documentation/ddi0602/2024-09/Base-Instructions/UDIV--Unsigned-divide-</a></p>\n<p>Introducing support for 32-bit operands means that in Winch we can skip the extension sequence when dealing with 32-bit operands.</p>\n<p>As a side note, it seems that when migrating to ISLE <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3572/files#diff-bd652d5af8795961ba7456cf427fdae37bb82500e9f18fa6fc1621281bd1ab58L103\">the intention was to add support for 32-bit operands</a>. </p>\n<p>cc @alexcrichton / @cfallin I'm not entirely familiar with the development history of the Aarch64 backend, is there any other reason to be aware of when considering support for 32-bit operands?<br>\n</p>\n</blockquote>",
        "id": 487049844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733763709
    },
    {
        "content": "<p><a href=\"https://github.com/saulecabrera\">saulecabrera</a> added the winch label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">Issue #9766</a>.</p>",
        "id": 487100820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733779001
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766#issuecomment-2529499038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @saulecabrera</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"winch\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>saulecabrera: winch</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 487100913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733779041
    },
    {
        "content": "<p>MarinPostma <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766#issuecomment-2531292864\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<p>I'd like to take a stab at that after I'm done with winch. Any guidance on how I should tackle that?</p>\n</blockquote>",
        "id": 487223695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733829796
    },
    {
        "content": "<p>saulecabrera <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766#issuecomment-2531321103\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<p>One approach could be to take a look at how similar instructions have been added in the past e.g., <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8453\">https://github.com/bytecodealliance/wasmtime/pull/8453</a></p>\n</blockquote>",
        "id": 487226218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733830597
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9766\">issue #9766</a>:</p>\n<blockquote>\n<p>While reviewing <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9762\">https://github.com/bytecodealliance/wasmtime/pull/9762</a>, I realized that in the case of 32-bit operands a sign-extension is required given that <code>cranelift-codegen</code>, only accepts 64-bit operands. </p>\n<p>The ARM64 documentation states [1], [2] that 32-bit operands for division are allowed.</p>\n<p>[1]: <a href=\"https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/SDIV--Signed-Divide-\">https://developer.arm.com/documentation/ddi0596/2020-12/Base-Instructions/SDIV--Signed-Divide-</a><br>\n[2]: <a href=\"https://developer.arm.com/documentation/ddi0602/2024-09/Base-Instructions/UDIV--Unsigned-divide-\">https://developer.arm.com/documentation/ddi0602/2024-09/Base-Instructions/UDIV--Unsigned-divide-</a></p>\n<p>Introducing support for 32-bit operands means that in Winch we can skip the extension sequence when dealing with 32-bit operands.</p>\n<p>As a side note, it seems that when migrating to ISLE <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3572/files#diff-bd652d5af8795961ba7456cf427fdae37bb82500e9f18fa6fc1621281bd1ab58L103\">the intention was to add support for 32-bit operands</a>. </p>\n<p>cc @alexcrichton / @cfallin I'm not entirely familiar with the development history of the Aarch64 backend, is there any other reason to be aware of when considering support for 32-bit operands?<br>\n</p>\n</blockquote>",
        "id": 490036572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734637319
    }
]