[
    {
        "content": "<p>wrbs opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2738\">Issue #2738</a>:</p>\n<blockquote>\n<p>In #1184 and #1214 <code>cranelift-module</code> was extended to add support for passing in a trap sink while compiling a function. However there's no support for doing the same with a <code>StackMapSink</code> and it looks like at the time this was deferred to later.</p>\n<p>I'm interested in using the GC support for something which would use the <code>cranelift-jit</code> interface but there's currently no way to access stackmaps when doing that.</p>\n<p>I'm not sure what the best way to fix this is. One method could be adding a <code>stack_map_sink: &amp;mut dyn StackMapSink</code> argument to <code>define_function</code> but that would require all users of the interface (most of who don't use stack maps) to pass in a <code>&amp;mut NullStackMapSink {}</code> in the same way as passing a <code>NullTrapSink</code> is required. However if breaking changes to the API are ok this fits the existing convention.</p>\n<p>I'm thinking of sending a PR with this approach but I'd like to know if this is acceptable.</p>\n</blockquote>",
        "id": 230895051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616084610
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2738#issuecomment-802071546\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2738\">Issue #2738</a>:</p>\n<blockquote>\n<p>That sounds like a fine approach - please do send a PR!</p>\n</blockquote>",
        "id": 230895480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616084795
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2738\">Issue #2738</a>:</p>\n<blockquote>\n<p>In #1184 and #1214 <code>cranelift-module</code> was extended to add support for passing in a trap sink while compiling a function. However there's no support for doing the same with a <code>StackMapSink</code> and it looks like at the time this was deferred to later.</p>\n<p>I'm interested in using the GC support for something which would use the <code>cranelift-jit</code> interface but there's currently no way to access stackmaps when doing that.</p>\n<p>I'm not sure what the best way to fix this is. One method could be adding a <code>stack_map_sink: &amp;mut dyn StackMapSink</code> argument to <code>define_function</code> but that would require all users of the interface (most of who don't use stack maps) to pass in a <code>&amp;mut NullStackMapSink {}</code> in the same way as passing a <code>NullTrapSink</code> is required. However if breaking changes to the API are ok this fits the existing convention.</p>\n<p>I'm thinking of sending a PR with this approach but I'd like to know if this is acceptable.</p>\n</blockquote>",
        "id": 230959033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1616114978
    }
]