[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1749072680\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Thanks! I think the issue though might lie in what's rendering this error to something human readable. The <code>Error</code> derive here means that (I think) the two underlying errors here you're displaying are already configured via <code>source()</code> in the Rust <code>Error</code> trait. When rendering errors though some processes accidentally only render the top-level of the error rather than the whole chain of errors.</p>\n<p>Can you share a reproduction for example to help track down where the error rendering is happening? Or do you know that off the top of your head perchance? </p>\n<p>When dealing with <code>anyhow::Error</code> rendering the full error is done with <code>{:?}</code> as opposed to <code>{}</code> which I suspect is what needs to be fixed here.</p>\n</blockquote>",
        "id": 395061377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696517655
    },
    {
        "content": "<p>ereslibre <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1749742968\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Thank you for the quick response @alexcrichton!</p>\n<p>I have created <a href=\"https://github.com/ereslibre/wasmtime-wasi-nn-reproducer\">https://github.com/ereslibre/wasmtime-wasi-nn-reproducer</a>. It has two branches: <code>main</code> and <code>detailed-errors</code>.</p>\n<p>The <code>detailed-errors</code> one contains a <a href=\"http://crates.io\">crates.io</a> patch for <a href=\"https://github.com/intel/openvino-rs/pull/71\"><code>openvino-rs</code> similar to this one</a>.</p>\n<p>An example of the fail report in the different branches:</p>\n<ul>\n<li><code>main</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n</code></pre></div>\n<p>Please, note that the error itself only contains the \"Failed while accessing backend\" message. With this patch (and the one proposed for <code>openvino-rs</code>), by using the <code>detailed-errors</code> branch:</p>\n<ul>\n<li><code>detailed-errors</code> branch:</li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 395127804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696544968
    },
    {
        "content": "<p>ereslibre <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1750128098\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Just to add more context to my previous message. In the non-detailed version (<code>main</code> branch in the reproducer), the <code>std::fmt::Display</code> for <code>BackendError</code> (for example) is expanded to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unused_qualifications)]</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BackendError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__formatter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thiserror</span>::<span class=\"n\">__private</span>::<span class=\"p\">{</span><span class=\"n\">DisplayAsDisplay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathAsDisplay</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_variables, deprecated, clippy::used_underscore_binding)]</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">BackendError</span>::<span class=\"n\">BackendAccess</span><span class=\"p\">(</span><span class=\"n\">_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">__formatter</span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"Failed while accessing backend\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">snip</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>In the <code>detailed-errors</code> branch, it is expanded to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unused_qualifications)]</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BackendError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__formatter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thiserror</span>::<span class=\"n\">__private</span>::<span class=\"p\">{</span><span class=\"n\">DisplayAsDisplay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathAsDisplay</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_variables, deprecated, clippy::used_underscore_binding)]</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">BackendError</span>::<span class=\"n\">BackendAccess</span><span class=\"p\">(</span><span class=\"n\">_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">__formatter</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"s\">\"Failed while accessing backend: {0}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"n\">_0</span><span class=\"p\">.</span><span class=\"n\">as_display</span><span class=\"p\">(),</span>\n<span class=\"w\">                            </span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"p\">(</span><span class=\"n\">snip</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 395198425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696577999
    },
    {
        "content": "<p>ereslibre edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1750128098\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Just to add more context to my previous message. In the non-detailed version (<code>main</code> branch in the reproducer), the <code>std::fmt::Display</code> for <code>BackendError</code> is expanded to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unused_qualifications)]</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BackendError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__formatter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thiserror</span>::<span class=\"n\">__private</span>::<span class=\"p\">{</span><span class=\"n\">DisplayAsDisplay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathAsDisplay</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_variables, deprecated, clippy::used_underscore_binding)]</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">BackendError</span>::<span class=\"n\">BackendAccess</span><span class=\"p\">(</span><span class=\"n\">_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">__formatter</span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"Failed while accessing backend\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">snip</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>In the <code>detailed-errors</code> branch, it is expanded to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unused_qualifications)]</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BackendError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__formatter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thiserror</span>::<span class=\"n\">__private</span>::<span class=\"p\">{</span><span class=\"n\">DisplayAsDisplay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathAsDisplay</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_variables, deprecated, clippy::used_underscore_binding)]</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">BackendError</span>::<span class=\"n\">BackendAccess</span><span class=\"p\">(</span><span class=\"n\">_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">__formatter</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"s\">\"Failed while accessing backend: {0}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"n\">_0</span><span class=\"p\">.</span><span class=\"n\">as_display</span><span class=\"p\">(),</span>\n<span class=\"w\">                            </span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"p\">(</span><span class=\"n\">snip</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 395198855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696578176
    },
    {
        "content": "<p>ereslibre edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1750128098\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Just to add more context to my previous message. In the non-detailed version (<code>main</code> branch in the reproducer), the <code>std::fmt::Display</code> for <code>BackendError</code> (showing the <code>BackendAccess</code> variant only in this example) is expanded to the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unused_qualifications)]</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BackendError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__formatter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thiserror</span>::<span class=\"n\">__private</span>::<span class=\"p\">{</span><span class=\"n\">DisplayAsDisplay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathAsDisplay</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_variables, deprecated, clippy::used_underscore_binding)]</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">BackendError</span>::<span class=\"n\">BackendAccess</span><span class=\"p\">(</span><span class=\"n\">_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">__formatter</span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span><span class=\"fm\">format_args!</span><span class=\"p\">(</span><span class=\"s\">\"Failed while accessing backend\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"n\">snip</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>In the <code>detailed-errors</code> branch, it is expanded to:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unused_qualifications)]</span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BackendError</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__formatter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">            </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">thiserror</span>::<span class=\"n\">__private</span>::<span class=\"p\">{</span><span class=\"n\">DisplayAsDisplay</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PathAsDisplay</span><span class=\"p\">};</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(unused_variables, deprecated, clippy::used_underscore_binding)]</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">BackendError</span>::<span class=\"n\">BackendAccess</span><span class=\"p\">(</span><span class=\"n\">_0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">__formatter</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">write_fmt</span><span class=\"p\">(</span>\n<span class=\"w\">                            </span><span class=\"fm\">format_args!</span><span class=\"p\">(</span>\n<span class=\"w\">                                </span><span class=\"s\">\"Failed while accessing backend: {0}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                                </span><span class=\"n\">_0</span><span class=\"p\">.</span><span class=\"n\">as_display</span><span class=\"p\">(),</span>\n<span class=\"w\">                            </span><span class=\"p\">),</span>\n<span class=\"w\">                        </span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"p\">(</span><span class=\"n\">snip</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 395198972,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696578239
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1750727757\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>I'm a bit confused though, the <code>main</code> branch looks like the correct rendering of the error to me? The <code>detailed-errors</code> branch repeats the error information on each line where the <code>main</code> one correctly has only one specific error for each line, which I would imagine is sufficient. Is there a reason though that you'd prefer the rendering of the <code>detailed-errors</code> branch rather than <code>main</code>?</p>\n</blockquote>",
        "id": 395265804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696600706
    },
    {
        "content": "<p>ereslibre <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751324066\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there a reason though that you'd prefer the rendering of the detailed-errors branch rather than main?</p>\n</blockquote>\n<p>Sorry, I think I didn't provide the best example. I was referring only to the display implementation of the error. I have updated both branches of the example. where this is more clear: assuming this is happening in a log entry, the difference is as follows:</p>\n<ul>\n<li>n the <code>main</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T19</span>:<span class=\"mi\">37</span>:<span class=\"mi\">32</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>\n</code></pre></div>\n<ul>\n<li>In the <code>detailed-errors</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T19</span>:<span class=\"mi\">37</span>:<span class=\"mi\">43</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n</code></pre></div>\n<p>The use case I'm thinking about is when this might not be a fatal error, and just logged with the <code>Display</code> implementation. I think it might help an administrator to understand what is the issue by looking at the logs. However, I also think is reasonable to say that the <code>Display</code> implementation should be brief and not so detailed.</p>\n</blockquote>",
        "id": 395319275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696621455
    },
    {
        "content": "<p>ereslibre edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751324066\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there a reason though that you'd prefer the rendering of the detailed-errors branch rather than main?</p>\n</blockquote>\n<p>Sorry, I think I didn't provide the best example. I was referring only to the display implementation of the error. I have updated both branches of the example, where this is more clear: assuming this is happening in a log entry, the difference is as follows:</p>\n<ul>\n<li>n the <code>main</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T19</span>:<span class=\"mi\">37</span>:<span class=\"mi\">32</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>\n</code></pre></div>\n<ul>\n<li>In the <code>detailed-errors</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T19</span>:<span class=\"mi\">37</span>:<span class=\"mi\">43</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n</code></pre></div>\n<p>The use case I'm thinking about is when this might not be a fatal error, and just logged with the <code>Display</code> implementation. I think it might help an administrator to understand what is the issue by looking at the logs. However, I also think is reasonable to say that the <code>Display</code> implementation should be brief and not so detailed.</p>\n</blockquote>",
        "id": 395319321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696621483
    },
    {
        "content": "<p>ereslibre edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751324066\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is there a reason though that you'd prefer the rendering of the detailed-errors branch rather than main?</p>\n</blockquote>\n<p>Sorry, I think I didn't provide the best example. I was referring only to the display implementation of the error. I have updated both branches of the example, where this is more clear: assuming this is happening in a log entry, the difference is as follows:</p>\n<ul>\n<li>In the <code>main</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T19</span>:<span class=\"mi\">37</span>:<span class=\"mi\">32</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>\n</code></pre></div>\n<ul>\n<li>In the <code>detailed-errors</code> branch:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T19</span>:<span class=\"mi\">37</span>:<span class=\"mi\">43</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n</code></pre></div>\n<p>The use case I'm thinking about is when this might not be a fatal error, and just logged with the <code>Display</code> implementation. I think it might help an administrator to understand what is the issue by looking at the logs. However, I also think is reasonable to say that the <code>Display</code> implementation should be brief and not so detailed.</p>\n</blockquote>",
        "id": 395319389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696621503
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751367945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Ok yes that makes sense, but my comment above was basically saying that whatever is emitting this log is using <code>{}</code> when it should be using <code>{:?}</code>. Would it be possible update the logger to do that?</p>\n</blockquote>",
        "id": 395324281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696624083
    },
    {
        "content": "<p>ereslibre <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751397535\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it be possible update the logger to do that?</p>\n</blockquote>\n<p>Yes, that would certainly be an option. Being multi-line output, it might look a bit off when surrounded by other log entries (\"something\" and \"something else\"):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">RUST_LOG</span><span class=\"o\">=</span><span class=\"n\">warn</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T20</span>:<span class=\"mi\">55</span>:<span class=\"mi\">54</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">something</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T20</span>:<span class=\"mi\">55</span>:<span class=\"mi\">54</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">accessing</span><span class=\"w\"> </span><span class=\"n\">backend</span>\n\n<span class=\"w\">    </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n        <span class=\"mi\">0</span>: <span class=\"nc\">library</span><span class=\"w\"> </span><span class=\"n\">loading</span><span class=\"w\"> </span><span class=\"n\">error</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"nc\">system</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/intel/openvino-rs/blob/main/crates/openvino-finder): Unable to find the `openvino_c` library to load</span>\n<span class=\"p\">[</span><span class=\"mi\">2023</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"o\">-</span><span class=\"mi\">06</span><span class=\"n\">T20</span>:<span class=\"mi\">55</span>:<span class=\"mi\">54</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">WARN</span><span class=\"w\">  </span><span class=\"n\">reproducer</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"w\"> </span><span class=\"k\">else</span>\n</code></pre></div>\n<p>I thought having this information in one line was easier in terms of log processing, but I'm fine if you think what we have is enough :)</p>\n</blockquote>",
        "id": 395328059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696626008
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751410339\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<p>Indeed! That seems like something to handle in whatever is rendering the error in my opinion. This PR, by default, means that by default all other renderers of the error will render duplicate information which isn't correct. This to me seems like a bug and/or improvement in the local rendering you have of an error to logs. </p>\n<p>Much of this is derivative of how errors are designed in Rust. Errors are designed as a chain of errors and each error in the chain should not render everything else in the chain but rather only they themselves. This PR is effectively violating that design principle of errors in Rust. </p>\n<p>What I might recommend is to either: </p>\n<ul>\n<li>Split the <code>{:?}</code> output on lines and log each line, that way the multi-line output looks better.</li>\n<li>Split the <code>{:?}</code> output on lines and then rejoin with semicolons - this creates one long line effectively as this PR does already</li>\n<li>Iterate over <code>.sources()</code> directly and generate a custom log message.</li>\n</ul>\n</blockquote>",
        "id": 395329468,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696626841
    },
    {
        "content": "<p>ereslibre <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157#issuecomment-1751416571\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7157\">issue #7157</a>:</p>\n<blockquote>\n<blockquote>\n<p>This PR, by default, means that by default all other renderers of the error will render duplicate information which isn't correct.</p>\n</blockquote>\n<p>Yes, thanks a lot for your suggestions and the rationale!</p>\n</blockquote>",
        "id": 395330273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696627266
    }
]