[
    {
        "content": "<p>peterhuene opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625\">PR #2625</a> from <code>engine-funcs</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR introduces defining host functions at the <code>Engine</code> rather than with<br>\n<code>Func</code> tied to a <code>Store</code>.</p>\n<p>The intention here is to enable a host to define all of the functions once at<br>\nwith an <code>Engine</code> and then use a <code>Linker</code> (or directly with<br>\n<code>Store::get_engine_func</code>) to use the functions when instantiating a module.</p>\n<p>This should help improve the performance of use cases where a <code>Store</code> is<br>\nshort-lived and redefining the functions at every module instantiation a<br>\nnoticeable performance hit.</p>\n<p>See <a href=\"https://github.com/bytecodealliance/rfcs/issues/9\">bytecodealliance/rfcs#9</a> regarding these changes.</p>\n</blockquote>",
        "id": 224559718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611972564
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580477354\">PR Review</a>.</p>",
        "id": 224753210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580477354\">PR Review</a>.</p>",
        "id": 224753211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567918513\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW this sort of interning I was hoping would make <code>Store</code> faster since <code>Store</code> was short-lived, but since <code>Engine</code> is long-lived it's probably not necessary to do this and we can probably just get away with the simpler-to-read <code>String</code> everywhere perhaps?</p>\n</blockquote>",
        "id": 224753212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567924220\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Similar to above, could this document the <code>Send</code> and <code>Sync</code> bounds?</p>\n</blockquote>",
        "id": 224753215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567922189\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Do you think there's any need for this to be dynamic for the lifetime of the <code>Engine</code> itself? I would naively expect that any typical usage of this would be \"let's create everything at the beginning and then that's it\". If that's the case I think it's a bummer to put this behind an rwlock.</p>\n<p>If you agree, perhaps we could move the building portion to <code>Config</code> which is basically an <code>EngineBuilder</code> at this point anyway. That way we wouldn't need to have the synchronization around this. Similarly we could literally have an <code>EngineBuilder</code> if needed to which is constructed with a <code>Config</code> and is then consumed to produce an <code>Engine</code>.</p>\n<p>In any case this is mostly a stylistic thing, I just think it'd be nice to avoid the usage of locks if we can.</p>\n</blockquote>",
        "id": 224753216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567927929\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ideally this <code>Store::upgrade</code> would only happen once here, although it would make the <code>resume_panic</code> case slightly trickier where it has to be sure to drop <code>store</code>. Since we're already manually dropping things here, though, that may be ok?</p>\n</blockquote>",
        "id": 224753217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567919921\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think this can be a bit unsafe since <code>EngineFunc</code> doesn't embed a reference to its <code>Engine</code>, so this cloned object isn't guaranteed to not outlive an <code>Engine</code>. That being said I suspect the usage is all correct, but this comment may need to be updated.</p>\n</blockquote>",
        "id": 224753218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567928994\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Due to the trickineses involved here, especially around not having local variables that need to be dropped, could this shim be shared with <code>into_func</code> above?</p>\n</blockquote>",
        "id": 224753219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197442
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567923398\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could the docs here also be sure to point out the <code>Send</code> and <code>Sync</code> bounds and how more relaxed bounds are available on <code>Func</code>?</p>\n</blockquote>",
        "id": 224753220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567936114\">PR Review Comment</a>:</p>\n<blockquote>\n<p>One thing I'm worried about is reading this value later on since it could get signatures mismatched. Could this perhaps store <code>u32::max_value()</code> as a signature index (or w/e the max value is) so if it's accidentally used we weed out that bug sooner rather than later?</p>\n</blockquote>",
        "id": 224753221,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567935538\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this have <code>+Send+Sync</code> as well? If it can't cast down could a transmute be used to erase the type bounds?</p>\n</blockquote>",
        "id": 224753222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567938966\">PR Review Comment</a>:</p>\n<blockquote>\n<p>To avoid the <code>pub(crate)</code> here could this perhaps be defined in the <code>func.rs</code> module?</p>\n</blockquote>",
        "id": 224753223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567946789\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is one of the things I'm most worried about with this PR. I don't think there's any issue with this currently, only that one could be lurking by accident in the future.</p>\n<p>My concern here is that the not-threadsafe <code>InstanceHandle</code> is being shared across threads. This is ok because we happen to not touch any of the non-threadsafe state, but all of <code>InstanceHandle</code> and consumers are currently written without thread-safety in mind. Do you think there's anything we can do to future-proof this? For example I mentioned one elsewhere in this PR where we store an invalid index so if it's ever used we hopefully abort quickly. I think ideally we'd have checks in <code>wasmtime_runtime::Instance</code> as well, but I'm not sure if they would be too onerous for other usages.</p>\n<p>Basically my main worry here is that this function is introducing threading in a non-compiler-checked fashion. All authors of <code>runtime/src/instance.rs</code> need to be aware of this but that's difficult to enforce because this happens in such an isolated location.</p>\n</blockquote>",
        "id": 224753224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567939214\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think these may not need to be <code>pub</code>?</p>\n</blockquote>",
        "id": 224753225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567937123\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Like above could this have <code>+Send+Sync</code>?</p>\n</blockquote>",
        "id": 224753226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r567951452\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Since <code>define_func</code> above returns a <code>Result&lt;()&gt;</code> should this as well?</p>\n</blockquote>",
        "id": 224753227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612197443
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580614000\">PR Review</a>.</p>",
        "id": 224764709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612201908
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568022043\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't know, deduplicating strings is kinda nice (module string will be repeated a bunch, for example)</p>\n</blockquote>",
        "id": 224764710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612201908
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580631156\">PR Review</a>.</p>",
        "id": 224767622,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612203124
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568035070\">PR Review Comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>My concern here is that the not-threadsafe <code>InstanceHandle</code> is being shared across threads. This is ok because we happen to not touch any of the non-threadsafe state, but all of <code>InstanceHandle</code> and consumers are currently written without thread-safety in mind. Do you think there's anything we can do to future-proof this?</p>\n</blockquote>\n<p>Would it be feasible to split out a struct of <code>Sync</code> members from <code>InstanceHandle</code> that we can share, without sharing the whole thing across threads?</p>\n<p>e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">InstanceHandleSync</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// sync members in here...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">InstanceHandle</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sync</span>: <span class=\"nc\">InstanceHandleSync</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// non-sync members here...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 224767623,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612203124
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580663308\">PR Review</a>.</p>",
        "id": 224772951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205491
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568060737\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That's an excellent point.  I don't think one would redefine these functions after creating the <code>Engine</code> and doing this in a builder pattern would also remove the need to track \"redefined\" functions to keep them alive.</p>\n<p>I think <code>Config</code> would work for this.  Perhaps <code>define_host_func</code> and <code>wrap_host_func</code>?</p>\n</blockquote>",
        "id": 224772952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205491
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580663585\">PR Review</a>.</p>",
        "id": 224772998,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205509
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568060903\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll add that.</p>\n</blockquote>",
        "id": 224772999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205509
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580663697\">PR Review</a>.</p>",
        "id": 224773018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205518
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568060976\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll add that.</p>\n</blockquote>",
        "id": 224773020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205518
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580664362\">PR Review</a>.</p>",
        "id": 224773168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205566
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568061536\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll add those bounds.</p>\n</blockquote>",
        "id": 224773170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205567
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580669893\">PR Review</a>.</p>",
        "id": 224774141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205975
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568066002\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Eh I don't mind too much about the names, those seem fine to me!</p>\n</blockquote>",
        "id": 224774142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612205975
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580670273\">PR Review</a>.</p>",
        "id": 224774242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206005
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568066372\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>VMSharedSignatureIndex::default()</code> is <code>u32::max_value()</code> and guaranteed to never match a signature as the registry doesn't hand that value out.</p>\n<p>Using the default should cause any indirect call to fail if somehow this value gets used, which would clearly be a bug.</p>\n<p>This value should never be read anyway as all imports of the engine function should use the store-local <code>VMCallerCheckedAnyfunc</code> that has the correct shared signature.</p>\n</blockquote>",
        "id": 224774245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206005
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580671343\">PR Review</a>.</p>",
        "id": 224774492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206088
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568067186\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unfortunately I don't think so since most JIT code goes from <code>*mut VMContext</code> straight to <code>*mut Instance</code> (the internals of the handle) which has all the non-<code>Sync</code> pieces. For example we just have a dynamic guarantee that the instance never tries to <code>elem.drop</code>, for example.</p>\n<p>One of my bigger worries is leaking the incorrect <code>VMSharedSignatureIndex</code> which is configured in the <code>VMContext</code>. I think storing an out-of-bounds index will help weed things out, but otherwise I don't have any great ideas. That being said I don't believe that it's leaked today at all.</p>\n</blockquote>",
        "id": 224774494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206089
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580671503\">PR Review</a>.</p>",
        "id": 224774525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206100
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568067283\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Will add.</p>\n</blockquote>",
        "id": 224774526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206100
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580671787\">PR Review</a>.</p>",
        "id": 224774591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206122
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568067485\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll fix.</p>\n</blockquote>",
        "id": 224774599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206122
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580672617\">PR Review</a>.</p>",
        "id": 224774735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206182
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568068156\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh nice! I didn't realize that was the default but that's exactly the behavior I was hoping to have here, so sounds like there's nothing to do!</p>\n</blockquote>",
        "id": 224774737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206182
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580678935\">PR Review</a>.</p>",
        "id": 224775851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206673
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568072902\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I share your concerns over safety here.</p>\n<p>I still think we're getting some mileage out of the compiler for safety as <code>Store</code> is <code>!Send+!Sync</code> and the store to use for an engine function is always retrieved from TLS (and thus should be the same thread that created the store).</p>\n<p>Perhaps a check in <code>Caller::store()</code> that ensures the call is happening on the same thread that created the store, just to be safe?</p>\n<blockquote>\n<p>Would it be feasible to split out a struct of Sync members from InstanceHandle that we can share, without sharing the whole thing across threads?</p>\n</blockquote>\n<p>I think splitting <code>wasmtime_runtime::Instance</code> like that shouldn't be necessary as the thread-affinity of an instance shouldn't be violated by these changes.</p>\n</blockquote>",
        "id": 224775852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206673
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580681411\">PR Review</a>.</p>",
        "id": 224776336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206867
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568074786\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>Func::new</code> returns <code>Self</code> because of the <code>expect</code> call on the result from <code>generate_func_export</code>.</p>\n<p>Should we just change <code>define_func</code> to return <code>()</code> similarly to match?</p>\n</blockquote>",
        "id": 224776337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612206867
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580687067\">PR Review</a>.</p>",
        "id": 224777486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207332
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568079276\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed, this comment is misleading as nothing in a runtime instance ties back to the engine itself.</p>\n<p>This clone impl will likely not be needed if I remove the <code>RwLock</code> in favor of the builder pattern anyway.</p>\n</blockquote>",
        "id": 224777487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207332
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580689518\">PR Review</a>.</p>",
        "id": 224777922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207530
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568081196\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah that seems fine to me! We'll probably want to document the shadowing behavior though since this differs slightly than that of <code>Linker</code> where by default <code>Linker</code> returns an error. Returning an error here though feels a bit heavyweight.</p>\n</blockquote>",
        "id": 224777924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207530
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580690686\">PR Review</a>.</p>",
        "id": 224778172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207624
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568082081\">PR Review Comment</a>:</p>\n<blockquote>\n<p>These fields are also accessed from <code>Store::get_engine_func</code>, but I'm happy to make these private with accessor impls if you think it's warranted.</p>\n</blockquote>",
        "id": 224778173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207624
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580690857\">PR Review</a>.</p>",
        "id": 224778197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207637
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568082239\">PR Review Comment</a>:</p>\n<blockquote>\n<p>My worry is moreso for the internals of Wasmtime itself rather than callers. You're right though in that we do have a number of consistency checks and internals (I suspect more than a few locations modified in this PR were found via assertion failures rather than knowing what to do off the top of your head). My biggest worry is hidden mutability in <code>InstanceHandle</code>, but I think it's not the end of the world for that to be something we remain vigilant for.</p>\n<p>Perhaps a nice doc-block can go somewhere though explaining the threading involved here?</p>\n</blockquote>",
        "id": 224778198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207637
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580693724\">PR Review</a>.</p>",
        "id": 224778755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207854
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568084496\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh true, perhaps though there could be something like <code>engine_func.to_func(&amp;store)</code>? (mostly just looking to localize this logic if we can)</p>\n</blockquote>",
        "id": 224778756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612207854
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580698689\">PR Review</a>.</p>",
        "id": 224779696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208253
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568088300\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't have a strong opinion on this.  I'm fine with removing the de-duplication for clarity's sake.</p>\n<p>That said, I think de-duplication is more likely to be exploited at the engine-level where (ideally) WASI is being defined rather than in a <code>Linker</code>.</p>\n</blockquote>",
        "id": 224779697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208254
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580703997\">PR Review</a>.</p>",
        "id": 224780581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208686
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568092489\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'll see what I can do to localize the implementation to <code>EngineFunc</code>.</p>\n</blockquote>",
        "id": 224780582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208686
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580706253\">PR Review</a>.</p>",
        "id": 224780900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208869
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568094334\">PR Review Comment</a>:</p>\n<blockquote>\n<p>A non-issue if these get removed from <code>Engine</code> in favor of the builder-pattern, though.</p>\n<p>Re: shadowing, this PR should include a check in <code>Linker</code> that ensures failure if an engine function exists and the linker is <code>!allow_shadowing</code>.  I'll fix that.</p>\n</blockquote>",
        "id": 224780902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208870
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568094334\">PR Review Comment</a>.</p>",
        "id": 224781011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612208918
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580708916\">PR Review</a>.</p>",
        "id": 224781289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612209070
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568096375\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Agreed, this can be done once.  I'll fix this.</p>\n</blockquote>",
        "id": 224781290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612209070
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580713044\">PR Review</a>.</p>",
        "id": 224781908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612209385
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568099510\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The problem is these two shims differ in how the store is accessed (one from capture and the other from TLS); related to that is the associated instance state also differs.</p>\n<p>As such, I don't think much could be shared here since I wouldn't want the <code>resume_panic</code> call moved to any other frame than the shim function itself.</p>\n</blockquote>",
        "id": 224781909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612209385
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568099510\">PR Review Comment</a>.</p>",
        "id": 224796184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612216109
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580905785\">PR Review</a>.</p>",
        "id": 224817186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228275
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568253193\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So there's a problem with adding this bound.</p>\n<p>We're passing <code>self</code> in the <code>IntoFunc</code> impls, which has type <code>F</code> with bounds <code>F: Fn(Caller&lt;'_&gt;, $($args),*) -&gt; R + 'static</code> and unfortunately that bound is shared with <code>into_func</code> which wouldn't want those bounds on <code>F</code> otherwise it pollutes <code>Func::wrap</code>.</p>\n<p>To properly implement this, we'd need a separate <code>IntoEngineFunc</code> impl.  Thoughts?</p>\n</blockquote>",
        "id": 224817187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228275
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568253193\">PR Review Comment</a>.</p>",
        "id": 224817203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228304
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#pullrequestreview-580910004\">PR Review</a>.</p>",
        "id": 224817816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228883
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568256648\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Or would we rather add these bounds here and transmute them in for the <code>IntoFunc</code> impl with a big comment as to why this is safe (i.e. because the bounds are present in the <code>Engine::wrap_func</code>)?</p>\n</blockquote>",
        "id": 224817817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228883
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568256648\">PR Review Comment</a>.</p>",
        "id": 224817827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228898
    },
    {
        "content": "<p>peterhuene edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2625#discussion_r568256648\">PR Review Comment</a>.</p>",
        "id": 224817843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612228914
    }
]