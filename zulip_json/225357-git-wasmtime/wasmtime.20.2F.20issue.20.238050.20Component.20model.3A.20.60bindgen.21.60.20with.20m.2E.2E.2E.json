[
    {
        "content": "<p><a href=\"https://github.com/miguelaeh\">miguelaeh</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">Issue #8050</a>.</p>",
        "id": 424931399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709662957
    },
    {
        "content": "<p>miguelaeh opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">issue #8050</a>:</p>\n<blockquote>\n<p>It does not seem to be possible to import two worlds in the same Rust file.</p>\n<p>When the two worlds are part of the same WIT package, <code>bindgen!</code> allows you to select only one, and if you use the macro twice with different world names the package export gets duplicated. </p>\n<p>If you add the two worlds to different packages in the WIT files and try to use <code>bindgen!</code> for each of them on the same Rust file, you get the error: <code>the name </code>exports<code> is defined multiple times</code>.</p>\n<p>Is it possible to do this in some way that I am missing?</p>\n<h3>Test Case</h3>\n<p>Any file that defines two worlds</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Create a WIT with two worlds</li>\n<li>Try to use <code>bindgen!</code> to use both worlds on the same Rust file.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to use both worlds in the Rust code</p>\n<h3>Actual Results</h3>\n<p>The compiler fails because of how the exports are setup. I have to place the <code>bindgen!</code> macro in different files, so it produces a weird way of referencing the worlds in rust as you have the same package name and my WIT files cannot share functions from the package.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>15.0.1</code></p>\n<p>Operating system: <code>Ubuntu 22.04</code></p>\n<p>Architecture: <code>x86_64</code><br>\n</p>\n</blockquote>",
        "id": 424931401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709662958
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050#issuecomment-1981139364\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">issue #8050</a>:</p>\n<blockquote>\n<p>Yes <code>bindgen!</code> works at the granularity of worlds, so if you've got two worlds your choices are:</p>\n<ul>\n<li>Create a third world that <code>include</code>s both, and then bindgen that one.</li>\n<li>Use <code>bindgen!</code> twice in separate modules: <code>mod a { bindgen!(...); } mod b { bindgen!(...); }</code></li>\n</ul>\n<p>Does either of those work for you?</p>\n</blockquote>",
        "id": 425114694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709739040
    },
    {
        "content": "<p>miguelaeh <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050#issuecomment-1985985923\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">issue #8050</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton ,</p>\n<p>Yes. I mean, there are several ways of working around this. But is there any actual reason for that? It seems to me a bit counterintuitive. I would expect to be able to use all the worlds of a package in the same file. It would be like \"importing a package in the file\" instead of being able to \"import a single class from each package per file\".</p>\n</blockquote>",
        "id": 425549512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709914743
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050#issuecomment-1986282195\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">issue #8050</a>:</p>\n<blockquote>\n<p>More-or-less the answer is \"this is what worlds are built for\". They're the unit of work for bindings generators. WIT is designed to be used by many bindings generators and it's desirable to have the same interface (ish) across them all, and using a <code>world</code> is what they are all currently based on. While it's possible to refactor and update all of them to work with multiple worlds, this is also why features like <code>include</code> where added in addition to the <code>inline</code> option for Wasmtime's <code>bindgen!</code> macro were added (to easily make new worlds).</p>\n<p>Basically the choice of \"what is the unit of bindgen\" is a cross-cutting decision. We chose \"world\" as the unit and so everything is built on that. Similar to how C compilers work on a single <code>*.c</code> file at a time while the Rust compiler works on a whole crate at a time. No fundamental reason for either choice, but so many things are built around that as a result.</p>\n</blockquote>",
        "id": 425579247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709926126
    },
    {
        "content": "<p>miguelaeh closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">issue #8050</a>:</p>\n<blockquote>\n<p>It does not seem to be possible to import two worlds in the same Rust file.</p>\n<p>When the two worlds are part of the same WIT package, <code>bindgen!</code> allows you to select only one, and if you use the macro twice with different world names the package export gets duplicated. </p>\n<p>If you add the two worlds to different packages in the WIT files and try to use <code>bindgen!</code> for each of them on the same Rust file, you get the error: <code>the name </code>exports<code> is defined multiple times</code>.</p>\n<p>Is it possible to do this in some way that I am missing?</p>\n<h3>Test Case</h3>\n<p>Any file that defines two worlds</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Create a WIT with two worlds</li>\n<li>Try to use <code>bindgen!</code> to use both worlds on the same Rust file.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>Being able to use both worlds in the Rust code</p>\n<h3>Actual Results</h3>\n<p>The compiler fails because of how the exports are setup. I have to place the <code>bindgen!</code> macro in different files, so it produces a weird way of referencing the worlds in rust as you have the same package name and my WIT files cannot share functions from the package.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>15.0.1</code></p>\n<p>Operating system: <code>Ubuntu 22.04</code></p>\n<p>Architecture: <code>x86_64</code><br>\n</p>\n</blockquote>",
        "id": 425767414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710071655
    },
    {
        "content": "<p>miguelaeh <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050#issuecomment-1987199948\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8050\">issue #8050</a>:</p>\n<blockquote>\n<p>Thank you for the explanation @alexcrichton. Closing the issue since it seems it is not unexpected behavior but a design choice.</p>\n</blockquote>",
        "id": 425767417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710071655
    }
]