[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1745529400\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 394690532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696358702
    },
    {
        "content": "<p>a1phyr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746527722\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>Do you have a idea of what causes the failure ? I don't understand why the sign bit is set in these tests.</p>\n<p>A simple function loading the constant outputs the right code:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0xf64</span><span class=\"p\">.</span><span class=\"mi\">0</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">VCode</span>:\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">block0</span>:\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">lui</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">518695</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">slli</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">,</span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"mi\">31</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">fmv</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">fa0</span><span class=\"p\">,</span><span class=\"n\">a2</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">ret</span>\n<span class=\"p\">;</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Disassembled</span>:\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">block0</span>: <span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x0</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">lui</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x815d9</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">slli</span><span class=\"w\"> </span><span class=\"n\">a2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1f</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">fmv</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">fa0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a2</span>\n<span class=\"p\">;</span><span class=\"w\">   </span><span class=\"n\">ret</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 394801262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696413058
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746683690\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>I think this might be because <code>lui</code> for RISC-V 64bit sign extends the immediate after placing it in the register. </p>\n<p>This is the expression that <code>lui</code> computes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">rd</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">immediate</span><span class=\"p\">[</span><span class=\"mi\">31</span>:<span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The immediate has the MSB set, and since we don't fully shift immediate all the way to the top we are observing the sign extension.</p>\n</blockquote>",
        "id": 394819377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696418936
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746683690\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>I think this might be because <code>lui</code> for RISC-V 64bit sign extends the immediate after placing it in the register. </p>\n<p>This is the expression that <code>lui</code> computes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">rd</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">immediate</span><span class=\"p\">[</span><span class=\"mi\">31</span>:<span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The immediate has the MSB set, and since we don't fully shift all the way to the top we are observing the sign extension.</p>\n</blockquote>",
        "id": 394819756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696419071
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746683690\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>I think this might be because <code>lui</code> for RISC-V 64bit sign extends the immediate after placing it in the register. </p>\n<p>This is the expression that <code>lui</code> computes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">rd</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">immediate</span><span class=\"p\">[</span><span class=\"mi\">31</span>:<span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The immediate has the MSB set, and since we don't fully shift all the way to the top we are observing the sign extension bit.</p>\n</blockquote>",
        "id": 394819795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696419083
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746683690\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>I think this might be because <code>lui</code> for RISC-V 64bit sign extends the immediate after placing it in the register. </p>\n<p>This is the expression that <code>lui</code> computes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">rd</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">immediate</span><span class=\"p\">[</span><span class=\"mi\">31</span>:<span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The immediate has the MSB set, and since we don't fully shift all the way to the top we are observing the sign extension bit.</p>\n<hr>\n<p>This test might show what is happening slightly better:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">iconst</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mh\">0x0000_40AE_C800_0000</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">iconst</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x0000_40AE_C800_0000</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\">        </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF_C0AE_C800_0000</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 394820053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696419168
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746683690\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>I think this might be because <code>lui</code> for RISC-V 64bit sign extends the immediate before placing it in the register. </p>\n<p>This is the expression that <code>lui</code> computes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"n\">rd</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">(</span><span class=\"n\">immediate</span><span class=\"p\">[</span><span class=\"mi\">31</span>:<span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The immediate has the MSB set, and since we don't fully shift all the way to the top we are observing the sign extension bit.</p>\n<hr>\n<p>This test might show what is happening slightly better:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">iconst</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mh\">0x0000_40AE_C800_0000</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">iconst</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x0000_40AE_C800_0000</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\">        </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0xFFFF_C0AE_C800_0000</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 394821725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696419772
    },
    {
        "content": "<p>a1phyr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746760780\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>Oh I missed that ! Thanks a lot !</p>\n</blockquote>",
        "id": 394827822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696421889
    },
    {
        "content": "<p>a1phyr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139#issuecomment-1746847020\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7139\">issue #7139</a>:</p>\n<blockquote>\n<p>Note: this does not work for constants like <code>0xf7fff00000000000</code> but that would significantly complicate the code.</p>\n</blockquote>",
        "id": 394837280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696424952
    }
]