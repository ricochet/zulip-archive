[
    {
        "content": "<p>Vurich opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift w.r.t. compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>. Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196324654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588692798
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift w.r.t. compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks and the likely reliability of the results, I tried to dig into the code to make sure that what I thought was being run was actually being run (and likewise, what I didn't think would be run would definitely not be run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196324932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588692926
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that what I thought was being run was actually being run (and likewise, what I didn't think would be run would definitely not be run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196324965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588692943
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196325043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588692968
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is actually measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196325117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588693000
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196325126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588693005
    },
    {
        "content": "<p><strong>Vurich</strong> requested <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a>.</p>",
        "id": 196325136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588693010
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-405927550\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-405927550\">PR Review</a>.</p>",
        "id": 196327777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588694194
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r420219724\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r420219724\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Will this disable the verifier for fuzzing?</p>\n</blockquote>",
        "id": 196327778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588694194
    },
    {
        "content": "<p>Vurich submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-406357075\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-406357075\">PR Review</a>.</p>",
        "id": 196596110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588749662
    },
    {
        "content": "<p>Vurich created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r420590164\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r420590164\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Great point, although I'm not sure if it actually will disable these checks in fuzzing - this file appears to only be for the spec test suite, and fuzzing should really have <code>debug_assertions</code> turned on anyway. Either way, I can easily revert this change, as I made it before I split the benchmarks into their own file - before, the tests and benchmarks were identical except that the benchmarks had <code>b.iter(|| {})</code> around <code>wast_context.run_file(wast)</code>. It's now not really necessary.</p>\n</blockquote>",
        "id": 196596111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588749662
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196596159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588749714
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\" title=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 196597006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588750415
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-407586580\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-407586580\">PR Review</a>.</p>",
        "id": 196787905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588865429
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-407586580\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#pullrequestreview-407586580\">PR Review</a>.</p>",
        "id": 196787907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588865429
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421593680\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421593680\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this file be renamed to perhaps <code>spec.rs</code> or something that indicates that it's benchmarking the spec test suite?</p>\n<p>FWIW the spec test suite I don't think is really the most interesting of benchmarks, but at least for our own internal tracking and performance monitoring it probably isn't so bad to track!</p>\n</blockquote>",
        "id": 196787908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588865429
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421594868\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421594868\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this be deduplicated with the <code>wasmtime-wast</code> crate? Perhaps something where a function to handle each directive is provided and then we say \"run this file\", or something like that?</p>\n</blockquote>",
        "id": 196787909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588865430
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421593945\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421593945\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would it be possible to use a hand-rolled <code>harness = false</code> scheme or something like <code>criterion</code> that works on stable?</p>\n</blockquote>",
        "id": 196787910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588865430
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421594323\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1660#discussion_r421594323\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This I think is duplicated with the testing code as well as with the function below, could this all be consolidated into one function, perhaps in the <code>wasmtime-wast</code> crate itself?</p>\n</blockquote>",
        "id": 196787911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588865430
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>main</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 202009363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593110998
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>main</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 207377759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597822168
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>main</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 207385655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1597828588
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>main</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 207646571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598023079
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>main</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 209521017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599662816
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a> from <code>master</code> to <code>main</code>:</p>\n<blockquote>\n<p>So I wrote these benchmarks with the aim of getting a vague idea of how Lightbeam compares to Cranelift in compile-time and runtime performance, you can see the results in this gist <a href=\"https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e\">https://gist.github.com/Vurich/8696e67180aa3c93b4548fb1f298c29e</a>.</p>\n<p>I'd love any criticisms of the methodology used by these benchmarks w.r.t. the likely reliability of the results, I tried to dig into the code to make sure that, in the loop which is being measured, what I thought was being run was actually being run (and what I didn't think would be run was actually not being run), but I'd love if there were some holes to poke in the way that these benchmarks have been written.</p>\n<p>Unfortunately, it changes the API of <code>wasmtime-wast</code> in order to make public a couple of functions (and one type returned by one of those functions) that the benchmarks need. I considered making these functions public only when <code>cfg(test)</code> is active, or to inline the benchmarks into that file itself instead of making a separate <code>benches</code> binary, but I figured that it would be more helpful to ask here what people would consider the best way to go about that. I personally didn't see anything majorly problematic with just making these methods public and it was the easiest method of implementation, so that's the method that I chose for the original version of this PR, with the understanding that I can change it later if necessary.</p>\n</blockquote>",
        "id": 210244522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600252698
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1660\">PR #1660</a>.</p>",
        "id": 255087350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763832
    }
]