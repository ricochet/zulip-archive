[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a> (assigned to fitzgen) from <code>nested-components</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit is an implementation of a number of features of the<br>\ncomponent model including:</p>\n<ul>\n<li>Defining nested components</li>\n<li>Outer aliases to components and modules</li>\n<li>Instantiating nested components</li>\n</ul>\n<p>The implementation here is intended to be a foundational pillar of<br>\nWasmtime's component model support since recursion and nested components<br>\nare the bread-and-butter of the component model. At a high level the<br>\nintention for the component model implementation in Wasmtime has long<br>\nbeen that the recursive nature of components is \"erased\" at compile time<br>\nto something that's more optimized and efficient to process. This commit<br>\nended up exemplifying this quite well where the vast majority of the<br>\ninternal changes here are in the \"compilation\" phase of a component<br>\nrather than the runtime instantiation phase. The support in the<br>\n<code>wasmtime</code> crate, the runtime instantiation support, only had minor<br>\nupdates here while the internals of translation have seen heavy updates.</p>\n<p>The <code>translate</code> module was greatly refactored here in this commit.<br>\nPreviously it would, as a component is parsed, create a final<br>\n<code>Component</code> to hand off to trampoline compilation and get persisted at<br>\nruntime. Instead now it's a thin layer over <code>wasmparser</code> which simply<br>\nrecords a list of <code>LocalInitializer</code> entries for how to instantiate the<br>\ncomponent and its index spaces are built. This internal representation<br>\nof the instantiation of a component is pretty close to the binary format<br>\nintentionally.</p>\n<p>Instead of performing dataflow legwork the <code>translate</code> phase of a<br>\ncomponent is now responsible for two primary tasks:</p>\n<ol>\n<li>\n<p>All components and modules are discovered within a component. They're<br>\n   assigned <code>Static{Component,Module}Index</code> depending on where they're<br>\n   found and a <code>{Module,}Translation</code> is prepared for each one. This<br>\n   \"flattens\" the recursive structure of the binary into an indexed list<br>\n   processable later.</p>\n</li>\n<li>\n<p>The lexical scope of components is managed here to implement outer<br>\n   module and component aliases. This is a significant design<br>\n   implementation because when closing over an outer component or module<br>\n   that item may actually be imported or something like the result of a<br>\n   previous instantiation. This means that the capture of<br>\n   modules and components is both a lexical concern as well as a runtime<br>\n   concern. The handling of the \"runtime\" bits are handled in the next<br>\n   phase of compilation.</p>\n</li>\n</ol>\n<p>The next and currently final phase of compilation is a new pass where<br>\nmuch of the historical code in <code>translate.rs</code> has been moved to (but<br>\nheavily refactored). The goal of compilation is to produce one \"flat\"<br>\nlist of initializers for a component (as happens prior to this PR) and<br>\nto achieve this an \"inliner\" phase runs which runs through the<br>\ninstantiation process at compile time to produce a list of initializers.<br>\nThis <code>inline</code> module is the main addition as part of this PR and is now<br>\nthe workhorse for dataflow analysis and tracking what's actually<br>\nreferring to what.</p>\n<p>During the <code>inline</code> phase the local initializers recorded in the<br>\n<code>translate</code> phase are processed, in sequence, to instantiate a<br>\ncomponent. Definitions of items are tracked to correspond to their root<br>\ndefinition which allows seeing across instantiation argument boundaries<br>\nand such. Handling \"upvars\" for component outer aliases is handled in<br>\nthe <code>inline</code> phase as well by creating state for a component whenever a<br>\ncomponent is defined as was recorded during the <code>translate</code> phase.<br>\nFinally this phase is chiefly responsible for doing all string-based<br>\nname resolution at compile time that it can. This means that at runtime<br>\nno string maps will need to be consulted for item exports and such.<br>\nThe final result of inlining is a list of \"global initializers\" which is<br>\na flat list processed during instantiation time. These are almost<br>\nidentical to the initializers that were processed prior to this PR.</p>\n<p>There are certainly still more gaps of the component model to implement<br>\nbut this should be a major leg up in terms of functionality that<br>\nWasmtime implements. This commit, however leaves behind a \"hole\" which<br>\nis not intended to be filled in at this time, namely importing and<br>\nexporting components at the \"root\" level from and to the host. This is<br>\ntracked and explained in more detail as part of #4283.</p>\n<p>cc #4185 as this completes a number of items there</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 286524031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655489149
    },
    {
        "content": "<p>alexcrichton assigned <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a> to fitzgen.</p>",
        "id": 286524033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655489149
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a> as ready for review.</p>",
        "id": 286524117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655489174
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a> (assigned to fitzgen) from <code>nested-components</code> to <code>main</code>.</p>",
        "id": 286526716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655490592
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a>.</p>",
        "id": 286530446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655492621
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#pullrequestreview-1013959292\">PR review</a>.</p>",
        "id": 286952020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834373
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#pullrequestreview-1013959292\">PR review</a>.</p>",
        "id": 286952021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834373
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902869885\">PR review comment</a>:</p>\n<blockquote>\n<p>We should clarify that this constraint is only at the root component, since importing and exporting components is just fine in between nested components.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>// way to implement either importing or exporting a component from the root component itself. Currently\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 286952022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834373
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902867217\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>// * Components can have arbitrary nesting and internally do instantiations via\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 286952023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834373
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902871075\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we rename this type <code>GlobalInitializer</code> just to be super clear about the local vs global distinction?</p>\n</blockquote>",
        "id": 286952024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834373
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902883399\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! nested component is instantiated. The inlining then refers to how this\n//! stack of instantiations is flattened to one list of `Initializer` entries to\n//! represent the process of instantiating a component graph, similar to how function\n//! inlining removes call instructions and creates one giant function for a call graph. Here\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 286952025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834373
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902910418\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you add a test here that has something like</p>\n<ul>\n<li>root component<ul>\n<li>parent component, imports f<ul>\n<li>child component closes over f</li>\n</ul>\n</li>\n<li>instantiate parent with f1</li>\n<li>instantiate parent with f2</li>\n<li>assert that each parent's child closed over the appropriate f1/f2</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 286952026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834374
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902914317\">PR review comment</a>:</p>\n<blockquote>\n<p>either here or in the wast files (I didn't see anything that exercised outer aliases/closures in this particular way)</p>\n</blockquote>",
        "id": 286952125,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834406
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#pullrequestreview-1014027858\">PR review</a>.</p>",
        "id": 286952128,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834408
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a> (assigned to fitzgen) from <code>nested-components</code> to <code>main</code>.</p>",
        "id": 286952950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834748
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#pullrequestreview-1014037143\">PR review</a>.</p>",
        "id": 286953216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834854
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902920985\">PR review comment</a>:</p>\n<blockquote>\n<p>That I think should be covered by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1c2d7322d9ba6e1fe53befadc730f89ba7280609/tests/misc_testsuite/component-model/nested.wast#L262-L309\">this test</a> if I'm understanding you right, but could you double-check to be sure?</p>\n</blockquote>",
        "id": 286953217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655834854
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#pullrequestreview-1014042089\">PR review</a>.</p>",
        "id": 286953871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655835124
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285#discussion_r902924581\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, so it is! Thanks!</p>\n</blockquote>",
        "id": 286953874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655835124
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4285\">PR #4285</a>.</p>",
        "id": 286958262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655837338
    }
]