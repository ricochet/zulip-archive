[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396351044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697138681
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396351045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697138681
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a> from <code>cfallin:pcc-memtypes-load</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR incorporates a few more steps in PCC's development:</p>\n<ul>\n<li>We now check that the fact, if any, provided for a field in a memory type supports (subsumes) the claimed fact on the result of a load from that field. Likewise, we check that the fact on any value stored to a field supports the field's fact.</li>\n<li>We check that facts are preserved across control-flow edges by validating that branch arguments' facts subsume blockparams' facts.</li>\n<li>For integer-typed values, when no other fact is present and one is needed during validation, we infer a minimal fact based on the type's full range.</li>\n</ul>\n<p>With all of these together, we can validate a simple \"mock <code>vmctx</code>\" example that looks a lot like what static memory accesses in Wasmtime do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_pcc</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">.</span>\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">mock</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"> </span><span class=\"k\">struct</span>:\n    <span class=\"nc\">mt0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"kt\">i64</span> <span class=\"nc\">readonly</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">mock</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"mi\">4</span><span class=\"n\">GiB</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">plus</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">GiB</span><span class=\"w\"> </span><span class=\"n\">guard</span>\n<span class=\"w\">    </span><span class=\"n\">mt1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mh\">0x1_8000_0000</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">(</span><span class=\"n\">mt0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Compute</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">address</span>: <span class=\"nc\">base</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Guard</span><span class=\"w\"> </span><span class=\"n\">region</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"n\">GiB</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">is</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">sufficient</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"o\">-</span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"n\">I64</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">0</span><span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"n\">pointer</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff_ffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">offset</span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">(</span><span class=\"n\">mt1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0xffff_ffff</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">checked</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In theory, once we propagate facts during aegraph rewriting (we don't currently; opts are off in all tests), this should be enough for end-to-end checking of static memories by emitting the right facts in <code>cranelift-wasm</code>. Those two steps (opts, then Wasm frontend) are next!</p>\n<p>Co-authored-by: Nick Fitzgerald &lt;<a href=\"mailto:fitzgen@gmail.com\">fitzgen@gmail.com</a>&gt;</p>\n</blockquote>",
        "id": 396351046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697138681
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396351053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697138684
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#pullrequestreview-1675118349\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 396358471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697141962
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#pullrequestreview-1675118349\">PR review</a>:</p>\n<blockquote>\n<p>Nice!</p>\n</blockquote>",
        "id": 396358472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697141962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#discussion_r1357372512\">PR review comment</a>:</p>\n<blockquote>\n<p>Missing trailing newline</p>\n</blockquote>",
        "id": 396358473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697141962
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#discussion_r1357372639\">PR review comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n</blockquote>",
        "id": 396358474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697141963
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396360242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697142769
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396360492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697142879
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396385766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697155921
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231\">PR #7231</a>.</p>",
        "id": 396396757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697161004
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#pullrequestreview-1676985342\">PR review</a>.</p>",
        "id": 396545839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697217777
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#pullrequestreview-1676985342\">PR review</a>.</p>",
        "id": 396545840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697217777
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#discussion_r1358573147\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think this is technically <em>wrong</em> but it feels like a footgun to allow a <code>Mem</code> fact to subsume a minimal <code>ValueMax</code> fact.</p>\n<p>Would it be a problem to limit this to <code>ValueMax</code> LHSes? I guess that is what would happen if this case wasn't here, due to the match arm just below this one. Can you explain in more detail why we need this kind of cross-fact-kind subsumption then?</p>\n</blockquote>",
        "id": 396545841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697217778
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#pullrequestreview-1677153495\">PR review</a>.</p>",
        "id": 396556191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697222909
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7231#discussion_r1358697513\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems that that narrower rule is indeed sufficient, at least for our test cases. The new rule is still necessary (not covered by the rule below) because of the remaining difference: it doesn't require matching bit-widths.</p>\n<p>All of this is a bit of awkward fallout of the way default facts are working now though, so I'm going to see if I can try again to eliminate them and make <code>subsume</code> take the type instead. If not, I'll update as you suggest!</p>\n</blockquote>",
        "id": 396556192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697222909
    }
]