[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a> from <code>jameysharp:table-constant-bounds</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>WebAssembly tables have a minimum size, but may optionally also have a maximum size. If the maximum is set to the same number of elements as the minimum, then we can emit an <code>iconst</code> instruction for bounds-checks on tables, rather than loading the bounds from memory.</p>\n<p>That's a win in its own right, but when optimization is enabled, this also allows bounds-checks to constant-fold if the table index is provided as an integer constant.</p>\n</blockquote>",
        "id": 426441429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710371271
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>.</p>",
        "id": 426441430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710371273
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>.</p>",
        "id": 426441431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710371273
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>.</p>",
        "id": 426441432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710371273
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>.</p>",
        "id": 426441433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710371273
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125#pullrequestreview-1935378423\">PR review</a>:</p>\n<blockquote>\n<p>Looks good to me!</p>\n<p>Before I hit the big green button though, two questions/observations:</p>\n<ul>\n<li>As this gets more complicated I fear that keeping <code>func_environ.rs</code> in sync with <code>dummy.rs</code> is going to get a bit cumbersome. I know that's a longstanding issue that we want to test the clif of wasmtime's output, but I'd probably caution going too far down the route of mirroring all table stuff in the two files. Either that, or do you have plans to move some of this instead to <code>cranelift-wasm</code>? </li>\n<li>One thing I'm a little sad about here is that we get to give Cranelift a bunch of constants but because they're involved in control flow it may not end up helping a whole lot. For example in the examples you added here the <code>brif</code> can become <code>br</code>, but I don't think we currently optimize that. In lieu of adding more optimizations, do you think that the frontend will be able to detect two constants and omit the control flow entirely? Basically doing that form of constant folding in the frontend rather than in the middle-end.</li>\n</ul>\n<p>To be clear I don't think either of these need to be addressed before this PR lands, so you can feel free to hit the button as well, figured this'd be a good place to ask anyway!</p>\n</blockquote>",
        "id": 426442275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710371784
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125#issuecomment-1996107656\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>:</p>\n<blockquote>\n<blockquote>\n<p>One thing I'm a little sad about here is that we get to give Cranelift a bunch of constants but because they're involved in control flow it may not end up helping a whole lot. For example in the examples you added here the brif can become br, but I don't think we currently optimize that. In lieu of adding more optimizations, do you think that the frontend will be able to detect two constants and omit the control flow entirely? Basically doing that form of constant folding in the frontend rather than in the middle-end.</p>\n</blockquote>\n<p>Having just talked to @jameysharp about his plans my understanding is that the next steps will address this: removing the branch-on-OOB in exchange for a select-null-pointer approach, and then separately, optimizing away the select if (and only if!) the choice-input is constant. The overall motivation/arc here is that we want to make <code>i32.iconst N ; call_indirect ...</code> as fast as possible, and in particular if we have non-nullable typed funcrefs and use the typed variant of <code>call_indirect</code>, with a bit more too (e.g. removing the null check) we should eventually have load-the-function-pointer-and-call machine code.</p>\n</blockquote>",
        "id": 426444520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710373435
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125#issuecomment-1996107656\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>:</p>\n<blockquote>\n<blockquote>\n<p>One thing I'm a little sad about here is that we get to give Cranelift a bunch of constants but because they're involved in control flow it may not end up helping a whole lot. For example in the examples you added here the brif can become br, but I don't think we currently optimize that. In lieu of adding more optimizations, do you think that the frontend will be able to detect two constants and omit the control flow entirely? Basically doing that form of constant folding in the frontend rather than in the middle-end.</p>\n</blockquote>\n<p>Having just talked to @jameysharp about his plans my understanding is that the next steps will address this: removing the branch-on-OOB in exchange for a select-null-pointer approach, and then separately, optimizing away the select if (and only if!) the choice-input is constant. The overall motivation/arc here is that we want to make <code>i32.iconst N ; table.get; call_ref ...</code> as fast as possible, and in particular if we have non-nullable typed funcrefs and use the typed variant of <code>call_ref</code>, with a bit more too (e.g. removing the null check) we should eventually have load-the-function-pointer-and-call machine code.</p>\n</blockquote>",
        "id": 426444612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710373482
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125#issuecomment-1996167811\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>:</p>\n<blockquote>\n<p>Chris' response accurately reflects my plans for how to address your second question, Alex. I'm currently working on getting rid of the <code>trapnz</code>, and it works on x64, but I need to do a bit more work for the rest of the backends. #8122 was the first step on that. Once that is out of the way, the existing constant-folding optimizations get us most of the way to where we want to be, and as Chris said, eliminating <code>select_spectre_guard</code> when its condition is constant does the rest.</p>\n<p>To your first question, I've been trying to push as much as I can into cranelift-wasm shared code, but many details (like \"how do I discover the current table bounds\", lazy table initialization, and GC refcount management) are unfortunately specific to a particular runtime, so I haven't been able to find much opportunity to share more than this. I'd love to hear suggestions though!</p>\n</blockquote>",
        "id": 426446817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710375151
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125#issuecomment-1996181677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>:</p>\n<blockquote>\n<p>Oh nice, yeah changing to select{,_spectre} sounds like a nice way to solve this without much work in the frontend. And agreed that it'd be great for <code>i32.const N</code> + <code>call_indirect</code> to be load/call in the most optimal case.</p>\n<blockquote>\n<p>I'd love to hear suggestions though!</p>\n</blockquote>\n<p>Ah yeah if all the major bits go in cranelift-wasm then I think that's fine, I think I over-rotated on the <code>let bound = ...</code> bit that's basically the same in <code>func_environ.rs</code> and <code>dummy.rs</code>.</p>\n<p>AFAIK there's no use case for keeping <code>dummy.rs</code> though other than \"we haven't figure out a way to test Wasmtime\". I might be just so inspired by this to take a stab at migrating all the tests to using Wasmtime's codegen...</p>\n</blockquote>",
        "id": 426447908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710376084
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125#issuecomment-1996183590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>:</p>\n<blockquote>\n<p>I would love to have CLIF and compiled-output tests that run through Wasmtime instead of using the dummy environment, personally! My current sense is there are plenty of reasons why that's difficult, but if you get it working I'm all for it.</p>\n</blockquote>",
        "id": 426448069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710376225
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8125\">PR #8125</a>.</p>",
        "id": 426456617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710381970
    }
]