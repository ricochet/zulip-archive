[
    {
        "content": "<p>Robbepop opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a> from <code>Robbepop:rf-update-wasmi-fuzzer</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Currently Wasmtime uses the 2 years old Wasmi version <code>0.20.0</code>.</p>\n<p>Since then Wasmi has improved substantially and added support for new Wasm proposals such as <code>bulk-memory</code>, <code>reference-types</code> and <code>tail-calls</code> which we can now enable.</p>\n<p>Besides that the most notable change are performance improvements which should make fuzzing with Wasmi a tiny bit faster.</p>\n</blockquote>",
        "id": 416523538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705567933
    },
    {
        "content": "<p><strong>Robbepop</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 416523539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705567933
    },
    {
        "content": "<p><strong>Robbepop</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 416523541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705567933
    },
    {
        "content": "<p><strong>Robbepop</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 416523542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705567933
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Currently Wasmtime uses the 2 years old Wasmi version <code>0.20.0</code>.</p>\n<p>Since then Wasmi has improved substantially and added support for new Wasm proposals such as <code>bulk-memory</code>, <code>reference-types</code> and <code>tail-calls</code> which we can now enable.<br>\nWasmi <code>v0.31.0</code> has recently been audited and is used by some large projects, thus is a lot more battle tested than the previous <code>v0.20.0</code>.</p>\n<p>Besides that the most notable change are performance improvements which should make fuzzing with Wasmi a tiny bit faster.</p>\n</blockquote>",
        "id": 416523925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705568056
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Currently Wasmtime uses the 2 years old Wasmi version <code>0.20.0</code>.</p>\n<p>Since then Wasmi has improved substantially and added support for new Wasm proposals such as <code>bulk-memory</code>, <code>reference-types</code> and <code>tail-calls</code> which we can now enable.<br>\nWasmi <code>v0.31.0</code> has recently been audited and is used by some large projects, thus is a lot more battle tested than the previous <code>v0.20.0</code>.</p>\n<p>Besides that the most notable change are performance improvements which should make fuzzing with Wasmi a tiny bit faster.</p>\n<p>Look into the future: Since roughly half a year I am working on the next major Wasmi version <code>v0.32.0</code> which is a complete rewrite of the Wasmi executor featuring a much more powerful register-machine execution model. I hope that it becomes stable enough for use soon to provide it as fuzzing oracle to Wasmtime. Due to the changes we refer to the new Wasmi version as Wasmi (register) and the old Wasmi as Wasmi (stack). It might even make sense to have both versions as oracles at the same time because they have very different strengths.</p>\n</blockquote>",
        "id": 416524343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705568202
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Currently Wasmtime uses the 2 years old Wasmi version <code>0.20.0</code>.</p>\n<p>Since then Wasmi has improved substantially and added support for new Wasm proposals such as <code>bulk-memory</code>, <code>reference-types</code> and <code>tail-calls</code> which we can now enable.<br>\nWasmi <code>v0.31.0</code> has recently been audited and is used by some large projects, thus is a lot more battle tested than the previous <code>v0.20.0</code>.</p>\n<p>Besides that the most notable change are performance improvements which should make fuzzing with Wasmi a tiny bit faster.</p>\n<p>Look into the future: Since roughly half a year I am working on the next major Wasmi version <code>v0.32.0</code> which is a complete rewrite of the Wasmi executor featuring a much more powerful register-machine execution model and optional lazy compilation &amp; validation. I hope that it becomes stable enough for use soon to provide it as fuzzing oracle to Wasmtime. Due to the changes we refer to the new Wasmi version as Wasmi (register) and the old Wasmi as Wasmi (stack). It might even make sense to have both versions as oracles at the same time because they have very different strengths.</p>\n</blockquote>",
        "id": 416524419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705568229
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1898057710\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>With respect to <code>cargo vet</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">wasmi</span>:<span class=\"mf\">0.31.1</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"safe-to-run\"</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">wasmi_arena</span>:<span class=\"mf\">0.4.0</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"safe-to-run\"</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">wasmi_core</span>:<span class=\"mf\">0.13.0</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"safe-to-run\"</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">wasmparser</span><span class=\"o\">-</span><span class=\"n\">nostd</span>:<span class=\"mf\">0.100.1</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"safe-to-run\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>All those crates are maintained by Wasmi maintainers (me).</p>\n</blockquote>",
        "id": 416524781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705568317
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1898233737\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 416544300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705574699
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 416576217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705586229
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 416579016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705587032
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1898554884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>I am a bit unsure about the new <code>wasmi::Config</code> handling in <code>diff_wasmi.rs</code> with the mutable <code>Config</code> parameter in <code>WasmiEngine::new</code>.</p>\n</blockquote>",
        "id": 416579289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705587123
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1898554884\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>I am a bit unsure about the new <code>wasmi::Config</code> handling in <code>diff_wasmi.rs</code> with the mutable <code>Config</code> parameter in <code>WasmiEngine::new</code>. Review &amp; feedback required.</p>\n</blockquote>",
        "id": 416579355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705587137
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1898554884\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>I am a bit unsure about the new <code>wasmi::Config</code> handling in <code>diff_wasmi.rs</code> with the mutable <code>Config</code> parameter in <code>WasmiEngine::new</code>. Review &amp; feedback required.<br>\nIn the changes I made Wasmi now better respects the input <code>config</code> and adjusts its <code>wasmi::Config</code> to it as much as possible and sets the other <code>config</code> flags to <code>false</code> in case Wasmi does not support that feature, yet.</p>\n</blockquote>",
        "id": 416579471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705587180
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#pullrequestreview-1830174300\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>",
        "id": 416613375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705597386
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#pullrequestreview-1830174300\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>",
        "id": 416613376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705597386
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#discussion_r1457741400\">PR review comment</a>:</p>\n<blockquote>\n<p>This all looks right to me, thanks! The intention here is that the differential engine (wasmi here) both configures itself based on <code>Config</code> but additionally updates <code>Config</code> with anything it can't support. So for example simd is disabled here unconditionally in <code>Config</code> because wasmi doesn't support it, but you're doing the right thing otherwise where features are conditionally enabled in wasmi depending on <code>Config</code> for those that wasmi supports.</p>\n<p>Two minor comments here:</p>\n<ul>\n<li>This is setting <code>threads_enabled = false</code> twice</li>\n<li>The <code>min_tables</code> and <code>max_tables</code> handling can probably be removed if wasmi supports reference types which is where multiple tables were added.</li>\n</ul>\n<p>If you'd like, it might be good to leave some comments here too along the lines of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// force generated modules to never have features that wasmi doesn't support</span>\n</code></pre></div>\n<p>or something like that</p>\n</blockquote>",
        "id": 416613377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705597386
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 416632085,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705604522
    },
    {
        "content": "<p>Robbepop submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#pullrequestreview-1830379172\">PR review</a>.</p>",
        "id": 416632155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705604536
    },
    {
        "content": "<p>Robbepop created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#discussion_r1457867685\">PR review comment</a>:</p>\n<blockquote>\n<p>I have implemented your code review suggestions.</p>\n</blockquote>",
        "id": 416632156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705604536
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1899048505\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>\n<p>Wasmi <code>v0.31.0</code> is no longer in development so I am not going to support the standard <code>wasmparser</code> for it, however, I am going to think about the implications doing so for future Wasmi versions starting from <code>v0.32.0</code> once released. Since Wasmi already has a <code>std</code> crate feature it might be simple to just use <code>wasmparser</code> if it is enabled and use <code>wasmparser-nostd</code> otherwise.</p>\n</blockquote>",
        "id": 416632345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705604611
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1899048505\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>\n<p>Wasmi <code>v0.31.0</code> is no longer in development so I am not going to support the standard <code>wasmparser</code> for it, however, I am going to think about the implications doing so for future Wasmi versions starting from <code>v0.32.0</code> once released. Since Wasmi already has a <code>std</code> crate feature it might be simple to just use <code>wasmparser</code> if it is enabled and use <code>wasmparser-nostd</code> otherwise.</p>\n<p>From Wasmi's perspective though it would obviously the most ideal solution to simply have <code>no_std</code> support in the <code>wasmparser</code> crate.</p>\n</blockquote>",
        "id": 416632500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705604659
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1899048505\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>\n<p>Wasmi <code>v0.31.0</code> is no longer in development so I am not going to support the standard <code>wasmparser</code> for it, however, I am going to think about the implications doing so for future Wasmi versions starting from <code>v0.32.0</code> once released. Since Wasmi already has a <code>std</code> crate feature it might be simple to just use <code>wasmparser</code> if it is enabled and use <code>wasmparser-nostd</code> otherwise.</p>\n<p>From Wasmi's perspective though it would obviously the most ideal solution to simply have <code>no_std</code> support in the <code>wasmparser</code> crate. Maintaining the <code>wasmparser_nostd</code> fork is okay but not perfect for synchronization.</p>\n</blockquote>",
        "id": 416632550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705604683
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1899048505\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>\n<p>Wasmi <code>v0.31.0</code> is no longer in development so I am not going to support the standard <code>wasmparser</code> for it, however, I am going to think about the implications doing so for future Wasmi versions starting from <code>v0.32.0</code> once released. Since Wasmi already has a <code>std</code> crate feature it might be simple to just use <code>wasmparser</code> if it is enabled and use <code>wasmparser-nostd</code> otherwise.</p>\n<p>I have have a wishful thinking for <code>no_std</code> support in the official <code>wasmparser</code> crate one day. :)</p>\n</blockquote>",
        "id": 416634150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705605324
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1899048505\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks!</p>\n<p>To avoid a new vet of <code>wasmparser-nostd</code> would it be possible to conditionally build wasmi with the official <code>wasmparser</code> crate instead? That way we could get that auto-vetted.</p>\n</blockquote>\n<p>Wasmi <code>v0.31.0</code> is no longer in development so I am not going to support the standard <code>wasmparser</code> for it, however, I am going to think about the implications doing so for future Wasmi versions starting from <code>v0.32.0</code> once released. Since Wasmi already has a <code>std</code> crate feature it might be simple to just use <code>wasmparser</code> if it is enabled and use <code>wasmparser-nostd</code> otherwise.</p>\n<p>I have a wishful thinking for <code>no_std</code> support in the official <code>wasmparser</code> crate one day. :)</p>\n</blockquote>",
        "id": 416813006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705680931
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1900759987\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Ah ok, in that case this is going to have to hold off until one of us gets a chance to vet the dependencies here. I'm stretched a bit thin at the moment so it may be a bit before I can personally get to this (but others can of course beat me to it)</p>\n</blockquote>",
        "id": 416822502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705683233
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1900774601\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Please tell me if and how I can help with vetting. :)</p>\n</blockquote>",
        "id": 416824909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705683836
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904751808\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>",
        "id": 417309820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705955291
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. I never intended this to be a long lasting effort but here we are.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There are a good deal of unit, integration, e2e and fuzz tests.<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies some many months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much less complex than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417318097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705958754
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. I never intended this to be a long lasting effort but here we are.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There are a good deal of unit, integration, e2e and fuzz tests.<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much less complex than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417321757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705960212
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. I never intended this to be a long lasting effort but here we are.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There is a good deal of tests. (unit, integration, e2e, fuzz)<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much less complex than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417322113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705960344
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. I never intended this to be a long lasting effort but here we are. In that spirit I think it even lacks tests but <code>wasmparser-nostd</code> passes the <code>wasmparser</code> testsuite so I thought it would be good enough as temporary solution at that time.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There is a good deal of tests. (unit, integration, e2e, fuzz)<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much less complex than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417322335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705960437
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. Focus was to write it as simple as possible since I never intended this to be a long lasting effort but here we are. In that spirit I think it even lacks tests but <code>wasmparser-nostd</code> passes the <code>wasmparser</code> testsuite so I thought it would be good enough as temporary solution at that time.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There is a good deal of tests. (unit, integration, e2e, fuzz)<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much less complex than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417322473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705960485
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. Focus was to write it as simple as possible since I never intended this to be a long lasting effort but here we are. In that spirit I think it even lacks tests but <code>wasmparser-nostd</code> passes the <code>wasmparser</code> testsuite so I thought it would be good enough as temporary solution at that time.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There is a good deal of tests. (unit, integration, e2e, fuzz) (ignoring the <code>indexmap-nostd</code> crate)<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much less complex than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417323551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705960886
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. Focus was to write it as simple as possible since I never intended this to be a long lasting effort but here we are. In that spirit I think it even lacks tests but <code>wasmparser-nostd</code> passes the <code>wasmparser</code> testsuite so I thought it would be good enough as temporary solution at that time.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There is a good deal of tests. (unit, integration, e2e, fuzz) (ignoring the <code>indexmap-nostd</code> crate)<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.0</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.0</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.0</code> is much simpler than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417323672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705960928
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904846331\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>Thanks for catching this bug! The code is quite old and hasn't seen a lot of love lately.</p>\n<blockquote>\n<p>Otherwise the <code>wasmparser-nostd</code> diff is quite large or larger than I remember from the <code>wasmparser</code> diff, so diffing those directories is requiring a good deal of time to go through to verify it's the same. Additionally I haven't even gotten to <code>wasmi</code> yet which glancing at it is quite large and additionally contains a good deal of <code>unsafe</code> code to check.</p>\n</blockquote>\n<p>The unfortunate truth is that especially with the component model a lot of very <code>no_std</code> unfriendly abstractions such as the <code>IndexMap</code> has been added which required me to come up with my own <code>no_std</code> friendly version of it. Focus was to write it as simple as possible since I never intended this to be a long lasting effort but here we are. In that spirit I think it even lacks tests but <code>wasmparser-nostd</code> passes the <code>wasmparser</code> testsuite so I thought it would be good enough as temporary solution at that time.</p>\n<blockquote>\n<p>Currently though wasmi is only used for fuzzing so it doesn't necessarily need a thorough review or strict vetting. Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>To provide you with a bit of transparency here about the state of Wasmi:</p>\n<ul>\n<li>\n<p>Cons:</p>\n<p>- I work on the project alone.<br>\n  - There are pretty much no code reviews due to above point.<br>\n  - There is a fair amount of <code>unsafe</code> code use, but mostly in the Wasmi bytecode executor.</p>\n</li>\n<li>\n<p>Pros:</p>\n<p>- There is a good deal of tests. (unit, integration, e2e, fuzz) (ignoring the <code>indexmap-nostd</code> crate)<br>\n  - We do have a very extensive CI (incl. <code>miri</code>)<br>\n  - Wasmi <code>v0.31.1</code> is already used in production by different companies for some months.<br>\n  - Wasmi <code>v0.31.1</code> has received a security audit by SRLabs.<br>\n  - Wasmi <code>0.31.1</code> is much simpler than the Wasmi <code>v0.32.0-beta.n</code> (on <code>master</code>).<br>\n</p>\n</li>\n</ul>\n</blockquote>",
        "id": 417323952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705961057
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 417324270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705961208
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904909201\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>I just made this use Wasmi <code>v0.31.1</code> instead of <code>v0.31.0</code> which is more explicit. Note that <code>v0.31.0</code> got yanked some time ago.</p>\n</blockquote>",
        "id": 417324367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705961247
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1904909201\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>I just made this use Wasmi <code>v0.31.1</code> instead of <code>v0.31.0</code> which is more explicit. Note that <code>v0.31.0</code> got yanked some time ago so even previously we already used <code>0.31.1</code>.</p>\n</blockquote>",
        "id": 417425640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706009340
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1906624052\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Do others have thoughts on whether we should add exemptions for this dependency as opposed to vetting it?</p>\n</blockquote>\n<p>I'm happy with adding a cargo vet exemption for <code>wasmi 0.31.1</code> which notes that its only intended to be used in the context of testing. I don't think there is any real benefit to our project to have a higher bar than wasmi already meets for the sake of a fuzzing oracle.</p>\n</blockquote>",
        "id": 417500212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706032915
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1906733756\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm happy with adding a cargo vet exemption for <code>wasmi 0.31.1</code> which notes that its only intended to be used in the context of testing. I don't think there is any real benefit to our project to have a higher bar than wasmi already meets for the sake of a fuzzing oracle.</p>\n</blockquote>\n<p>Agreed.</p>\n</blockquote>",
        "id": 417509960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706036388
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1908042701\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>btw. I just published a new <code>wasmi_arena v0.4.1</code> and yanked <code>v0.4.0</code> with the unsoundness fix. (<a href=\"https://crates.io/crates/wasmi_arena/0.4.1\">https://crates.io/crates/wasmi_arena/0.4.1</a>)</p>\n</blockquote>",
        "id": 417636122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706099823
    },
    {
        "content": "<p>Robbepop edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1908042701\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Reading over some code I think that <a href=\"https://github.com/paritytech/wasmi/blob/27def282b06613e770d0ab96de88b9909973a12b/crates/arena/src/component_vec.rs#L18-L19\">this impl</a> is not sound as it's supposed to be <code>T: Sync</code>. Additionally though I don't think you should need the <code>unsafe impl</code> at all. You can try changing the <code>PhantomData</code> to either <code>fn() -&gt; Idx</code> or <code>fn(Idx)</code> I think as one of them might require the impl and one might not.</p>\n</blockquote>\n<p>btw. I just published a new <code>wasmi_arena v0.4.1</code> patch release and yanked <code>v0.4.0</code>.</p>\n</blockquote>",
        "id": 417636213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706099864
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1908482885\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Ok I've posted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7810\">https://github.com/bytecodealliance/wasmtime/pull/7810</a> with new vet metadata. If you rebase this PR on top of that once it lands should be good to go</p>\n</blockquote>",
        "id": 417682230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706113608
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 417704205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706121182
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1908710880\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Something went terribly wrong with the rebase ... let me investigate ...</p>\n</blockquote>",
        "id": 417705060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706121508
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 417705734,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706121765
    },
    {
        "content": "<p>Robbepop deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1908710880\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<p>Something went terribly wrong with the rebase ... let me investigate ...</p>\n</blockquote>",
        "id": 417705795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706121793
    },
    {
        "content": "<p>Robbepop updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 417706403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706122019
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#pullrequestreview-1842188192\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the patience while we figure out the vetting, and thanks again for helping us out with the update!</p>\n</blockquote>",
        "id": 417711436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706123946
    },
    {
        "content": "<p>Robbepop <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791#issuecomment-1908787639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for the patience while we figure out the vetting, and thanks again for helping us out with the update!</p>\n</blockquote>\n<p>Happy to help and thanks for having Wasmi as fuzzing oracle! :)</p>\n</blockquote>",
        "id": 417713520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706124763
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7791\">PR #7791</a>.</p>",
        "id": 417955483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706126927
    }
]