[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624\">PR #1624</a> from <code>fix-segfault</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit fixes a known but in Wasmtime where an instance could still<br>\nbe used after it was freed. Unfortunately the fix here is a bit of a<br>\nhammer, but it's the best that we can do for now. The changes made in<br>\nthis commit are:</p>\n<ul>\n<li>\n<p>A <code>Store</code> now stores all <code>InstanceHandle</code> objects it ever creates.<br>\n  This keeps all instances alive unconditionally (along with all host<br>\n  functions and such) until the <code>Store</code> is itself dropped. Note that a<br>\n<code>Store</code> is reference counted so basically everything has to be dropped<br>\n  to drop anything, there's no longer any partial deallocation of instances.</p>\n</li>\n<li>\n<p>The <code>InstanceHandle</code> type's own reference counting has been removed.<br>\n  This is largely redundant with what's already happening in <code>Store</code>, so<br>\n  there's no need to manage two reference counts.</p>\n</li>\n<li>\n<p>Each <code>InstanceHandle</code> no longer tracks its dependencies in terms of<br>\n  instance handles. This set was actually inaccurate due to dynamic<br>\n  updates to tables and such, so we needed to revamp it anyway.</p>\n</li>\n<li>\n<p>Initialization of an <code>InstanceHandle</code> is now deferred until after<br>\n<code>InstanceHandle::new</code>. This allows storing the <code>InstanceHandle</code> before<br>\n  side-effectful initialization, such as copying element segments or<br>\n  running the start function, to ensure that regardless of the result of<br>\n  instantiation the underlying <code>InstanceHandle</code> is still available to<br>\n  persist in storage.</p>\n</li>\n</ul>\n<p>Overall this should fix a known possible way to safely segfault Wasmtime<br>\ntoday (yay!) and it should also fix some flaikness I've seen on CI.<br>\nTurns out one of the spec tests<br>\n(bulk-memory-operations/partial-init-table-segment.wast) exercises this<br>\nfunctionality and we were hitting sporating use-after-free, but only on<br>\nWindows.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 195633189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588111233
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624\">PR #1624</a> from <code>fix-segfault</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit fixes a known but in Wasmtime where an instance could still<br>\nbe used after it was freed. Unfortunately the fix here is a bit of a<br>\nhammer, but it's the best that we can do for now. The changes made in<br>\nthis commit are:</p>\n<ul>\n<li>\n<p>A <code>Store</code> now stores all <code>InstanceHandle</code> objects it ever creates.<br>\n  This keeps all instances alive unconditionally (along with all host<br>\n  functions and such) until the <code>Store</code> is itself dropped. Note that a<br>\n<code>Store</code> is reference counted so basically everything has to be dropped<br>\n  to drop anything, there's no longer any partial deallocation of instances.</p>\n</li>\n<li>\n<p>The <code>InstanceHandle</code> type's own reference counting has been removed.<br>\n  This is largely redundant with what's already happening in <code>Store</code>, so<br>\n  there's no need to manage two reference counts.</p>\n</li>\n<li>\n<p>Each <code>InstanceHandle</code> no longer tracks its dependencies in terms of<br>\n  instance handles. This set was actually inaccurate due to dynamic<br>\n  updates to tables and such, so we needed to revamp it anyway.</p>\n</li>\n<li>\n<p>Initialization of an <code>InstanceHandle</code> is now deferred until after<br>\n<code>InstanceHandle::new</code>. This allows storing the <code>InstanceHandle</code> before<br>\n  side-effectful initialization, such as copying element segments or<br>\n  running the start function, to ensure that regardless of the result of<br>\n  instantiation the underlying <code>InstanceHandle</code> is still available to<br>\n  persist in storage.</p>\n</li>\n</ul>\n<p>Overall this should fix a known possible way to safely segfault Wasmtime<br>\ntoday (yay!) and it should also fix some flaikness I've seen on CI.<br>\nTurns out one of the spec tests<br>\n(bulk-memory-operations/partial-init-table-segment.wast) exercises this<br>\nfunctionality and we were hitting sporating use-after-free, but only on<br>\nWindows.</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a></p>\n</blockquote>",
        "id": 195633245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588111274
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624\">PR #1624</a> from <code>fix-segfault</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit fixes a known but in Wasmtime where an instance could still<br>\nbe used after it was freed. Unfortunately the fix here is a bit of a<br>\nhammer, but it's the best that we can do for now. The changes made in<br>\nthis commit are:</p>\n<ul>\n<li>\n<p>A <code>Store</code> now stores all <code>InstanceHandle</code> objects it ever creates.<br>\n  This keeps all instances alive unconditionally (along with all host<br>\n  functions and such) until the <code>Store</code> is itself dropped. Note that a<br>\n<code>Store</code> is reference counted so basically everything has to be dropped<br>\n  to drop anything, there's no longer any partial deallocation of instances.</p>\n</li>\n<li>\n<p>The <code>InstanceHandle</code> type's own reference counting has been removed.<br>\n  This is largely redundant with what's already happening in <code>Store</code>, so<br>\n  there's no need to manage two reference counts.</p>\n</li>\n<li>\n<p>Each <code>InstanceHandle</code> no longer tracks its dependencies in terms of<br>\n  instance handles. This set was actually inaccurate due to dynamic<br>\n  updates to tables and such, so we needed to revamp it anyway.</p>\n</li>\n<li>\n<p>Initialization of an <code>InstanceHandle</code> is now deferred until after<br>\n<code>InstanceHandle::new</code>. This allows storing the <code>InstanceHandle</code> before<br>\n  side-effectful initialization, such as copying element segments or<br>\n  running the start function, to ensure that regardless of the result of<br>\n  instantiation the underlying <code>InstanceHandle</code> is still available to<br>\n  persist in storage.</p>\n</li>\n</ul>\n<p>Overall this should fix a known possible way to safely segfault Wasmtime<br>\ntoday (yay!) and it should also fix some flaikness I've seen on CI.<br>\nTurns out one of the spec tests<br>\n(bulk-memory-operations/partial-init-table-segment.wast) exercises this<br>\nfunctionality and we were hitting sporating use-after-free, but only on<br>\nWindows.</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a><br>\nCloses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\" title=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></p>\n</blockquote>",
        "id": 195633290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588111295
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624\">PR #1624</a> from <code>fix-segfault</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit fixes a known but in Wasmtime where an instance could still<br>\nbe used after it was freed. Unfortunately the fix here is a bit of a<br>\nhammer, but it's the best that we can do for now. The changes made in<br>\nthis commit are:</p>\n<ul>\n<li>\n<p>A <code>Store</code> now stores all <code>InstanceHandle</code> objects it ever creates.<br>\n  This keeps all instances alive unconditionally (along with all host<br>\n  functions and such) until the <code>Store</code> is itself dropped. Note that a<br>\n<code>Store</code> is reference counted so basically everything has to be dropped<br>\n  to drop anything, there's no longer any partial deallocation of instances.</p>\n</li>\n<li>\n<p>The <code>InstanceHandle</code> type's own reference counting has been removed.<br>\n  This is largely redundant with what's already happening in <code>Store</code>, so<br>\n  there's no need to manage two reference counts.</p>\n</li>\n<li>\n<p>Each <code>InstanceHandle</code> no longer tracks its dependencies in terms of<br>\n  instance handles. This set was actually inaccurate due to dynamic<br>\n  updates to tables and such, so we needed to revamp it anyway.</p>\n</li>\n<li>\n<p>Initialization of an <code>InstanceHandle</code> is now deferred until after<br>\n<code>InstanceHandle::new</code>. This allows storing the <code>InstanceHandle</code> before<br>\n  side-effectful initialization, such as copying element segments or<br>\n  running the start function, to ensure that regardless of the result of<br>\n  instantiation the underlying <code>InstanceHandle</code> is still available to<br>\n  persist in storage.</p>\n</li>\n</ul>\n<p>Overall this should fix a known possible way to safely segfault Wasmtime<br>\ntoday (yay!) and it should also fix some flaikness I've seen on CI.<br>\nTurns out one of the spec tests<br>\n(bulk-memory-operations/partial-init-table-segment.wast) exercises this<br>\nfunctionality and we were hitting sporating use-after-free, but only on<br>\nWindows.</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a><br>\nCloses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\" title=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></p>\n</blockquote>",
        "id": 195634119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588111675
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624#pullrequestreview-402281100\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624#pullrequestreview-402281100\">PR Review</a>.</p>",
        "id": 195646060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588120106
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624#pullrequestreview-402281100\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624#pullrequestreview-402281100\">PR Review</a>.</p>",
        "id": 195646061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588120106
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624#discussion_r416983943\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624#discussion_r416983943\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Typo: <code>InstnaceHandle</code></p>\n</blockquote>",
        "id": 195646062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588120106
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624#discussion_r416995856\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624#discussion_r416995856\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this meant to be exported from the crate? It doesn't seem to be in <a href=\"http://lib.rs\" title=\"http://lib.rs\">lib.rs</a>. If not, can this be <code>pub(crate)</code>?</p>\n</blockquote>",
        "id": 195646063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588120106
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624#discussion_r417000725\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624#discussion_r417000725\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could you add a brief comment here mentioning that the <code>Weak</code> is just to break a reference cycle, and that it's always meant to be upgradable in practice?</p>\n</blockquote>",
        "id": 195646064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588120106
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624\">PR #1624</a> from <code>fix-segfault</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit fixes a known but in Wasmtime where an instance could still<br>\nbe used after it was freed. Unfortunately the fix here is a bit of a<br>\nhammer, but it's the best that we can do for now. The changes made in<br>\nthis commit are:</p>\n<ul>\n<li>\n<p>A <code>Store</code> now stores all <code>InstanceHandle</code> objects it ever creates.<br>\n  This keeps all instances alive unconditionally (along with all host<br>\n  functions and such) until the <code>Store</code> is itself dropped. Note that a<br>\n<code>Store</code> is reference counted so basically everything has to be dropped<br>\n  to drop anything, there's no longer any partial deallocation of instances.</p>\n</li>\n<li>\n<p>The <code>InstanceHandle</code> type's own reference counting has been removed.<br>\n  This is largely redundant with what's already happening in <code>Store</code>, so<br>\n  there's no need to manage two reference counts.</p>\n</li>\n<li>\n<p>Each <code>InstanceHandle</code> no longer tracks its dependencies in terms of<br>\n  instance handles. This set was actually inaccurate due to dynamic<br>\n  updates to tables and such, so we needed to revamp it anyway.</p>\n</li>\n<li>\n<p>Initialization of an <code>InstanceHandle</code> is now deferred until after<br>\n<code>InstanceHandle::new</code>. This allows storing the <code>InstanceHandle</code> before<br>\n  side-effectful initialization, such as copying element segments or<br>\n  running the start function, to ensure that regardless of the result of<br>\n  instantiation the underlying <code>InstanceHandle</code> is still available to<br>\n  persist in storage.</p>\n</li>\n</ul>\n<p>Overall this should fix a known possible way to safely segfault Wasmtime<br>\ntoday (yay!) and it should also fix some flaikness I've seen on CI.<br>\nTurns out one of the spec tests<br>\n(bulk-memory-operations/partial-init-table-segment.wast) exercises this<br>\nfunctionality and we were hitting sporating use-after-free, but only on<br>\nWindows.</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/777\" title=\"https://github.com/bytecodealliance/wasmtime/issues/777\">https://github.com/bytecodealliance/wasmtime/issues/777</a><br>\nCloses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/960\" title=\"https://github.com/bytecodealliance/wasmtime/issues/960\">https://github.com/bytecodealliance/wasmtime/issues/960</a></p>\n</blockquote>",
        "id": 195735303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588177315
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1624\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1624\">PR #1624</a>.</p>",
        "id": 195746104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588182472
    }
]