[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6377#issuecomment-1548282466\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6377\">issue #6377</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 358531224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684172703
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6377#issuecomment-1550593767\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6377\">issue #6377</a>:</p>\n<blockquote>\n<p>I've done some further investigation of this with @elliottt. We've got a clif function which before this commit took 15 seconds to codegen and after this commit took ~3 seconds. Profiling showed that virtually all time was spent in <a href=\"https://github.com/bytecodealliance/regalloc2/blob/v0.8.1/src/ion/merge.rs#L222-L226\">this loop</a>. We worked together to develop a better means of merging sets there which reduced the compilation time of the test case in question, both before and after this commit, to ~0.2s. It turns out though that this new means isn't actually necessary since <a href=\"https://github.com/bytecodealliance/regalloc2/blob/7662cd03a68cca771ced56fc6a9a0138716c306b/src/ion/merge.rs#L216-L221\">the code has already changed on <code>main</code></a>! This means that relanding this should be a \"simple\" matter of updating regalloc2 first and then this can re-land.</p>\n<p>This bodes well in my mind in that we were pretty surprised that this was the root cause of the regression. Tickling regalloc2 slightly different though makes a lot of sense and it made what was arguably already a pathological case even worse. Fixing the underlying pathology should provide some nice benefits!</p>\n</blockquote>",
        "id": 358882444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684290193
    }
]