[
    {
        "content": "<p>Kmeakin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a> from <code>Kmeakin:km/isle/int-types</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9593\">https://github.com/bytecodealliance/wasmtime/pull/9593</a>, adding all the built-in integer types (<code>u8</code> .. <code>u128</code>, <code>i8</code> .. <code>i128</code>).</p>\n<p>Integer literal expressions and patterns are still allowed to type-check against primitive types, because there are a lot of places in the lowering/optimization code that uses <code>(type Foo (primitive Foo))</code> where <code>Foo</code> is declared as a type alias of an integer type in Rust code. Not sure what to do about this. Perhaps it would be clearer to rename \"primitive\" types to \"opaque\" or \"extern\" types (and also have a mechanism for declaring transparent type aliases in ISLE)?</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">https://github.com/bytecodealliance/wasmtime/issues/5431</a></p>\n</blockquote>",
        "id": 482516654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731635454
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 482516656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731635455
    },
    {
        "content": "<p><strong>Kmeakin</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 482516657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731635455
    },
    {
        "content": "<p>Kmeakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>:</p>\n<blockquote>\n<p>Follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9593\">https://github.com/bytecodealliance/wasmtime/pull/9593</a>, adding all the built-in integer types (<code>u8</code> .. <code>u128</code>, <code>i8</code> .. <code>i128</code> plus <code>usize</code> and <code>isize</code>).</p>\n<p>Integer literal expressions and patterns are still allowed to type-check against primitive types, because there are a lot of places in the lowering/optimization code that uses <code>(type Foo (primitive Foo))</code> where <code>Foo</code> is declared as a type alias of an integer type in Rust code. Not sure what to do about this. Perhaps it would be clearer to rename \"primitive\" types to \"opaque\" or \"extern\" types (and also have a mechanism for declaring transparent type aliases in ISLE)?</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">https://github.com/bytecodealliance/wasmtime/issues/5431</a></p>\n</blockquote>",
        "id": 482516703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731635487
    },
    {
        "content": "<p>Kmeakin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>:</p>\n<blockquote>\n<p>Follow up to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9593\">https://github.com/bytecodealliance/wasmtime/pull/9593</a>, adding all the built-in integer types (<code>u8</code> .. <code>u128</code>, <code>i8</code> .. <code>i128</code> plus <code>usize</code> and <code>isize</code>).</p>\n<p>Integer literal expressions and patterns are still allowed to type-check against primitive types, because there are a lot of places in the lowering/optimization code that uses <code>(type Foo (primitive Foo))</code> where <code>Foo</code> is declared as a type alias of an integer type in Rust code. Not sure what to do about this. Perhaps it would be clearer to rename \"primitive\" types to \"opaque\" or \"extern\" types (and also have a mechanism for declaring transparent type aliases in ISLE)?</p>\n<p>Closes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5431\">https://github.com/bytecodealliance/wasmtime/issues/5431</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3573\">https://github.com/bytecodealliance/wasmtime/issues/3573</a></p>\n</blockquote>",
        "id": 482516899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731635640
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 482518183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731636325
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610#issuecomment-2477858884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 482523233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731639705
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610#pullrequestreview-2437883235\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Some comments below but nothing major. This is a nice refactor and makes the language semantically a little cleaner; I like it.</p>\n</blockquote>",
        "id": 482550578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731657131
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610#discussion_r1843321054\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure I like this rename -- semantically I think of interning as the action of getting the existing ID, or creating a new one -- that is, \"to intern\" covers both cases; and <code>intern_mut</code> indicates we're permitting new cases to update the table, vs. <code>intern</code> that only looks up existing cases.</p>\n<p>(To see this another way, consider <code>intern</code> below -- it should be renamed to something else if we take this rename, because this rename implies that adding to the table is the \"intern\" bit, which is exactly the bit that the non-mut version below does not do.)</p>\n</blockquote>",
        "id": 482550579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731657131
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610#discussion_r1843316019\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we write a <code>match</code> with explicit arms for all types here? I'd prefer that so we are forced to think about any new types we add explicitly. The pattern as written makes that easy to miss...</p>\n</blockquote>",
        "id": 482550580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731657131
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 482889348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731871656
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610#pullrequestreview-2446534099\">PR review</a>.</p>",
        "id": 483342650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732046272
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610#issuecomment-2486629388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>:</p>\n<blockquote>\n<p>Something is broken in the build in CI; once it's green I'm happy to merge.</p>\n</blockquote>",
        "id": 483342751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732046306
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 484813574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732749509
    },
    {
        "content": "<p>Kmeakin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 485100690,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732887389
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9610\">PR #9610</a>.</p>",
        "id": 485446127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733027245
    }
]