[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190485691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584092490
    },
    {
        "content": "<p>kubkon assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190485692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584092490
    },
    {
        "content": "<p>kubkon assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190485693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584092490
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190485694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584092490
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190485695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584092490
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190485696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584092490
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598794770\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598794770\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a>:</p>\n<blockquote>\n<p>In an application which opens and closes many handles, we'll want to be able to reuse handle values. To support this, we'll need to move away from \"add one to a handle\" and toward \"ask the context for a free handle\", and have the context reuse closed handles.</p>\n</blockquote>",
        "id": 190520462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584115230
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598804250\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598804250\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a>:</p>\n<blockquote>\n<p>I'd imagine the same as @sunfishcode where it seems like the underlying code should best be changed to something that doesn't require this sort of addition. It sounds like an <code>FdSet</code> which has something like an <code>allocate</code> and <code>deallocate</code> method which tracks all the indices is probably what's best here?</p>\n</blockquote>",
        "id": 190523364,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584116499
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598874940\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598874940\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a>:</p>\n<blockquote>\n<p>I’m glad I run it past both of you! It makes perfect sense for the context to provide next available handle.</p>\n<p>Since this is essentially required to swap <code>wig</code> for <code>wiggle</code>, I’m gonna provide a draft PR of how I’d see this work and we can carry on our discussion there. Does that make sense to y’all?</p>\n</blockquote>",
        "id": 190543817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584127007
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598877105\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-598877105\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a>:</p>\n<blockquote>\n<p>Makes sense!</p>\n</blockquote>",
        "id": 190544515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584127397
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-600337589\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308#issuecomment-600337589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a>:</p>\n<blockquote>\n<p>I’m gonna go ahead and close this one since we’ve solved the issue in #1329.</p>\n</blockquote>",
        "id": 190920802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584485271
    },
    {
        "content": "<p>kubkon closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1308\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1308\">Issue #1308</a> (assigned to pchickey):</p>\n<blockquote>\n<p>As in the title, pre-<code>wiggle</code>, we didn't really deal with a concept of WASI handle, and file descriptor was simply a type alias. Now, with <code>wiggle</code>, we can and should handle \"handles\" properly.</p>\n<p>My question now is, how should we obtain a handle from another one in <code>wasi-common</code>? Until now (when <code>Fd</code> was a simple type alias) we did:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fd</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Since <code>Fd</code> is now a \"supertype\", it's no longer that obvious what to do. My initial thought was to provide an unsafe accessor to the underlying value in <code>wiggle</code>, i.e., something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Fd</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Fd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Then, we could re-use most of the code in <code>wasi-common</code> to obtain a new handle as follows:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">old_fd</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">checked_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Fd</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Overflow</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I'm wondering though if you guys reckon there is a better, cleaner way of dealing with this? Perhaps a method on the handle type, <code>next() -&gt; Self</code> say, that will return another valid handle. But then, I guess it won't necessarily possess a notion of valid means without having access to the current WASI context object, right?</p>\n<p>cc @alexcrichton I thought might be of interest for you as well.</p>\n</blockquote>",
        "id": 190920803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584485271
    }
]