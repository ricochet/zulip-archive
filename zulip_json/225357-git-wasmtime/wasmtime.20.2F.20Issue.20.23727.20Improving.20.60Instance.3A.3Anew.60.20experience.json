[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/727#issuecomment-602706826\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/727#issuecomment-602706826\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/727\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/727\">Issue #727</a>:</p>\n<blockquote>\n<p>I've posted a draft of this to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1384\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1384\">https://github.com/bytecodealliance/wasmtime/pull/1384</a></p>\n</blockquote>",
        "id": 191498217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584980547
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/727\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/727\">Issue #727</a>:</p>\n<blockquote>\n<p>I think this is a large enough proposal and change that I'd like to split this off of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/708\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/708\">https://github.com/bytecodealliance/wasmtime/issues/708</a>. This issue is specifically about improving the experience of using <code>Instance::new</code>, which currently looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">HostRef</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">HostRef</span><span class=\"o\">&lt;</span><span class=\"n\">Module</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">externs</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Extern</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>After #708 that will instead look like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">externs</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Extern</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Somewhat radically, I would propose that this is actually what we want on <code>Instance</code>! The idea here is that the list of <code>externs</code> is the same length of the list in <code>module.imports()</code>, and <code>externs</code> line up 1:1 with <code>module.imports()</code>.</p>\n<p>Now that being said this is a pretty bad API to use, and doesn't help instantiating things like WASI or dealing with name resolution at all. I think instead I think we should provide an API similar to the following (bikeshedding everything of course):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">builder</span><span class=\"p\">(</span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Module</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">InstanceBuilder</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">InstanceBuilder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">InstanceBuilder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Provide an import by module/name, panics if `module` or `name` is taken</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">Extern</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Hook up an entire instance under the name `module`. Panics if `module` already used</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide_instance</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Instance</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Provides `wasi_unstable` module</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide_wasi_snapshot0</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">config</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">WasiSnapshot0Config</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Provides `wasi_snapshot_preview1` module</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">provide_wasi_snapshot1</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">config</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">WasiSnapshot1Config</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Does all the name resolution.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Instance</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Generally the idea here is that we keep <code>Instance::new</code> as the \"low level\" API of instantiating a module. That's for use when name resolution won't cut it for one reason or another. Something like <code>InstanceBuilder</code> will allow providing lots of extensions, as necessary, for hooking into name resolution and such. That way usage might look like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">provide_wasi_snapshot0</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">provide</span><span class=\"p\">(</span><span class=\"s\">&quot;my-custom-api&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;add&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n</pre></div>\n\n\n<p>The <code>Into&lt;Extern&gt;</code> part may be pretty tricky and still take some frobbing to get right. Super-long term I think it'd be awesome to do something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[wasmtime::host_module]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyWasmHostModule</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function1</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">function2</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// generates ...</span>\n<span class=\"c1\">// trait MyWasmHostModuleExt { ... }</span>\n<span class=\"c1\">// impl MyWasmHostModuleExt for wasmtime::InstanceBuilder {</span>\n<span class=\"c1\">//    fn provide_my_wasm_host_module(&amp;mut self, instance: impl MyWasmHostModule)</span>\n<span class=\"c1\">//       ...</span>\n<span class=\"c1\">//    }</span>\n<span class=\"c1\">// }</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyWasmHostModule</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyStruct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">Instace</span>::<span class=\"n\">builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">provide_my_wasm_host_module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MyStruct</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(but that's naturally much further in the future)</p>\n</blockquote>",
        "id": 191560342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585015353
    }
]