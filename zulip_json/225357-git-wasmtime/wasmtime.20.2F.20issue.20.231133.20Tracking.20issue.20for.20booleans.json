[
    {
        "content": "<p>StackDoubleFlow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133#issuecomment-930651382\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133\">issue #1133</a>:</p>\n<blockquote>\n<p>Is the process complete? <code>bnot</code> now panics on an <code>unimplemented!</code> during lowering.</p>\n</blockquote>",
        "id": 255499262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632962573
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133#issuecomment-930687590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133\">issue #1133</a>:</p>\n<blockquote>\n<p>Yes, we're currently using the new backend. It looks like the lowering for <code>bnot</code> for scalar boolean types <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e989caf33733ae79416ca3573496268aaf23c64b/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L672-L676\">exists for aarch64</a> but <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e989caf33733ae79416ca3573496268aaf23c64b/cranelift/codegen/src/isa/x64/lower.rs#L2375\">not for x86-64</a>; a PR to add this on x86-64 would be a welcome contribution and a good first bug if anyone wants to try this!</p>\n<p>(We still have some holes in supported-operand-types coverage for CLIF that is outside of what the Wasm frontend generates, and the Wasm frontend doesn't use Cranelift-level bools, so that's probably why this still isn't implemented. Sorry about that!)</p>\n</blockquote>",
        "id": 255505166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632967267
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133#issuecomment-932490727\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133\">issue #1133</a>:</p>\n<blockquote>\n<p>And looking at the other items in this issue - currently we do not allow loads and stores of scalar booleans; this has been discussed at length in #3205, together with other aspects of the boolean types.</p>\n</blockquote>",
        "id": 255794417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633115979
    },
    {
        "content": "<p>pnevyk <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133#issuecomment-1000322799\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133\">issue #1133</a>:</p>\n<blockquote>\n<p>It seems that <code>bnot</code> no longer panics on <code>x86_64</code> target since #3592 . I tried to allow <code>x86_64</code> target in this <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a646f685538c1d138d8e553133325d8af72300a9/cranelift/filetests/filetests/runtests/bitops.clif#L5\">runtest</a> and it does not fail, while it fails before the PR.</p>\n<p>Not sure if that was intentional given the ongoing (?) discussion on representation of <code>b1</code>.</p>\n</blockquote>",
        "id": 265918517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1640267862
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133#issuecomment-1118010513\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133\">issue #1133</a>:</p>\n<blockquote>\n<p>Indeed (re: above), bools are fairly well supported now; I think we can probably close this tracking issue. The broader issue of what we want to do about bool representations in #3205 should continue regardless, as we still need to pin down some details of what we want at the CLIF-semantics level.</p>\n</blockquote>",
        "id": 281232354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651705349
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1133\">issue #1133</a>:</p>\n<blockquote>\n<p>See vaguely <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1110\">bytecodealliance/wasmtime#1110</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1045\">bytecodealliance/wasmtime#1045</a>, and <a href=\"https://github.com/jyn514/rcc/issues/92\">https://github.com/jyn514/rcc/issues/92</a>. An easy way to do this might be to convert from bool -&gt; int -&gt; bool and back as suggested in <a href=\"https://github.com/CraneStation/cranelift/issues/922#issuecomment-523931097\">https://github.com/CraneStation/cranelift/issues/922#issuecomment-523931097</a>.</p>\n<ul>\n<li>[ ] bnot<br>\nOnly occurs if you return the value (maybe would also happen for function calls?)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">ebb0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">codegen</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Verifier</span><span class=\"w\"> </span><span class=\"n\">errors</span>:\n\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">inst2</span>: <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">real</span><span class=\"w\"> </span><span class=\"n\">GPR</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">ghost</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>[ ] bnz<br>\nNote: this only occurs when the values are <code>i8</code>, not for <code>i32</code>, and it occurs during codegen, not verification.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">ebb0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brz</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ebb1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"></span>\n\n<span class=\"n\">ebb1</span>:\n    <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">codegen</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Verifier</span><span class=\"w\"> </span><span class=\"n\">errors</span>:\n\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">inst3</span>: <span class=\"nc\">Branch</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>[ ] <code>store</code></li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"n\">ebb0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">fatal</span>: <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">inst2</span>: <span class=\"nc\">has</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">controlling</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">b1</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>[ ] <code>bor</code></li>\n</ul>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n\n<span class=\"n\">ebb0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">fatal</span>: <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">inst2</span>: <span class=\"nc\">has</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">controlling</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">b1</span><span class=\"w\"></span>\n\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">inst4</span>: <span class=\"nc\">has</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">invalid</span><span class=\"w\"> </span><span class=\"n\">controlling</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">b1</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 281232355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651705350
    }
]