[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3883\">PR #3883</a> from <code>call-benchmark</code> to <code>main</code>:</p>\n<blockquote>\n<p>The goal of this new benchmark, <code>call</code>, is to help us measure the<br>\noverhead of both calling into WebAssembly from the host as well as<br>\ncalling the host from WebAssembly. There's lots of various ways to<br>\nmeasure this so this benchmark is a bit large but should hopefully be<br>\npretty thorough. It's expected that this benchmark will rarely be run in<br>\nits entirety but rather only a subset of the benchmarks will be run at<br>\nany one given time.</p>\n<p>Some metrics measured here are:</p>\n<ul>\n<li>\n<p>Typed vs Untyped vs Unchecked - testing the cost of both calling wasm<br>\n  with these various methods as well as having wasm call the host where<br>\n  the host function is defined with these various methods.</p>\n</li>\n<li>\n<p>With and without <code>call_hook</code> - helps to measure the overhead of the<br>\n<code>Store::call_hook</code> API.</p>\n</li>\n<li>\n<p>Synchronous and Asynchronous - measures the overhead of calling into<br>\n  WebAssembly asynchronously (with and without the pooling allocator) in<br>\n  addition to defining host APIs in various methods when wasm is called<br>\n  asynchronously.</p>\n</li>\n</ul>\n<p>Currently all the numbers are as expected, notably:</p>\n<ul>\n<li>Host calling WebAssembly is ~25ns of overhead</li>\n<li>WebAssembly calling the host is ~3ns of overhead</li>\n<li>\n<p>\"Unchecked\" is a bit slower than \"typed\", and \"Untyped\" is slower than<br>\n  unchecked.</p>\n</li>\n<li>\n<p>Asynchronous wasm calling a synchronous host function has ~3ns of<br>\n  overhead (nothing more than usual).</p>\n</li>\n<li>\n<p>Asynchronous calls are much slower, on the order of 2-3us due to<br>\n<code>madvise</code>.</p>\n</li>\n</ul>\n<p>Lots of other fiddly bits that can be measured here, but this will<br>\nhopefully help establish a benchmark through which we can measure in the<br>\nfuture in addition to measuring changes such as #3876</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 274174289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646420526
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3883#pullrequestreview-900606372\">PR review</a>.</p>",
        "id": 274175333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646421009
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3883\">PR #3883</a>.</p>",
        "id": 274187838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646427710
    }
]