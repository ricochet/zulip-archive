[
    {
        "content": "<p>KGrewal1 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a> from <code>KGrewal1:isle-sets_and_hash</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Main aim of this change was to change the behaviour of DisjointSet to early return as opposed to panic when passed <code>x==y</code> and to somewhat gain familiarity myself with the code<br>\n</p>\n</blockquote>",
        "id": 435380820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714049048
    },
    {
        "content": "<p><strong>KGrewal1</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a>.</p>",
        "id": 435380821,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714049048
    },
    {
        "content": "<p><strong>KGrewal1</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a>.</p>",
        "id": 435380822,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714049049
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473#issuecomment-2077402762\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 435406708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714056323
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473#pullrequestreview-2023627328\">PR review</a>:</p>\n<blockquote>\n<p>Overall this change makes sense to me (minus the dropped assertion) but I will defer to @jameysharp who's more recently touched this code.</p>\n</blockquote>",
        "id": 435471104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714080719
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473#pullrequestreview-2023627328\">PR review</a>:</p>\n<blockquote>\n<p>Overall this change makes sense to me (minus the dropped assertion) but I will defer to @jameysharp who's more recently touched this code.</p>\n</blockquote>",
        "id": 435471105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714080719
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473#discussion_r1580157339\">PR review comment</a>:</p>\n<blockquote>\n<p>Not sure about this...</p>\n</blockquote>",
        "id": 435471108,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714080719
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473#issuecomment-2078271067\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a>:</p>\n<blockquote>\n<p>I want to say first of all that this shows that you've dug into the ISLE implementation pretty deeply and that's awesome. Thanks for working to understand it!</p>\n<p>I think these changes are interesting, and although I'm leaning toward not taking these changes, I think the reasons for that are also interesting.</p>\n<p>The two changes to use <code>StableMap</code> instead of <code>HashMap</code> both require peeking under the covers to get at the underlying <code>HashMap</code> to iterate over it, which of course is the one thing that <code>StableMap</code> is not supposed to allow. In both cases, the reason we're okay with the unstable iteration order is that we sort the results immediately afterward, making the result deterministic.</p>\n<p>In <code>RuleSet::build</code>, the <code>HashMap</code> is used very briefly so it's easy to see that the result is deterministic, and there's a big comment pointing this out. I'm inclined to let that continue to just use a raw <code>HashMap</code>.</p>\n<p>In <code>DisjointSets</code>, the <code>HashMap</code> is used a lot of different ways, so yes, it might be nice to use <code>StableMap</code> instead to make it clear that the results can't depend on order. But it's not easy to design a map API that is efficient, stable, and meets the needs of <code>DisjointSets</code>: for example, we could provide a <code>StableMap::keys</code> method that returns a sorted <code>Vec</code> of keys, but that takes time <code>O(n log n)</code> in the total size of the map, which I'd prefer to avoid. So I'm inclined to require instead that <code>DisjointSets</code> must produce deterministic results but it can continue to use non-deterministic implementations internally. It's not very big, so checking this isn't hard.</p>\n<p>Finally: replacing <code>assert_ne!(x, y)</code> with an early-return clearly won't change any current behavior, since the early return would only happen when we currently panic, and we're not seeing ISLE panic there. So in that sense it's okay to make that change. It's also okay in the sense that it doesn't violate any data structure invariants. It preserves the current property that there are no singleton sets, which is useful for <code>trie_again</code>.</p>\n<p>However, I would be surprised if there were a situation where it was convenient to silently ignore attempts to merge a binding with itself. If you find such a situation, let's talk about it! Otherwise I'd prefer to be explicit where <code>merge</code> is called, like in <code>add_match_equal</code> where there's an <code>if</code> statement checking this and a comment explaining what it means if it happens.</p>\n<p>I see one thing this PRs highlights that you could help with, though: The <code>StableMap</code> and <code>DisjointSets</code> guarantees don't mean much if everything else can just reach into their private fields and bypass their carefully-constructed APIs. We should move these types into new modules so that Rust's visibility rules will ensure that the rest of the ISLE compiler can't use them incorrectly. Would you like to do that?</p>\n</blockquote>",
        "id": 435476701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714083844
    },
    {
        "content": "<p>KGrewal1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473#issuecomment-2078892984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a>:</p>\n<blockquote>\n<p>Thanks for looking through this: I will try looking at moving stable map and stable set to different modules so the inner maps are made private by the compiler!</p>\n</blockquote>",
        "id": 435539536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714119953
    },
    {
        "content": "<p>KGrewal1 closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8473\">PR #8473</a>.</p>",
        "id": 435539550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714119957
    }
]