[
    {
        "content": "<p>antonromanov1 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263\">issue #3263</a>:</p>\n<blockquote>\n<p>Now we have such creation of a function in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/dominator_tree.rs\">unreachable_node test in dominator_tree.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>let mut func = Function::new();\nlet block0 = func.dfg.make_block();\nlet v0 = func.dfg.append_block_param(block0, I32);\nlet block1 = func.dfg.make_block();\nlet block2 = func.dfg.make_block();\n\nlet mut cur = FuncCursor::new(&amp;mut func);\n\ncur.insert_block(block0);\ncur.ins().brnz(v0, block2, &amp;[]);\ncur.ins().trap(TrapCode::User(0));\n\ncur.insert_block(block1);\nlet v1 = cur.ins().iconst(I32, 1);\nlet v2 = cur.ins().iadd(v0, v1);\ncur.ins().jump(block0, &amp;[v2]);\n\ncur.insert_block(block2);\ncur.ins().return_(&amp;[v0]);\n</code></pre></div>\n\n<p>This is not very readable. Can we write a DSL with approximately such usage:</p>\n<div class=\"codehilite\"><pre><span></span><code>Function {\n    Block(0, p0: I32) {\n        INST(0, Opcode::Brnz).Args(p0).Target(2, &amp;[])\n        INST(1, Opcode::Trap).User(0)\n    }\n    Block(1) {\n        INST(2, Opcode::Iconst).Value(1)\n        INST(3, Opcode::Iadd).Args(p0, 2)\n        INST(4, Opcode::Jump).Target(0, &amp;[3])\n    }\n    Block(2) {\n        INST(5, Opcode::Return).Args(p0)\n    }\n}\n</code></pre></div>\n\n<p>?</p>\n</blockquote>",
        "id": 251239011,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630334167
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263#issuecomment-908473076\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263\">issue #3263</a>:</p>\n<blockquote>\n<p>What about parsing the CLIF text format? </p>\n</blockquote>",
        "id": 251252830,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630339804
    },
    {
        "content": "<p>antonromanov1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263#issuecomment-908684175\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263\">issue #3263</a>:</p>\n<blockquote>\n<p>@abrown okay, why isn't this used in the tests ?</p>\n</blockquote>",
        "id": 251292868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630356587
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263#issuecomment-908701920\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263\">issue #3263</a>:</p>\n<blockquote>\n<p>Hm, not sure for the test you link to: probably because adding <code>cranelift-reader</code> (the CLIF parser) as a test dependency would add a circular dependency? In other places, e.g., <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/interpreter/src/interpreter.rs#L602-L624\">in the interpreter</a>, this is not an issue. I believe the circular dependency could be resolved by factoring out several key structures from <code>cranelift-codegen</code> into a separate <code>cranelift-ir</code> crate that both <code>cranelift-codegen</code> and <code>cranelift-reader</code> could depend on--but this might be a bit tricky?</p>\n<p>I don't want to discourage you from creating a DSL if you are interested in that, just pointing out that there are other options.</p>\n</blockquote>",
        "id": 251296050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630358039
    },
    {
        "content": "<p>gabriel-fallen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263#issuecomment-909397396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3263\">issue #3263</a>:</p>\n<blockquote>\n<p>@antonromanov1 if you're OK with referring target blocks for jumps by _indexes_ (which is error-prone and refactoring-unfriendly) I don't see why do you need a macros-based DSL while you can just put the necessary code into functions. Akin to</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_block</span><span class=\"p\">(</span><span class=\"n\">instrs0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_block</span><span class=\"p\">(</span><span class=\"n\">instrs1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_block</span><span class=\"p\">(</span><span class=\"n\">instrs2</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_function</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">block0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 251415414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630427680
    }
]