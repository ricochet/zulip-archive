[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>.</p>",
        "id": 444280289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718209835
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>.</p>",
        "id": 444280290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718209835
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a> from <code>alexcrichton:fix-deadlock</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit fixes a bug in the <code>Subscribe</code> trait implementation for <code>AsyncStd{in,out}Stream</code> structures in the <code>wasmtime-wasi</code> crate. Previously these implementations would create a future for the duration of a single <code>poll</code> but then the future was dropped which could lead to lost wakeups as the waker is gone after the future is dropped. The fix was to use a <code>tokio::sync::Mutex</code> here instead of a <code>std::sync::Mutex</code> and leave some comments about why contention isn't expected.</p>\n<p>Closes #8781</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 444280292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718209835
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782#pullrequestreview-2114096911\">PR review</a>.</p>",
        "id": 444320564,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718222362
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782#discussion_r1637008087\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd be more comfortable with this test if the amount read was in excess of the buffer sizes in the io::duplex and the AsyncWriteStream. You could just lower those to 32 each.</p>\n</blockquote>",
        "id": 444320565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718222363
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782#pullrequestreview-2114097713\">PR review</a>:</p>\n<blockquote>\n<p>Great catch. Thank you!</p>\n</blockquote>",
        "id": 444320606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718222377
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>.</p>",
        "id": 444322149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718222851
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>.</p>",
        "id": 444322168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718222859
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>.</p>",
        "id": 444326590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718224271
    },
    {
        "content": "<p>coolreader18 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782#issuecomment-2243933062\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>:</p>\n<blockquote>\n<p>Why not just use <code>tokio::sync::Mutex::blocking_lock()</code>?</p>\n</blockquote>",
        "id": 453289238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721688130
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782#issuecomment-2245430815\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8782\">PR #8782</a>:</p>\n<blockquote>\n<p>Semantically these are all non-blocking functions, not blocking ones, so blocking on contention isn't appropriate for them.</p>\n</blockquote>",
        "id": 453430048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721745327
    }
]