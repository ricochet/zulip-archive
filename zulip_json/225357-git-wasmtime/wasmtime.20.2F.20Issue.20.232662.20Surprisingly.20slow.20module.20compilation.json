[
    {
        "content": "<p>wycats opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>I have pushed a repository at <a href=\"https://github.com/wycats/wand/tree/str-wasmtime\">https://github.com/wycats/wand/tree/str-wasmtime</a>. The branch <code>str-wasmtime</code> is self-contained.</p>\n<p>The script <code>./script/all.sh</code> runs all of the build steps. The final step, <code>./script/run.sh</code>, runs an executable, which is a Rust executable that uses the <code>wasmtime</code> embedding API. Its source is located in <code>./crates/wand-cli</code>. The Rust source for the wasm is located in <code>./src</code>.</p>\n<p>The build scripts use <code>wasm-pack</code> to compile and optimize the wasm. They copy the <code>.wasm</code> file into a <code>data</code> directory in the <code>wand-cli</code> crate, which uses <code>include_bytes!</code> to get the bytes.</p>\n<p>The executable has a bunch of <code>println!</code>s that list out the execution steps and how much time has elapsed.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I expect the <code>Module::new</code> step to be relatively fast. Instead, it takes several seconds on my machine.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>0.22.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.52.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">d1206f950</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"mf\">1.51.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ab64d1393</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">uname</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"n\">XPS</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"o\">-</span><span class=\"mi\">2019</span><span class=\"w\"> </span><span class=\"mf\">4.19.84</span><span class=\"o\">-</span><span class=\"n\">microsoft</span><span class=\"o\">-</span><span class=\"n\">standard</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">SMP</span><span class=\"w\"> </span><span class=\"n\">Wed</span><span class=\"w\"> </span><span class=\"n\">Nov</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"mi\">11</span>:<span class=\"mi\">44</span>:<span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"n\">UTC</span><span class=\"w\"> </span><span class=\"mi\">2019</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"o\">/</span><span class=\"n\">Linux</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">lsb_release</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">LSB</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Distributor</span><span class=\"w\"> </span><span class=\"n\">ID</span>: <span class=\"nc\">Ubuntu</span><span class=\"w\"></span>\n<span class=\"n\">Description</span>:    <span class=\"nc\">Ubuntu</span><span class=\"w\"> </span><span class=\"mf\">20.04.2</span><span class=\"w\"> </span><span class=\"n\">LTS</span><span class=\"w\"></span>\n<span class=\"n\">Release</span>:        <span class=\"mf\">20.04</span><span class=\"w\"></span>\n<span class=\"n\">Codename</span>:       <span class=\"nc\">focal</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm on Ubuntu 20.04 inside of WSL2 on Windows 10.</p>\n</blockquote>",
        "id": 226730729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613598324
    },
    {
        "content": "<p>wycats labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>I have pushed a repository at <a href=\"https://github.com/wycats/wand/tree/str-wasmtime\">https://github.com/wycats/wand/tree/str-wasmtime</a>. The branch <code>str-wasmtime</code> is self-contained.</p>\n<p>The script <code>./script/all.sh</code> runs all of the build steps. The final step, <code>./script/run.sh</code>, runs an executable, which is a Rust executable that uses the <code>wasmtime</code> embedding API. Its source is located in <code>./crates/wand-cli</code>. The Rust source for the wasm is located in <code>./src</code>.</p>\n<p>The build scripts use <code>wasm-pack</code> to compile and optimize the wasm. They copy the <code>.wasm</code> file into a <code>data</code> directory in the <code>wand-cli</code> crate, which uses <code>include_bytes!</code> to get the bytes.</p>\n<p>The executable has a bunch of <code>println!</code>s that list out the execution steps and how much time has elapsed.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I expect the <code>Module::new</code> step to be relatively fast. Instead, it takes several seconds on my machine.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>0.22.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.52.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">d1206f950</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"mf\">1.51.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ab64d1393</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">uname</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"n\">XPS</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"o\">-</span><span class=\"mi\">2019</span><span class=\"w\"> </span><span class=\"mf\">4.19.84</span><span class=\"o\">-</span><span class=\"n\">microsoft</span><span class=\"o\">-</span><span class=\"n\">standard</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">SMP</span><span class=\"w\"> </span><span class=\"n\">Wed</span><span class=\"w\"> </span><span class=\"n\">Nov</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"mi\">11</span>:<span class=\"mi\">44</span>:<span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"n\">UTC</span><span class=\"w\"> </span><span class=\"mi\">2019</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"o\">/</span><span class=\"n\">Linux</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">lsb_release</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">LSB</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Distributor</span><span class=\"w\"> </span><span class=\"n\">ID</span>: <span class=\"nc\">Ubuntu</span><span class=\"w\"></span>\n<span class=\"n\">Description</span>:    <span class=\"nc\">Ubuntu</span><span class=\"w\"> </span><span class=\"mf\">20.04.2</span><span class=\"w\"> </span><span class=\"n\">LTS</span><span class=\"w\"></span>\n<span class=\"n\">Release</span>:        <span class=\"mf\">20.04</span><span class=\"w\"></span>\n<span class=\"n\">Codename</span>:       <span class=\"nc\">focal</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm on Ubuntu 20.04 inside of WSL2 on Windows 10.</p>\n</blockquote>",
        "id": 226730730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613598324
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780908004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Thanks for the report! To help minimize this a bit further, <a href=\"https://github.com/bytecodealliance/wasmtime/files/5999079/wand.wasm.gz\">this is the wasm file in question</a> and as you've mentioned the slower-than-expected part here is <code>Module::new</code>, aka compiling the module.</p>\n<p>Executing your project I see compile times of ~2s, and to poke around a bit I made a smaller script which simply compiles this module. The timings on the <code>main</code> branch (soon to be 0.23.0) I get are:</p>\n<ul>\n<li>old backend, opt speed - <a href=\"http://634.ms\">634.ms</a></li>\n<li>old backend, opt size - 641ms</li>\n<li>old backend, opt none - 561ms</li>\n<li>new backend, opt speed - 766ms</li>\n<li>new backend, opt size - 752ms</li>\n<li>new backend, opt none - 869ms</li>\n</ul>\n<p>So it looks like the new backend is not actually a win here. I'm not entirely sure how to explain the discrepancy of your project taking 2.5s to compile and an isolated script taking ~2x faster. If I use the release commit of 0.22.0 I get slightly slower compile times by ~250ms, but still not in the ~2s range.</p>\n</blockquote>",
        "id": 226740393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613602429
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780912708\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Aha I have found the source of the 2x slowdown over master. Your project <a href=\"https://github.com/wycats/wand/blob/0b92aa26f8709d78555956ea8a2c05f0c69344e5/crates/wand-cli/src/wasm.rs#L14-L17\">enables logging with tracing-subscriber</a> (no doubt because our <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e4827ad779c8adf5d99d9b1a1aa62f07af78c892/examples/wasi/main.rs#L12-L15\">wasi example does the same</a>) but this has the adverse affect apparently of having <code>log_enabled!(LogLevel::Debug)</code> returning <code>true</code>. This means that very expensive debug logs <a href=\"https://github.com/bytecodealliance/regalloc.rs/blob/109455ce4cea07a6e8d87e06d200c1318605c0ea/lib/src/analysis_data_flow.rs#L581-L611\">like this</a> are happening at runtime. That's accounting for a very large portion of the runtime in your example.</p>\n<p>After commenting out the tracing-subscriber business it runs in the same amount of time I saw in my script (e.g. 2x faster)</p>\n</blockquote>",
        "id": 226741620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613603102
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780912708\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Aha I have found the source of the 2x slowdown over main. Your project <a href=\"https://github.com/wycats/wand/blob/0b92aa26f8709d78555956ea8a2c05f0c69344e5/crates/wand-cli/src/wasm.rs#L14-L17\">enables logging with tracing-subscriber</a> (no doubt because our <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e4827ad779c8adf5d99d9b1a1aa62f07af78c892/examples/wasi/main.rs#L12-L15\">wasi example does the same</a>) but this has the adverse affect apparently of having <code>log_enabled!(LogLevel::Debug)</code> returning <code>true</code>. This means that very expensive debug logs <a href=\"https://github.com/bytecodealliance/regalloc.rs/blob/109455ce4cea07a6e8d87e06d200c1318605c0ea/lib/src/analysis_data_flow.rs#L581-L611\">like this</a> are happening at runtime. That's accounting for a very large portion of the runtime in your example.</p>\n<p>After commenting out the tracing-subscriber business it runs in the same amount of time I saw in my script (e.g. 2x faster)</p>\n</blockquote>",
        "id": 226741665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613603134
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780931771\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>For further speedups beyond the numbers above there's a zulip thread going now as well -- <a href=\"#narrow/stream/225524-cranelift-new-backend/topic/wasm.20file.20that.20is.20slower.20to.20compile.20in.20new.20BE.20than.20old.20BE\">https://bytecodealliance.zulipchat.com/#narrow/stream/225524-cranelift-new-backend/topic/wasm.20file.20that.20is.20slower.20to.20compile.20in.20new.20BE.20than.20old.20BE</a></p>\n</blockquote>",
        "id": 226746135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613606022
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780932588\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>So I believe the way <code>tracing-subscriber</code> uses the <code>tracing-log</code> crate has the unfortunate consequence of formatting log strings for every level, regardless of whether or not the logger is \"enabled\" for that level (in this case, dependent upon the env filter respecting <code>RUST_LOG</code>).</p>\n<p>The <code>tracing-log</code> feature is enabled by default in <code>tracing-subscriber</code>, which causes <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/src/fmt/mod.rs#L570\">initialization of the global logger</a>.</p>\n<p>This uses a default <code>Builder</code> that ends up setting the maximum level to the <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-log/src/log_tracer.rs#L256\">most verbose level</a>.</p>\n<p>All the level-specific log macros end up as a invocation of the <code>log!</code> macro, which checks the level against <code>log::max_level()</code> to see if it needs to format the string and calls <code>__private_api_log</code>.  <code>__private_api_log</code> calls <code>Log::enabled</code> on the logger to check to see if it wants the event; but at that point the string has already been formatted as only <code>log::max_level</code> is checked for that.</p>\n<p>And since the max level is the most verbose, all strings are formatted, but the logger in <code>tracing-log</code> ends up telling the <code>log</code> crate it isn't interested in the event after all.</p>\n</blockquote>",
        "id": 226746306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613606137
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780932588\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>So I believe the way <code>tracing-subscriber</code> uses the <code>tracing-log</code> crate has the unfortunate consequence of formatting log strings for every level, regardless of whether or not the logger is \"enabled\" for that level (in this case, dependent upon the env filter respecting <code>RUST_LOG</code>).</p>\n<p>The <code>tracing-log</code> feature is enabled by default in <code>tracing-subscriber</code>, which causes <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/src/fmt/mod.rs#L570\">initialization of the global logger</a>.</p>\n<p>This uses a default <code>Builder</code> that ends up setting the maximum level to the <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-log/src/log_tracer.rs#L256\">most verbose level</a>.</p>\n<p>All the level-specific log macros end up as a invocation of the <code>log!</code> macro, which checks the level against <code>log::max_level()</code> to see if it needs to format the string and calls <code>__private_api_log</code>.  <code>__private_api_log</code> calls <code>Log::enabled</code> on the logger to check to see if it wants the event; but at that point the string has already been formatted as only <code>log::max_level</code> is checked for that.</p>\n<p>And since the max level is the most verbose, all strings are formatted, but the logger in <code>tracing-log</code> ends up telling the <code>log</code> crate it isn't interested in the event after all.</p>\n<p>As Alex also noted, this would also affect any explicit checks to see if the log level is enabled (<code>log_enabled!</code> has the same check against <code>log::max_level</code>), so extra work is also being performed outside of the macro string formatting too.</p>\n</blockquote>",
        "id": 226752481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613610602
    },
    {
        "content": "<p>wycats <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-781555768\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<blockquote>\n<p>Your project <a href=\"https://github.com/wycats/wand/blob/0b92aa26f8709d78555956ea8a2c05f0c69344e5/crates/wand-cli/src/wasm.rs#L14-L17\">enables logging with tracing-subscriber</a> (no doubt because our <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e4827ad779c8adf5d99d9b1a1aa62f07af78c892/examples/wasi/main.rs#L12-L15\">wasi example does the same</a>)</p>\n</blockquote>\n<p>You're right! I stared at that line a bunch of times and kept telling myself \"I copied it from an official example\", and never got around to trying the whole thing with the line commented out.</p>\n</blockquote>",
        "id": 226859003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613673723
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780932588\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>So I believe the way <code>tracing-subscriber</code> uses the <code>tracing-log</code> crate also has the unfortunate consequence of formatting log strings for every level, regardless of whether or not the logger is \"enabled\" for that level (in this case, dependent upon the env filter respecting <code>RUST_LOG</code>).</p>\n<p>The <code>tracing-log</code> feature is enabled by default in <code>tracing-subscriber</code>, which causes <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/src/fmt/mod.rs#L570\">initialization of the global logger</a>.</p>\n<p>This uses a default <code>Builder</code> that ends up setting the maximum level to the <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-log/src/log_tracer.rs#L256\">most verbose level</a>.</p>\n<p>All the level-specific log macros end up as a invocation of the <code>log!</code> macro, which checks the level against <code>log::max_level()</code> to see if it needs to format the string and calls <code>__private_api_log</code>.  <code>__private_api_log</code> calls <code>Log::enabled</code> on the logger to check to see if it wants the event; but at that point the string has already been formatted as only <code>log::max_level</code> is checked for that.</p>\n<p>And since the max level is the most verbose, all strings are formatted, but the logger in <code>tracing-log</code> ends up telling the <code>log</code> crate it isn't interested in the event after all.</p>\n<p>As Alex also noted, this would also affect any explicit checks to see if the log level is enabled (<code>log_enabled!</code> has the same check against <code>log::max_level</code>), so extra work is also being performed outside of the macro string formatting too.</p>\n</blockquote>",
        "id": 226861870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613674828
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780932588\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p><del>So I believe the way <code>tracing-subscriber</code> uses the <code>tracing-log</code> crate also has the unfortunate consequence of formatting log strings for every level, regardless of whether or not the logger is \"enabled\" for that level (in this case, dependent upon the env filter respecting <code>RUST_LOG</code>).</del></p>\n<p><del>The <code>tracing-log</code> feature is enabled by default in <code>tracing-subscriber</code>, which causes <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/src/fmt/mod.rs#L570\">initialization of the global logger</a>.</del></p>\n<p><del>This uses a default <code>Builder</code> that ends up setting the maximum level to the <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-log/src/log_tracer.rs#L256\">most verbose level</a>.</del></p>\n<p><del>All the level-specific log macros end up as a invocation of the <code>log!</code> macro, which checks the level against <code>log::max_level()</code> to see if it needs to format the string and calls <code>__private_api_log</code>.  <code>__private_api_log</code> calls <code>Log::enabled</code> on the logger to check to see if it wants the event; but at that point the string has already been formatted as only <code>log::max_level</code> is checked for that.</del></p>\n<p><del>And since the max level is the most verbose, all strings are formatted, but the logger in <code>tracing-log</code> ends up telling the <code>log</code> crate it isn't interested in the event after all.</del></p>\n<p><del>As Alex also noted, this would also affect any explicit checks to see if the log level is enabled (<code>log_enabled!</code> has the same check against <code>log::max_level</code>), so extra work is also being performed outside of the macro string formatting too.</del></p>\n<p>Edit: my analysis was wrong as I was looking at the wrong function. String formatting is delayed until the logger is asked if the level is enabled.</p>\n<p>This only affects the <code>log_enabled!</code> macro it seems.</p>\n</blockquote>",
        "id": 226885580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613684513
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780932588\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p><del>So I believe the way <code>tracing-subscriber</code> uses the <code>tracing-log</code> crate also has the unfortunate consequence of formatting log strings for every level, regardless of whether or not the logger is \"enabled\" for that level (in this case, dependent upon the env filter respecting <code>RUST_LOG</code>).</del></p>\n<p><del>The <code>tracing-log</code> feature is enabled by default in <code>tracing-subscriber</code>, which causes <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-subscriber/src/fmt/mod.rs#L570\">initialization of the global logger</a>.</del></p>\n<p><del>This uses a default <code>Builder</code> that ends up setting the maximum level to the <a href=\"https://github.com/tokio-rs/tracing/blob/master/tracing-log/src/log_tracer.rs#L256\">most verbose level</a>.</del></p>\n<p><del>All the level-specific log macros end up as a invocation of the <code>log!</code> macro, which checks the level against <code>log::max_level()</code> to see if it needs to format the string and calls <code>__private_api_log</code>.  <code>__private_api_log</code> calls <code>Log::enabled</code> on the logger to check to see if it wants the event; but at that point the string has already been formatted as only <code>log::max_level</code> is checked for that.</del></p>\n<p><del>And since the max level is the most verbose, all strings are formatted, but the logger in <code>tracing-log</code> ends up telling the <code>log</code> crate it isn't interested in the event after all.</del></p>\n<p><del>As Alex also noted, this would also affect any explicit checks to see if the log level is enabled (<code>log_enabled!</code> has the same check against <code>log::max_level</code>), so extra work is also being performed outside of the macro string formatting too.</del></p>\n<p>Edit: my analysis was wrong as I was looking at the wrong function (accidentally was looking at <code>__private_api_enabled</code> and saw the <code>&amp;str</code> arg and my brain assumed a formatted message rather than the target name). String formatting is delayed until the logger is asked if the level is enabled.</p>\n<p>This only affects the <code>log_enabled!</code> macro it seems.</p>\n</blockquote>",
        "id": 226886925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613685142
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-782930717\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>I was just going to reach out about this when I found this open issue.</p>\n<p>I was wondering if anyone has done a baseline comparison with wasmer. I recently came across <a href=\"https://medium.com/wasmer/wasmer-1-0-3f86ca18c043\">this article</a> which mentions a breakthrough in compile time performance. I was wondering how wasmtime compares.</p>\n<p>The context for me is a small project that runs fastly wasm apps inside a local http server <a href=\"https://github.com/softprops/fasttime\">https://github.com/softprops/fasttime</a></p>\n<p>The compilation step where I load the wasm module can take seconds. I was wondering if work was being done to improve this</p>\n</blockquote>",
        "id": 227195511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613943259
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-782932188\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>That article mentions parallel compilation as reason that it is faster. This is already the default with Wasmtime.</p>\n</blockquote>",
        "id": 227196031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1613943877
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-783462823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops do you have a wasm module that you can share so we can dig in?</p>\n</blockquote>",
        "id": 227285239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614008323
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-783530580\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Sure. Where's the best place to upload it?</p>\n<p>In ci, I <a href=\"https://github.com/softprops/fasttime/blob/6ccedfd2ee06dbb78d08b9ad989cd982747fe8b8/.github/workflows/main.yml#L95\">build a test app</a> and then run it though some integration tests. It's uploaded as an artifact so I think you can download it directly.</p>\n<p>Here's a recent GitHub actions job <a href=\"https://github.com/softprops/fasttime/actions/runs/586883035\">https://github.com/softprops/fasttime/actions/runs/586883035</a></p>\n<p>Alternatively if there's anything I can do on my end, trace logging etc, I'd be happy to help. Wasmtime is such an amazing project!</p>\n</blockquote>",
        "id": 227302624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614014113
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-783535129\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>That works! You can also upload directly here in your comment by compressing it with gzip (GitHub doesn't allow raw wasm file uploads).</p>\n<p>I did some timing though and your wasm module compiles in 86ms for me. That means that something deeper may be at play here, perhaps you could open a separate issue for this?</p>\n</blockquote>",
        "id": 227303816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614014518
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-783927216\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>holy smokes that's fast! could it be the wasmtime version I'm using (0.22) by chance? </p>\n<p>I'm mainly getting a sense from <a href=\"https://github.com/softprops/fasttime/blob/6ccedfd2ee06dbb78d08b9ad989cd982747fe8b8/src/main.rs#L150-L171\">this code</a> which loads the wasm file from a path.</p>\n</blockquote>",
        "id": 227385692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614059316
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-784269632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>What sort of timings are you seeing for compiling that module? I don't think we had major perf improvements in 0.22, so if you're an order of magnitude different or so from what I'm seeing then there's probably a different issue.</p>\n</blockquote>",
        "id": 227445396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614092970
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-784489939\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>The latest tracing-subscriber 0.2.16 resolves the root cause of the issue Alex determined <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-780912708\">early in this thread</a>. Downstream users should be able to <code>cargo update</code> to get this fix.</p>\n</blockquote>",
        "id": 227498467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614112228
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787009211\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<blockquote>\n<p>What sort of timings are you seeing for compiling that module? I don't think we had major perf improvements in 0.22, so if you're an order of magnitude different or so from what I'm seeing then there's probably a different issue.</p>\n</blockquote>\n<p>I'll look into upgrading to <a href=\"mailto:wasmtime@0.23\">wasmtime@0.23</a> this weekend but  with <a href=\"mailto:wasmtime@0.22\">wasmtime@0.22</a> is not uncommon for a 2.7mb wasm file to take multiple seconds to compile with  <code>Module::from_file(&amp;engine, file)?;</code> is about 6s on average for me which is why my head started spinning when you mentioned 82ms</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">◌</span><span class=\"w\">  </span><span class=\"n\">Loading</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">✔</span><span class=\"w\"> </span><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">6.273588</span><span class=\"n\">s</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm using the <a href=\"https://github.com/softprops/fasttime/blob/6ccedfd2ee06dbb78d08b9ad989cd982747fe8b8/src/main.rs#L211\">default Engine instance</a> and calling Module::from_file once <a href=\"https://github.com/softprops/fasttime/blob/main/src/main.rs#L163\">here</a>. I haven't yet tried loading the file separately and then calling <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Module.html#method.new\">Module::new</a> with just the bytes. </p>\n<p>If its helpful for extra context I'm on a mac using rust 1.49</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.49.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e1884a8e3</span><span class=\"w\"> </span><span class=\"mi\">2020</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">29</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"mf\">1.49.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">d00d64df9</span><span class=\"w\"> </span><span class=\"mi\">2020</span><span class=\"o\">-</span><span class=\"mi\">12</span><span class=\"o\">-</span><span class=\"mi\">05</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">uname</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">Darwin</span><span class=\"w\"> </span><span class=\"n\">doug</span><span class=\"o\">-</span><span class=\"n\">mbp</span><span class=\"w\"> </span><span class=\"mf\">20.3.0</span><span class=\"w\"> </span><span class=\"n\">Darwin</span><span class=\"w\"> </span><span class=\"n\">Kernel</span><span class=\"w\"> </span><span class=\"n\">Version</span><span class=\"w\"> </span><span class=\"mf\">20.3.0</span>: <span class=\"nc\">Thu</span><span class=\"w\"> </span><span class=\"n\">Jan</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"mi\">00</span>:<span class=\"mi\">07</span>:<span class=\"mi\">06</span><span class=\"w\"> </span><span class=\"n\">PST</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">xnu</span><span class=\"o\">-</span><span class=\"mf\">7195.81.3</span><span class=\"o\">~</span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"n\">RELEASE_X86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If I could get my 6s module compile time down to your 82ms it would be game changing for turn around time on testing for me.</p>\n</blockquote>",
        "id": 228035030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614403798
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787015012\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Upgrading to 0.23 for me didn't seem to make a different in module compile times for me</p>\n</blockquote>",
        "id": 228037960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614407429
    },
    {
        "content": "<p>lqd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787058078\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops I'm not exactly sure about these steps to reproduce but I cloned <code>fasttime</code> just now (but locally changed <code>user-agent-parser</code> to depend on <code>onig</code> <a href=\"https://github.com/rust-onig/rust-onig#build-errors-caused-by-libclangllvm\">this way</a> to make my life easier on windows), built the <code>tests/app</code> for <code>wasm32-wasi</code>, and have these results:</p>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ll -h tests/app/target/wasm32-wasi/release/app.wasm\n-rw-r--r-- <span class=\"m\">2</span> lqd <span class=\"m\">197121</span> <span class=\"m\">3</span>.2M Feb <span class=\"m\">27</span> <span class=\"m\">11</span>:02 tests/app/target/wasm32-wasi/release/app.wasm\n\n$ cargo run --release -- -w ./tests/app/target/wasm32-wasi/release/app.wasm\n    Finished release <span class=\"o\">[</span>optimized<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.30s\n     Running <span class=\"sb\">`</span>target<span class=\"se\">\\r</span>elease<span class=\"se\">\\f</span>asttime.exe -w ./tests/app/target/wasm32-wasi/release/app.wasm<span class=\"sb\">`</span>\n ◌  Loading module...\n ✔ Loaded module in <span class=\"m\">150</span>.6526ms ✨\nDEBUG: <span class=\"o\">{}</span>\n ● Listening on http://127.0.0.1:3000\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 228051944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614425054
    },
    {
        "content": "<p>lqd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787058078\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops I'm not exactly sure about these steps to reproduce but I cloned <code>fasttime</code> just now (but locally changed <code>user-agent-parser</code> to depend on <code>onig</code> <a href=\"https://github.com/rust-onig/rust-onig#build-errors-caused-by-libclangllvm\">this way</a> to make my life easier on windows), built the <code>tests/app</code> for <code>wasm32-wasi</code>, and have these results:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ll -h tests/app/target/wasm32-wasi/release/app.wasm\n-rw-r--r-- <span class=\"m\">2</span> lqd <span class=\"m\">197121</span> <span class=\"m\">3</span>.2M Feb <span class=\"m\">27</span> <span class=\"m\">11</span>:02 tests/app/target/wasm32-wasi/release/app.wasm\n\n$ cargo run --release -- -w ./tests/app/target/wasm32-wasi/release/app.wasm\n    Finished release <span class=\"o\">[</span>optimized<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.30s\n     Running <span class=\"sb\">`</span>target<span class=\"se\">\\r</span>elease<span class=\"se\">\\f</span>asttime.exe -w ./tests/app/target/wasm32-wasi/release/app.wasm<span class=\"sb\">`</span>\n ◌  Loading module...\n ✔ Loaded module in <span class=\"m\">150</span>.6526ms ✨\nDEBUG: <span class=\"o\">{}</span>\n ● Listening on http://127.0.0.1:3000\n</code></pre></div>\n<p>EDIT: those measurements are on nightly from a couple days ago.</p>\n<p>On 1.46.0, the wasm is smaller (the 2.7mb size you mentioned) and <code>fasttime</code> loads it here in 113ms as well)</p>\n</blockquote>",
        "id": 228053136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614426457
    },
    {
        "content": "<p>lqd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787058078\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops I'm not exactly sure about these steps to reproduce but I cloned <code>fasttime</code> just now (but locally changed <code>user-agent-parser</code> to depend on <code>onig</code> <a href=\"https://github.com/rust-onig/rust-onig#build-errors-caused-by-libclangllvm\">this way</a> to make my life easier on windows), built the <code>tests/app</code> for <code>wasm32-wasi</code>, and have these results:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ll -h tests/app/target/wasm32-wasi/release/app.wasm\n-rw-r--r-- <span class=\"m\">2</span> lqd <span class=\"m\">197121</span> <span class=\"m\">3</span>.2M Feb <span class=\"m\">27</span> <span class=\"m\">11</span>:02 tests/app/target/wasm32-wasi/release/app.wasm\n\n$ cargo run --release -- -w ./tests/app/target/wasm32-wasi/release/app.wasm\n    Finished release <span class=\"o\">[</span>optimized<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.30s\n     Running <span class=\"sb\">`</span>target<span class=\"se\">\\r</span>elease<span class=\"se\">\\f</span>asttime.exe -w ./tests/app/target/wasm32-wasi/release/app.wasm<span class=\"sb\">`</span>\n ◌  Loading module...\n ✔ Loaded module in <span class=\"m\">150</span>.6526ms ✨\nDEBUG: <span class=\"o\">{}</span>\n ● Listening on http://127.0.0.1:3000\n</code></pre></div>\n<p>EDIT: those measurements are on a nightly from a couple days ago.</p>\n<p>On 1.46.0, the wasm is smaller (the 2.7mb size you mentioned) and <code>fasttime</code> loads it here in 113ms as well)</p>\n</blockquote>",
        "id": 228053192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614426502
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787066390\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Wow. I wonder if this is just a macOS specific issue</p>\n</blockquote>",
        "id": 228055884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614429389
    },
    {
        "content": "<p>softprops edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787015012\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Upgrading to 0.23 for me didn't seem to make a difference in module compile times for me</p>\n</blockquote>",
        "id": 228055909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614429427
    },
    {
        "content": "<p>lqd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787058078\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops I'm not exactly sure about these steps to reproduce but I cloned <code>fasttime</code> just now (but locally changed <code>user-agent-parser</code> to depend on <code>onig</code> <a href=\"https://github.com/rust-onig/rust-onig#build-errors-caused-by-libclangllvm\">this way</a> to make my life easier on windows), built the <code>tests/app</code> for <code>wasm32-wasi</code>, and have these results:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ll -h tests/app/target/wasm32-wasi/release/app.wasm\n-rw-r--r-- <span class=\"m\">2</span> lqd <span class=\"m\">197121</span> <span class=\"m\">3</span>.2M Feb <span class=\"m\">27</span> <span class=\"m\">11</span>:02 tests/app/target/wasm32-wasi/release/app.wasm\n\n$ cargo run --release -- -w ./tests/app/target/wasm32-wasi/release/app.wasm\n    Finished release <span class=\"o\">[</span>optimized<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.30s\n     Running <span class=\"sb\">`</span>target<span class=\"se\">\\r</span>elease<span class=\"se\">\\f</span>asttime.exe -w ./tests/app/target/wasm32-wasi/release/app.wasm<span class=\"sb\">`</span>\n ◌  Loading module...\n ✔ Loaded module in <span class=\"m\">150</span>.6526ms ✨\nDEBUG: <span class=\"o\">{}</span>\n ● Listening on http://127.0.0.1:3000\n</code></pre></div>\n<p>EDIT: those measurements are on a nightly from a couple days ago.</p>\n<p>On 1.46.0, the wasm is smaller (the 2.7mb size you mentioned) and <code>fasttime</code> loads it here in 113ms as well)</p>\n<p>EDIT 2: I've tested this on linux as well and the numbers are similar</p>\n</blockquote>",
        "id": 228059886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614434128
    },
    {
        "content": "<p>lqd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787058078\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops I'm not exactly sure about these steps to reproduce but I cloned <code>fasttime</code> just now (but locally changed <code>user-agent-parser</code> to depend on <code>onig</code> <a href=\"https://github.com/rust-onig/rust-onig#build-errors-caused-by-libclangllvm\">this way</a> to make my life easier on windows), built the <code>tests/app</code> for <code>wasm32-wasi</code>, and have these results:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ll -h tests/app/target/wasm32-wasi/release/app.wasm\n-rw-r--r-- <span class=\"m\">2</span> lqd <span class=\"m\">197121</span> <span class=\"m\">3</span>.2M Feb <span class=\"m\">27</span> <span class=\"m\">11</span>:02 tests/app/target/wasm32-wasi/release/app.wasm\n\n$ cargo run --release -- -w ./tests/app/target/wasm32-wasi/release/app.wasm\n    Finished release <span class=\"o\">[</span>optimized<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.30s\n     Running <span class=\"sb\">`</span>target<span class=\"se\">\\r</span>elease<span class=\"se\">\\f</span>asttime.exe -w ./tests/app/target/wasm32-wasi/release/app.wasm<span class=\"sb\">`</span>\n ◌  Loading module...\n ✔ Loaded module in <span class=\"m\">150</span>.6526ms ✨\nDEBUG: <span class=\"o\">{}</span>\n ● Listening on http://127.0.0.1:3000\n</code></pre></div>\n<p>EDIT: those measurements are on a nightly from a couple days ago.</p>\n<p>On 1.46.0, the wasm is smaller (the 2.7mb size you mentioned) and <code>fasttime</code> loads it here in 113ms as well)</p>\n<p>EDIT 2: I've tested this on linux on the same machine as well and the numbers are similar</p>\n</blockquote>",
        "id": 228061053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614435471
    },
    {
        "content": "<p>lqd <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787092256\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Maybe.</p>\n<p>At this point this looks different enough from the OP that it's probably better to open a dedicated issue.</p>\n<p>FWIW, I myself can't reproduce a <code>Module::from_file</code> slowdown with your wasm test app on <a href=\"https://github.com/lqd/wasmtime-repro-2662/blob/main/results.md\">windows, linux, or a 10-year old macbook AIR</a></p>\n</blockquote>",
        "id": 228065572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614440701
    },
    {
        "content": "<p>lqd edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-787092256\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Maybe.</p>\n<p>At this point this looks different enough from the OP that it's probably better to open a dedicated issue.</p>\n<p>FWIW, I myself can't reproduce a <code>Module::from_file</code> slowdown with your wasm test app on <a href=\"https://github.com/lqd/wasmtime-repro-2662/blob/main/results.md\">windows, linux, or a 10-year old MacBook Air</a></p>\n</blockquote>",
        "id": 228066413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614441625
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-788049078\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@softprops Checking out the latest softprops/fasttime@94faa0e7bd351b67e8d1444e0bc09c32764111b2 on macOS I get the same timings as @lqd got above (using the same app as well). Loading the module you referenced above it says it compiles in ~90ms.</p>\n<p>To confirm, are you sure that you're building fasttime with <code>--release</code>? 60ms to 6s sounds like a Rust release mode thing that would cause the slowdown. Otherwise do you perhaps have any environment variables configured liked <code>RUST_LOG</code> or similar?</p>\n</blockquote>",
        "id": 228252544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1614613572
    },
    {
        "content": "<p>softprops <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-791882414\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>@alexcrichton you win! there's a world of a difference with wasm compile times between debug and release mode. I tried with both and I go from ~6s to ~300ms which is a night and day improvement for me. That's magic!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">fasttime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">◌</span><span class=\"w\">  </span><span class=\"n\">Loading</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">✔</span><span class=\"w\"> </span><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">6.793324</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"err\">✨</span><span class=\"w\"></span>\n<span class=\"n\">DEBUG</span>: <span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">●</span><span class=\"w\"> </span><span class=\"n\">Listening</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span>:<span class=\"c1\">//127.0.0.1:3000</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">fasttime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">app</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">◌</span><span class=\"w\">  </span><span class=\"n\">Loading</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">✔</span><span class=\"w\"> </span><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">309.38</span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">✨</span><span class=\"w\"></span>\n<span class=\"n\">DEBUG</span>: <span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"err\">●</span><span class=\"w\"> </span><span class=\"n\">Listening</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">http</span>:<span class=\"c1\">//127.0.0.1:3000</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 229071318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615011686
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662#issuecomment-792814265\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Ok great! I'm gonna go ahead and close this issue since I believe this was all largely handled.</p>\n</blockquote>",
        "id": 229312305,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615215745
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2662\">Issue #2662</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p>I have pushed a repository at <a href=\"https://github.com/wycats/wand/tree/str-wasmtime\">https://github.com/wycats/wand/tree/str-wasmtime</a>. The branch <code>str-wasmtime</code> is self-contained.</p>\n<p>The script <code>./script/all.sh</code> runs all of the build steps. The final step, <code>./script/run.sh</code>, runs an executable, which is a Rust executable that uses the <code>wasmtime</code> embedding API. Its source is located in <code>./crates/wand-cli</code>. The Rust source for the wasm is located in <code>./src</code>.</p>\n<p>The build scripts use <code>wasm-pack</code> to compile and optimize the wasm. They copy the <code>.wasm</code> file into a <code>data</code> directory in the <code>wand-cli</code> crate, which uses <code>include_bytes!</code> to get the bytes.</p>\n<p>The executable has a bunch of <code>println!</code>s that list out the execution steps and how much time has elapsed.</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>I expect the <code>Module::new</code> step to be relatively fast. Instead, it takes several seconds on my machine.</p>\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p>0.22.</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"mf\">1.52.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">d1206f950</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"mf\">1.51.0</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ab64d1393</span><span class=\"w\"> </span><span class=\"mi\">2021</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">uname</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"n\">XPS</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"o\">-</span><span class=\"mi\">2019</span><span class=\"w\"> </span><span class=\"mf\">4.19.84</span><span class=\"o\">-</span><span class=\"n\">microsoft</span><span class=\"o\">-</span><span class=\"n\">standard</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">SMP</span><span class=\"w\"> </span><span class=\"n\">Wed</span><span class=\"w\"> </span><span class=\"n\">Nov</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"mi\">11</span>:<span class=\"mi\">44</span>:<span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"n\">UTC</span><span class=\"w\"> </span><span class=\"mi\">2019</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"o\">/</span><span class=\"n\">Linux</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">lsb_release</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">LSB</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Distributor</span><span class=\"w\"> </span><span class=\"n\">ID</span>: <span class=\"nc\">Ubuntu</span><span class=\"w\"></span>\n<span class=\"n\">Description</span>:    <span class=\"nc\">Ubuntu</span><span class=\"w\"> </span><span class=\"mf\">20.04.2</span><span class=\"w\"> </span><span class=\"n\">LTS</span><span class=\"w\"></span>\n<span class=\"n\">Release</span>:        <span class=\"mf\">20.04</span><span class=\"w\"></span>\n<span class=\"n\">Codename</span>:       <span class=\"nc\">focal</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm on Ubuntu 20.04 inside of WSL2 on Windows 10.</p>\n</blockquote>",
        "id": 229312306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1615215745
    }
]