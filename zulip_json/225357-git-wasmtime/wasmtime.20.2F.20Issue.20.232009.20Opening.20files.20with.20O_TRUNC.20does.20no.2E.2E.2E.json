[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Consider the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream ff;\n    ff.open(&quot;test.txt&quot;, std::ofstream::trunc);\n    ff &lt;&lt; &quot;bad bad bad bad\\n&quot;;\n    return 0;\n}\n</code></pre></div>\n\n\n<p>I've attached it here:  <a href=\"https://github.com/bytecodealliance/wasmtime/files/4903795/bad.zip\">bad.zip</a></p>\n<p>Open <code>test.txt</code> and put something like this there:</p>\n<div class=\"codehilite\"><pre><span></span><code>bad bad bad bad\nthis will remain here\n</code></pre></div>\n\n\n<p>Run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>wasmtime run --dir . bad.wasm\n</code></pre></div>\n\n\n<p>The file is not truncated.</p>\n</blockquote>",
        "id": 203516147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594392751
    },
    {
        "content": "<p>whitequark labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Consider the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream ff;\n    ff.open(&quot;test.txt&quot;, std::ofstream::trunc);\n    ff &lt;&lt; &quot;bad bad bad bad\\n&quot;;\n    return 0;\n}\n</code></pre></div>\n\n\n<p>I've attached it here:  <a href=\"https://github.com/bytecodealliance/wasmtime/files/4903795/bad.zip\">bad.zip</a></p>\n<p>Open <code>test.txt</code> and put something like this there:</p>\n<div class=\"codehilite\"><pre><span></span><code>bad bad bad bad\nthis will remain here\n</code></pre></div>\n\n\n<p>Run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>wasmtime run --dir . bad.wasm\n</code></pre></div>\n\n\n<p>The file is not truncated.</p>\n</blockquote>",
        "id": 203516148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594392751
    },
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Consider the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream ff;\n    ff.open(&quot;test.txt&quot;, std::ofstream::trunc);\n    ff &lt;&lt; &quot;bad bad bad bad\\n&quot;;\n    return 0;\n}\n</code></pre></div>\n\n\n<p>I've attached it here:  <a href=\"https://github.com/bytecodealliance/wasmtime/files/4903795/bad.zip\">bad.zip</a></p>\n<p>Open <code>test.txt</code> and put something like this there:</p>\n<div class=\"codehilite\"><pre><span></span><code>bad bad bad bad\nthis will remain here\n</code></pre></div>\n\n\n<p>Run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>wasmtime run --dir . bad.wasm\n</code></pre></div>\n\n\n<p>The file is not truncated.</p>\n</blockquote>",
        "id": 203516158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594392759
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009#issuecomment-656718441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Here's the WASI call log:</p>\n<div class=\"codehilite\"><pre><span></span><code> DEBUG wasi_common::ctx &gt; WasiCtx inserting entry PendingEntry::Thunk(0x32cde8)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(0)\n DEBUG wasi_common::ctx &gt; WasiCtx inserting entry PendingEntry::Thunk(0x32cde8)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(1)\n DEBUG wasi_common::ctx &gt; WasiCtx inserting entry PendingEntry::Thunk(0x32cde8)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(2)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(3)\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (0, Some(PendingEntry::Thunk(0x32d058)))\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (1, Some(PendingEntry::Thunk(0x32d068)))\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (2, Some(PendingEntry::Thunk(0x32d078)))\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (3, Entry { file_type: 3, descriptor: OsHandle(OsHandle(File { handle: 0x5c, path: &quot;\\\\\\\\?\\\\Z:\\\\home\\\\whitequark\\\\xxx\\\\build&quot; })), rights_base: 264240858, rights_inheriting: 268435455, preopen_path: Some(&quot;.&quot;) })\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx entries = {0: Entry { file_type: 2, descriptor: Stdin, rights_base: 136314954, rights_inheriting: 136314954, preopen_path: None }, 3: Entry { file_type: 3, descriptor: OsHandle(OsHandle(File { handle: 0x5c, path: &quot;\\\\\\\\?\\\\Z:\\\\home\\\\whitequark\\\\xxx\\\\build&quot; })), rights_base: 264240858, rights_inheriting: 268435455, preopen_path: Some(&quot;.&quot;) }, 1: Entry { file_type: 2, descriptor: Stdout, rights_base: 136314954, rights_inheriting: 136314954, preopen_path: None }, 2: Entry { file_type: 2, descriptor: Stderr, rights_base: 136314954, rights_inheriting: 136314954, preopen_path: None }}\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_prestat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; fd=Fd(3)\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; buf=Dir(PrestatDir { pr_name_len: 1 })\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_prestat_dir_name&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; fd=Fd(3) path=*guest 0x20010 path_len=1\n TRACE wasi_common::snapshots::wasi_snapshot_preview1 &gt;      | path=&#39;.&#39;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_prestat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; error=Badf\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_fdstat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(3)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; stat=Fdstat { fs_filetype: Directory, fs_flags: Fdflags(0), fs_rights_base: Rights(264240858), fs_rights_inheriting: Rights(268435455) }\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;path_open&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(3) dirflags=symlink_follow (0x1) path=*guest 0x400/8 oflags=creat|trunc (0x9) fs_rights_base=fd_datasync|fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_write|fd_advise|fd_allocate|path_create_directory|path_create_file|path_link_source|path_link_target|path_open|path_readlink|path_rename_source|path_rename_target|path_filestat_get|path_filestat_set_size|path_filestat_set_times|fd_filestat_get|fd_filestat_set_size|fd_filestat_set_times|path_symlink|path_remove_directory|path_unlink_file|poll_fd_readwrite (0xfffbffd) fs_rights_inherting=fd_datasync|fd_read|fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_write|fd_advise|fd_allocate|path_create_directory|path_create_file|path_link_source|path_link_target|path_open|fd_readdir|path_readlink|path_rename_source|path_rename_target|path_filestat_get|path_filestat_set_size|path_filestat_set_times|fd_filestat_get|fd_filestat_set_size|fd_filestat_set_times|path_symlink|path_remove_directory|path_unlink_file|poll_fd_readwrite (0xfffffff) fdflags=empty (0x0)\n TRACE wasi_common::snapshots::wasi_snapshot_preview1 &gt;      | needed_rights=HandleRights { base: path_create_file|path_open (0x2400), inheriting: fd_datasync|fd_read|fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_write|fd_advise|fd_allocate|path_create_directory|path_create_file|path_link_source|path_link_target|path_open|fd_readdir|path_readlink|path_rename_source|path_rename_target|path_filestat_get|path_filestat_set_size|path_filestat_set_times|fd_filestat_get|fd_filestat_set_size|fd_filestat_set_times|path_symlink|path_remove_directory|path_unlink_file|poll_fd_readwrite (0xfffffff) }\n TRACE wasi_common::path                              &gt;      | (path_ptr,path_len)=&#39;test.txt&#39;\n DEBUG wasi_common::path                              &gt; path_get cur_path = &quot;test.txt&quot;\n DEBUG wasi_common::path                              &gt; path_get path_stack = []\n DEBUG wasi_common::sys::windows::path                &gt; out_path=&quot;Z:\\\\home\\\\whitequark\\\\xxx\\\\build\\\\test.txt&quot;\n DEBUG wasi_common::sys::windows::path                &gt; readlinkat error=50\n TRACE wasi_common::snapshots::wasi_snapshot_preview1 &gt;      | calling path_open impl: read=false, write=true\n DEBUG wasi_common::sys::windows::path                &gt; out_path=&quot;Z:\\\\home\\\\whitequark\\\\xxx\\\\build\\\\test.txt&quot;\n DEBUG wasi_common::sys                               &gt; Created new instance of OsFile: OsFile { rights: Cell { value: HandleRights { base: Rights(148898303), inheriting: Rights(0) } }, handle: RawOsHandle(Cell { value: 0x64 }) }\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; opened_fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_fdstat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; stat=Fdstat { fs_filetype: RegularFile, fs_flags: Fdflags(0), fs_rights_base: Rights(148898301), fs_rights_inheriting: Rights(0) }\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_write&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4) iovs=*guest 0x150b0/2\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; nwritten=16\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_close&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n</code></pre></div>\n\n\n</blockquote>",
        "id": 203516480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594392892
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009#issuecomment-656718441\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Here's the WASI call log (this is on wine, but I'm triaging a bug report from someone who hits it on Windows):</p>\n<div class=\"codehilite\"><pre><span></span><code> DEBUG wasi_common::ctx &gt; WasiCtx inserting entry PendingEntry::Thunk(0x32cde8)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(0)\n DEBUG wasi_common::ctx &gt; WasiCtx inserting entry PendingEntry::Thunk(0x32cde8)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(1)\n DEBUG wasi_common::ctx &gt; WasiCtx inserting entry PendingEntry::Thunk(0x32cde8)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(2)\n DEBUG wasi_common::ctx &gt; WasiCtx inserted at Fd(3)\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (0, Some(PendingEntry::Thunk(0x32d058)))\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (1, Some(PendingEntry::Thunk(0x32d068)))\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (2, Some(PendingEntry::Thunk(0x32d078)))\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx inserting (3, Entry { file_type: 3, descriptor: OsHandle(OsHandle(File { handle: 0x5c, path: &quot;\\\\\\\\?\\\\Z:\\\\home\\\\whitequark\\\\xxx\\\\build&quot; })), rights_base: 264240858, rights_inheriting: 268435455, preopen_path: Some(&quot;.&quot;) })\n DEBUG wasi_common::old::snapshot_0::ctx &gt; WasiCtx entries = {0: Entry { file_type: 2, descriptor: Stdin, rights_base: 136314954, rights_inheriting: 136314954, preopen_path: None }, 3: Entry { file_type: 3, descriptor: OsHandle(OsHandle(File { handle: 0x5c, path: &quot;\\\\\\\\?\\\\Z:\\\\home\\\\whitequark\\\\xxx\\\\build&quot; })), rights_base: 264240858, rights_inheriting: 268435455, preopen_path: Some(&quot;.&quot;) }, 1: Entry { file_type: 2, descriptor: Stdout, rights_base: 136314954, rights_inheriting: 136314954, preopen_path: None }, 2: Entry { file_type: 2, descriptor: Stderr, rights_base: 136314954, rights_inheriting: 136314954, preopen_path: None }}\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_prestat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; fd=Fd(3)\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; buf=Dir(PrestatDir { pr_name_len: 1 })\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_prestat_dir_name&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1 &gt; fd=Fd(3) path=*guest 0x20010 path_len=1\n TRACE wasi_common::snapshots::wasi_snapshot_preview1 &gt;      | path=&#39;.&#39;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_prestat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; error=Badf\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_fdstat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(3)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; stat=Fdstat { fs_filetype: Directory, fs_flags: Fdflags(0), fs_rights_base: Rights(264240858), fs_rights_inheriting: Rights(268435455) }\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;path_open&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(3) dirflags=symlink_follow (0x1) path=*guest 0x400/8 oflags=creat|trunc (0x9) fs_rights_base=fd_datasync|fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_write|fd_advise|fd_allocate|path_create_directory|path_create_file|path_link_source|path_link_target|path_open|path_readlink|path_rename_source|path_rename_target|path_filestat_get|path_filestat_set_size|path_filestat_set_times|fd_filestat_get|fd_filestat_set_size|fd_filestat_set_times|path_symlink|path_remove_directory|path_unlink_file|poll_fd_readwrite (0xfffbffd) fs_rights_inherting=fd_datasync|fd_read|fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_write|fd_advise|fd_allocate|path_create_directory|path_create_file|path_link_source|path_link_target|path_open|fd_readdir|path_readlink|path_rename_source|path_rename_target|path_filestat_get|path_filestat_set_size|path_filestat_set_times|fd_filestat_get|fd_filestat_set_size|fd_filestat_set_times|path_symlink|path_remove_directory|path_unlink_file|poll_fd_readwrite (0xfffffff) fdflags=empty (0x0)\n TRACE wasi_common::snapshots::wasi_snapshot_preview1 &gt;      | needed_rights=HandleRights { base: path_create_file|path_open (0x2400), inheriting: fd_datasync|fd_read|fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_write|fd_advise|fd_allocate|path_create_directory|path_create_file|path_link_source|path_link_target|path_open|fd_readdir|path_readlink|path_rename_source|path_rename_target|path_filestat_get|path_filestat_set_size|path_filestat_set_times|fd_filestat_get|fd_filestat_set_size|fd_filestat_set_times|path_symlink|path_remove_directory|path_unlink_file|poll_fd_readwrite (0xfffffff) }\n TRACE wasi_common::path                              &gt;      | (path_ptr,path_len)=&#39;test.txt&#39;\n DEBUG wasi_common::path                              &gt; path_get cur_path = &quot;test.txt&quot;\n DEBUG wasi_common::path                              &gt; path_get path_stack = []\n DEBUG wasi_common::sys::windows::path                &gt; out_path=&quot;Z:\\\\home\\\\whitequark\\\\xxx\\\\build\\\\test.txt&quot;\n DEBUG wasi_common::sys::windows::path                &gt; readlinkat error=50\n TRACE wasi_common::snapshots::wasi_snapshot_preview1 &gt;      | calling path_open impl: read=false, write=true\n DEBUG wasi_common::sys::windows::path                &gt; out_path=&quot;Z:\\\\home\\\\whitequark\\\\xxx\\\\build\\\\test.txt&quot;\n DEBUG wasi_common::sys                               &gt; Created new instance of OsFile: OsFile { rights: Cell { value: HandleRights { base: Rights(148898303), inheriting: Rights(0) } }, handle: RawOsHandle(Cell { value: 0x64 }) }\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; opened_fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_fdstat_get&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; stat=Fdstat { fs_filetype: RegularFile, fs_flags: Fdflags(0), fs_rights_base: Rights(148898301), fs_rights_inheriting: Rights(0) }\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_write&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4) iovs=*guest 0x150b0/2\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; nwritten=16\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; wiggle abi; module=&quot;wasi_snapshot_preview1&quot; function=&quot;fd_close&quot;\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; fd=Fd(4)\n TRACE wasi_common::wasi::wasi_snapshot_preview1      &gt; success=No error occurred. System call completed successfully. (Errno::Success(0))\n</code></pre></div>\n\n\n</blockquote>",
        "id": 203516526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594392919
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009#issuecomment-656828530\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>An oflag of <code>CREAT | TRUNC</code> should result in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-common/src/sys/windows/mod.rs#L195\">a creation disposition flag of <code>CREATE_ALWAYS</code></a>.  That would normally be truncating the file if we were using the Windows API directly.</p>\n<p>However, I think the problem <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-common/src/sys/windows/path.rs#L227\">lies here</a> where we're converting the Windows disposition flag to a Rust <code>OpenOptions</code>.  That should probably have a <code>truncate(true)</code> on it.</p>\n</blockquote>",
        "id": 203543887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594406859
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Consider the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream ff;\n    ff.open(&quot;test.txt&quot;, std::ofstream::trunc);\n    ff &lt;&lt; &quot;bad bad bad bad\\n&quot;;\n    return 0;\n}\n</code></pre></div>\n\n\n<p>I've attached it here:  <a href=\"https://github.com/bytecodealliance/wasmtime/files/4903795/bad.zip\">bad.zip</a></p>\n<p>Open <code>test.txt</code> and put something like this there:</p>\n<div class=\"codehilite\"><pre><span></span><code>bad bad bad bad\nthis will remain here\n</code></pre></div>\n\n\n<p>Run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>wasmtime run --dir . bad.wasm\n</code></pre></div>\n\n\n<p>The file is not truncated.</p>\n</blockquote>",
        "id": 203544328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594407052
    },
    {
        "content": "<p>peterhuene labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Consider the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream ff;\n    ff.open(&quot;test.txt&quot;, std::ofstream::trunc);\n    ff &lt;&lt; &quot;bad bad bad bad\\n&quot;;\n    return 0;\n}\n</code></pre></div>\n\n\n<p>I've attached it here:  <a href=\"https://github.com/bytecodealliance/wasmtime/files/4903795/bad.zip\">bad.zip</a></p>\n<p>Open <code>test.txt</code> and put something like this there:</p>\n<div class=\"codehilite\"><pre><span></span><code>bad bad bad bad\nthis will remain here\n</code></pre></div>\n\n\n<p>Run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>wasmtime run --dir . bad.wasm\n</code></pre></div>\n\n\n<p>The file is not truncated.</p>\n</blockquote>",
        "id": 203544329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594407052
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009#issuecomment-656830056\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 203544365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594407067
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009#issuecomment-656846764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<blockquote>\n<p>However, I think the problem <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-common/src/sys/windows/path.rs#L227\">lies here</a> where we're converting the Windows disposition flag to a Rust <code>OpenOptions</code>. That should probably have a <code>truncate(true)</code> on it.</p>\n</blockquote>\n<p>Nope, that code doesn't even run (I put a panic in it).</p>\n</blockquote>",
        "id": 203547435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594408500
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009#issuecomment-656849352\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Sorry, I forgot a <code>--dir .</code> and the application silently crashed (because <code>-fno-exceptions</code>...). I can confirm that this fixes the bug.</p>\n</blockquote>",
        "id": 203548127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594408879
    },
    {
        "content": "<p>peterhuene closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2009\">Issue #2009</a>:</p>\n<blockquote>\n<p>Consider the following program:</p>\n<div class=\"codehilite\"><pre><span></span><code>#include &lt;fstream&gt;\n\nint main() {\n    std::ofstream ff;\n    ff.open(&quot;test.txt&quot;, std::ofstream::trunc);\n    ff &lt;&lt; &quot;bad bad bad bad\\n&quot;;\n    return 0;\n}\n</code></pre></div>\n\n\n<p>I've attached it here:  <a href=\"https://github.com/bytecodealliance/wasmtime/files/4903795/bad.zip\">bad.zip</a></p>\n<p>Open <code>test.txt</code> and put something like this there:</p>\n<div class=\"codehilite\"><pre><span></span><code>bad bad bad bad\nthis will remain here\n</code></pre></div>\n\n\n<p>Run it:</p>\n<div class=\"codehilite\"><pre><span></span><code>wasmtime run --dir . bad.wasm\n</code></pre></div>\n\n\n<p>The file is not truncated.</p>\n</blockquote>",
        "id": 203619514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594512684
    }
]