[
    {
        "content": "<p>bnjbvr edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2195\">PR #2195</a> from <code>x64-refactor</code> to <code>main</code>:</p>\n<blockquote>\n<ul>\n<li>First optimization matches addresses of the form <code>base+index+offset</code>, where <code>index</code> is a constant, and tries to add the constant with offset. This has been proven useful for some temporary variables computations in Spidermonkey (e.g. address of global values).</li>\n<li>Second optimization regenerates constants in new vregs in <code>put_input_to_reg</code>, minimizing their live ranges.</li>\n</ul>\n<p>There are a few bonus pieces here and there:</p>\n<ul>\n<li>fix a few places where regenerating constants would clobber the flags (b/o xor for 0 constants), by reordering calls to <code>put_input_in_reg</code> so they're before the comparison emission.</li>\n<li>fix the generation of R64 constants</li>\n<li>use a mov imm32 sign-extended to reg, whenever possible, when generating an i64 immediate.</li>\n</ul>\n<p>See also commit details.</p>\n<p>This is up to a 17% speedup in compile times of the embenchen micro benchmarks, and up to 10% reduction in runtime speed.</p>\n</blockquote>",
        "id": 209799850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599840087
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2195\">PR #2195</a> from <code>x64-refactor</code> to <code>main</code>:</p>\n<blockquote>\n<ul>\n<li>First optimization matches addresses of the form <code>base+index+offset</code>, where <code>index</code> is a constant, and tries to add the constant with offset. This has been proven useful for some temporary variables computations in Spidermonkey (e.g. address of global values).</li>\n<li>Second optimization regenerates constants in new vregs in <code>put_input_to_reg</code>, minimizing their live ranges.</li>\n</ul>\n<p>There are a few bonus pieces here and there:</p>\n<ul>\n<li>fix a few places where regenerating constants would clobber the flags (b/o xor for 0 constants), by reordering calls to <code>put_input_in_reg</code> so they're before the comparison emission.</li>\n<li>fix the generation of R64 constants</li>\n<li>use a mov imm32 sign-extended to reg, whenever possible, when generating an i64 immediate.</li>\n</ul>\n<p>See also commit details.</p>\n<p>This is up to a 17% speedup in compile times of the embenchen micro benchmarks, and up to 10% reduction in runtime speed.</p>\n</blockquote>",
        "id": 209801513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599840824
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2195#pullrequestreview-487026448\">PR Review</a>.</p>",
        "id": 209816842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599848484
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2195\">PR #2195</a>.</p>",
        "id": 209816856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1599848492
    }
]