[
    {
        "content": "<p>puremourning opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a> from <code>puremourning:c-api-debug-info</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In order to allow source level debugging of hosted webassembly code in C-based embeddings, we must enable the debug-builtins cargo feature when building the C api. This allows for embeddings of wasmtime in non-rust environments to benefit from the integration with <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb.html/JIT-Interface.html\">gdb/lldb's JIT debug interface</a>.</p>\n<p>Fixes #9909 </p>\n<hr>\n<p>Tests: I have tested this manually per the notes in the linked issue, and have single-stepped through the code to confirm it is behaving as I expect (I basically did a side-by side step through with an equivalent rust program linked with the default settings and <code>wasmtime</code> cargo dependency).</p>\n<p>I took a look at the automated tests and the most obvious place to add a regression test is <code>tests/all/debug/lldb.rs</code> or <code>tests/all/debug/gdb.rs</code>. I haven't done this yet because I don't see any other places where the c-api is currently tested and wonder if it's even simple to build such a test. Let me know if there's a good path to adding something.</p>\n</blockquote>",
        "id": 491267204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735555752
    },
    {
        "content": "<p><strong>puremourning</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>.</p>",
        "id": 491267205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735555752
    },
    {
        "content": "<p><strong>puremourning</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>.</p>",
        "id": 491267206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735555753
    },
    {
        "content": "<p>puremourning <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915#issuecomment-2565318488\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>:</p>\n<blockquote>\n<p>Well now, I see CI / Test C-API macos-latest in the CI runs.</p>\n<p>I'll dig further on how this is done.</p>\n</blockquote>",
        "id": 491267359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735555870
    },
    {
        "content": "<p>puremourning updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>.</p>",
        "id": 491270156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735557616
    },
    {
        "content": "<p>puremourning <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915#issuecomment-2565351048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>:</p>\n<blockquote>\n<p>OK I have a testing strategy. I can validate that the GDB structures are actually set up in the fib-debug/main.c.</p>\n<p>It's a little tacky so I've added as a second commit. The strategy is to validate the actual <code>__jit_debug_descriptor</code> that's created is non-NULL after instantiation.</p>\n<p>I have confirmed this test fails without my patch and passes with it.</p>\n</blockquote>",
        "id": 491270162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735557619
    },
    {
        "content": "<p>puremourning edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915#issuecomment-2565351048\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>:</p>\n<blockquote>\n<p>OK I have a testing strategy. I can validate that the GDB structures are actually set up in the fib-debug/main.c.</p>\n<p>It's a little hacky so I've added as a second commit. The strategy is to validate the actual <code>__jit_debug_descriptor</code> that's created is non-NULL after instantiation.</p>\n<p>I have confirmed this test fails without my patch and passes with it.</p>\n</blockquote>",
        "id": 491270194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735557638
    },
    {
        "content": "<p>puremourning edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915#issuecomment-2565351048\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>:</p>\n<blockquote>\n<p>OK I have a testing strategy. I can validate that the GDB structures are actually set up in the fib-debug/main.c.</p>\n<p>It's a little hacky so I've added as a second commit. The strategy is to validate the actual <code>__jit_debug_descriptor</code> that's created is non-NULL after instantiation. As these examples are used by other people, I have gated the code with a compile definition that's only set during the tests.</p>\n<p>I have confirmed this test fails without my patch and passes with it.</p>\n</blockquote>",
        "id": 491270237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735557674
    },
    {
        "content": "<p>puremourning updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>.</p>",
        "id": 491270273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735557703
    },
    {
        "content": "<p>puremourning edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>:</p>\n<blockquote>\n<p>In order to allow source level debugging of hosted webassembly code in C-based embeddings, we must enable the debug-builtins cargo feature when building the C api. This allows for embeddings of wasmtime in non-rust environments to benefit from the integration with <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb.html/JIT-Interface.html\">gdb/lldb's JIT debug interface</a>.</p>\n<p>Fixes #9909 </p>\n<hr>\n<p>Tests: I have tested this manually per the notes in the linked issue, and have single-stepped through the code to confirm it is behaving as I expect (I basically did a side-by side step through with an equivalent rust program linked with the default settings and <code>wasmtime</code> cargo dependency).</p>\n<p>For automated tests, I have a simple strategy: I can validate that the GDB structures are actually set up in the fib-debug/main.c. It's a little hacky so I've added as a second commit. The strategy is to validate the actual <code>__jit_debug_descriptor</code> that's created is non-NULL after instantiation. As these examples are used by other people, I have gated the code with a compile definition that's only set during the tests.</p>\n<p>I have confirmed this test fails without my patch and passes with it.</p>\n</blockquote>",
        "id": 491270741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735558035
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915#pullrequestreview-2525776144\">PR review</a>.</p>",
        "id": 491302544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735576380
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9915\">PR #9915</a>.</p>",
        "id": 491304486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1735577506
    }
]