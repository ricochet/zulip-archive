[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a> from <code>load_splat</code> to <code>main</code>:</p>\n<blockquote>\n<p>It corresponds to WebAssembly's <code>load*_splat</code> operations, which were previously represented as a combination of <code>Load</code> and <code>Splat</code> instructions. However, there are architectures such as Armv8-A that have a single machine instruction equivalent to the Wasm operations. In order to generate it, it is necessary to merge the <code>Load</code> and the <code>Splat</code> in the backend, which is not possible because the load may have side effects. The new IR instruction works around this limitation.</p>\n<p>The AArch64 backend leverages the new instruction to improve code generation. I am not really qualified to implement the optimization for x86, so I have added a temporary work-around to avoid any test breakage. It's a bit of a hack, but it should be incorrect only when cross-compiling to x86 on an Arm platform.</p>\n<p>Fixes #1175 (but other backends need work too).</p>\n<p>cc @abrown @cfallin</p>\n</blockquote>",
        "id": 212607449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602098810
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#pullrequestreview-504205742\">PR Review</a>.</p>",
        "id": 212608755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602099396
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#pullrequestreview-504213758\">PR Review</a>.</p>",
        "id": 212610168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602100105
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a> from <code>load_splat</code> to <code>main</code>:</p>\n<blockquote>\n<p>It corresponds to WebAssembly's <code>load*_splat</code> operations, which were previously represented as a combination of <code>Load</code> and <code>Splat</code> instructions. However, there are architectures such as Armv8-A that have a single machine instruction equivalent to the Wasm operations. In order to generate it, it is necessary to merge the <code>Load</code> and the <code>Splat</code> in the backend, which is not possible because the load may have side effects. The new IR instruction works around this limitation.</p>\n<p>The AArch64 backend leverages the new instruction to improve code generation. I am not really qualified to implement the optimization for x86, so I have added a temporary work-around to avoid any test breakage. It's a bit of a hack, but it should be incorrect only when cross-compiling to x86 on an Arm platform.</p>\n<p>Fixes #1175 (but other backends need work too).</p>\n<p>cc @abrown @cfallin</p>\n</blockquote>",
        "id": 212820654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602247851
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a> from <code>load_splat</code> to <code>main</code>:</p>\n<blockquote>\n<p>It corresponds to WebAssembly's <code>load*_splat</code> operations, which were previously represented as a combination of <code>Load</code> and <code>Splat</code> instructions. However, there are architectures such as Armv8-A that have a single machine instruction equivalent to the Wasm operations. In order to generate it, it is necessary to merge the <code>Load</code> and the <code>Splat</code> in the backend, which is not possible because the load may have side effects. The new IR instruction works around this limitation.</p>\n<p>The AArch64 backend leverages the new instruction to improve code generation. I am not really qualified to implement the optimization for x86, so I have added a temporary work-around to avoid any test breakage. It's a bit of a hack, but it should be incorrect only when cross-compiling to x86 on an Arm platform.</p>\n<p>Fixes #1175 (but other backends need work too).</p>\n<p>cc @abrown @cfallin</p>\n</blockquote>",
        "id": 213187239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602609033
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a> from <code>load_splat</code> to <code>main</code>:</p>\n<blockquote>\n<p>It corresponds to WebAssembly's <code>load*_splat</code> operations, which were previously represented as a combination of <code>Load</code> and <code>Splat</code> instructions. However, there are architectures such as Armv8-A that have a single machine instruction equivalent to the Wasm operations. In order to generate it, it is necessary to merge the <code>Load</code> and the <code>Splat</code> in the backend, which is not possible because the load may have side effects. The new IR instruction works around this limitation.</p>\n<p>The AArch64 backend leverages the new instruction to improve code generation. I am not really qualified to implement the optimization for x86, so I have added a temporary work-around to avoid any test breakage. It's a bit of a hack, but it should be incorrect only when cross-compiling to x86 on an Arm platform.</p>\n<p>Fixes #1175 (but other backends need work too).</p>\n<p>cc @abrown @cfallin</p>\n</blockquote>",
        "id": 213193274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602611934
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a> from <code>load_splat</code> to <code>main</code>:</p>\n<blockquote>\n<p>It corresponds to WebAssembly's <code>load*_splat</code> operations, which were previously represented as a combination of <code>Load</code> and <code>Splat</code> instructions. However, there are architectures such as Armv8-A that have a single machine instruction equivalent to the Wasm operations. In order to generate it, it is necessary to merge the <code>Load</code> and the <code>Splat</code> in the backend, which is not possible because the load may have side effects. The new IR instruction works around this limitation.</p>\n<p>The AArch64 backend leverages the new instruction to improve code generation. I am not really qualified to implement the optimization for x86, so I have added a temporary work-around to avoid any test breakage. It's a bit of a hack, but it should be incorrect only when cross-compiling to x86 on an Arm platform.</p>\n<p>Fixes #1175 (but other backends need work too).</p>\n<p>cc @abrown @cfallin</p>\n</blockquote>",
        "id": 213278590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602677383
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a> from <code>load_splat</code> to <code>main</code>:</p>\n<blockquote>\n<p>It corresponds to WebAssembly's <code>load*_splat</code> operations, which were previously represented as a combination of <code>Load</code> and <code>Splat</code> instructions. However, there are architectures such as Armv8-A that have a single machine instruction equivalent to the Wasm operations. In order to generate it, it is necessary to merge the <code>Load</code> and the <code>Splat</code> in the backend, which is not possible because the load may have side effects. The new IR instruction works around this limitation.</p>\n<p>The AArch64 backend leverages the new instruction to improve code generation. I am not really qualified to implement the optimization for x86, so I have added a temporary work-around to avoid any test breakage. It's a bit of a hack, but it should be incorrect only when cross-compiling to x86 on an Arm platform.</p>\n<p>Fixes #1175 (but other backends need work too).</p>\n<p>cc @abrown @cfallin</p>\n</blockquote>",
        "id": 213318368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1602693822
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278#pullrequestreview-519030474\">PR Review</a>.</p>",
        "id": 214888810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603914724
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2278\">PR #2278</a>.</p>",
        "id": 214889059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603914845
    }
]