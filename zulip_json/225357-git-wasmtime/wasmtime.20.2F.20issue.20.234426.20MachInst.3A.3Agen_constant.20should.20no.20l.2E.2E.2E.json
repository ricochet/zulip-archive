[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4426\">issue #4426</a>:</p>\n<blockquote>\n<p>In implementing SIMD support for s390x, I ran into an issue with the <code>MachInst::gen_constant</code> routine that all platforms currently have to define.  In a platform that otherwise fully uses ISLE for code generation, having to implement that <code>gen_constant</code> routine is annoying, since to achive full performance, we'd really have to duplicate all the various ways to optimally generate each particular constant.  Specifically vector constants, which I've now added, would have required significantly extending the <code>gen_constant</code> routine.</p>\n<p>Looking at the sources, it appears <code>gen_constant</code> is now solely used by the common <code>put_value_in_regs</code> routine.   I'm wondering if it wouldn't be better to handle constant rematerialization instead on the ISLE side, e.g. in the ISLE <code>put_in_regs</code> constructor?   That should hopefully allow backends to re-use the ISLE rules for constant emission they already have ...</p>\n<p>FYI @cfallin <br>\n</p>\n</blockquote>",
        "id": 289053521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657388374
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4426\">issue #4426</a>:</p>\n<blockquote>\n<p>In implementing SIMD support for s390x, I ran into an issue with the <code>MachInst::gen_constant</code> routine that all platforms currently have to define.  In a platform that otherwise fully uses ISLE for code generation, having to implement that <code>gen_constant</code> routine is annoying, since to achive full performance, we'd really have to duplicate all the various ways to optimally generate each particular constant.  Specifically vector constants, which I've now added, would have required significantly extending the <code>gen_constant</code> routine.</p>\n<p>Looking at the sources, it appears <code>gen_constant</code> is now solely used by the common <code>put_value_in_regs</code> routine.   I'm wondering if it wouldn't be better to handle constant rematerialization instead on the ISLE side, e.g. in the ISLE <code>put_in_regs</code> constructor?   That should hopefully allow backends to re-use the ISLE rules for constant emission they already have ...</p>\n<p>FYI @cfallin <br>\n</p>\n</blockquote>",
        "id": 289215610,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657556462
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4426\">issue #4426</a>:</p>\n<blockquote>\n<p>In implementing SIMD support for s390x, I ran into an issue with the <code>MachInst::gen_constant</code> routine that all platforms currently have to define.  In a platform that otherwise fully uses ISLE for code generation, having to implement that <code>gen_constant</code> routine is annoying, since to achive full performance, we'd really have to duplicate all the various ways to optimally generate each particular constant.  Specifically vector constants, which I've now added, would have required significantly extending the <code>gen_constant</code> routine.</p>\n<p>Looking at the sources, it appears <code>gen_constant</code> is now solely used by the common <code>put_value_in_regs</code> routine.   I'm wondering if it wouldn't be better to handle constant rematerialization instead on the ISLE side, e.g. in the ISLE <code>put_in_regs</code> constructor?   That should hopefully allow backends to re-use the ISLE rules for constant emission they already have ...</p>\n<p>FYI @cfallin <br>\n</p>\n</blockquote>",
        "id": 289215612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657556462
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4426#issuecomment-1180678971\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4426\">issue #4426</a>:</p>\n<blockquote>\n<p>This makes sense to me; the current architecture is basically a left over of incremental migration to ISLE.</p>\n</blockquote>",
        "id": 289224309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657560686
    },
    {
        "content": "<p>uweigand closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4426\">issue #4426</a>:</p>\n<blockquote>\n<p>In implementing SIMD support for s390x, I ran into an issue with the <code>MachInst::gen_constant</code> routine that all platforms currently have to define.  In a platform that otherwise fully uses ISLE for code generation, having to implement that <code>gen_constant</code> routine is annoying, since to achive full performance, we'd really have to duplicate all the various ways to optimally generate each particular constant.  Specifically vector constants, which I've now added, would have required significantly extending the <code>gen_constant</code> routine.</p>\n<p>Looking at the sources, it appears <code>gen_constant</code> is now solely used by the common <code>put_value_in_regs</code> routine.   I'm wondering if it wouldn't be better to handle constant rematerialization instead on the ISLE side, e.g. in the ISLE <code>put_in_regs</code> constructor?   That should hopefully allow backends to re-use the ISLE rules for constant emission they already have ...</p>\n<p>FYI @cfallin <br>\n</p>\n</blockquote>",
        "id": 315685642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1670965406
    }
]