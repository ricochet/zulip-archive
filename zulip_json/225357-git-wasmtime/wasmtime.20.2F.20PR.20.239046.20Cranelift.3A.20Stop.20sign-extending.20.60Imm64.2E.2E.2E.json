[
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455232001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722378353
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455232002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722378354
    },
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a> from <code>fitzgen:dont-sign-extend-in-iconst</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Originally, we sign-extended <code>Imm64</code> immediates from their controlling type var's width to <code>i64</code> in the builder methods for <code>BinaryImm64</code> and a couple other instruction formats: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1687\">https://github.com/bytecodealliance/wasmtime/pull/1687</a></p>\n<p>At some point, we decided that the unused bits in the <code>Imm64</code> when the controlling type var's width is less than 64 should be zero. And we started asserting that in various places, for example:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/87817f38a128caa76eaa6a3c3c8ceac81a329a3e/cranelift/codegen/src/machinst/lower.rs#L1237-L1243\">https://github.com/bytecodealliance/wasmtime/blob/87817f38a128caa76eaa6a3c3c8ceac81a329a3e/cranelift/codegen/src/machinst/lower.rs#L1237-L1243</a></p>\n<p>However, we never removed or updated the sign-extension code in the builder methods. This commit switches the builder methods over to masking the <code>Imm64</code> to just the valid bits, effectively doing a zero extend from the controlling type var's width instead of a sign extend.</p>\n<p>To avoid too much churn in tests, I made <code>display_inst</code> print the sign-extended-from-the-controlling-type-variable's-width value of <code>Imm64</code> immediates. I also made the <code>Display</code> implementation for <code>Imm64</code> always print in decimal form with a <code>-</code> for negative numbers, rather than the hex it would previously print for large negative numbers, so that <code>iconst.i32 0x8000_0000</code> doesn't display as <code>iconst.i32 0xffff_ffff_8000_0000</code>, which is otherwise pretty confusing.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 455232003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722378354
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046#pullrequestreview-2208828122\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for finding this inconsistency!</p>\n<p>A few minor nits below; my only other thought is that the rules around how we print seem a little convoluted, though I understand the goal in trying to preserve existing test expectations. The asymmetry (small positive numbers, or any negative number, are decimal) somehow doesn't sit right with me. I think I'd almost rather take a one-time diff and pick something more consistent -- always hex? Always decimal? Always decimal but with hex in a comment (like we do for constants now e.g. <code>; v0 = 0</code>)?</p>\n<p>Feel free to disregard my bikeshed color preferences; just my thoughts as long as we're here :-)</p>\n</blockquote>",
        "id": 455234809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722379763
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046#pullrequestreview-2208828122\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for finding this inconsistency!</p>\n<p>A few minor nits below; my only other thought is that the rules around how we print seem a little convoluted, though I understand the goal in trying to preserve existing test expectations. The asymmetry (small positive numbers, or any negative number, are decimal) somehow doesn't sit right with me. I think I'd almost rather take a one-time diff and pick something more consistent -- always hex? Always decimal? Always decimal but with hex in a comment (like we do for constants now e.g. <code>; v0 = 0</code>)?</p>\n<p>Feel free to disregard my bikeshed color preferences; just my thoughts as long as we're here :-)</p>\n</blockquote>",
        "id": 455234810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722379763
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046#discussion_r1697680807\">PR review comment</a>:</p>\n<blockquote>\n<p>To fit with the other operator methods (e.g. <code>wrapping_neg</code>), can we do functional style here (<code>fn mask_to_width(self, bit_width: u32) -&gt; Self</code>)?</p>\n</blockquote>",
        "id": 455234811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722379763
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046#discussion_r1697679755\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we rename the boolean on this if-block (<code>imms_need_sign_extension</code>) as well to something that fits the new scheme?</p>\n</blockquote>",
        "id": 455234812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722379763
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455237476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722381339
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046#issuecomment-2259354372\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>:</p>\n<blockquote>\n<blockquote>\n<p>The asymmetry (small positive numbers, or any negative number, are decimal) somehow doesn't sit right with me. I think I'd almost rather take a one-time diff and pick something more consistent -- always hex? Always decimal? Always decimal but with hex in a comment (like we do for constants now e.g. <code>; v0 = 0</code>)?</p>\n</blockquote>\n<p>Agreed. I'll look into this as a follow up, rather than doing it in this PR.</p>\n</blockquote>",
        "id": 455237546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722381366
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455237567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722381375
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455245735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722383815
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455245736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722383815
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455245737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722383815
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9046\">PR #9046</a>.</p>",
        "id": 455248203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1722385235
    }
]