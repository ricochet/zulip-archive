[
    {
        "content": "<p>T0b1-iOS opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>:</p>\n<blockquote>\n<p>Currently, there is not really a way to efficiently detect arithmetic over/underflow which some ISAs (in particular x64) allow and can be important. For example, I'm currently trialing Cranelift as a backend in a database system which needs efficient overflow handling.<br>\nThere also seems to be more general interest in overflow detection (see #1044).</p>\n<p>This PR adds instructions for unsigned and signed add/sub/mul which return a second output indicating overflow.<br>\n<code>add</code>/<code>sub</code> support 8 through 128 bit integers while the <code>mul</code> variants only support up to 64 bit integers. (That's because the most efficient implementation for <code>umul_overflow</code> with 128bit integers is along the lines of 50 instructions on x64 at which point it is probably better to emit a function call).<br>\nI left <code>iadd_cout</code> and friends untouched as the semantics are a bit confusing right now, e.g. <code>iadd_cout</code> seems to be indicating signed overflow while the pseudocode in the description describes unsigned overflow). </p>\n<p>In detail, this PR adds:</p>\n<ul>\n<li><code>{u,s}{add,sub,mul}_overflow</code> with an implementation in the interpreter (I hope the naming convention is ok)</li>\n<li>runtests for these instructions</li>\n<li>support for 8/16 bit operands for <code>AluRmiR</code>/<code>AluRM</code> instructions in the x64 backend</li>\n<li>support for the usigned <code>mul</code> instruction on x64</li>\n<li>support for <code>UMAddL</code>/<code>SMAddL</code> instructions in the aarch64 backend</li>\n<li>lowerings of <code>{u,s}{add,sub,mul}_overflow</code> for x64 and aarch64</li>\n</ul>\n<p>Currently, there are no emit tests since they were not important for the initial testing and I would like to know whether there is interest in these instructions being included first.<br>\nAdditionally, the 128bit lowerings currently forego the flag helpers since they are, as far as I can tell, not really designed to produce three outputs so getting both the low/high part of an addition and the dst reg for a setcc seemed a bit complicated.<br>\nI also do not have a lot of knowledge about RV64/S390X so I don't think I can provide lowerings there.</p>\n</blockquote>",
        "id": 327917663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676432494
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344405691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679713934
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344406736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679714830
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344551921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679776600
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344554355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679778345
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344554483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679778446
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344554841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679778731
    },
    {
        "content": "<p><strong>T0b1-iOS</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> as ready for review.</p>",
        "id": 344561569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679783565
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344727673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679874475
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1358944973\">PR review</a>.</p>",
        "id": 344841547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679918287
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149198062\">PR review comment</a>:</p>\n<blockquote>\n<p>This description does not seem correct, since we use <code>ints(Interval::All)</code> below, which does include I128's.</p>\n<p>The descriptions for <code>umul_overflow</code>/<code>smul_overflow</code> also state something similar.</p>\n</blockquote>",
        "id": 344841548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679918287
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1358944973\">PR review</a>.</p>",
        "id": 344841549,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679918287
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359710482\">PR review</a>.</p>",
        "id": 344951875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359710482\">PR review</a>.</p>",
        "id": 344951877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149681620\">PR review comment</a>:</p>\n<blockquote>\n<p>s/a arithmetic/an arithmetic/</p>\n</blockquote>",
        "id": 344951880,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149681444\">PR review comment</a>:</p>\n<blockquote>\n<p>small style nit, but I prefer a more functional style here, where instead of a <code>mut</code> binding, we do <code>let (op, size) = match alu_op { ... }</code> and produce original <code>size</code> or an overridden one in each match arm.</p>\n</blockquote>",
        "id": 344951881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149688421\">PR review comment</a>:</p>\n<blockquote>\n<p>It's somewhat surprising here that we take an arbitrary <code>Cond</code>, given that the helper name is specifically \"overflow\"-related; could we document which <code>Cond</code>s we expect, or if it's only one in practice, just name it directly?</p>\n</blockquote>",
        "id": 344951882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149685165\">PR review comment</a>:</p>\n<blockquote>\n<p>I usually prefer to avoid <code>bool</code> flags unless the meaning is really clear from the name. Here it's not clear from the name whether <code>true</code> means zero or sign-extend. (And we've had one CVE from confusing these so the difference is important!) Could we define a purpose-built enum with <code>Zero</code> and <code>Sign</code> arms, if we don't have one elsewhere that we can use, and use it here and in callers as appropriate?</p>\n</blockquote>",
        "id": 344951883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149687487\">PR review comment</a>:</p>\n<blockquote>\n<p>We usually use the terminology \"narrow\" to describe types narrower than the native operator/instruction width. Not a huge deal but probably nice for future readability.</p>\n</blockquote>",
        "id": 344951884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149690132\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's extend the helper so we can -- it's the way we use to avoid subtle bugs from out-of-order <code>emit</code>s and unexpected side-effects.</p>\n</blockquote>",
        "id": 344951886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149696402\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there any reason we can't use the ordinary <code>mul</code> in the <code>AluRmiR</code>? Alternately, if we do this, we should remove it completely from <code>AluRmiROpcode</code> and switch uses over -- there shouldn't be two different ways to build a MachInst for it.</p>\n</blockquote>",
        "id": 344951887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149700130\">PR review comment</a>:</p>\n<blockquote>\n<p>Here as well, let's extend <code>with_flags</code> rather than doing an ad-hoc <code>emit</code>.</p>\n</blockquote>",
        "id": 344951888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149702383\">PR review comment</a>:</p>\n<blockquote>\n<p>It might make the tests a little easier to read and maintain if we use multiple-returns here -- if we return <code>-&gt; i128, i8</code> and compare against <code>[val, of]</code> we can collapse this with the below. See e.g. <code>runtests/i128-concat-split.clif</code> for an example.</p>\n</blockquote>",
        "id": 344951889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945336
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359845423\">PR review</a>.</p>",
        "id": 344964691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679949939
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149772965\">PR review comment</a>:</p>\n<blockquote>\n<p><code>AluRmiROpcode.Mul</code> is a signed multiply, it emits <code>imul</code>. This one emits <code>mul</code>, which is unsigned multiplication. I added it as a new MachInst since the implementation for the <code>AluRmiR</code> mul operation states that it is freeloaded into the MachInst and doesn't really fit it already so I didn't add a <code>AluRmiROpcode.UMul</code>.</p>\n</blockquote>",
        "id": 344964694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679949941
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149782178\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah! I had missed that difference; thanks. This is indeed fine then.</p>\n</blockquote>",
        "id": 344966307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679950565
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359858245\">PR review</a>.</p>",
        "id": 344966309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679950565
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359925454\">PR review</a>.</p>",
        "id": 344974425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954183
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149827975\">PR review comment</a>:</p>\n<blockquote>\n<p>The problem is that currently <code>with_flags</code> returns a <code>ValueRegs</code> which can hold at max 2 values but the 128bit implementations for the overflow ops would need three return values.<br>\nSo I could change the <code>with_flags</code> helper to return an <code>InstOutput</code> maybe and change all the places it's used to accomodate this but that would probably be quite a big change.<br>\nOr should I simply implement a new helper (e.g. <code>with_flags_extended</code>) that can return an <code>InstOutput</code>?<br>\nAnd should I use <code>InstOutput</code> or create a new type to handle more than one <code>ValueRegs</code>. Though I think the notion of <code>InstOuput</code> with multiple <code>ValueRegs</code> is already quite fitting.<br>\n</p>\n</blockquote>",
        "id": 344974426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954183
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a> from <code>arith_of</code> to <code>main</code>.</p>",
        "id": 344975745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954854
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359936483\">PR review</a>.</p>",
        "id": 344975840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954900
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149835523\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for catching that, it should be correct now. I also added your changes for the fuzzer.</p>\n</blockquote>",
        "id": 344975842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954900
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359937066\">PR review</a>.</p>",
        "id": 344975881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954932
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149835929\">PR review comment</a>:</p>\n<blockquote>\n<p>I added a description which conditions are used.</p>\n</blockquote>",
        "id": 344975882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954933
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359937332\">PR review</a>.</p>",
        "id": 344975920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954949
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149836103\">PR review comment</a>:</p>\n<blockquote>\n<p>I changed that.</p>\n</blockquote>",
        "id": 344975921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954950
    },
    {
        "content": "<p>T0b1-iOS edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149836103\">PR review comment</a>.</p>",
        "id": 344975950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679954965
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359939266\">PR review</a>.</p>",
        "id": 344976162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679955074
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149837449\">PR review comment</a>:</p>\n<blockquote>\n<p>I changed it to use the <code>ArgumentExtension</code> enum which I thought is fitting enough. I also changed the <code>lower_extend_op</code> helper to use <code>ArgumentExtension</code> since that was using a <code>bool</code> before also. </p>\n</blockquote>",
        "id": 344976163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679955075
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1359941086\">PR review</a>.</p>",
        "id": 344976409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679955194
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1149838642\">PR review comment</a>:</p>\n<blockquote>\n<p>I changed the description. Is it better now?</p>\n</blockquote>",
        "id": 344976410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679955195
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1362091020\">PR review</a>.</p>",
        "id": 345266950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680049464
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1151277037\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm -- yeah, <code>with_flags_extended</code> seems like a better option here.</p>\n</blockquote>",
        "id": 345266951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680049465
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1362091707\">PR review</a>.</p>",
        "id": 345267049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680049537
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1151277580\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, thanks!</p>\n</blockquote>",
        "id": 345267050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680049537
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1362091845\">PR review</a>.</p>",
        "id": 345267070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680049550
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1151277678\">PR review comment</a>:</p>\n<blockquote>\n<p>Much better, thank you!</p>\n</blockquote>",
        "id": 345267071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680049551
    },
    {
        "content": "<p><strong>T0b1-iOS</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 346667190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680552419
    },
    {
        "content": "<p><strong>T0b1-iOS</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 346667192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680552419
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 346667194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680552419
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1156410013\">PR review comment</a>:</p>\n<blockquote>\n<p>I added the helper now. I added a new <code>ProducesFlags</code> variant that combines two <code>ProducesFlagsReturnsResultWithConsumer</code>. I also added a few helper to extract the values out of the <code>InstOutput</code> afterwards which involves a bit of trickery to extract <code>ValueRegs</code> from it using a reference. You might want to look at that (all that mentions <code>InstOutputRef</code>).<br>\nI also renamed <code>produces_flags_append</code> to <code>produces_flags_concat</code> to be in-line with <code>consumes_flags_concat</code>.</p>\n</blockquote>",
        "id": 346667536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680552528
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1369729533\">PR review</a>.</p>",
        "id": 346667540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680552529
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1369801714\">PR review</a>.</p>",
        "id": 346678885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680555972
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1369801714\">PR review</a>.</p>",
        "id": 346678886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680555972
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1156457276\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, now that I see this with <code>InstOutputRef</code>, I don't think this is very readable either; making the \"extended\" variant of the combinator take <em>only</em> the specific combination we need feels odd too. The second <code>ProducesFlags</code> also consumes flags from the previous op, which makes it a bit of an impedance mismatch too.</p>\n<p>I think something like this would (finally!) work though:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">MultiReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Three</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">with_flags_chain</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ProducesFlags</span><span class=\"w\"> </span><span class=\"n\">ProducesAndConsumesFlags</span><span class=\"w\"> </span><span class=\"n\">ConsumesFlags</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">MultiReg</span><span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">turns</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">adcs</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">aarch64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">add</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ProducesAndConsumesFlags</span><span class=\"err\">`</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">then</span>:\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">pair_and_single</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MultiReg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">InstOutput</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pair_and_single</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MultiReg</span><span class=\"p\">.</span><span class=\"n\">Three</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">output_pair</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_regs</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>does that seem reasonable?</p>\n</blockquote>",
        "id": 346678887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680555973
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1369846454\">PR review</a>.</p>",
        "id": 346685120,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680558601
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1156487632\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>The second <code>ProducesFlags</code> also consumes flags from the previous op, which makes it a bit of an impedance mismatch too.<br>\nThat is true, though the <code>ccmp</code> constructor on arm does the same thing with <code>ProducesFlagsTwiceSideEffect</code>.</p>\n</blockquote>\n<p>The rest is reasonable, i guess, though I'd need to implement more generic inst constructors for <code>alu_rmi_r</code>/<code>alu_rrr</code> that construct a <code>ConsumesAndProducesFlags</code> (probably better ordered like that) since the helpers do not know which alu op they are constructing specifically.</p>\n</blockquote>",
        "id": 346685121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680558601
    },
    {
        "content": "<p>T0b1-iOS edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1156487632\">PR review comment</a>.</p>",
        "id": 346685181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680558609
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 347930435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680996813
    },
    {
        "content": "<p>T0b1-iOS submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1376816240\">PR review</a>.</p>",
        "id": 347930575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680996931
    },
    {
        "content": "<p>T0b1-iOS created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#discussion_r1161170286\">PR review comment</a>:</p>\n<blockquote>\n<p>I replaced the old change with what you proposed. It supports more combinations now, though that ended up in a lot of copypaste.</p>\n</blockquote>",
        "id": 347930576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680996931
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784#pullrequestreview-1379868231\">PR review</a>.</p>",
        "id": 348537231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681238256
    },
    {
        "content": "<p>T0b1-iOS updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 348549689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681242242
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 348554550,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681244134
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5784\">PR #5784</a>.</p>",
        "id": 348560298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681246420
    }
]