[
    {
        "content": "<p>7Hazard labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>Using the C API, defining imports with the Linker do not work properly. When attempting to instantiate the module in question, it errors with the following:<br>\n<code>unknown import: `env::Test` has not been defined</code></p>\n<p>This is how the module is attempted to be instantiated:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span> <span class=\"n\">trap</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">wasm_instance_t</span><span class=\"o\">*</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasm_engine_t</span><span class=\"o\">*</span> <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">wasm_engine_new</span><span class=\"p\">();</span>\n<span class=\"n\">wasm_store_t</span><span class=\"o\">*</span> <span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">wasm_store_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_t</span><span class=\"o\">*</span> <span class=\"n\">linker</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Read wasm file</span>\n<span class=\"n\">wasm_byte_vec_t</span> <span class=\"n\">wasm</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ifstream</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s\">&quot;wasmtest.wasm&quot;</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">ate</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;File wasmtest.wasm bad&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">auto</span> <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">tellg</span><span class=\"p\">();</span>\n<span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">seekg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">beg</span><span class=\"p\">);</span>\n<span class=\"n\">wasm_byte_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Could not read file&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Compile module</span>\n<span class=\"n\">wasm_module_t</span><span class=\"o\">*</span> <span class=\"k\">module</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_module_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to compile module&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">wasm_byte_vec_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// MAKE IMPORTS</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"k\">import</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span><span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello world&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"n\">wasm_valtype_vec_t</span> <span class=\"n\">types</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_valtype_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_functype_t</span> <span class=\"o\">*</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">wasm_functype_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">extern_</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span>\n\n    <span class=\"n\">wasm_name_t</span> <span class=\"k\">module</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"s\">&quot;env&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_t</span> <span class=\"n\">func</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s\">&quot;Test&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">extern_</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// INSTANTIATE MODULE</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">||</span> <span class=\"n\">trap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to instantiate module&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">trap</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>This is the module that is being attempted to be loaded (compiled with clang):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"kt\">void</span> <span class=\"n\">Test</span><span class=\"p\">();</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Test</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The imports in the wat looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>(type $t0 (func))\n(type $t1 (func (param i32) (result i32)))\n(import &quot;env&quot; &quot;Test&quot; (func $Test (type $t0)))\n</code></pre></div>\n\n\n<p>This was tested on Windows 10, using the C API build from <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0</a>.</p>\n</blockquote>",
        "id": 210654243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600587326
    },
    {
        "content": "<p>7Hazard opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>Using the C API, defining imports with the Linker do not work properly. When attempting to instantiate the module in question, it errors with the following:<br>\n<code>unknown import: `env::Test` has not been defined</code></p>\n<p>This is how the module is attempted to be instantiated:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span> <span class=\"n\">trap</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">wasm_instance_t</span><span class=\"o\">*</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasm_engine_t</span><span class=\"o\">*</span> <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">wasm_engine_new</span><span class=\"p\">();</span>\n<span class=\"n\">wasm_store_t</span><span class=\"o\">*</span> <span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">wasm_store_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_t</span><span class=\"o\">*</span> <span class=\"n\">linker</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Read wasm file</span>\n<span class=\"n\">wasm_byte_vec_t</span> <span class=\"n\">wasm</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ifstream</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s\">&quot;wasmtest.wasm&quot;</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">ate</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;File wasmtest.wasm bad&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">auto</span> <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">tellg</span><span class=\"p\">();</span>\n<span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">seekg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">beg</span><span class=\"p\">);</span>\n<span class=\"n\">wasm_byte_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Could not read file&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Compile module</span>\n<span class=\"n\">wasm_module_t</span><span class=\"o\">*</span> <span class=\"k\">module</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_module_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to compile module&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">wasm_byte_vec_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// MAKE IMPORTS</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"k\">import</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span><span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello world&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"n\">wasm_valtype_vec_t</span> <span class=\"n\">types</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_valtype_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_functype_t</span> <span class=\"o\">*</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">wasm_functype_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">extern_</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span>\n\n    <span class=\"n\">wasm_name_t</span> <span class=\"k\">module</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"s\">&quot;env&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_t</span> <span class=\"n\">func</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s\">&quot;Test&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">extern_</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// INSTANTIATE MODULE</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">||</span> <span class=\"n\">trap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to instantiate module&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">trap</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>This is the module that is being attempted to be loaded (compiled with clang):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"kt\">void</span> <span class=\"n\">Test</span><span class=\"p\">();</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Test</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The imports in the wat looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>(type $t0 (func))\n(type $t1 (func (param i32) (result i32)))\n(import &quot;env&quot; &quot;Test&quot; (func $Test (type $t0)))\n</code></pre></div>\n\n\n<p>This was tested on Windows 10, using the C API build from <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0</a>.</p>\n</blockquote>",
        "id": 210654244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600587326
    },
    {
        "content": "<p>7Hazard edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>Using the C API, defining imports with the Linker do not work properly. When attempting to instantiate the module in question, it errors with the following:<br>\n<code>unknown import: `env::Test` has not been defined</code></p>\n<p>This is how the module is attempted to be instantiated:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span> <span class=\"n\">trap</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">wasm_instance_t</span><span class=\"o\">*</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasm_engine_t</span><span class=\"o\">*</span> <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">wasm_engine_new</span><span class=\"p\">();</span>\n<span class=\"n\">wasm_store_t</span><span class=\"o\">*</span> <span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">wasm_store_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_t</span><span class=\"o\">*</span> <span class=\"n\">linker</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Read wasm file</span>\n<span class=\"n\">wasm_byte_vec_t</span> <span class=\"n\">wasm</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ifstream</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s\">&quot;wasmtest.wasm&quot;</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">ate</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;File wasmtest.wasm bad&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">auto</span> <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">tellg</span><span class=\"p\">();</span>\n<span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">seekg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">beg</span><span class=\"p\">);</span>\n<span class=\"n\">wasm_byte_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Could not read file&quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Compile module</span>\n<span class=\"n\">wasm_module_t</span><span class=\"o\">*</span> <span class=\"k\">module</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_module_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to compile module&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">wasm_byte_vec_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// MAKE IMPORTS</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"k\">import</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span><span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello world&quot;</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"n\">wasm_valtype_vec_t</span> <span class=\"n\">types</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_valtype_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_functype_t</span> <span class=\"o\">*</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">wasm_functype_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">extern_</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span>\n\n    <span class=\"n\">wasm_name_t</span> <span class=\"k\">module</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"s\">&quot;env&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_t</span> <span class=\"n\">func</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s\">&quot;Test&quot;</span><span class=\"p\">);</span>\n    <span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">extern_</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// INSTANTIATE MODULE</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">||</span> <span class=\"n\">trap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">&quot;Failed to instantiate module&quot;</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">trap</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>This is the module that is being attempted to be loaded (compiled with clang):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"kt\">void</span> <span class=\"n\">Test</span><span class=\"p\">();</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">&quot;C&quot;</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Test</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>The imports in the wat looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>(type $t0 (func))\n(import &quot;env&quot; &quot;Test&quot; (func $Test (type $t0)))\n</code></pre></div>\n\n\n<p>This was tested on Windows 10, using the C API build from <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0</a>.</p>\n</blockquote>",
        "id": 210654250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600587351
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211#issuecomment-696868194\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>Thanks for the report! The issue here is somewhat subtle and unfortunate. The <code>wasm_name_new_from_string</code> function will have the length of the name including the terminating nul character, but the <code>wasmtime_linker_define</code> API does not expect the nul character to be included, so the name you're defining is actually <code>(\"env\\u{0}\", \"Test\\u{0}\")</code>, which isn't what you want here.</p>\n</blockquote>",
        "id": 210904620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600795905
    },
    {
        "content": "<p>7Hazard <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211#issuecomment-696994156\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>I see, indeed it was very subtle. However wouldn't this be a defect for <code>wasm_name_new_from_string</code> as an API function? I'm not sure if there are other purposes for <code>wasm_name_new_from_string</code> and <code>wasm_name_t</code>.</p>\n</blockquote>",
        "id": 210933954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600810394
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211#issuecomment-698655340\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>I believe the upstream API was adjusted in <a href=\"https://github.com/WebAssembly/wasm-c-api/pull/151\">https://github.com/WebAssembly/wasm-c-api/pull/151</a>, and we haven't pulled in that update yet.</p>\n</blockquote>",
        "id": 211206249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1600993770
    },
    {
        "content": "<p>Dakror <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211#issuecomment-758891406\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>Could this be addressed? The fix of pulling upstream should be trivial, no?</p>\n</blockquote>",
        "id": 222483917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610480559
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>Using the C API, defining imports with the Linker do not work properly. When attempting to instantiate the module in question, it errors with the following:<br>\n<code>unknown import: `env::Test` has not been defined</code></p>\n<p>This is how the module is attempted to be instantiated:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span> <span class=\"n\">trap</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">wasm_instance_t</span><span class=\"o\">*</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasm_engine_t</span><span class=\"o\">*</span> <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">wasm_engine_new</span><span class=\"p\">();</span>\n<span class=\"n\">wasm_store_t</span><span class=\"o\">*</span> <span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">wasm_store_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_t</span><span class=\"o\">*</span> <span class=\"n\">linker</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Read wasm file</span>\n<span class=\"n\">wasm_byte_vec_t</span> <span class=\"n\">wasm</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ifstream</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s\">\"wasmtest.wasm\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">ate</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"File wasmtest.wasm bad\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">auto</span> <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">tellg</span><span class=\"p\">();</span>\n<span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">seekg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">beg</span><span class=\"p\">);</span>\n<span class=\"n\">wasm_byte_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Could not read file\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Compile module</span>\n<span class=\"n\">wasm_module_t</span><span class=\"o\">*</span> <span class=\"k\">module</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_module_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to compile module\"</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">wasm_byte_vec_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// MAKE IMPORTS</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"k\">import</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span><span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Hello world\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"n\">wasm_valtype_vec_t</span> <span class=\"n\">types</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_valtype_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_functype_t</span> <span class=\"o\">*</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">wasm_functype_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">extern_</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span>\n\n    <span class=\"n\">wasm_name_t</span> <span class=\"k\">module</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"s\">\"env\"</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_t</span> <span class=\"n\">func</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s\">\"Test\"</span><span class=\"p\">);</span>\n    <span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">extern_</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// INSTANTIATE MODULE</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">||</span> <span class=\"n\">trap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to instantiate module\"</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">trap</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is the module that is being attempted to be loaded (compiled with clang):</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"kt\">void</span> <span class=\"n\">Test</span><span class=\"p\">();</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Test</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The imports in the wat looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(type $t0 (func))\n(import \"env\" \"Test\" (func $Test (type $t0)))\n</code></pre></div>\n<p>This was tested on Windows 10, using the C API build from <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0</a>.</p>\n</blockquote>",
        "id": 222530670,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610510790
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211#issuecomment-759191583\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a>:</p>\n<blockquote>\n<p>We should be able to update the Wasmtime C API to fix this now.  I'll try to get a fix up tomorrow.</p>\n<p>You should be able to work around the issue using <code>wasm_name_new</code> with the current implementation, if needed.</p>\n</blockquote>",
        "id": 222530730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610510850
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2211\">Issue #2211</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>Using the C API, defining imports with the Linker do not work properly. When attempting to instantiate the module in question, it errors with the following:<br>\n<code>unknown import: `env::Test` has not been defined</code></p>\n<p>This is how the module is attempted to be instantiated:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span> <span class=\"n\">trap</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">wasm_instance_t</span><span class=\"o\">*</span> <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasm_engine_t</span><span class=\"o\">*</span> <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">wasm_engine_new</span><span class=\"p\">();</span>\n<span class=\"n\">wasm_store_t</span><span class=\"o\">*</span> <span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">wasm_store_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">wasmtime_linker_t</span><span class=\"o\">*</span> <span class=\"n\">linker</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Read wasm file</span>\n<span class=\"n\">wasm_byte_vec_t</span> <span class=\"n\">wasm</span><span class=\"p\">;</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ifstream</span> <span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s\">\"wasmtest.wasm\"</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">binary</span> <span class=\"o\">|</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">ate</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">good</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"File wasmtest.wasm bad\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">auto</span> <span class=\"n\">filesize</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">tellg</span><span class=\"p\">();</span>\n<span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">seekg</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">beg</span><span class=\"p\">);</span>\n<span class=\"n\">wasm_byte_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">filesize</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Could not read file\"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Compile module</span>\n<span class=\"n\">wasm_module_t</span><span class=\"o\">*</span> <span class=\"k\">module</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_module_new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"k\">nullptr</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to compile module\"</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"k\">nullptr</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">wasm_byte_vec_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// MAKE IMPORTS</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">auto</span> <span class=\"k\">import</span> <span class=\"o\">=</span> <span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">args</span><span class=\"p\">[],</span> <span class=\"n\">wasm_val_t</span> <span class=\"n\">results</span><span class=\"p\">[])</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_trap_t</span><span class=\"o\">*</span><span class=\"p\">{</span>\n        <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Hello world\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n    <span class=\"n\">wasm_valtype_vec_t</span> <span class=\"n\">types</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_valtype_vec_new_uninitialized</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_functype_t</span> <span class=\"o\">*</span><span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"n\">wasm_functype_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">types</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"k\">import</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">extern_</span> <span class=\"o\">=</span> <span class=\"n\">wasm_func_as_extern</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">);</span>\n\n    <span class=\"n\">wasm_name_t</span> <span class=\"k\">module</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"s\">\"env\"</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_t</span> <span class=\"n\">func</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s\">\"Test\"</span><span class=\"p\">);</span>\n    <span class=\"n\">wasmtime_linker_define</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">extern_</span><span class=\"p\">);</span>\n    <span class=\"n\">wasm_name_delete</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// INSTANTIATE MODULE</span>\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_instantiate</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span> <span class=\"k\">module</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error</span> <span class=\"o\">||</span> <span class=\"n\">trap</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">logWasmError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to instantiate module\"</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">trap</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is the module that is being attempted to be loaded (compiled with clang):</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"kt\">void</span> <span class=\"n\">Test</span><span class=\"p\">();</span>\n\n<span class=\"k\">extern</span> <span class=\"s\">\"C\"</span> <span class=\"kt\">void</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">Test</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The imports in the wat looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"wat\"><pre><span></span><code>(type $t0 (func))\n(import \"env\" \"Test\" (func $Test (type $t0)))\n</code></pre></div>\n<p>This was tested on Windows 10, using the C API build from <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v0.19.0</a>.</p>\n</blockquote>",
        "id": 222733860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610638574
    }
]