[
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p><code>cargo run --bin wasmtime -- run -g --enable-simd --disable-cache /codecbench-simd.wasm</code></p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `1`,\n right: `0`&#39;, crates/debug/src/transform/expression.rs:330:13\nstack backtrace:\n...\n12: std::panicking::begin_panic_fmt\n             at src/libstd/panicking.rs:326\n  13: wasmtime_debug::transform::expression::compile_expression\n             at crates/debug/src/transform/expression.rs:330\n  14: wasmtime_debug::transform::unit::clone_unit\n             at crates/debug/src/transform/unit.rs:302\n  15: wasmtime_debug::transform::transform_dwarf\n             at crates/debug/src/transform/mod.rs:90\n  16: wasmtime_debug::emit_debugsections_image\n             at crates/debug/src/lib.rs:82\n  17: wasmtime_jit::compiler::Compiler::compile\n             at crates/jit/src/compiler.rs:215\n  18: wasmtime_jit::instantiate::RawCompiledModule::new\n             at crates/jit/src/instantiate.rs:83\n</pre></div>\n\n\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p><a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> </p>\n<ul>\n<li>If relevant, can you include some extra information about your environment? (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I built the attached Wasm file with <code>/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -g -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm</code></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\">codecbench-simd.txt</a></p>\n</blockquote>",
        "id": 191796443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585163174
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p><code>cargo run --bin wasmtime -- run -g --enable-simd --disable-cache /codecbench-simd.wasm</code></p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `1`,\n right: `0`&#39;, crates/debug/src/transform/expression.rs:330:13\nstack backtrace:\n...\n12: std::panicking::begin_panic_fmt\n             at src/libstd/panicking.rs:326\n  13: wasmtime_debug::transform::expression::compile_expression\n             at crates/debug/src/transform/expression.rs:330\n  14: wasmtime_debug::transform::unit::clone_unit\n             at crates/debug/src/transform/unit.rs:302\n  15: wasmtime_debug::transform::transform_dwarf\n             at crates/debug/src/transform/mod.rs:90\n  16: wasmtime_debug::emit_debugsections_image\n             at crates/debug/src/lib.rs:82\n  17: wasmtime_jit::compiler::Compiler::compile\n             at crates/jit/src/compiler.rs:215\n  18: wasmtime_jit::instantiate::RawCompiledModule::new\n             at crates/jit/src/instantiate.rs:83\n</pre></div>\n\n\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p><a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> </p>\n<ul>\n<li>If relevant, can you include some extra information about your environment? (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I built the attached Wasm file with <code>/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -g -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm</code></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\">codecbench-simd.txt</a></p>\n</blockquote>",
        "id": 191796444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585163174
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p><code>cargo run -- run -g --enable-simd --disable-cache codecbench-simd.wasm</code> (see attached file at bottom)</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `1`,\n right: `0`&#39;, crates/debug/src/transform/expression.rs:330:13\nstack backtrace:\n...\n12: std::panicking::begin_panic_fmt\n             at src/libstd/panicking.rs:326\n  13: wasmtime_debug::transform::expression::compile_expression\n             at crates/debug/src/transform/expression.rs:330\n  14: wasmtime_debug::transform::unit::clone_unit\n             at crates/debug/src/transform/unit.rs:302\n  15: wasmtime_debug::transform::transform_dwarf\n             at crates/debug/src/transform/mod.rs:90\n  16: wasmtime_debug::emit_debugsections_image\n             at crates/debug/src/lib.rs:82\n  17: wasmtime_jit::compiler::Compiler::compile\n             at crates/jit/src/compiler.rs:215\n  18: wasmtime_jit::instantiate::RawCompiledModule::new\n             at crates/jit/src/instantiate.rs:83\n</pre></div>\n\n\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p><a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> </p>\n<ul>\n<li>If relevant, can you include some extra information about your environment? (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I built the attached Wasm file with <code>/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -g -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm</code></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\">codecbench-simd.txt</a></p>\n</blockquote>",
        "id": 191796777,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585163315
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403#issuecomment-604031596\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403#issuecomment-604031596\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<p>I think it is important to note that if I don't build <code>codecbench-simd.wasm</code> with <code>clang++ ... -g ...</code> then I get the following:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run -- run -g --enable-simd --disable-cache ../meshoptimizer/codecbench-simd.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run -g --enable-simd --disable-cache ../meshoptimizer/codecbench-simd.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../meshoptimizer/codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>Where the Wasm code for that offset is:</p>\n<div class=\"codehilite\"><pre><span></span>$ wasm-objdump -d ../meshoptimizer/codecbench-simd.wasm | grep -B5 -A5 22a4\n 002297: fd 06 00                   |                     i8x16.extract_lane_u 0\n 00229a: 6a                         |                     i32.add\n 00229b: 20 17                      |                     local.get 23\n 00229d: 41 f0 b0 80 80 00          |                     i32.const 6256\n 0022a3: 6a                         |                     i32.add\n&gt;0022a4: 2d 00 00                   |                     i32.load8_u 0 0\n 0022a7: 6a                         |                     i32.add\n 0022a8: 21 00                      |                     local.set 0\n 0022aa: 0c 02                      |                     br 2\n 0022ac: 0b                         |                   end\n 0022ad: 20 0f                      |                   local.get 15\n</pre></div>\n\n\n</blockquote>",
        "id": 191797006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585163430
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403#issuecomment-604031596\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403#issuecomment-604031596\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<p>I think it is important to note that if I don't build <code>codecbench-simd.wasm</code> without <code>clang++ ... -g ...</code> then I get the following:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run -- run -g --enable-simd --disable-cache ../meshoptimizer/codecbench-simd.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run -g --enable-simd --disable-cache ../meshoptimizer/codecbench-simd.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../meshoptimizer/codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>Where the Wasm code for that offset is:</p>\n<div class=\"codehilite\"><pre><span></span>$ wasm-objdump -d ../meshoptimizer/codecbench-simd.wasm | grep -B5 -A5 22a4\n 002297: fd 06 00                   |                     i8x16.extract_lane_u 0\n 00229a: 6a                         |                     i32.add\n 00229b: 20 17                      |                     local.get 23\n 00229d: 41 f0 b0 80 80 00          |                     i32.const 6256\n 0022a3: 6a                         |                     i32.add\n&gt;0022a4: 2d 00 00                   |                     i32.load8_u 0 0\n 0022a7: 6a                         |                     i32.add\n 0022a8: 21 00                      |                     local.set 0\n 0022aa: 0c 02                      |                     br 2\n 0022ac: 0b                         |                   end\n 0022ad: 20 0f                      |                   local.get 15\n</pre></div>\n\n\n</blockquote>",
        "id": 191797609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585163740
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403#issuecomment-604031596\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403#issuecomment-604031596\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<p>I think it is important to note that if I build <code>codecbench-simd.wasm</code> __without__ <code>clang++ ... -g ...</code> then I get the following:</p>\n<div class=\"codehilite\"><pre><span></span>$ cargo run -- run -g --enable-simd --disable-cache ../meshoptimizer/codecbench-simd.wasm\n    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/wasmtime run -g --enable-simd --disable-cache ../meshoptimizer/codecbench-simd.wasm`\nsource: vertex data 32064032 bytes, index data 24000000 bytes\npass 0: vertex data 18518385 bytes, index data 2332680 bytes\nError: failed to run main module `../meshoptimizer/codecbench-simd.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: out of bounds memory access, source location: @22a4\n       wasm backtrace:\n         0: &lt;unknown&gt;!meshopt::decodeVertexBlockSimd(unsigned char const*, unsigned char const*, unsigned char*, unsigned long, unsigned long, unsigned char*)\n         1: &lt;unknown&gt;!meshopt_decodeVertexBuffer\n         2: &lt;unknown&gt;!benchCodecs(std::__2::vector&lt;Vertex, std::__2::allocator&lt;Vertex&gt; &gt; const&amp;, std::__2::vector&lt;unsigned int, std::__2::allocator&lt;unsigned int&gt; &gt; const&amp;)\n         3: &lt;unknown&gt;!__original_main\n         4: &lt;unknown&gt;!_start\n</pre></div>\n\n\n<p>Where the Wasm code for that offset is:</p>\n<div class=\"codehilite\"><pre><span></span>$ wasm-objdump -d ../meshoptimizer/codecbench-simd.wasm | grep -B5 -A5 22a4\n 002297: fd 06 00                   |                     i8x16.extract_lane_u 0\n 00229a: 6a                         |                     i32.add\n 00229b: 20 17                      |                     local.get 23\n 00229d: 41 f0 b0 80 80 00          |                     i32.const 6256\n 0022a3: 6a                         |                     i32.add\n&gt;0022a4: 2d 00 00                   |                     i32.load8_u 0 0\n 0022a7: 6a                         |                     i32.add\n 0022a8: 21 00                      |                     local.set 0\n 0022aa: 0c 02                      |                     br 2\n 0022ac: 0b                         |                   end\n 0022ad: 20 0f                      |                   local.get 15\n</pre></div>\n\n\n</blockquote>",
        "id": 191797778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585163828
    },
    {
        "content": "<p>yurydelendik closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1403\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1403\">Issue #1403</a>:</p>\n<blockquote>\n<ul>\n<li>What are the steps to reproduce the issue?</li>\n</ul>\n<p><code>cargo run -- run -g --enable-simd --disable-cache codecbench-simd.wasm</code> (see attached file at bottom)</p>\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `1`,\n right: `0`&#39;, crates/debug/src/transform/expression.rs:330:13\nstack backtrace:\n...\n12: std::panicking::begin_panic_fmt\n             at src/libstd/panicking.rs:326\n  13: wasmtime_debug::transform::expression::compile_expression\n             at crates/debug/src/transform/expression.rs:330\n  14: wasmtime_debug::transform::unit::clone_unit\n             at crates/debug/src/transform/unit.rs:302\n  15: wasmtime_debug::transform::transform_dwarf\n             at crates/debug/src/transform/mod.rs:90\n  16: wasmtime_debug::emit_debugsections_image\n             at crates/debug/src/lib.rs:82\n  17: wasmtime_jit::compiler::Compiler::compile\n             at crates/jit/src/compiler.rs:215\n  18: wasmtime_jit::instantiate::RawCompiledModule::new\n             at crates/jit/src/instantiate.rs:83\n</pre></div>\n\n\n<ul>\n<li>Which Wasmtime version / commit hash / branch are you using?</li>\n</ul>\n<p><a href=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\" title=\"https://github.com/abrown/wasmtime/tree/additional-i8x16-shift\">https://github.com/abrown/wasmtime/tree/additional-i8x16-shift</a> </p>\n<ul>\n<li>If relevant, can you include some extra information about your environment? (Rust version, operating system, architecture...)</li>\n</ul>\n<p>I built the attached Wasm file with <code>/opt/wasi-sdk/bin/clang++ tools/codecbench.cpp src/vertexcodec.cpp src/vertexfilter.cpp src/overdrawanalyzer.cpp src/indexgenerator.cpp src/vcacheoptimizer.cpp src/indexcodec.cpp src/vfetchanalyzer.cpp src/spatialorder.cpp src/clusterizer.cpp src/allocator.cpp src/vcacheanalyzer.cpp src/vfetchoptimizer.cpp src/overdrawoptimizer.cpp src/simplifier.cpp src/stripifier.cpp -O3 -DNDEBUG -g -fno-exceptions -Wl,--initial-memory=268435456 -msimd128 -o codecbench-simd.wasm</code></p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\" title=\"https://github.com/bytecodealliance/wasmtime/files/4382991/codecbench-simd.txt\">codecbench-simd.txt</a></p>\n</blockquote>",
        "id": 191810758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585170221
    }
]