[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398\">PR #8398</a>.</p>",
        "id": 433952735,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713422521
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398\">PR #8398</a>.</p>",
        "id": 433952736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713422521
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398\">PR #8398</a> from <code>jameysharp:undo-argloc-moves</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This reverts the key parts of e3a08d4c40f64ff7a2113d23af73f40af0859a10 (#8151), because it turns out that we didn't need that abstraction.</p>\n<p>Several changes in the last month have enabled this:</p>\n<ul>\n<li>\n<p>#8292 and then #8316 allow us to refer to either incoming or outgoing argument areas in a (mostly) consistent way</p>\n</li>\n<li>\n<p>#8327, #8377, and #8383 demonstrate that we never need to delay writing stack arguments directly to their final location</p>\n</li>\n</ul>\n</blockquote>",
        "id": 433952737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713422522
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398\">PR #8398</a>.</p>",
        "id": 434204207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713459880
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398#pullrequestreview-2009748335\">PR review</a>:</p>\n<blockquote>\n<p>Awesome! Now that I'm thinking about it, I believe we added this specifically for <code>GrowArgumentArea</code> and <code>ShrinkArgumentArea</code>, both of which no longer exist <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n</blockquote>",
        "id": 434227266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713469484
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398#issuecomment-2065198771\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398\">PR #8398</a>:</p>\n<blockquote>\n<p>Of the several variations on the theme that we've considered, this one was even earlier than the grow/shrink frame approach. We intended to use regalloc2's parallel move resolver to shuffle values between stack slots, registers, and the argument area, to capture all the work of restoring clobber-saves, putting arguments in the right places, and getting the return address in the right place too. That turned out to be complicated. Fortunately, the fact that Ulrich's suggestion (proactively resizing the argument area) works shows we will never have to do parallel moves.</p>\n</blockquote>",
        "id": 434230853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713471024
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8398\">PR #8398</a>.</p>",
        "id": 434232710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713471954
    }
]