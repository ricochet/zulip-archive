[
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227\">PR #8227</a>.</p>",
        "id": 428430242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711155852
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227\">PR #8227</a>.</p>",
        "id": 428430243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711155853
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227\">PR #8227</a> from <code>jameysharp:dedup-dce</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>The egraph pass and the dead-code elimination pass both remove instructions whose results are unused. If the optimization level is \"none\", neither pass runs, and if it's anything else both passes run. I don't think we should do this work twice.</p>\n<p>Note that the DCE pass is different than the \"eliminate unreachable code\" pass, which removes entire blocks that are unreachable from the entry block. That pass might still be necessary.</p>\n<p>@cfallin, what do you think? There's some advantage to not calling <code>simplify</code> on instructions that we can quickly prove are unused, but is it worth keeping a redundant pass around for that?</p>\n</blockquote>",
        "id": 428430244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711155853
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227#issuecomment-2016324248\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227\">PR #8227</a>:</p>\n<blockquote>\n<p>IIRC, the \"legacy\" passes we call before egraph opt are the ones that are important for compile time, or at least were when egraph opt was introduced. Basically as you said: better not to invoke ISLE at all if code is unused (and egraph's natural DCE comes only during elaboration after that). Would you mind measuring the compile-time impact of this? It's always possible things are better now of course!</p>\n</blockquote>",
        "id": 428438139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711163591
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227#issuecomment-2099522780\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227\">PR #8227</a>:</p>\n<blockquote>\n<p>I finally got back to this. Sightglass says there's no impact on the smaller benchmarks (bz2, pulldown-cmark) in any phase or by any perf counter. On the Spidermonkey benchmark, there's no impact on instructions retired, but when measuring CPU cycles there's a slight but statistically significant slowdown in compilation, and weirdly, a slight speedup in execution.</p>\n<p>I'm inclined to think this is pretty much still in the noise and we should go ahead and merge this so we have less code to maintain. What do you think?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span>:: <span class=\"nc\">cpu</span><span class=\"o\">-</span><span class=\"n\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2481348.89</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">2266894.53</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"n\">b545cc508</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"mf\">8e9</span><span class=\"n\">f6f135</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">291935280</span><span class=\"w\"> </span><span class=\"mf\">305568325.04</span><span class=\"w\"> </span><span class=\"mi\">334203152</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"mf\">8e9</span><span class=\"n\">f6f135</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">261612097</span><span class=\"w\"> </span><span class=\"mf\">303086976.15</span><span class=\"w\"> </span><span class=\"mi\">312831291</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"n\">b545cc508</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span>:: <span class=\"nc\">cpu</span><span class=\"o\">-</span><span class=\"n\">cycles</span><span class=\"w\"> </span>:: <span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">7533948.79</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">2750726.94</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"mf\">8e9</span><span class=\"n\">f6f135</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.00</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"n\">b545cc508</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">965718291</span><span class=\"w\"> </span><span class=\"mf\">973510333.10</span><span class=\"w\"> </span><span class=\"mi\">1006394505</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"mf\">8e9</span><span class=\"n\">f6f135</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">965415521</span><span class=\"w\"> </span><span class=\"mf\">981044281.89</span><span class=\"w\"> </span><span class=\"mi\">1015728504</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">dedup</span><span class=\"o\">-</span><span class=\"n\">dce</span><span class=\"o\">-</span><span class=\"n\">b545cc508</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 437554296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715128474
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227#pullrequestreview-2053116901\">PR review</a>:</p>\n<blockquote>\n<p>Ah, that delta is smaller than I had seen when we initially added the egraph optimizer: I recall compile-time slowdowns on the order of 5% then. It's entirely possible that by optimizing other things or making other changes we've shifted the tradeoffs.</p>\n<p>I still think in principle it <em>could</em> be useful to do a separate DCE without the rewriting overhead first, since there might be some other frontend that produces a lot of junk code, but honestly that's a much lower-priority problem IMHO.</p>\n<p>Given all this, I'm happy to see this change go in!</p>\n</blockquote>",
        "id": 438397578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715616230
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8227\">PR #8227</a>.</p>",
        "id": 438403540,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715618090
    }
]