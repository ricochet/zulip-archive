[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> from <code>riscv64-ctlz-improvments</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR started by fixing the lowering rules for <code>ctz</code>. The base rule had <code>(if-let $false (has_zbb))</code>, but the rule for <code>i8</code>/<code>i16</code> depended on both <code>Zbb</code> and <code>Zbs</code>. Which meant that if we only had <code>Zbb</code> we had no valid rule for lowering <code>i8</code>/<code>i16</code>. The fuzzer found this on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#issuecomment-1439854777\">https://github.com/bytecodealliance/wasmtime/pull/5844#issuecomment-1439854777</a>.</p>\n<p>I also ended up improving codegen for these instructions in a number of cases. We try to avoid the base case as much as possible since it involves a loop.</p>\n<p>We can now avoid requiring <code>Zbs</code> in all cases by falling back to an <code>ori</code> or <code>or</code> instruction instead to set a single bit.</p>\n<p>It also moves some constructors around and other misc stuff since we have a bunch of rules all over the files. I'm trying to collect the ones I find at the top of the file.</p>\n</blockquote>",
        "id": 329577922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677096885
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> from <code>riscv64-ctlz-improvments</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR started by fixing the lowering rules for <code>ctz</code>. The base rule had <code>(if-let $false (has_zbb))</code>, but the rule for <code>i8</code>/<code>i16</code> depended on both <code>Zbb</code> and <code>Zbs</code>. Which meant that if we only had <code>Zbb</code> we had no valid rule for lowering <code>i8</code>/<code>i16</code>. The fuzzer found this on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5844#issuecomment-1439854777\">https://github.com/bytecodealliance/wasmtime/pull/5844#issuecomment-1439854777</a>.</p>\n<p>I also ended up improving codegen for these instructions in a number of cases. We try to avoid the base case as much as possible since it involves a loop.</p>\n<p>We can now avoid requiring <code>Zbs</code> in all cases by falling back to an <code>ori</code> or <code>or</code> instruction instead to set a single bit.</p>\n<p>It also moves some constructors around and other misc stuff since we have a bunch of rules all over the files. I'm trying to collect the ones I find at the top of the file.</p>\n<p>It's been fuzzing for about an hour, I'll update this if it finds anything.</p>\n</blockquote>",
        "id": 329577982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677096918
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> from <code>riscv64-ctlz-improvments</code> to <code>main</code>.</p>",
        "id": 341451534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678711869
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> as ready for review.</p>",
        "id": 341452012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678711966
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1337927810\">PR review</a>.</p>",
        "id": 341586782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1337927810\">PR review</a>.</p>",
        "id": 341586783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134599980\">PR review comment</a>:</p>\n<blockquote>\n<p>I want to note that the uses of <code>fits_in_64</code> in the \"Restrict lowering rules for ctz/clz\" commit should be harmless but shouldn't be necessary. Since the rule for <code>$I128</code> has higher priority, and since ctz/clz/cls accept only integer types, the only types which could reach the general rule are I8-I64.</p>\n<p>It's definitely good to be consistent across rules for whether we're explicit about checking <code>fits_in_64</code> or not. And it's probably good to be explicit since it serves as a kind of documentation. Currently, doing this causes ISLE to generate slightly worse code, but it's probably not measurably worse, and I hope to fix it eventually anyway.</p>\n<p>So you don't need to do anything about this comment. I just wanted to mention that this change shouldn't change any lowering behavior.</p>\n</blockquote>",
        "id": 341586785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134632742\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd kind of like to see <code>bseti</code> either fully rely on priorities or fully rely on pattern matches, but it's currently a mix of both.</p>\n<p>Because <code>u64_lteq</code> is partial, the first and second rule need different priorities. If that constructor returned <code>bool</code> instead of <code>Option&lt;()&gt;</code>, then all three rules could fully express their preconditions and none of them would need priorities.</p>\n<p>On the other hand, because the third rule has higher priority than the other two, you could remove <code>(if-let $false (has_zbs))</code> from the lower-priority rules and rely on all the rules having priorities.</p>\n</blockquote>",
        "id": 341586786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134644867\">PR review comment</a>:</p>\n<blockquote>\n<p>The immediate here being 16 when I knew the constant needed to be 2^16 confused me so much. But of course 16 is 2^4, and <code>lui</code> shifts its immediate operand left by 12 bits, and 4+12 is 16, so this is correct.</p>\n</blockquote>",
        "id": 341586787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134649789\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment should say \"all bits are 0\" for the <code>clz</code> lowering, right?</p>\n</blockquote>",
        "id": 341586788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134660912\">PR review comment</a>:</p>\n<blockquote>\n<p>Should <code>tmp2</code> select the sign-extended <code>tmp</code> instead of the original <code>r</code>?</p>\n</blockquote>",
        "id": 341586789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746882
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134655008\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this comment is a little misleading. Maybe: \"We count leading zeros in a full 64-bit register, but only want the count within the low 8 or 16 bits, so subtract the number of extra bits.\"</p>\n<p>Also I guess it doesn't make any difference but I suppose you could do this with <code>clzw</code> and subtract 32 instead.</p>\n</blockquote>",
        "id": 341586791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746883
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134674085\">PR review comment</a>:</p>\n<blockquote>\n<p>Possible future work: Maybe make <code>MInst::Select</code> accept an <code>IntCC</code> etc, so it can replace <code>MInst::SelectReg</code>, and so this lowering doesn't have to generate two separate branches for the same condition.</p>\n</blockquote>",
        "id": 341586792,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746883
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134664403\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't understand this TODO comment. As far as I understand we can't use <code>not</code> on the input without checking if it was negative. But isn't that exactly what the rule for <code>lower_cls</code> already does?</p>\n</blockquote>",
        "id": 341586793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746883
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134677938\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't know what style to use for ISLE source most of the time, but I think there should at least be a space after <code>(let</code>.</p>\n</blockquote>",
        "id": 341586794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746883
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1134680735\">PR review comment</a>:</p>\n<blockquote>\n<p>Wouldn't this generate better code if we checked whether <code>(value_regs_get x 1)</code> is zero, rather than checking if it has 64 leading zeros? We'd avoid loading a constant which should remove one instruction, right?</p>\n</blockquote>",
        "id": 341586795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678746883
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> from <code>riscv64-ctlz-improvments</code> to <code>main</code>.</p>",
        "id": 342588955,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679065959
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1346206878\">PR review</a>.</p>",
        "id": 342599847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679068050
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1140403836\">PR review comment</a>:</p>\n<blockquote>\n<p>Oops, I think I messed up slightly here. I looked at rust's output for <code>u32::leading_ones</code>, but that has slightly different semantics. LLVM's output for the equivalent operation is still better than our lowering, I'll update the comment with the godbolt link.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">example</span>::<span class=\"n\">cls_u64</span>:\n        <span class=\"nc\">bgez</span><span class=\"w\">    </span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">LBB4_2</span>\n<span class=\"w\">        </span><span class=\"n\">not</span><span class=\"w\">     </span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a0</span>\n<span class=\"p\">.</span><span class=\"n\">LBB4_2</span>:\n        <span class=\"nc\">clz</span><span class=\"w\">     </span><span class=\"n\">a0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a0</span>\n<span class=\"w\">        </span><span class=\"n\">ret</span>\n</code></pre></div>\n<p>Unfortunately it requires a branch, which sort of prevents us from easly implementing this in ISLE <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span> .</p>\n</blockquote>",
        "id": 342599848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679068050
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1140403836\">PR review comment</a>.</p>",
        "id": 342599905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679068060
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1140403836\">PR review comment</a>.</p>",
        "id": 342601743,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679068410
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1140403836\">PR review comment</a>.</p>",
        "id": 342602873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679068643
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1346256060\">PR review</a>.</p>",
        "id": 342607480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679069602
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1140434315\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah that's not a great explanation of that piece of code... I've updated it with your comment, which is much better, thanks!</p>\n<p>Yeah, we should be able to use <code>clzw</code>, here I mostly kept it as it was before.</p>\n</blockquote>",
        "id": 342607482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679069602
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1140403836\">PR review comment</a>.</p>",
        "id": 342607685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679069644
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1350600636\">PR review</a>.</p>",
        "id": 343384967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679408467
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1143464296\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a good find! I've also applied that to the <code>ctz</code> lowering, which is fairly similar.</p>\n</blockquote>",
        "id": 343384971,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679408467
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1350657133\">PR review</a>.</p>",
        "id": 343391754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679409812
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#discussion_r1143501946\">PR review comment</a>:</p>\n<blockquote>\n<p>I have a slight preference for using pattern matching wherever possible, plus, it means we don't actually need <code>u64_lteq</code> we already have a <code>u64_le</code> which I didn't notice the first time around. Thanks!</p>\n</blockquote>",
        "id": 343391755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679409812
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> from <code>riscv64-ctlz-improvments</code> to <code>main</code>.</p>",
        "id": 343392248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679409924
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> as ready for review.</p>",
        "id": 343392303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679409939
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854#pullrequestreview-1351234663\">PR review</a>.</p>",
        "id": 343499845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679426289
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a> from <code>riscv64-ctlz-improvments</code> to <code>main</code>.</p>",
        "id": 343506414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679428448
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a>.</p>",
        "id": 343506604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679428506
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5854\">PR #5854</a>.</p>",
        "id": 343541757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679442610
    }
]