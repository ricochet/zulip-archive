[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8788\">issue #8788</a>:</p>\n<blockquote>\n<p>When a block has only a single, unconditional predecessor, we should merge it into its predecessor. We see this relatively frequently do to the way that <code>cranelift-wasm</code> creates blocks (which can certainly be improved, but I think can't fully solve this issue).</p>\n<p>One option is to do this during CLIF construction in <code>cranelift-frontend</code> when we call <code>seal_block</code>, as that is when we are declaring that all predecessors for a block have been linked up.</p>\n<p>Another option is to do this somewhere in the mid-end, either when building the e-graph or when elaborating out of it.</p>\n<p>We might want to do both, since legalization can also introduce new blocks.</p>\n</blockquote>",
        "id": 444339060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718229515
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8788\">issue #8788</a>:</p>\n<blockquote>\n<p>When a block has only a single, unconditional predecessor, we should merge it into its predecessor. We see this relatively frequently due to the way that <code>cranelift-wasm</code> creates blocks (which can certainly be improved, but I think can't fully solve this issue).</p>\n<p>One option is to do this during CLIF construction in <code>cranelift-frontend</code> when we call <code>seal_block</code>, as that is when we are declaring that all predecessors for a block have been linked up.</p>\n<p>Another option is to do this somewhere in the mid-end, either when building the e-graph or when elaborating out of it.</p>\n<p>We might want to do both, since legalization can also introduce new blocks.</p>\n</blockquote>",
        "id": 444339569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718229735
    }
]