[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1302636933\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 307834270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667507872
    },
    {
        "content": "<p>ShuP1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1303964360\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<p>Good points. I was planning to add a pipe in a later PR.<br>\nBasically a <code>VecDeque&lt;u8&gt;</code> with read/write interface both for Wasi and API.</p>\n<p>In my use case, the \"read\" API is perfect and easy to implement since <code>wasi_common::pipe</code> are <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> anyway.<br>\nIt's not a \"superset\" since Vec is unbounded. A program allocating GBs by flooding stdout is problematic IMO.</p>\n<p>Still WIP: <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...ShuP1:wasmtime:c-api-stdio-pipe-example\">https://github.com/bytecodealliance/wasmtime/compare/main...ShuP1:wasmtime:c-api-stdio-pipe-example</a></p>\n<p>In conclusion, this PR can probably be replaced by the next proposal with a capacity limit to the queue.</p>\n</blockquote>",
        "id": 308019541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667585336
    },
    {
        "content": "<p>ShuP1 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1303964360\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<p>Good points. I was planning to add a pipe in a later PR.<br>\nBasically a <code>VecDeque&lt;u8&gt;</code> with read/write interface both for Wasi and API.</p>\n<p>In my use case, the \"read\" API is perfect and easy to implement since <code>wasi_common::pipe</code> are <code>Arc&lt;RwLock&lt;T&gt;&gt;</code> anyway.<br>\nIt's not a \"superset\" since Vec is unbounded. A program allocating GBs by flooding stdout is problematic IMO.</p>\n<p>Still WIP: <a href=\"https://github.com/ShuP1/wasmtime/compare/c-api-stdio-buffer...ShuP1:wasmtime:c-api-stdio-pipe-example\">https://github.com/ShuP1/wasmtime/compare/c-api-stdio-buffer...ShuP1:wasmtime:c-api-stdio-pipe-example</a></p>\n<p>In conclusion, this PR can probably be replaced by the next proposal with a capacity limit to the queue.</p>\n</blockquote>",
        "id": 308020086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667585519
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1304092275\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<p>That also seems plausible to me yeah, and the high-output case could possibly be handled with an optional maximum on the pipe buffer?</p>\n<p>I think it would be good to document some more the semantics of the pipes, for example:</p>\n<ul>\n<li>Are the pipes safe to span threads?</li>\n<li>What happens when a write hits the capacity threshold?</li>\n</ul>\n<p>I might also recommend a few changes such as:</p>\n<ul>\n<li>I'd avoid <code>wasm_byte_vec_t</code> as it's cumbersome to work with and instead use <code>read</code>/<code>write</code>-style buffer passing</li>\n<li>I'd recommend splitting the pipe into halves and taking ownership when inserting it into a <code>wasi_config_t</code> to avoid the same write half being used in two different instances. </li>\n</ul>\n</blockquote>",
        "id": 308037240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667591239
    },
    {
        "content": "<p>ShuP1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1304458957\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<blockquote>\n<p>Are the pipes safe to span threads?<br>\nSafe to move to another thread but may lock.</p>\n</blockquote>\n<p>Or even maybe dead lock during concurrent use ?<br>\nThis reaches the limit of my understand of rust async...</p>\n<p><a href=\"https://docs.rs/wasi-common/latest/src/wasi_common/pipe.rs.html#112\">https://docs.rs/wasi-common/latest/src/wasi_common/pipe.rs.html#112</a> <br>\n<code>RwLock</code> is locked in an async function who does <strong>not</strong> use await.<br>\nSo no \"context switch\" ? and no risk for another thread to hung on this lock ?</p>\n</blockquote>",
        "id": 308110309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667641105
    },
    {
        "content": "<p>ShuP1 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1304467754\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd avoid wasm_byte_vec_t as it's cumbersome to work with and instead use read/write-style buffer passing</p>\n</blockquote>\n<p>Does this point also includes changing that ?</p>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasi_config_set_stdin_bytes</span><span class=\"p\">(</span><span class=\"n\">wasi_config_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_byte_vec_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// to</span>\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasi_config_set_stdin_bytes</span><span class=\"p\">(</span><span class=\"n\">wasi_config_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 308113480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667642800
    },
    {
        "content": "<p>ShuP1 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1304467754\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd avoid wasm_byte_vec_t as it's cumbersome to work with and instead use read/write-style buffer passing</p>\n</blockquote>\n<p>Does this point also includes changing that ?</p>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasi_config_set_stdin_bytes</span><span class=\"p\">(</span><span class=\"n\">wasi_config_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_byte_vec_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// to</span>\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasi_config_set_stdin_bytes</span><span class=\"p\">(</span><span class=\"n\">wasi_config_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">byte_t</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 308113532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667642830
    },
    {
        "content": "<p>ShuP1 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189#issuecomment-1304467754\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5189\">issue #5189</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd avoid wasm_byte_vec_t as it's cumbersome to work with and instead use read/write-style buffer passing</p>\n</blockquote>\n<p>Does this point also includes changing that ?</p>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasi_config_set_stdin_bytes</span><span class=\"p\">(</span><span class=\"n\">wasi_config_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_byte_vec_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// to</span>\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">wasi_config_set_stdin_bytes</span><span class=\"p\">(</span><span class=\"n\">wasi_config_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">byte_t</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">size_t</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 308113748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667642920
    }
]