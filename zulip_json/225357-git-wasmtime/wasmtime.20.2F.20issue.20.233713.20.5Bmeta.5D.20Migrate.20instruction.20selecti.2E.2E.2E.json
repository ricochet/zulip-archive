[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804892
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804892
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804892
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804892
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804892
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804892
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1018917049\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 268913256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642804903
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1020051239\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I'm looking into the remaining issues on s390x.  Specifically, I already have patches for branches and traps, which I'll submit shortly.   For calls and returns, the issues really are cross-platform - I suspect we'll have to move those to ISLE for all targets at the same time ...</p>\n<p>For reference, here's the list of issues I've noticed:</p>\n<ul>\n<li>For traps, the only problem is that (some) traps need to be emitted as safepoints, and there is currently no common-code mechanism to emit safepoints from ISLE.  (I notice that a few traps were moved to ISLE on x64 - but they're simply no longer safepoints now, which looks like a bug to me ...)     This is straightforward to fix by having the ISLE code hold on to tuples of (instruction, is_safepoint) instead of just instructions, similar to what is already done elsewhere.  I have a patch for that.</li>\n<li>For branches, there are two problems.   The first is a straightforward bug in <code>clif.isle</code> fixed here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3718\">https://github.com/bytecodealliance/wasmtime/pull/3718</a> .   The second is more interesting.  Currently, branches are emitted via special logic in <code>lower_branch_group</code>, which gets two list of branches and branch targets as input.  The list of branches is not a problem; we only ever emit the first branch of that group, and that can be passed to ISLE just like any other instruction.  However, when emitting the branch as machine instruction, we need to use the proper branch <em>targets</em>.  There is currently no way to access this in ISLE, and I see no obvious way to pass this list into the ISLE machinery either.   I have a patch to make this work by having the branch target list instead be generated when needed via an ISLE constructor calling a new context callback <code>current_block_branch_targets</code>.  This works for me, but has the drawback that the context now needs to keep new global state identifying the _current block_ being emitted.  (But maybe that's not really a problem, given that there is already global state identifying the current _instruction_ anyway?) </li>\n<li>For both calls and returns, the first issue is that these fundamentally receive variable-argument lists as inputs, and need some way to iterate over these lists in ISLE.  These lists are currently represented via a <code>ValueSlice</code> data type, but it turns out this doesn't work at all: <em>any</em> use of a <code>ValueSlice</code> argument in ISLE code will cause the generated Rust code to fail to compile with borrow-checker errors.   This is because every single generated constructor and extractor takes a mutable borrow on the context via a <code>&amp;mut self</code> argument - and the <code>ValueSlice</code> type refers to context memory and therefore extends the lifetime of that mutable borrow of any constructor or extractor that returns a variable of that type, which means that while a <code>ValueSlice</code> variable is live, <em>no other</em> constructor or extractor can ever be called, making it quite useless.  (This would also be a problem when handling other variable-argument opcodes like <code>load_complex</code>.)  I have an experimental patch that uses a pair of a <code>ValueList</code> identifier and an integer offset into the list instead of the <code>ValueSlice</code>, which seems to fix this - not sure if this is the preferred solution.  With that patch, I can successfully handle returns.</li>\n<li>For calls, there are still more fundamental problems.  The current code delegates most of the actual instruction emission for calls to the <code>ABICaller</code> trait and associated implementation (which calls back into target code to get ABI details).  This code just uses <code>ctx.emit</code> all over the place.  Therefore, it is not really usable as part of CLIF processing e.g. via constructors, because CLIF separately buffers instructions, and mixing CLIF <code>emit_insn</code> and context <code>ctx.emit</code> scrambles the sequence (and also confuses the CLIF register mapper because it no longer sees everything).   I think the straightforward fix would be to change the <code>ABICaller</code> implementation to emit CLIF instructions instead - but that likely means that all targets have to move calls to ISLE at the same time.   (I do <em>not</em> have a patch for this.)<br>\n</li>\n</ul>\n</blockquote>",
        "id": 269098066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643027482
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1029995045\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I'm picking up AtomicRMW for AArch64.</p>\n</blockquote>",
        "id": 270715615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643982025
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 270745606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643995398
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1049356153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I'm going to start working down the <code>x86_64</code> opcode list from the top -- clz/btz/popcnt/bitrev to start, I think. @abrown let me know what your next plans are and we can make sure not to duplicate work!</p>\n</blockquote>",
        "id": 273031036,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1645661931
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[ ] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 273564965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646088060
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[ ] <code>Opcode::Popcnt</code></li>\n<li>[ ] <code>Opcode::Bitrev</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Uextend</code></li>\n<li>[ ] <code>Opcode::Sextend</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 273564973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646088065
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 273565034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646088113
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1064410001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Just for the record, I am working on x64's <code>icmp</code>, <code>fcmp</code> and <code>select</code> instructions.</p>\n</blockquote>",
        "id": 274882957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646940188
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1064410881\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Thanks @abrown. @abrown @cfallin for the record, I'd like to get started with something simple. I'd like to claim fabs and fneg.</p>\n</blockquote>",
        "id": 274883174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1646940253
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 275578768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647465536
    },
    {
        "content": "<p>jlb6740 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 275578784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1647465548
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 277200999,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648672536
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 277201009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648672545
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 277201099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648672585
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1083715372\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I'm looking at loads and stores next, FYI.</p>\n</blockquote>",
        "id": 277213002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1648680671
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278276202,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649408986
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278759301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649800783
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::LoadComplex</code></li>\n<li>[ ] <code>Opcode::Uload8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16Complex</code></li>\n<li>[ ] <code>Opcode::Sload16Complex</code></li>\n<li>[ ] <code>Opcode::Uload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload32Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Uload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Sload8x8Complex</code></li>\n<li>[ ] <code>Opcode::Uload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Sload16x4Complex</code></li>\n<li>[ ] <code>Opcode::Uload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Sload32x2Complex</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StoreComplex</code></li>\n<li>[ ] <code>Opcode::Istore8Complex</code></li>\n<li>[ ] <code>Opcode::Istore16Complex</code></li>\n<li>[ ] <code>Opcode::Istore32Complex</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278759527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649800848
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278759793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649800989
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[ ] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278851778,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649866728
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278851799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649866737
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 278851817,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649866743
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1105306992\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I'm picking up AtomicCas and IaddPairwise for aarch64.</p>\n</blockquote>",
        "id": 279688732,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650551882
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1107073568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>@abrown are you still planning to take a look at stores on x64? I'm happy to take those first thing Mon if you haven't started yet, as I've got some isel improvements I want to do that involve them (load-op-store patterns). If you're close then no worries though!</p>\n</blockquote>",
        "id": 279895067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650674419
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1107162352\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Well, I haven't started stores yet... so take them if you want to!</p>\n</blockquote>",
        "id": 279898170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650677982
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 280241677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650993549
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 280241796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650993599
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 280326123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651052766
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 280326142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651052778
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 281042231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651596434
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1122453240\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I've also picked up snarrow, unarrow, uunarrow and fvdemote.</p>\n</blockquote>",
        "id": 281829412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652191951
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285329592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654646482
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285330677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654647513
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285330704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654647557
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[ ] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285330712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654647569
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285331178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654648079
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1150928257\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I've started on icmp, which doesn't look like it's going to be fun!</p>\n</blockquote>",
        "id": 285511649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654769063
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285553478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654789045
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285553525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654789064
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285553561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1654789079
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[ ] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285903889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655113421
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[ ] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 285903904,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655113432
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1154548396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I've finished up translating icmp for x64</p>\n</blockquote>",
        "id": 286002675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655163126
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[ ] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977604
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977610
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977676
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977686
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977696
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977707
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[ ] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287166304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655977763
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 287576719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656336133
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1171673879\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Transition to ISLE is now complete for s390x.  All opcodes are now lowered via ISLE.</p>\n</blockquote>",
        "id": 288087002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656623004
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[ ] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 288221707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656707979
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[ ] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 288221712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656707984
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 288221716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656707989
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 288221717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656707992
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 288221805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656708035
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1173676607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I've made a PR for the aarch64 min/max instructions</p>\n</blockquote>",
        "id": 288394738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656932261
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1173725371\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Last week we also merged <code>bmask</code>/<code>bextend</code>/<code>ireduce</code>/<code>breduce</code> for aarch64</p>\n</blockquote>",
        "id": 288399212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656935364
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1174817124\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I've picked up <code>iabs</code> for aarch64.</p>\n</blockquote>",
        "id": 288499123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657012256
    },
    {
        "content": "<p>dheaton-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1175183388\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>And also picked up <code>swizzle</code> and <code>scalartovector</code>.</p>\n<p>Edit: also planning to do <code>fadd</code>, <code>fsub</code>, <code>fmul</code>, <code>fdiv</code>, <code>fmin</code>, <code>fmax</code>, and the pseudo variants of the last two.</p>\n</blockquote>",
        "id": 288799105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657196981
    },
    {
        "content": "<p>dheaton-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1175183388\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>And also picked up <code>swizzle</code> and <code>scalartovector</code>.</p>\n<p>Edit: also planning to do <code>fadd</code> down to <code>fma</code>.</p>\n</blockquote>",
        "id": 289199627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657550198
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290025325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658179607
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290025341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658179615
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290492942,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658488671
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290493025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658488730
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[ ] <code>Opcode::Fadd</code></li>\n<li>[ ] <code>Opcode::Fsub</code></li>\n<li>[ ] <code>Opcode::Fmul</code></li>\n<li>[ ] <code>Opcode::Fdiv</code></li>\n<li>[ ] <code>Opcode::Fmin</code></li>\n<li>[ ] <code>Opcode::Fmax</code></li>\n<li>[ ] <code>Opcode::FminPseudo</code></li>\n<li>[ ] <code>Opcode::FmaxPseudo</code></li>\n<li>[ ] <code>Opcode::Sqrt</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fpromote</code></li>\n<li>[ ] <code>Opcode::Fdemote</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290493031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658488740
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code> (@sparker-arm)</li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Imax</code></li>\n<li>[ ] <code>Opcode::Umax</code></li>\n<li>[ ] <code>Opcode::Umin</code></li>\n<li>[ ] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[ ] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290493304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658488930
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290493838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658489329
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[ ] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290917217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658852090
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[ ] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290917440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658852190
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[ ] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290917472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658852208
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290917484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658852214
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290917562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658852253
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290950222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658866586
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290950236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658866592
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290950270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658866612
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 290950288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658866625
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291246943,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659039736
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291246950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659039742
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1198596297\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I'm working on finishing the x64 migration to ISLE. Feel free to grab instructions if you'd like to work on them, otherwise I'll continue working down the list.</p>\n</blockquote>",
        "id": 291247219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659039866
    },
    {
        "content": "<p>sparker-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291331098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659103669
    },
    {
        "content": "<p>sparker-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291331109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659103681
    },
    {
        "content": "<p>sparker-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[ ] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291331173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659103696
    },
    {
        "content": "<p>sparker-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291331248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659103744
    },
    {
        "content": "<p>sparker-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291331270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659103763
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 291915285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659558303
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 292078547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659652390
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 292078551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659652397
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 292842916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660170664
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 292842929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660170671
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 292997953,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660247552
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 293788278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660679166
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 293788295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660679174
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 293788307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660679180
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 293788325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660679186
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 293788328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660679191
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::Snarrow</code></li>\n<li>[ ] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294166369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660854898
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294166434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660854935
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294167912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660855656
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::Fabs</code></li>\n<li>[ ] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294174626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660858814
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[ ] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[ ] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[ ] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::FcvtToUint</code></li>\n<li>[ ] <code>Opcode::FcvtToSint</code></li>\n<li>[ ] <code>Opcode::FcvtFromUint</code></li>\n<li>[ ] <code>Opcode::FcvtFromSint</code></li>\n<li>[ ] <code>Opcode::FcvtToUintSat</code></li>\n<li>[ ] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[ ] <code>Opcode::SwidenLow</code></li>\n<li>[ ] <code>Opcode::SwidenHigh</code></li>\n<li>[ ] <code>Opcode::UwidenLow</code></li>\n<li>[ ] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294200682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660882573
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[ ] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294260192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660914085
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[ ] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294706871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661180894
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[ ] <code>Opcode::Fcopysign</code></li>\n<li>[ ] <code>Opcode::Ceil</code></li>\n<li>[ ] <code>Opcode::Floor</code></li>\n<li>[ ] <code>Opcode::Nearest</code></li>\n<li>[ ] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294706892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661180899
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294766986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661202420
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[ ] <code>Opcode::Udiv</code></li>\n<li>[ ] <code>Opcode::Urem</code></li>\n<li>[ ] <code>Opcode::Sdiv</code></li>\n<li>[ ] <code>Opcode::Srem</code></li>\n<li>[ ] <code>Opcode::Umulhi</code></li>\n<li>[ ] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294949683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661290410
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[ ] <code>Opcode::Vconst</code></li>\n<li>[ ] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294949726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661290436
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Shuffle</code></li>\n<li>[ ] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 294960541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661297551
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[ ] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295136421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661380208
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1226773840\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>@dheaton-arm I'm planning to help push the aarch64 work to completion; I'm hoping to tackle some of the trickier remaining ones (loads and stores, with amode lowering; calls; branches; icmp/fcmp and flags users). Is that OK or have you already started on some of these?</p>\n</blockquote>",
        "id": 295161512,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661403222
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[ ] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295161645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661403312
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[ ] <code>Opcode::Bextend</code></li>\n<li>[ ] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295161662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661403324
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[ ] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295161785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661403456
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1226977690\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>I've already started on icmp and fcmp, but everything you've mentioned before those should be fine.</p>\n</blockquote>",
        "id": 295186284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661417782
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1227089361\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>@cfallin I have an upcoming patch that moves the <code>AMode</code> enum definition to ISLE, but I don't plan to touch the actual lowering rules for loads and stores. We already have the <code>amode</code> helper in ISLE, so the latter bit should be doable without waiting for my patch to land (of course, <code>AMode</code> lowering itself would depend on it).</p>\n<p>My patch changes quite a lot of code because, as far as I can tell, enum definitions in ISLE always result in enums with named fields, while the existing <code>AMode</code> enum has unnamed fields.</p>\n</blockquote>",
        "id": 295201667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661424137
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[ ] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295256001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661441644
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[ ] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295256034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661441651
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::ScalarToVector</code></li>\n<li>[ ] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295256228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661441727
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[ ] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295267742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661445514
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1227570931\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>OK great, I'll take loads/stores themselves, calls, and branches. Lowering of flags-using instructions will intersect with how we do icmp/fcmp so I'll hold off on those. Thanks!</p>\n<blockquote>\n<p>My patch changes quite a lot of code because, as far as I can tell, enum definitions in ISLE always result in enums with named fields, while the existing AMode enum has unnamed fields.</p>\n</blockquote>\n<p>Yep, but there's no fundamental reason for that, it was just a \"build it as we need it\" sort of thing. We could look at supporting unnamed-field enum variants if it's simpler; it would probably be a 1-2 day refactor.</p>\n</blockquote>",
        "id": 295277456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661448840
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[ ] <code>Opcode::VanyTrue</code></li>\n<li>[ ] <code>Opcode::VallTrue</code></li>\n<li>[ ] <code>Opcode::VhighBits</code></li>\n<li>[ ] <code>Opcode::Iconcat</code></li>\n<li>[ ] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295329215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661472846
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1227876737\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Put up PRs for call/ret and loads/stores today; the remaining instructions on aarch64 that don't depend on flags or pattern-matching with icmp/fcmp somehow are:</p>\n<ul>\n<li>GetPinnedReg/SetPinnedReg</li>\n<li>ExtractLane/InsertLane</li>\n<li>StackAddr</li>\n<li>IaddIfcout</li>\n<li>TlsValue</li>\n</ul>\n<p>I'm happy to do all of these tomorrow, unless someone else objects or has partial work here, then I can do the branch and flags-related ones (trueif/trueff, selectif/selectff/select, brif/brff/brz/brnz) once @dheaton-arm 's icmp/fcmp work is done.</p>\n</blockquote>",
        "id": 295329309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661472932
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[ ] <code>Opcode::SqmulRoundSat</code></li>\n<li>[ ] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295502543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661543906
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[ ] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295528760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661556865
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1229040910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>The x86_64 backend has been migrated to ISLE <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n</blockquote>",
        "id": 295528802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661556912
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[ ] <code>Opcode::Call</code></li>\n<li>[ ] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295529756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661557612
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[ ] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 295529781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661557642
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[ ] <code>Opcode::Uload8</code></li>\n<li>[ ] <code>Opcode::Sload8</code></li>\n<li>[ ] <code>Opcode::Uload16</code></li>\n<li>[ ] <code>Opcode::Sload16</code></li>\n<li>[ ] <code>Opcode::Uload32</code></li>\n<li>[ ] <code>Opcode::Sload32</code></li>\n<li>[ ] <code>Opcode::Sload8x8</code></li>\n<li>[ ] <code>Opcode::Uload8x8</code></li>\n<li>[ ] <code>Opcode::Sload16x4</code></li>\n<li>[ ] <code>Opcode::Uload16x4</code></li>\n<li>[ ] <code>Opcode::Sload32x2</code></li>\n<li>[ ] <code>Opcode::Uload32x2</code></li>\n<li>[ ] <code>Opcode::Store</code></li>\n<li>[ ] <code>Opcode::Istore8</code></li>\n<li>[ ] <code>Opcode::Istore16</code></li>\n<li>[ ] <code>Opcode::Istore32</code></li>\n<li>[ ] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[ ] <code>Opcode::GetPinnedReg</code></li>\n<li>[ ] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[ ] <code>Opcode::Extractlane</code></li>\n<li>[ ] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[ ] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 296037088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661837010
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[ ] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 296037186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661837110
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[ ] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 296169845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661878500
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1232697152\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm happy to do all of these tomorrow, unless someone else objects or has partial work here, then I can do the branch and flags-related ones (trueif/trueff, selectif/selectff/select, brif/brff/brz/brnz) once @dheaton-arm 's icmp/fcmp work is done.</p>\n</blockquote>\n<p>@cfallin Just as a heads up, after my <code>icmp</code> patch I've been working on <code>true{if,ff}</code> and <code>select{_,if,ff}</code>. I haven't started on the <code>br*</code> ops though. :)</p>\n</blockquote>",
        "id": 296287186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661938111
    },
    {
        "content": "<p>dheaton-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1232697152\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm happy to do all of these tomorrow, unless someone else objects or has partial work here, then I can do the branch and flags-related ones (trueif/trueff, selectif/selectff/select, brif/brff/brz/brnz) once @dheaton-arm 's icmp/fcmp work is done.</p>\n</blockquote>\n<p>@cfallin Just as a heads up, after my <code>icmp</code> patch I've been working on <code>true{if,ff}</code> and <code>select{_,if*,ff}</code>. I haven't started on the <code>br*</code> ops though. :)</p>\n</blockquote>",
        "id": 296287867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661938421
    },
    {
        "content": "<p>dheaton-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1232697152\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm happy to do all of these tomorrow, unless someone else objects or has partial work here, then I can do the branch and flags-related ones (trueif/trueff, selectif/selectff/select, brif/brff/brz/brnz) once @dheaton-arm 's icmp/fcmp work is done.</p>\n</blockquote>\n<p>@cfallin Just as a heads up, after my <code>icmp</code> patch I've been working on <code>true{if,ff}</code> and <code>select{_,if,if_spectreguard}</code>. I haven't started on the <code>br*</code> ops though. :)</p>\n</blockquote>",
        "id": 296288020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661938478
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1233204629\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>@dheaton-arm great! I shifted over to some regalloc semantics cleanup work but I can come back and do <code>br*</code> ops next, likely Thu or Fri, unless you want to claim then before then!</p>\n</blockquote>",
        "id": 296410390,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1661965950
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1239342215\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<blockquote>\n<p>@dheaton-arm great! I shifted over to some regalloc semantics cleanup work but I can come back and do <code>br*</code> ops next, likely Thu or Fri, unless you want to claim then before then!</p>\n</blockquote>\n<p>I'm starting on the branch ops now, assuming you haven't yet. (Starting with <code>jump</code> and <code>br_icmp</code>..<code>brff</code>.)</p>\n</blockquote>",
        "id": 297581663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662554685
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1239543230\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>@dheaton-arm that sounds great; I didn't get to it last week as the regalloc stuff took longer than expected. Please feel free to grab all the branch ops and let me know if you need any help with any of the infra for that!</p>\n</blockquote>",
        "id": 297614323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662564566
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 297759247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662638110
    },
    {
        "content": "<p>dheaton-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1257734430\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>The AArch64 backend has now been fully ported to ISLE.</p>\n</blockquote>",
        "id": 300747437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664183611
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1258378598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Unless I'm missing something, that means we can close this issue! Thanks so much to everyone who helped make this migration happen!</p>\n</blockquote>",
        "id": 300865211,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664213323
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 300865212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664213323
    },
    {
        "content": "<p>fitzgen edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[ ] <code>Opcode::Select</code></li>\n<li>[ ] <code>Opcode::Selectif</code></li>\n<li>[ ] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[ ] <code>Opcode::Trueif</code></li>\n<li>[ ] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[ ] <code>Opcode::Trapif</code></li>\n<li>[ ] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[ ] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 300865298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664213350
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713#issuecomment-1258757735\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>Thanks so much @dheaton-arm and other Arm folks (@akirilov-arm, @sparker-arm) for your contributions to this effort! It is great that we finally have everything in the DSL; this is going to enable us to make a bunch more improvements in the future, and really does help a lot.</p>\n</blockquote>",
        "id": 300914721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664234501
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3713\">issue #3713</a>:</p>\n<blockquote>\n<p>This is a meta issue to track the migration from hand-written instruction selection and lowering over to using the ISLE DSL.</p>\n<p>As you port lowering for a clif opcode over to ISLE, please check the associated box (or leave a comment, if you don't have edit permissions and I or someone else can check the box for you). Hopefully this will help us focus our porting efforts and finish the migration in a timely manner, as well as avoid stepping on each others toes by having two people accidentally port the same opcode lowerings.</p>\n<p>cc @alexcrichton @cfallin @abrown @jlb6740 @uweigand @sparker-arm @akirilov-arm </p>\n<h1>x86_64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Clz</code></li>\n<li>[x] <code>Opcode::Ctz</code></li>\n<li>[x] <code>Opcode::Popcnt</code></li>\n<li>[x] <code>Opcode::Bitrev</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Uextend</code></li>\n<li>[x] <code>Opcode::Sextend</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Udiv</code></li>\n<li>[x] <code>Opcode::Urem</code></li>\n<li>[x] <code>Opcode::Sdiv</code></li>\n<li>[x] <code>Opcode::Srem</code></li>\n<li>[x] <code>Opcode::Umulhi</code></li>\n<li>[x] <code>Opcode::Smulhi</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSat</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>aarch64 -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] <code>Opcode::Load</code></li>\n<li>[x] <code>Opcode::Uload8</code></li>\n<li>[x] <code>Opcode::Sload8</code></li>\n<li>[x] <code>Opcode::Uload16</code></li>\n<li>[x] <code>Opcode::Sload16</code></li>\n<li>[x] <code>Opcode::Uload32</code></li>\n<li>[x] <code>Opcode::Sload32</code></li>\n<li>[x] <code>Opcode::Sload8x8</code></li>\n<li>[x] <code>Opcode::Uload8x8</code></li>\n<li>[x] <code>Opcode::Sload16x4</code></li>\n<li>[x] <code>Opcode::Uload16x4</code></li>\n<li>[x] <code>Opcode::Sload32x2</code></li>\n<li>[x] <code>Opcode::Uload32x2</code></li>\n<li>[x] <code>Opcode::Store</code></li>\n<li>[x] <code>Opcode::Istore8</code></li>\n<li>[x] <code>Opcode::Istore16</code></li>\n<li>[x] <code>Opcode::Istore32</code></li>\n<li>[x] <code>Opcode::StackAddr</code></li>\n<li>[x] <code>Opcode::AtomicRmw</code></li>\n<li>[x] <code>Opcode::AtomicCas</code></li>\n<li>[x] <code>Opcode::AtomicLoad</code></li>\n<li>[x] <code>Opcode::AtomicStore</code></li>\n<li>[x] <code>Opcode::Fence</code></li>\n<li>[x] <code>Opcode::Select</code></li>\n<li>[x] <code>Opcode::Selectif</code></li>\n<li>[x] <code>Opcode::SelectifSpectreGuard</code></li>\n<li>[x] <code>Opcode::Bitselect</code></li>\n<li>[x] <code>Opcode::Vselect</code></li>\n<li>[x] <code>Opcode::Trueif</code></li>\n<li>[x] <code>Opcode::Trueff</code></li>\n<li>[x] <code>Opcode::IsNull</code></li>\n<li>[x] <code>Opcode::IsInvalid</code></li>\n<li>[x] <code>Opcode::Copy</code></li>\n<li>[x] <code>Opcode::Breduce</code></li>\n<li>[x] <code>Opcode::Ireduce</code></li>\n<li>[x] <code>Opcode::Bextend</code></li>\n<li>[x] <code>Opcode::Bmask</code></li>\n<li>[x] <code>Opcode::Bint</code></li>\n<li>[x] <code>Opcode::Bitcast</code></li>\n<li>[x] <code>Opcode::FallthroughReturn</code></li>\n<li>[x] <code>Opcode::Return</code></li>\n<li>[x] <code>Opcode::Icmp</code></li>\n<li>[x] <code>Opcode::Fcmp</code></li>\n<li>[x] <code>Opcode::Debugtrap</code></li>\n<li>[x] <code>Opcode::Trap</code></li>\n<li>[x] <code>Opcode::ResumableTrap</code></li>\n<li>[x] <code>Opcode::Trapif</code></li>\n<li>[x] <code>Opcode::Trapff</code></li>\n<li>[x] <code>Opcode::FuncAddr</code></li>\n<li>[x] <code>Opcode::SymbolValue</code></li>\n<li>[x] <code>Opcode::Call</code></li>\n<li>[x] <code>Opcode::CallIndirect</code></li>\n<li>[x] <code>Opcode::GetPinnedReg</code></li>\n<li>[x] <code>Opcode::SetPinnedReg</code></li>\n<li>[x] <code>Opcode::Vconst</code></li>\n<li>[x] <code>Opcode::RawBitcast</code></li>\n<li>[x] <code>Opcode::Extractlane</code></li>\n<li>[x] <code>Opcode::Insertlane</code></li>\n<li>[x] <code>Opcode::Splat</code></li>\n<li>[x] <code>Opcode::ScalarToVector</code></li>\n<li>[x] <code>Opcode::VallTrue</code></li>\n<li>[x] <code>Opcode::VanyTrue</code></li>\n<li>[x] <code>Opcode::VhighBits</code></li>\n<li>[x] <code>Opcode::Shuffle</code></li>\n<li>[x] <code>Opcode::Swizzle</code></li>\n<li>[x] <code>Opcode::Isplit</code></li>\n<li>[x] <code>Opcode::Iconcat</code></li>\n<li>[x] <code>Opcode::Imax</code></li>\n<li>[x] <code>Opcode::Umax</code></li>\n<li>[x] <code>Opcode::Umin</code></li>\n<li>[x] <code>Opcode::Imin</code></li>\n<li>[x] <code>Opcode::IaddPairwise</code></li>\n<li>[x] <code>Opcode::WideningPairwiseDotProductS</code></li>\n<li>[x] <code>Opcode::Fadd</code></li>\n<li>[x] <code>Opcode::Fsub</code></li>\n<li>[x] <code>Opcode::Fmul</code></li>\n<li>[x] <code>Opcode::Fdiv</code></li>\n<li>[x] <code>Opcode::Fmin</code></li>\n<li>[x] <code>Opcode::Fmax</code></li>\n<li>[x] <code>Opcode::FminPseudo</code></li>\n<li>[x] <code>Opcode::FmaxPseudo</code></li>\n<li>[x] <code>Opcode::Sqrt</code></li>\n<li>[x] <code>Opcode::Fneg</code></li>\n<li>[x] <code>Opcode::Fabs</code></li>\n<li>[x] <code>Opcode::Fpromote</code></li>\n<li>[x] <code>Opcode::Fdemote</code></li>\n<li>[x] <code>Opcode::Ceil</code></li>\n<li>[x] <code>Opcode::Floor</code></li>\n<li>[x] <code>Opcode::Trunc</code></li>\n<li>[x] <code>Opcode::Nearest</code></li>\n<li>[x] <code>Opcode::Fma</code></li>\n<li>[x] <code>Opcode::Fcopysign</code></li>\n<li>[x] <code>Opcode::FcvtToUint</code></li>\n<li>[x] <code>Opcode::FcvtToSint</code></li>\n<li>[x] <code>Opcode::FcvtFromUint</code></li>\n<li>[x] <code>Opcode::FcvtFromSint</code></li>\n<li>[x] <code>Opcode::FcvtToUintSat</code></li>\n<li>[x] <code>Opcode::FcvtToSintSat</code></li>\n<li>[x] <code>Opcode::IaddIfcout</code></li>\n<li>[x] <code>Opcode::Iabs</code></li>\n<li>[x] <code>Opcode::AvgRound</code></li>\n<li>[x] <code>Opcode::Snarrow</code></li>\n<li>[x] <code>Opcode::Unarrow</code></li>\n<li>[x] <code>Opcode::Uunarrow</code></li>\n<li>[x] <code>Opcode::SwidenLow</code></li>\n<li>[x] <code>Opcode::SwidenHigh</code></li>\n<li>[x] <code>Opcode::UwidenLow</code></li>\n<li>[x] <code>Opcode::UwidenHigh</code></li>\n<li>[x] <code>Opcode::TlsValue</code></li>\n<li>[x] <code>Opcode::SqmulRoundSato</code></li>\n<li>[x] <code>Opcode::FcvtLowFromSint</code></li>\n<li>[x] <code>Opcode::FvpromoteLow</code></li>\n<li>[x] <code>Opcode::Fvdemote</code></li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n<h1>s390x -- DONE!</h1>\n<p>&lt;details&gt;</p>\n<ul>\n<li>[x] Calls</li>\n<li>[x] Returns</li>\n<li>[x] Traps</li>\n<li>[x] Branches</li>\n</ul>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 301029425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664290644
    }
]