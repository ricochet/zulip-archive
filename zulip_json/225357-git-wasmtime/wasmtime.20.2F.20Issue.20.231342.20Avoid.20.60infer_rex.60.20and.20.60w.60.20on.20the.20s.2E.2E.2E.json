[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1342\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1342\">Issue #1342</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Disallow <code>infer_rex</code> and <code>w</code> on the same encoding template</p>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>In cranelift x86 encodings, it seems unintuitive that we can specialize <code>Template</code>s with both <code>infer_rex</code> and <code>w</code>: if <code>w</code> is specified, the REX.W bit must be set so a REX prefix is required. In this case, it seems more clear to force ourselves to write <code>rex().w()</code>--it's more explicit and shows more clearly what cranelift will emit.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<ul>\n<li>In the <code>RecipePrefixKind::InferRex</code> arm of <code>Template::build</code>, add an assertion to prevent the use of <code>w()</code>. E.g. <code>assert!(!self.w_bit, \"No need to infer REX prefix when REX.W is specified, use rex() instead\")</code></li>\n<li>Optionally remove the runtime check for the REX.W bit in <code>needs_rex</code> (<code>binemit.rs</code>) and the size calculator functions in <code>enc_tables.rs</code>; this probably has some negligible runtime improvement and could be replaced by a comment indicating that the REX.W check has been performed statically.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nDo nothing.</p>\n</blockquote>",
        "id": 190874354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584462518
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1342\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1342\">Issue #1342</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Disallow <code>infer_rex</code> and <code>w</code> on the same encoding template</p>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>In cranelift x86 encodings, it seems unintuitive that we can specialize <code>Template</code>s with both <code>infer_rex</code> and <code>w</code>: if <code>w</code> is specified, the REX.W bit must be set so a REX prefix is alway required--no need to infer it. In this case, it seems more clear to force ourselves to write <code>rex().w()</code>--it's more explicit and shows more clearly what cranelift will emit.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<ul>\n<li>In the <code>RecipePrefixKind::InferRex</code> arm of <code>Template::build</code>, add an assertion to prevent the use of <code>w()</code>. E.g. <code>assert!(!self.w_bit, \"No need to infer REX prefix when REX.W is specified, use rex() instead\")</code></li>\n<li>Optionally remove the runtime check for the REX.W bit in <code>needs_rex</code> (<code>binemit.rs</code>) and the size calculator functions in <code>enc_tables.rs</code>; this probably has some negligible runtime improvement and could be replaced by a comment indicating that the REX.W check has been performed statically.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nDo nothing.</p>\n</blockquote>",
        "id": 190874418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584462548
    },
    {
        "content": "<p>abrown labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1342\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1342\">Issue #1342</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Disallow <code>infer_rex</code> and <code>w</code> on the same encoding template</p>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>In cranelift x86 encodings, it seems unintuitive that we can specialize <code>Template</code>s with both <code>infer_rex</code> and <code>w</code>: if <code>w</code> is specified, the REX.W bit must be set so a REX prefix is alway required--no need to infer it. In this case, it seems more clear to force ourselves to write <code>rex().w()</code>--it's more explicit and shows more clearly what cranelift will emit.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<ul>\n<li>In the <code>RecipePrefixKind::InferRex</code> arm of <code>Template::build</code>, add an assertion to prevent the use of <code>w()</code>. E.g. <code>assert!(!self.w_bit, \"No need to infer REX prefix when REX.W is specified, use rex() instead\")</code></li>\n<li>Optionally remove the runtime check for the REX.W bit in <code>needs_rex</code> (<code>binemit.rs</code>) and the size calculator functions in <code>enc_tables.rs</code>; this probably has some negligible runtime improvement and could be replaced by a comment indicating that the REX.W check has been performed statically.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nDo nothing.</p>\n</blockquote>",
        "id": 191012853,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584551836
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1342\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1342\">Issue #1342</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>Disallow <code>infer_rex</code> and <code>w</code> on the same encoding template</p>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<h4>Benefit</h4>\n<p>In cranelift x86 encodings, it seems unintuitive that we can specialize <code>Template</code>s with both <code>infer_rex</code> and <code>w</code>: if <code>w</code> is specified, the REX.W bit must be set so a REX prefix is alway required--no need to infer it. In this case, it seems more clear to force ourselves to write <code>rex().w()</code>--it's more explicit and shows more clearly what cranelift will emit.<br>\n&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<ul>\n<li>In the <code>RecipePrefixKind::InferRex</code> arm of <code>Template::build</code>, add an assertion to prevent the use of <code>w()</code>. E.g. <code>assert!(!self.w_bit, \"No need to infer REX prefix when REX.W is specified, use rex() instead\")</code></li>\n<li>Optionally remove the runtime check for the REX.W bit in <code>needs_rex</code> (<code>binemit.rs</code>) and the size calculator functions in <code>enc_tables.rs</code>; this probably has some negligible runtime improvement and could be replaced by a comment indicating that the REX.W check has been performed statically.</li>\n</ul>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;<br>\nDo nothing.</p>\n</blockquote>",
        "id": 192742660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585871410
    }
]