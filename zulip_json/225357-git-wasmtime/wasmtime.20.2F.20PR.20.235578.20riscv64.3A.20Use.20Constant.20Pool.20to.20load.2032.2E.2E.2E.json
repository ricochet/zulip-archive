[
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578\">PR #5578</a> from <code>fix-riscv64-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR switches the riscv64 backend to use the constant pool for loading 32 and 64 bit constants. We only do this in the case where we can't simply use a <code>lui</code> / <code>addi</code> instruction to get the right constant.</p>\n<p>It also adds a Label based addressing mode for loads and stores.</p>\n<p>Fixes #5569</p>\n<p>My understanding of this issue is that a veneer would be emitted right in the middle of a LoadConst sequence and since we used hardcoded relative offsets, these would break and point to the wrong location. Switching to a label based system prevents this kinds of issues.</p>\n</blockquote>",
        "id": 321723677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673906416
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250696465\">PR review</a>.</p>",
        "id": 321724654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673906997
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071603307\">PR review comment</a>:</p>\n<blockquote>\n<p>Why use a constant pool for 32bit values? Loading from the constant pool requires auipc+lw while loading a constant requires lui+addiw which is exactly the same size in terms of instructions but doesn't require an extra 4 bytes for the constant pool entry.</p>\n</blockquote>",
        "id": 321724655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673906997
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250698235\">PR review</a>.</p>",
        "id": 321725013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907208
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071604597\">PR review comment</a>:</p>\n<blockquote>\n<p>This label doesn't distinguish between two different constants.</p>\n</blockquote>",
        "id": 321725014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907208
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071604597\">PR review comment</a>.</p>",
        "id": 321725110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907247
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250699135\">PR review</a>.</p>",
        "id": 321725195,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907317
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071605206\">PR review comment</a>:</p>\n<blockquote>\n<p>We do try to use <code>lui</code>+<code>addi</code> in <code>Inst::load_constant_u32</code> and fall back here if those for some reason can't load it. Although I'm not entirely sure if that ever happens.</p>\n</blockquote>",
        "id": 321725196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907317
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250700069\">PR review</a>.</p>",
        "id": 321725366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907428
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071605996\">PR review comment</a>:</p>\n<blockquote>\n<p>That shouldn't be possible. 20 for lui + 12 for addiw == 32.</p>\n</blockquote>",
        "id": 321725367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907428
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250700672\">PR review</a>.</p>",
        "id": 321725491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907501
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071606397\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't really have a very good solution for this, we only know which label we get assigned after we emit the constant into the pool, and that only happens at emit time. When formatting the code we don't know which one its going to end up in.</p>\n</blockquote>",
        "id": 321725492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907501
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071606397\">PR review comment</a>.</p>",
        "id": 321726133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673907862
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071609364\">PR review comment</a>:</p>\n<blockquote>\n<p>That's right, and I think that just found a bug with our constant emissions, I tried to assert that we would always emit <code>lui</code>+<code>addi</code> and that assert failed! I'm going to investigate further, but yeah removing the LoadConst32 seems like the way to go.</p>\n</blockquote>",
        "id": 321726404,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673908008
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250704696\">PR review</a>.</p>",
        "id": 321726405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673908008
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071609364\">PR review comment</a>.</p>",
        "id": 321726472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673908047
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1250709220\">PR review</a>.</p>",
        "id": 321727517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673908673
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071612871\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, the actual immediate is put between parens. I read the parens as being part of the regular lw inst syntax, but in that case it would be more like <code>lw x2, 0xdeadbeef(x1)</code>, so my brain still parsed it wrong.</p>\n</blockquote>",
        "id": 321727518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673908673
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1071609364\">PR review comment</a>.</p>",
        "id": 321785051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673947292
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578\">PR #5578</a> from <code>fix-riscv64-imm</code> to <code>main</code>.</p>",
        "id": 321859405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673969756
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#pullrequestreview-1251801993\">PR review</a>.</p>",
        "id": 321859849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673969876
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1072366665\">PR review comment</a>:</p>\n<blockquote>\n<p>It turns out that riscv has <code>li rd, imm</code> assembler mnemonic that is much mor readable. I've switched to using that.</p>\n</blockquote>",
        "id": 321859852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673969877
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578#discussion_r1072366665\">PR review comment</a>.</p>",
        "id": 321859910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673969884
    },
    {
        "content": "<p>afonso360 closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5578\">PR #5578</a>.</p>",
        "id": 326832604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675953476
    }
]