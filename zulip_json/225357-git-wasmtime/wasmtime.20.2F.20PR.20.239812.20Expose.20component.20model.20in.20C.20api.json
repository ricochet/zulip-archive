[
    {
        "content": "<p>lanfeust69 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a> from <code>klave-network:component_model_c_api</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>The goal is to be able to host wasm components in a wasmtime runtime embedded through the C api.</p>\n<p>This was discussed in issue #8036.</p>\n<p>Thanks to @rockwotj for the basis of the initial commit, in #7801.</p>\n<p>I didn't see tests specific to the c-api, currently only tested through the example (and in our internal use !).</p>\n<p>I'm not sure it the sizeable <code>component.rs</code> file should be split...<br>\n</p>\n</blockquote>",
        "id": 488817965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734088664
    },
    {
        "content": "<p><strong>lanfeust69</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488817966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734088665
    },
    {
        "content": "<p><strong>lanfeust69</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488817967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734088665
    },
    {
        "content": "<p>rockwotj <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2541406668\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<p>Nice work! BTW one of the more complex things I had punted on in my POC was handling resources. From my conversations with @alexcrichton those significantly changed the Rust API when adding them, and might do the same in the C API (although maybe this has changed in the time since I did the POC?). I notice there is no resource support in this PR - it's probably worth a plan for that. At least that was the sentiment prior.</p>\n</blockquote>",
        "id": 488834216,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734094564
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488843545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734097563
    },
    {
        "content": "<p>lanfeust69 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2541806911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<blockquote>\n<p>Nice work! BTW one of the more complex things I had punted on in my POC was handling resources. From my conversations with @alexcrichton those significantly changed the Rust API when adding them, and might do the same in the C API (although maybe this has changed in the time since I did the POC?). I notice there is no resource support in this PR - it's probably worth a plan for that. At least that was the sentiment prior.</p>\n</blockquote>\n<p>Indeed, having started from your change, and not needing resources on my side, I decided not to support that for now, but I should have made that clear.</p>\n<p>I'm currently looking at the CI failures :</p>\n<ul>\n<li>I've been \"fooled\" by <code>clang-format</code>, because there is no <code>.clang-format</code> file in the repo, so my default one would be picked up, with a significantly different formatting, and I assumed there was no strict formatting rules for C files.</li>\n<li>Not sure if a function only used with some features should be marked <code>#[allow(dead_code)]</code> (which may miss the time it is no longer used) or <code>#[cfg(any(feature = \"feature1\", feature = \"feature2\"))]</code> (which gets unwieldy, and may prevent discoverability if useful elsewhere)</li>\n<li>CI (reasonably) wants to run the C example for component, but the workaround in <code>component/main.rs</code> is not available, something else is needed.</li>\n</ul>\n</blockquote>",
        "id": 488877127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734107082
    },
    {
        "content": "<p>lanfeust69 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488882007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734108718
    },
    {
        "content": "<p>lanfeust69 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488882656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734108941
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2541874459\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<p>Regarding resources: we'll definitely need to support them eventually, given that they're already used heavily by WASIp2 and beyond; plus they're just really useful in general.  This PR doesn't need to address that, but we should start thinking about what a follow-up PR might look like.</p>\n<p>A minimal implementation would include:</p>\n<ul>\n<li>A way to add new host-implemented resource types to a LinkerInstance, equivalent to <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.LinkerInstance.html#method.resource\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.LinkerInstance.html#method.resource</a></li>\n<li>A C equivalent to (<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResourceTable.html\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResourceTable.html</a>) for allocating host resource reps (as <code>uint32_t</code>) and pairing them with resource instances (as <code>void*</code>, which may be cast to the expected type; maybe paired with a type ID for runtime sanity checking)</li>\n</ul>\n<p>Otherwise, I think it's just a matter of passing the <code>uint32_t</code> reps (representing either host-implemented or guest-implemented resource instances) back and forth between the host and guest, letting Wasmtime handle the details of lifting and lowering.  @alexcrichton does that sound plausible to you?</p>\n</blockquote>",
        "id": 488883954,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734109380
    },
    {
        "content": "<p>lanfeust69 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488885964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734110086
    },
    {
        "content": "<p>lanfeust69 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>.</p>",
        "id": 488887231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734110501
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2541968504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<blockquote>\n<p>Not sure if a function only used with some features should be marked <code>#[allow(dead_code)]</code> (which may miss the time it is no longer used) or <code>#[cfg(any(feature = \"feature1\", feature = \"feature2\"))]</code> (which gets unwieldy, and may prevent discoverability if useful elsewhere)</p>\n</blockquote>\n<p>We generally prefer the <code>cfg</code>-based approach, even though it can get unweildy, because it provides better compile times and code sizes. Discoverability is not an issue because we build docs for <a href=\"http://docs.rs\">docs.rs</a> with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/lib.rs#L283\"><code>feature(doc_auto_cfg)</code></a> which automatically adds \"this method depends on blah feature\" to all <code>cfg</code>ed functions.</p>\n</blockquote>",
        "id": 488892991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734112498
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503060369\">PR review</a>:</p>\n<blockquote>\n<p>Thanks so much for your work here on this! I've left a few comments below, but I want to also gauge a bit on how much time/effort you have for this. This is a pretty big PR and there's quite a lot to bikeshed here, so I'd personally prefer to take this one-piece-at-a-time and perhaps break this PR up into a few smaller PRs. Would you have time for that? For example I'd like to land the \"compile a component\" first, then perhaps \"define a function in a linker and instantiate a component\", then \"load a function from a component\", then finally \"call the component function\". I realize that it wouldn't actually be useful until the end, but I think it'd help to talk about a piece-at-a-time since this is a pretty major feature being added.</p>\n</blockquote>",
        "id": 488912866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120624
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884432876\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be moved to <code>conifg.h</code>?</p>\n<p>(and also probably gated by <code>WASMTIME_FEATURE_COMPONENT_MODEL</code></p>\n</blockquote>",
        "id": 488912867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120624
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884430669\">PR review comment</a>:</p>\n<blockquote>\n<p>Ideally the <code>component-model</code> feature wouldn't necessarily imply <code>cranelift</code>, so would it be ok to gate some functions (e.g. component compilation) behind both features?</p>\n</blockquote>",
        "id": 488912870,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120624
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884460573\">PR review comment</a>:</p>\n<blockquote>\n<p>One thing I might recommend if you're up for it is to organize component model support the same way as the core wasm support. For example in the <code>wasmtime</code> crate there's <code>wasmtime::Foo</code> for core wasm things and <code>wasmtime::component::Foo</code> for component-model things, basically everything component-related is in its own namespace. </p>\n<p>For the C API we've got <code>wasmtime/foo.h</code> for a specific core-wasm thing and <code>wasmtime.h</code> for \"everything core wasm\". For components what do you think about <code>wasmtime/component/foo.h</code> for a specific item (e.g. this part here would be <code>wasmtime/component/component.h</code> like <code>wasmtime/module.h</code>) and then there'd be <code>wasmtime/component.h</code> which would include all the component headers.</p>\n<p>While this header isn't too too big just yet I could imagine it becoming much larger over time as it supports more features of the component model.</p>\n</blockquote>",
        "id": 488912871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120624
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884442300\">PR review comment</a>:</p>\n<blockquote>\n<p>Wasmtime's API doesn't quite reflect this yet but we're moving in a direction where <code>flags</code> is just a 64-bit integer, so I think it's reasonable to go ahead and define this on the C side as a small struct with a <code>uint64_t</code> member</p>\n</blockquote>",
        "id": 488912872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120625
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884434267\">PR review comment</a>:</p>\n<blockquote>\n<p>In addition to this <code>#ifdef</code> guard I think this whole file will want to be gated on <code>WASMTIME_FEATURE_COMPONENT_MODEL</code> since it'll otherwise not be available when that feature is disabled.</p>\n</blockquote>",
        "id": 488912873,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120625
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884473950\">PR review comment</a>:</p>\n<blockquote>\n<p>One thing I might recommend doing here is to match the <code>get_export</code> style from the Rust API where lookup-by-name isn't what's done in the component model exactly but rather it's \"lookup within this optional instance this name\" which return \"an exported thing\" and then the \"exported thing\" can be downcast into a function. That way this can handle nested exports in instances and such.</p>\n</blockquote>",
        "id": 488912874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120625
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884466077\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm still only reviewing the header file so far, but I'm a bit confused by this in the sense that a linker at least in Rust doesn't have a \"build\" operation, it can just always be used to instantiate after an item is added to the linker. Given that I'm not sure what this is doing internally and what the expected contract would be with respect to when callers need to use this in relation to instantiate below?</p>\n</blockquote>",
        "id": 488912875,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120625
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884470260\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there a missing <code>wasmtime_component_instance_delete</code>?</p>\n</blockquote>",
        "id": 488912876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120625
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884471100\">PR review comment</a>:</p>\n<blockquote>\n<p>Is there a missing <code>wasmtime_component_func_delete</code>?</p>\n</blockquote>",
        "id": 488912877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120625
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1884461833\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this be removed in favor of a <code>#include &lt;wasmtime/store.h&gt;</code>?</p>\n</blockquote>",
        "id": 488912885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734120627
    },
    {
        "content": "<p>lanfeust69 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2542352791\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<p>@alexcrichton : Thanks for a very quick first look !</p>\n<p>I personally prefer sizeable PR broken down through meaningful commits (because of the logical coupling, an oversight in an earlier PR may only be really visible when used later on), but unfortunately GitHub (as well as GitLab) make the review process much more PR/MR oriented than commit-oriented, which kind of defeats this approach. I'll try to see if I can find a split that makes sense to me (without looking closely, I have a feeling that some of the steps you suggest might be too small, at least compared to others).</p>\n<p>I'll try to answer your code-related comments tomorrow. I'm reasonably confident I'll eventually be able to actually address what should be done, though I won't make any promise on the timeline <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.</p>\n</blockquote>",
        "id": 488919287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734123422
    },
    {
        "content": "<p>lanfeust69 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2542363013\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Not sure if a function only used with some features should be marked <code>#[allow(dead_code)]</code> (which may miss the time it is no longer used) or <code>#[cfg(any(feature = \"feature1\", feature = \"feature2\"))]</code> (which gets unwieldy, and may prevent discoverability if useful elsewhere)</p>\n</blockquote>\n<p>We generally prefer the <code>cfg</code>-based approach, even though it can get unweildy, because it provides better compile times and code sizes. Discoverability is not an issue because we build docs for <a href=\"http://docs.rs\">docs.rs</a> with <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/lib.rs#L283\"><code>feature(doc_auto_cfg)</code></a> which automatically adds \"this method depends on blah feature\" to all <code>cfg</code>ed functions.</p>\n</blockquote>\n<p>Well, clippy barked at the <code>allow(dead_code)</code> version, so I ended up using the <code>cfg</code>-based version.</p>\n</blockquote>",
        "id": 488919933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734123617
    },
    {
        "content": "<p>lanfeust69 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503897130\">PR review</a>.</p>",
        "id": 489000715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734187920
    },
    {
        "content": "<p>lanfeust69 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1885087416\">PR review comment</a>:</p>\n<blockquote>\n<p>I tend to favor forward declarations when possible, mostly for build time reasons (more to include is slower, and changes in the included header imply a re-build that could be avoided). What are the reasons for preferring a full <code>#include</code> ?</p>\n</blockquote>",
        "id": 489000716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734187920
    },
    {
        "content": "<p>lanfeust69 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1885092715\">PR review comment</a>:</p>\n<blockquote>\n<p>This was the way I tried to \"hide\" the difference between <code>Linker</code> and <code>LinkerInstance</code>, the latter didn't seem useful to expose to the C api. But in order to add host functions to the linker, you need the appropriate <code>LinkerInstance</code>, and that can only be created once (through <code>.root()</code> of <code>.instance(name)</code>). An alternative could be to keep the <code>LinkerInstances</code> around in a map, or to provide a lookup mechanism to <code>Linker</code>.</p>\n</blockquote>",
        "id": 489002181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734189151
    },
    {
        "content": "<p>lanfeust69 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503900824\">PR review</a>.</p>",
        "id": 489002182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734189151
    },
    {
        "content": "<p>lanfeust69 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503902749\">PR review</a>.</p>",
        "id": 489002840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734189715
    },
    {
        "content": "<p>lanfeust69 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1885095201\">PR review comment</a>:</p>\n<blockquote>\n<p>Unless I missed something (very possible !) these instances are always created inside a store, belong to it, and will be deleted when the store goes down.</p>\n</blockquote>",
        "id": 489002841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734189716
    },
    {
        "content": "<p>lanfeust69 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503905121\">PR review</a>.</p>",
        "id": 489003378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734190167
    },
    {
        "content": "<p>lanfeust69 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1885097355\">PR review comment</a>:</p>\n<blockquote>\n<p>Possibly, I assumed <code>get_func</code> would return some kind of handle to existing data, but even (not so sure of that looking at the code) there is still the C wrapper to delete.</p>\n</blockquote>",
        "id": 489003379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734190168
    },
    {
        "content": "<p>lanfeust69 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503905212\">PR review</a>.</p>",
        "id": 489003458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734190205
    },
    {
        "content": "<p>lanfeust69 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1885097481\">PR review comment</a>:</p>\n<blockquote>\n<p>Makes sense, I'll look at this.</p>\n</blockquote>",
        "id": 489003459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734190205
    },
    {
        "content": "<p>lanfeust69 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2503908244\">PR review</a>.</p>",
        "id": 489004368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734190960
    },
    {
        "content": "<p>lanfeust69 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1885101207\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed, as this was part of the initial POC I started from, and matched my needs, I didn't look much more at the underlying structures on the Rust side. This may be a bit similar to my attempt to \"hide\" the <code>LinkerInstance</code>s nested structures within the <code>Linker</code>.</p>\n</blockquote>",
        "id": 489004369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734190960
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2509801301\">PR review</a>.</p>",
        "id": 489551164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461367
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1889054136\">PR review comment</a>:</p>\n<blockquote>\n<p>AFAIK build-time concerns matter a lot for C++ but far less so for C, so I'd prefer to not duplicate definitions because structures like this can change over time.</p>\n</blockquote>",
        "id": 489551166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461368
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2509805300\">PR review</a>.</p>",
        "id": 489551374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461457
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1889056120\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW I think it's fine to change the Rust APIs to better accomodate the C APIs if necessary, but otherwise I'd prefer to keep the two relatively in-sync to make them more managable to maintain, so having a <code>LinkerInstance</code> equivalent in the C API I think would be reasonable (or changing the Rust API to not be based on <code>LinkerInstance</code>)</p>\n</blockquote>",
        "id": 489551375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461457
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2509806344\">PR review</a>.</p>",
        "id": 489551433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461489
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1889056719\">PR review comment</a>:</p>\n<blockquote>\n<p>That's true yeah, but as an opaque pointer isn't this allocating something to make it pointer-sized in the implementation?</p>\n</blockquote>",
        "id": 489551434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461489
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2509808146\">PR review</a>.</p>",
        "id": 489551579,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461551
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1889057827\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I can see how this works for getting top-level exports, but ideally we'll want to at least set this API design up for extending to the entire component model even if it initially doesn't support it. In that sense I think it'd be good to model the nested instance structure of exports here.</p>\n</blockquote>",
        "id": 489551580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461551
    },
    {
        "content": "<p>rockwotj submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#pullrequestreview-2509810956\">PR review</a>.</p>",
        "id": 489551703,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461609
    },
    {
        "content": "<p>rockwotj created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#discussion_r1889059209\">PR review comment</a>:</p>\n<blockquote>\n<p>Plus one - C is super cheap to build and this is a trivial amount of just declarations.</p>\n</blockquote>",
        "id": 489551708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461609
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812#issuecomment-2549337510\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9812\">PR #9812</a>:</p>\n<blockquote>\n<p>Personally I'd prefer to split this into separate PRs if you're ok with that because there's a fair amount to discuss here and it's easy to lose track of discussions when it's all in one PR. I agree this is an unfortunate artifact of using github, but there's not a whole lot we can do about that other than work around it.</p>\n</blockquote>",
        "id": 489551851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734461654
    }
]