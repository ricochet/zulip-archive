[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264\">PR #3264</a> from <code>fuzz-v8</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit adds a differential fuzzing target to Wasmtime along the<br>\nlines of the wasmi and spec interpreters we already have, but with V8<br>\ninstead. The intention here is that wasmi is unlikely to receive updates<br>\nover time (e.g. for SIMD), and the spec interpreter is not suitable for<br>\nfuzzing against in general due to its performance characteristics. The<br>\nhope is that V8 is indeed appropriate to fuzz against because it's<br>\nnaturally receiving updates and it also is expected to have good<br>\nperformance.</p>\n<p>Here the <code>rusty_v8</code> crate is used which provides bindings to V8 as well<br>\nas precompiled binaries by default. This matches exactly the use case we<br>\nneed and at least for now I think the <code>rusty_v8</code> crate will be<br>\nmaintained by the Deno folks as they continue to develop it. If it<br>\nbecomes an issue though maintaining we can evaluate other options to<br>\nhave differential fuzzing against.</p>\n<p>For now this commit enables the SIMD and bulk-memory feature of<br>\nfuzz-target-generation which should enable them to get<br>\ndifferentially-fuzzed with V8 in addition to the compilation fuzzing<br>\nwe're already getting.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 251241439,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630335172
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#pullrequestreview-741822069\">PR review</a>.</p>",
        "id": 251252676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630339743
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#discussion_r698617410\">PR review comment</a>:</p>\n<blockquote>\n<p>Shouldn't we be comparing <code>v128</code> here and above?</p>\n</blockquote>",
        "id": 251252677,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630339743
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264\">PR #3264</a> from <code>fuzz-v8</code> to <code>main</code>.</p>",
        "id": 251254118,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630340408
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#pullrequestreview-741834264\">PR review</a>.</p>",
        "id": 251254407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630340541
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#discussion_r698627079\">PR review comment</a>:</p>\n<blockquote>\n<p>Node doesn't, at this time, support v128 values, so if you have a function that returns <code>v128</code>, for example, you get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">TypeError</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">incompatibility</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">transforming</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">JS</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Above this though there's a check with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// not supported yet in V8</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">results</span><span class=\"p\">()).</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">ValType</span>::<span class=\"n\">V128</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">log</span>::<span class=\"n\">trace</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"exported function uses v128, skipping\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>to avoid hitting this case by just skipping that fuzzing candidate.</p>\n</blockquote>",
        "id": 251254408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630340541
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#pullrequestreview-741859339\">PR review</a>.</p>",
        "id": 251258144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630342220
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#discussion_r698646974\">PR review comment</a>:</p>\n<blockquote>\n<p>er I should say that it doesn't support v128-in-JS, it only supports v128-in-wasm, so because we can only interact to wasm through JS that's where the limitation comes from</p>\n</blockquote>",
        "id": 251258145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630342220
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#pullrequestreview-741862043\">PR review</a>.</p>",
        "id": 251258529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630342405
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#discussion_r698649040\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I see.</p>\n</blockquote>",
        "id": 251258530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630342406
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264\">PR #3264</a> from <code>fuzz-v8</code> to <code>main</code>.</p>",
        "id": 251259791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630342887
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#pullrequestreview-741875208\">PR review</a>.</p>",
        "id": 251260920,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630343312
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#pullrequestreview-741875208\">PR review</a>.</p>",
        "id": 251260923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630343312
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264#discussion_r698658946\">PR review comment</a>:</p>\n<blockquote>\n<p>Can you add a comment here that it is the caller's responsibility to ensure that the given wasm won't infinitely loop, since we have no way of adding fuel/timeouts to v8, afaik? Alternatively, in the past I've tried to encode that in the type system by making the oracle a tiny bit less reusable and taking a <code>wasm_smith::Module</code> (or <code>wasm-opt -ttf</code> module in the before times) rather than a raw byte slice.</p>\n</blockquote>",
        "id": 251260924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630343312
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264\">PR #3264</a> from <code>fuzz-v8</code> to <code>main</code>.</p>",
        "id": 251388779,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630418182
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3264\">PR #3264</a>.</p>",
        "id": 251395382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630420496
    }
]