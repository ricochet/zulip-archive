[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a>.</p>",
        "id": 396950225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697478442
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a>.</p>",
        "id": 396950297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697478471
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a>:</p>\n<blockquote>\n<p>Currently the worker thread managing writes to stdout will drop when the guest-side write end is dropped. We need to fix this, as it's quite common to repeatedly call <code>std::io::get_stdout()</code> and drop the result in rust.</p>\n<p>The general approach that we discussed is to have the stdout/stderr worker tasks alive for the duration of the guest, and a separate channel for reporting new write channels to those tasks. The tasks would then be responsible for selecting between the new writer channel and all the known writer channels when processing incoming jobs, removing known writers from the managed set when those ends drop instead of aborting.</p>\n</blockquote>",
        "id": 396950707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697478652
    },
    {
        "content": "<p>elliottt assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7258\">issue #7258</a> to elliottt.</p>",
        "id": 396950783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1697478686
    }
]