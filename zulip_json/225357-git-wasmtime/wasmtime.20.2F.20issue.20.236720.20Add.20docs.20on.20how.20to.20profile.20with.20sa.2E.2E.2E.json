[
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6720#issuecomment-1634420238\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6720\">issue #6720</a>:</p>\n<blockquote>\n<p>Thank you! After your previous PR, @michelledaviest and @cfallin were recently trying out Samply with Wasmtime on macOS and we ran into issues, so I'm hoping this will help. I don't remember what the issues were though; Michelle and Chris, could you take a look at these instructions and see if they help you?</p>\n</blockquote>",
        "id": 374967153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689260975
    },
    {
        "content": "<p>michelledaviest <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6720#issuecomment-1634629548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6720\">issue #6720</a>:</p>\n<blockquote>\n<p>Hi! Our specific issue was that while samply works with perfmaps in wasmtime, the call tree and flamegraph that comes up only allows you to expand host code to show native code. The guest code function addresses don't get symbol names associated with them and can't be expanded into native code, so you can't actually inspect any of the guest code. Regardless, these instructions are exactly how I ran samply with perfmaps.</p>\n</blockquote>",
        "id": 375008613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689269194
    },
    {
        "content": "<p>Maaarcocr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6720#issuecomment-1637719823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6720\">issue #6720</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hi! Our specific issue was that while samply works with perfmaps in wasmtime, the call tree and flamegraph that comes up only allows you to expand host code to show native code. The guest code function addresses don't get symbol names associated with them and can't be expanded into native code, so you can't actually inspect any of the guest code. Regardless, these instructions are exactly how I ran samply with perfmaps.</p>\n</blockquote>\n<p>I think the issue may be that I was running a version of samply built from source, which has support for perfmaps. I think the latest release on <a href=\"http://crates.io\">crates.io</a> may not do so, which leads to not seeing guest code symbolised. I'll make sure to adjust the docs to outline this. This may change in the future when samply releases a new version. </p>\n</blockquote>",
        "id": 375954245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689587153
    }
]