[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1325\">Issue #1325</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently it is only possible to create symbols that are either local to an object file, or exported from the final linking artifact. It is not possible to create symbols that are exported from an object file, but are not exported from the final linking artifact.</p>\n<h4>Benefit</h4>\n<p>This makes it possible to export less symbols from dylibs. This may be required to prevent conflicting definitions of a symbol. It also makes the linker faster when linking against a dylib compiled by Cranelift.</p>\n<h4>Implementation</h4>\n<p>Add a new <code>Hidden</code> variant to <code>Linkage</code>.</p>\n<h4>Alternatives</h4>\n<p>In the long term we may want to refactor <code>Linkage</code> into the separate concepts it has: if a symbol is weak, the scope of the symbol, if <a href=\"https://www.airs.com/blog/archives/307\" target=\"_blank\" title=\"https://www.airs.com/blog/archives/307\">symbol interposition</a> is allowed, ... Adding a <code>Hidden</code> variant to <code>Linkage</code> is easier for now though.</p>\n</blockquote>",
        "id": 190606417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584208042
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1325#issuecomment-599347654\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1325#issuecomment-599347654\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1325\">Issue #1325</a>:</p>\n<blockquote>\n<p>The requirement totally makes sense to me. I'm good with adding just a new <code>Hidden</code> variant to <code>Linkage</code> now, if you don't mind it changing a bit when its time to do the bigger refactoring you suggest. It should be very straightforward to add support for <code>Linkage::Hidden</code> to all of the existing backends in-tree.</p>\n</blockquote>",
        "id": 190684481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584335326
    },
    {
        "content": "<p>pchickey closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1325\">Issue #1325</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently it is only possible to create symbols that are either local to an object file, or exported from the final linking artifact. It is not possible to create symbols that are exported from an object file, but are not exported from the final linking artifact.</p>\n<h4>Benefit</h4>\n<p>This makes it possible to export less symbols from dylibs. This may be required to prevent conflicting definitions of a symbol. It also makes the linker faster when linking against a dylib compiled by Cranelift.</p>\n<h4>Implementation</h4>\n<p>Add a new <code>Hidden</code> variant to <code>Linkage</code>.</p>\n<h4>Alternatives</h4>\n<p>In the long term we may want to refactor <code>Linkage</code> into the separate concepts it has: if a symbol is weak, the scope of the symbol, if <a href=\"https://www.airs.com/blog/archives/307\" target=\"_blank\" title=\"https://www.airs.com/blog/archives/307\">symbol interposition</a> is allowed, ... Adding a <code>Hidden</code> variant to <code>Linkage</code> is easier for now though.</p>\n</blockquote>",
        "id": 190892460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584470082
    }
]