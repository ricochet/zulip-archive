[
    {
        "content": "<p>Vurich opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. Additionally, this PR implements the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n</blockquote>",
        "id": 189789224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583414108
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 189789901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583414459
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 189790075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583414519
    },
    {
        "content": "<p>0x7CFE submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-369632425\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-369632425\">PR Review</a>.</p>",
        "id": 189803001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-369632425\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-369632425\">PR Review</a>.</p>",
        "id": 189803003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388342393\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388342393\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Was this TODO left intentionally?</p>\n</blockquote>",
        "id": 189803004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388345795\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388345795\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>TryFrom</code>? Should probably be something like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">u32</span>::<span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">function_body</span><span class=\"p\">.</span><span class=\"n\">module_offset</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;Module offset overflowed u32&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>",
        "id": 189803005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388344358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388344358\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this under/overflow?</p>\n</blockquote>",
        "id": 189803006,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388353404\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388353404\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Redundant <code>;</code>?</p>\n</blockquote>",
        "id": 189803007,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388366113\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388366113\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Was this commented out intentionally?</p>\n</blockquote>",
        "id": 189803008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388346948\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388346948\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Naming is inconsistent with other variables. Should probably be <code>offset_sink</code>.</p>\n</blockquote>",
        "id": 189803009,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422339
    },
    {
        "content": "<p>0x7CFE deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388353404\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r388353404\">PR Review Comment</a>.</p>",
        "id": 189803048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583422360
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-371477789\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-371477789\">PR Review</a>.</p>",
        "id": 190115707,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-371477789\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-371477789\">PR Review</a>.</p>",
        "id": 190115708,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389920822\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389920822\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In this patch, the only thing calling this <code>vmctx_builtin_function</code> has a <code>BuiltinFunctionIndex</code> which is converted to a <code>u32</code> with <code>.index()</code>. Instead of converting it to <code>u32</code> and back to <code>BuiltinFunctionIndex</code>, could we just pass around a <code>BuiltinFunctionIndex</code> everywhere?</p>\n</blockquote>",
        "id": 190115709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389928260\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389928260\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't see <code>auto_enums</code> being used anywhere in this patch; is it needed?</p>\n</blockquote>",
        "id": 190115710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389936714\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389936714\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Switching the wasm decoder is a very big change, and it's not clear what motivates it, or how it's connected to the rest of the PR. Could you split this part into a separate PR so that we can discuss it separately?</p>\n</blockquote>",
        "id": 190115711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389946317\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389946317\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would it be possible to split out the changes that introduce the dependency on <code>chain_one</code> into a separate PR? Changes introducing new external dependencies are something we'd like to consider carefully, and it's difficult to do that when it's bundled together with the rest of the changes here.</p>\n</blockquote>",
        "id": 190115712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389931774\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r389931774\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this dependency on <code>hashers</code> needed?</p>\n</blockquote>",
        "id": 190115713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1583786623
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 190500110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584104917
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 190500604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584105210
    },
    {
        "content": "<p>Vurich submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-374297930\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-374297930\">PR Review</a>.</p>",
        "id": 190502066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584106093
    },
    {
        "content": "<p>Vurich created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r392226586\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r392226586\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So as we weren't integrated with the latest Wasmtime for a while, this PR includes some changes that were implemented separately, before the integration. This work was part of two features: firstly, implementing trap information, and secondly converting Lightbeam to use <code>R: Read</code> everywhere instead of requiring a slice. It was used for the trap information as it hands control of the reader back to Lightbeam, so that Lightbeam can act independently of the parser WRT source location and other metadata. Specifically, it makes it so that Lightbeam can get the current position without requiring <code>wasmparser</code> to implement a specific accessor for the specific property we want. Both of these features would be very difficult to include separately to the rest of the work, as the integration with master was implemented on top of them. You can check the tests for <code>wasm-reader</code>, though, as it has an extensive test suite comparing it against <code>wasmparser</code>.</p>\n</blockquote>",
        "id": 190502067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584106093
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 190504276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1584107316
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 191589905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585045407
    },
    {
        "content": "<p>Vurich submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-380192886\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-380192886\">PR Review</a>.</p>",
        "id": 191592674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585046986
    },
    {
        "content": "<p>Vurich created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r397060304\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r397060304\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unfortunately the <code>BuiltinFunctionIndex</code> passed to this function and the <code>BuiltinFunctionIndex</code> used in the implementation of this function are not the same. I had to copy-paste the implementation to get the correct indices for the built-in functions and use <code>u32</code> for the types in the trait because otherwise I get cyclical dependencies - many of the types I would need to use are defined in <code>wasmtime-environ</code>, but Lightbeam is itself a dependency of <code>wasmtime-environ</code>.</p>\n</blockquote>",
        "id": 191592675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585046986
    },
    {
        "content": "<p>Vurich edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r397060304\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r397060304\">PR Review Comment</a>.</p>",
        "id": 191592696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585047001
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 192036261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585323804
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 192260680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585577415
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 192375884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585654130
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 192377425,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585655163
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 192380324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585656992
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 192397428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585665109
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-391198375\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-391198375\">PR Review</a>.</p>",
        "id": 193524481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586476280
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-391198375\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#pullrequestreview-391198375\">PR Review</a>.</p>",
        "id": 193524483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586476280
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r406535349\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232#discussion_r406535349\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ok. Could you add TODO comments mentioning that, as we discussed offline, the better approach here would be to start factoring out some of this into a separate crate that both Lightbeam and Cranelift could use?</p>\n</blockquote>",
        "id": 193524484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586476281
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 195055201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587646132
    },
    {
        "content": "<p>Vurich updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a> from <code>master</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR closes #979, as it integrates those changes along with the removal of <code>multi_mut</code> mentioned in that PR. All the spec tests are passing now, there were many weird bugs related to Lightbeam's lack of proper abstraction around the actual codegen, so hopefully this kind of change won't be so difficult in the future. This PR also implements trap info and the <code>ModuleAddressMap</code> debuginfo tagging in Lightbeam, although it's hard to tell if it is integrated correctly as there are no tests for it and as far as I can tell it's not possible to dump this information anywhere.</p>\n<p>You'll see that because of the aforementioned lack of abstraction, a lot of the changes for the caller vmctx work seem pretty janky. I have plans to remove all the jankyness, but I figured it was most important to just get it working again before starting on any work doing rearchitecturing.</p>\n<p>Additionally, there are a lot of indentation changes in <code>function_body</code> which make the +/- inaccurate and the diff hard to read, so consider using the \"Hide whitespace changes\" option in the diff settings.</p>\n</blockquote>",
        "id": 195393658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587980404
    },
    {
        "content": "<p>sunfishcode merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1232\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1232\">PR #1232</a>.</p>",
        "id": 195782741,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588202802
    }
]