[
    {
        "content": "<p>adamgfraser opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6588\">issue #6588</a>:</p>\n<blockquote>\n<p>It appears that there is an inconsistent use of absolute versus relative time in <code>Subscription::MonotonicClock</code>.</p>\n<p>Specifically, if you look at how a subscription is constructed <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/crates/wasi/src/preview2/sched.rs#L44\">here</a> we have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">subscribe_monotonic_clock</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">clock</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">WasiMonotonicClock</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">deadline</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">absolute</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">ud</span>: <span class=\"nc\">Userdata</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">deadline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">absolute</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// Convert an absolute deadline to a relative one.</span>\n<span class=\"w\">            </span><span class=\"n\">deadline</span><span class=\"p\">.</span><span class=\"n\">saturating_sub</span><span class=\"p\">(</span><span class=\"n\">clock</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">deadline</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">subs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span>\n<span class=\"w\">            </span><span class=\"n\">Subscription</span>::<span class=\"n\">MonotonicClock</span><span class=\"p\">(</span><span class=\"n\">MonotonicClockSubscription</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">deadline</span><span class=\"w\"> </span><span class=\"p\">}),</span>\n<span class=\"w\">            </span><span class=\"n\">ud</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This clearly indicates that the deadline is supposed to be a relative duration from the current time, so if we are at t = 2s and want to resume at t = 3s the deadline should be 1s.</p>\n<p>However, if you look at how we determine whether a subscription is ready <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/crates/wasi/src/preview2/sched/subscription.rs#L75\">here</a> we do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">result</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">checked_sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">deadline</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(()))</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">None</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Here we are checking if the subscription is ready by looking at whether the current time is after the deadline, assuming that the deadline represents an absolute point in time, which it doesn't as we saw above.</p>\n<p>So if in the same example as above we check whether the result is available at t = 2.5s we will get that it is available, since 2.5s is greater than 1s, when it is really not.</p>\n</blockquote>",
        "id": 366818311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686919841
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6588#issuecomment-1595575978\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6588\">issue #6588</a>:</p>\n<blockquote>\n<p>Good catch! I've now submitted #6597 to fix this.</p>\n</blockquote>",
        "id": 367038691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686967166
    },
    {
        "content": "<p>adamgfraser <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6588#issuecomment-1595576853\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6588\">issue #6588</a>:</p>\n<blockquote>\n<p>Fantastic!</p>\n</blockquote>",
        "id": 367039067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686967415
    },
    {
        "content": "<p>sunfishcode closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6588\">issue #6588</a>:</p>\n<blockquote>\n<p>It appears that there is an inconsistent use of absolute versus relative time in <code>Subscription::MonotonicClock</code>.</p>\n<p>Specifically, if you look at how a subscription is constructed <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/crates/wasi/src/preview2/sched.rs#L44\">here</a> we have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">subscribe_monotonic_clock</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">clock</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">WasiMonotonicClock</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">deadline</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">absolute</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">ud</span>: <span class=\"nc\">Userdata</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">deadline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">absolute</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// Convert an absolute deadline to a relative one.</span>\n<span class=\"w\">            </span><span class=\"n\">deadline</span><span class=\"p\">.</span><span class=\"n\">saturating_sub</span><span class=\"p\">(</span><span class=\"n\">clock</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">deadline</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">subs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span>\n<span class=\"w\">            </span><span class=\"n\">Subscription</span>::<span class=\"n\">MonotonicClock</span><span class=\"p\">(</span><span class=\"n\">MonotonicClockSubscription</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">deadline</span><span class=\"w\"> </span><span class=\"p\">}),</span>\n<span class=\"w\">            </span><span class=\"n\">ud</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This clearly indicates that the deadline is supposed to be a relative duration from the current time, so if we are at t = 2s and want to resume at t = 3s the deadline should be 1s.</p>\n<p>However, if you look at how we determine whether a subscription is ready <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/crates/wasi/src/preview2/sched/subscription.rs#L75\">here</a> we do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">result</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">now</span><span class=\"p\">().</span><span class=\"n\">checked_sub</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">deadline</span><span class=\"p\">).</span><span class=\"n\">is_some</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(()))</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">None</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Here we are checking if the subscription is ready by looking at whether the current time is after the deadline, assuming that the deadline represents an absolute point in time, which it doesn't as we saw above.</p>\n<p>So if in the same example as above we check whether the result is available at t = 2.5s we will get that it is available, since 2.5s is greater than 1s, when it is really not.</p>\n</blockquote>",
        "id": 368238339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687354180
    }
]