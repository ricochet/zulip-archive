[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR addresses some of the issues found in #3050 regarding the performance of fuzzgen. We found that we had an outsized number of timeouts during execution of the fuzzer. This is mostly due to generating a bunch of infinite loops.</p>\n<p>This changes our branching strategy. Instead of choosing blocks at random, we always choose a block ahead of the current block. This makes it so that we always make forward progress and don't time out very often. I still think backwards branches are important to generate, so we make those a configurable option (0.1% of branches).</p>\n<p>Additionally it looks like not having valid target branches was also an issue. 27.3% of our invalid <code>Arbitrary::choice</code> failures were due to us trying to select a block that we didn't have. Such as for example trying to select a block that does not have params when all of them do.<br>\nWe are now smarter about which terminators we allow to be inserted avoiding these issues.</p>\n<p>cc: @jameysharp </p>\n<h2>Benchmarks</h2>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;&lt;h3&gt;Baseline&lt;/h3&gt;&lt;/summary&gt;</p>\n<p>Statistics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">49967</span><span class=\"w\">  </span><span class=\"n\">NEW</span><span class=\"w\">    </span><span class=\"n\">cov</span>: <span class=\"mi\">31776</span><span class=\"w\"> </span><span class=\"n\">ft</span>: <span class=\"mi\">183224</span><span class=\"w\"> </span><span class=\"n\">corp</span>: <span class=\"mi\">4225</span><span class=\"o\">/</span><span class=\"mi\">5444</span><span class=\"n\">Kb</span><span class=\"w\"> </span><span class=\"n\">lim</span>: <span class=\"mi\">394895</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span>: <span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"n\">rss</span>: <span class=\"mi\">966</span><span class=\"n\">Mb</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"mi\">2106</span><span class=\"o\">/</span><span class=\"mi\">373965</span><span class=\"w\"> </span><span class=\"n\">MS</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">ShuffleBytes</span><span class=\"o\">-</span><span class=\"n\">CopyPart</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">18378</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">36.8</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">62769</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">48229</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">76.8</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">10440</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">16.6</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">4100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">6.5</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>Arbitrary::choice</code> failures:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">20139</span><span class=\"w\"> </span><span class=\"n\">stacks</span><span class=\"w\"></span>\n\n<span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">duplicates</span><span class=\"w\"></span>\n<span class=\"mf\">5.9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">1181</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_br_table</span><span class=\"w\"></span>\n<span class=\"mf\">8.3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">1679</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_jumptables</span><span class=\"w\"></span>\n<span class=\"mf\">1.4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">282</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_switch</span><span class=\"w\"></span>\n<span class=\"mf\">11.7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">2355</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_target_block</span><span class=\"w\"></span>\n<span class=\"mf\">29.9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">6014</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">get_variable_of_type</span><span class=\"w\"></span>\n<span class=\"mf\">29.7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5991</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">stack_slot_with_size</span><span class=\"w\"></span>\n<span class=\"mf\">13.1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">2637</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">insert_call</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;&lt;h3&gt;This PR&lt;/h3&gt;&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">49979</span><span class=\"w\">  </span><span class=\"n\">NEW</span><span class=\"w\">    </span><span class=\"n\">cov</span>: <span class=\"mi\">31503</span><span class=\"w\"> </span><span class=\"n\">ft</span>: <span class=\"mi\">178604</span><span class=\"w\"> </span><span class=\"n\">corp</span>: <span class=\"mi\">3520</span><span class=\"o\">/</span><span class=\"mi\">7374</span><span class=\"n\">Kb</span><span class=\"w\"> </span><span class=\"n\">lim</span>: <span class=\"mi\">1048576</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">rss</span>: <span class=\"mi\">1054</span><span class=\"n\">Mb</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"mi\">2702</span><span class=\"o\">/</span><span class=\"mi\">1048576</span><span class=\"w\"> </span><span class=\"n\">MS</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">CMP</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">DE</span>: <span class=\"s\">\"</span><span class=\"se\">\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x05</span><span class=\"s\">\"</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">21036</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">42.1</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">724599</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">719276</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">99.3</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">5291</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">14367</span><span class=\"w\"> </span><span class=\"n\">stacks</span><span class=\"w\"></span>\n\n<span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">duplicates</span><span class=\"w\"></span>\n<span class=\"mf\">41.3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5936</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">get_variable_of_type</span><span class=\"w\"></span>\n<span class=\"mf\">37.6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5395</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">stack_slot_with_size</span><span class=\"w\"></span>\n<span class=\"mf\">21.1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">3036</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">insert_call</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This improves execs/s by 108% (23 -&gt; 48) which is nice. It also eliminates all invalid choices regarding block terminators. </p>\n</blockquote>",
        "id": 298277201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662919892
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR addresses some of the issues found in #3050 regarding the performance of fuzzgen. We found that we had an outsized number of timeouts during execution of the fuzzer. This is mostly due to generating a bunch of infinite loops.</p>\n<p>This changes our branching strategy. Instead of choosing blocks at random, we always choose a block ahead of the current block. This makes it so that we always make forward progress and don't time out very often. I still think backwards branches are important to generate, so we make those a configurable option (0.1% of branches).</p>\n<p>Additionally it looks like not having valid target branches was also an issue. 27.3% of our invalid <code>Arbitrary::choice</code> failures were due to us trying to select a block that we didn't have. Such as for example trying to select a block that does not have params when all of them do.<br>\nWe are now smarter about which terminators we allow to be inserted avoiding these issues.</p>\n<p>cc: @jameysharp </p>\n<h2>Benchmarks</h2>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;&lt;h3&gt;Baseline&lt;/h3&gt;&lt;/summary&gt;</p>\n<p>Statistics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">49967</span><span class=\"w\">  </span><span class=\"n\">NEW</span><span class=\"w\">    </span><span class=\"n\">cov</span>: <span class=\"mi\">31776</span><span class=\"w\"> </span><span class=\"n\">ft</span>: <span class=\"mi\">183224</span><span class=\"w\"> </span><span class=\"n\">corp</span>: <span class=\"mi\">4225</span><span class=\"o\">/</span><span class=\"mi\">5444</span><span class=\"n\">Kb</span><span class=\"w\"> </span><span class=\"n\">lim</span>: <span class=\"mi\">394895</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span>: <span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"n\">rss</span>: <span class=\"mi\">966</span><span class=\"n\">Mb</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"mi\">2106</span><span class=\"o\">/</span><span class=\"mi\">373965</span><span class=\"w\"> </span><span class=\"n\">MS</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">ShuffleBytes</span><span class=\"o\">-</span><span class=\"n\">CopyPart</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">18378</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">36.8</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">62769</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">48229</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">76.8</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">10440</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">16.6</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">4100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">6.5</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>Arbitrary::choice</code> failures:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">20139</span><span class=\"w\"> </span><span class=\"n\">stacks</span><span class=\"w\"></span>\n\n<span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">duplicates</span><span class=\"w\"></span>\n<span class=\"mf\">5.9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">1181</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_br_table</span><span class=\"w\"></span>\n<span class=\"mf\">8.3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">1679</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_jumptables</span><span class=\"w\"></span>\n<span class=\"mf\">1.4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">282</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_switch</span><span class=\"w\"></span>\n<span class=\"mf\">11.7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">2355</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_target_block</span><span class=\"w\"></span>\n<span class=\"mf\">29.9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">6014</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">get_variable_of_type</span><span class=\"w\"></span>\n<span class=\"mf\">29.7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5991</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">stack_slot_with_size</span><span class=\"w\"></span>\n<span class=\"mf\">13.1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">2637</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">insert_call</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;&lt;h3&gt;This PR&lt;/h3&gt;&lt;/summary&gt;</p>\n<p>Statistics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">49979</span><span class=\"w\">  </span><span class=\"n\">NEW</span><span class=\"w\">    </span><span class=\"n\">cov</span>: <span class=\"mi\">31503</span><span class=\"w\"> </span><span class=\"n\">ft</span>: <span class=\"mi\">178604</span><span class=\"w\"> </span><span class=\"n\">corp</span>: <span class=\"mi\">3520</span><span class=\"o\">/</span><span class=\"mi\">7374</span><span class=\"n\">Kb</span><span class=\"w\"> </span><span class=\"n\">lim</span>: <span class=\"mi\">1048576</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">rss</span>: <span class=\"mi\">1054</span><span class=\"n\">Mb</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"mi\">2702</span><span class=\"o\">/</span><span class=\"mi\">1048576</span><span class=\"w\"> </span><span class=\"n\">MS</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">CMP</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">DE</span>: <span class=\"s\">\"</span><span class=\"se\">\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x05</span><span class=\"s\">\"</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">21036</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">42.1</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">724599</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">719276</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">99.3</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">5291</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>Arbitrary::choice</code> failures:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">14367</span><span class=\"w\"> </span><span class=\"n\">stacks</span><span class=\"w\"></span>\n\n<span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">duplicates</span><span class=\"w\"></span>\n<span class=\"mf\">41.3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5936</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">get_variable_of_type</span><span class=\"w\"></span>\n<span class=\"mf\">37.6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5395</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">stack_slot_with_size</span><span class=\"w\"></span>\n<span class=\"mf\">21.1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">3036</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">insert_call</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This improves execs/s by 108% (23 -&gt; 48) which is nice. It also eliminates all invalid choices regarding block terminators. </p>\n</blockquote>",
        "id": 298280433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662922295
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR addresses some of the issues found in #3050 regarding the performance of fuzzgen. We found that we had an outsized number of timeouts during execution of the fuzzer. This is mostly due to generating a bunch of infinite loops.</p>\n<p>This changes our branching strategy. Instead of choosing blocks at random, we always choose a block ahead of the current block. This makes it so that we always make forward progress and don't time out very often. I still think backwards branches are important to generate, so we make those a configurable option (0.1% of branches).</p>\n<p>Additionally it looks like not having valid target branches was also an issue. 27.3% of our invalid <code>Arbitrary::choice</code> failures were due to us trying to select a block that we didn't have. Such as for example trying to select a block that does not have params when all of them do.<br>\nWe are now smarter about which terminators we allow to be inserted avoiding these issues.</p>\n<p>cc: @jameysharp </p>\n<h2>Benchmarks</h2>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;&lt;h3&gt;Baseline&lt;/h3&gt;&lt;/summary&gt;</p>\n<p>Statistics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">49967</span><span class=\"w\">  </span><span class=\"n\">NEW</span><span class=\"w\">    </span><span class=\"n\">cov</span>: <span class=\"mi\">31776</span><span class=\"w\"> </span><span class=\"n\">ft</span>: <span class=\"mi\">183224</span><span class=\"w\"> </span><span class=\"n\">corp</span>: <span class=\"mi\">4225</span><span class=\"o\">/</span><span class=\"mi\">5444</span><span class=\"n\">Kb</span><span class=\"w\"> </span><span class=\"n\">lim</span>: <span class=\"mi\">394895</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span>: <span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"n\">rss</span>: <span class=\"mi\">966</span><span class=\"n\">Mb</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"mi\">2106</span><span class=\"o\">/</span><span class=\"mi\">373965</span><span class=\"w\"> </span><span class=\"n\">MS</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">ShuffleBytes</span><span class=\"o\">-</span><span class=\"n\">CopyPart</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">18378</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">36.8</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">62769</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">48229</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">76.8</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">10440</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">16.6</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">4100</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">6.5</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>Arbitrary::choice</code> failures:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">20139</span><span class=\"w\"> </span><span class=\"n\">stacks</span><span class=\"w\"></span>\n\n<span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">duplicates</span><span class=\"w\"></span>\n<span class=\"mf\">5.9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">1181</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_br_table</span><span class=\"w\"></span>\n<span class=\"mf\">8.3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">1679</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_jumptables</span><span class=\"w\"></span>\n<span class=\"mf\">1.4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">282</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_switch</span><span class=\"w\"></span>\n<span class=\"mf\">11.7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">2355</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">generate_target_block</span><span class=\"w\"></span>\n<span class=\"mf\">29.9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">6014</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">get_variable_of_type</span><span class=\"w\"></span>\n<span class=\"mf\">29.7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5991</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">stack_slot_with_size</span><span class=\"w\"></span>\n<span class=\"mf\">13.1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">2637</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">insert_call</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;&lt;h3&gt;This PR&lt;/h3&gt;&lt;/summary&gt;</p>\n<p>Statistics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">49979</span><span class=\"w\">  </span><span class=\"n\">NEW</span><span class=\"w\">    </span><span class=\"n\">cov</span>: <span class=\"mi\">31503</span><span class=\"w\"> </span><span class=\"n\">ft</span>: <span class=\"mi\">178604</span><span class=\"w\"> </span><span class=\"n\">corp</span>: <span class=\"mi\">3520</span><span class=\"o\">/</span><span class=\"mi\">7374</span><span class=\"n\">Kb</span><span class=\"w\"> </span><span class=\"n\">lim</span>: <span class=\"mi\">1048576</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">s</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">rss</span>: <span class=\"mi\">1054</span><span class=\"n\">Mb</span><span class=\"w\"> </span><span class=\"n\">L</span>: <span class=\"mi\">2702</span><span class=\"o\">/</span><span class=\"mi\">1048576</span><span class=\"w\"> </span><span class=\"n\">MS</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">CMP</span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">DE</span>: <span class=\"s\">\"</span><span class=\"se\">\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x05</span><span class=\"s\">\"</span><span class=\"o\">-</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">21036</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">42.1</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">724599</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">719276</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">99.3</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">5291</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>Arbitrary::choice</code> failures:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Loaded</span><span class=\"w\"> </span><span class=\"mi\">14367</span><span class=\"w\"> </span><span class=\"n\">stacks</span><span class=\"w\"></span>\n\n<span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">Line</span><span class=\"w\"> </span><span class=\"n\">duplicates</span><span class=\"w\"></span>\n<span class=\"mf\">41.3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5936</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">get_variable_of_type</span><span class=\"w\"></span>\n<span class=\"mf\">37.6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">5395</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">FunctionGenerator</span>::<span class=\"n\">stack_slot_with_size</span><span class=\"w\"></span>\n<span class=\"mf\">21.1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Count</span>: <span class=\"mi\">3036</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Line</span>:    <span class=\"mi\">0</span>: <span class=\"nc\">cranelift_fuzzgen</span>::<span class=\"n\">function_generator</span>::<span class=\"n\">insert_call</span><span class=\"w\"></span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>This improves execs/s by 108% (23 -&gt; 48) which is nice. It also eliminates all invalid choices regarding block terminators so we reject fewer inputs as well. </p>\n</blockquote>",
        "id": 298281056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662922766
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968958328\">PR review comment</a>:</p>\n<blockquote>\n<p>It's a minor thing, but I'd prefer to not consume any fuzz input if there aren't any backwards blocks to jump to:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let (backwards_blocks, forward_blocks) = self.resources.partition_blocks(source_block);\n        let block_targets = if !backwards_blocks.is_empty() &amp;&amp; self.u.ratio(1, 1000)? {\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 298485234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968835166\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // so generate a return. We could technically give it a chance to generate a backwards\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 298485236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968836245\">PR review comment</a>:</p>\n<blockquote>\n<p>I think <code>forward_blocks</code> should always be non-empty here because you return early if <code>is_last_block</code>. So you could either treat the <code>has_forward_blocks</code> checks below as always-true, or you could remove the early return in the <code>is_last_block</code> case above. I'd be inclined to remove the <code>is_last_block</code> check, because that check represents a second place where you have to reason about which terminators are legal. I think this function would continue to work correctly without that check.</p>\n<p>Note that <code>Unstructured::choose</code> doesn't consume any of the fuzz input if there's only one choice, so we don't lose anything important by just calling it every time.</p>\n</blockquote>",
        "id": 298485237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968807916\">PR review comment</a>:</p>\n<blockquote>\n<p>Unlike <code>partition_blocks</code>, you'd definitely have to search to find the right slice, but I think this can still be simplified:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let partition_point = self.blocks_without_params.partition_point(|b| *b &lt;= block);\n        &amp;self.blocks_without_params[partition_point..]\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 298485238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968962870\">PR review comment</a>:</p>\n<blockquote>\n<p>Seems unfortunate that <code>insert_switch</code> can't generate backward branches, but I guess that's fine.</p>\n</blockquote>",
        "id": 298485239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968855835\">PR review comment</a>:</p>\n<blockquote>\n<p>What do you think of something along these lines?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">terminators</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">BlockTerminator</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">insert_return</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">insert_switch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">has_forward_blocks_without_params</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">valid</span><span class=\"p\">).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">term</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We could go further and compute, for each kind of terminator, the first block index where that kind is not valid any more. (Something not valid anywhere in this function would be invalid at block 0, and something that's valid everywhere would become invalid sometime after the last block in the function.) Then we could reuse that list for every block instead of computing it fresh every time. If we have it sorted by block index, then we can choose from a suffix of the array, and never have to copy it.</p>\n<p>But that's probably more work than it's worth. I like that the way you've written it means you can check whether a terminator is valid for a block by just getting the same list of targets that the <code>insert_*</code> functions would get.</p>\n</blockquote>",
        "id": 298485240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968793329\">PR review comment</a>:</p>\n<blockquote>\n<p>I haven't checked carefully but I think this should be equivalent. All blocks less than or equal to <code>block</code> are in <code>&amp;blocks[..partition_point]</code> and all greater than <code>block</code> are in <code>&amp;blocks[partition_point..]</code>, and that's true even if either of those slices is empty.</p>\n<div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let partition_point = self.blocks.partition_point(|(b, _)| *b &lt;= block);\n</code></pre></div>\n<p>That said... Aren't the blocks added in-order and without gaps? Like, is <code>self.blocks[i].0</code> always equal to <code>Block::new(i)</code>? Again, I haven't checked that, but if so we shouldn't need to store the block number and we should be able to find the right block just by indexing into the array.</p>\n</blockquote>",
        "id": 298485241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r968851467\">PR review comment</a>:</p>\n<blockquote>\n<p>Not important, but you can remove a layer of indirection by calling <code>copied()</code> sooner. Also I think if you shorten it this way <code>rustfmt</code> should still be happy.</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        let jump_tables = &amp;builder.func.jump_tables;\n        self.jump_tables\n            .iter()\n            .copied()\n            .filter(|jt| jump_tables[*jt].iter().all(|target| *target &gt; block))\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 298485243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1104664173\">PR review</a>.</p>",
        "id": 298485246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1104664173\">PR review</a>.</p>",
        "id": 298485247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663019763
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1107269872\">PR review</a>.</p>",
        "id": 298747823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663153619
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r970663128\">PR review comment</a>:</p>\n<blockquote>\n<p>That is much neater, thanks! I wasn't aware of <code>partition_point()</code></p>\n</blockquote>",
        "id": 298747827,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663153621
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r970692920\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, we should probably include that</p>\n</blockquote>",
        "id": 298752963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663155613
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1107315693\">PR review</a>.</p>",
        "id": 298752970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663155616
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1107724032\">PR review</a>.</p>",
        "id": 298791071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663168673
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r970960399\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't mind leaving this as something to come back to later though. If you want to just add a TODO comment to <code>insert_switch</code> that it would be nice to also check backward branches, that's plenty.</p>\n</blockquote>",
        "id": 298791072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663168673
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r971209400\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that's a great suggestion! I was able to get this to the point where we directly index into the blocks vector using the block number. </p>\n<p>We don't necessarily need to store the block alongside the Signature, however removing it makes it so that we can't return a slice here, and the caller of this is quite messy without it and without allocating anything.</p>\n</blockquote>",
        "id": 298835938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183311
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1108081686\">PR review</a>.</p>",
        "id": 298835939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183311
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>.</p>",
        "id": 298835987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183323
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r971215429\">PR review comment</a>:</p>\n<blockquote>\n<p>I like the list thingy. Precomputing the terminator block validity is nice but I also think is a bit of work <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n</blockquote>",
        "id": 298837018,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183684
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1108089790\">PR review</a>.</p>",
        "id": 298837020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183684
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1108091375\">PR review</a>.</p>",
        "id": 298837213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183757
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r971216601\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, good point! Storing the block number does make things easier in the caller.</p>\n</blockquote>",
        "id": 298837214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663183757
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>.</p>",
        "id": 298838470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663184204
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1108127991\">PR review</a>.</p>",
        "id": 298841908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663185581
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r971241430\">PR review comment</a>:</p>\n<blockquote>\n<p>On further thought, we could avoid allocating here by sorting <code>self.jump_tables</code> in <code>generate_jumptables</code>. I'm happy to merge without it but I'm going to write down the idea in case you decide you want to do it.</p>\n<p>The sort key is <code>|jt| builder.func.jump_tables[*jt].iter().min()</code>. In <code>generate_jumptables</code> you could use that as the argument to <code>self.resources.jump_tables.sort_by_cached_key(...)</code>. Then here you could use it in <code>self.jump_tables.partition_point(... &lt;= block)</code>.</p>\n<p>To keep the sort key computation in only one place, you could have <code>generate_jumptables</code> save a pair of <code>(min_block, table_id)</code> in <code>self.resources.jump_tables</code>. Then the sort is just <code>self.resources.jump_tables.sort_unstable_by_key(|(min_block, _)| *min_block)</code> and this function just needs <code>self.jump_tables.partition_point(|(min_block, _)| *min_block &lt;= block)</code>.</p>\n</blockquote>",
        "id": 298841909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663185581
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1108127991\">PR review</a>.</p>",
        "id": 298841910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663185581
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>.</p>",
        "id": 298960171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663245685
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#discussion_r971989459\">PR review comment</a>:</p>\n<blockquote>\n<p>That sounds quite doable! I'm going to add a TODO comment to revisit later, I'd prefer to tackle the other fuzzgen issues for now.</p>\n</blockquote>",
        "id": 298968367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663248590
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894#pullrequestreview-1109198390\">PR review</a>.</p>",
        "id": 298968368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663248590
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> from <code>forward-branching</code> to <code>main</code>.</p>",
        "id": 298968466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663248618
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a> as ready for review.</p>",
        "id": 299025267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663265541
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4894\">PR #4894</a>.</p>",
        "id": 299027948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663266591
    }
]