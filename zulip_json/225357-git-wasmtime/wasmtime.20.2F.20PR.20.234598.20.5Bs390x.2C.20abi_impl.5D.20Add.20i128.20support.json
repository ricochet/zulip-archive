[
    {
        "content": "<p>uweigand opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598\">PR #4598</a> from <code>s390x-i128</code> to <code>main</code>:</p>\n<blockquote>\n<p>This adds full i128 support to the s390x target, including new filetests<br>\nand enabling the existing i128 runtest on s390x.</p>\n<p>The ABI requires that i128 is passed and returned via implicit pointer,<br>\nbut the front end still generates direct i128 types in call.  This means<br>\nwe have to implement ABI support to implicitly convert i128 types to<br>\npointers when passing arguments.</p>\n<p>To do so, we add a new variant ABIArg::ImplicitArg.  This acts like<br>\nStructArg, except that the value type is the actual target type,<br>\nnot a pointer type.  The required conversions have to be inserted<br>\nin the prologue and at function call sites.</p>\n<p>Note that when dereferencing the implicit pointer in the prologue,<br>\nwe may require a temp register: the pointer may be passed on the<br>\nstack so it needs to be loaded first, but the value register may<br>\nbe in the wrong class for pointer values.  In this case, we use<br>\nthe \"stack limit\" register, which should be available at this<br>\npoint in the prologue.</p>\n<p>For return values, we use a mechanism similar to the one used for<br>\nsupporting multiple return values in the Wasmtime ABI.  The only<br>\ndifference is that the hidden pointer to the return buffer must<br>\nbe the <em>first</em>, not last, argument in this case.</p>\n<p>(FYI @cfallin  - This implements the second half of issue #4565.)</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 291907453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659554482
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938050961\">PR review comment</a>:</p>\n<blockquote>\n<p>As an alternative I suppose we could provide an \"allocate temp vreg\" callback to <code>gen_copy_arg_to_regs</code>; this codegen happens before regalloc so it is still an option to create vregs here. Perhaps a comment here to record the altnernate possibility? (We may in the future want to remove the need for more dedicated non-allocatable registers, at which point it may become more relevant.)</p>\n</blockquote>",
        "id": 292040836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659633098
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938047839\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we call this an <code>ImplicitPtrArg</code> or similar? Just <code>ImplicitArg</code> seems slightly ambiguous to me; like the arg itself is implicitly generated at callsites or something like that.</p>\n</blockquote>",
        "id": 292040837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659633098
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938045623\">PR review comment</a>:</p>\n<blockquote>\n<p>Comment somewhere in here that we write <code>tmp</code> only after the last reads of <code>rn</code> and <code>rm</code>, as required by the semantics of ordinary (early) uses and ordinary (late) defs? And perhaps a note that if this changes, <code>tmp</code> has to become an early def. (I mostly want to future-proof against a subtle mistake later.)</p>\n</blockquote>",
        "id": 292040838,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659633098
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938052415\">PR review comment</a>:</p>\n<blockquote>\n<p>Add a note here that s390x is not yet supported because (reason)?</p>\n</blockquote>",
        "id": 292040840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659633098
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062301258\">PR review</a>.</p>",
        "id": 292040841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659633098
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062301258\">PR review</a>.</p>",
        "id": 292040842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659633098
    },
    {
        "content": "<p>uweigand updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598\">PR #4598</a> from <code>s390x-i128</code> to <code>main</code>.</p>",
        "id": 292061644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659642954
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062518136\">PR review</a>.</p>",
        "id": 292061775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659642991
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938197067\">PR review comment</a>:</p>\n<blockquote>\n<p>Done</p>\n</blockquote>",
        "id": 292061776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659642992
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062518336\">PR review</a>.</p>",
        "id": 292061794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659643002
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938197196\">PR review comment</a>:</p>\n<blockquote>\n<p>Done</p>\n</blockquote>",
        "id": 292061795,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659643002
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938199660\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yes, that's better.   However, I wasn't able to get a callback past the borrow checker - maybe I'm just not experienced enough with Rust, but it does look a real problem:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">vcode</span><span class=\"p\">.</span><span class=\"n\">abi</span><span class=\"p\">().</span><span class=\"n\">gen_copy_arg_to_regs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">regs</span><span class=\"p\">).</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This already holds a borrow on <code>self</code> during the <code>gen_copy_arg_to_regs</code> call.  Passing a closure would require another (mutable) borrow on <code>self</code>, which isn't allowed.</p>\n<p>Instead, I noticed that there is already a mechanism to pass a temp reg to <code>ABICallee</code> via the <code>temp_needed</code>/<code>init</code> mechanism, so I simply extended that to support multiple temps.</p>\n</blockquote>",
        "id": 292062254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659643207
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062521870\">PR review</a>.</p>",
        "id": 292062255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659643207
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062522000\">PR review</a>.</p>",
        "id": 292062273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659643214
    },
    {
        "content": "<p>uweigand created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#discussion_r938199753\">PR review comment</a>:</p>\n<blockquote>\n<p>Done</p>\n</blockquote>",
        "id": 292062274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659643214
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598#pullrequestreview-1062539089\">PR review</a>.</p>",
        "id": 292064266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659644210
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598\">PR #4598</a>.</p>",
        "id": 292064278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659644217
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4598\">PR #4598</a>.</p>",
        "id": 292067286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659645687
    }
]