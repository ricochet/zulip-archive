[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>For core wasm Wasmtime offers the <code>Func</code> and <code>TypedFunc</code> APIs for calling into WebAssembly. The current intention is to provide the same for the component model. Currently the <code>TypedFunc</code> API exists, but the <code>Func</code> API doesn't actually support calls.</p>\n<p>The intended use case for this feature is for something like the wasmtime CLI where it wants to be able to call any component it loads so we can't statically enumerate the signatures ahead of time. It's expected that this version of calling a component is slower (perhaps significantly so) than calling a typed function.</p>\n<p>Currently I don't have many ideas about how the implementation will be done. The rough idea is that there'd be some sort of <code>wasmtime::Val</code> equivalent but for the component model. Like with <code>Val</code> the actual value iteslf is \"tagged\" with the type information. The actual implementation of this is going to be much trickier than core wasm because <code>Val</code> only deals with primitives and a component model value can recursively contain other component model values. This will likely imply a significant overhead in terms of allocations, indirection, and management.</p>\n<p>I do not think that the <code>wasmtime::component::Val</code> type will implement any of <code>ComponentValue</code>, <code>Lift</code>, or <code>Lower</code>. Those are intended only for types where the type in the component model is statically known at compile-time.</p>\n<p>This work is also motivated by unlocking half of the fuzzing possiblities in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4307\">https://github.com/bytecodealliance/wasmtime/issues/4307</a></p>\n</blockquote>",
        "id": 287263132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656021107
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>For core wasm Wasmtime offers the <code>Func</code> and <code>TypedFunc</code> APIs for calling into WebAssembly. The current intention is to provide the same for the component model. Currently the <code>TypedFunc</code> API exists, but the <code>Func</code> API doesn't actually support calls.</p>\n<p>The intended use case for this feature is for something like the wasmtime CLI where it wants to be able to call any component it loads so we can't statically enumerate the signatures ahead of time. It's expected that this version of calling a component is slower (perhaps significantly so) than calling a typed function.</p>\n<p>Currently I don't have many ideas about how the implementation will be done. The rough idea is that there'd be some sort of <code>wasmtime::Val</code> equivalent but for the component model. Like with <code>Val</code> the actual value iteslf is \"tagged\" with the type information. The actual implementation of this is going to be much trickier than core wasm because <code>Val</code> only deals with primitives and a component model value can recursively contain other component model values. This will likely imply a significant overhead in terms of allocations, indirection, and management.</p>\n<p>I do not think that the <code>wasmtime::component::Val</code> type will implement any of <code>ComponentValue</code>, <code>Lift</code>, or <code>Lower</code>. Those are intended only for types where the type in the component model is statically known at compile-time.</p>\n<p>This work is also motivated by unlocking half of the fuzzing possiblities in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4307\">https://github.com/bytecodealliance/wasmtime/issues/4307</a></p>\n</blockquote>",
        "id": 287263133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656021107
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310#issuecomment-1164916452\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>One other thing worth mentioning here is that the support here not only applies to <code>wasmtime::component::Func</code> but also the <code>wasmtime::component::Linker</code> type. Ideally a host function can be defined generically with a runtime-defined signature which allows other interesting forms of fuzzing and such. My hope would be that if untyped values work in <code>Func</code> it would be relatively easy to add support to <code>Linker</code> to do the same thing.</p>\n</blockquote>",
        "id": 287263328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656021221
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310#issuecomment-1179038891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>I'm going to start experimenting with this today.</p>\n</blockquote>",
        "id": 288945785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657289710
    },
    {
        "content": "<p>dicej <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310#issuecomment-1183308145\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>Quick update: I've mostly finished with this -- just fleshing out the test suite.  Should have a PR up today.</p>\n</blockquote>",
        "id": 289468665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657723056
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310#issuecomment-1194464969\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>Implemented in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4442\">https://github.com/bytecodealliance/wasmtime/pull/4442</a></p>\n</blockquote>",
        "id": 290801061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658774358
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4310\">issue #4310</a>:</p>\n<blockquote>\n<p>For core wasm Wasmtime offers the <code>Func</code> and <code>TypedFunc</code> APIs for calling into WebAssembly. The current intention is to provide the same for the component model. Currently the <code>TypedFunc</code> API exists, but the <code>Func</code> API doesn't actually support calls.</p>\n<p>The intended use case for this feature is for something like the wasmtime CLI where it wants to be able to call any component it loads so we can't statically enumerate the signatures ahead of time. It's expected that this version of calling a component is slower (perhaps significantly so) than calling a typed function.</p>\n<p>Currently I don't have many ideas about how the implementation will be done. The rough idea is that there'd be some sort of <code>wasmtime::Val</code> equivalent but for the component model. Like with <code>Val</code> the actual value iteslf is \"tagged\" with the type information. The actual implementation of this is going to be much trickier than core wasm because <code>Val</code> only deals with primitives and a component model value can recursively contain other component model values. This will likely imply a significant overhead in terms of allocations, indirection, and management.</p>\n<p>I do not think that the <code>wasmtime::component::Val</code> type will implement any of <code>ComponentValue</code>, <code>Lift</code>, or <code>Lower</code>. Those are intended only for types where the type in the component model is statically known at compile-time.</p>\n<p>This work is also motivated by unlocking half of the fuzzing possiblities in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4307\">https://github.com/bytecodealliance/wasmtime/issues/4307</a></p>\n</blockquote>",
        "id": 290801062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658774358
    }
]