[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 298059648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662760784
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 298059649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662760784
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> from <code>abi-reg-constraints</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR updates the shared ABI code and backends to use register-operand constraints rather than explicit pinned-vreg moves for register arguments and return values.</p>\n<p>The s390x backend was not updated, because it has its own implementation of ABI code. Ideally we could converge back to the code shared by x64 and aarch64 (which didn't exist when s390x ported calls to ISLE, so the current situation is underestandable, to be clear!). I'll leave this for future work.</p>\n<p>This PR exposed several places where regalloc2 needed to be a bit more flexible with constraints; it requires regalloc2#74 to be merged and pulled in. Right now CI will fail because <code>Cargo.toml</code> points to a local checkout; I'll update this after<br>\nthe regalloc2 changes are in.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 298059650,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662760784
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 298059651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662760784
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1107726730\">PR review</a>.</p>",
        "id": 298801406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171766
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r970961589\">PR review comment</a>:</p>\n<blockquote>\n<ol>\n<li>Can we type def this small vec since it is used all over the place?</li>\n<li>This change is doubling the size of these small vecs since each element is two regs instead of one now, and I wonder if it makes sense to cut the inline capacity in half? Or at least remeasure a little to see where the sweet spot is now?</li>\n</ol>\n</blockquote>",
        "id": 298801407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r970966026\">PR review comment</a>:</p>\n<blockquote>\n<p>Let's debug assert that this isn't a call the probestack libcall here, since we rely on probestacks being inserted after regalloc and use that fact to justify avoiding listing their uses as an optimization. This way, if we ever start probestacking earlier, we will hit this assertion and be reminded to fix up that code.</p>\n</blockquote>",
        "id": 298801408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1107726730\">PR review</a>.</p>",
        "id": 298801409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r970979770\">PR review comment</a>:</p>\n<blockquote>\n<p>Why 4? Is that the max that this will ever use? If so, then it should probably be an <code>arrayvec</code> instead. If not, I think we can go larger since this is just a one-off vector in a stack frame, not something where we have to worry too much about the size of the smallvec because it is inside a bunch of heap allocated structs.</p>\n</blockquote>",
        "id": 298801410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r970968573\">PR review comment</a>:</p>\n<blockquote>\n<p>Should probably update the docs for this trait method. We shouldn't clobber caller-saved registers anymore right? Instead we should use the given temps if needed, correct?</p>\n</blockquote>",
        "id": 298801411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r971026303\">PR review comment</a>:</p>\n<blockquote>\n<p>nitpick: Line wrap is a bit funky here.</p>\n</blockquote>",
        "id": 298801413,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r971024859\">PR review comment</a>:</p>\n<blockquote>\n<p>We could allow taking the signatures out of the context temporarily, so that we could immutably borrow them while mutably borrowing the lowering context. This would avoid needing to pre-allocate temps up front.</p>\n</blockquote>",
        "id": 298801414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r970976715\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    &amp;ABIArgSlot::Reg { extension: ir::ArgumentExtension::None, ty, .. } =&gt; ty.is_ref() as _,\n                    &amp;ABIArgSlot::Reg { .. } =&gt; 1,\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 298801415,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r970974669\">PR review comment</a>:</p>\n<blockquote>\n<p>Could code golf this down a little bit, if you wanted:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>                    &amp;ABIArgSlot::Stack { extension: ir::ArgumentExtension::None, .. } =&gt; 0,\n                    &amp;ABIArgSlot::Stack { .. } =&gt; 1,\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 298801416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r971027667\">PR review comment</a>:</p>\n<blockquote>\n<p>Kinda strange to have two different kinds of comments here? Should <code>#</code> just be <code>;</code>?</p>\n</blockquote>",
        "id": 298801417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663171767
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 299861668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663715670
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 299863156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716739
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114579333\">PR review</a>.</p>",
        "id": 299863158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716743
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975892669\">PR review comment</a>:</p>\n<blockquote>\n<p><code>;</code> is actually not a comment in the generated assembly format, though -- the punctuation above breaks down as:</p>\n<ul>\n<li>initial column <code>;</code> is <code>filecheck</code>'s comment, and serves here to give the <code>precise-output</code> expected text</li>\n<li>the <code>;</code>s in line 45 separate additional instructions (<code>ldr</code>, then <code>b</code>, then a <code>data</code> pseudoinstruction)</li>\n<li>the <code>#</code> on line 46 introduces an actual comment that gives more info about the call</li>\n</ul>\n<p>so the <code>; ... # ...</code> is a comment-within-a-comment, if that makes sense...</p>\n</blockquote>",
        "id": 299863160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716743
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114579372\">PR review</a>.</p>",
        "id": 299863162,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716747
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975892697\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed, thanks!</p>\n</blockquote>",
        "id": 299863163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716747
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114579649\">PR review</a>.</p>",
        "id": 299863193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716779
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975892880\">PR review comment</a>:</p>\n<blockquote>\n<p>True, though imho that is probably best done as a follow-up refactor...</p>\n</blockquote>",
        "id": 299863194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716779
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114579802\">PR review</a>.</p>",
        "id": 299863219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716796
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975893017\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point, updated to 16; it's bounded only by the number of args so it could be larger.</p>\n</blockquote>",
        "id": 299863220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716796
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114580360\">PR review</a>.</p>",
        "id": 299863355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716862
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975893414\">PR review comment</a>:</p>\n<blockquote>\n<p>Took almost this, just a bit different -- I kept the <code>extension != None</code> as a guard-<code>if</code> on the match arm, as it reads more clearly to me that way, semantically (the case we want to handle is \"has extension\", not \"has no extension\", so the subpattern match doesn't work as well).</p>\n</blockquote>",
        "id": 299863356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716862
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114580464\">PR review</a>.</p>",
        "id": 299863373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716872
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975893479\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated!</p>\n</blockquote>",
        "id": 299863374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716872
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975893528\">PR review comment</a>:</p>\n<blockquote>\n<p>Added!</p>\n</blockquote>",
        "id": 299863378,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716878
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114580527\">PR review</a>.</p>",
        "id": 299863379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716878
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#pullrequestreview-1114581190\">PR review</a>.</p>",
        "id": 299863445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716952
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892#discussion_r975894088\">PR review comment</a>:</p>\n<blockquote>\n<p>Added typedefs! I kept the size at <code>8</code> as IMHO it's important to avoid heap allocs for most functions here, and when I've looked before, there are a good number with more than four args. Once we have a stats framework this would be a good thing to rexamine though, I agree.</p>\n</blockquote>",
        "id": 299863446,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663716952
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 299863776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663717196
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 299864215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663717482
    },
    {
        "content": "<p><strong>cfallin</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> as ready for review.</p>",
        "id": 299864490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663717754
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 299864516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663717782
    },
    {
        "content": "<p>cfallin has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 299866476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663719288
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a> from <code>abi-reg-constraints</code> to <code>main</code>.</p>",
        "id": 299867531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663720166
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 299868805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663721084
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4892\">PR #4892</a>.</p>",
        "id": 299871103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663723025
    }
]