[
    {
        "content": "<p><a href=\"https://github.com/Robbepop\">Robbepop</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">Issue #9690</a>.</p>",
        "id": 484911190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732797281
    },
    {
        "content": "<p>Robbepop opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks\">Wasmi's benchmark suite</a> I have the following Wasm test case:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (func $fib (param $N i64) (param $a i64) (param $b i64) (result i64)\n        (if (i64.eqz (local.get $N))\n            (then\n                (return (local.get $a))\n            )\n        )\n        (if (i64.eq (local.get $N) (i64.const 1))\n            (then\n                (return (local.get $b))\n            )\n        )\n        (return_call $fib\n            (i64.sub (local.get $N) (i64.const 1))\n            (local.get $b)\n            (i64.add (local.get $a) (local.get $b))\n        )\n    )\n\n    (func (export \"run\") (param $N i64) (result i64)\n        (return_call $fib (local.get $N) (i64.const 0) (i64.const 1))\n    )\n)\n</code></pre></div>\n<p>It is a simple fibonacci routines based on Wasm's <code>call_return</code> tail calls.</p>\n<p>When I ran those benchmarks on my Macbook M2 Pro I saw that Wasmi is roughly 8-12x slower than Wasmtime usually. However, for this particular test-case it is just ~4x slower than Wasmtime. Back then I found this suspicious which is why I didn't mention this in the <a href=\"https://wasmi-labs.github.io/blog/posts/wasmi-v0.32/\">article I wrote about Wasmi</a>.</p>\n<p>After having had a short discussion with @alexcrichton he told me to open an issue since this kind of performance gap is considered a bug for Wasmtime maintainers.</p>\n<p>Feel free to clone Wasmi benchmarks and test it out on your own hardware. Unfortunately I only have a Macbook M2 Pro and nothing else, so I cannot rerun those benchmarks on different hardware for this issue.</p>\n</blockquote>",
        "id": 484911194,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732797283
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks\">Wasmi's benchmark suite</a> I have the following Wasm test case:</p>\n<p>cc @alexcrichton </p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (func $fib (param $N i64) (param $a i64) (param $b i64) (result i64)\n        (if (i64.eqz (local.get $N))\n            (then\n                (return (local.get $a))\n            )\n        )\n        (if (i64.eq (local.get $N) (i64.const 1))\n            (then\n                (return (local.get $b))\n            )\n        )\n        (return_call $fib\n            (i64.sub (local.get $N) (i64.const 1))\n            (local.get $b)\n            (i64.add (local.get $a) (local.get $b))\n        )\n    )\n\n    (func (export \"run\") (param $N i64) (result i64)\n        (return_call $fib (local.get $N) (i64.const 0) (i64.const 1))\n    )\n)\n</code></pre></div>\n<p>It is a simple fibonacci routines based on Wasm's <code>call_return</code> tail calls.</p>\n<p>When I ran those benchmarks on my Macbook M2 Pro I saw that Wasmi is roughly 8-12x slower than Wasmtime usually. However, for this particular test-case it is just ~4x slower than Wasmtime. Back then I found this suspicious which is why I didn't mention this in the <a href=\"https://wasmi-labs.github.io/blog/posts/wasmi-v0.32/\">article I wrote about Wasmi</a>.</p>\n<p>After having had a short discussion with @alexcrichton he told me to open an issue since this kind of performance gap is considered a bug for Wasmtime maintainers.</p>\n<p>Feel free to clone Wasmi benchmarks and test it out on your own hardware. Unfortunately I only have a Macbook M2 Pro and nothing else, so I cannot rerun those benchmarks on different hardware for this issue.</p>\n</blockquote>",
        "id": 484911327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732797331
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks\">Wasmi's benchmark suite</a> I have the following Wasm test case:</p>\n<p>cc @alexcrichton </p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (func $fib (param $N i64) (param $a i64) (param $b i64) (result i64)\n        (if (i64.eqz (local.get $N))\n            (then\n                (return (local.get $a))\n            )\n        )\n        (if (i64.eq (local.get $N) (i64.const 1))\n            (then\n                (return (local.get $b))\n            )\n        )\n        (return_call $fib\n            (i64.sub (local.get $N) (i64.const 1))\n            (local.get $b)\n            (i64.add (local.get $a) (local.get $b))\n        )\n    )\n\n    (func (export \"run\") (param $N i64) (result i64)\n        (return_call $fib (local.get $N) (i64.const 0) (i64.const 1))\n    )\n)\n</code></pre></div>\n<p>It is a simple fibonacci routines based on Wasm's <code>call_return</code> tail calls.</p>\n<p>When I ran those benchmarks on my Macbook M2 Pro I saw that Wasmi is roughly 10-15x slower than Wasmtime usually. However, for this particular test-case it is just ~4x slower than Wasmtime. Back then I found this suspicious which is why I didn't mention this in the <a href=\"https://wasmi-labs.github.io/blog/posts/wasmi-v0.32/\">article I wrote about Wasmi</a>.</p>\n<p>After having had a short discussion with @alexcrichton he told me to open an issue since this kind of performance gap is considered a bug for Wasmtime maintainers.</p>\n<p>Feel free to clone Wasmi benchmarks and test it out on your own hardware. Unfortunately I only have a Macbook M2 Pro and nothing else, so I cannot rerun those benchmarks on different hardware for this issue.</p>\n</blockquote>",
        "id": 484911383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732797350
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks\">Wasmi's benchmark suite</a> I have the following Wasm test case:</p>\n<p>cc @alexcrichton </p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (func $fib (param $N i64) (param $a i64) (param $b i64) (result i64)\n        (if (i64.eqz (local.get $N))\n            (then\n                (return (local.get $a))\n            )\n        )\n        (if (i64.eq (local.get $N) (i64.const 1))\n            (then\n                (return (local.get $b))\n            )\n        )\n        (return_call $fib\n            (i64.sub (local.get $N) (i64.const 1))\n            (local.get $b)\n            (i64.add (local.get $a) (local.get $b))\n        )\n    )\n\n    (func (export \"run\") (param $N i64) (result i64)\n        (return_call $fib (local.get $N) (i64.const 0) (i64.const 1))\n    )\n)\n</code></pre></div>\n<p>It is a simple fibonacci routines based on Wasm's <code>call_return</code> tail calls.</p>\n<p>When I ran those benchmarks on my Macbook M2 Pro I saw that Wasmi is roughly 10-15x slower than Wasmtime on <code>aarch64</code> usually. However, for this particular test-case it is just ~4x slower than Wasmtime. Back then I found this suspicious which is why I didn't mention this in the <a href=\"https://wasmi-labs.github.io/blog/posts/wasmi-v0.32/\">article I wrote about Wasmi</a>.</p>\n<p>After having had a short discussion with @alexcrichton he told me to open an issue since this kind of performance gap is considered a bug for Wasmtime maintainers.</p>\n<p>Feel free to clone Wasmi benchmarks and test it out on your own hardware. Unfortunately I only have a Macbook M2 Pro and nothing else, so I cannot rerun those benchmarks on different hardware for this issue.</p>\n</blockquote>",
        "id": 484911494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732797372
    },
    {
        "content": "<p>Robbepop edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks\">Wasmi's benchmark suite</a> I have the following Wasm test case:</p>\n<p>cc @alexcrichton </p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (func $fib (param $N i64) (param $a i64) (param $b i64) (result i64)\n        (if (i64.eqz (local.get $N))\n            (then\n                (return (local.get $a))\n            )\n        )\n        (if (i64.eq (local.get $N) (i64.const 1))\n            (then\n                (return (local.get $b))\n            )\n        )\n        (return_call $fib\n            (i64.sub (local.get $N) (i64.const 1))\n            (local.get $b)\n            (i64.add (local.get $a) (local.get $b))\n        )\n    )\n\n    (func (export \"run\") (param $N i64) (result i64)\n        (return_call $fib (local.get $N) (i64.const 0) (i64.const 1))\n    )\n)\n</code></pre></div>\n<p>It is a simple fibonacci routines based on Wasm's <code>call_return</code> tail calls.</p>\n<p>When I ran those benchmarks on my Macbook M2 Pro I saw that Wasmi is roughly 10-15x slower than Wasmtime on <code>aarch64</code> usually. However, for this particular test-case it is just ~4x slower than Wasmtime. Back then I found this suspicious which is why I didn't mention this in the <a href=\"https://wasmi-labs.github.io/blog/posts/wasmi-v0.32/\">article I wrote about Wasmi</a>.</p>\n<p>After having had a short discussion with @alexcrichton he told me to open an issue since this kind of performance gap is considered a bug for Wasmtime maintainers.</p>\n<p>Feel free to clone Wasmi benchmarks and test it out on your own hardware. Unfortunately I only have a Macbook M2 Pro and nothing else, so I cannot rerun those benchmarks on different hardware for this issue.</p>\n<p>Benchmarks from my machine:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmi</span><span class=\"o\">-</span><span class=\"n\">old</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">22.361</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">22.367</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">22.381</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmi</span><span class=\"o\">-</span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">eager</span><span class=\"p\">.</span><span class=\"n\">checked</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">15.106</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.123</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.144</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmi</span><span class=\"o\">-</span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">lazy</span><span class=\"p\">.</span><span class=\"n\">checked</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">15.062</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.081</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.102</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">4.0465</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">4.0740</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">4.1016</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 484918962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1732799802
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>In <a href=\"https://github.com/wasmi-labs/wasmi-benchmarks\">Wasmi's benchmark suite</a> I have the following Wasm test case:</p>\n<p>cc @alexcrichton </p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n    (func $fib (param $N i64) (param $a i64) (param $b i64) (result i64)\n        (if (i64.eqz (local.get $N))\n            (then\n                (return (local.get $a))\n            )\n        )\n        (if (i64.eq (local.get $N) (i64.const 1))\n            (then\n                (return (local.get $b))\n            )\n        )\n        (return_call $fib\n            (i64.sub (local.get $N) (i64.const 1))\n            (local.get $b)\n            (i64.add (local.get $a) (local.get $b))\n        )\n    )\n\n    (func (export \"run\") (param $N i64) (result i64)\n        (return_call $fib (local.get $N) (i64.const 0) (i64.const 1))\n    )\n)\n</code></pre></div>\n<p>It is a simple fibonacci routines based on Wasm's <code>call_return</code> tail calls.</p>\n<p>When I ran those benchmarks on my Macbook M2 Pro I saw that Wasmi is roughly 10-15x slower than Wasmtime on <code>aarch64</code> usually. However, for this particular test-case it is just ~4x slower than Wasmtime. Back then I found this suspicious which is why I didn't mention this in the <a href=\"https://wasmi-labs.github.io/blog/posts/wasmi-v0.32/\">article I wrote about Wasmi</a>.</p>\n<p>After having had a short discussion with @alexcrichton he told me to open an issue since this kind of performance gap is considered a bug for Wasmtime maintainers.</p>\n<p>Feel free to clone Wasmi benchmarks and test it out on your own hardware. Unfortunately I only have a Macbook M2 Pro and nothing else, so I cannot rerun those benchmarks on different hardware for this issue.</p>\n<p>Benchmarks from my machine:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmi</span><span class=\"o\">-</span><span class=\"n\">old</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">22.361</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">22.367</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">22.381</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmi</span><span class=\"o\">-</span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">eager</span><span class=\"p\">.</span><span class=\"n\">checked</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">15.106</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.123</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.144</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmi</span><span class=\"o\">-</span><span class=\"n\">new</span><span class=\"p\">.</span><span class=\"n\">lazy</span><span class=\"p\">.</span><span class=\"n\">checked</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">15.062</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.081</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">15.102</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"n\">execute</span><span class=\"o\">/</span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">tailrec</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"mi\">1000000</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">4.0465</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">4.0740</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">4.1016</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 485729963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733184694
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690#issuecomment-2513238471\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9690\">issue #9690</a>:</p>\n<blockquote>\n<p>Inspecting the disassemblies nothing looks awry to me. The x64 and aarch64 outputs are basically 1:1 here. My guess is that the differences in timing are probably cpu-specific. I'm going to close this because I think it's as-expected from the Wasmtime side at least, but thanks for opening this as it's still good to investigate!</p>\n</blockquote>",
        "id": 485729965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733184695
    }
]