[
    {
        "content": "<p>Kroeg93 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445\">issue #3445</a>:</p>\n<blockquote>\n<p>Hi there,</p>\n<p>is there any possibility to run .cwasm files in a rust embedding?</p>\n<p>Currently i'm storing a .wat file within a buffer and use it as input for <code>Engine::precompile_module</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"./wasm/add.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">precompiled_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Afterwards the buffer is stored to a .cwasm file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">save_precompiled_file</span><span class=\"p\">(</span><span class=\"n\">buffer</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">precompiled_module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s\">\"add.cwasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">precompiled_module</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there any function to load the module from the .cwasm file? Or does this work differently?</p>\n<p>Thanks :-)<br>\n</p>\n</blockquote>",
        "id": 257187919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634038690
    },
    {
        "content": "<p>Kroeg93 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445\">issue #3445</a>:</p>\n<blockquote>\n<p>Hi there,</p>\n<p>is there any possibility to run .cwasm files in a rust embedding?</p>\n<p>Currently i'm storing a .wat file within a buffer and use it as input for <code>Engine::precompile_module</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"./wasm/add.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">precompiled_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Afterwards the buffer is stored to a .cwasm file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">save_precompiled_file</span><span class=\"p\">(</span><span class=\"n\">buffer</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">precompiled_module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s\">\"add.cwasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">precompiled_module</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there any function to load the module from the .cwasm file? Or does this work differently?</p>\n<p>Thanks :-)</p>\n<p>Maybe this helps but I think its wrong: </p>\n<p>I tried to create a new Module via Module::new </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">load_precompiled_file</span><span class=\"p\">(</span><span class=\"n\">engine</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Module</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">file</span><span class=\"p\">).</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"failed to read input file\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error while loading from precompiled file: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The Error i got from this is: </p>\n<p><code>input bytes aren't valid utf-8</code></p>\n</blockquote>",
        "id": 257188807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634039095
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445#issuecomment-940957220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445\">issue #3445</a>:</p>\n<blockquote>\n<p>I believe you can use <code>Module::deserialize</code> and <code>Module::deserialize_file</code>. The wasmtime cli uses the following logic to support both .wasm and .cwasm files: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/bcf3544924880edc085e74497b0d3932909a456e/src/commands/run.rs#L376-L398\">https://github.com/bytecodealliance/wasmtime/blob/bcf3544924880edc085e74497b0d3932909a456e/src/commands/run.rs#L376-L398</a></p>\n</blockquote>",
        "id": 257192259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634040948
    },
    {
        "content": "<p>Kroeg93 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445#issuecomment-941049060\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445\">issue #3445</a>:</p>\n<blockquote>\n<p>Thank you, this was the thing I was looking for</p>\n<p>Here is how I solved it: <br>\nCalling the function:</p>\n<p><code>let pc_module = load_precompiled_file(&amp;engine, Path::new(\"add.cwasm\")).unwrap();</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">load_precompiled_file</span><span class=\"p\">(</span><span class=\"n\">engine</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Module</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">deserialize_file</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 257208854,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634047755
    },
    {
        "content": "<p>Kroeg93 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3445\">issue #3445</a>:</p>\n<blockquote>\n<p>Hi there,</p>\n<p>is there any possibility to run .cwasm files in a rust embedding?</p>\n<p>Currently i'm storing a .wat file within a buffer and use it as input for <code>Engine::precompile_module</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"./wasm/add.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">precompiled_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">precompile_module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Afterwards the buffer is stored to a .cwasm file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">save_precompiled_file</span><span class=\"p\">(</span><span class=\"n\">buffer</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">precompiled_module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s\">\"add.cwasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">precompiled_module</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there any function to load the module from the .cwasm file? Or does this work differently?</p>\n<p>Thanks :-)</p>\n<p>Maybe this helps but I think its wrong: </p>\n<p>I tried to create a new Module via Module::new </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">load_precompiled_file</span><span class=\"p\">(</span><span class=\"n\">engine</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">file</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"n\">Path</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Module</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">file</span><span class=\"p\">).</span><span class=\"n\">with_context</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"s\">\"failed to read input file\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Error while loading from precompiled file: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The Error i got from this is: </p>\n<p><code>input bytes aren't valid utf-8</code></p>\n</blockquote>",
        "id": 257208939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1634047792
    }
]