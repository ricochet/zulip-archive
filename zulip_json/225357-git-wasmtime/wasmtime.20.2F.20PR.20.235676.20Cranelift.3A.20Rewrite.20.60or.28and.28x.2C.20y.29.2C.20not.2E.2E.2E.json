[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a> from <code>or-and-y-with-not-y</code> to <code>main</code>:</p>\n<blockquote>\n<p>Thanks again to Souper for pointing this one out! cc @regehr</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 325014536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675198788
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a>.</p>",
        "id": 325014538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675198789
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1278038738\">PR review</a>.</p>",
        "id": 325018144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200023
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a> from <code>or-and-y-with-not-y</code> to <code>main</code>.</p>",
        "id": 325019578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200518
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a>.</p>",
        "id": 325019681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200567
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1278045298\">PR review</a>.</p>",
        "id": 325019843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200612
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1278045298\">PR review</a>.</p>",
        "id": 325019847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200612
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1092500398\">PR review comment</a>:</p>\n<blockquote>\n<p>I think there's an equivalent version of this rule where the <code>bnot</code> is inside the <code>band</code>, and the operand to <code>bor</code> is the uninverted value.</p>\n</blockquote>",
        "id": 325019848,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200612
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1092498558\">PR review comment</a>:</p>\n<blockquote>\n<p>Could you duplicate the egraph filetests so there's a second version of each one with the operands to <code>bor</code> flipped? I suspect some of these will pass but maybe not all of them.</p>\n</blockquote>",
        "id": 325019849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200612
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1092497506\">PR review comment</a>:</p>\n<blockquote>\n<p>Do the <code>check</code> lines do anything in runtests?</p>\n</blockquote>",
        "id": 325019850,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675200612
    },
    {
        "content": "<p>fitzgen has disabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a>.</p>",
        "id": 325023371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675201852
    },
    {
        "content": "<p>fitzgen updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a> from <code>or-and-y-with-not-y</code> to <code>main</code>.</p>",
        "id": 325024667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675202314
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1278085468\">PR review</a>.</p>",
        "id": 325024709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675202332
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1092526319\">PR review comment</a>:</p>\n<blockquote>\n<p>We talked, decided this was one rabbit hole too deep.</p>\n</blockquote>",
        "id": 325024710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675202332
    },
    {
        "content": "<p>fitzgen has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a>.</p>",
        "id": 325024749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675202346
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676\">PR #5676</a>.</p>",
        "id": 325032589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675205087
    },
    {
        "content": "<p>avanhatt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1279573762\">PR review</a>.</p>",
        "id": 325224081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675272853
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093535023\">PR review comment</a>:</p>\n<blockquote>\n<p>Our verifier prototype finds the following counterexample for this rule (lightly edited for readability):</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">)</span>:\n#<span class=\"n\">x0000000000000000</span><span class=\"w\"></span>\n#<span class=\"n\">b0</span><span class=\"w\"></span>\n\n<span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">)</span>:\n#<span class=\"n\">x0000000000000001</span><span class=\"w\"></span>\n#<span class=\"n\">b1</span><span class=\"w\"></span>\n\n<span class=\"n\">x</span>:\n#<span class=\"n\">x0000000000000001</span><span class=\"w\"></span>\n#<span class=\"n\">b1</span><span class=\"w\"></span>\n\n<span class=\"n\">y</span>:\n#<span class=\"n\">x0000000000000002</span><span class=\"w\"></span>\n#<span class=\"n\">b10</span><span class=\"w\"></span>\n\n<span class=\"n\">z</span>:\n#<span class=\"n\">x0000000000000000</span><span class=\"w\"></span>\n#<span class=\"n\">b0</span><span class=\"w\"></span>\n\n<span class=\"n\">zk</span>:\n#<span class=\"n\">x0000000000000000</span><span class=\"w\"></span>\n#<span class=\"n\">b0</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 325224084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675272853
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1279603598\">PR review</a>.</p>",
        "id": 325228487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675274021
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093555479\">PR review comment</a>:</p>\n<blockquote>\n<p>I believe that this is because the <code>if</code> precondition is buggy. It is just checking whether the constructor succeeds or not, it is <em>not</em> checking if it returned <code>true</code>. Basically ignoring that predicate. (Funnily enough, because <code>u64_eq</code> is <code>pure</code>, the constructor will <em>always</em> succeed! This seems like something the ISLE compiler can check for and reject.) This is a pretty big foot gun with <code>if</code>, IMHO.</p>\n<p>Anyways, the predicate needs to be rewritten as <code>(if-let $true ...)</code>.</p>\n</blockquote>",
        "id": 325228488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675274022
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1279628377\">PR review</a>.</p>",
        "id": 325232664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275059
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093571829\">PR review comment</a>:</p>\n<blockquote>\n<p>That's so cool! I don't understand it but it's awesome. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<p>Here's what's confusing me: The rule should only fire if <code>zk</code> is equal to <code>!y</code>. But in this counterexample, <code>y</code> is 2, so <code>u64_not y</code> is <code>0xfffffffffffffffd</code>, but <code>zk</code> is 0. Is the verifier missing the <code>if</code> condition? Or is <code>u64_not</code> modeled incorrectly, maybe? (It's supposed to be bitwise-not, but this counterexample would make sense if that were modeled as boolean-not, turning non-zero values into 0.)</p>\n<p>Also, what type is this counterexample for? I'd be especially interested if you can find counterexamples for I64 specifically, because I think the rule as-written is wrong for any other width. That said, I'd expect other widths to just fail to match the rule most of the time, rather than ever rewriting incorrectly, so if you find a narrower counterexample it's probably a real issue.</p>\n</blockquote>",
        "id": 325232665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275059
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1279634008\">PR review</a>.</p>",
        "id": 325233642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275314
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093575694\">PR review comment</a>:</p>\n<blockquote>\n<p>Ohhh, Nick's got it right. Although it's because <code>u64_eq</code> is not <code>partial</code>, not because it's <code>pure</code>. (Those flags are independent now.)</p>\n<p>We also need to mask both constants down to the appropriate width if we want to make the rule fire on &lt;64-bit types.</p>\n</blockquote>",
        "id": 325233643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275315
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093577169\">PR review comment</a>:</p>\n<blockquote>\n<p>To restate what @fitzgen realized:</p>\n<p><code> (if (u64_eq zk (u64_not y)))</code> desugars to <code> (if-let _ (u64_eq zk (u64_not y)))</code>, which ISLE is perfectly happy to match on. That is, the semantics for <code>if</code> is whether some match is possible, _not_ whether the match is possible <em>and</em> its boolean value is truthy. The verifier matches these weird semantics, since it treats <code>if-let</code> statements as constraints setting the LHS and RHS of the statement to be equal---in this case, happily setting the wildcard to false and considering the rule to have matched. </p>\n<p>Right now, this counterexample is for BVs of width 64, and the verifier is complaining that the rule is infeasible (that is, doesn't match) for other widths (which, based on your comment, seems correct?). </p>\n</blockquote>",
        "id": 325234042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275417
    },
    {
        "content": "<p>avanhatt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#pullrequestreview-1279636292\">PR review</a>.</p>",
        "id": 325234043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275418
    },
    {
        "content": "<p>avanhatt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093577169\">PR review comment</a>.</p>",
        "id": 325234504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675275549
    }
]