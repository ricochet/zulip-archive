[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#issuecomment-651418461\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">Issue #1852</a>:</p>\n<blockquote>\n<blockquote>\n<p>This is wrong. <code>i128</code> is supposed to be stored as two <code>i64</code>, just like <code>i64</code> is supposed to be stored as two <code>i32</code> on 32bit systems. Storing it in a vector register makes it a lot harder to generate efficient math operations for <code>i128</code>.</p>\n</blockquote>\n<p>Fair enough, removed. It was used internally (produced by and matched by the ABI code) to communicate to <code>store_stack</code> / <code>load_stack</code> that a store/load needs to handle the whole 128-bit vector register, in the case that the regalloc cannot provide a vreg/type associated with a spill.  In other words this match arm would not have been triggered by an <code>I128</code> in the incoming CLIF. But the regalloc should not do this in practice (it only lacks a vreg for a spill/reload when it is a reference from a realreg being spilled to a stackmap slot), so we can just remove the match case. I would expect that when we implement true <code>I128</code> support, we would lower it to 64-bit ops, and the spill/reload code would not need to reason about <code>I128</code>s.</p>\n</blockquote>",
        "id": 202379310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593472841
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#issuecomment-653162173\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">Issue #1852</a>:</p>\n<blockquote>\n<p>Rebased to latest and updated to use support in <code>regalloc.rs</code> that was just merged. The PR to do a new release of regalloc is pending, so this depends on the bytecodealliance/regalloc.rs repo and git hash directly, to let CI work; will update this before a any merge.</p>\n<p>@julian-seward1, this should be ready for review now!</p>\n</blockquote>",
        "id": 202728248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593714971
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#issuecomment-653164635\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">Issue #1852</a>:</p>\n<blockquote>\n<p>(Actually, spoke too quickly re: regalloc -- we just released 0.0.27 so the dep in this PR can use that now.)</p>\n</blockquote>",
        "id": 202728884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593715312
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#issuecomment-657763098\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">Issue #1852</a>:</p>\n<blockquote>\n<p>Rebased again after changes to <code>x64</code> backend.</p>\n<p>@julian-seward1 or @bnjbvr, would you mind reviewing this soon before we land additional new-backend PRs, to reduce the rebase overhead somewhat? Thanks!</p>\n</blockquote>",
        "id": 203763862,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594670614
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852#issuecomment-658309857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1852\">Issue #1852</a>:</p>\n<blockquote>\n<p>Addressed, thanks!</p>\n</blockquote>",
        "id": 203862014,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594747622
    }
]