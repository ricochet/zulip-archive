[
    {
        "content": "<p><a href=\"https://github.com/matlo607\">matlo607</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9290\">Issue #9290</a>.</p>",
        "id": 471696212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726830229
    },
    {
        "content": "<p>matlo607 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9290\">issue #9290</a>:</p>\n<blockquote>\n<h2>Description</h2>\n<p><a href=\"https://github.com/ARM-software/abi-aa/blob/a82eef0433556b30539c0d4463768d9feb8cfd0b/aadwarf64/aadwarf64.rst#note-8\">DWARF for the Arm® 64-bit Architecture (AArch64)</a> specifies that the RA state should be set with <code>DW_CFA_AARCH64_negate_ra_state </code>.</p>\n<p>The same result can be obtained using <code>DW_CFA_val_expression</code>.</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// RA_SIGN_STATE corresponds to the DWARF register number 34.</span>\n<span class=\"n\">DW_CFA_val_expression</span><span class=\"w\"> </span><span class=\"mi\">34</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DW_OP_lit1</span>\n</code></pre></div>\n<p>This behavior was added to libgcc to support unwinding when the RA state is set with <code>DW_CFA_val_expression</code> (<a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104689\">Bug 104689</a>).</p>\n<p>Current implementation in Wasmtime:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/37ed724c9da2ee5a516923cf221ade19b78f63eb/cranelift/codegen/src/isa/unwind/systemv.rs#L115-L128\">https://github.com/bytecodealliance/wasmtime/blob/37ed724c9da2ee5a516923cf221ade19b78f63eb/cranelift/codegen/src/isa/unwind/systemv.rs#L115-L128</a></p>\n<h2>Issue</h2>\n<p>Armv9.5-A introduced a new extension to PAC for return address signing: <em>PAuth_LR</em>. It adds a new diversifier PC, aside to SP. The value of PC used by PAC2 algorithm corresponds to its value at the time of signing, i.e. the address of the <code>paci&lt;k&gt;sppc</code> instruction, or <code>paci&lt;k&gt;sp</code> if NOP-space instructions are used.</p>\n<p>A new DWARF directive <code>DW_CFA_AARCH64_negate_ra_state_with_pc</code> was introduced to record the position of signing and authentication, and to express that PACv2 algorithm was used (vs PACv1 relying on <code>DW_CFA_AARCH64_negate_ra_state</code>). During unwinding, this directive saves the PC diversifier into the frame state, to later use it to authenticate the return address.</p>\n<p>In my understanding, the approach based on <code>DW_CFA_val_expression</code> is not working anymore in this context, as the libgcc unwinder cannot know the difference between a <code>DW_CFA_val_expression</code> used for PAC, and another one used for something else, and so cannot save PC at the time of signing. </p>\n<ol>\n<li>Is it an issue for your use case ? Do you plan to add support for PAuth_LR ?</li>\n<li>Would it be possible to change the CFI directive to the recommended one ?</li>\n</ol>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://github.com/ARM-software/abi-aa/blob/a82eef0433556b30539c0d4463768d9feb8cfd0b/aadwarf64/aadwarf64.rst#id20\">DWARF for the Arm® 64-bit Architecture (AArch64) - DWARF register names, RA_SIGN_STATE</a>](<a href=\"https://github.com/ARM-software/abi-aa/blob/a82eef0433556b30539c0d4463768d9feb8cfd0b/aadwarf64/aadwarf64.rst#note-8\">https://github.com/ARM-software/abi-aa/blob/a82eef0433556b30539c0d4463768d9feb8cfd0b/aadwarf64/aadwarf64.rst#note-8</a>)</li>\n<li><a href=\"https://github.com/ARM-software/abi-aa/blob/a82eef0433556b30539c0d4463768d9feb8cfd0b/aadwarf64/aadwarf64.rst#id1\">DWARF for the Arm® 64-bit Architecture (AArch64) - 4.4   Call frame instructions</a></li>\n<li>Related discussion: #9264</li>\n</ul>\n</blockquote>",
        "id": 471696217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726830230
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9290#issuecomment-2363979857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9290\">issue #9290</a>:</p>\n<blockquote>\n<p>Thanks for the report! AFAIK we don't have strict needs around this related to Wasmtime or Cranelift per se, and so long as things work and pass tests changing should be fine. I believe we unfortunately don't have automated testing for this in that our QEMU emulation in CI I don't think has this enabled, but it might not be too too hard to set up.</p>\n</blockquote>",
        "id": 471760694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1726845717
    }
]