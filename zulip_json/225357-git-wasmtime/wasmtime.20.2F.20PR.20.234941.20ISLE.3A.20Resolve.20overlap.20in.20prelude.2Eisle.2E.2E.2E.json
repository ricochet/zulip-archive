[
    {
        "content": "<p>elliottt opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>:</p>\n<blockquote>\n<p>Resolve overlap in the ISLE prelude and the x64 inst module by introducing new types that allow better sharing of extractor resuls, or falling back on priorities.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 300057847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805276
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>:</p>\n<blockquote>\n<p>Resolve overlap in the ISLE prelude and the x64 inst module by introducing new types that allow better sharing of extractor resuls, or falling back on priorities.</p>\n<p>This PR makes the following changes in overlap counts for the different backends:</p>\n<table>\n<thead>\n<tr>\n<th>branch</th>\n<th>x64</th>\n<th>aarch64</th>\n<th>s390x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>main</td>\n<td>168</td>\n<td>214</td>\n<td>446</td>\n</tr>\n<tr>\n<td>this</td>\n<td>138</td>\n<td>212</td>\n<td>440</td>\n</tr>\n<tr>\n<td>&lt;!--</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 300058155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805519
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300058260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805588
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116212849\">PR review</a>.</p>",
        "id": 300058638,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116212849\">PR review</a>.</p>",
        "id": 300058640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977076390\">PR review comment</a>:</p>\n<blockquote>\n<p>re-indenting here is fine but could you (i) align the comment above (line 180) with new indent, and (ii) fix the alignment of the comment below (line 185)?</p>\n</blockquote>",
        "id": 300058641,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977076724\">PR review comment</a>:</p>\n<blockquote>\n<p>Incomplete comment?</p>\n</blockquote>",
        "id": 300058642,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977077886\">PR review comment</a>:</p>\n<blockquote>\n<p>Rather than the <code>(and subpat var)</code> idiom here, could we write either <code>(and var subpat)</code>, or preferably <code>var @ subpat</code>? It's a little hard for me to visually parse what's happening here otherwise. (Likewise for the three cases below.)</p>\n</blockquote>",
        "id": 300058643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977078257\">PR review comment</a>:</p>\n<blockquote>\n<p><code>i128</code>s, actually! (This may be an outdated comment from somewhere else?)</p>\n</blockquote>",
        "id": 300058644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977077170\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we have SingleGpr and MultiGpr here instead?</p>\n</blockquote>",
        "id": 300058645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805890
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300058719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663805966
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116218560\">PR review</a>.</p>",
        "id": 300059086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806276
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977080777\">PR review comment</a>:</p>\n<blockquote>\n<p>Without or patterns, that makes the existing behavior of <code>is_gpr_type</code> impossible to capture. Is it the case that everywhere it's used now it implies the single register case?</p>\n</blockquote>",
        "id": 300059087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806276
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116218878\">PR review</a>.</p>",
        "id": 300059126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806319
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977081020\">PR review comment</a>:</p>\n<blockquote>\n<p>This was the fault of an overzealous lisp mode in neovim. I reverted the changes it made and disabled it :)</p>\n</blockquote>",
        "id": 300059127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806319
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977081101\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks, fixed!</p>\n</blockquote>",
        "id": 300059139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806335
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116218993\">PR review</a>.</p>",
        "id": 300059140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806335
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116219636\">PR review</a>.</p>",
        "id": 300059269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806434
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977081602\">PR review comment</a>:</p>\n<blockquote>\n<p>We can't write <code>var @ subpat</code> because ISLE doesn't currently support that for the RHS of an extractor definition. I standardized on the <code>(and pat var)</code> form to ensure that these newly introduced <code>and</code> patterns wouldn't run afoul of the <code>and</code> order bug that we discussed in the meeting today. Happy to reorder them once we fix that bug, as I like the <code>(and var pat)</code> form more as well.</p>\n</blockquote>",
        "id": 300059270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806434
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977081934\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, it used to be in the middle of the <code>imm</code> rules, so I moved it above. I'll fix the comment <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 300059355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806491
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116219981\">PR review</a>.</p>",
        "id": 300059356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806491
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300059393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806538
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300059561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806698
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977083197\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we use two rules then?</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">RegisterClass.SingleGpr</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">$true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">RegisterClass.MultiGpr</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">$true</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">is_gpr_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">RegisterClass.Xmm</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"nv\">$false</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In general I'm not a huge fan of isolated bool flags in data structures as the meaning isn't carried with them (one has to look back to the type definition) but if it isn't possible to do here for some reason I'm fine with the original too.</p>\n</blockquote>",
        "id": 300059617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806734
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116221483\">PR review</a>.</p>",
        "id": 300059618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806734
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977083197\">PR review comment</a>.</p>",
        "id": 300059633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806749
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977084190\">PR review comment</a>:</p>\n<blockquote>\n<p>Urgh, sorry, just realized (with your pointing out) that this is an extractor definition; in that case the original is fine!</p>\n</blockquote>",
        "id": 300059828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806927
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116222687\">PR review</a>.</p>",
        "id": 300059829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806927
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r977084286\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yeah, we should fix that but for now this is fine then.</p>\n</blockquote>",
        "id": 300059846,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806950
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1116222837\">PR review</a>.</p>",
        "id": 300059847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663806950
    },
    {
        "content": "<p><strong>elliottt</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> as ready for review.</p>",
        "id": 300075093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663820789
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978187393\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, I'm glad to see this! I remember we both had to think hard about what order these rules would match in, and it's nice that the overlap checker agrees that this is confusing.</p>\n</blockquote>",
        "id": 300287752,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978212370\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not super fond of this <code>intcc_is_ordered</code> extractor. Is there a reason not to put the unordered cases at priority 3, matching <code>Equal</code> and <code>NotEqual</code> directly, and let the ordered case be a wildcard fallback at priority 2?</p>\n</blockquote>",
        "id": 300287753,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1117809844\">PR review</a>.</p>",
        "id": 300287754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978193520\">PR review comment</a>:</p>\n<blockquote>\n<p>Do values of B128 type fit in a single general-purpose register?</p>\n</blockquote>",
        "id": 300287755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978185726\">PR review comment</a>:</p>\n<blockquote>\n<p>I got very confused trying to see why <code>(range_nonempty)</code> is necessary. But you're adding it here because otherwise <code>range_singleton</code> overlaps with <code>range_unwrap</code>, right?</p>\n</blockquote>",
        "id": 300287756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1117809844\">PR review</a>.</p>",
        "id": 300287757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978210039\">PR review comment</a>:</p>\n<blockquote>\n<p>I really like this RangeView approach!</p>\n</blockquote>",
        "id": 300287758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908315
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978244786\">PR review comment</a>:</p>\n<blockquote>\n<p>Why does this exclude sign-extended loads of vector types? The overlap checker can't tell that <code>multi_lane</code> and <code>fits_in_32</code> don't overlap, so I understand needing to do something, but I'd think those two rules just need different priorities. Since they actually don't overlap, it shouldn't matter which way around you assign the priorities, right?</p>\n</blockquote>",
        "id": 300287759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908316
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r978260584\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmmm, is it better to duplicate the rule like this, or to put the single-gpr case at a higher priority?</p>\n</blockquote>",
        "id": 300287760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663908316
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r979572098\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, exactly. Originally I had a third constructor in <code>RangeView</code>, <code>Singleton</code>, that identified the case where there was a single element in the list. The problem was that using the one function in the implementation of <code>range_singleton</code> and <code>range_unwrap</code> now meant that there was an unhandled case here. I fell back on implementing <code>range_singleton</code> in terms of <code>range_unwrap</code> and an explicit assertion about the tail, but maybe removing <code>range_singleton</code> entirely would make this more clear?</p>\n</blockquote>",
        "id": 300719980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170081
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1119598108\">PR review</a>.</p>",
        "id": 300719981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170081
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1119598538\">PR review</a>.</p>",
        "id": 300720064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170124
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r979572352\">PR review comment</a>:</p>\n<blockquote>\n<p>No. As currently implemented, they would be either 128 <code>0</code>s, or 128 <code>1</code>s.</p>\n</blockquote>",
        "id": 300720065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170124
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r979573008\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that would be fine, however the rule that I've been trying to follow is to use priorities as a fall back for when there's not a clear way to split the rules by a concrete pattern. Maybe there's a different name we could use here that would make it seem less objectionable?</p>\n</blockquote>",
        "id": 300720213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170214
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1119599483\">PR review</a>.</p>",
        "id": 300720214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170214
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1119600760\">PR review</a>.</p>",
        "id": 300720347,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170348
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r979573937\">PR review comment</a>:</p>\n<blockquote>\n<p>The original implementation used named the <code>ExtKind</code> value as it was handling these two cases. As we don't have or-patterns, and we're trying to handle the remaining cases that differ from <code>ExtKind.SignExtend</code> on line 1615 above, duplicating the rule was the easiest path forward.</p>\n</blockquote>",
        "id": 300720348,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170348
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r979575758\">PR review comment</a>:</p>\n<blockquote>\n<p>In the future, I'd love to use an or-pattern here. Given the current compilation for rules at different priorities, I'm tempted to say that duplication for rules with a small RHS is preferable. I have an idea that I'd like to try out for using the overlap information to allow earlier match reuse in the trie, and in that case using different priorities wouldn't be nearly as costly.</p>\n</blockquote>",
        "id": 300720665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170630
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1119603549\">PR review</a>.</p>",
        "id": 300720666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664170630
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120416186\">PR review</a>.</p>",
        "id": 300835532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664205005
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980161541\">PR review comment</a>:</p>\n<blockquote>\n<p>Then the expression for <code>single_register</code> should be <code>ty != I128 &amp;&amp; ty != B128</code>, right?</p>\n</blockquote>",
        "id": 300835534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664205005
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120437400\">PR review</a>.</p>",
        "id": 300837297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664205548
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980182847\">PR review comment</a>:</p>\n<blockquote>\n<p>Is it possible to have a right-hand side that emits nothing? If so, I think the best way to write <code>copy_to_regs_range</code> would be a <code>(range_empty)</code> case that's a no-op, and a <code>(range_unwrap head tail)</code> case that emits one move before recursing on <code>tail</code>. Essentially, a normal <code>fold</code>-based implementation of <code>map</code>. That should generate less code as well as being clearly non-overlapping.</p>\n</blockquote>",
        "id": 300837298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664205548
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120447430\">PR review</a>.</p>",
        "id": 300838323,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664205810
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980189481\">PR review comment</a>:</p>\n<blockquote>\n<p>The previous implementation of <code>is_single_register_type</code> only checked that the type wasn't equal to <code>I128</code>, so I opted to preserve the existing behavior.<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/3a2b32bf4df83ab3d624f8c187116d02adb2c69c/cranelift/codegen/src/isa/x64/lower/isle.rs#L567-L573\">https://github.com/bytecodealliance/wasmtime/blob/3a2b32bf4df83ab3d624f8c187116d02adb2c69c/cranelift/codegen/src/isa/x64/lower/isle.rs#L567-L573</a></p>\n</blockquote>",
        "id": 300838325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664205811
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980202583\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the name <code>intcc_is_ordered</code> is a fine description of what the extractor does. I just don't like the contortions you had to go through to convince the overlap checker that the <code>Equal</code> and <code>NotEqual</code> cases don't overlap with the <code>(intcc_is_ordered $true)</code> case. If we had or-patterns this would be <code>(and (or (IntCC.Equal) (IntCC.NotEqual)) (IntCC.NotEqual))</code>, which is a confusing way to say <code>(IntCC.NotEqual)</code>. This is trying to express a priority relationship without using priorities, and I'd rather just use priorities.</p>\n</blockquote>",
        "id": 300840919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206435
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120471842\">PR review</a>.</p>",
        "id": 300840921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206435
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300841764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206672
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980209123\">PR review comment</a>:</p>\n<blockquote>\n<p>The thing that stopped me from doing this before was that I didn't have a way to make a <code>Unit</code> value. I'll add <code>unit</code> to the prelude, because I like this approach more than the current singleton checking one.</p>\n<p>One nice feature of the current implementation is that it will fail to match any rules if <code>copy_regs_to_range</code> is given an empty range, but I'm not sure that's worth keeping the current confusing implementation over.</p>\n</blockquote>",
        "id": 300841833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206687
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120479066\">PR review</a>.</p>",
        "id": 300841834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206687
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120484353\">PR review</a>.</p>",
        "id": 300842477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206896
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980214722\">PR review comment</a>:</p>\n<blockquote>\n<p>That's not what I was suggesting for the use of or-patterns: I think we would not have the <code>and</code> anymore for the <code>Equal</code> and NotEqual<code> cases, and instead would list the remaining cases where we have </code>(intcc_is_ordered $true)` now. That feels pretty natural to me, and is likely how you'd write it in rust if you wanted to enumerate all the cases, right?</p>\n</blockquote>",
        "id": 300842478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206896
    },
    {
        "content": "<p>elliottt edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980214722\">PR review comment</a>.</p>",
        "id": 300842528,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206913
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120485109\">PR review</a>.</p>",
        "id": 300842599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206925
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980215485\">PR review comment</a>:</p>\n<blockquote>\n<p>Okay, to check: the <code>multi_lane</code> and <code>fits_in_32</code> extractors never match the same types, right? My understanding was that <code>multi_lane</code> only matches vector types, and that <code>fits_in_32</code> only matches types that are at most 32 bits wide, and that the narrowest vector types we have are 64 bits wide.</p>\n<p>If that's the case, then I think this change is incorrect: previously, this rule would fire for vector loads regardless of the sign extension mode, but this version of the rule only fires for the <code>None</code> and <code>ZeroExtend</code> modes.</p>\n<p>Now maybe that's okay, if for instance vector loads always use mode <code>None</code>, or something along those lines. But if so, that needs at least a comment or something.</p>\n</blockquote>",
        "id": 300842600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664206925
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300843079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207054
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120489643\">PR review</a>.</p>",
        "id": 300843214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207102
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980220079\">PR review comment</a>:</p>\n<blockquote>\n<p>At any rate, I've removed <code>intcc_is_ordered</code>, and put explicit priorities in place instead. We can revisit this if we decide to implement or-patterns in the future.</p>\n</blockquote>",
        "id": 300843215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207102
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120495061\">PR review</a>.</p>",
        "id": 300844081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207317
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980224688\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess I don't feel strongly about duplication for rules with a small RHS. I'm just more concerned about maintainability of the ISLE source than I am about the performance of the ISLE-generated code right now. We know we'll fix the latter by improving the ISLE compiler, but the former is harder to recover.</p>\n</blockquote>",
        "id": 300844083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207317
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120505371\">PR review</a>.</p>",
        "id": 300845588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207720
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980231920\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, sorry, I wasn't clear: I know you weren't suggesting expanding <code>intcc_is_ordered</code> to an or-pattern. I just meant that's how I had to reason about what the and-patterns were doing, and it was a confusing thing to reason about.</p>\n<p>I agree, listing the remaining cases with an or-pattern instead of priorities feels pretty natural to me, too. Only it's a bit of a shame that we can't check for match completeness, in case somebody accidentally misses a condition code.</p>\n</blockquote>",
        "id": 300845589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207720
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980235158\">PR review comment</a>:</p>\n<blockquote>\n<p>So apparently <code>i8x4</code> is a type we support. I've removed the duplication here, and resolved this overlap with priorities instead.</p>\n</blockquote>",
        "id": 300846333,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207914
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120510101\">PR review</a>.</p>",
        "id": 300846334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207914
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120510676\">PR review</a>.</p>",
        "id": 300846408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207937
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980235536\">PR review comment</a>:</p>\n<blockquote>\n<p>I have concerns about the previous implementation then. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I'm guessing this means we've never handed a B128 to the x64 lowering rules that used this check. And that seems... not unlikely, I suppose?</p>\n</blockquote>",
        "id": 300846409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664207937
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120513626\">PR review</a>.</p>",
        "id": 300846809,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208016
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980236889\">PR review comment</a>:</p>\n<blockquote>\n<p>OK, I've switched to resolving this with priorities.</p>\n</blockquote>",
        "id": 300846810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208016
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120520155\">PR review</a>.</p>",
        "id": 300847437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208176
    },
    {
        "content": "<p>elliottt created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980239429\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, but let's keep two things in mind while reviewing this PR: 1) we're not trying to fix existing bugs, only resolve overlaps, 2) we're talking about removing all the boolean types in the short-term.</p>\n</blockquote>",
        "id": 300847438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208176
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300847604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208218
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120523486\">PR review</a>.</p>",
        "id": 300847756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208256
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980240709\">PR review comment</a>:</p>\n<blockquote>\n<p>Ooh, I really like how this worked out once you added <code>(unit)</code>. That strikes me as a great general-purpose thing for the prelude anyway.</p>\n<p>If we want to keep the \"fails on empty range\" behavior, we could split the term: an outer <code>copy_to_regs_range</code> that just checks for a non-empty range before delegating to this recursive term that generates the actual copies. That would make the intent explicit, too.</p>\n</blockquote>",
        "id": 300847757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208256
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980247879\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, I agree with both of your points. I think it's still worth noting existing bugs during any review, and in general opening issues to track them if we decide not to fix them immediately. But in this specific case, you're right, it doesn't matter since we're going to remove the boolean types.</p>\n</blockquote>",
        "id": 300849254,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208618
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120534859\">PR review</a>.</p>",
        "id": 300849255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664208618
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120679314\">PR review</a>.</p>",
        "id": 300871043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664215271
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#pullrequestreview-1120679314\">PR review</a>.</p>",
        "id": 300871044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664215271
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941#discussion_r980344995\">PR review comment</a>:</p>\n<blockquote>\n<p><code>range_nonempty</code> isn't needed now so you could delete it.</p>\n</blockquote>",
        "id": 300871045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664215271
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 300881298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664218836
    },
    {
        "content": "<p>elliottt updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a> from <code>trevor/resolve-x64-inst-prelude-overlaps</code> to <code>main</code>.</p>",
        "id": 301277386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664382942
    },
    {
        "content": "<p>elliottt merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4941\">PR #4941</a>.</p>",
        "id": 301293379,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664387681
    }
]