[
    {
        "content": "<p><a href=\"https://github.com/BERADQ\">BERADQ</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615\">Issue #9615</a>.</p>",
        "id": 482781704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731773039
    },
    {
        "content": "<p>BERADQ opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615\">issue #9615</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// omit ...</span>\n<span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_a</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_a</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ins_a</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store_a</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_b</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ins_b</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store_b</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Call the define_unknown_imports_as_traps method multiple times in the same linker.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The method should handle multiple calls without causing duplicate definitions for any module.</p>\n<h3>Actual Results</h3>\n<p>The method results in a duplicate definition error for the wasi module.</p>\n<p><code>map entry `wasi:cli/environment@0.2.0` defined twice</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 26.0.1</p>\n<p>Operating system: Windows11 22631.4391</p>\n<p>Architecture: rustc 1.84.0-nightly (a93c1718c 2024-10-24)</p>\n<h3>Extra Info</h3>\n<p>Possible Solutions:</p>\n<p>Exclude Specific Entries: Modify the method to exclude specific entries like <code>wasi</code> from being redefined.</p>\n<p>I think it's not a bug at all, but I can't handle it by myself.</p>\n</blockquote>",
        "id": 482781706,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731773040
    },
    {
        "content": "<p>BERADQ <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615#issuecomment-2480634522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615\">issue #9615</a>:</p>\n<blockquote>\n<p><code>allowing_shadowing</code> makes all shadowing legal, which is not very good.</p>\n</blockquote>",
        "id": 482782265,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731773484
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615#issuecomment-2483591548\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615\">issue #9615</a>:</p>\n<blockquote>\n<p>Would it be possible to use two linkers here perhaps? We'd ideally prefer to avoid hardcoding WASI-specific names into the linker.</p>\n</blockquote>",
        "id": 483073244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731948851
    },
    {
        "content": "<p>BERADQ <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615#issuecomment-2483620331\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615\">issue #9615</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would it be possible to use two linkers here perhaps? We'd ideally prefer to avoid hardcoding WASI-specific names into the linker.</p>\n</blockquote>\n<p>This approach is somewhat troublesome, but it can completely solve the problem.</p>\n</blockquote>",
        "id": 483076044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731949572
    },
    {
        "content": "<p>BERADQ closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9615\">issue #9615</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// omit ...</span>\n<span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_a</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_a</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ins_a</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store_a</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">define_unknown_imports_as_traps</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_b</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_b</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ins_b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ins_b</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store_b</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Call the define_unknown_imports_as_traps method multiple times in the same linker.</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The method should handle multiple calls without causing duplicate definitions for any module.</p>\n<h3>Actual Results</h3>\n<p>The method results in a duplicate definition error for the wasi module.</p>\n<p><code>map entry `wasi:cli/environment@0.2.0` defined twice</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 26.0.1</p>\n<p>Operating system: Windows11 22631.4391</p>\n<p>Architecture: rustc 1.84.0-nightly (a93c1718c 2024-10-24)</p>\n<h3>Extra Info</h3>\n<p>Possible Solutions:</p>\n<p>Exclude Specific Entries: Modify the method to exclude specific entries like <code>wasi</code> from being redefined.</p>\n<p>I think it's not a bug at all, but I can't handle it by myself.</p>\n</blockquote>",
        "id": 483076076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731949582
    }
]