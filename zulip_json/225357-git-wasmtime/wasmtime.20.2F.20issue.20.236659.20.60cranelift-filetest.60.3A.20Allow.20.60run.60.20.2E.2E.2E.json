[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>And allow passing in arbitrary values as <code>vmctx</code> as well, basically treating it like any other argument.</p>\n<p>While this wouldn't allow complex global values based on the <code>vmctx</code>, it would allow simple ones like <code>gv0 = vmctx</code>.</p>\n<p>We would also want the CLIF interpreter to support this as well, since basically all of our runtests are also interpreter tests.</p>\n</blockquote>",
        "id": 370486485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687967993
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>And allow passing in arbitrary values as <code>vmctx</code> as well, basically treating it like any other argument.</p>\n<p>While this wouldn't allow complex global values based on the <code>vmctx</code>, it would allow simple ones like <code>gv0 = vmctx</code>.</p>\n<p>We would also want the CLIF interpreter to support this as well, since basically all of our runtests are also interpreter tests.</p>\n</blockquote>",
        "id": 370486486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687967993
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659#issuecomment-1611742793\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>We used to have some limited support for <code>vmctx</code> and global values in the interpreter (#4396). But that was essentially just used to support custom heaps, and was removed in (#5386).</p>\n<p>We can still resolve <code>global_value</code>'s in the interpreter, so we should still be able to use it, but we might have to manually call the function and pass the address to a stack slot or something along those lines.</p>\n<p>Is that what you were looking to do?</p>\n<p>We don't support something like <code>; run: %test(vmctx, 1, 2, 3) == 10</code>, but I'm not sure what we would pass in instead of <code>vmctx</code> in the runtests.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Here's an example testcase using <code>vmctx</code> that works today&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">vm_state</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">load_at_0_and_add</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span>\n\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">our</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"> </span><span class=\"k\">struct</span>\n    <span class=\"nc\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"w\"> </span><span class=\"k\">struct</span>\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss1</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">load_at_0_and_add</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss1</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">vm_state</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">load_at_0_and_add</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">gv1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">gv0</span><span class=\"o\">+</span><span class=\"mi\">0</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_value</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">gv1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 370497432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687969846
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659#issuecomment-1611747001\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>I was essentially trying to do something like this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">stack_limit</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">gv0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>\n<span class=\"w\">    </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">gv0</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">42</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 370498523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687970042
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659#issuecomment-1611748442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>I guess I could have got that working with another trampoline function to init the vmctx, that's a good trick. Still a bit of a workaround though compared to just passing in a value.</p>\n</blockquote>",
        "id": 370498950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687970113
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659#issuecomment-1611750288\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>Oh, weird that it doesn't work when we call the vmctx function directly. That should be a somewhat easy fix, I don't mind working on it.</p>\n<p>I think we don't support stack_limit in the interpreter yet though.</p>\n</blockquote>",
        "id": 370499360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687970184
    },
    {
        "content": "<p>afonso360 assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a> to afonso360.</p>",
        "id": 370499431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687970196
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6659\">issue #6659</a>:</p>\n<blockquote>\n<p>And allow passing in arbitrary values as <code>vmctx</code> as well, basically treating it like any other argument.</p>\n<p>While this wouldn't allow complex global values based on the <code>vmctx</code>, it would allow simple ones like <code>gv0 = vmctx</code>.</p>\n<p>We would also want the CLIF interpreter to support this as well, since basically all of our runtests are also interpreter tests.</p>\n</blockquote>",
        "id": 370530393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1687976116
    }
]