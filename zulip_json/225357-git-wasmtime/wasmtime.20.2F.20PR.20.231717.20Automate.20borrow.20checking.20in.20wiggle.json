[
    {
        "content": "<p>pchickey opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 197752361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589576831
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 197752420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589576870
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 197979227,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589827544
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198015944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589854016
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198016015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589854120
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198016167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589854407
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198143507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589934933
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198145289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589937231
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198225288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1589993043
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198245970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590002963
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>WIP</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198249026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590004552
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR re-designs the Wiggle library to automate borrow-checking of slices and strs that reside in WebAssembly memory. This reduces the burden of writing <code>unsafe</code> on Wiggle users, and places all <code>unsafe</code> at the boundary between the Wasm runtime and Wiggle, rather than requiring it inside the implementation of the Wiggle traits.</p>\n<p>In short, the <code>GuestPtr::as_raw</code> methods have been replaced with runtime borrow-checked smart pointers. <code>GuestPtr::as_raw</code> gave raw pointers into guest memory and require the user to manually thread around a <code>GuestBorrows</code> instance and use <code>unsafe</code> to turn those raw pointers into references.</p>\n<p>This PR deletes the <code>GuestBorrows</code> type and instead defines a <code>BorrowChecker</code> type that understands both borrows and drops (unborrows). Instead of having the user pass the BorrowChecker to all of the sites where it is needed, it gets passed to the Wiggle ABI-level function once (this, along with construction, is taken care of by <code>wig</code>) and each <code>GuestPtr</code> has an internal shared ref to it. The user doesn't ever handle borrowing or unborrowing directly - those methods are private to the crate and are taken care of by <code>GuestPtr</code>, plus the <code>GuestSlice</code> and <code>GuestStr</code> drop impls. Each pointer makes the borrow checker accessible via <code>GuestPtr::borrow_checker(&amp;self) -&gt; &amp;BorrowChecker</code>, which is useful for inspecting <code>BorrowChecker::has_outstanding_borrows(&amp;self) -&gt; bool</code>.</p>\n<p>The <code>GuestPtr::as_raw</code> methods are replaced by <code>GuestPtr::as_slice</code> on <code>GuestPtr&lt;[T]&gt;</code> and <code>GuestPtr::as_str</code> on <code>GuestPtr&lt;str&gt;</code>. These new methods return a <code>GuestSlice&lt;T&gt;</code> and <code>GuestStr</code>, respectively. These are just basic \"smart pointers\" in that they contain a <code>&amp;mut</code> ref to the memory that is borrowed, impl <code>Deref</code> and <code>DerefMut</code>, and have a <code>Drop</code> impl which tells the <code>BorrowChecker</code> that the memory is no longer borrowed.</p>\n<p>Additionally, each <code>GuestPtr::read</code> and <code>write</code> verifies that the target of that read or write is not borrowed, which is safer than Wiggle was before, where the user had to manually borrow any GuestPtr (with no way to unborrow it afterwards!) before reading or writing it while another borrow was outstanding.</p>\n<p>In addition to the changes in <code>wiggle</code>, this PR updates <code>wig</code> and <code>wasi-common</code> for the new interfaces.</p>\n<p>Many thanks to @alexcrichton who helped me with the design and implementation of this PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198273473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590020307
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a>.</p>",
        "id": 198273487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590020321
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/kubkon\">kubkon</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a>.</p>",
        "id": 198273492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590020328
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416283019\">PR Review</a>.</p>",
        "id": 198342566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078404
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428753155\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is that necessary? Could we scope it instead to do auto-dropping?</p>\n</blockquote>",
        "id": 198342569,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078404
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428758101\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I know it's not saving us much, but just FWIW, I think this one-liner should also work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">trace</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;     | old_path=&#39;{}&#39;&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">old_path</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198342570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428759269\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is <code>BorrowCheckerOOM</code> meant to signify an out-of-memory error? If that's the case, I'd suggest we be more verbose and spell the full thing out here: <code>BorrowCheckerOutOfMemory</code>. It hopefully will be less confusing for the newcomers.</p>\n</blockquote>",
        "id": 198342571,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416283019\">PR Review</a>.</p>",
        "id": 198342572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428756947\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So the cool thing about the previous approach was that we didn't have to do iterate twice over the same array, which we unfortunately do now. I haven't look in-depth into <code>GuestSlice</code>, so I'm not sure how to go about managing lifetimes here yet, but would it be possible to store <code>io::IoSliceMut</code> in the first pass rather than do the conversion from <code>GuestSlice</code> to <code>&amp;mut [u8]</code> here?</p>\n</blockquote>",
        "id": 198342573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428761313\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Given that the invariant is we have only one instance of <code>BorrowChecker</code> per Wasm memory, would it make sense to somehow orchestrate the use of <code>Once</code> here to enforce that? Or would that be an overkill?</p>\n</blockquote>",
        "id": 198342574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428764647\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I might have missed it, but do we actually handle the case here where, if we handed out all available handles, but then the user unborrows some region, we actually still trip with <code>BorrowCheckerOOM</code> on the next call to <code>self.new_handle()</code> since the unborrowed handle is never returned back to the pool? Or do we actually take care of it and I just missed it?</p>\n</blockquote>",
        "id": 198342575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428764960\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh and btw, it might also be good to add this scenario as a test case.</p>\n</blockquote>",
        "id": 198342577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078405
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416283019\">PR Review</a>.</p>",
        "id": 198342619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590078423
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416391950\">PR Review</a>.</p>",
        "id": 198358509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590085982
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428837190\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think <code>guest_slices</code> could presumably be <code>Vec&lt;IoSliceMut&gt;</code> here, right? I don't think there's any intrinsic reason a second iteration is required?</p>\n</blockquote>",
        "id": 198358510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590085982
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416392721\">PR Review</a>.</p>",
        "id": 198358643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086048
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428837737\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yep, that'd be ideal.</p>\n</blockquote>",
        "id": 198358644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086048
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416393920\">PR Review</a>.</p>",
        "id": 198358828,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086160
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428838679\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW this makes <code>sizeof(GuestPtr&lt;T&gt;)</code> to be 4 words large (2 pointers for mem, 1 for bc, one for <code>pointer</code>).</p>\n<p>It might be best to package up with:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">BikeshedMe</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mem</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">GuestMemory</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"na\">&#39;a</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bc</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">BorrowChecker</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">GuestPtr</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">BikeshedMe</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">pointer</span>: <span class=\"nc\">T</span>::<span class=\"n\">Pointer</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>(and have <code>GuestPtr::new</code> take <code>&amp;BikeshedMe</code>)</p>\n</blockquote>",
        "id": 198358829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086160
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416395466\">PR Review</a>.</p>",
        "id": 198359111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086292
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428839935\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh, that's a cool suggestion! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n</blockquote>",
        "id": 198359112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086292
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416397436\">PR Review</a>.</p>",
        "id": 198359450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086474
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416402572\">PR Review</a>.</p>",
        "id": 198360316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086924
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428845385\">PR Review Comment</a>:</p>\n<blockquote>\n<p>this doesn't turn out to be necessary at all, idk what I was thinking. thanks for catching it.</p>\n</blockquote>",
        "id": 198360317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590086924
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416406035\">PR Review</a>.</p>",
        "id": 198360894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087230
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428848085\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is the trickiest thing I had to deal with with these changes. For safety, we need the <code>GuestSlice</code> to stay alive for at least as long as any <code>&amp;mut [u8]</code> we get from it (Deref trait enforces this). I couldn't find any other mechanism to collect all of the <code>GuestSlice</code>s (creating them does the borrow check) and then use them as <code>&amp;mut [u8]</code> without iterating through them twice. I agree its not great, but the number of vectors hopefully won't be big enough that this becomes a big performance hit. If it does become a problem, we could perhaps find a faster mechanism that involves some manual <code>unsafe</code>, but I'd prefer not to cross that bridge yet.</p>\n</blockquote>",
        "id": 198360895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087230
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416406427\">PR Review</a>.</p>",
        "id": 198360996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087265
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428848393\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We need it in the next line as a &amp;str, too</p>\n</blockquote>",
        "id": 198360997,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087265
    },
    {
        "content": "<p>pchickey edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428848393\">PR Review Comment</a>.</p>",
        "id": 198361044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087289
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416406837\">PR Review</a>.</p>",
        "id": 198361065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087301
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428848710\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>BorrowCheckerOutOfHandles</code> is the right way to spell it, thanks</p>\n</blockquote>",
        "id": 198361067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087301
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416408157\">PR Review</a>.</p>",
        "id": 198361309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087420
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428849758\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I believe <code>Once</code> is for one-time-globally, we actually do want to create a new one of these for each wasm instance we create, and at an even smaller scale for each hostcall if we can guarantee that is equivalent (no recursive calls, basically)</p>\n</blockquote>",
        "id": 198361310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087420
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416410959\">PR Review</a>.</p>",
        "id": 198361902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087668
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428852022\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, this datastructure isnt smart enough to recycle handles, because I didn't want to incur the bookkeeping cost for what should only happen in a pathological scenario of user code - if you were to <code>{ borrow(r1); loop { h2 = borrow(r2); unborrow(h2) } }</code> you'd eventually run out of handles. I can add a test that shows this bad behavior is present, with a note that we might want to try to fix it.</p>\n<p>If we recycled all unborrowed handles, it would be impossible to run out because the bound of <code>usize</code> handles is at least as big as the 32 bit memory space described by <code>Region</code>.</p>\n</blockquote>",
        "id": 198361907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087668
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416411786\">PR Review</a>.</p>",
        "id": 198362084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087743
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428852646\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point, I prefer your second solution that makes it a method on GuestMemory - the same code is responsible for constructing and passing each.</p>\n</blockquote>",
        "id": 198362086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087743
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416413463\">PR Review</a>.</p>",
        "id": 198362381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087887
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428853940\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, right, makes sense. I forgot we can have multiple Wasm memories at once.</p>\n</blockquote>",
        "id": 198362382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087887
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416414552\">PR Review</a>.</p>",
        "id": 198362565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087988
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428854775\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yep, that's a good point on the number of handles. I noticed this since we've faced the same problem with the <code>FdPool</code> in <code>wasi-common</code>, there handles being actual WASI file descriptors. Anyhow, a test case demonstrating the behaviour plus a comment sounds great to me!</p>\n</blockquote>",
        "id": 198362566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590087988
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416417663\">PR Review</a>.</p>",
        "id": 198363163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590088280
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428857178\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I wrote a test for this (requires 2^64 iterations) and it ran for more than 60 seconds before I killed it, so I don't want to include it in the test suite. I'll leave a description of the behavior as a comment.</p>\n</blockquote>",
        "id": 198363164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590088280
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR re-designs the Wiggle library to automate borrow-checking of slices and strs that reside in WebAssembly memory. This reduces the burden of writing <code>unsafe</code> on Wiggle users, and places all <code>unsafe</code> at the boundary between the Wasm runtime and Wiggle, rather than requiring it inside the implementation of the Wiggle traits.</p>\n<p>In short, the <code>GuestPtr::as_raw</code> methods have been replaced with runtime borrow-checked smart pointers. <code>GuestPtr::as_raw</code> gave raw pointers into guest memory and require the user to manually thread around a <code>GuestBorrows</code> instance and use <code>unsafe</code> to turn those raw pointers into references.</p>\n<p>This PR deletes the <code>GuestBorrows</code> type and instead defines a <code>BorrowChecker</code> type that understands both borrows and drops (unborrows). Instead of having the user pass the BorrowChecker to all of the sites where it is needed, it gets passed to the Wiggle ABI-level function once (this, along with construction, is taken care of by <code>wig</code>) and each <code>GuestPtr</code> has an internal shared ref to it. The user doesn't ever handle borrowing or unborrowing directly - those methods are private to the crate and are taken care of by <code>GuestPtr</code>, plus the <code>GuestSlice</code> and <code>GuestStr</code> drop impls. Each pointer makes the borrow checker accessible via <code>GuestPtr::borrow_checker(&amp;self) -&gt; &amp;BorrowChecker</code>, which is useful for inspecting <code>BorrowChecker::has_outstanding_borrows(&amp;self) -&gt; bool</code>.</p>\n<p>The <code>GuestPtr::as_raw</code> methods are replaced by <code>GuestPtr::as_slice</code> on <code>GuestPtr&lt;[T]&gt;</code> and <code>GuestPtr::as_str</code> on <code>GuestPtr&lt;str&gt;</code>. These new methods return a <code>GuestSlice&lt;T&gt;</code> and <code>GuestStr</code>, respectively. These are just basic \"smart pointers\" in that they contain a <code>&amp;mut</code> ref to the memory that is borrowed, impl <code>Deref</code> and <code>DerefMut</code>, and have a <code>Drop</code> impl which tells the <code>BorrowChecker</code> that the memory is no longer borrowed.</p>\n<p>Additionally, each <code>GuestPtr::read</code> and <code>write</code> verifies that the target of that read or write is not borrowed, which is safer than Wiggle was before, where the user had to manually borrow any GuestPtr (with no way to unborrow it afterwards!) before reading or writing it while another borrow was outstanding.</p>\n<p>In addition to the changes in <code>wiggle</code>, this PR updates <code>wig</code> and <code>wasi-common</code> for the new interfaces.</p>\n<p>Many thanks to @alexcrichton who helped me with the design and implementation of this PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198364508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590088986
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR re-designs the Wiggle library to automate borrow-checking of slices and strs that reside in WebAssembly memory. This reduces the burden of writing <code>unsafe</code> on Wiggle users, and places all <code>unsafe</code> at the boundary between the Wasm runtime and Wiggle, rather than requiring it inside the implementation of the Wiggle traits.</p>\n<p>In short, the <code>GuestPtr::as_raw</code> methods have been replaced with runtime borrow-checked smart pointers. <code>GuestPtr::as_raw</code> gave raw pointers into guest memory and require the user to manually thread around a <code>GuestBorrows</code> instance and use <code>unsafe</code> to turn those raw pointers into references.</p>\n<p>This PR deletes the <code>GuestBorrows</code> type and instead defines a <code>BorrowChecker</code> type that understands both borrows and drops (unborrows). Instead of having the user pass the BorrowChecker to all of the sites where it is needed, it gets passed to the Wiggle ABI-level function once (this, along with construction, is taken care of by <code>wig</code>) and each <code>GuestPtr</code> has an internal shared ref to it. The user doesn't ever handle borrowing or unborrowing directly - those methods are private to the crate and are taken care of by <code>GuestPtr</code>, plus the <code>GuestSlice</code> and <code>GuestStr</code> drop impls. Each pointer makes the borrow checker accessible via <code>GuestPtr::borrow_checker(&amp;self) -&gt; &amp;BorrowChecker</code>, which is useful for inspecting <code>BorrowChecker::has_outstanding_borrows(&amp;self) -&gt; bool</code>.</p>\n<p>The <code>GuestPtr::as_raw</code> methods are replaced by <code>GuestPtr::as_slice</code> on <code>GuestPtr&lt;[T]&gt;</code> and <code>GuestPtr::as_str</code> on <code>GuestPtr&lt;str&gt;</code>. These new methods return a <code>GuestSlice&lt;T&gt;</code> and <code>GuestStr</code>, respectively. These are just basic \"smart pointers\" in that they contain a <code>&amp;mut</code> ref to the memory that is borrowed, impl <code>Deref</code> and <code>DerefMut</code>, and have a <code>Drop</code> impl which tells the <code>BorrowChecker</code> that the memory is no longer borrowed.</p>\n<p>Additionally, each <code>GuestPtr::read</code> and <code>write</code> verifies that the target of that read or write is not borrowed, which is safer than Wiggle was before, where the user had to manually borrow any GuestPtr (with no way to unborrow it afterwards!) before reading or writing it while another borrow was outstanding.</p>\n<p>In addition to the changes in <code>wiggle</code>, this PR updates <code>wig</code> and <code>wasi-common</code> for the new interfaces.</p>\n<p>Many thanks to @alexcrichton who helped me with the design and implementation of this PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198366660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590090062
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416458702\">PR Review</a>.</p>",
        "id": 198371134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590092091
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#discussion_r428889101\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh sorry, I thought you’d spoof the test by doing a borrow, followed by an unborrow, and then manually fast forward next available handle to the limit and assert this fails whereas it shouldn’t since there was at least one unborrow registered. Having said that I reckon a comment will do nicely for now.</p>\n</blockquote>",
        "id": 198371135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590092092
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717#pullrequestreview-416459087\">PR Review</a>.</p>",
        "id": 198371203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590092129
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR re-designs the Wiggle library to automate borrow-checking of slices and strs that reside in WebAssembly memory. This reduces the burden of writing <code>unsafe</code> on Wiggle users, and places all <code>unsafe</code> at the boundary between the Wasm runtime and Wiggle, rather than requiring it inside the implementation of the Wiggle traits.</p>\n<p>In short, the <code>GuestPtr::as_raw</code> methods have been replaced with runtime borrow-checked smart pointers. <code>GuestPtr::as_raw</code> gave raw pointers into guest memory and require the user to manually thread around a <code>GuestBorrows</code> instance and use <code>unsafe</code> to turn those raw pointers into references.</p>\n<p>This PR deletes the <code>GuestBorrows</code> type and instead defines a <code>BorrowChecker</code> type that understands both borrows and drops (unborrows). Instead of having the user pass the BorrowChecker to all of the sites where it is needed, it gets passed to the Wiggle ABI-level function once (this, along with construction, is taken care of by <code>wig</code>) and each <code>GuestPtr</code> has an internal shared ref to it. The user doesn't ever handle borrowing or unborrowing directly - those methods are private to the crate and are taken care of by <code>GuestPtr</code>, plus the <code>GuestSlice</code> and <code>GuestStr</code> drop impls. Each pointer makes the borrow checker accessible via <code>GuestPtr::borrow_checker(&amp;self) -&gt; &amp;BorrowChecker</code>, which is useful for inspecting <code>BorrowChecker::has_outstanding_borrows(&amp;self) -&gt; bool</code>.</p>\n<p>The <code>GuestPtr::as_raw</code> methods are replaced by <code>GuestPtr::as_slice</code> on <code>GuestPtr&lt;[T]&gt;</code> and <code>GuestPtr::as_str</code> on <code>GuestPtr&lt;str&gt;</code>. These new methods return a <code>GuestSlice&lt;T&gt;</code> and <code>GuestStr</code>, respectively. These are just basic \"smart pointers\" in that they contain a <code>&amp;mut</code> ref to the memory that is borrowed, impl <code>Deref</code> and <code>DerefMut</code>, and have a <code>Drop</code> impl which tells the <code>BorrowChecker</code> that the memory is no longer borrowed.</p>\n<p>Additionally, each <code>GuestPtr::read</code> and <code>write</code> verifies that the target of that read or write is not borrowed, which is safer than Wiggle was before, where the user had to manually borrow any GuestPtr (with no way to unborrow it afterwards!) before reading or writing it while another borrow was outstanding.</p>\n<p>In addition to the changes in <code>wiggle</code>, this PR updates <code>wig</code> and <code>wasi-common</code> for the new interfaces.</p>\n<p>Many thanks to @alexcrichton who helped me with the design and implementation of this PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198379176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096126
    },
    {
        "content": "<p>pchickey updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a> from <code>pch/wiggle_auto_borrow_checking</code> to <code>master</code>:</p>\n<blockquote>\n<p>This PR re-designs the Wiggle library to automate borrow-checking of slices and strs that reside in WebAssembly memory. This reduces the burden of writing <code>unsafe</code> on Wiggle users, and places all <code>unsafe</code> at the boundary between the Wasm runtime and Wiggle, rather than requiring it inside the implementation of the Wiggle traits.</p>\n<p>In short, the <code>GuestPtr::as_raw</code> methods have been replaced with runtime borrow-checked smart pointers. <code>GuestPtr::as_raw</code> gave raw pointers into guest memory and require the user to manually thread around a <code>GuestBorrows</code> instance and use <code>unsafe</code> to turn those raw pointers into references.</p>\n<p>This PR deletes the <code>GuestBorrows</code> type and instead defines a <code>BorrowChecker</code> type that understands both borrows and drops (unborrows). Instead of having the user pass the BorrowChecker to all of the sites where it is needed, it gets passed to the Wiggle ABI-level function once (this, along with construction, is taken care of by <code>wig</code>) and each <code>GuestPtr</code> has an internal shared ref to it. The user doesn't ever handle borrowing or unborrowing directly - those methods are private to the crate and are taken care of by <code>GuestPtr</code>, plus the <code>GuestSlice</code> and <code>GuestStr</code> drop impls. Each pointer makes the borrow checker accessible via <code>GuestPtr::borrow_checker(&amp;self) -&gt; &amp;BorrowChecker</code>, which is useful for inspecting <code>BorrowChecker::has_outstanding_borrows(&amp;self) -&gt; bool</code>.</p>\n<p>The <code>GuestPtr::as_raw</code> methods are replaced by <code>GuestPtr::as_slice</code> on <code>GuestPtr&lt;[T]&gt;</code> and <code>GuestPtr::as_str</code> on <code>GuestPtr&lt;str&gt;</code>. These new methods return a <code>GuestSlice&lt;T&gt;</code> and <code>GuestStr</code>, respectively. These are just basic \"smart pointers\" in that they contain a <code>&amp;mut</code> ref to the memory that is borrowed, impl <code>Deref</code> and <code>DerefMut</code>, and have a <code>Drop</code> impl which tells the <code>BorrowChecker</code> that the memory is no longer borrowed.</p>\n<p>Additionally, each <code>GuestPtr::read</code> and <code>write</code> verifies that the target of that read or write is not borrowed, which is safer than Wiggle was before, where the user had to manually borrow any GuestPtr (with no way to unborrow it afterwards!) before reading or writing it while another borrow was outstanding.</p>\n<p>In addition to the changes in <code>wiggle</code>, this PR updates <code>wig</code> and <code>wasi-common</code> for the new interfaces.</p>\n<p>Many thanks to @alexcrichton who helped me with the design and implementation of this PR.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 198387431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590101280
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1717\">PR #1717</a>.</p>",
        "id": 198463740,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590165314
    }
]