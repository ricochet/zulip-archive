[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133\">PR #8133</a> from <code>afonso360:riscv-fix-bitselect-cmp</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<p>We have a special lowering that allows us to fuse a <code>bitselect</code> with a comparison instruction. This saves us a few instructions due to the mismatch that exists between native RISC-V masks and WASM masks.</p>\n<p>Native RISC-V masks have a single bit per lane, whereas WASM masks have all bits in a lane set to 1.</p>\n<p>The lowering for <code>bitselect+bitcast+{i,f}cmp</code> avoids the need to generate the WASM mask, by directly using the comparison mask with <code>vmerge</code>.</p>\n<p>The bug that this fixes was that when we introduce a <code>bitcast</code> in the middle, the comparison and the merge may have different types with different lanes. And if that happens the <code>vmerge</code> will only look at the first n bits of the mask. n being the number of lanes currently configured.</p>\n<p>This commit ensures that they are always equal by using the same type for both vmerge and the comparison instruction.</p>\n<p>I also manually checked all other uses of <code>gen_{f,i}cmp_mask</code> and they are all using the same type in the subsequent instructions.</p>\n<p>With this fix we no longer really care about the type of the <code>bitselect</code> as long as it has the same bitlength as the type of <code>{i,f}cmp</code>, which I think is enforced by the verifier. (i.e. We would have the same bug if <code>bitselect.i8x16+icmp.i8x8</code> was legal.)</p>\n<p>Thanks for reporting this @candymate!</p>\n</blockquote>",
        "id": 426586081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710435403
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133\">PR #8133</a>.</p>",
        "id": 426586082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710435403
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133\">PR #8133</a>.</p>",
        "id": 426586083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710435403
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133\">PR #8133</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<p>We have a special lowering that allows us to fuse a <code>bitselect</code> with a comparison instruction. This saves us a few instructions due to the mismatch that exists between native RISC-V masks and WASM masks.</p>\n<p>Native RISC-V masks have a single bit per lane, whereas WASM masks have all bits in a lane set to 1.</p>\n<p>The lowering for <code>bitselect+bitcast+{i,f}cmp</code> avoids the need to generate the WASM mask, by directly using the native comparison mask with <code>vmerge</code>.</p>\n<p>The bug that this fixes was that when we introduce a <code>bitcast</code> in the middle, the comparison and the merge may have different types with different lanes. And if that happens the <code>vmerge</code> will only look at the first n bits of the mask. n being the number of lanes currently configured.</p>\n<p>This commit ensures that they are always equal by using the same type for both vmerge and the comparison instruction.</p>\n<p>I also manually checked all other uses of <code>gen_{f,i}cmp_mask</code> and they are all using the same type in the subsequent instructions.</p>\n<p>With this fix we no longer really care about the type of the <code>bitselect</code> as long as it has the same bitlength as the type of <code>{i,f}cmp</code>, which I think is enforced by the verifier. (i.e. We would have the same bug if <code>bitselect.i8x16+icmp.i8x8</code> was legal.)</p>\n<p>Thanks for reporting this @candymate!</p>\n</blockquote>",
        "id": 426586819,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710435617
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133\">PR #8133</a>.</p>",
        "id": 426588553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710436080
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133#pullrequestreview-1937360900\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the quick fix!</p>\n</blockquote>",
        "id": 426593776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710437686
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8133\">PR #8133</a>.</p>",
        "id": 426598626,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710439312
    }
]