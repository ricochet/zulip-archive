[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6527\">issue #6527</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I'm filing this as a follow up to #6515.</p>\n<h4>Feature</h4>\n<p>In the RISC-V backend for cranelift we have two extractors that match a imm5 that is splatted into a vector. We currently just match <code>splat+iconst</code>, but we could match the equivalent <code>vconst</code>.</p>\n<h4>Benefit</h4>\n<p>This would improve codegen for the instructions that use these extractors. Which is a lot of them. Instead of emitting a VConst we would be able to fold that value in the immediate field of the instruction.</p>\n<h4>Implementation</h4>\n<p>I'm not entirely sure if this requires OR patterns in ISLE? Since we want to keep matching <code>splat+iconst</code> as well. Otherwise we can always build the extractor as an external extractor.</p>\n<p>Something that might be worth taking into account is that the RISC-V backend deals with a larger variety of <code>vconst</code>'s since we implement SIMD instructions generically, so having a vector that is <code>i8x2</code> is not unexpected, and most of the rules work well for these sizes, as well as the more common <code>i8x16</code>.</p>\n<h4>Alternatives</h4>\n<p>We can duplicate the rules that currently use <code>replicated_*</code> but that is slightly less appealing.<br>\n</p>\n</blockquote>",
        "id": 364072861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686073384
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6527\">issue #6527</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I'm filing this as a follow up to #6515.</p>\n<h4>Feature</h4>\n<p>In the RISC-V backend for cranelift we have two extractors that match a imm5 that is splatted into a vector. We currently just match <code>splat+iconst</code>, but we could match the equivalent <code>vconst</code>.</p>\n<h4>Benefit</h4>\n<p>This would improve codegen for the instructions that use these extractors. Which is a lot of them. Instead of emitting a VConst we would be able to fold that value in the immediate field of the instruction.</p>\n<h4>Implementation</h4>\n<p>I'm not entirely sure if this requires OR patterns in ISLE? Since we want to keep matching <code>splat+iconst</code> as well. Otherwise we can always build the extractor as an external extractor.</p>\n<p>Something that might be worth taking into account is that the RISC-V backend deals with a larger variety of <code>vconst</code>'s since we implement SIMD instructions generically, so having a vector that is <code>i8x2</code> is not unexpected, and most of the rules work well for these sizes, as well as the more common <code>i8x16</code>.</p>\n<h4>Alternatives</h4>\n<p>We can duplicate the rules that currently use <code>replicated_*</code> but that is slightly less appealing.<br>\n</p>\n</blockquote>",
        "id": 364072863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686073384
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6527\">issue #6527</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I'm filing this as a follow up to #6515.</p>\n<h4>Feature</h4>\n<p>In the RISC-V backend for cranelift we have two extractors that match a imm5 that is splatted into a vector. We currently just match <code>splat+iconst</code>, but we could match the equivalent <code>vconst</code>.</p>\n<h4>Benefit</h4>\n<p>This would improve codegen for the instructions that use these extractors. Which is a lot of them. Instead of emitting a VConst we would be able to fold that value in the immediate field of the instruction.</p>\n<h4>Implementation</h4>\n<p>I'm not entirely sure if this requires OR patterns in ISLE? Since we want to keep matching <code>splat+iconst</code> as well. Otherwise we can always build the extractor as an external extractor.</p>\n<p>Something that might be worth taking into account is that the RISC-V backend deals with a larger variety of <code>vconst</code>'s since we implement SIMD instructions generically, so having a vector that is <code>i8x2</code> is not unexpected, and most of the rules work well for these sizes, as well as the more common <code>i8x16</code>.</p>\n<h4>Alternatives</h4>\n<p>We can duplicate the rules that currently use <code>replicated_*</code> but that is slightly less appealing.<br>\n</p>\n</blockquote>",
        "id": 394713679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696368530
    }
]