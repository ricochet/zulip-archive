[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475\">PR #7475</a>.</p>",
        "id": 400165139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028050
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475\">PR #7475</a>.</p>",
        "id": 400165140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028050
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475\">PR #7475</a>.</p>",
        "id": 400165142,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028051
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475\">PR #7475</a> from <code>alexcrichton:http-direct-read</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is in the same spirit as #7461 and is aimed at removing an extra task when interoperating between WebAssembly and Hyper. The intention here is to ensure that when data is ready immediately a context switch between Tokio tasks isn't necessary. I'm still not sure why this context switch would tank performance so much.</p>\n<p>The goal of this commit is to remove the Tokio task associated with reading bodies. Currently a task is spawned with two channels coming out: one for frames and one for trailers. Instead the body is now read directly when data frames are read and trailers are managed similarly. The interactions here are somewhat nontrivial due to the management of resources and how the body needs to jump from the body stream object to the trailers object, but it's overall not the worst thing in the world.</p>\n<p>Locally on Linux this takes a \"hello world\" component which starts out by reading its HTTP body and then responds with a string from 6.7k rps locally via <code>wasmtime serve</code> to 16.8k rps. This restores the performance of wasi-http to be in-line with the historical SDK that Fermyon offered, for example, that's based on a custom HTTP interface. Note that these performance numbers use #7461 as a baseline.</p>\n<p>This commit has a downside, however, that if the incoming body is not being subscribed to actively by the wasm then no activity will happen on the host. This is a function of <code>poll</code> isn't being actively watched unless <code>subscribe</code>'s result is being actively watched via a wasm call to <code>wasi:io/poll</code>. Manual investigation of Hyper shows that this is probably ok for now since bodies are primarily channel-based which seems like the tasks doing the actual I/O are managed elsewhere. In that sense this shouldn't cause any immediate impact, but Hyper's situation in the future could change or my analysis could additionally be wrong. Given the performance benefits here though I'd be tempted to push in favor of this commit and handle \"poll in the background\" as necessary in the future if needed.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 400165143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028051
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475#discussion_r1381951428\">PR review comment</a>:</p>\n<blockquote>\n<p>I'll note that this, and the above, are somewhat unrelated but also tangential changes since I was touching these types. The above task previously dropped the error and this task tried to forward it along. In both cases though the result of this task was never actually looked at as the handle was exclusively used to keep the task alive and that's it.</p>\n<p>I've updated this so both tasks consistently drop the error. I don't know how to communicate this error through the WASI APIs myself.</p>\n</blockquote>",
        "id": 400167750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028909
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475#pullrequestreview-1713111600\">PR review</a>.</p>",
        "id": 400167751,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699028909
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475#pullrequestreview-1713585417\">PR review</a>.</p>",
        "id": 400210798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699049006
    },
    {
        "content": "<p>pchickey merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7475\">PR #7475</a>.</p>",
        "id": 400215207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699051802
    }
]