[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4552\">issue #4552</a>:</p>\n<blockquote>\n<p>Currently (as of commit 8137432e67c920b73a3bbcc4eb72ae5095d31f41) Cranelift's AArch64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/regs.rs#L167\">excludes</a> the following general-purpose registers (GPRs) unconditionally from the set of allocatable registers:</p>\n<ul>\n<li><code>X16</code></li>\n<li><code>X17</code></li>\n<li><code>X18</code></li>\n<li><code>X29</code> AKA <code>FP</code></li>\n<li><code>X30</code> AKA <code>LR</code></li>\n<li><code>X31</code> AKA <code>XZR</code>/<code>SP</code></li>\n</ul>\n<p>This list might be too conservative, except for the following cases:</p>\n<ul>\n<li><code>X29</code> - the Procedure Call Standard for the Arm® 64-bit Architecture (AAPCS64) <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#the-frame-pointer\">specifies</a> that it is the frame pointer and that it must have a valid value at all times</li>\n<li><code>X31</code> - in most contexts (e.g. non-memory operations) it is decoded as <code>XZR</code>, which has an architecturally fixed value (0), and in other cases as <code>SP</code>, so it is not usable in general</li>\n</ul>\n<p>As for the rest:</p>\n<ul>\n<li><code>X16</code> and <code>X17</code></li>\n</ul>\n<p>Currently reserved as spill temporaries, as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">explained</a> by @cfallin:</p>\n<blockquote>\n<p>regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences...</p>\n</blockquote>\n<p>From the same discussion, @cfallin's suggestion for an alternative approach:</p>\n<blockquote>\n<p>... an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free.</p>\n</blockquote>\n<p>In particular, we might expand the stack area next to the frame record - instead of decrementing the stack pointer by 16 bytes to save <code>FP</code> and <code>LR</code> in a function prologue, we could decrement by 32 bytes, so that we would have a scratch area for 2 GPRs as well.</p>\n<p>Another option is to reserve a vector register, which would give the same amount of space.</p>\n<p>Note that the code generating branch veneers <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L2807\">assumes</a> that both registers are available, so it would need adjustments.</p>\n<ul>\n<li><code>X18</code></li>\n</ul>\n<p>The AAPCS64 <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#general-purpose-registers\">states</a> that the platform can use it to carry inter-procedural state, which is assumed by Cranelift, but <code>X18</code> could be used as a regular temporary register otherwise; perhaps we could revisit that assumption?</p>\n<ul>\n<li><code>X30</code></li>\n</ul>\n<p>PR #4469 introduced the <code>preserve_frame_pointers</code> flag, which when true guarantees that the <code>LR</code> register is saved in the function prologue and restored in the epilogue, thus making it usable as a temporary register in between; we just have to ensure that calls are set up to clobber it, so that regalloc does the right thing. A restricted version of this idea that is potentially easier to implement is to make <code>X30</code> a spill temporary instead, and to turn either <code>X16</code> or <code>X17</code> into a regular temporary register.</p>\n<p>In fact the same optimization is also applicable when the <code>preserve_frame_pointers</code> flag is false as long as we are compiling a function that creates a frame record on the stack, e.g. a non-leaf one, but currently the backend plumbing is not set up to make that decision on a per-function basis. As @cfallin stated, any backend changes to remedy that limitation are subject to the following constraint:</p>\n<blockquote>\n<p>The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n</blockquote>\n</blockquote>",
        "id": 291235986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659034484
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4552\">issue #4552</a>:</p>\n<blockquote>\n<p>Currently (as of commit 8137432e67c920b73a3bbcc4eb72ae5095d31f41) Cranelift's AArch64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/regs.rs#L167\">excludes</a> the following general-purpose registers (GPRs) unconditionally from the set of allocatable registers:</p>\n<ul>\n<li><code>X16</code></li>\n<li><code>X17</code></li>\n<li><code>X18</code></li>\n<li><code>X29</code> AKA <code>FP</code></li>\n<li><code>X30</code> AKA <code>LR</code></li>\n<li><code>X31</code> AKA <code>XZR</code>/<code>SP</code></li>\n</ul>\n<p>This list might be too conservative, except for the following cases:</p>\n<ul>\n<li><code>X29</code> - the Procedure Call Standard for the Arm® 64-bit Architecture (AAPCS64) <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#the-frame-pointer\">specifies</a> that it is the frame pointer and that it must have a valid value at all times</li>\n<li><code>X31</code> - in most contexts (e.g. non-memory operations) it is decoded as <code>XZR</code>, which has an architecturally fixed value (0), and in other cases as <code>SP</code>, so it is not usable in general</li>\n</ul>\n<p>As for the rest:</p>\n<ul>\n<li><code>X16</code> and <code>X17</code></li>\n</ul>\n<p>Currently reserved as spill temporaries, as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">explained</a> by @cfallin:</p>\n<blockquote>\n<p>regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences...</p>\n</blockquote>\n<p>From the same discussion, @cfallin's suggestion for an alternative approach:</p>\n<blockquote>\n<p>... an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free.</p>\n</blockquote>\n<p>In particular, we might expand the stack area next to the frame record - instead of decrementing the stack pointer by 16 bytes to save <code>FP</code> and <code>LR</code> in a function prologue, we could decrement by 32 bytes, so that we would have a scratch area for 2 GPRs as well.</p>\n<p>Another option is to reserve a vector register, which would give the same amount of space.</p>\n<p>Note that the code generating branch veneers <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L2807\">assumes</a> that both registers are available, so it would need adjustments.</p>\n<ul>\n<li><code>X18</code></li>\n</ul>\n<p>The AAPCS64 <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#general-purpose-registers\">states</a> that the platform can use it to carry inter-procedural state, which is assumed by Cranelift, but <code>X18</code> could be used as a regular temporary register otherwise; perhaps we could revisit that assumption?</p>\n<ul>\n<li><code>X30</code></li>\n</ul>\n<p>PR #4469 introduced the <code>preserve_frame_pointers</code> flag, which when true guarantees that the <code>LR</code> register is saved in the function prologue and restored in the epilogue, thus making it usable as a temporary register in between; we just have to ensure that calls are set up to clobber it, so that regalloc does the right thing. A restricted version of this idea that is potentially easier to implement is to make <code>X30</code> a spill temporary instead, and to turn either <code>X16</code> or <code>X17</code> into a regular temporary register.</p>\n<p>In fact the same optimization is also applicable when the <code>preserve_frame_pointers</code> flag is false as long as we are compiling a function that creates a frame record on the stack, e.g. a non-leaf one, but currently the backend plumbing is not set up to make that decision on a per-function basis. As @cfallin stated, any backend changes to remedy that limitation are subject to the following constraint:</p>\n<blockquote>\n<p>The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n</blockquote>\n</blockquote>",
        "id": 291235987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659034484
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4552\">issue #4552</a>:</p>\n<blockquote>\n<p>Currently (as of commit 8137432e67c920b73a3bbcc4eb72ae5095d31f41) Cranelift's AArch64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/regs.rs#L167\">excludes</a> the following general-purpose registers (GPRs) unconditionally from the set of allocatable registers:</p>\n<ul>\n<li><code>X16</code></li>\n<li><code>X17</code></li>\n<li><code>X18</code></li>\n<li><code>X29</code> AKA <code>FP</code></li>\n<li><code>X30</code> AKA <code>LR</code></li>\n<li><code>X31</code> AKA <code>XZR</code>/<code>SP</code></li>\n</ul>\n<p>This list might be too conservative, except for the following cases:</p>\n<ul>\n<li><code>X29</code> - the Procedure Call Standard for the Arm® 64-bit Architecture (AAPCS64) <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#the-frame-pointer\">specifies</a> that it is the frame pointer and that it must have a valid value at all times</li>\n<li><code>X31</code> - in most contexts (e.g. non-memory operations) it is decoded as <code>XZR</code>, which has an architecturally fixed value (0), and in other cases as <code>SP</code>, so it is not usable in general</li>\n</ul>\n<p>As for the rest:</p>\n<ul>\n<li><code>X16</code> and <code>X17</code></li>\n</ul>\n<p>Currently reserved as spill temporaries, as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">explained</a> by @cfallin:</p>\n<blockquote>\n<p>regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences...</p>\n</blockquote>\n<p>From the same discussion, @cfallin's suggestion for an alternative approach:</p>\n<blockquote>\n<p>... an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free.</p>\n</blockquote>\n<p>In particular, we might expand the stack area next to the frame record - instead of decrementing the stack pointer by 16 bytes to save <code>FP</code> and <code>LR</code> in a function prologue, we could decrement by 32 bytes, so that we would have a scratch area for 2 GPRs as well.</p>\n<p>Another option is to reserve a vector register, which would give the same amount of space.</p>\n<p>Note that the code generating branch veneers <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L2807\">assumes</a> that both registers are available, so it would need adjustments.</p>\n<ul>\n<li><code>X18</code></li>\n</ul>\n<p>The AAPCS64 <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#general-purpose-registers\">states</a> that the platform can use it to carry inter-procedural state, which is assumed by Cranelift, but <code>X18</code> could be used as a regular temporary register otherwise; perhaps we could revisit that assumption?</p>\n<ul>\n<li><code>X30</code></li>\n</ul>\n<p>PR #4469 introduced the <code>preserve_frame_pointers</code> flag, which when true guarantees that the <code>LR</code> register is saved in the function prologue and restored in the epilogue, thus making it usable as a temporary register in between; we just have to ensure that calls are set up to clobber it, so that regalloc does the right thing. A restricted version of this idea that is potentially easier to implement is to make <code>X30</code> a spill temporary instead, and to turn either <code>X16</code> or <code>X17</code> into a regular temporary register.</p>\n<p>In fact the same optimization is also applicable when the <code>preserve_frame_pointers</code> flag is false as long as we are compiling a function that creates a frame record on the stack, e.g. a non-leaf one, but currently the backend plumbing is not set up to make that decision on a per-function basis. As @cfallin stated, any backend changes to remedy that limitation are subject to the following constraint:</p>\n<blockquote>\n<p>The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n</blockquote>\n</blockquote>",
        "id": 291235988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659034484
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4552\">issue #4552</a>:</p>\n<blockquote>\n<p>Currently (as of commit 8137432e67c920b73a3bbcc4eb72ae5095d31f41) Cranelift's AArch64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/regs.rs#L167\">excludes</a> the following general-purpose registers (GPRs) unconditionally from the set of allocatable registers:</p>\n<ul>\n<li><code>X16</code></li>\n<li><code>X17</code></li>\n<li><code>X18</code></li>\n<li><code>X29</code> AKA <code>FP</code></li>\n<li><code>X30</code> AKA <code>LR</code></li>\n<li><code>X31</code> AKA <code>XZR</code>/<code>SP</code></li>\n</ul>\n<p>This list might be too conservative, except for the following cases:</p>\n<ul>\n<li><code>X29</code> - the Procedure Call Standard for the Arm® 64-bit Architecture (AAPCS64) <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#the-frame-pointer\">specifies</a> that it is the frame pointer and that it must have a valid value at all times</li>\n<li><code>X31</code> - in most contexts (e.g. non-memory operations) it is decoded as <code>XZR</code>, which has an architecturally fixed value (0), and in other cases as <code>SP</code>, so it is not usable in general</li>\n</ul>\n<p>As for the rest:</p>\n<ul>\n<li><code>X16</code> and <code>X17</code></li>\n</ul>\n<p>Currently reserved as spill temporaries, as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">explained</a> by @cfallin:</p>\n<blockquote>\n<p>regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences...</p>\n</blockquote>\n<p>From the same discussion, @cfallin's suggestion for an alternative approach:</p>\n<blockquote>\n<p>... an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free.</p>\n</blockquote>\n<p>In particular, we might expand the stack area next to the frame record - instead of decrementing the stack pointer by 16 bytes to save <code>FP</code> and <code>LR</code> in a function prologue, we could decrement by 32 bytes, so that we would have a scratch area for 2 GPRs as well.</p>\n<p>Another option is to reserve a vector register, which would give the same amount of space.</p>\n<p>Note that the code generating branch veneers <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L2807\">assumes</a> that both registers are available, so it would need adjustments.</p>\n<ul>\n<li><code>X18</code></li>\n</ul>\n<p>The AAPCS64 <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#general-purpose-registers\">states</a> that the platform can use it to carry inter-procedural state, which is assumed by Cranelift, but <code>X18</code> could be used as a regular temporary register otherwise; perhaps we could revisit that assumption?</p>\n<ul>\n<li><code>X30</code></li>\n</ul>\n<p>PR #4469 introduced the <code>preserve_frame_pointers</code> flag, which when true guarantees that the <code>LR</code> register is saved in the function prologue and restored in the epilogue, thus making it usable as a temporary register in between; we just have to ensure that calls are set up to clobber it, so that regalloc does the right thing. A restricted version of this idea that is potentially easier to implement is to make <code>X30</code> a spill temporary instead, and to turn either <code>X16</code> or <code>X17</code> into a regular temporary register.</p>\n<p>In fact the same optimization is also applicable when the <code>preserve_frame_pointers</code> flag is false as long as we are compiling a function that creates a frame record on the stack, e.g. a non-leaf one, but currently the backend plumbing is not set up to make that decision on a per-function basis. As @cfallin stated, any backend changes to remedy that limitation are subject to the following constraint:</p>\n<blockquote>\n<p>The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n</blockquote>\n</blockquote>",
        "id": 291235989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659034484
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4552\">issue #4552</a>:</p>\n<blockquote>\n<p>Currently (as of commit 8137432e67c920b73a3bbcc4eb72ae5095d31f41) Cranelift's AArch64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/regs.rs#L167\">excludes</a> the following general-purpose registers (GPRs) unconditionally from the set of allocatable registers:</p>\n<ul>\n<li><code>X16</code></li>\n<li><code>X17</code></li>\n<li><code>X18</code></li>\n<li><code>X29</code> AKA <code>FP</code></li>\n<li><code>X30</code> AKA <code>LR</code></li>\n<li><code>X31</code> AKA <code>XZR</code>/<code>SP</code></li>\n</ul>\n<p>This list might be too conservative, except for the following cases:</p>\n<ul>\n<li><code>X29</code> - the Procedure Call Standard for the Arm® 64-bit Architecture (AAPCS64) <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#the-frame-pointer\">specifies</a> that it is the frame pointer and that it must have a valid value at all times</li>\n<li><code>X31</code> - in most contexts (e.g. non-memory operations) it is decoded as <code>XZR</code>, which has an architecturally fixed value (0), and in other cases as <code>SP</code>, so it is not usable in general</li>\n</ul>\n<p>As for the rest:</p>\n<ul>\n<li><code>X16</code> and <code>X17</code></li>\n</ul>\n<p>Currently reserved as spill temporaries, as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">explained</a> by @cfallin:</p>\n<blockquote>\n<p>regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences...</p>\n</blockquote>\n<p>From the same discussion, @cfallin's suggestion for an alternative approach:</p>\n<blockquote>\n<p>... an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free.</p>\n</blockquote>\n<p>In particular, we might expand the stack area next to the frame record - instead of decrementing the stack pointer by 16 bytes to save <code>FP</code> and <code>LR</code> in a function prologue, we could decrement by 32 bytes, so that we would have a scratch area for 2 GPRs as well.</p>\n<p>Another option is to reserve a vector register, which would give the same amount of space.</p>\n<p>Note that the code generating branch veneers <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L2807\">assumes</a> that both registers are available, so it would need adjustments.</p>\n<ul>\n<li><code>X18</code></li>\n</ul>\n<p>The AAPCS64 <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#general-purpose-registers\">states</a> that the platform can use it to carry inter-procedural state, which is assumed by Cranelift, but <code>X18</code> could be used as a regular temporary register otherwise; perhaps we could revisit that assumption?</p>\n<ul>\n<li><code>X30</code></li>\n</ul>\n<p>PR #4469 introduced the <code>preserve_frame_pointers</code> flag, which when true guarantees that the <code>LR</code> register is saved in the function prologue and restored in the epilogue, thus making it usable as a temporary register in between; we just have to ensure that calls are set up to clobber it, so that regalloc does the right thing. A restricted version of this idea that is potentially easier to implement is to make <code>X30</code> a spill temporary instead, and to turn either <code>X16</code> or <code>X17</code> into a regular temporary register.</p>\n<p>In fact the same optimization is also applicable when the <code>preserve_frame_pointers</code> flag is false as long as we are compiling a function that creates a frame record on the stack, e.g. a non-leaf one, but currently the backend plumbing is not set up to make that decision on a per-function basis. As @cfallin stated, any backend changes to remedy that limitation are subject to the following constraint:</p>\n<blockquote>\n<p>The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n</blockquote>\n</blockquote>",
        "id": 291235990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659034484
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4552\">issue #4552</a>:</p>\n<blockquote>\n<p>Currently (as of commit 8137432e67c920b73a3bbcc4eb72ae5095d31f41) Cranelift's AArch64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/regs.rs#L167\">excludes</a> the following general-purpose registers (GPRs) unconditionally from the set of allocatable registers:</p>\n<ul>\n<li><code>X16</code></li>\n<li><code>X17</code></li>\n<li><code>X18</code></li>\n<li><code>X29</code> AKA <code>FP</code></li>\n<li><code>X30</code> AKA <code>LR</code></li>\n<li><code>X31</code> AKA <code>XZR</code>/<code>SP</code></li>\n</ul>\n<p>This list might be too conservative, except for the following cases:</p>\n<ul>\n<li><code>X29</code> - the Procedure Call Standard for the Arm® 64-bit Architecture (AAPCS64) <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#the-frame-pointer\">specifies</a> that it is the frame pointer and that it must have a valid value at all times</li>\n<li><code>X31</code> - in most contexts (e.g. non-memory operations) it is decoded as <code>XZR</code>, which has an architecturally fixed value (0), and in other cases as <code>SP</code>, so it is not usable in general</li>\n</ul>\n<p>As for the rest:</p>\n<ul>\n<li><code>X16</code> and <code>X17</code></li>\n</ul>\n<p>Currently reserved as spill temporaries, as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4521#issuecomment-1195717857\">explained</a> by @cfallin:</p>\n<blockquote>\n<p>regalloc2 actually doesn't need any temporaries anymore, but aarch64 itself does. The reason is that a spillslot may be at a greater offset from <code>sp</code> or <code>fp</code> than we can reach with an <code>imm12</code>, so we need a sequence of instructions to synthesize the address of a spillslot before spilling or reloading. That sequence itself can't require spilling another register if all registers are full (as they are likely to be if we're spilling in the first place), so we need to set aside <code>x16</code> for that.</p>\n<p>If I recall correctly, <code>x17</code> is used in stack-limit check sequences...</p>\n</blockquote>\n<p>From the same discussion, @cfallin's suggestion for an alternative approach:</p>\n<blockquote>\n<p>... an alternative approach would be to reserve a small-offset slot to spill another victim to if we need to compute a spillslot address at a large distance away -- so we can bootstrap our way there with no registers initially free.</p>\n</blockquote>\n<p>In particular, we might expand the stack area next to the frame record - instead of decrementing the stack pointer by 16 bytes to save <code>FP</code> and <code>LR</code> in a function prologue, we could decrement by 32 bytes, so that we would have a scratch area for 2 GPRs as well.</p>\n<p>Another option is to reserve a vector register, which would give the same amount of space.</p>\n<p>Note that the code generating branch veneers <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8137432e67c920b73a3bbcc4eb72ae5095d31f41/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L2807\">assumes</a> that both registers are available, so it would need adjustments.</p>\n<ul>\n<li><code>X18</code></li>\n</ul>\n<p>The AAPCS64 <a href=\"https://github.com/ARM-software/abi-aa/blob/2022Q1/aapcs64/aapcs64.rst#general-purpose-registers\">states</a> that the platform can use it to carry inter-procedural state, which is assumed by Cranelift, but <code>X18</code> could be used as a regular temporary register otherwise; perhaps we could revisit that assumption?</p>\n<ul>\n<li><code>X30</code></li>\n</ul>\n<p>PR #4469 introduced the <code>preserve_frame_pointers</code> flag, which when true guarantees that the <code>LR</code> register is saved in the function prologue and restored in the epilogue, thus making it usable as a temporary register in between; we just have to ensure that calls are set up to clobber it, so that regalloc does the right thing. A restricted version of this idea that is potentially easier to implement is to make <code>X30</code> a spill temporary instead, and to turn either <code>X16</code> or <code>X17</code> into a regular temporary register.</p>\n<p>In fact the same optimization is also applicable when the <code>preserve_frame_pointers</code> flag is false as long as we are compiling a function that creates a frame record on the stack, e.g. a non-leaf one, but currently the backend plumbing is not set up to make that decision on a per-function basis. As @cfallin stated, any backend changes to remedy that limitation are subject to the following constraint:</p>\n<blockquote>\n<p>The only thing I want to hold as a hard requirement is that we don't build it dynamically per-function (because there are lots of tiny functions and that would be a nontrivial cost); right now we build it once when the compiler backend is constructed. We could perhaps build a few versions of it though, and return the right one in the <code>regalloc2::Function</code> trait -- one for leaf functions and one without; and variations based on compiler flags.</p>\n</blockquote>\n</blockquote>",
        "id": 297745547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662632140
    }
]