[
    {
        "content": "<p>andrewdavidmackenzie opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>My nightly CI tests have started failing since a few nights ago with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">test_fibonacci_wasm_example</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">flowr</span><span class=\"o\">/</span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span>:<span class=\"mi\">13</span>:\n<span class=\"nc\">Sample</span><span class=\"w\"> </span><span class=\"s\">\"fibonacci\"</span><span class=\"w\"> </span><span class=\"n\">produced</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">STDERR</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">flowr</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"o\">'</span>\n<span class=\"p\">[</span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T15</span>:<span class=\"mi\">46</span>:<span class=\"mi\">49</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">flowrlib</span>::<span class=\"n\">run_state</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Job</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Url</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">scheme</span>: <span class=\"s\">\"file\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cannot_be_a_base</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">username</span>: <span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">port</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/Users/andrew/.flow/lib/flowstdlib/math/add/add.wasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fragment</span>: <span class=\"nb\">None</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n        <span class=\"mi\">0</span>: <span class=\"mh\">0x104df</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"mh\">0x104ad</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1049f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17he3f5031942851a57E</span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"mh\">0xfbc8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking19begin_panic_handler28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h2fbd6f5ef7cde01dE</span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"mh\">0xfaf1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h2a11135b2d55c7a5E</span>\n<span class=\"w\">        </span><span class=\"mi\">5</span>: <span class=\"mh\">0x1012e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_begin_unwind</span>\n<span class=\"w\">        </span><span class=\"mi\">6</span>: <span class=\"mh\">0x10c33</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking9panic_fmt17hd2edc01644c13cb8E</span>\n<span class=\"w\">        </span><span class=\"mi\">7</span>: <span class=\"mh\">0x110d9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking5panic17h1654f8fcddbbeba3E</span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"mh\">0xfcde</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rdl_dealloc</span>\n<span class=\"w\">        </span><span class=\"mi\">9</span>: <span class=\"mh\">0x8ff8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_dealloc</span>\n<span class=\"w\">       </span><span class=\"mi\">10</span>: <span class=\"mh\">0x3353</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">run_wasm</span>\n<span class=\"w\">    </span><span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"o\">'</span>\n\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I compile some rust code to wasm with rustc, and then invoke it from my binary that links wasmtime using this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">implementation</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Error returned by WASM implementation.call() for {:?} =&gt; '{}'\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">source_url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I thought it might be some wasmtime upgrade, but fails the same on 16.0.0, 17.0.0, and 17.0.1<br>\nI thought it might be rustc, so I went back to the last one that worked (\"nightly-2024-2-13\") but it fails there too.</p>\n<p>Given the difficulty of finding where it fails I'm kind of stuck, so any ideas as to what to try next or what I can add here to help debug it, would be appreciated.</p>\n<p>This function (_add()) is the code being compiled and executed (with some wrapper code to format params etc):<br>\n<a href=\"https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4\">https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4</a></p>\n</blockquote>",
        "id": 422261470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708357931
    },
    {
        "content": "<p>andrewdavidmackenzie edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>My nightly CI tests have started failing since a few nights ago with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">test_fibonacci_wasm_example</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">flowr</span><span class=\"o\">/</span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span>:<span class=\"mi\">13</span>:\n<span class=\"nc\">Sample</span><span class=\"w\"> </span><span class=\"s\">\"fibonacci\"</span><span class=\"w\"> </span><span class=\"n\">produced</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">STDERR</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">flowr</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"o\">'</span>\n<span class=\"p\">[</span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T15</span>:<span class=\"mi\">46</span>:<span class=\"mi\">49</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">flowrlib</span>::<span class=\"n\">run_state</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Job</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Url</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">scheme</span>: <span class=\"s\">\"file\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cannot_be_a_base</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">username</span>: <span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">port</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/Users/andrew/.flow/lib/flowstdlib/math/add/add.wasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fragment</span>: <span class=\"nb\">None</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n        <span class=\"mi\">0</span>: <span class=\"mh\">0x104df</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"mh\">0x104ad</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1049f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17he3f5031942851a57E</span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"mh\">0xfbc8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking19begin_panic_handler28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h2fbd6f5ef7cde01dE</span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"mh\">0xfaf1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h2a11135b2d55c7a5E</span>\n<span class=\"w\">        </span><span class=\"mi\">5</span>: <span class=\"mh\">0x1012e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_begin_unwind</span>\n<span class=\"w\">        </span><span class=\"mi\">6</span>: <span class=\"mh\">0x10c33</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking9panic_fmt17hd2edc01644c13cb8E</span>\n<span class=\"w\">        </span><span class=\"mi\">7</span>: <span class=\"mh\">0x110d9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking5panic17h1654f8fcddbbeba3E</span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"mh\">0xfcde</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rdl_dealloc</span>\n<span class=\"w\">        </span><span class=\"mi\">9</span>: <span class=\"mh\">0x8ff8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_dealloc</span>\n<span class=\"w\">       </span><span class=\"mi\">10</span>: <span class=\"mh\">0x3353</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">run_wasm</span>\n<span class=\"w\">    </span><span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"o\">'</span>\n\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I compile some rust code to wasm with rustc, and then invoke it from my binary that links wasmtime using this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">implementation</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Error returned by WASM implementation.call() for {:?} =&gt; '{}'\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">source_url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I thought it might be some wasmtime upgrade, but fails the same on 16.0.0, 17.0.0, and 17.0.1<br>\nI thought it might be rustc, so I went back to the last one that worked (\"nightly-2024-2-13\") but it fails there too.</p>\n<p>Given the difficulty of finding where it fails I'm kind of stuck, so any ideas as to what to try next or what I can add here to help debug it, would be appreciated.</p>\n<p>This function (_add()) is the code being compiled and executed (with some wrapper code to format params etc):<br>\n<a href=\"https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4\">https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4</a><br>\nBut in fact it seems to fail on any/all of my wasm functions/files, that worked until a few days ago - and I haven't changed, so I think it's something generic, and not related to that code.</p>\n<p>Could it be that rustc is emitting some wasm instruction that is not yet supported?</p>\n</blockquote>",
        "id": 422274274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708360873
    },
    {
        "content": "<p>andrewdavidmackenzie edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/14335155/add.wasm.txt\">add.wasm.txt</a><br>\nMy nightly CI tests have started failing since a few nights ago with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">test_fibonacci_wasm_example</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">flowr</span><span class=\"o\">/</span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span>:<span class=\"mi\">13</span>:\n<span class=\"nc\">Sample</span><span class=\"w\"> </span><span class=\"s\">\"fibonacci\"</span><span class=\"w\"> </span><span class=\"n\">produced</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">STDERR</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">flowr</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"o\">'</span>\n<span class=\"p\">[</span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T15</span>:<span class=\"mi\">46</span>:<span class=\"mi\">49</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">flowrlib</span>::<span class=\"n\">run_state</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Job</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Url</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">scheme</span>: <span class=\"s\">\"file\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cannot_be_a_base</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">username</span>: <span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">port</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/Users/andrew/.flow/lib/flowstdlib/math/add/add.wasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fragment</span>: <span class=\"nb\">None</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n        <span class=\"mi\">0</span>: <span class=\"mh\">0x104df</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"mh\">0x104ad</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1049f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17he3f5031942851a57E</span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"mh\">0xfbc8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking19begin_panic_handler28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h2fbd6f5ef7cde01dE</span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"mh\">0xfaf1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h2a11135b2d55c7a5E</span>\n<span class=\"w\">        </span><span class=\"mi\">5</span>: <span class=\"mh\">0x1012e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_begin_unwind</span>\n<span class=\"w\">        </span><span class=\"mi\">6</span>: <span class=\"mh\">0x10c33</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking9panic_fmt17hd2edc01644c13cb8E</span>\n<span class=\"w\">        </span><span class=\"mi\">7</span>: <span class=\"mh\">0x110d9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking5panic17h1654f8fcddbbeba3E</span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"mh\">0xfcde</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rdl_dealloc</span>\n<span class=\"w\">        </span><span class=\"mi\">9</span>: <span class=\"mh\">0x8ff8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_dealloc</span>\n<span class=\"w\">       </span><span class=\"mi\">10</span>: <span class=\"mh\">0x3353</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">run_wasm</span>\n<span class=\"w\">    </span><span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"o\">'</span>\n\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I compile some rust code to wasm with rustc, and then invoke it from my binary that links wasmtime using this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">implementation</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Error returned by WASM implementation.call() for {:?} =&gt; '{}'\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">source_url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I thought it might be some wasmtime upgrade, but fails the same on 16.0.0, 17.0.0, and 17.0.1<br>\nI thought it might be rustc, so I went back to the last one that worked (\"nightly-2024-2-13\") but it fails there too.</p>\n<p>Given the difficulty of finding where it fails I'm kind of stuck, so any ideas as to what to try next or what I can add here to help debug it, would be appreciated.</p>\n<p>This function (_add()) is the code being compiled and executed (with some wrapper code to format params etc):<br>\n<a href=\"https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4\">https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4</a><br>\nBut in fact it seems to fail on any/all of my wasm functions/files, that worked until a few days ago - and I haven't changed, so I think it's something generic, and not related to that code.</p>\n<p>Could it be that rustc is emitting some wasm instruction that is not yet supported?</p>\n</blockquote>",
        "id": 422278892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708362574
    },
    {
        "content": "<p>andrewdavidmackenzie edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>My nightly CI tests have started failing since a few nights ago with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">test_fibonacci_wasm_example</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">flowr</span><span class=\"o\">/</span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span>:<span class=\"mi\">13</span>:\n<span class=\"nc\">Sample</span><span class=\"w\"> </span><span class=\"s\">\"fibonacci\"</span><span class=\"w\"> </span><span class=\"n\">produced</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">STDERR</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">flowr</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"o\">'</span>\n<span class=\"p\">[</span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T15</span>:<span class=\"mi\">46</span>:<span class=\"mi\">49</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">flowrlib</span>::<span class=\"n\">run_state</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Job</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Url</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">scheme</span>: <span class=\"s\">\"file\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cannot_be_a_base</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">username</span>: <span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">port</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/Users/andrew/.flow/lib/flowstdlib/math/add/add.wasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fragment</span>: <span class=\"nb\">None</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n        <span class=\"mi\">0</span>: <span class=\"mh\">0x104df</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"mh\">0x104ad</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1049f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17he3f5031942851a57E</span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"mh\">0xfbc8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking19begin_panic_handler28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h2fbd6f5ef7cde01dE</span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"mh\">0xfaf1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h2a11135b2d55c7a5E</span>\n<span class=\"w\">        </span><span class=\"mi\">5</span>: <span class=\"mh\">0x1012e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_begin_unwind</span>\n<span class=\"w\">        </span><span class=\"mi\">6</span>: <span class=\"mh\">0x10c33</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking9panic_fmt17hd2edc01644c13cb8E</span>\n<span class=\"w\">        </span><span class=\"mi\">7</span>: <span class=\"mh\">0x110d9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking5panic17h1654f8fcddbbeba3E</span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"mh\">0xfcde</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rdl_dealloc</span>\n<span class=\"w\">        </span><span class=\"mi\">9</span>: <span class=\"mh\">0x8ff8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_dealloc</span>\n<span class=\"w\">       </span><span class=\"mi\">10</span>: <span class=\"mh\">0x3353</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">run_wasm</span>\n<span class=\"w\">    </span><span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"o\">'</span>\n\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I compile some rust code to wasm with rustc, and then invoke it from my binary that links wasmtime using this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">implementation</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Error returned by WASM implementation.call() for {:?} =&gt; '{}'\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">source_url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I thought it might be some wasmtime upgrade, but fails the same on 16.0.0, 17.0.0, and 17.0.1<br>\nI thought it might be rustc, so I went back to the last one that worked (\"nightly-2024-2-13\") but it fails there too.</p>\n<p>Given the difficulty of finding where it fails I'm kind of stuck, so any ideas as to what to try next or what I can add here to help debug it, would be appreciated.</p>\n<p>This function (_add()) is the code being compiled and executed (with some wrapper code to format params etc):<br>\n<a href=\"https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4\">https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4</a><br>\nBut in fact it seems to fail on any/all of my wasm functions/files, that worked until a few days ago - and I haven't changed, so I think it's something generic, and not related to that code.</p>\n<p>Could it be that rustc is emitting some wasm instruction that is not yet supported?</p>\n<p>Here is the add.wasm binary file, with txt extension to allow upload<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14335155/add.wasm.txt\">add.wasm.txt</a></p>\n</blockquote>",
        "id": 422279000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708362610
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954526117\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>This looks like it's probably a Rust panic happening, are you able to capture the stdout or stderr of the wasm guest to see what it's saying? Rust nightly is adding some more debug checks recently so you might be tripping over an assertion in the guest.</p>\n</blockquote>",
        "id": 422448498,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708444674
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954538863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>What if the return data is bigger than the input data at <a href=\"https://github.com/andrewdavidmackenzie/flow/blob/e6a2244a35f025e6bf822df6ea9686d5e9159def/flowmacro/src/lib.rs#L172\">https://github.com/andrewdavidmackenzie/flow/blob/e6a2244a35f025e6bf822df6ea9686d5e9159def/flowmacro/src/lib.rs#L172</a>? You did write out-of-bounds of the allocated vector. Also you are calling <code>Vec::from_raw_parts</code> without forgetting the vector again, which means that the allocation to which you write the return data using will be dropped before returning. Maybe you wanted to use <code>std::slice::from_raw_parts</code> instead?</p>\n</blockquote>",
        "id": 422449974,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708445044
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954722836\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>@bjorn3 I'll check the points you make. I wrote that a long time ago - and knew little....so there's quite possibly bugs in it. <br>\nI'm not sure why it's started failing lately though, as it hasn't changed in a long time...</p>\n<p>I'm trying to go back to the older code and older rustc nightly to the last working version and figure out what change caused it.</p>\n</blockquote>",
        "id": 422469672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708450954
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954742507\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>On the memory size point.<br>\nI think I always use the same fixed size alloc (hopefully larger than ever needed!) for input and output.<br>\nSo, providing output is smaller than the memory size, it doesn't matter if it is longer than the input data part.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">send_inputs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inputs</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Value</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input_data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"n\">to_vec</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">inputs</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alloc_size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">input_data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MAX_RESULT_SIZE</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">alloc_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">memory</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">input_data</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"Could not write to WASM Linear Memory\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>(I could add an assert to that to fail if not big enough...)</p>\n</blockquote>",
        "id": 422470648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708451354
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954761262\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>On the vector lifetime. That function (\"run_wasm\") is the one that calls the wasm (\"object.run()\" and the input_data vec should still be in scope when I do the copy to return_data ... I think.... can hardly remember this code...</p>\n</blockquote>",
        "id": 422471508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708451678
    },
    {
        "content": "<p>andrewdavidmackenzie deleted a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954761262\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>On the vector lifetime. That function (\"run_wasm\") is the one that calls the wasm (\"object.run()\" and the input_data vec should still be in scope when I do the copy to return_data ... I think.... can hardly remember this code...</p>\n</blockquote>",
        "id": 422472084,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708451885
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954773245\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>You aren't copying to <code>return_data</code>, you are copying from <code>return_data</code> to <code>input_data</code> and then immediately freeing both <code>return_data</code> and <code>input_data</code> through their drop impls.</p>\n</blockquote>",
        "id": 422472144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708451908
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954773705\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>yes. mistake there - sorry, I deleted that wrong comment.<br>\n</p>\n</blockquote>",
        "id": 422472198,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708451927
    },
    {
        "content": "<p>andrewdavidmackenzie edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954773705\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>yes. mistake there - sorry, I deleted that wrong comment.<br>\nBut I'm copying to input_data_ptr which is passed in, not input data - so should be OK?</p>\n</blockquote>",
        "id": 422472351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708451987
    },
    {
        "content": "<p>andrewdavidmackenzie edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954773705\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>yes. mistake there - sorry, I deleted that wrong comment.<br>\nBut I'm copying to input_data_ptr which is passed in, not input data - so should be OK?<br>\nAs you say, input_data and return_data are freed - but the memory behind input_data_ptr outlives this function?</p>\n</blockquote>",
        "id": 422472587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452061
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954789259\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>This is the steps that happen when running your code as far as I can tell:</p>\n<ul>\n<li><code>WasmExecutor::run</code> (host)<br>\n    * <code>WasmExecutor::send_inputs</code> (host) -&gt; allocate \"the buffer\" on the guest<br>\n    * <code>WasmExecutor::call</code> (host)<br>\n        * <code>run_wasm</code> (guest)<br>\n            * <code>input_data = Vec::from_raw_parts(the buffer)</code> (guest)<br>\n            * Process data and create return value<br>\n            * Copy return value into \"the buffer\"<br>\n            * Implicit <code>mem::drop(input_data)</code> =&gt; frees \"the buffer\" &lt;-- BUG IS HERE<br>\n    * <code>WasmExecutor::get_returns</code> (host) =&gt; use after free of \"the buffer\"</li>\n</ul>\n<p>I've marked the source of the UB here with \"BUG IS HERE\". Replacing <code>input_data = Vec::from_raw_parts(the buffer)</code> with <code>input_data = slice::from_raw_parts_mut(the buffer)</code> would fix this by preventing the implicit drop of <code>input_data</code> from freeing the backing storage.</p>\n</blockquote>",
        "id": 422473837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452489
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954790635\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>I'm trying slide::from_raw_parts already (slow build!), so let's see! :-)</p>\n</blockquote>",
        "id": 422473986,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452549
    },
    {
        "content": "<p>andrewdavidmackenzie edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954790635\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>I'm trying slice::from_raw_parts already (slow build!), so let's see! :-)</p>\n</blockquote>",
        "id": 422474026,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452565
    },
    {
        "content": "<p>andrewdavidmackenzie edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954790635\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>I'm trying slice::from_raw_parts already (slow build!), so let's see! :-)<br>\nSince some is running native, and other parts are running in wasm in the wasm runtime - I've always struggled to reason about allow/free with this code to be honest!</p>\n</blockquote>",
        "id": 422474311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452651
    },
    {
        "content": "<p>andrewdavidmackenzie edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954790635\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>I'm trying slice::from_raw_parts already (slow build!), so let's see! :-)<br>\nSince some is running native, and other parts are running in wasm in the wasm runtime - I've always struggled to reason about alloc/free with this code to be honest!</p>\n</blockquote>",
        "id": 422474714,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452796
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954797231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>I think that indeed has fixed it. @bjorn3 you are a godsend! I would <em>never</em> have found that!<br>\nThanks so much for your help and patience!<br>\nI'll now go back to latest code and latest rustc and confirm - but I'm confident that is indeed the fix!</p>\n</blockquote>",
        "id": 422474748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452809
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954801412\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>Happy to help!</p>\n</blockquote>",
        "id": 422475327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708452987
    },
    {
        "content": "<p>andrewdavidmackenzie closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>My nightly CI tests have started failing since a few nights ago with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">test_fibonacci_wasm_example</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">flowr</span><span class=\"o\">/</span><span class=\"n\">utilities</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span>:<span class=\"mi\">13</span>:\n<span class=\"nc\">Sample</span><span class=\"w\"> </span><span class=\"s\">\"fibonacci\"</span><span class=\"w\"> </span><span class=\"n\">produced</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">STDERR</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">flowr</span><span class=\"o\">/</span><span class=\"n\">examples</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"o\">'</span>\n<span class=\"p\">[</span><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">02</span><span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"n\">T15</span>:<span class=\"mi\">46</span>:<span class=\"mi\">49</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">flowrlib</span>::<span class=\"n\">run_state</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Job</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Url</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">scheme</span>: <span class=\"s\">\"file\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cannot_be_a_base</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">username</span>: <span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">port</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/Users/andrew/.flow/lib/flowstdlib/math/add/add.wasm\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">query</span>: <span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fragment</span>: <span class=\"nb\">None</span> <span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n        <span class=\"mi\">0</span>: <span class=\"mh\">0x104df</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span>: <span class=\"mh\">0x104ad</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_panic</span>\n<span class=\"w\">        </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1049f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking20rust_panic_with_hook17he3f5031942851a57E</span>\n<span class=\"w\">        </span><span class=\"mi\">3</span>: <span class=\"mh\">0xfbc8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std9panicking19begin_panic_handler28_</span><span class=\"cp\">$u7b$$u7b$closure$u7d$$u7d$</span><span class=\"mi\">17</span><span class=\"n\">h2fbd6f5ef7cde01dE</span>\n<span class=\"w\">        </span><span class=\"mi\">4</span>: <span class=\"mh\">0xfaf1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN3std10sys_common9backtrace26__rust_end_short_backtrace17h2a11135b2d55c7a5E</span>\n<span class=\"w\">        </span><span class=\"mi\">5</span>: <span class=\"mh\">0x1012e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">rust_begin_unwind</span>\n<span class=\"w\">        </span><span class=\"mi\">6</span>: <span class=\"mh\">0x10c33</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking9panic_fmt17hd2edc01644c13cb8E</span>\n<span class=\"w\">        </span><span class=\"mi\">7</span>: <span class=\"mh\">0x110d9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">_ZN4core9panicking5panic17h1654f8fcddbbeba3E</span>\n<span class=\"w\">        </span><span class=\"mi\">8</span>: <span class=\"mh\">0xfcde</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rdl_dealloc</span>\n<span class=\"w\">        </span><span class=\"mi\">9</span>: <span class=\"mh\">0x8ff8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">__rust_dealloc</span>\n<span class=\"w\">       </span><span class=\"mi\">10</span>: <span class=\"mh\">0x3353</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">!</span><span class=\"n\">run_wasm</span>\n<span class=\"w\">    </span><span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"o\">'</span>\n\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>\n</code></pre></div>\n<p>I compile some rust code to wasm with rustc, and then invoke it from my binary that links wasmtime using this function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">length</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span>: <span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">;</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">implementation</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"Error returned by WASM implementation.call() for {:?} =&gt; '{}'\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">source_url</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I thought it might be some wasmtime upgrade, but fails the same on 16.0.0, 17.0.0, and 17.0.1<br>\nI thought it might be rustc, so I went back to the last one that worked (\"nightly-2024-2-13\") but it fails there too.</p>\n<p>Given the difficulty of finding where it fails I'm kind of stuck, so any ideas as to what to try next or what I can add here to help debug it, would be appreciated.</p>\n<p>This function (_add()) is the code being compiled and executed (with some wrapper code to format params etc):<br>\n<a href=\"https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4\">https://github.com/andrewdavidmackenzie/flow/blob/6723be519fbeeeb2b8dcfbe2d1421609adef5f13/flowstdlib/src/math/add/add.rs#L4</a><br>\nBut in fact it seems to fail on any/all of my wasm functions/files, that worked until a few days ago - and I haven't changed, so I think it's something generic, and not related to that code.</p>\n<p>Could it be that rustc is emitting some wasm instruction that is not yet supported?</p>\n<p>Here is the add.wasm binary file, with txt extension to allow upload<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/14335155/add.wasm.txt\">add.wasm.txt</a></p>\n</blockquote>",
        "id": 422475719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708453126
    },
    {
        "content": "<p>andrewdavidmackenzie <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956#issuecomment-1954804799\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7956\">issue #7956</a>:</p>\n<blockquote>\n<p>Given my level of expertise, I'm surprised I <em>ever</em> got that code working, so having it break was a real concern - that I could never fix it! Back on track. </p>\n<p>Thanks again, closing.</p>\n</blockquote>",
        "id": 422475721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708453126
    }
]