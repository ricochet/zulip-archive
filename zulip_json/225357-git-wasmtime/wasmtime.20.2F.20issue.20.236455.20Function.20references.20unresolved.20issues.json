[
    {
        "content": "<p>dhil opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[ ] Support for function references in the embedder API.</li>\n<li>[ ] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[ ] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n</blockquote>",
        "id": 361032934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685014825
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[ ] Support for function references in the embedder API.</li>\n<li>[ ] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[ ] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 361253033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685089822
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[ ] Support for function references in the embedder API.</li>\n<li>[ ] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[ ] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 361337561,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685109621
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[ ] Support for function references in the embedder API.</li>\n<li>[ ] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 399961159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698937708
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455#issuecomment-1945168831\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>I've finished support for function references over in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">https://github.com/bytecodealliance/wasmtime/pull/7943</a></p>\n</blockquote>",
        "id": 421558243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707957098
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[ ] Support for function references in the embedder API.</li>\n<li>[ ] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 422502558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708463671
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[x] Support for function references in the embedder API.</li>\n<li>[x] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 422584112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708510399
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[x] Support for function references in the embedder API.</li>\n<li>[x] Failing tests:<ul>\n<li>[ ] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[ ] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 422584115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708510400
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[x] Support for function references in the embedder API.</li>\n<li>[x] Failing tests:<ul>\n<li>[x] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[x] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 422584121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708510401
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[x] Support for function references in the embedder API.</li>\n<li>[x] Failing tests:<ul>\n<li>[x] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[x] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[ ] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 422584123,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708510402
    },
    {
        "content": "<p>dhil edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6455\">issue #6455</a>:</p>\n<blockquote>\n<p>PR #5288 implements the function references proposal modulo a few missing bits. The missing bits are:</p>\n<ul>\n<li>[x] Support for function references in the embedder API.</li>\n<li>[x] Failing tests:<ul>\n<li>[x] <code>type-equivalence.wast</code>: type canonicalisation is currently broken due to <code>#[derive(hash)]</code> not considering that two distinct typed function reference indices may point to structurally equivalent types.</li>\n<li>[x] <code>br_table.wast</code>: this fails due to incomplete support for the various syntactic sugar in the wasm-tools/<code>wast</code> crate. See bytecodealliance/wasm-tools/pull/952.</li>\n<li>[x] <code>ref_null.wast</code> and <code>local_init.wast</code>: fail due to lack of support in the embedder API.</li>\n<li>[x] <code>return_call_ref.wast</code>, <code>return_call_indirect.wast,</code> and <code>return_call.wast</code>: fail due to lack of tail call support.</li>\n</ul>\n</li>\n</ul>\n<p>At the time of writing the implementation does not take advantage of the static non-null safety to elide null checks when executing <code>call_ref</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762\">https://github.com/bytecodealliance/wasmtime/blob/36e9f7e577df11de14f5973308c4b4bd0565eed9/crates/cranelift/src/func_environ.rs#L1744-L1762</a></p>\n</blockquote>",
        "id": 422584127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708510403
    }
]