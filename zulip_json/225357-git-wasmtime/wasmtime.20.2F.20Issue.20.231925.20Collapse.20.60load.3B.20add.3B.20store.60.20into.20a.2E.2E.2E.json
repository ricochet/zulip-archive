[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Right now, this</p>\n<div class=\"codehilite\"><pre><span></span><code>function %add(i64) {\n    block0(v0: i64):\n        v1 = load.i32 aligned notrap v0\n        v2 = iadd_imm v1, 1\n        store aligned notrap v2, v1\n        return\n}\n</code></pre></div>\n\n\n<p>compiles down into</p>\n<div class=\"codehilite\"><pre><span></span><code>Disassembly of 19 bytes:\n   0:   40 55                   push    rbp\n   2:   48 89 e5                mov rbp, rsp\n   5:   40 8b 07                mov eax, dword ptr [rdi]\n   8:   89 c1                   mov ecx, eax\n   a:   83 c1 01                add ecx, 1\n   d:   40 89 08                mov dword ptr [rax], ecx\n  10:   40 5d                   pop rbp\n  12:   c3                      ret\n</code></pre></div>\n\n\n<p>on x86-64.</p>\n<p>I would expect it to instead generate</p>\n<div class=\"codehilite\"><pre><span></span><code>push rbp\nmov  rbp, rsp\nadd  dword ptr [rdi], 1\npop  rbp\nret\n</code></pre></div>\n\n\n<p>but I don't think we any IR instruction handles this addressing mode right now.</p>\n</blockquote>",
        "id": 202027370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120469
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Right now, this</p>\n<div class=\"codehilite\"><pre><span></span><code>function %add(i64) {\n    block0(v0: i64):\n        v1 = load.i32 aligned notrap v0\n        v2 = iadd_imm v1, 1\n        store aligned notrap v2, v1\n        return\n}\n</code></pre></div>\n\n\n<p>compiles down into</p>\n<div class=\"codehilite\"><pre><span></span><code>Disassembly of 19 bytes:\n   0:   40 55                   push    rbp\n   2:   48 89 e5                mov rbp, rsp\n   5:   40 8b 07                mov eax, dword ptr [rdi]\n   8:   89 c1                   mov ecx, eax\n   a:   83 c1 01                add ecx, 1\n   d:   40 89 08                mov dword ptr [rax], ecx\n  10:   40 5d                   pop rbp\n  12:   c3                      ret\n</code></pre></div>\n\n\n<p>on x86-64.</p>\n<p>I would expect it to instead generate</p>\n<div class=\"codehilite\"><pre><span></span><code>push rbp\nmov  rbp, rsp\nadd  dword ptr [rdi], 1\npop  rbp\nret\n</code></pre></div>\n\n\n<p>but I don't think we any IR instruction handles this addressing mode right now.</p>\n</blockquote>",
        "id": 202027371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120469
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Right now, this</p>\n<div class=\"codehilite\"><pre><span></span><code>function %add(i64) {\n    block0(v0: i64):\n        v1 = load.i32 aligned notrap v0\n        v2 = iadd_imm v1, 1\n        store aligned notrap v2, v1\n        return\n}\n</code></pre></div>\n\n\n<p>compiles down into</p>\n<div class=\"codehilite\"><pre><span></span><code>Disassembly of 19 bytes:\n   0:   40 55                   push    rbp\n   2:   48 89 e5                mov rbp, rsp\n   5:   40 8b 07                mov eax, dword ptr [rdi]\n   8:   89 c1                   mov ecx, eax\n   a:   83 c1 01                add ecx, 1\n   d:   40 89 08                mov dword ptr [rax], ecx\n  10:   40 5d                   pop rbp\n  12:   c3                      ret\n</code></pre></div>\n\n\n<p>on x86-64.</p>\n<p>I would expect it to instead generate</p>\n<div class=\"codehilite\"><pre><span></span><code>push rbp\nmov  rbp, rsp\nadd  dword ptr [rdi], 1\npop  rbp\nret\n</code></pre></div>\n\n\n<p>but I don't think we any IR instruction handles this addressing mode right now.</p>\n</blockquote>",
        "id": 202027372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120469
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Right now, this</p>\n<div class=\"codehilite\"><pre><span></span><code>function %add(i64) {\n    block0(v0: i64):\n        v1 = load.i32 aligned notrap v0\n        v2 = iadd_imm v1, 1\n        store aligned notrap v2, v1\n        return\n}\n</code></pre></div>\n\n\n<p>compiles down into</p>\n<div class=\"codehilite\"><pre><span></span><code>Disassembly of 19 bytes:\n   0:   40 55                   push    rbp\n   2:   48 89 e5                mov rbp, rsp\n   5:   40 8b 07                mov eax, dword ptr [rdi]\n   8:   89 c1                   mov ecx, eax\n   a:   83 c1 01                add ecx, 1\n   d:   40 89 08                mov dword ptr [rax], ecx\n  10:   40 5d                   pop rbp\n  12:   c3                      ret\n</code></pre></div>\n\n\n<p>on x86-64.</p>\n<p>I would expect it to instead generate</p>\n<div class=\"codehilite\"><pre><span></span><code>push rbp\nmov  rbp, rsp\nadd  dword ptr [rdi], 1\npop  rbp\nret\n</code></pre></div>\n\n\n<p>but I don't think we any IR instruction handles this addressing mode right now.</p>\n</blockquote>",
        "id": 202027373,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120470
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Right now, this</p>\n<div class=\"codehilite\"><pre><span></span><code>function %add(i64) {\n    block0(v0: i64):\n        v1 = load.i32 aligned notrap v0\n        v2 = iadd_imm v1, 1\n        store aligned notrap v2, v1\n        return\n}\n</code></pre></div>\n\n\n<p>compiles down into</p>\n<div class=\"codehilite\"><pre><span></span><code>Disassembly of 19 bytes:\n   0:   40 55                   push    rbp\n   2:   48 89 e5                mov rbp, rsp\n   5:   40 8b 07                mov eax, dword ptr [rdi]\n   8:   89 c1                   mov ecx, eax\n   a:   83 c1 01                add ecx, 1\n   d:   40 89 08                mov dword ptr [rax], ecx\n  10:   40 5d                   pop rbp\n  12:   c3                      ret\n</code></pre></div>\n\n\n<p>on x86-64.</p>\n<p>I would expect it to instead generate</p>\n<div class=\"codehilite\"><pre><span></span><code>push rbp\nmov  rbp, rsp\nadd  dword ptr [rdi], 1\npop  rbp\nret\n</code></pre></div>\n\n\n<p>but I don't think we any IR instruction handles this addressing mode right now.</p>\n</blockquote>",
        "id": 202027374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120470
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649826842\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202027411,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120483
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649827313\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>(Using <code>--set opt_level=speed</code>)</p>\n</blockquote>",
        "id": 202027539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593120555
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649835437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Which backend? I don't think the old backend can do this (due to limited addressing modes in the recipes) but I was planning to add this optimization to the new backend eventually since that has support for different addressing modes.</p>\n</blockquote>",
        "id": 202029716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593121831
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649835889\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>(and by \"I was planning to add this\" I mean feel free to do this since it will take me a bit to get there).</p>\n</blockquote>",
        "id": 202029811,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593121898
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649837742\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>The current backend was all I tested.</p>\n</blockquote>",
        "id": 202030289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593122181
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649840904\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p><code>iadd_mem</code>, <code>isub_mem</code>, etc (any suggestions fir a better name) instructions would also be necessary to implement atomic increment.</p>\n</blockquote>",
        "id": 202031286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593122678
    },
    {
        "content": "<p>julian-seward1 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-649960825\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>In the new backend, this would require a new <code>Inst</code> variant, <code>Alu_R_RM</code> or perhaps <code>Alu_RI_RM</code>.  That bit is easy.  More complex is that we'd have to add structure to the new instruction selection framework to match the multiple CLIR insns and produce a single x64 insn.  Currently it can do that for pure-value trees rooted at some node in the CLIR insn dag, but this doesn't fit into that scenario.  We'd have to confer with @cfallin.</p>\n</blockquote>",
        "id": 202052399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593146592
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-650074318\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>This is entirely doable in the new backend indeed, with less effort than would be required for the old one (viz., no need to add an extra specific CLIF instruction). I would strongly recommend to not implement this in the old backend at this point (more to come about this in the next few hours/days!).</p>\n</blockquote>",
        "id": 202067267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593162345
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-650078188\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<blockquote>\n<p>viz., no need to add an extra specific CLIF instruction</p>\n</blockquote>\n<p>What I meant is that a specific CLIF instruction is needed anyway for atomic increment, so it could just as well have a non-atomic variant. I did imagine that atomicness would be a <code>MemFlag</code> instead of duplicating every instruction that operates on memory.</p>\n</blockquote>",
        "id": 202068021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593162867
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-650264477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>FWIW, having a specific instruction for this would be nice too. I'd like to use it in wasmtime's gc barriers for reference types.</p>\n</blockquote>",
        "id": 202110597,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593188018
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-732448781\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>The infrastructure for the new backend to do this collapsing landed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2366\">https://github.com/bytecodealliance/wasmtime/pull/2366</a> and some follow up work for merging ALU ops and memory loads in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2389\">https://github.com/bytecodealliance/wasmtime/pull/2389</a></p>\n<p>I guess we should decide whether we ever want to support an <code>iadd_imm_mem</code> instruction in clif itself, or if we want this to only be something that the backend optimizes risc-y instructions into. If we don't want to add such an instruction, then I think we can close this issue.</p>\n</blockquote>",
        "id": 217687728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606168514
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-732482521\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>I think that the latter is probably the better option; in general we want to try to reduce the instruction count going forward, and do better with pattern-matching.</p>\n<p>This isn't too much more work on top of what we already have (load+op); we can either keep this issue open to track that work (the title seems to match what we want to do still?) or open a new one, up to you!</p>\n</blockquote>",
        "id": 217696589,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606173599
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-732483427\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>Sounds good. Let's keep this open to track combining load+op+store into a single instruction.</p>\n</blockquote>",
        "id": 217696840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606173752
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925#issuecomment-732483576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">Issue #1925</a>:</p>\n<blockquote>\n<p>And we should probably double check that the GC barriers do end up using a single <code>add</code> in practice, too.</p>\n</blockquote>",
        "id": 217696867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1606173781
    }
]