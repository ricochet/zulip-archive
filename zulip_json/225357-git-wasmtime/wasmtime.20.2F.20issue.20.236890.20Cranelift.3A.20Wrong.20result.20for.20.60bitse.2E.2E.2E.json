[
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_sse41</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"mh\">0xFF00000000000000FF00000000000000</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"mh\">0x11111111111111111111111111111111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x11000000000000001100000000000000</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao2</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_filetests</span>::<span class=\"n\">concurrent</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FAIL</span>: <span class=\"nc\">run</span>\n<span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao2</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">run</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">test</span>: <span class=\"nc\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"mh\">0x11111111111111111111111111111111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x11000000000000001100000000000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span>: <span class=\"mh\">0x11111111111111111111111111111111</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This issue is caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/lower.isle#L1381-L1384\">this optimization to <code>bitselect</code></a>. It checks if every byte in the <code>vconst</code> is <code>0xFF</code> or <code>0x00</code>, which it is in this case, but then emits a <code>blend</code> instruction of whatever type the original bitselect was issued. </p>\n<p>This is correct for <code>i8x16</code>, but not for any type with a larger lane size.</p>\n<p>This does not affect wasmtime since wasmtime always bitcasts the inputs to bitselect into a <code>i8x16</code> before the operation which is the only type for which this works.</p>\n<p>We also currently don't remove bitcasts in the midend, so this won't get accidentally converted into a <code>bitselect.f64x2</code>.<br>\n</p>\n</blockquote>",
        "id": 386940536,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692820246
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890#issuecomment-1690548736\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think bitcast isn't the cause of this problem, right? Should the issue title say bitselect.f64x2 instead?</p>\n</blockquote>\n<p>Oops, yes, bitselect, not bitcast!</p>\n</blockquote>",
        "id": 386940769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692820346
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890#issuecomment-1690555637\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p>I'm fine with converting <code>bitselect</code> with a constant mask into <code>shuffle</code> if you think that's best, @alexcrichton.</p>\n<p>But if we don't do that then I'd like to think through the rest of what you said more carefully. I don't see why <code>vconst_all_ones_or_all_zeros</code> needs to do anything but a byte-oriented pattern-match, so long as the result is always a byte-oriented blend. As long as both use the same definition of what a \"lane\" is, then we only fire this rule when the MSB of a lane is the same as all the other bits in the lane, so the intended type doesn't matter. Choosing byte-sized lanes means the rule can match more cases while still giving correct results.</p>\n</blockquote>",
        "id": 386941551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692820707
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890#issuecomment-1690569024\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p>Good point! Also sorry I should have read your comment more closely and more carefully. I believe you're correct and always using <code>x64_pblendvb</code> here is sufficient, and my point about turning things into <code>shuffle</code> is orthogonal. </p>\n<p>(sorry I should have learned by now to read things completely)</p>\n</blockquote>",
        "id": 386942916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692821341
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6890\">issue #6890</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">has_sse41</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"n\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f64x2</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">f64x2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v1</span>: <span class=\"nc\">f64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"nc\">f64x2</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vconst</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"mh\">0xFF00000000000000FF00000000000000</span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bitselect</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"mh\">0x11111111111111111111111111111111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x11000000000000001100000000000000</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao2</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">cranelift_filetests</span>::<span class=\"n\">concurrent</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">FAIL</span>: <span class=\"nc\">run</span>\n<span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao2</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">run</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">test</span>: <span class=\"nc\">run</span>: <span class=\"o\">%</span><span class=\"n\">bitselect_vconst_f64x2</span><span class=\"p\">(</span><span class=\"mh\">0x11111111111111111111111111111111</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x00000000000000000000000000000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x11000000000000001100000000000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">actual</span>: <span class=\"mh\">0x11111111111111111111111111111111</span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n<h3>Extra Info</h3>\n<p>This issue is caused by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/cranelift/codegen/src/isa/x64/lower.isle#L1381-L1384\">this optimization to <code>bitselect</code></a>. It checks if every byte in the <code>vconst</code> is <code>0xFF</code> or <code>0x00</code>, which it is in this case, but then emits a <code>blend</code> instruction of whatever type the original bitselect was issued. </p>\n<p>This is correct for <code>i8x16</code>, but not for any type with a larger lane size.</p>\n<p>This does not affect wasmtime since wasmtime always bitcasts the inputs to bitselect into a <code>i8x16</code> before the operation which is the only type for which this works.</p>\n<p>We also currently don't remove bitcasts in the midend, so this won't get accidentally converted into a <code>bitselect.f64x2</code>.<br>\n</p>\n</blockquote>",
        "id": 387687851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693235055
    }
]