[
    {
        "content": "<p>jameysharp labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5163\">issue #5163</a>:</p>\n<blockquote>\n<p>The <code>sum</code> and <code>calculate_addr</code> functions in <code>cranelift/interpreter/src/step.rs</code>, and the <code>get_heap_address</code> and <code>heap_address</code> and <code>validate_address</code> functions on <code>InterpreterState</code>, are too general in some ways and not general enough in others.</p>\n<p>In #5155 @afonso360 discovered that <code>calculate_address</code> was being called incorrectly in the interpreter's implementation of <code>heap_addr</code>. It was passed the <code>imm()</code>, which for that instruction is the size to validate, along with the dynamic offset. So the returned address started immediately _after_ the memory region it was supposed to return. Since that function exists solely to 1) convert values to a specified type and 2) sum them, an instruction where there's only one operand doesn't really need that.</p>\n<p>The only two other uses of <code>calculate_address</code> pass a constant type (<code>I64</code>), so the value conversion is more general than necessary. And they always pass an array of exactly one value, so the iterators and generalized sums are also more general than necessary.</p>\n<p>Meanwhile, the <code>sum</code> helper used in <code>calculate_address</code> is also used in <code>stack_load</code>, <code>stack_store</code>, and <code>stack_addr</code>, but nowhere else. It seems like any <code>calculate_address</code>-style helper that's useful for calculating heap offsets should work for stack instructions too. So in that sense apparently <code>calculate_address</code> is _less_ general than necessary. Regardless, I'd like to see <code>sum</code> deleted since there are always exactly two operands.</p>\n<p>There's very little difference between <code>get_heap_address</code> and <code>heap_address</code>, except the latter is in the <code>State</code> trait and the former is an inherent method on <code>InterpreterState</code> specifically. Perhaps we could merge those? Since <code>heap_address</code> is only called from the implementation of the <code>heap_addr</code> instruction and <code>get_heap_address</code> is only called from tests, I suspect changing their signatures shouldn't be hard.</p>\n<p>Calling <code>heap_address</code> twice, once to check the upper bound and a second time to get the actual address, isn't really necessary. We can and should check whether any of the address computation additions overflow; that definitely indicates invalid addresses. But only the upper bound needs to get checked against the heap size; if that check passes without overflow, the start address is definitely safe. So I think <code>heap_address</code> should be passed the width, so it can ask <code>validate_address</code> to check the start address plus width.</p>\n<p>The interpreter currently does not check for overflow, as far as I can tell, since <code>Value::add</code> is implemented using <code>wrapping_add</code>.</p>\n<p><code>validate_address</code> has cases for both heap and stack addresses, but is only ever called with heap addresses. (From <code>get_heap_address</code> and <code>heap_address</code>, specifically.) It might be useful to actually use it with stack addresses.</p>\n<p>None of this is urgent; it'd just be nice for future maintenance.</p>\n</blockquote>",
        "id": 307215730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667256232
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5163\">issue #5163</a>:</p>\n<blockquote>\n<p>The <code>sum</code> and <code>calculate_addr</code> functions in <code>cranelift/interpreter/src/step.rs</code>, and the <code>get_heap_address</code> and <code>heap_address</code> and <code>validate_address</code> functions on <code>InterpreterState</code>, are too general in some ways and not general enough in others.</p>\n<p>In #5155 @afonso360 discovered that <code>calculate_address</code> was being called incorrectly in the interpreter's implementation of <code>heap_addr</code>. It was passed the <code>imm()</code>, which for that instruction is the size to validate, along with the dynamic offset. So the returned address started immediately _after_ the memory region it was supposed to return. Since that function exists solely to 1) convert values to a specified type and 2) sum them, an instruction where there's only one operand doesn't really need that.</p>\n<p>The only two other uses of <code>calculate_address</code> pass a constant type (<code>I64</code>), so the value conversion is more general than necessary. And they always pass an array of exactly one value, so the iterators and generalized sums are also more general than necessary.</p>\n<p>Meanwhile, the <code>sum</code> helper used in <code>calculate_address</code> is also used in <code>stack_load</code>, <code>stack_store</code>, and <code>stack_addr</code>, but nowhere else. It seems like any <code>calculate_address</code>-style helper that's useful for calculating heap offsets should work for stack instructions too. So in that sense apparently <code>calculate_address</code> is _less_ general than necessary. Regardless, I'd like to see <code>sum</code> deleted since there are always exactly two operands.</p>\n<p>There's very little difference between <code>get_heap_address</code> and <code>heap_address</code>, except the latter is in the <code>State</code> trait and the former is an inherent method on <code>InterpreterState</code> specifically. Perhaps we could merge those? Since <code>heap_address</code> is only called from the implementation of the <code>heap_addr</code> instruction and <code>get_heap_address</code> is only called from tests, I suspect changing their signatures shouldn't be hard.</p>\n<p>Calling <code>heap_address</code> twice, once to check the upper bound and a second time to get the actual address, isn't really necessary. We can and should check whether any of the address computation additions overflow; that definitely indicates invalid addresses. But only the upper bound needs to get checked against the heap size; if that check passes without overflow, the start address is definitely safe. So I think <code>heap_address</code> should be passed the width, so it can ask <code>validate_address</code> to check the start address plus width.</p>\n<p>The interpreter currently does not check for overflow, as far as I can tell, since <code>Value::add</code> is implemented using <code>wrapping_add</code>.</p>\n<p><code>validate_address</code> has cases for both heap and stack addresses, but is only ever called with heap addresses. (From <code>get_heap_address</code> and <code>heap_address</code>, specifically.) It might be useful to actually use it with stack addresses.</p>\n<p>None of this is urgent; it'd just be nice for future maintenance.</p>\n</blockquote>",
        "id": 307215731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667256233
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5163#issuecomment-1489018855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5163\">issue #5163</a>:</p>\n<blockquote>\n<p>After #5386 removed heaps from Cranelift, all of the heap-address helpers are now gone and <code>validate_address</code> is not called anywhere. So some of this issue has become irrelevant but now there's more to clean up.</p>\n<p>Some of this might also become irrelevant with #5793.</p>\n</blockquote>",
        "id": 345471559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1680111069
    }
]