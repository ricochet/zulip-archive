[
    {
        "content": "<p>mnjdhl opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7761\">issue #7761</a>:</p>\n<blockquote>\n<p>Hi,</p>\n<p>In order to help the wasmtime project, we would like to fill the missing Tier1 requirement for the target aarch-unknown-linux-gnu.</p>\n<p>Currently, we are able to set up continuous fuzzing of wasmtime on aarch64/linux platform. We are just seeking your guidance as to the steps and process needed to complete this task.</p>\n<p>Our team has found this github repo about wasmtime fuzzing, could you please confirm it has all the necessary information:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/fuzz/README.md\">https://github.com/bytecodealliance/wasmtime/blob/main/fuzz/README.md</a> </p>\n<p>If you could please let us know if there are additional details on how we can fulfill this requirement on the aarch64 platform, we would appreciate it.</p>\n<p>Warm regards,</p>\n<p>Manoj Dahal<br>\nSartura<br>\nCC @lperkov @jvijtiuk</p>\n</blockquote>",
        "id": 411782463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704734257
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7761#issuecomment-1883256199\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7761\">issue #7761</a>:</p>\n<blockquote>\n<p>Hello! Currently all continuous fuzzing is done through <a href=\"https://github.com/google/oss-fuzz\">oss-fuzz</a> which up-to-now has only supported x86_64 for Wasmtime. We haven't planned or designed what it might look like to continuously run fuzzing elsewhere on different hardware, it's always been a reach goal for us in that regard. That being said if you're willing to help out here that would be great!</p>\n<p>The rough idea for what we have in mind is something oss-fuzz-like where it continuously fuzzes over time and rebuilds on a nightly basis. Ideally it'd include things like automatic regression finding and test case reduction, but starting out with continuous fuzzing and reporting issues is, in my opinion, probably the best first step.</p>\n<p>Unfortunately we don't have a piece of software along the lines of \"take this and run this and that's all that's needed\". There's a fair bit of infrastructural work here but I'd be happy to discuss in more detail if you'd like.</p>\n</blockquote>",
        "id": 411956935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704813847
    }
]