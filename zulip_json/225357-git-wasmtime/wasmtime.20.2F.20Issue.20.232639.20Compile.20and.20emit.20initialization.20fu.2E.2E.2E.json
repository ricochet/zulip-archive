[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639\">Issue #2639</a>:</p>\n<blockquote>\n<p>Right now, a 1000ft overview of our instantiation process (ignoring <em>creating</em> import-able functions in the linker, which shared host functions adderesses) looks something like this:</p>\n<ol>\n<li>look up imports in linker's hash table and flatten them to an array</li>\n<li>allocate space for memories/tables/globals/etc</li>\n<li>fill the vmctx with pointers to the imports, etc</li>\n<li>initialize globals by interpreting global intializers from the wasm module</li>\n<li>initialize tables by interpreting element initializer segments from the wasm module</li>\n<li>initialize memory by interpreting data initializer segments from the wasm module</li>\n</ol>\n<p>The instance allocator pool work makes (2) super fast! <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span>️ </p>\n<p>Although they should usually take relatively little time, we can make (4) through (6) even faster by using cranelift to compile an initialization function that doesn't have an interpreter loop iterating over each initializer and checking that it is in bounds and all that, but instead emit code with that interpreter loop unrolled and a bunch of bounds checking that was per-iteration of the interpreter loop de-duplicated into a single check for everything. Then we just call this JIT code during instantiation, rather than initializing these things ourselves!</p>\n<p>Of course the amount of speed up we'll get by doing this is going to be a function of how many global/table element/data segment initializers a module has. Usually it isn't <em>too</em> many. But some modules, particularly those generated by Wizer, might have a good amount of them, and this could potentially save us a few microseconds on instantiation (great to be at the level where we are counting microseconds here <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>). Also, funcref tables can get pretty big and generally every index is initialized with an element.</p>\n<p>We could potentially also JIT code for (3) but this seems slightly more complicated because it is more heterogeneous and also the vmctx fields/layout change more frequently than globals/tables/memory so it may have a larger maintenance burden.</p>\n<p>Finally, we've talked about using virtual memory tricks to make page-aligned and -sized data segments</p>\n<ul>\n<li>lazily initialized (via userfaultfd) and</li>\n<li>copy-on-write (via mapping them with <code>MAP_PRIVATE</code>)</li>\n</ul>\n<p>This JIT-initialization approach should technically be complimentary to these things. Even if (6) effectively goes away from our instantiation times by becoming lazy, (4) and (5) will still need initializing at instantiation time, as will any non-page-aligned and -sized data segments. But it might make the potential speed ups that much smaller, and bump this optimization pretty far down the priority list. Something to consider.</p>\n<p>Aside: it is worth thinking about speeding up (1) as well. If we are repeatedly instantiating the same module with the same imports (eg an instantiation of the same module with the same imports for each http request that a server receives) then it seems like we could do (1) just the one time and then reuse the flattened imports array for every instantiation. Not totally sure what this would look like at the API level. I think it might be possible to implement without wasmtime API changes, but maybe we don't want to force everyone to implement this same optimization by hand? Another thing to mull over.</p>\n<p>cc @tschneidereit @lukewagner @alexcrichton since we talked about this yesterday</p>\n<p>cc @peterhuene because this is related to instantiation performance</p>\n</blockquote>",
        "id": 225334091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612548139
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639\">Issue #2639</a>:</p>\n<blockquote>\n<p>Right now, a 1000ft overview of our instantiation process (ignoring <em>creating</em> import-able functions in the linker, which shared host functions adderesses) looks something like this:</p>\n<ol>\n<li>look up imports in linker's hash table and flatten them to an array</li>\n<li>allocate space for memories/tables/globals/etc</li>\n<li>fill the vmctx with pointers to the imports, etc</li>\n<li>initialize globals by interpreting global intializers from the wasm module</li>\n<li>initialize tables by interpreting element initializer segments from the wasm module</li>\n<li>initialize memory by interpreting data initializer segments from the wasm module</li>\n</ol>\n<p>The instance allocator pool work makes (2) super fast! <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span>️ </p>\n<p>Although they should usually take relatively little time, we can make (4) through (6) even faster by using cranelift to compile an initialization function that doesn't have an interpreter loop iterating over each initializer and checking that it is in bounds and all that, but instead emit code with that interpreter loop unrolled and a bunch of bounds checking that was per-iteration of the interpreter loop de-duplicated into a single check for everything. Then we just call this JIT code during instantiation, rather than initializing these things ourselves!</p>\n<p>Of course the amount of speed up we'll get by doing this is going to be a function of how many global/table element/data segment initializers a module has. Usually it isn't <em>too</em> many. But some modules, particularly those generated by Wizer, might have a good amount of them, and this could potentially save us a few microseconds on instantiation (great to be at the level where we are counting microseconds here <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>). Also, funcref tables can get pretty big and generally every index is initialized with an element.</p>\n<p>We could potentially also JIT code for (3) but this seems slightly more complicated because it is more heterogeneous and also the vmctx fields/layout change more frequently than globals/tables/memory so it may have a larger maintenance burden.</p>\n<p>Finally, we've talked about using virtual memory tricks to make page-aligned and -sized data segments</p>\n<ul>\n<li>lazily initialized (via userfaultfd) and</li>\n<li>copy-on-write (via mapping them with <code>MAP_PRIVATE</code>)</li>\n</ul>\n<p>This JIT-initialization approach should technically be complimentary to these things. Even if (6) effectively goes away from our instantiation times by becoming lazy, (4) and (5) will still need initializing at instantiation time, as will any non-page-aligned and -sized data segments. But it might make the potential speed ups that much smaller, and bump this optimization pretty far down the priority list. Something to consider.</p>\n<p>Aside: it is worth thinking about speeding up (1) as well. If we are repeatedly instantiating the same module with the same imports (eg an instantiation of the same module with the same imports for each http request that a server receives) then it seems like we could do (1) just the one time and then reuse the flattened imports array for every instantiation. Not totally sure what this would look like at the API level. I think it might be possible to implement without wasmtime API changes, but maybe we don't want to force everyone to implement this same optimization by hand? Another thing to mull over.</p>\n<p>cc @tschneidereit @lukewagner @alexcrichton since we talked about this yesterday</p>\n<p>cc @peterhuene because this is related to instantiation performance</p>\n</blockquote>",
        "id": 225334092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612548139
    },
    {
        "content": "<p>fitzgen labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639\">Issue #2639</a>:</p>\n<blockquote>\n<p>Right now, a 1000ft overview of our instantiation process (ignoring <em>creating</em> import-able functions in the linker, which shared host functions adderesses) looks something like this:</p>\n<ol>\n<li>look up imports in linker's hash table and flatten them to an array</li>\n<li>allocate space for memories/tables/globals/etc</li>\n<li>fill the vmctx with pointers to the imports, etc</li>\n<li>initialize globals by interpreting global intializers from the wasm module</li>\n<li>initialize tables by interpreting element initializer segments from the wasm module</li>\n<li>initialize memory by interpreting data initializer segments from the wasm module</li>\n</ol>\n<p>The instance allocator pool work makes (2) super fast! <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span>️ </p>\n<p>Although they should usually take relatively little time, we can make (4) through (6) even faster by using cranelift to compile an initialization function that doesn't have an interpreter loop iterating over each initializer and checking that it is in bounds and all that, but instead emit code with that interpreter loop unrolled and a bunch of bounds checking that was per-iteration of the interpreter loop de-duplicated into a single check for everything. Then we just call this JIT code during instantiation, rather than initializing these things ourselves!</p>\n<p>Of course the amount of speed up we'll get by doing this is going to be a function of how many global/table element/data segment initializers a module has. Usually it isn't <em>too</em> many. But some modules, particularly those generated by Wizer, might have a good amount of them, and this could potentially save us a few microseconds on instantiation (great to be at the level where we are counting microseconds here <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>). Also, funcref tables can get pretty big and generally every index is initialized with an element.</p>\n<p>We could potentially also JIT code for (3) but this seems slightly more complicated because it is more heterogeneous and also the vmctx fields/layout change more frequently than globals/tables/memory so it may have a larger maintenance burden.</p>\n<p>Finally, we've talked about using virtual memory tricks to make page-aligned and -sized data segments</p>\n<ul>\n<li>lazily initialized (via userfaultfd) and</li>\n<li>copy-on-write (via mapping them with <code>MAP_PRIVATE</code>)</li>\n</ul>\n<p>This JIT-initialization approach should technically be complimentary to these things. Even if (6) effectively goes away from our instantiation times by becoming lazy, (4) and (5) will still need initializing at instantiation time, as will any non-page-aligned and -sized data segments. But it might make the potential speed ups that much smaller, and bump this optimization pretty far down the priority list. Something to consider.</p>\n<p>Aside: it is worth thinking about speeding up (1) as well. If we are repeatedly instantiating the same module with the same imports (eg an instantiation of the same module with the same imports for each http request that a server receives) then it seems like we could do (1) just the one time and then reuse the flattened imports array for every instantiation. Not totally sure what this would look like at the API level. I think it might be possible to implement without wasmtime API changes, but maybe we don't want to force everyone to implement this same optimization by hand? Another thing to mull over.</p>\n<p>cc @tschneidereit @lukewagner @alexcrichton since we talked about this yesterday</p>\n<p>cc @peterhuene because this is related to instantiation performance</p>\n</blockquote>",
        "id": 225334093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612548139
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639#issuecomment-774197187\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639\">Issue #2639</a>:</p>\n<blockquote>\n<p>This is a very neat idea. I'll note that Lucet ships page-aligned and sized data segments in the shared object because the <code>userfaultfd</code> memory manager needs it. </p>\n</blockquote>",
        "id": 225335015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612548567
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639#issuecomment-774207677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2639\">Issue #2639</a>:</p>\n<blockquote>\n<p>A useful question might be: how densely or sparsely used are tables of imported functions? In other words, does it make sense to consider a design where we have a bit more indirection, and lazily resolve a real function pointer (something like a PLT/GOT in a traditional linker world)? This is coming from \"the fastest initialization is no initialization at all\"-type thoughts; no idea if the data would actually support it though!</p>\n</blockquote>",
        "id": 225337570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612549694
    }
]