[
    {
        "content": "<p>adambratschikaye opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a> from <code>adambratschikaye:abk/no-branch-nan-canonicalization</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Modify the cranelift pass that performs NaN-canonicalization to avoid branches on x64. The current implementation uses two branches:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"mi\">8</span>: <span class=\"nc\">be</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">f</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7fc00000</span>\n<span class=\"w\">       </span><span class=\"n\">d</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">de</span><span class=\"w\">                   </span><span class=\"n\">vmovd</span><span class=\"w\">   </span><span class=\"n\">xmm3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">esi</span>\n<span class=\"w\">      </span><span class=\"mi\">11</span>: <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\">                      </span><span class=\"n\">ucomiss</span><span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm0</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>: <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">jnp</span><span class=\"w\"> </span><span class=\"mh\">0x1e</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mh\">0x1e</span><span class=\"o\">&gt;</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">a</span>: <span class=\"nc\">f2</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\">                   </span><span class=\"n\">movsd</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm3</span><span class=\"w\">              </span>#<span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"n\">e</span>: <span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">84</span><span class=\"w\"> </span><span class=\"mi\">04</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">je</span><span class=\"w\">  </span><span class=\"mh\">0x28</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wasm</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mh\">0x28</span><span class=\"o\">&gt;</span>\n<span class=\"w\">      </span><span class=\"mi\">24</span>: <span class=\"nc\">f2</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">c3</span><span class=\"w\">                   </span><span class=\"n\">movsd</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm3</span><span class=\"w\">              </span>#<span class=\"w\"> </span><span class=\"n\">xmm0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">xmm3</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">xmm0</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>With these changes, NaN-canonicalization becomes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">       </span><span class=\"mi\">8</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">e8</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"n\">da</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">                </span><span class=\"n\">vcmpunordps</span><span class=\"w\"> </span><span class=\"n\">xmm3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm2</span>\n<span class=\"w\">       </span><span class=\"n\">d</span>: <span class=\"nc\">be</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"n\">c0</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">f</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7fc00000</span>\n<span class=\"w\">      </span><span class=\"mi\">12</span>: <span class=\"nc\">c5</span><span class=\"w\"> </span><span class=\"n\">f9</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"n\">e6</span><span class=\"w\">                   </span><span class=\"n\">vmovd</span><span class=\"w\">   </span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">esi</span>\n<span class=\"w\">      </span><span class=\"mi\">16</span>: <span class=\"nc\">c4</span><span class=\"w\"> </span><span class=\"n\">e3</span><span class=\"w\"> </span><span class=\"mi\">69</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\">             </span><span class=\"n\">vpblendvb</span><span class=\"w\">   </span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xmm3</span>\n</code></pre></div>\n<p>Running both versions against an small image classification inference benchmark <a href=\"https://github.com/adambratschikaye/image-classification-wasmtime-bench\">here</a> resulted in a ~50% improvement:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">image_classification</span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">728.16</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">730.00</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">732.05</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">44.476</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">44.251</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">44.029</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span>\n\n<span class=\"n\">image_classification</span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">593.90</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">595.51</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">597.34</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">51.561</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">51.396</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">51.211</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>As a side note, I didn't notice any sightglass benchmark that was performing mainly float arithmetic to test against. I'd be happy to add this image classification case if there's interest. </p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 431883015,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712562825
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 431883182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712562886
    },
    {
        "content": "<p>adambratschikaye submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1985700006\">PR review</a>.</p>",
        "id": 431884551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712563195
    },
    {
        "content": "<p>adambratschikaye submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1985700006\">PR review</a>.</p>",
        "id": 431884552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712563195
    },
    {
        "content": "<p>adambratschikaye created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1555383279\">PR review comment</a>:</p>\n<blockquote>\n<p>Without any of the other changes, just changing this comparison from <code>NotEqual</code> to <code>Unordered</code> removes one of the two jumps which is a significant improvement. With the other changes I don't think there's a difference between using <code>NotEqual</code> or <code>Unordered</code>, but <code>Unordered</code> seemed more precise.</p>\n</blockquote>",
        "id": 431884553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712563195
    },
    {
        "content": "<p>adambratschikaye created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1555386308\">PR review comment</a>:</p>\n<blockquote>\n<p>The original pattern was never triggered because <code>fcmp</code> will result in either an <code>I32X4</code> or <code>I64X2</code> which always needs to be bitcast back to <code>F32X4</code> or <code>F64X2</code> before it can be passed to <code>bitselect</code>.</p>\n</blockquote>",
        "id": 431884554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712563195
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 431890032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712564386
    },
    {
        "content": "<p>adambratschikaye edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1555386308\">PR review comment</a>.</p>",
        "id": 431892012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712564819
    },
    {
        "content": "<p><strong>adambratschikaye</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a> as ready for review.</p>",
        "id": 431904172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712567217
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 431904176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712567218
    },
    {
        "content": "<p><strong>adambratschikaye</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 431904178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712567219
    },
    {
        "content": "<p>adambratschikaye <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#issuecomment-2042242687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>:</p>\n<blockquote>\n<p>Also is there a way to enable NaN-canonicalization in a <code>clif</code> test to add a test for this?</p>\n</blockquote>",
        "id": 431904462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712567270
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#issuecomment-2042284042\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>:</p>\n<blockquote>\n<p>You should be able to add something along these lines, to test with nan canonicalization enabled:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">run</span><span class=\"p\">,</span><span class=\"n\">compile</span><span class=\"p\">,</span><span class=\"n\">etc</span><span class=\"o\">..</span><span class=\"p\">.}</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_nan_canonicalization</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n</code></pre></div>\n</blockquote>",
        "id": 431911718,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712568545
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1985917943\">PR review</a>.</p>",
        "id": 431913315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712568837
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1555521281\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure this works with the RISC-V backend, our vector support is gated on a feature flag which may not always be available.</p>\n<p>One solution would be to keep the previous code around for RISC-V, but it feels wrong to select on targets at this level.</p>\n</blockquote>",
        "id": 431913320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712568838
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 431988798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712587713
    },
    {
        "content": "<p>adambratschikaye submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1986686259\">PR review</a>.</p>",
        "id": 431989829,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712587920
    },
    {
        "content": "<p>adambratschikaye created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1555980581\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah I see that now. What about choosing based on the targets and features (that is specifically <code>riscv64</code> when <code>has_v=false</code>)? Maybe in the future there will be other target/feature combinations that don't support vectors?</p>\n</blockquote>",
        "id": 431989831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712587920
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1987480743\">PR review</a>.</p>",
        "id": 432075077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712613901
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1556474069\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that is what we need right now. I'm not sure if eventually we should add something to <code>TargetIsa</code>, but It might be worth reviewing later on if this situation ends up happening more often.</p>\n</blockquote>",
        "id": 432075078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712613901
    },
    {
        "content": "<p>adambratschikaye updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 432168501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712652117
    },
    {
        "content": "<p>adambratschikaye submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1988471902\">PR review</a>.</p>",
        "id": 432169231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712652278
    },
    {
        "content": "<p>adambratschikaye created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#discussion_r1557234284\">PR review comment</a>:</p>\n<blockquote>\n<p>Added the fall back to the old version for RiscV <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313/files#diff-c7a66b91ac03843c5aafe984938022ccba235c80c3fad786772964dc7b9da152R286\">here</a>.</p>\n</blockquote>",
        "id": 432169233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712652278
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1988668936\">PR review</a>:</p>\n<blockquote>\n<p>This LGTM! Thanks! I don't know if @abrown wants to review it as well.</p>\n</blockquote>",
        "id": 432191280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712657734
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313#pullrequestreview-1988762450\">PR review</a>.</p>",
        "id": 432203661,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712660872
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8313\">PR #8313</a>.</p>",
        "id": 432210206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1712662459
    }
]