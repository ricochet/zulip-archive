[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>Given this input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param i64)))\n  (func (;0;) (type 0) (param i64)\n    (local f64 f64 i32)\n    i32.const 0\n    if  ;; label = @1\n      unreachable\n    end\n    i32.const 0\n    i32.const -1\n    i32.rem_u\n    f64.convert_i32_s\n    f64.neg\n    f64.neg\n    drop\n  )\n)\n</code></pre></div>\n<p>this currently panics in codegen with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">first_mov_emitted</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">221</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cc @akirilov-arm </p>\n</blockquote>",
        "id": 290558608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658519569
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>Given this input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param i64)))\n  (func (;0;) (type 0) (param i64)\n    (local f64 f64 i32)\n    i32.const 0\n    if  ;; label = @1\n      unreachable\n    end\n    i32.const 0\n    i32.const -1\n    i32.rem_u\n    f64.convert_i32_s\n    f64.neg\n    f64.neg\n    drop\n  )\n)\n</code></pre></div>\n<p>this currently panics in codegen with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">first_mov_emitted</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">221</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cc @akirilov-arm </p>\n</blockquote>",
        "id": 290558609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658519569
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513#issuecomment-1192891245\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>Shrunken slightly:</p>\n<p><div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func (param i32) (result i32)\n    local.get 0\n    i32.const -1\n    i32.rem_u\n  )\n)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 290558883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658519723
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513#issuecomment-1192975385\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>This patch works locally for me with the above (and passes tests; to pass some tests the \"match u32::MAX or u64::MAX for bits == 32\" logic was necessary):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">fa4556f03</span><span class=\"o\">..</span><span class=\"n\">bd1c50fd9</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">157</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">157</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">size</span>: <span class=\"nc\">OperandSize</span>::<span class=\"n\">Size64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"p\">.</span><span class=\"n\">to_reg</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">u64</span>::<span class=\"n\">MAX</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">MInst</span>::<span class=\"n\">MovWide</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">op</span>: <span class=\"nc\">MoveWideOp</span>::<span class=\"n\">MovN</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                 </span><span class=\"n\">rd</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>@akirilov-arm I'm not sure if we fully grok the invariants here though (especially re: extensions), so could you check the above? The code was introduced as part of the recent CVE fix I believe.</p>\n</blockquote>",
        "id": 290573908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658528297
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513#issuecomment-1193961589\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>@cfallin I believe that you have pinpointed the problematic spot precisely, but I think that there is a further improvement to be made (actually a simplification to make it easier to reason about the code), so I am working on a fix.</p>\n</blockquote>",
        "id": 290749919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658750610
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513#issuecomment-1193961589\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>@cfallin I believe that you have pinpointed the problematic spot precisely, but I think that there is a further improvement to be made (actually a simplification to make it easier to reason about the code), so I am working on a fix.</p>\n<p><strong>P.S.</strong> <code>srem</code> and <code>urem</code> tests are also severely lacking.</p>\n</blockquote>",
        "id": 290805701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658776481
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>Given this input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param i64)))\n  (func (;0;) (type 0) (param i64)\n    (local f64 f64 i32)\n    i32.const 0\n    if  ;; label = @1\n      unreachable\n    end\n    i32.const 0\n    i32.const -1\n    i32.rem_u\n    f64.convert_i32_s\n    f64.neg\n    f64.neg\n    drop\n  )\n)\n</code></pre></div>\n<p>this currently panics in codegen with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">first_mov_emitted</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">221</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cc @akirilov-arm </p>\n</blockquote>",
        "id": 290806158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658776744
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>Given this input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param i64)))\n  (func (;0;) (type 0) (param i64)\n    (local f64 f64 i32)\n    i32.const 0\n    if  ;; label = @1\n      unreachable\n    end\n    i32.const 0\n    i32.const -1\n    i32.rem_u\n    f64.convert_i32_s\n    f64.neg\n    f64.neg\n    drop\n  )\n)\n</code></pre></div>\n<p>this currently panics in codegen with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">first_mov_emitted</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">221</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cc @akirilov-arm </p>\n</blockquote>",
        "id": 290806159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658776744
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4513\">issue #4513</a>:</p>\n<blockquote>\n<p>Given this input module:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (type (;0;) (func (param i64)))\n  (func (;0;) (type 0) (param i64)\n    (local f64 f64 i32)\n    i32.const 0\n    if  ;; label = @1\n      unreachable\n    end\n    i32.const 0\n    i32.const -1\n    i32.rem_u\n    f64.convert_i32_s\n    f64.neg\n    f64.neg\n    drop\n  )\n)\n</code></pre></div>\n<p>this currently panics in codegen with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">q</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'&lt;</span><span class=\"n\">unnamed</span><span class=\"o\">&gt;'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">first_mov_emitted</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">lower</span><span class=\"o\">/</span><span class=\"n\">isle</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">221</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n</code></pre></div>\n<p>cc @akirilov-arm </p>\n</blockquote>",
        "id": 290920226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658853308
    }
]