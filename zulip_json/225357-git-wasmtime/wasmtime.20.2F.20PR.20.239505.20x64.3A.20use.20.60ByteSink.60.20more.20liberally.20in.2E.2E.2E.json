[
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>.</p>",
        "id": 478593933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729722767
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>.</p>",
        "id": 478593934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729722767
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a> from <code>abrown:more-byte-sink</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>In looking at adding auto-generated assembler code to Cranelift, I've noticed that we pass <code>MachBuffer</code> down when it is not always necessary. The <code>ByteSink</code> trait (which <code>MachBuffer</code> implements) is a simplified view to <code>put*</code> bytes into the buffer and it is a bit simpler to use when testing since it is also implemented by <code>Vec&lt;u8&gt;</code>. This change propagates the trait to the <code>rex</code> module.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 478593935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729722767
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#issuecomment-2433605553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>:</p>\n<blockquote>\n<p>Similar to #9504, this is just an attempt at trying to simplify what is needed to actually assemble an instruction. We still need <code>MachBuffer</code> for instructions that touch memory; thinking about it, it may just be unavoidable.</p>\n</blockquote>",
        "id": 478594160,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729722906
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#pullrequestreview-2390786284\">PR review</a>.</p>",
        "id": 478594283,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729722968
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#discussion_r1813842957\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh, actually let me remove this: this is for the new assembler but isn't used yet.</p>\n</blockquote>",
        "id": 478594284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729722968
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>.</p>",
        "id": 478594358,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723024
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#pullrequestreview-2390788966\">PR review</a>.</p>",
        "id": 478594541,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723128
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#discussion_r1813849607\">PR review comment</a>:</p>\n<blockquote>\n<p>...and a little bit of code movement.</p>\n</blockquote>",
        "id": 478594543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723128
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#pullrequestreview-2390791740\">PR review</a>:</p>\n<blockquote>\n<p>This looks fine, thanks!</p>\n<p>Re: handling <code>Amode</code>s and the helper that briefly appeared here: I think we'll need <code>MachBuffer</code> unavoidably once we have amodes that can refer to labels; that's the semantic thing that MachBuffer gives us above an arbitrary byte sequence. But totally fine to trim the close coupling at lower levels.</p>\n<p>I'd love to talk more about the assembler design w.r.t. dependencies -- intuitively I would have thought that <code>MachBuffer</code> would be an integral part of it, i.e. it's the assembler's way of providing its output (given that assemblers need label references, and to flow through other metadata like trap info and relocs from insts to the code blob), but maybe there's another use-case or need for generalization I'm missing.</p>\n</blockquote>",
        "id": 478594831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723295
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>.</p>",
        "id": 478594843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723302
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#issuecomment-2433668266\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>:</p>\n<blockquote>\n<blockquote>\n<p>intuitively I would have thought that MachBuffer would be an integral part of it</p>\n</blockquote>\n<p>I mean, that's how it has to be today. I'm kind of wondering if it should, though: it's nice to be able to \"just emit\" an instruction into a byte buffer during testing and that's what I've been thinking about. The setup in <code>emit_tests.rs</code> just to be able to emit an instruction is a lot, e.g. If we're proptest-ing or fuzzing we also want the \"emit a single instruction\" path to be relatively quick.</p>\n<p>On the other hand, sometimes its unavoidable: I've notice that we register traps and labels using a <code>MachBuffer</code> in the encoding logic and that simply cannot be done with <code>ByteSink</code>. Maybe <code>ByteSink</code> can gain extra trait functions that do nothing for the <code>Vec&lt;u8&gt;</code> case or something like that...</p>\n</blockquote>",
        "id": 478595491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723712
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#issuecomment-2433668266\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>:</p>\n<blockquote>\n<blockquote>\n<p>intuitively I would have thought that MachBuffer would be an integral part of it</p>\n</blockquote>\n<p>I mean, that's how it has to be today. I'm kind of wondering if it should, though: it's nice to be able to \"just emit\" an instruction into a byte buffer during testing and that's what I've been thinking about. The setup in <code>emit_tests.rs</code> just to be able to emit an instruction is a lot, e.g. If we're proptest-ing or fuzzing we also want the \"emit a single instruction\" path to be relatively quick.</p>\n<p>On the other hand, sometimes it _is_ unavoidable: I've notice that we register traps and labels using a <code>MachBuffer</code> in the encoding logic and that simply cannot be done with <code>ByteSink</code>. Maybe <code>ByteSink</code> can gain extra trait functions that do nothing for the <code>Vec&lt;u8&gt;</code> case or something like that...</p>\n</blockquote>",
        "id": 478595544,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729723751
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#issuecomment-2433698633\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe ByteSink can gain extra trait functions that do nothing for the Vec&lt;u8&gt; case or something like that...</p>\n</blockquote>\n<p>Ah! Yeah, that's an interesting idea: lift the whole interface of MachBuffer into a trait, and provide an implementation of that trait for a <code>Vec&lt;u8&gt;</code>.</p>\n<p>There are interesting semantic implementations of this though when label references are involved: what <em>should</em> the assembled bytes from a <code>mov rax, [rip+label]</code> instruction be? Zeroes in the RIP offset (i.e. labels not resolved)? One aspect of the <code>MachBuffer</code> that is nice is that its types essentially force one to be aware one is referencing addresses in the buffer: you have to ask for a label to refer to it, the various amodes require a label, and if you don't bind it, (IIRC?) it should panic when finalizing.</p>\n<p>Maybe another way of reading this friction is that we need some convenience APIs? It should be possible to write an <code>assemble(inst: Inst) -&gt; Vec&lt;u8&gt;</code> that is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">assemble</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Inst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MachBuffer</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"w\">  </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">VCodeConstants</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ControlPlane</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">()).</span><span class=\"n\">apply_base_srcloc</span><span class=\"p\">(</span><span class=\"n\">SourceLoc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)).</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(whew, that is a bit of a mouthful, I see why you want it!)</p>\n</blockquote>",
        "id": 478596553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729724423
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505#issuecomment-2433698633\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe ByteSink can gain extra trait functions that do nothing for the Vec&lt;u8&gt; case or something like that...</p>\n</blockquote>\n<p>Ah! Yeah, that's an interesting idea: lift the whole interface of MachBuffer into a trait, and provide an implementation of that trait for a <code>Vec&lt;u8&gt;</code>.</p>\n<p>There are interesting semantic implementations of this though when label references are involved: what <em>should</em> the assembled bytes from a <code>mov rax, [rip+label]</code> instruction be? Zeroes in the RIP offset (i.e. labels not resolved)? One aspect of the <code>MachBuffer</code> that is nice is that its types essentially force one to be aware one is referencing addresses in the buffer: you have to ask for a label to refer to it, the various amodes require a label, and if you don't bind it, (IIRC?) it should panic when finalizing.</p>\n<p>Maybe another way of reading this friction is that we need some convenience APIs? It should be possible to write an <code>assemble(inst: Inst) -&gt; Vec&lt;u8&gt;</code> that is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">assemble</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Inst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MachBuffer</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.);</span>\n<span class=\"w\">  </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">VCodeConstants</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ControlPlane</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">apply_base_srcloc</span><span class=\"p\">(</span><span class=\"n\">SourceLoc</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"c1\">// SmallVec into Vec</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(whew, that is a bit of a mouthful, I see why you want it!)</p>\n</blockquote>",
        "id": 478596665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729724470
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9505\">PR #9505</a>.</p>",
        "id": 478596957,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1729724662
    }
]