[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>This PR changes our run tests to run via <code>cranelift-jit</code>. Its based on top of #4450 so its probably not worth doing any serious review until that is merged.</p>\n<p>Using <code>cranelift-jit</code> in run tests allows us to preform relocations and<br>\nlibcalls. This is important since some instruction lowerings fallback<br>\nto libcall's when an extension is missing, or when it's too complicated<br>\nto implement manually.</p>\n<p>This is also a first step to being able to test <code>call</code>'s between functions<br>\nin the runtest suite. It should also make it easier to eventually test<br>\nTLS relocations, symbol resolution and ABI's.</p>\n<p>Another benefit of this is that we also get to test the JIT more, since<br>\nit now runs the runtests, and gets some fuzzing via <code>fuzzgen</code> (which<br>\nuses the <code>SingleFunctionCompiler</code>).</p>\n<p>This change causes regressions in terms of runtime for the filetests.<br>\nI haven't done any serious benchmarking but what I've been seeing is<br>\nthat it now takes about ~3 seconds to run the testsuite while it<br>\npreviously took around 2 seconds.</p>\n</blockquote>",
        "id": 289734558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657895451
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1040383384\">PR review</a>.</p>",
        "id": 289734652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657895493
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r922225272\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm slightly concerned about this change.</p>\n<p><code>msvcrt</code> does not define <code>ceilf</code>/<code>floorf</code>/<code>nearbyintf</code>/<code>truncf</code>, which are some of the LibCall's that we define. I cannot find the dll that defines those functions pre VS2015.</p>\n<p>After VS2015 Microsoft created the Universal C Runtime which defines <code>ucrtbase.dll</code> that does contain all of those functions. However that only became standard with Windows 10 in 2015. Previous versions of Windows can have that dll, but only if they install Visual Studio 2015.</p>\n<p>We cannot search <code>msvcrt</code> and fallback to <code>ucrtbase</code> since mixing the two runtimes will cause weird behaviour, probably at the worst time possible.</p>\n<p>Does anyone know where we can find those functions? Or alternativley what are the minimum requirements that we have for cranelift and can we upgrade to UCRT?</p>\n</blockquote>",
        "id": 289734653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657895493
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r922225272\">PR review comment</a>.</p>",
        "id": 289735207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657895713
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r922225272\">PR review comment</a>.</p>",
        "id": 289735232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657895723
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 289735945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657896037
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 289815867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657958961
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 289816278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657959571
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> as ready for review.</p>",
        "id": 289821910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657968308
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r923688617\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess the reason that we can't have e.g. a <code>PhantomData</code> carrying a lifetime <code>'a</code> representing the trampoline here is that the lifetime is that of <code>module</code> above (i.e. it's be a self-referential struct), is that right? If so let's add a comment here noting that the lifetime corresponds to <code>module</code> and that we don't ever leak the pointers.</p>\n</blockquote>",
        "id": 290004381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658168600
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1042298988\">PR review</a>.</p>",
        "id": 290004382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658168600
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1042298988\">PR review</a>.</p>",
        "id": 290004383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658168600
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r923687384\">PR review comment</a>:</p>\n<blockquote>\n<p>Hmm, I don't have too many opinions on what is reasonable as a minimum version requirement. Keeping to a more conservative set of requirements is always good, everything else being equal; but here if that means we'd have to polyfill (and those polyfills would be tested only on older platforms, i.e. rarely or not at all) then I'm not sure what value that carries.</p>\n<p>@peterhuene do you have any thoughts on this re: Windows runtime versions?</p>\n</blockquote>",
        "id": 290004384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658168600
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 290018110,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658175793
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 290018398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658175948
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1042500336\">PR review</a>.</p>",
        "id": 290018461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658175968
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r923826626\">PR review comment</a>:</p>\n<blockquote>\n<p>We actually don't need these pointers. I switched the implementation so that we hold <code>FuncId</code>'s from the JITModule, and query the address when calling the function.</p>\n</blockquote>",
        "id": 290018462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658175968
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 290018539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658176015
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  Hey,</p>\n<p>This PR changes our run tests to run via <code>cranelift-jit</code>. Its based on top of #4450 so its probably not worth doing any serious review until that is merged.</p>\n<p>Using <code>cranelift-jit</code> in run tests allows us to preform relocations and<br>\nlibcalls. This is important since some instruction lowerings fallback<br>\nto libcall's when an extension is missing, or when it's too complicated<br>\nto implement manually.</p>\n<p>This is also a first step to being able to test <code>call</code>'s between functions<br>\nin the runtest suite. It should also make it easier to eventually test<br>\nTLS relocations, symbol resolution and ABI's.</p>\n<p>Another benefit of this is that we also get to test the JIT more, since<br>\nit now runs the runtests, and gets some fuzzing via <code>fuzzgen</code> (which<br>\nuses the <code>SingleFunctionCompiler</code>).</p>\n<p>This change causes regressions in terms of runtime for the filetests.<br>\nI haven't done any serious benchmarking but what I've been seeing is<br>\nthat it now takes about ~3 seconds to run the testsuite while it<br>\npreviously took around 2 seconds.</p>\n<p>Edit: <br>\nThis also closes #3030 since we can now do relocations in runtests</p>\n</blockquote>",
        "id": 291249101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659040820
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 291249652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659041083
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1054758602\">PR review</a>.</p>",
        "id": 291252975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659042904
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r932675983\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm told Windows 8.1 reaches end of life in January, which seems to me like a good enough reason for Cranelift to require Windows 10. But others may disagree.</p>\n<p>Since we're looking at using the libm crate for #4517, I thought I'd check if we could get these functions from there, instead of worrying about Windows C runtime versions. It does have <code>ceilf</code>, <code>floorf</code>, and <code>truncf</code>, but unfortunately not <code>nearbyintf</code>, so I'm not sure if that helps with this question.</p>\n</blockquote>",
        "id": 291252976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659042904
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a> from <code>testrunner-jit</code> to <code>main</code>.</p>",
        "id": 292368183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659943280
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r939938006\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin I would like to move forward with this PR since it's blocking some stuff on the fuzzer (getting function calls working).</p>\n<p>Would @jameysharp 's reasoning that pretty soon all supported windows versions are going to have <code>ucrt</code> be sufficient? An alternative could be to keep using <code>msvcrt</code>, but we would need to disable some ops on the runtest suite, which is also not ideal.</p>\n<p>We can also go with polyfill's as @jameysharp mentioned, I don't like this approach since we would probably keep needing to patch holes in msvcrt. In <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/pull/1254\">https://github.com/bjorn3/rustc_codegen_cranelift/pull/1254</a> we also found that <code>fabsf</code> is missing from msvcrt, so that's going to be another one that we need. With the bonus that we know that one is <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4517#issuecomment-1195138197\">definitely broken in libm</a>.</p>\n</blockquote>",
        "id": 292370783,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659945381
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1064755550\">PR review</a>.</p>",
        "id": 292370784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659945381
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r939938006\">PR review comment</a>.</p>",
        "id": 292370794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659945400
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r939938006\">PR review comment</a>.</p>",
        "id": 292373494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659947162
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r939938006\">PR review comment</a>.</p>",
        "id": 292373627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659947256
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r940542547\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I think that's fine; Win10 as a minimum requirement here is probably an acceptable compromise, given the context.</p>\n</blockquote>",
        "id": 292479087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659983570
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1065615487\">PR review</a>.</p>",
        "id": 292479088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659983570
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1067249045\">PR review</a>.</p>",
        "id": 292641723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941707625\">PR review comment</a>:</p>\n<blockquote>\n<p>Changing <code>SingleFunctionCompiler::compile</code> from taking <code>&amp;mut self</code> to just <code>self</code> feels unfortunate, since it forces callers to build a new <code>TargetIsa</code> for every function they compile. What would you think of changing <code>JITBuilder</code> to take a shared reference instead? Either <code>&amp;dyn TargetIsa</code> or <code>Rc&lt;dyn TargetIsa&gt;</code>, whichever is easier. In the latter case, <code>SingleFunctionCompiler</code> would also take an <code>Rc</code> instead of a <code>Box</code>.</p>\n</blockquote>",
        "id": 292641724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1067249045\">PR review</a>.</p>",
        "id": 292641725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941710574\">PR review comment</a>:</p>\n<blockquote>\n<p>What is this change for?</p>\n</blockquote>",
        "id": 292641727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941713244\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd prefer not to move this code into the loop, if my earlier suggestion on shared references to the <code>TargetIsa</code> works out.</p>\n</blockquote>",
        "id": 292641728,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941713324\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd prefer not to move this code into the loop, if my earlier suggestion on shared references to the <code>TargetIsa</code> works out.</p>\n</blockquote>",
        "id": 292641729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941715692\">PR review comment</a>:</p>\n<blockquote>\n<p>If it works out to keep the <code>SingleFunctionCompiler</code> reusable, do you think it'd be worth keeping the cache of trampolines around too?</p>\n</blockquote>",
        "id": 292641730,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660072785
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1067352330\">PR review</a>.</p>",
        "id": 292653535,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077451
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941780430\">PR review comment</a>:</p>\n<blockquote>\n<p>The name <code>user(0, 0)</code> was the trampoline IIRC and the JIT was complaining about it. I'm not too sure, but I can go check.</p>\n</blockquote>",
        "id": 292653537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077452
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#discussion_r941783322\">PR review comment</a>:</p>\n<blockquote>\n<p>I remember (sorry, this was a while ago) trying to change to <code>&amp;dyn TargetIsa</code>, but it brought a bunch of changes due to lifetimes, and I gave up on that path.</p>\n<p>I didn't  try <code>Rc&lt;&gt;</code> but see the comment down below.</p>\n</blockquote>",
        "id": 292654053,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077652
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453#pullrequestreview-1067356219\">PR review</a>.</p>",
        "id": 292654054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660077652
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4453\">PR #4453</a>.</p>",
        "id": 292664051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660082067
    }
]