[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2102\">PR #2102</a> from <code>refactor-import-resolution</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit removes all import resolution handling from the<br>\n<code>wasmtime-jit</code> crate, instead moving the logic to the <code>wasmtime</code> crate.<br>\nPreviously <code>wasmtime-jit</code> had a generic <code>Resolver</code> trait and would do<br>\nall the import type matching itself, but with the upcoming<br>\nmodule-linking implementation this is going to get much trickier.</p>\n<p>The goal of this commit is to centralize all meaty \"preparation\" logic<br>\nfor instantiation into one location, probably the <code>wasmtime</code> crate<br>\nitself. Instantiation will soon involve recursive instantiation and<br>\nmanagement of alias definitions as well. Having everything in one<br>\nlocation, especially with access to <code>Store</code> so we can persist<br>\ninstances for safety, will be quite convenient.</p>\n<p>Additionally the <code>Resolver</code> trait isn't really necessary any more since<br>\nimports are, at the lowest level, provided as a list rather than a map<br>\nof some kind. More generic resolution functionality is provided via<br>\n<code>Linker</code> or user layers on top of <code>Instance::new</code> itself. This makes<br>\nmatching up provided items to expected imports much easier as well.</p>\n<p>Overall this is largely just moving code around, but most of the code<br>\nin the previous <code>resolve_imports</code> phase can be deleted since a lot of it<br>\nis handled by surrounding pieces of <code>wasmtime</code> as well.</p>\n</blockquote>",
        "id": 206082309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596664002
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2102#pullrequestreview-463594478\">PR Review</a>.</p>",
        "id": 206306097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596832486
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2102#pullrequestreview-463594478\">PR Review</a>.</p>",
        "id": 206306098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596832486
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2102#discussion_r467255913\">PR Review Comment</a>:</p>\n<blockquote>\n<p>A subtle consequence of switching from <code>BoxedSlice</code>/<code>PrimaryMap</code>/etc. to plain <code>&amp;[]</code> is that <code>BoxedSlice</code>/<code>PrimaryMap</code> enforce the invariant that they only be indexed with <code>FuncIndex</code> indices. It looks like we don't directly index into the slices here, so that seems ok, but could you add comments here mentioning what the index space for these slices is?</p>\n</blockquote>",
        "id": 206306099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596832486
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2102\">PR #2102</a> from <code>refactor-import-resolution</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit removes all import resolution handling from the<br>\n<code>wasmtime-jit</code> crate, instead moving the logic to the <code>wasmtime</code> crate.<br>\nPreviously <code>wasmtime-jit</code> had a generic <code>Resolver</code> trait and would do<br>\nall the import type matching itself, but with the upcoming<br>\nmodule-linking implementation this is going to get much trickier.</p>\n<p>The goal of this commit is to centralize all meaty \"preparation\" logic<br>\nfor instantiation into one location, probably the <code>wasmtime</code> crate<br>\nitself. Instantiation will soon involve recursive instantiation and<br>\nmanagement of alias definitions as well. Having everything in one<br>\nlocation, especially with access to <code>Store</code> so we can persist<br>\ninstances for safety, will be quite convenient.</p>\n<p>Additionally the <code>Resolver</code> trait isn't really necessary any more since<br>\nimports are, at the lowest level, provided as a list rather than a map<br>\nof some kind. More generic resolution functionality is provided via<br>\n<code>Linker</code> or user layers on top of <code>Instance::new</code> itself. This makes<br>\nmatching up provided items to expected imports much easier as well.</p>\n<p>Overall this is largely just moving code around, but most of the code<br>\nin the previous <code>resolve_imports</code> phase can be deleted since a lot of it<br>\nis handled by surrounding pieces of <code>wasmtime</code> as well.</p>\n</blockquote>",
        "id": 206306782,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596832872
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2102\">PR #2102</a>.</p>",
        "id": 206312474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1596836282
    }
]