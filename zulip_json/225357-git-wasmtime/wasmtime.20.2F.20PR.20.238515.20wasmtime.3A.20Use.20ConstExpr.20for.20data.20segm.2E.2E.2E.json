[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a> from <code>jameysharp:data-const-expr</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This shouldn't change any behavior currently, but prepares us for supporting extended constant expressions.</p>\n<p>I want to think about this a bit more before merging it but here's a draft for @fitzgen or anyone else who wants to take a look.</p>\n</blockquote>",
        "id": 436468308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714552491
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>:</p>\n<blockquote>\n<p>This shouldn't change any behavior currently, but prepares us for supporting extended constant expressions.</p>\n<p>I want to think about this a bit more before merging it but here's a draft for @fitzgen or anyone else who wants to take a look. This is basically the same change as #8514 but for memories instead of tables, and the existing code was more complicated for this case.</p>\n</blockquote>",
        "id": 436468481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714552595
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436551627,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714588140
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436552768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714588623
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#pullrequestreview-2034228703\">PR review</a>.</p>",
        "id": 436555408,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714589790
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#pullrequestreview-2034228703\">PR review</a>.</p>",
        "id": 436555409,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714589790
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#discussion_r1586653525\">PR review comment</a>:</p>\n<blockquote>\n<p>nitpicky suggestion, take it or leave it: I'd personally rename this <code>InitMemoryAtRunTime</code> and the other impl as <code>InitMemoryAtCompileTime</code>. I think it is a little more clear but maybe it is just me.</p>\n</blockquote>",
        "id": 436555412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714589790
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#discussion_r1586648429\">PR review comment</a>:</p>\n<blockquote>\n<p>It might be better to turn <code>ConstEvalContext</code> into a trait -- I initially did that but then every use site was the same so I made it concrete. But if it were a trait, then we could use a <code>Result</code> for getting globals and funcrefs and return an <code>Err</code> when they aren't available at compile time. This would allow both reusing <code>eval</code> here so you don't have to do this matching (nor in the other PR, iirc) and also support const expression offsets like <code>(i32.add (i32.const 3) (i32.const 5))</code> for compile-time heap image computation.</p>\n</blockquote>",
        "id": 436555414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714589790
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#pullrequestreview-2034436578\">PR review</a>.</p>",
        "id": 436570712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714596690
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#discussion_r1586811832\">PR review comment</a>:</p>\n<blockquote>\n<p>I wasn't entirely happy with the names I picked and considered doing something like you suggest. So it's not hard to convince me on this one!</p>\n</blockquote>",
        "id": 436570713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714596690
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#pullrequestreview-2038954030\">PR review</a>.</p>",
        "id": 436954307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714768127
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#discussion_r1589697801\">PR review comment</a>:</p>\n<blockquote>\n<p>It turns out it's easy to turn <code>ConstEvalContext</code> into a trait, but it's not useful without bigger changes that I haven't been able to figure out yet.</p>\n<p><code>ConstExprEvaluator</code> can only be used within the wasmtime crate, because it relies on <code>ValRaw</code>. Everything that does const evaluation in that crate already has access to an <code>Instance</code>. All the places that need const evaluation before instantiation are in wasmtime-environ or wasmtime-types.</p>\n<p>I tried factoring out a type-specific, integer-only const-evaluator that can live in wasmtime-types alongside <code>ConstExpr</code> and <code>ConstOp</code>. But the general-purpose const-evaluator is still necessary for initializing globals and I'm not real happy with duplicating this functionality.</p>\n<p>Maybe we need a trait in wasmtime-types that <code>Val</code> or <code>ValRaw</code> can implement?</p>\n</blockquote>",
        "id": 436954309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714768127
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436963040,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714772477
    },
    {
        "content": "<p>jameysharp updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436963418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714772684
    },
    {
        "content": "<p><strong>jameysharp</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a> as ready for review.</p>",
        "id": 436963430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714772694
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436963432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714772695
    },
    {
        "content": "<p><strong>jameysharp</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436963433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714772695
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#issuecomment-2093807397\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>:</p>\n<blockquote>\n<p>I've decided it's more complicated than I want to tackle in this PR to make const-eval available at compile time, so I hope to come back to that later. I've renamed types as @fitzgen suggested (though I decided I liked <code>AtInstantiation</code> better than <code>AtRunTime</code>).</p>\n<p>And I've spent a couple days thinking about this and decided I don't have particularly better ideas for anything in here, so I've marked it ready for review now.</p>\n</blockquote>",
        "id": 436963995,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714772985
    },
    {
        "content": "<p>jameysharp edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>:</p>\n<blockquote>\n<p>This shouldn't change any behavior currently, but prepares us for supporting extended constant expressions.</p>\n<p>~I want to think about this a bit more before merging it but here's a draft for @fitzgen or anyone else who wants to take a look.~ This is ready for review. This is basically the same change as #8514 but for memories instead of tables, and the existing code was more complicated for this case.</p>\n</blockquote>",
        "id": 436969770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714776192
    },
    {
        "content": "<p><strong>elliottt</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 436971750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714777374
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#pullrequestreview-2039438866\">PR review</a>.</p>",
        "id": 437031218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714838210
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#discussion_r1590010034\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe we need a trait in wasmtime-types that <code>Val</code> or <code>ValRaw</code> can implement?</p>\n</blockquote>\n<p>Yeah I think we'll have to do something roughly like this.</p>\n</blockquote>",
        "id": 437031219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714838210
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515#pullrequestreview-2039447180\">PR review</a>.</p>",
        "id": 437031510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714838478
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8515\">PR #8515</a>.</p>",
        "id": 437032899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714839843
    }
]