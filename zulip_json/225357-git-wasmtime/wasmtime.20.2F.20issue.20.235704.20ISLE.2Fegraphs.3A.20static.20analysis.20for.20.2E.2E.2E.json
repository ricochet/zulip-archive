[
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>It's not obvious to me when to use <code>subsume</code> in mid-end optimization rules. At the least we should document what principles a rule author should follow to decide whether to use this feature or not. But I think there's a chance that these principles will turn out to be mechanizable, or at least some conservative approximation of them. Ideally we'd be able to check this in the ISLE compiler like we do with overlap checks, but a separate verifier that we can run in CI would be okay too.</p>\n<h4>Benefit</h4>\n<p>The <code>subsume</code> operation is an important compile-time optimization in our egraph framework, because it allows us to prune egraph nodes that we're confident aren't any better than the subsumed expression. That saves memory as well as reducing the runtime of later pattern-matches and of elaboration.</p>\n<p>However, if we overuse <code>subsume</code> we can miss optimization opportunities. If we can prove that subsume is only used in cases which are at least as good as all alternatives, by some measure, then we can be confident that we're getting the best optimization results we can from our rule set.</p>\n<h4>Implementation</h4>\n<p>One idea is to check any pair of rules which overlap, where at least one uses <code>subsume</code>.</p>\n<ul>\n<li>If we can prove that both rules produce the same result on all inputs where the two rules both match, then subsume is safe because it doesn't matter which rule we pick. This is easiest for rules which reduce to one of their input bindings, or use an identical tree of constructors; we can check that both rules reduce to the same binding site.</li>\n<li>If only one of the pair uses <code>subsume</code>, and we can prove that its result is never worse than the other rule when both rules match, then subsume is a good choice. This requires picking a cost model.</li>\n</ul>\n<p>Proving equivalence in general might require SMT solving, for rules whose left-hand sides use constructors like <code>u64_sub</code>. But maybe a conservative approximation will allow enough rules that we can express what we need to without requiring full equivalence proofs.</p>\n<h4>Alternatives</h4>\n<p>At minimum, we should document some guidance for rule authors.</p>\n</blockquote>",
        "id": 325723781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675458101
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704#issuecomment-1416604251\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<p>Another alternative that comes to mind is to remove <code>subsume</code> entirely. The more I look at the existing rules, I think <code>subsume</code> is appropriate if, and only if, a rule evaluates to a constant. That's a property we could check dynamically in the egraph code without needing any annotation in ISLE rules.</p>\n<p>Treating constants specially might be a good idea for other reasons too. We might get a compile-time performance boost by keeping a separate map from <code>Value</code> to constant. Any rules which need to match on a constant value could look it up in O(1) time from the map, instead of needing to iterate through the entire e-class to find out whether there are any <code>iconst</code> instructions in it.</p>\n<p>I guess the other case where <code>subsume</code> might be reasonable is when the rule rewrites to an existing instruction, rather than constructing a new one. That's also a property we can identify dynamically instead of annotating it. It's not clear to me that it's always a good idea though.</p>\n</blockquote>",
        "id": 325756447,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675476417
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704#issuecomment-1416643549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<p>I think there could be some simple rules here, indeed.</p>\n<p>I want to inject a little caution around simplicity, in the sense that if we end up having to reason about a rule with <code>subsume</code> interacting with other rules, or proving any results from that, we're maybe on the wrong path. (I can't quite articulate <em>why</em>, but that gives me a deep sense of unease and makes me want to pull the complexity handbrake. It's too much effort for too little payoff, and too much complexity to maintain and carry forward. Overlap is a fundamental property and one that matters for correctness, while subsumption is an efficiency thing, and islec maybe shouldn't be in the business of trying to understand how rule outputs interact with other rule inputs or what nodes' costs are, at least not yet.)</p>\n<p>I think your two cases are onto something though -- the \"resolves to constant\" and \"resolves to sub-part of original expression\" are the two cases where I've used <code>subsume</code>, and I think those are probably reasonable to stick to for now. We could maybe build a separate pass, as you say, that recognizes legal inputs to subsume. Possibly via annotations with custom tags: <code>subsume</code> requires <code>subsume_valid</code> on its input, <code>iconst</code> produces a value with <code>subsume_valid</code>, and all variable captures from the LHS are automatically tagged <code>subsume_valid</code>. (Insert bikeshedding here about how to annotate that.) Or we annotate both <code>subsume</code> and <code>iconst</code> as \"lang items\" that islec's pass can reason about directly.</p>\n<p>As long as this remains a predicate that can reason about an RHS expression subtree within one rule, without any context from other rules, I'm happy!</p>\n</blockquote>",
        "id": 325760616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675479873
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704#issuecomment-1419436320\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<p>Yeah, the problem that motivated me to open this issue is that I can't reason about the use of <code>subsume</code> today. It's a claim that no other rule would produce a result that is \"better\" than this one. That is fundamentally an interaction between all rules. So I think we're already in the situation you're worried about.</p>\n<p>It's probably okay for constants: since Cranelift doesn't have undefined values, if some valid simplification of an expression yields a constant, then all ways of evaluating that expression must yield the same constant.</p>\n<p>It isn't actually obvious to me that it's okay for \"resolves to sub-part of original expression\". For some rule that simplifies to a sub-part, I think there could be another rule which is identical except for also matching deeper into the sub-part, and the latter rule could produce a \"better\" result because it's examining more of the input.</p>\n</blockquote>",
        "id": 326194609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675703636
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704#issuecomment-1430339197\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<p>We discussed this yesterday. The only situation where we're confident that <code>subsume</code> is sensible is the \"resolves to constant\" case. For that specific case, we don't need to annotate any rules; we can dynamically check the values that <code>simplify</code> returns to see if any of them are constants, and trigger the current subsume behavior accordingly.</p>\n</blockquote>",
        "id": 327868403,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676406815
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704#issuecomment-1485752695\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<p>We're going to remove <code>subsume</code> instead: #6105</p>\n</blockquote>",
        "id": 344952981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945661
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5704\">issue #5704</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>It's not obvious to me when to use <code>subsume</code> in mid-end optimization rules. At the least we should document what principles a rule author should follow to decide whether to use this feature or not. But I think there's a chance that these principles will turn out to be mechanizable, or at least some conservative approximation of them. Ideally we'd be able to check this in the ISLE compiler like we do with overlap checks, but a separate verifier that we can run in CI would be okay too.</p>\n<h4>Benefit</h4>\n<p>The <code>subsume</code> operation is an important compile-time optimization in our egraph framework, because it allows us to prune egraph nodes that we're confident aren't any better than the subsumed expression. That saves memory as well as reducing the runtime of later pattern-matches and of elaboration.</p>\n<p>However, if we overuse <code>subsume</code> we can miss optimization opportunities. If we can prove that subsume is only used in cases which are at least as good as all alternatives, by some measure, then we can be confident that we're getting the best optimization results we can from our rule set.</p>\n<h4>Implementation</h4>\n<p>One idea is to check any pair of rules which overlap, where at least one uses <code>subsume</code>.</p>\n<ul>\n<li>If we can prove that both rules produce the same result on all inputs where the two rules both match, then subsume is safe because it doesn't matter which rule we pick. This is easiest for rules which reduce to one of their input bindings, or use an identical tree of constructors; we can check that both rules reduce to the same binding site.</li>\n<li>If only one of the pair uses <code>subsume</code>, and we can prove that its result is never worse than the other rule when both rules match, then subsume is a good choice. This requires picking a cost model.</li>\n</ul>\n<p>Proving equivalence in general might require SMT solving, for rules whose left-hand sides use constructors like <code>u64_sub</code>. But maybe a conservative approximation will allow enough rules that we can express what we need to without requiring full equivalence proofs.</p>\n<h4>Alternatives</h4>\n<p>At minimum, we should document some guidance for rule authors.</p>\n</blockquote>",
        "id": 344952983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679945661
    }
]