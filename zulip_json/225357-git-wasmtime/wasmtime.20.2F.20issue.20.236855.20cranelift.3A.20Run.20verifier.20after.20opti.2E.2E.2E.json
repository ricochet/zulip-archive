[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>We should run the verifier after all of the optimization passes during testing, or when running via <code>clif-util</code>.</p>\n<h4>Benefit</h4>\n<p>This would really improve the error messages for egraphs optimization authors.</p>\n<p>Here's a recent example: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457\">https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457</a> these error messages are provided by the backends, but that really confuses things since what is really happening is that we are producing invalid CLIF in the mid end.</p>\n<p>Both of those examples would have really neat error messages if they were produced by the verifier.</p>\n<h4>Implementation</h4>\n<p>We probably don't want to enable this by default since it will slow down the compilation pipeline.</p>\n<p>On of my ideas on how to implement this would be to add a new flag (i.e. <code>run_verifier_after_opts</code>) that would be disabled by default but we could enable in <code>clif-util</code> and in our test runner.</p>\n<p>I don't know if we already have a <code>do_extra_checks</code> flag, but we can also maybe use that one.</p>\n<h4>Alternatives</h4>\n<p>Running this in the fuzzer is also an option but I think the costs might outweigh the benefits. I'm not sure.</p>\n<p>We can also not do this, and write down somewhere that it's a good idea to recompile the optimized code manually. I have previously started doing that after encountering weird issues, and this time it worked out.</p>\n</blockquote>",
        "id": 385650759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692270324
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>We should run the verifier after all of the optimization passes during testing, or when running via <code>clif-util</code>.</p>\n<h4>Benefit</h4>\n<p>This would really improve the error messages for egraphs optimization authors.</p>\n<p>Here's a recent example: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457\">https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457</a> these error messages are provided by the backends, but that really confuses things since what is really happening is that we are producing invalid CLIF in the mid end.</p>\n<p>Both of those examples would have really neat error messages if they were produced by the verifier.</p>\n<h4>Implementation</h4>\n<p>We probably don't want to enable this by default since it will slow down the compilation pipeline.</p>\n<p>On of my ideas on how to implement this would be to add a new flag (i.e. <code>run_verifier_after_opts</code>) that would be disabled by default but we could enable in <code>clif-util</code> and in our test runner.</p>\n<p>I don't know if we already have a <code>do_extra_checks</code> flag, but we can also maybe use that one. Or we could even use <code>enable_verifier</code>, but I'm not sure about that.</p>\n<h4>Alternatives</h4>\n<p>Running this in the fuzzer is also an option but I think the costs might outweigh the benefits. I'm not sure.</p>\n<p>We can also not do this, and write down somewhere that it's a good idea to recompile the optimized code manually. I have previously started doing that after encountering weird issues, and this time it worked out.</p>\n</blockquote>",
        "id": 385651140,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692270480
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>We should run the verifier after all of the optimization passes during testing, or when running via <code>clif-util</code>.</p>\n<h4>Benefit</h4>\n<p>This would really improve the error messages for egraphs optimization authors.</p>\n<p>Here's a recent example: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457\">https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457</a> these error messages are provided by the backends, but that really confuses things since what is really happening is that we are producing invalid CLIF in the mid end.</p>\n<p>Both of those examples would have really neat error messages if they were produced by the verifier.</p>\n<h4>Implementation</h4>\n<p>We probably don't want to enable this by default since it will slow down the compilation pipeline.</p>\n<p>On of my ideas on how to implement this would be to add a new flag (i.e. <code>run_verifier_after_opts</code>) that would be disabled by default but we could enable in <code>clif-util</code> and in our test runner.</p>\n<p>I don't know if we already have a <code>do_extra_checks</code> flag, but we can also maybe use that one. Or we could maybe even use <code>enable_verifier</code>.</p>\n<h4>Alternatives</h4>\n<p>Running this in the fuzzer is also an option but I think the costs might outweigh the benefits. I'm not sure.</p>\n<p>We can also not do this, and write down somewhere that it's a good idea to recompile the optimized code manually. I have previously started doing that after encountering weird issues, and this time it worked out.</p>\n</blockquote>",
        "id": 385651242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692270506
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>We should run the verifier after all of the optimization passes during testing, or when running via <code>clif-util</code>.</p>\n<h4>Benefit</h4>\n<p>This would really improve the error messages for egraphs optimization authors.</p>\n<p>Here's a recent example: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457\">https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457</a> these error messages are provided by the backends, but that really confuses things since what is really happening is that we are producing invalid CLIF in the mid end.</p>\n<p>Both of those examples would have really neat error messages if they were produced by the verifier.</p>\n<h4>Implementation</h4>\n<p>We probably don't want to enable this by default since it will slow down the compilation pipeline.</p>\n<p>On of my ideas on how to implement this would be to add a new flag (i.e. <code>run_verifier_after_opts</code>) that would be disabled by default but we could enable in <code>clif-util</code> and in our test runner.</p>\n<p>I don't know if we already have a <code>do_extra_checks</code> flag, but we can also maybe use that one. Or we could maybe even use <code>enable_verifier</code> itself.</p>\n<h4>Alternatives</h4>\n<p>Running this in the fuzzer is also an option but I think the costs might outweigh the benefits. I'm not sure.</p>\n<p>We can also not do this, and write down somewhere that it's a good idea to recompile the optimized code manually. I have previously started doing that after encountering weird issues, and this time it worked out.</p>\n</blockquote>",
        "id": 385651264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692270515
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1682184758\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Isn't this just a missing <code>self.verify_if(fisa)</code> call at the end of <code>egraph_pass</code>? All other optimizations have this already.</p>\n</blockquote>",
        "id": 385662027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692274719
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1682287641\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Oh yeah, If we're already running it for all of the other passes we might as well run it for this one as well!</p>\n</blockquote>",
        "id": 385673226,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692278865
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1683422623\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Replacing the <code>Ok(())</code> in last line of this function: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e250334b8ebfba9359802ab7f61bdd7c6085d87a/cranelift/codegen/src/context.rs#L348-L367\">https://github.com/bytecodealliance/wasmtime/blob/e250334b8ebfba9359802ab7f61bdd7c6085d87a/cranelift/codegen/src/context.rs#L348-L367</a><br>\nwith <code>self.verify_if(fisa)</code> should do the trick, right?</p>\n</blockquote>",
        "id": 385835679,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692340527
    },
    {
        "content": "<p>gurry edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1683422623\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Replacing the <code>Ok(())</code> in the last line of this function: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e250334b8ebfba9359802ab7f61bdd7c6085d87a/cranelift/codegen/src/context.rs#L348-L367\">https://github.com/bytecodealliance/wasmtime/blob/e250334b8ebfba9359802ab7f61bdd7c6085d87a/cranelift/codegen/src/context.rs#L348-L367</a><br>\nwith <code>self.verify_if(fisa)</code> should do the trick, right?</p>\n</blockquote>",
        "id": 385836296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692340783
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1683484118\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Making the above change causes the following error to be displayed:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">egraph</span><span class=\"err\">\\</span><span class=\"n\">simd</span><span class=\"o\">-</span><span class=\"n\">splat</span><span class=\"o\">-</span><span class=\"n\">simplify</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">optimize</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">sshr_splat_into_splat_sshr</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">i64x2</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n        <span class=\"nc\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"o\">^~~~~~~~~~~~~~~~</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sshr</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">)</span>: <span class=\"nc\">arg</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"n\">i64x2</span>\n\n<span class=\"w\">        </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">        </span><span class=\"n\">v6</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v5</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\">   </span><span class=\"o\">^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i64x2</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">)</span>: <span class=\"nc\">arg</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">i64x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"kt\">i64</span>\n\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">verifier</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">above</span><span class=\"p\">).</span><span class=\"w\"> </span><span class=\"n\">Compilation</span><span class=\"w\"> </span><span class=\"n\">aborted</span><span class=\"p\">.</span>\n\n<span class=\"mi\">1356</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span>\n<span class=\"n\">error</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>when <code>cargo test</code> is run against the following opt with a missing <code>lane-type</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">splat</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sshr</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>So looks like it works as expected.</p>\n</blockquote>",
        "id": 385843032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692343613
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1683555773\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Yeah, That's pretty much it! Would you like to open a PR with that change?</p>\n</blockquote>",
        "id": 385857802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692347316
    },
    {
        "content": "<p>gurry <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855#issuecomment-1683574192\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p>Yes, let me do that.</p>\n</blockquote>",
        "id": 385861270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692348219
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6855\">issue #6855</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey</p>\n<h4>Feature</h4>\n<p>We should run the verifier after all of the optimization passes during testing, or when running via <code>clif-util</code>.</p>\n<h4>Benefit</h4>\n<p>This would really improve the error messages for egraphs optimization authors.</p>\n<p>Here's a recent example: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457\">https://github.com/bytecodealliance/wasmtime/pull/6851#issuecomment-1682067457</a> these error messages are provided by the backends, but that really confuses things since what is really happening is that we are producing invalid CLIF in the mid end.</p>\n<p>Both of those examples would have really neat error messages if they were produced by the verifier.</p>\n<h4>Implementation</h4>\n<p>We probably don't want to enable this by default since it will slow down the compilation pipeline.</p>\n<p>On of my ideas on how to implement this would be to add a new flag (i.e. <code>run_verifier_after_opts</code>) that would be disabled by default but we could enable in <code>clif-util</code> and in our test runner.</p>\n<p>I don't know if we already have a <code>do_extra_checks</code> flag, but we can also maybe use that one. Or we could maybe even use <code>enable_verifier</code> itself.</p>\n<h4>Alternatives</h4>\n<p>Running this in the fuzzer is also an option but I think the costs might outweigh the benefits. I'm not sure.</p>\n<p>We can also not do this, and write down somewhere that it's a good idea to recompile the optimized code manually. I have previously started doing that after encountering weird issues, and this time it worked out.</p>\n</blockquote>",
        "id": 385874049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1692352590
    }
]