[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709\">PR #3709</a> from <code>cold-blocks-dead-code-bug</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a block is marked cold but has side-effect-free code that is only<br>\nused by side-effectful code in non-cold blocks, we will erroneously fail<br>\nto emit it, causing a regalloc failure.</p>\n<p>This is due to the interaction of block ordering and lowering: we rely<br>\non block ordering to visit uses before defs (except for backedges) so<br>\nthat we can effectively do an inline liveness analysis and skip lowering<br>\noperations that are not used anywhere. This \"inline DCE\" is needed<br>\nbecause instruction lowering can pattern-match and merge one instruction<br>\ninto another, removing the need to generate the source instruction.</p>\n<p>Unfortunately, the way that I added cold-block support in #3698 was<br>\noblivious to this -- it just changed the block sort order. For<br>\nefficiency reasons, we generate code in its final order directly, so it<br>\nwould not be tenable to generate it in e.g. RPO first and then reorder<br>\ncold blocks to the bottom; we really do want to visit in the same order<br>\nas the final code.</p>\n<p>This PR fixes the bug by moving the point at which cold blocks are sunk<br>\nto emission-time instead. This is cheaper than either trying to visit<br>\nblocks during lowering in RPO but add to VCode out-of-order, or trying<br>\nto do some expensive analysis to recover proper liveness. It's not clear<br>\nthat the latter would be possible anyway -- the need to lower some<br>\ninstructions depends on other instructions' isel results/merging<br>\nsuccess, so we really do need to visit in RPO, and we can't simply lower<br>\nall instructions as side-effecting roots (some can't be toplevel nodes).</p>\n<p>The one downside of this approach is that the VCode itself still has<br>\ncold blocks inline; so in the text format (and hence compile-tests) it's<br>\nnot possible to see the sinking. This PR adds a test for cold-block<br>\nsinking that actually verifies the machine code. (The test also includes<br>\nan add-instruction in the cold path that would have been incorrectly<br>\nskipped prior to this fix.)</p>\n<p>Fortunately this bug would not have been triggered by the one current<br>\nuse of cold blocks in #3699, because there the only operation in the<br>\ncold block was an (always effectful) call instruction. The worst-case<br>\neffect of the bug in other code would be a regalloc panic; no silent<br>\nmiscompilations could result.</p>\n<p>Depends on #3708.</p>\n</blockquote>",
        "id": 268779167,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642725428
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709\">PR #3709</a> from <code>cold-blocks-dead-code-bug</code> to <code>main</code>.</p>",
        "id": 268779184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642725443
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709\">PR #3709</a> from <code>cold-blocks-dead-code-bug</code> to <code>main</code>:</p>\n<blockquote>\n<p>If a block is marked cold but has side-effect-free code that is only<br>\nused by side-effectful code in non-cold blocks, we will erroneously fail<br>\nto emit it, causing a regalloc failure.</p>\n<p>This is due to the interaction of block ordering and lowering: we rely<br>\non block ordering to visit uses before defs (except for backedges) so<br>\nthat we can effectively do an inline liveness analysis and skip lowering<br>\noperations that are not used anywhere. This \"inline DCE\" is needed<br>\nbecause instruction lowering can pattern-match and merge one instruction<br>\ninto another, removing the need to generate the source instruction.</p>\n<p>Unfortunately, the way that I added cold-block support in #3698 was<br>\noblivious to this -- it just changed the block sort order. For<br>\nefficiency reasons, we generate code in its final order directly, so it<br>\nwould not be tenable to generate it in e.g. RPO first and then reorder<br>\ncold blocks to the bottom; we really do want to visit in the same order<br>\nas the final code.</p>\n<p>This PR fixes the bug by moving the point at which cold blocks are sunk<br>\nto emission-time instead. This is cheaper than either trying to visit<br>\nblocks during lowering in RPO but add to VCode out-of-order, or trying<br>\nto do some expensive analysis to recover proper liveness. It's not clear<br>\nthat the latter would be possible anyway -- the need to lower some<br>\ninstructions depends on other instructions' isel results/merging<br>\nsuccess, so we really do need to visit in RPO, and we can't simply lower<br>\nall instructions as side-effecting roots (some can't be toplevel nodes).</p>\n<p>The one downside of this approach is that the VCode itself still has<br>\ncold blocks inline; so in the text format (and hence compile-tests) it's<br>\nnot possible to see the sinking. This PR adds a test for cold-block<br>\nsinking that actually verifies the machine code. (The test also includes<br>\nan add-instruction in the cold path that would have been incorrectly<br>\nskipped prior to this fix.)</p>\n<p>Fortunately this bug would not have been triggered by the one current<br>\nuse of cold blocks in #3699, because there the only operation in the<br>\ncold block was an (always effectful) call instruction. The worst-case<br>\neffect of the bug in other code would be a regalloc panic; no silent<br>\nmiscompilations could result.</p>\n</blockquote>",
        "id": 268779190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642725454
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709\">PR #3709</a>.</p>",
        "id": 268779238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642725484
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709#pullrequestreview-859881094\">PR review</a>.</p>",
        "id": 268881383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642788878
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709#pullrequestreview-859881094\">PR review</a>.</p>",
        "id": 268881384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642788878
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709#discussion_r789891798\">PR review comment</a>:</p>\n<blockquote>\n<p>A very small percentage of blocks will be cold, does it make sense to use a sparse <code>HashSet</code> rather than dense a <code>Vec</code> with an entry for every block here?</p>\n</blockquote>",
        "id": 268881385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642788878
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709#discussion_r789892233\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: either way I would personally call this <code>cold_blocks</code> rather than <code>cold_block</code></p>\n</blockquote>",
        "id": 268881386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642788878
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709\">PR #3709</a> from <code>cold-blocks-dead-code-bug</code> to <code>main</code>.</p>",
        "id": 268886368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642790876
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709#pullrequestreview-859912332\">PR review</a>.</p>",
        "id": 268886434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642790887
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709#discussion_r789913936\">PR review comment</a>:</p>\n<blockquote>\n<p>Good points, thanks! Using a hashset now.</p>\n</blockquote>",
        "id": 268886435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642790888
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3709\">PR #3709</a>.</p>",
        "id": 268890418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642792730
    }
]