[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4291\">issue #4291</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8950706/extract.wasm.gz\">This WebAssembly file</a> which is reduced to a single function from <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/132\">this issue</a> complies like this on <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Elapsed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span>:<span class=\"nc\">mm</span>:<span class=\"nc\">ss</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">m</span>:<span class=\"nc\">ss</span><span class=\"p\">)</span>: <span class=\"mi\">0</span>:<span class=\"mf\">08.58</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maximum</span><span class=\"w\"> </span><span class=\"n\">resident</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kbytes</span><span class=\"p\">)</span>: <span class=\"mi\">6565472</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when compared to wasmtime 0.36.0 which is pre-regalloc2, however, this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">36.0</span><span class=\"o\">-</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Elapsed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span>:<span class=\"nc\">mm</span>:<span class=\"nc\">ss</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">m</span>:<span class=\"nc\">ss</span><span class=\"p\">)</span>: <span class=\"mi\">0</span>:<span class=\"mf\">00.86</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maximum</span><span class=\"w\"> </span><span class=\"n\">resident</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kbytes</span><span class=\"p\">)</span>: <span class=\"mi\">215264</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this means that what previously took ~200M to compile is now taking upwards of 6.5G.</p>\n</blockquote>",
        "id": 286940176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655828975
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4291\">issue #4291</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8950706/extract.wasm.gz\">This WebAssembly file</a> which is reduced to a single function from <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/132\">this issue</a> complies like this on <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Elapsed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span>:<span class=\"nc\">mm</span>:<span class=\"nc\">ss</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">m</span>:<span class=\"nc\">ss</span><span class=\"p\">)</span>: <span class=\"mi\">0</span>:<span class=\"mf\">08.58</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maximum</span><span class=\"w\"> </span><span class=\"n\">resident</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kbytes</span><span class=\"p\">)</span>: <span class=\"mi\">6565472</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when compared to wasmtime 0.36.0 which is pre-regalloc2, however, this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">36.0</span><span class=\"o\">-</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Elapsed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span>:<span class=\"nc\">mm</span>:<span class=\"nc\">ss</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">m</span>:<span class=\"nc\">ss</span><span class=\"p\">)</span>: <span class=\"mi\">0</span>:<span class=\"mf\">00.86</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maximum</span><span class=\"w\"> </span><span class=\"n\">resident</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kbytes</span><span class=\"p\">)</span>: <span class=\"mi\">215264</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this means that what previously took ~200M to compile is now taking upwards of 6.5G.</p>\n</blockquote>",
        "id": 286940177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655828975
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4291#issuecomment-1166363979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4291\">issue #4291</a>:</p>\n<blockquote>\n<p>I did some investigation on this yesterday and today (not quite fulltime, I'm still under the weather a bit, but regalloc hacking is still the best way to pass the time...). I found three distinct things I could improve:</p>\n<ul>\n<li>\n<p>Most importantly, some ugly quadratic behavior with liverange splitting. The heuristic has always been \"split at first conflict\", and a split is always a 2-for-1 deal, not N-for-1. The test program above has a single vreg that is passed as arg0, then arg1, then arg0, then arg1, ... through a long sequence of callsites. This means that it has to be split into N pieces each of which can be put in the appropriate register. Unfortunately splitting had cost O(|bundle|), i.e. proportional to the total length of the bundle. Bad news! My fix to this issue is to \"bottom out\" at a limit: if a single original bundle is split more than K times (10, for now), go ahead and do an N-for-1 split into minimal pieces.</p>\n</li>\n<li>\n<p>Also, during splitting, we were copying the <code>Use</code> list over to the new second half, and truncating in the first, but not <code>shrink_to_fit</code>'ing. So we had O(n^2) memory at the end of the run too. D'oh.</p>\n</li>\n<li>\n<p>Finally, handling of call-ABI clobbers had a bit too much overhead by treating them as normal defs; I went ahead and resolved an old TODO and used the proper clobbers API, and also adopted a bitmask-based clobbers representation rather than a list. On the Cranelift side the clobbers-list is now a <code>const</code> bitmask for an ABI rather than a dynamically-built thing with allocations and all the rest.</p>\n</li>\n</ul>\n<p>This moved the needle on compilation of the above significantly:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>% perf stat ../wasmtime/target/release/wasmtime compile ~/testfile.wasm\n\n Performance counter stats for '../wasmtime/target/release/wasmtime compile /home/cfallin/testfile.wasm':\n\n          4,206.10 msec task-clock                #    1.053 CPUs utilized\n             4,340      context-switches          #    1.032 K/sec\n               822      cpu-migrations            #  195.431 /sec\n         1,163,585      page-faults               #  276.643 K/sec\n    16,856,753,781      cycles                    #    4.008 GHz                      (83.36%)\n     1,621,615,014      stalled-cycles-frontend   #    9.62% frontend cycles idle     (83.11%)\n     3,111,090,359      stalled-cycles-backend    #   18.46% backend cycles idle      (83.35%)\n    28,553,303,978      instructions              #    1.69  insn per cycle\n                                                  #    0.11  stalled cycles per insn  (83.38%)\n     6,475,239,780      branches                  #    1.539 G/sec                    (83.50%)\n        16,905,250      branch-misses             #    0.26% of all branches          (83.33%)\n\n       3.995578486 seconds time elapsed\n\n       2.763566000 seconds user\n       1.382605000 seconds sys\n\n% perf stat target/release/wasmtime compile ~/testfile.wasm\n\n Performance counter stats for 'target/release/wasmtime compile /home/cfallin/testfile.wasm':\n\n          1,006.23 msec task-clock                #    1.267 CPUs utilized\n             3,825      context-switches          #    3.801 K/sec\n               745      cpu-migrations            #  740.388 /sec\n            46,823      page-faults               #   46.533 K/sec\n     4,000,880,722      cycles                    #    3.976 GHz                      (83.93%)\n       285,506,402      stalled-cycles-frontend   #    7.14% frontend cycles idle     (83.77%)\n       302,458,733      stalled-cycles-backend    #    7.56% backend cycles idle      (82.24%)\n     4,816,665,288      instructions              #    1.20  insn per cycle\n                                                  #    0.06  stalled cycles per insn  (83.49%)\n       869,534,746      branches                  #  864.151 M/sec                    (83.48%)\n        11,265,004      branch-misses             #    1.30% of all branches          (83.27%)\n\n       0.794473768 seconds time elapsed\n\n       0.844001000 seconds user\n       0.143025000 seconds sys\n</code></pre></div>\n<p>Or in other words, 4x faster compilation and 24x fewer page faults (~= 24x less anon memory used).</p>\n<p>In comparison, Wasmtime v0.36 (pre-regalloc2) is:</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>% perf stat ~/Downloads/wasmtime-v0.36.0-x86_64-linux/wasmtime compile ~/testfile.wasm\n\n Performance counter stats for '/home/cfallin/Downloads/wasmtime-v0.36.0-x86_64-linux/wasmtime compile /home/cfallin/testfile.wasm':\n\n            959.79 msec task-clock                #    1.233 CPUs utilized\n             5,047      context-switches          #    5.258 K/sec\n               697      cpu-migrations            #  726.199 /sec\n            58,171      page-faults               #   60.608 K/sec\n     3,792,924,189      cycles                    #    3.952 GHz                      (83.95%)\n       234,549,074      stalled-cycles-frontend   #    6.18% frontend cycles idle     (82.94%)\n       258,495,205      stalled-cycles-backend    #    6.82% backend cycles idle      (82.15%)\n     5,110,076,091      instructions              #    1.35  insn per cycle\n                                                  #    0.05  stalled cycles per insn  (83.41%)\n     1,102,335,350      branches                  #    1.149 G/sec                    (83.58%)\n        11,660,266      branch-misses             #    1.06% of all branches          (84.11%)\n\n       0.778638937 seconds time elapsed\n\n       0.772824000 seconds user\n       0.166435000 seconds sys\n</code></pre></div>\n<p>So v0.36 is ever-so-slightly faster (by ~5%) but curiously the current <code>main</code>-with-fixes runs ~5% fewer instructions during compilation, just gets a lower IPC. Fewer pagefaults ( == less memory) in current as well. These numbers are close enough to \"within noise\" I'd want to measure more carefully before making strong claims here. I do feel comfortable saying \"anomaly fixed and back to parity\" though, given the above.</p>\n<p>I suspect this may be the same issue we saw in #4045 as well but I haven't verified that.</p>\n<p>I'll put up proper PRs next week, when I'm fully back; for now the branches are <a href=\"https://github.com/cfallin/regalloc2/tree/bitmask-clobbers\">here</a> (regalloc2) and <a href=\"https://github.com/cfallin/wasmtime/tree/call-clobbers\">here</a> (Cranelift).</p>\n</blockquote>",
        "id": 287455979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656192323
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4291\">issue #4291</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/8950706/extract.wasm.gz\">This WebAssembly file</a> which is reduced to a single function from <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/132\">this issue</a> complies like this on <code>main</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Elapsed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span>:<span class=\"nc\">mm</span>:<span class=\"nc\">ss</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">m</span>:<span class=\"nc\">ss</span><span class=\"p\">)</span>: <span class=\"mi\">0</span>:<span class=\"mf\">08.58</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maximum</span><span class=\"w\"> </span><span class=\"n\">resident</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kbytes</span><span class=\"p\">)</span>: <span class=\"mi\">6565472</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>when compared to wasmtime 0.36.0 which is pre-regalloc2, however, this yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">36.0</span><span class=\"o\">-</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">extract</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Elapsed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wall</span><span class=\"w\"> </span><span class=\"n\">clock</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">h</span>:<span class=\"nc\">mm</span>:<span class=\"nc\">ss</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">m</span>:<span class=\"nc\">ss</span><span class=\"p\">)</span>: <span class=\"mi\">0</span>:<span class=\"mf\">00.86</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maximum</span><span class=\"w\"> </span><span class=\"n\">resident</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">kbytes</span><span class=\"p\">)</span>: <span class=\"mi\">215264</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this means that what previously took ~200M to compile is now taking upwards of 6.5G.</p>\n</blockquote>",
        "id": 287737748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656432138
    }
]