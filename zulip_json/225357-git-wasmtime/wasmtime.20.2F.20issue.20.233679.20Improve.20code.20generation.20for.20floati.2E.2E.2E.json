[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679#issuecomment-1010326115\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679\">issue #3679</a>:</p>\n<blockquote>\n<p>I think this path in lowering was never actually hit due to roughly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1ef0abb12c1978a96b2dd7299390dbe204a138d7/cranelift/codegen/src/machinst/lower.rs#L1221-L1241\">this block of code</a>. My hope was to eventually reimplement the <code>gen_constant</code> method with an ISLE-based lowering eventually but I figured it may also be pretty tricky to do so.</p>\n</blockquote>",
        "id": 267638965,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641932196
    },
    {
        "content": "<p>FreddieLiardet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679#issuecomment-1011057849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679\">issue #3679</a>:</p>\n<blockquote>\n<p>I have added some more tests for simple f32/64const cases. </p>\n<blockquote>\n<p>I think this path in lowering was never actually hit due to roughly <a href=\"https://github.com/bytecodealliance/wasmtime/blob/1ef0abb12c1978a96b2dd7299390dbe204a138d7/cranelift/codegen/src/machinst/lower.rs#L1221-L1241\">this block of code</a>.</p>\n</blockquote>\n<p>Yes I think this is the case.</p>\n</blockquote>",
        "id": 267725117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1641994907
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679#issuecomment-1012393756\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679\">issue #3679</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think this path in lowering was never actually hit due to roughly this block of code</p>\n</blockquote>\n<p>Ah, yes, this is the bit I had forgotten... we should never see an F32const/F64const value at the top-level lowering entry point, because either it is used somewhere and rematerialized at every use, or never used and hence dropped by the implicit DCE (use-counting). The existing top-level handlers for F32const/F64const were written before the rematerialize-at-uses change was made, I think.</p>\n<p>@FreddieLiardet given this, the change I think doesn't have to touch ISLE at all, since we haven't yet moved constant generation over. Could you:</p>\n<ul>\n<li>Remove the addition to <code>inst.isle</code> (we don't need to define variants of <code>MachInst</code> in the ISLE prelude that we don't use)</li>\n<li>Change the F32const/F64const lowering entry points from <code>implemented_in_isle!()</code> to a panic saying something like \"Should never see constant ops at top-level lowering entry point, as constants are rematerialized at use-sites\"</li>\n</ul>\n<p>Then I think this should be good to merge -- thanks!</p>\n</blockquote>",
        "id": 267909748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642098132
    },
    {
        "content": "<p>FreddieLiardet <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679#issuecomment-1013017997\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679\">issue #3679</a>:</p>\n<blockquote>\n<p>@cfallin I am unsure about the first point. Is there another place where <code>FpuMoveFPImm</code> instruction should be declared?  This instruction is used throughout this change.</p>\n</blockquote>",
        "id": 267998511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642157913
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679#issuecomment-1015041004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3679\">issue #3679</a>:</p>\n<blockquote>\n<p>@FreddieLiardet ah, my apologies, I was out-of-sync with our transition: we had previously defined the <code>Inst</code> enum in plain Rust and declared the enum arms we needed separately in ISLE, but I had forgotten that we now generate the enum itself from ISLE. So your diff to add the instruction here is good (modulo the generated-code merge conflict, which you should be able to resolve by rebasing).</p>\n</blockquote>",
        "id": 268339082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1642476630
    }
]