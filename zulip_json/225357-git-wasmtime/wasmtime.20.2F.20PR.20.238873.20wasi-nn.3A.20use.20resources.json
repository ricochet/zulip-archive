[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a> from <code>abrown:wasi-nn-resources</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>Recent discussion in the wasi-nn proposal (see [wasi-nn#59], e.g.) has concluded that the right approach for representing wasi-nn \"things\" (tensors, graph, etc.) is with a component model _resource_. This sweeping change brings Wasmtime's implementation in line with that decision.</p>\n<p>Initially I had structured this PR to remove all of the WITX-based implementation (#8530). But, after consulting in a Zulip [thread] on what other WASI proposals aim to do, this PR pivoted to support _both_` the WITX-based and WIT-based ABIs (e.g., preview1 era versus preview2, component model era). What is clear is that the WITX-based specification will remain \"frozen in time\" while the WIT-based implementation moves forward.</p>\n<p>What that means for this PR is a \"split world\" paradigm. In many places, we have to distinguish between the <code>wit</code> and <code>witx</code> versions of the same thing. This change isn't the end state yet: it's a big step forward towards bringing Wasmtime back in line with the WIT spec but, despite my best efforts, doesn't fully fix all the TODOs left behind over several years of development. I have, however, taken the liberty to refactor and fix various parts as I came across them (e.g., the ONNX backend). I plan to continue working on this in future PRs to figure out a good error paradigm (the current one is too wordy) and device residence.</p>\n<p>[wasi-nn#59]: <a href=\"https://github.com/WebAssembly/wasi-nn/pull/59\">https://github.com/WebAssembly/wasi-nn/pull/59</a><br>\n[thread]: <a href=\"#narrow/stream/219900-wasi/topic/wasi-nn's.20preview1.20vs.20preview2.20timeline\">https://bytecodealliance.zulipchat.com/#narrow/stream/219900-wasi/topic/wasi-nn's.20preview1.20vs.20preview2.20timeline</a></p>\n<p>prtest:full</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 446974768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719343301
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873#issuecomment-2189896275\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>:</p>\n<blockquote>\n<p>At a high level this looks reasonable to me, but one recommendation I might have is that the way we implemented WASIp1 was to have it be a wrapper effectively around WASIp2. Internally all of WASIp1 is implemented in terms of WASIp2's underlying functions. Would it be possible to do that here as well? For example storing a <code>wit::WasiNnCtx</code> inside of a <code>witx::WasiNnCtx</code> directly and then using the <code>Host</code> and such traits to implement the internals?</p>\n<p>(not required of course just a suggestion)</p>\n</blockquote>",
        "id": 446986257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719346770
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447036109,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719364624
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447280967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719422746
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447339578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437059
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447340934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719437689
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447347389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719440514
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447549857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719512575
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447557388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719514536
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>:</p>\n<blockquote>\n<p>Recent discussion in the wasi-nn proposal (see [wasi-nn#59], e.g.) has concluded that the right approach for representing wasi-nn \"things\" (tensors, graph, etc.) is with a component model _resource_. This sweeping change brings Wasmtime's implementation in line with that decision.</p>\n<p>Initially I had structured this PR to remove all of the WITX-based implementation (#8530). But, after consulting in a Zulip [thread] on what other WASI proposals aim to do, this PR pivoted to support _both_` the WITX-based and WIT-based ABIs (e.g., preview1 era versus preview2, component model era). What is clear is that the WITX-based specification will remain \"frozen in time\" while the WIT-based implementation moves forward.</p>\n<p>What that means for this PR is a \"split world\" paradigm. In many places, we have to distinguish between the <code>wit</code> and <code>witx</code> versions of the same thing. This change isn't the end state yet: it's a big step forward towards bringing Wasmtime back in line with the WIT spec but, despite my best efforts, doesn't fully fix all the TODOs left behind over several years of development. I have, however, taken the liberty to refactor and fix various parts as I came across them (e.g., the ONNX backend). I plan to continue working on this in future PRs to figure out a good error paradigm (the current one is too wordy) and device residence.</p>\n<p>[wasi-nn#59]: <a href=\"https://github.com/WebAssembly/wasi-nn/pull/59\">https://github.com/WebAssembly/wasi-nn/pull/59</a><br>\n[thread]: <a href=\"#narrow/stream/219900-wasi/topic/wasi-nn's.20preview1.20vs.20preview2.20timeline\">https://bytecodealliance.zulipchat.com/#narrow/stream/219900-wasi/topic/wasi-nn's.20preview1.20vs.20preview2.20timeline</a></p>\n</blockquote>",
        "id": 447557583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719514568
    },
    {
        "content": "<p><strong>abrown</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a> as ready for review.</p>",
        "id": 447558267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719514700
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447558272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719514701
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447558274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719514701
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447558275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719514702
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873#pullrequestreview-2146310616\">PR review</a>.</p>",
        "id": 447562947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719515639
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8873\">PR #8873</a>.</p>",
        "id": 447565962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1719516660
    }
]