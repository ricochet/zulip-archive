[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>At present, only simple types can be returned in <code>component::LinkerInstance::func_new</code></p>\n<p>The following variants of <code>component::Val</code> cannot be returned by dynamic functions defined via <code>component::LinkerInstance::func_new</code>:</p>\n<ul>\n<li>List(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.List.html\">List</a>)</li>\n<li>Record(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Record.html\">Record</a>)</li>\n<li>Tuple(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Tuple.html\">Tuple</a>)</li>\n<li>Variant(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Variant.html\">Variant</a>)</li>\n<li>Enum(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Enum.html\">Enum</a>)</li>\n<li>Option(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.OptionVal.html\">OptionVal</a>)</li>\n<li>Result(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResultVal.html\">ResultVal</a>)</li>\n<li>Flags(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Flags.html\">Flags</a>)</li>\n</ul>\n<p>The reason for this is the fact that constructors of these values require a type parameter, which cannot be constructed outside the crate. While such type parameter can be extracted from a function signature exported by a component, there is currently no means to access the type for functions <em>imported</em> by the component. At best, implementations may parse the type information using <code>wit_parser</code> crate, but there is currently no way to map from <code>wit_parser</code> type to <code>wasmtime</code> type.</p>\n<p>For example:<br>\n<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Enum.html#method.new\"><code>Enum::new</code></a> requires <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/types/struct.Enum.html\"><code>types::Enum</code></a> value as a parameter, which does not export a constructor or any conversion mechanism. This type can only be returned by wasmtime crate, but functionality to extract this from a component import does not currently appear to exist.</p>\n<h4>Benefit</h4>\n<p>This would allow dynamically-typed function definitions in the linker returning more that the basic numeric/string types (and resources once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">https://github.com/bytecodealliance/wasmtime/pull/7688</a> lands)</p>\n<h4>Implementation</h4>\n<p>Perhaps <code>func_new</code> function parameter signatures could be updated to take in a <code>Vec&lt;Type&gt;</code> (<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/types/enum.Type.html\">https://docs.rs/wasmtime/latest/wasmtime/component/types/enum.Type.html</a>) or, perhaps even better signatures could get <code>Vec&lt;(Val, Type)&gt;</code> as a parameter for the result parameter. Note, that <code>params</code> are free from this issue, because the type info is already embedded in <code>Val</code> passed to the function, which is not the case for results (and there is probably no way to change that)</p>\n<h4>Alternatives</h4>\n<p>The only alternative seems not supporting dynamically-typed function imports, or only supporting a subset of those, as currently done.</p>\n</blockquote>",
        "id": 409925087,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703522012
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726#issuecomment-1881378065\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<p>I might recommend a route such as with <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4593\">https://github.com/bytecodealliance/wasmtime/issues/4593</a> where we'd flesh out the runtime reflection APIs on the types used in a component to be able to inspect imports/exports and then update <code>func_new</code> to taking a <code>FuncType</code> like its core wasm counterpart as well. The one major tricky part would be runtime construction of types if that's required which is not easy, but if you're using exact types from a component then that should still work ok.</p>\n</blockquote>",
        "id": 411769263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704730180
    },
    {
        "content": "<p>rvolosatovs <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726#issuecomment-1898517875\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<blockquote>\n<p>I might recommend a route such as with #4593 where we'd flesh out the runtime reflection APIs on the types used in a component to be able to inspect imports/exports and then update <code>func_new</code> to taking a <code>FuncType</code> like its core wasm counterpart as well. The one major tricky part would be runtime construction of types if that's required which is not easy, but if you're using exact types from a component then that should still work ok.</p>\n</blockquote>\n<p>Given existing functionality, I don't think this would work without significant changes in <code>component::types</code> - that is because at present construction of <code>Val</code> requires a component instance to lookup <code>InstanceType</code> from, e.g. consider <code>Option</code>, which relies on the <code>Handle</code> type, which, in turn, requires an <code>InstanceType</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f3b5478bfcb759d99b3910b121c644b4c9c572bf/crates/wasmtime/src/component/types.rs#L428-L430\">https://github.com/bytecodealliance/wasmtime/blob/f3b5478bfcb759d99b3910b121c644b4c9c572bf/crates/wasmtime/src/component/types.rs#L428-L430</a>. As far as I understand the implementation, at present the only way to produce an <code>InstanceType</code> is to instantiate the component.<br>\n<code>Linker::func_new</code> is called <em>before</em> instantiation takes place, therefore it's not possible to produce a <code>FuncType</code> parameter to pass to <code>Linker::func_new</code> - that would depend on instantiation.<br>\nAm I missing something here?</p>\n<p>For my concrete use case, however, introspecting the <code>Instance</code>/<code>InstancePre</code> types from within the <code>func_new</code> closure implementation is most certainly \"good enough\" (a handle to it is simply kept in the store). What do you think about this approach? It feels like introspecting on <code>Instance</code>/<code>InstancePre</code> level would be a beneficial feature anyway</p>\n</blockquote>",
        "id": 416575146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705585811
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726#issuecomment-1898517875\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<blockquote>\n<p>I might recommend a route such as with #4593 where we'd flesh out the runtime reflection APIs on the types used in a component to be able to inspect imports/exports and then update <code>func_new</code> to taking a <code>FuncType</code> like its core wasm counterpart as well. The one major tricky part would be runtime construction of types if that's required which is not easy, but if you're using exact types from a component then that should still work ok.</p>\n</blockquote>\n<p>Given existing functionality, I don't think this would work without significant changes in <code>component::types</code> - that is because at present construction of <code>Type</code> requires a component instance to lookup <code>InstanceType</code> from, e.g. consider <code>OptionType</code>, which relies on the <code>Handle</code> type, which, in turn, requires an <code>InstanceType</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f3b5478bfcb759d99b3910b121c644b4c9c572bf/crates/wasmtime/src/component/types.rs#L428-L430\">https://github.com/bytecodealliance/wasmtime/blob/f3b5478bfcb759d99b3910b121c644b4c9c572bf/crates/wasmtime/src/component/types.rs#L428-L430</a>. As far as I understand the implementation, at present the only way to produce an <code>InstanceType</code> is to instantiate the component.<br>\n<code>Linker::func_new</code> is called <em>before</em> instantiation takes place, therefore it's not possible to produce a <code>FuncType</code> parameter to pass to <code>Linker::func_new</code> - that would depend on instantiation.<br>\nAm I missing something here?</p>\n<p>For my concrete use case, however, introspecting the <code>Instance</code>/<code>InstancePre</code> types from within the <code>func_new</code> closure implementation is most certainly \"good enough\" (a handle to it is simply kept in the store). What do you think about this approach? It feels like introspecting on <code>Instance</code>/<code>InstancePre</code> level would be a beneficial feature anyway</p>\n</blockquote>",
        "id": 416575601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705585985
    },
    {
        "content": "<p>rvolosatovs edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726#issuecomment-1898517875\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<blockquote>\n<p>I might recommend a route such as with #4593 where we'd flesh out the runtime reflection APIs on the types used in a component to be able to inspect imports/exports and then update <code>func_new</code> to taking a <code>FuncType</code> like its core wasm counterpart as well. The one major tricky part would be runtime construction of types if that's required which is not easy, but if you're using exact types from a component then that should still work ok.</p>\n</blockquote>\n<p>Given existing functionality, I don't think this would work without significant changes in <code>component::types</code> - that is because at present construction of <code>Type</code> requires a component instance to lookup <code>InstanceType</code> from, e.g. consider <code>OptionType</code>, which relies on the <code>Handle</code> type, which, in turn, requires an <code>InstanceType</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f3b5478bfcb759d99b3910b121c644b4c9c572bf/crates/wasmtime/src/component/types.rs#L428-L430\">https://github.com/bytecodealliance/wasmtime/blob/f3b5478bfcb759d99b3910b121c644b4c9c572bf/crates/wasmtime/src/component/types.rs#L428-L430</a>. As far as I understand the implementation, at present the only way to produce an <code>InstanceType</code> is to instantiate the component.<br>\n<code>Linker::func_new</code> is called <em>before</em> instantiation takes place, therefore it's not possible to produce a <code>FuncType</code> parameter to pass to <code>Linker::func_new</code> - that would depend on instantiation.<br>\nAm I missing something here?</p>\n<p>For my concrete use case, however, introspecting the <code>Instance</code> types from within the <code>func_new</code> closure implementation is most certainly \"good enough\" (a handle to it is simply kept in the store). What do you think about this approach? It feels like introspecting on <code>Instance</code> level would be a beneficial feature anyway</p>\n</blockquote>",
        "id": 416582765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705588201
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726#issuecomment-1898864153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<p>I think that's reasonable yeah, good point. There's subtelty here around resources and while it's something I believe we can solve you're right it'd require some refactoring. In the long run we're going to want to query the type of and instance in addition to a component anyway, so I think it make sense to go ahead and implement this for instances at this time too.</p>\n</blockquote>",
        "id": 416612302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705597028
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7726\">issue #7726</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>At present, only simple types can be returned in <code>component::LinkerInstance::func_new</code></p>\n<p>The following variants of <code>component::Val</code> cannot be returned by dynamic functions defined via <code>component::LinkerInstance::func_new</code>:</p>\n<ul>\n<li>List(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.List.html\">List</a>)</li>\n<li>Record(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Record.html\">Record</a>)</li>\n<li>Tuple(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Tuple.html\">Tuple</a>)</li>\n<li>Variant(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Variant.html\">Variant</a>)</li>\n<li>Enum(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Enum.html\">Enum</a>)</li>\n<li>Option(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.OptionVal.html\">OptionVal</a>)</li>\n<li>Result(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ResultVal.html\">ResultVal</a>)</li>\n<li>Flags(<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Flags.html\">Flags</a>)</li>\n</ul>\n<p>The reason for this is the fact that constructors of these values require a type parameter, which cannot be constructed outside the crate. While such type parameter can be extracted from a function signature exported by a component, there is currently no means to access the type for functions <em>imported</em> by the component. At best, implementations may parse the type information using <code>wit_parser</code> crate, but there is currently no way to map from <code>wit_parser</code> type to <code>wasmtime</code> type.</p>\n<p>For example:<br>\n<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Enum.html#method.new\"><code>Enum::new</code></a> requires <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/types/struct.Enum.html\"><code>types::Enum</code></a> value as a parameter, which does not export a constructor or any conversion mechanism. This type can only be returned by wasmtime crate, but functionality to extract this from a component import does not currently appear to exist.</p>\n<h4>Benefit</h4>\n<p>This would allow dynamically-typed function definitions in the linker returning more that the basic numeric/string types (and resources once <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7688\">https://github.com/bytecodealliance/wasmtime/pull/7688</a> lands)</p>\n<h4>Implementation</h4>\n<p>Perhaps <code>func_new</code> function parameter signatures could be updated to take in a <code>Vec&lt;Type&gt;</code> (<a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/types/enum.Type.html\">https://docs.rs/wasmtime/latest/wasmtime/component/types/enum.Type.html</a>) or, perhaps even better signatures could get <code>Vec&lt;(Val, Type)&gt;</code> as a parameter for the result parameter. Note, that <code>params</code> are free from this issue, because the type info is already embedded in <code>Val</code> passed to the function, which is not the case for results (and there is probably no way to change that)</p>\n<h4>Alternatives</h4>\n<p>The only alternative seems not supporting dynamically-typed function imports, or only supporting a subset of those, as currently done.</p>\n</blockquote>",
        "id": 418349291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706302178
    }
]