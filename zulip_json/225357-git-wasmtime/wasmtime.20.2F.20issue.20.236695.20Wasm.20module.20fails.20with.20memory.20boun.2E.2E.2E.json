[
    {
        "content": "<p>matsbror opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/11966785/shootout-heapsort.zip\">shootout-heapsort.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Unzip the example</li>\n<li>run heapsort with <code>wasmtime heapsort.wasm</code> </li>\n</ul>\n<p>To rebuild the program:</p>\n<ul>\n<li>Run Make (assumes clang installed and with WASI_SYSROOT set to the location of the wasi sysroot (or located at <code>/opt/wasi-sdk/share/wasi-sysroot</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I would expect wasmtime to run the program without any errors. It runs well using other runtimes such as iwasm (WAMR). However, wasmer has a similar issue.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">heapsort</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">heapsort</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x28c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x17b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x20000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x20000</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>wasmtime-cli 9.0.3</code></p>\n<p>Operating system: WSL2 Ubuntu-2204, kernel 5.15.90</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?</p>\n<p>If I compile with emscripten instead of regular clang (or the clang included in wasi-sdk), then the resulting webassembly module runs fine also with wasmtime. <br>\n</p>\n</blockquote>",
        "id": 372834856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688637417
    },
    {
        "content": "<p>matsbror labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/11966785/shootout-heapsort.zip\">shootout-heapsort.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Unzip the example</li>\n<li>run heapsort with <code>wasmtime heapsort.wasm</code> </li>\n</ul>\n<p>To rebuild the program:</p>\n<ul>\n<li>Run Make (assumes clang installed and with WASI_SYSROOT set to the location of the wasi sysroot (or located at <code>/opt/wasi-sdk/share/wasi-sysroot</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I would expect wasmtime to run the program without any errors. It runs well using other runtimes such as iwasm (WAMR). However, wasmer has a similar issue.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">heapsort</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">heapsort</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x28c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x17b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x20000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x20000</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>wasmtime-cli 9.0.3</code></p>\n<p>Operating system: WSL2 Ubuntu-2204, kernel 5.15.90</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?</p>\n<p>If I compile with emscripten instead of regular clang (or the clang included in wasi-sdk), then the resulting webassembly module runs fine also with wasmtime. <br>\n</p>\n</blockquote>",
        "id": 372834857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688637417
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695#issuecomment-1623669723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<p>Can you clarify more why you think this program should work? The program itself appears to exhibit undefined behavior at the C level as you're allocating an array <code>double*</code> elements but storing <code>double</code> elements into it meaning that your allocation is half as large as it needs to be (pointers are 4 bytes and <code>double</code> is 8 bytes). I can additionally reproduce the out-of-bounds behavior in <code>node</code> as well.</p>\n<p>Given the debugging I'm doing it appears that iwasm or WAMR may not be executing this wasm correctly because it's indeed attempting a store at address 0x20000 which is out-of-bounds for this wasm instance. I'm not sure why WAMR would not be reporting the out-of-bounds.</p>\n</blockquote>",
        "id": 372894471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688649518
    },
    {
        "content": "<p>matsbror <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695#issuecomment-1624185731\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<p>Thanks @alexcrichton , changing that line to allocate <code>sizeof(double)</code> instead clearly corrected the issue.</p>\n<p>The reason why I thought the program should work is because it is part of sightglass and when running it there it seems to work with wasmtime, albeit called in a different way than with the cli.</p>\n<p>The error is in sightglass <a href=\"https://github.com/bytecodealliance/sightglass/blob/04546548e60dcce4b6691f8ddb75442c4d251ad9/benchmarks/shootout-heapsort/benchmark.c#L62\">https://github.com/bytecodealliance/sightglass/blob/04546548e60dcce4b6691f8ddb75442c4d251ad9/benchmarks/shootout-heapsort/benchmark.c#L62</a> so I should make a pull request to fix it there.</p>\n</blockquote>",
        "id": 372998039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688670709
    },
    {
        "content": "<p>matsbror closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/11966785/shootout-heapsort.zip\">shootout-heapsort.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Unzip the example</li>\n<li>run heapsort with <code>wasmtime heapsort.wasm</code> </li>\n</ul>\n<p>To rebuild the program:</p>\n<ul>\n<li>Run Make (assumes clang installed and with WASI_SYSROOT set to the location of the wasi sysroot (or located at <code>/opt/wasi-sdk/share/wasi-sysroot</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I would expect wasmtime to run the program without any errors. It runs well using other runtimes such as iwasm (WAMR). However, wasmer has a similar issue.</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">heapsort</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">heapsort</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x28c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x17b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x20000</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">linear</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mh\">0x20000</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>wasmtime-cli 9.0.3</code></p>\n<p>Operating system: WSL2 Ubuntu-2204, kernel 5.15.90</p>\n<p>Architecture: x86-64</p>\n<h3>Extra Info</h3>\n<p>Anything else you'd like to add?</p>\n<p>If I compile with emscripten instead of regular clang (or the clang included in wasi-sdk), then the resulting webassembly module runs fine also with wasmtime. <br>\n</p>\n</blockquote>",
        "id": 372998042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688670710
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695#issuecomment-1624205779\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<p>Ah ok, in that case it seems like this may be compiler differences. Using emcc seems to create a linear memory with an initial and maximum size of 256, but using <code>clang</code> natively seems to create a linear memory of initial size 2 and no maximum size. This means that the UB is papered over since the end of the array still fits in linear memory with emscripten, but it's detected when memory is more minimally fit.</p>\n</blockquote>",
        "id": 373001923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688671814
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695#issuecomment-1624231621\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6695\">issue #6695</a>:</p>\n<blockquote>\n<p>@matsbror, just a heads up: I also ran into this issue when I was working on <a href=\"https://github.com/bytecodealliance/sightglass/pull/260\">https://github.com/bytecodealliance/sightglass/pull/260</a> and ended up fixing it in <a href=\"https://github.com/bytecodealliance/sightglass/pull/260/commits/8b9855bc77e8e8245a8d3d139f20cca09702e037\">https://github.com/bytecodealliance/sightglass/pull/260/commits/8b9855bc77e8e8245a8d3d139f20cca09702e037</a>. Once that PR is merged this should be fixed.</p>\n</blockquote>",
        "id": 373006737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688673233
    }
]