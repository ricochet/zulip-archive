[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745\">Issue #1745</a>:</p>\n<blockquote>\n<p>I am trying to implement a legalization for <code>imul.i64x2</code> that must be a custom legalization function. It needs to have logic to look at the ISA-specific flags to determine what legalization to use; I know, I know, this would be fixed by the new backend, but in the meantime I would like to implement this legalization. I cannot find a good transform group to put this custom legalization in: if I put it in <code>x86_narrow</code>, the legalization search stops too soon and things like <code>i128</code> (in <code>narrow</code>) don't get legalized. If I put it in another transform group, e.g. <code>expand</code>, I have to add <code>i64x2</code> to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59\">the type the group legalizes</a>, which prevents other <code>i64x2</code> operations from being legalized (all of these are currently in <code>x86_narrow</code>). What can I do?</p>\n<ul>\n<li>I could move all of the SIMD operations to <code>x86_expand</code> but when I do this I run into conflicts with other operations (e.g. <code>ineg</code>)</li>\n<li>I could duplicate the logic from the shared <code>narrow</code> <code>imul</code> legalizations to my custom function</li>\n<li>I could make transform groups smarter somehow, e.g. by registering custom functions for an instruction AND a type (not just an instruction) or by allowing custom functions to return a result indicating if they succeeded (if they do, we stop; if they don't, we continue looking in other groups)</li>\n</ul>\n<p>Would appreciate some help thinking through this, @bnjbvr. CCing @iximeow and @whitequark as well since it could be remotely related to #1743.</p>\n</blockquote>",
        "id": 198394386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590106606
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745\">Issue #1745</a>:</p>\n<blockquote>\n<p>I am trying to implement a legalization for <code>imul.i64x2</code> that must be a custom legalization function. It needs to have logic to look at the ISA-specific flags to determine what legalization to use; I know, I know, this would be fixed by the new backend, but in the meantime I would like to implement this legalization. I cannot find a good transform group to put this custom legalization in: if I put it in <code>x86_narrow</code>, the legalization search stops too soon and things like <code>i128</code> (in <code>narrow</code>) don't get legalized. If I put it in another transform group, e.g. <code>expand</code>, I have to add <code>i64x2</code> as <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59\">a type the group legalizes</a>, which prevents other <code>i64x2</code> operations from being legalized (all of these are currently in <code>x86_narrow</code>). What can I do?</p>\n<ul>\n<li>I could move all of the SIMD operations to <code>x86_expand</code> but when I do this I run into conflicts with other operations (e.g. <code>ineg</code>)</li>\n<li>I could duplicate the logic from the shared <code>narrow</code> <code>imul</code> legalizations to my custom function</li>\n<li>I could make transform groups smarter somehow, e.g. by registering custom functions for an instruction AND a type (not just an instruction) or by allowing custom functions to return a result indicating if they succeeded (if they do, we stop; if they don't, we continue looking in other groups)</li>\n</ul>\n<p>Would appreciate some help thinking through this, @bnjbvr. CCing @iximeow and @whitequark as well since it could be remotely related to #1743.</p>\n</blockquote>",
        "id": 198394426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590106641
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745#issuecomment-633501823\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745\">Issue #1745</a>:</p>\n<blockquote>\n<blockquote>\n<p>I could make transform groups smarter somehow, e.g. by registering custom functions for an instruction AND a type (not just an instruction) or by allowing custom functions to return a result indicating if they succeeded (if they do, we stop; if they don't, we continue looking in other groups)</p>\n</blockquote>\n<p>There's already something like this: one can actually \"chain\" legalization groups when creating them, with this exact behavior. So i'd say, feel free to add as many legalization groups that you want, as long as they have a clear usefulness.</p>\n</blockquote>",
        "id": 198654191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590402322
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745#issuecomment-634163196\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745\">Issue #1745</a>:</p>\n<blockquote>\n<p>Ok, I think I have a clearer idea now... perhaps the title of this issue should be \"make legalization groups clearer\"? I added a new <code>x86_narrow_avx</code> group in #1759 but there must be a better name for that. As I looked at how the legalization graph is currently set up for x86, I thought of several improvements:</p>\n<ul>\n<li>move the SIMD instructions into <code>x86_expand</code>--this is what those are legalizations are truly doing (they are not really \"narrowing\"); but, as I learned, this breaks other things, because other legalizations in x86_narrow are expected to be the default group so we might need to add another level or shift things around to make this work</li>\n<li>put the construction of the legalization graph in one place (per ISA) so it is easier to visualize what is going on; e.g. move all of the <code>chain_with</code> calls to <code>meta/src/isa/x86/mod.rs</code>. Sure, this might mean some duplication for the various ISAs but I think it would be worth it for clarity.</li>\n</ul>\n</blockquote>",
        "id": 198794115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590513781
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745#issuecomment-772723084\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745\">Issue #1745</a>:</p>\n<blockquote>\n<p>The new backend framework doesn't use legalizations as much as the old backend framework.</p>\n</blockquote>",
        "id": 225058813,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376870
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1745\">Issue #1745</a>:</p>\n<blockquote>\n<p>I am trying to implement a legalization for <code>imul.i64x2</code> that must be a custom legalization function. It needs to have logic to look at the ISA-specific flags to determine what legalization to use; I know, I know, this would be fixed by the new backend, but in the meantime I would like to implement this legalization. I cannot find a good transform group to put this custom legalization in: if I put it in <code>x86_narrow</code>, the legalization search stops too soon and things like <code>i128</code> (in <code>narrow</code>) don't get legalized. If I put it in another transform group, e.g. <code>expand</code>, I have to add <code>i64x2</code> as <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59\">a type the group legalizes</a>, which prevents other <code>i64x2</code> operations from being legalized (all of these are currently in <code>x86_narrow</code>). What can I do?</p>\n<ul>\n<li>I could move all of the SIMD operations to <code>x86_expand</code> but when I do this I run into conflicts with other operations (e.g. <code>ineg</code>)</li>\n<li>I could duplicate the logic from the shared <code>narrow</code> <code>imul</code> legalizations to my custom function</li>\n<li>I could make transform groups smarter somehow, e.g. by registering custom functions for an instruction AND a type (not just an instruction) or by allowing custom functions to return a result indicating if they succeeded (if they do, we stop; if they don't, we continue looking in other groups)</li>\n</ul>\n<p>Would appreciate some help thinking through this, @bnjbvr. CCing @iximeow and @whitequark as well since it could be remotely related to #1743.</p>\n</blockquote>",
        "id": 225058950,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1612376924
    }
]