[
    {
        "content": "<p>Nimaoth opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600\">issue #9600</a>:</p>\n<blockquote>\n<p>Hi, I'm currently experimenting with wasm components for a plugin system, and one use case I have is being able to do callbacks between components.</p>\n<p>So say we have two components <code>A</code> and <code>B</code>, where <code>B</code> imports an exported interface from <code>A</code>, with a function <code>add-callback(...)</code> which is called from component <code>B</code>, and component <code>B</code> exports a function <code>handle-callback(...)</code> which will be call by component <code>A</code> . <code>A</code> doesn't know about the existence of <code>B</code> at compile time (they are dynamically linked).<br>\nIt would work fine for callbacks which are call later (e.g. by an event in the host).<br>\nThe problem now is that since reentrant calls aren't allowed, I can't do this for callbacks which are called immediately (like a <code>predicate</code> function for a <code>filter</code>, so e.g. <code>B</code> calls <code>filter</code> in <code>A</code> with a function in <code>B</code> as the predicate, and then <code>A</code> calls the predicate immediately, because the stack trace would contain <code>B</code>-&gt;<code>A</code>-&gt;<code>B</code> and would reenter B).</p>\n<p>So I just tried disabling the reentrance checks in <code>runtime/component/func.rs</code> and it seems to work fine for my tests. The question here is are there any technical reasons for why the reentrance is dissallowed (e.g. memory saftety violation, deadlocks, race conditions), or is it only because the component model defines this?<br>\nIf there is no hard requirement for it would it then be possible add a feature to allow reentrance for certain components? </p>\n</blockquote>",
        "id": 482036559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731444616
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600#issuecomment-2471598442\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600\">issue #9600</a>:</p>\n<blockquote>\n<p>cc <a href=\"https://github.com/WebAssembly/component-model/issues/234\">https://github.com/WebAssembly/component-model/issues/234</a></p>\n<p>Reentrance is not allowed by Wasmtime because the spec says so. As for why this is the case, see <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md</a>:</p>\n<blockquote>\n<p>Components prevent unexpected reentrance by setting the \"lockdown\" state (in the previous bullet) whenever calling out through an import, clearing the lockdown state on return, thereby preventing reentrant export calls in the interim. This establishes a clear contract between separate components that both prevents obscure composition-time bugs and also enables more-efficient non-reentrant runtime glue code (particularly in the middle of the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">Canonical ABI</a>).</p>\n</blockquote>\n</blockquote>",
        "id": 482040115,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731446106
    },
    {
        "content": "<p>BERADQ <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600#issuecomment-2480946235\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600\">issue #9600</a>:</p>\n<blockquote>\n<p>any progress?</p>\n</blockquote>",
        "id": 482835352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731824883
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600#issuecomment-2483738186\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600\">issue #9600</a>:</p>\n<blockquote>\n<p>@Nimaoth @BERADQ here @bjorn3 is correct in that Wasmtime's current behavior is an implementation of the current component model specification. For changing the behavior here I think it would be best to raise this issue on the component-model repository itself to gather interest among stakeholders there. Wasmtime is unlikely to change behavior in this regard unless there's interest in the specification itself for changing, so inevitably the first step will be to kick off the discussion there.</p>\n</blockquote>",
        "id": 483086050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731952516
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600\">issue #9600</a>:</p>\n<blockquote>\n<p>Hi, I'm currently experimenting with wasm components for a plugin system, and one use case I have is being able to do callbacks between components.</p>\n<p>So say we have two components <code>A</code> and <code>B</code>, where <code>B</code> imports an exported interface from <code>A</code>, with a function <code>add-callback(...)</code> which is called from component <code>B</code>, and component <code>B</code> exports a function <code>handle-callback(...)</code> which will be call by component <code>A</code> . <code>A</code> doesn't know about the existence of <code>B</code> at compile time (they are dynamically linked).<br>\nIt would work fine for callbacks which are call later (e.g. by an event in the host).<br>\nThe problem now is that since reentrant calls aren't allowed, I can't do this for callbacks which are called immediately (like a <code>predicate</code> function for a <code>filter</code>, so e.g. <code>B</code> calls <code>filter</code> in <code>A</code> with a function in <code>B</code> as the predicate, and then <code>A</code> calls the predicate immediately, because the stack trace would contain <code>B</code>-&gt;<code>A</code>-&gt;<code>B</code> and would reenter B).</p>\n<p>So I just tried disabling the reentrance checks in <code>runtime/component/func.rs</code> and it seems to work fine for my tests. The question here is are there any technical reasons for why the reentrance is dissallowed (e.g. memory saftety violation, deadlocks, race conditions), or is it only because the component model defines this?<br>\nIf there is no hard requirement for it would it then be possible add a feature to allow reentrance for certain components? </p>\n</blockquote>",
        "id": 486404192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733437698
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600#issuecomment-2521597420\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9600\">issue #9600</a>:</p>\n<blockquote>\n<p>Cosing this issue as this is an upstream spec matter. If the spec changes, then we can reopen this issue accordingly.</p>\n</blockquote>",
        "id": 486404196,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733437699
    }
]