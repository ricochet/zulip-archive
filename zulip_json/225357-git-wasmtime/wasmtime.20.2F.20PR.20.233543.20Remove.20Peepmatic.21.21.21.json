[
    {
        "content": "<p>fitzgen opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3543\">PR #3543</a> from <code>remove-peepmatic</code> to <code>main</code>:</p>\n<blockquote>\n<p>Peepmatic was an early attempt at a DSL for peephole optimizations, with the<br>\nidea that maybe sometime in the future we could user it for instruction<br>\nselection as well. It didn't really pan out, however:</p>\n<ul>\n<li>\n<p>Peepmatic wasn't quite flexible enough, and adding new operators or snippets<br>\n  of code implemented externally in Rust was a bit of a pain.</p>\n</li>\n<li>\n<p>The performance was never competitive with the hand-written peephole<br>\n  optimizers. It was <em>very</em> size efficient, but that came at the cost of<br>\n  run-time efficiency. Everything was table-based and interpreted, rather than<br>\n  generating any Rust code.</p>\n</li>\n</ul>\n<p>Ultimately, because of these reasons, we never turned Peepmatic on by default.</p>\n<p>These days, we just landed the ISLE domain-specific language, and it is better<br>\nsuited than Peepmatic for all the things that Peepmatic was originally designed<br>\nto do. It is more flexible and easy to integrate with external Rust code. It is<br>\nhas better time efficiency, meeting or even beating hand-written code. I think a<br>\nsmall part of the reason why ISLE excels in these things is because its design<br>\nwas informed by Peepmatic's failures. I still plan on continuing Peepmatic's<br>\nmission to make Cranelift's peephole optimizer passes generated from DSL rewrite<br>\nrules, but using ISLE instead of Peepmatic.</p>\n<p>Thank you Peepmatic, rest in peace!</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 261850317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637183734
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3543\">PR #3543</a>.</p>",
        "id": 261850318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637183734
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3543#pullrequestreview-809175034\">PR review</a>.</p>",
        "id": 261854788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637185721
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3543\">PR #3543</a>.</p>",
        "id": 261855727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637186142
    }
]