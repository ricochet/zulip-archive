[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936\">PR #2936</a> from <code>rm-publish-for-realz</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit removes the publish step in GitHub actions, insteading<br>\nfolding all functionality into the release build steps. This avoids<br>\nhaving a separately scheduled job after all the release build jobs which<br>\nends up getting delayed for quite a long time given the current<br>\nscheduling algorithm.</p>\n<p>This involves refactoring the tarball assembly scripts and refactoring the<br>\ngithub asset upload script too. Tarball assembly now manages everything<br>\ninternally and does platform-specific bits where necessary. The upload<br>\nscript is restructured to be run in parallel (in theory) and hopefully<br>\ncatches various errors and tries to not stomp over everyone else's work.<br>\nThe main trickiness here is handling <code>dev</code>, which is less critical for<br>\ncorrectness than than tags themselves.</p>\n<p>As a small tweak build-wise the QEMU build for cross-compiled builders<br>\nis now cached unlike before where it was unconditionally built, shaving<br>\na minute or two off build time.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 240214126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621960083
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936\">PR #2936</a> from <code>rm-publish-for-realz</code> to <code>main</code>.</p>",
        "id": 240218527,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621961979
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936#pullrequestreview-668125046\">PR review</a>.</p>",
        "id": 240222351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621963755
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936#discussion_r639009076\">PR review comment</a>:</p>\n<blockquote>\n<p>Is it worth distinguishing the \"tag already exists because race\" case from other error cases? There's a potential that e.g. a network hiccup is taken as a collision and we end up without a <code>dev</code> release, otherwise, I think. Perhaps it's not really worth worrying too much about; not sure (the <code>dev</code> release is certainly less important than named releases).</p>\n</blockquote>",
        "id": 240222352,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621963756
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936#pullrequestreview-668125046\">PR review</a>.</p>",
        "id": 240222353,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621963756
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936#pullrequestreview-668145997\">PR review</a>.</p>",
        "id": 240222429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621963790
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936#pullrequestreview-668160914\">PR review</a>.</p>",
        "id": 240224004,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621964440
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936#discussion_r639026215\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't currently know how to handle the right errors (it feels like it's just a bunch of string matching?), but I figured that it's always possible to inject more JS later to figure this out if it becomes an issue. I don't think it's as easy as like <code>if (e instanceof TheErrorWeCareAbout)</code> since I think we'd have to inspect the error which is just the JSON response and figure out the cause of the error from that.</p>\n</blockquote>",
        "id": 240224005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621964441
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2936\">PR #2936</a>.</p>",
        "id": 240225652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621965163
    }
]