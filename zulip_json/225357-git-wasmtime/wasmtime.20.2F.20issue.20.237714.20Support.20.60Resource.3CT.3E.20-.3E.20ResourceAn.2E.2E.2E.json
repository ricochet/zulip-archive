[
    {
        "content": "<p>rvolosatovs opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">issue #7714</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>With #7688 implemented it is now possible to take <code>Resource&lt;T&gt;</code> to <code>ResourceAny</code>, however it does not work for resources provided by <code>wasmtime_wasi</code> crate, since the <code>ResourceImportIndex</code> is not exposed to the developer of those resources.<br>\nThis is particularly important for dynamically-defined functions defined via <code>Linker::func_new</code>, which operates on <code>wasmtime::Val</code> directly. For example, it is currently not possible to return a <code>wasi:io/poll/pollable</code> resource from such a function without defining a custom <code>wasi:io/poll/pollable</code> implementation in the linker to acquire the import index to pass to <code>try_into_resource_any</code> in order to convert it to <code>ResourceAny</code></p>\n<h4>Benefit</h4>\n<p>This allows dymanically-typed function definitions to operate on resources provided by WASI, i.e. it removes the need for developers using dynamically-typed functions utilizing WASI resources from reimplementing (parts of) WASI</p>\n<h4>Implementation</h4>\n<p>Since lookups by string import paths were considered too slow for #7688, it appears that the only alternative would be adapting <code>wit-bindgen</code> (e.g <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810\">https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810</a>) to capture the indexes returned by <code>LinkerInstance::resource</code> calls in a table of some sorts returned by <code>add_to_linker</code>, if we still want to avoid the string lookups, that could be a nested <code>struct</code> type, where an index lookup could look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resource_definitions</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">.</span><span class=\"n\">pollable</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>Allow string lookups for the <code>RuntimeImportIndex</code> as an alternative to the <code>ResourceImportIndex</code> computed at <code>LinkerInstance::resource</code></p>\n</blockquote>",
        "id": 409237479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703095651
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">issue #7714</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>With #7688 implemented it is now possible to take <code>Resource&lt;T&gt;</code> to <code>ResourceAny</code>, however the conversion does not work for resources provided by <code>wasmtime_wasi</code> crate, since the <code>ResourceImportIndex</code> is not exposed to the developer of those resources. </p>\n<p>This is particularly important for dynamically-defined functions defined via <code>Linker::func_new</code>, which operates on <code>wasmtime::Val</code> directly. For example, it is currently not possible to return a <code>wasi:io/poll/pollable</code> resource from such a function without defining a custom <code>wasi:io/poll/pollable</code> implementation in the linker to acquire the import index to pass to <code>try_into_resource_any</code> in order to convert it to <code>ResourceAny</code></p>\n<h4>Benefit</h4>\n<p>This allows dymanically-typed function definitions to operate on resources provided by WASI, i.e. it removes the need for developers using dynamically-typed functions utilizing WASI resources from reimplementing (parts of) WASI</p>\n<h4>Implementation</h4>\n<p>Since lookups by string import paths were considered too slow for #7688, it appears that the only alternative would be adapting <code>wit-bindgen</code> (e.g <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810\">https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810</a>) to capture the indexes returned by <code>LinkerInstance::resource</code> calls in a table of some sorts returned by <code>add_to_linker</code>, if we still want to avoid the string lookups, that could be a nested <code>struct</code> type, where an index lookup could look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resource_definitions</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">.</span><span class=\"n\">pollable</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>Allow string lookups for the <code>RuntimeImportIndex</code> as an alternative to the <code>ResourceImportIndex</code> computed at <code>LinkerInstance::resource</code></p>\n</blockquote>",
        "id": 409237509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703095667
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">issue #7714</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>With #7688 implemented it is now possible to take <code>Resource&lt;T&gt;</code> to <code>ResourceAny</code>, however the conversion does not work for resources provided by <code>wasmtime_wasi</code> crate, since the <code>ResourceImportIndex</code> is not exposed to the developer of those resources. </p>\n<p>This is particularly important for dynamically-defined functions defined via <code>Linker::func_new</code>, which operate on <code>wasmtime::Val</code> directly. For example, it is currently not possible to return a <code>wasi:io/poll/pollable</code> resource from such a function without defining a custom <code>wasi:io/poll/pollable</code> implementation in the linker to acquire the import index to pass to <code>try_into_resource_any</code> in order to convert it to <code>ResourceAny</code></p>\n<h4>Benefit</h4>\n<p>This allows dymanically-typed function definitions to operate on resources provided by WASI, i.e. it removes the need for developers using dynamically-typed functions utilizing WASI resources from reimplementing (parts of) WASI</p>\n<h4>Implementation</h4>\n<p>Since lookups by string import paths were considered too slow for #7688, it appears that the only alternative would be adapting <code>wit-bindgen</code> (e.g <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810\">https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810</a>) to capture the indexes returned by <code>LinkerInstance::resource</code> calls in a table of some sorts returned by <code>add_to_linker</code>, if we still want to avoid the string lookups, that could be a nested <code>struct</code> type, where an index lookup could look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resource_definitions</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">.</span><span class=\"n\">pollable</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>Allow string lookups for the <code>RuntimeImportIndex</code> as an alternative to the <code>ResourceImportIndex</code> computed at <code>LinkerInstance::resource</code></p>\n</blockquote>",
        "id": 409237531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703095679
    },
    {
        "content": "<p>rvolosatovs edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">issue #7714</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>With #7688 implemented it is now possible to take <code>Resource&lt;T&gt;</code> to <code>ResourceAny</code>, however the conversion does not work for resources provided by <code>wasmtime_wasi</code> crate, since the <code>ResourceImportIndex</code> is not exposed to the developer for those resources. </p>\n<p>This is particularly important for dynamically-defined functions defined via <code>Linker::func_new</code>, which operate on <code>wasmtime::Val</code> directly. For example, it is currently not possible to return a <code>wasi:io/poll/pollable</code> resource from such a function without defining a custom <code>wasi:io/poll/pollable</code> implementation in the linker to acquire the import index to pass to <code>try_into_resource_any</code> in order to convert it to <code>ResourceAny</code></p>\n<h4>Benefit</h4>\n<p>This allows dymanically-typed function definitions to operate on resources provided by WASI, i.e. it removes the need for developers using dynamically-typed functions utilizing WASI resources from reimplementing (parts of) WASI</p>\n<h4>Implementation</h4>\n<p>Since lookups by string import paths were considered too slow for #7688, it appears that the only alternative would be adapting <code>wit-bindgen</code> (e.g <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810\">https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810</a>) to capture the indexes returned by <code>LinkerInstance::resource</code> calls in a table of some sorts returned by <code>add_to_linker</code>, if we still want to avoid the string lookups, that could be a nested <code>struct</code> type, where an index lookup could look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resource_definitions</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">.</span><span class=\"n\">pollable</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>Allow string lookups for the <code>RuntimeImportIndex</code> as an alternative to the <code>ResourceImportIndex</code> computed at <code>LinkerInstance::resource</code></p>\n</blockquote>",
        "id": 409238443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1703096067
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714#issuecomment-1881368549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">issue #7714</a>:</p>\n<blockquote>\n<p>I like the idea of the generated <code>add_to_linker</code> function returning a typed structure with <code>*Index</code> items inside of it myself. That seems like a nicely declarative route of communicating the result of all the <code>add_to_linker</code> calls.</p>\n</blockquote>",
        "id": 411768645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1704729947
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7714\">issue #7714</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>With #7688 implemented it is now possible to take <code>Resource&lt;T&gt;</code> to <code>ResourceAny</code>, however the conversion does not work for resources provided by <code>wasmtime_wasi</code> crate, since the <code>ResourceImportIndex</code> is not exposed to the developer for those resources. </p>\n<p>This is particularly important for dynamically-defined functions defined via <code>Linker::func_new</code>, which operate on <code>wasmtime::Val</code> directly. For example, it is currently not possible to return a <code>wasi:io/poll/pollable</code> resource from such a function without defining a custom <code>wasi:io/poll/pollable</code> implementation in the linker to acquire the import index to pass to <code>try_into_resource_any</code> in order to convert it to <code>ResourceAny</code></p>\n<h4>Benefit</h4>\n<p>This allows dymanically-typed function definitions to operate on resources provided by WASI, i.e. it removes the need for developers using dynamically-typed functions utilizing WASI resources from reimplementing (parts of) WASI</p>\n<h4>Implementation</h4>\n<p>Since lookups by string import paths were considered too slow for #7688, it appears that the only alternative would be adapting <code>wit-bindgen</code> (e.g <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810\">https://github.com/bytecodealliance/wasmtime/blob/61e1cdff5a90461ab8de471e100de5b824e079d1/crates/wit-bindgen/src/lib.rs#L810</a>) to capture the indexes returned by <code>LinkerInstance::resource</code> calls in a table of some sorts returned by <code>add_to_linker</code>, if we still want to avoid the string lookups, that could be a nested <code>struct</code> type, where an index lookup could look something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resource_definitions</span><span class=\"p\">.</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">poll</span><span class=\"p\">.</span><span class=\"n\">pollable</span>\n</code></pre></div>\n<h4>Alternatives</h4>\n<p>Allow string lookups for the <code>RuntimeImportIndex</code> as an alternative to the <code>ResourceImportIndex</code> computed at <code>LinkerInstance::resource</code></p>\n</blockquote>",
        "id": 425554291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709916367
    }
]