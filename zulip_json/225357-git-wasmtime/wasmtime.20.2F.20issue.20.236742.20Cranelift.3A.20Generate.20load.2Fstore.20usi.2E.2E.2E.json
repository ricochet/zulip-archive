[
    {
        "content": "<p>maekawatoshiki edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, on aarch64 backend, the following piece of CLIF instructions...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"nc\">int64_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v9</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">int64_t</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">[</span><span class=\"n\">v10</span><span class=\"p\">];</span>\n<span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n</code></pre></div>\n<p>... will generate the assembly like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">lsl</span><span class=\"w\">     </span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">3</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x5</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>However, the assembly can be converted into more efficient one like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>The shorter instruction sequence will help improve the performance.<br>\nIn fact, this problem was found when I was diffing the assembly generated by cranelift and llvm, where llvm was around 20% faster than cranelift in my case.</p>\n<h4>Implementation</h4>\n<p>I've walked through the cranelift codebase and figured out that such addressing mode seems to be represented as <code>AMode::RegScaled</code>, but not sure how I can teach the code generator to use <code>RegScaled</code> for <code>ldr</code>.<br>\nEditing isle rules or something like that?</p>\n</blockquote>",
        "id": 376222530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689655143
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742#issuecomment-1639479308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<p>This would be great to have!</p>\n<p>In fact, we even have a <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61a343bb33a0f582e75af7b7e0a4d7128b8ac533/cranelift/codegen/src/isa/aarch64/lower.rs#L356-L357\">TODO in the code already</a> (but unfortunately it looks like we didn't file an issue at the time, sorry!)</p>\n<p>As can be seen at that link, we actually never translated the <code>lower_address</code> implementation to ISLE, so it's still done with manual pattern-matching in Rust. The ideal longer-term solution would be to rework it into ISLE, as we have <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61a343bb33a0f582e75af7b7e0a4d7128b8ac533/cranelift/codegen/src/isa/x64/inst.isle#L1037\">on x64</a>, which would make additional pattern-matching like this easier. I think we'd prefer that, but it's also a bit more work.</p>\n<p>It <em>might</em> be possible to shoehorn it into the manual Rust code above, but it's a little tricky: the code works by collecting <code>addends32</code> and <code>addends64</code>, with the semantics that the address is the sum of all of those (with 32-bit values zero-extended). We'd have to have a separate <code>shifted</code> (with a type something like <code>Option&lt;(Reg, u8)&gt;</code> to keep a value-in-register and a scale), collect it with the addends, and incorporate it if possible. But that's rapidly getting more complex than the equivalent in ISLE, so I think it's probably not the best approach.</p>\n</blockquote>",
        "id": 376225262,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689656647
    },
    {
        "content": "<p>maekawatoshiki <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742#issuecomment-1639547247\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<p>Thank you for your quick reply.</p>\n<p>I agree that it gets more complicated if we change the current <code>lower_address</code> implementation, but translating <code>lower_address</code> entirely to ISLE is also a hard work.</p>\n<p>I'll try to translate a part of <code>lower_address</code> into ISLE, and hopefully make a PR.</p>\n</blockquote>",
        "id": 376233633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689660324
    },
    {
        "content": "<p>maekawatoshiki edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742#issuecomment-1639547247\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<p>Thank you for your quick reply.</p>\n<p>I agree that it gets more complicated if we change the current <code>lower_address</code> implementation, but translating <code>lower_address</code> entirely to ISLE is also a hard work.</p>\n<p><del>I'll try to translate a part of <code>lower_address</code> into ISLE, and hopefully make a PR.</del><br>\nI've just noticed that it seems to be impossible to partially translate <code>lower_address</code> into ISLE, due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61a343bb33a0f582e75af7b7e0a4d7128b8ac533/cranelift/codegen/src/isa/aarch64/inst.isle#L3060\"><code>(extern constructor amode amode)</code></a> ...</p>\n</blockquote>",
        "id": 376248587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689664958
    },
    {
        "content": "<p>maekawatoshiki edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742#issuecomment-1639547247\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<p>Thank you for your quick reply.</p>\n<p>I agree that it gets more complicated if we change the current <code>lower_address</code> implementation, but translating <code>lower_address</code> entirely to ISLE is also a hard work.</p>\n<p><del>I'll try to translate a part of <code>lower_address</code> into ISLE, and hopefully make a PR.</del><br>\nI've just noticed that it seems to be impossible to partially translate <code>lower_address</code> into ISLE, due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61a343bb33a0f582e75af7b7e0a4d7128b8ac533/cranelift/codegen/src/isa/aarch64/inst.isle#L3060\"><code>(extern constructor amode amode)</code></a> prohibiting defining overlapping rules...</p>\n</blockquote>",
        "id": 376249201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689665148
    },
    {
        "content": "<p>maekawatoshiki edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742#issuecomment-1639547247\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<p>Thank you for your quick reply.</p>\n<p>I agree that it gets more complicated if we change the current <code>lower_address</code> implementation, but translating <code>lower_address</code> entirely to ISLE is also a hard work.</p>\n<p><del>I'll try to translate a part of <code>lower_address</code> into ISLE, and hopefully make a PR.</del><br>\nI've just noticed that it seems to be impossible to partially translate <code>lower_address</code> into ISLE, due to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/61a343bb33a0f582e75af7b7e0a4d7128b8ac533/cranelift/codegen/src/isa/aarch64/inst.isle#L3060\"><code>(extern constructor amode amode)</code></a> ...</p>\n</blockquote>",
        "id": 376250106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689665410
    },
    {
        "content": "<p>maekawatoshiki edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, on aarch64 backend, the following piece of CLIF instructions...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"nc\">int64_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v9</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">int64_t</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">[</span><span class=\"n\">v10</span><span class=\"p\">];</span>\n<span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n</code></pre></div>\n<p>... will generate the assembly like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">lsl</span><span class=\"w\">     </span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">3</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x5</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>However, the assembly can be converted into more efficient one like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>The shorter instruction sequence will help improve the performance.<br>\nIn fact, this problem was found when I was diffing the assembly generated by cranelift and llvm, where llvm was around 10% faster than cranelift in my case.</p>\n<h4>Implementation</h4>\n<p>I've walked through the cranelift codebase and figured out that such addressing mode seems to be represented as <code>AMode::RegScaled</code>, but not sure how I can teach the code generator to use <code>RegScaled</code> for <code>ldr</code>.<br>\nEditing isle rules or something like that?</p>\n</blockquote>",
        "id": 376398395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689695538
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, on aarch64 backend, the following piece of CLIF instructions...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"nc\">int64_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v9</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">int64_t</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">[</span><span class=\"n\">v10</span><span class=\"p\">];</span>\n<span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n</code></pre></div>\n<p>... will generate the assembly like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">lsl</span><span class=\"w\">     </span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">3</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x5</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>However, the assembly can be converted into more efficient one like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>The shorter instruction sequence will help improve the performance.<br>\nIn fact, this problem was found when I was diffing the assembly generated by cranelift and llvm, where llvm was around 10% faster than cranelift in my case.</p>\n<h4>Implementation</h4>\n<p>I've walked through the cranelift codebase and figured out that such addressing mode seems to be represented as <code>AMode::RegScaled</code>, but not sure how I can teach the code generator to use <code>RegScaled</code> for <code>ldr</code>.<br>\nEditing isle rules or something like that?</p>\n</blockquote>",
        "id": 388405791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693515885
    }
]