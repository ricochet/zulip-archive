[
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1419999048\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<blockquote>\n<p>I wonder how many of these former uses of <code>analyze_branch</code> could be replaced with calls to <code>visit_block_succs</code>? I'm pretty sure at least the ones in <code>dominator_tree.rs</code> and <code>flowgraph.rs</code> could be.</p>\n</blockquote>\n<p>That would be a nice refactoring!</p>\n</blockquote>",
        "id": 326265496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675730793
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1420006481\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<p>Just so we're clear: I did push the \"approve\" button, with or without that hypothetical refactoring. :grin: </p>\n</blockquote>",
        "id": 326265976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675731120
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1420625054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<p>Exception handling may introduce a new instruction with semantics identical to br_table with respect to determining successors. analyze_branch would still be useful for that. In addition when a new kind of branch instruction is added, this PR causes there to no longer be a compile error or runtime error when a match is missed. Previously forgetting to add it to analyze_branch would trigger the !is_branch assertion and if a new BranchInfo variant was added you did get a compile error.</p>\n</blockquote>",
        "id": 326339720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675769434
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1420629967\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<p>Maybe the visit_block_succs refactoring could be done and the remaining cases could get the !is_branch assertion added back?</p>\n</blockquote>",
        "id": 326340437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675769694
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421071750\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<blockquote>\n<p>Exception handling may introduce a new instruction with semantics identical to br_table with respect to determining successors. analyze_branch would still be useful for that.</p>\n</blockquote>\n<p>Would that have turned into a return value of <code>BranchInfo::Table</code> in <code>analyze_branch</code>? If so, you would still have needed to re-match the opcode to apply special behavior for your new instruction.</p>\n<blockquote>\n<p>In addition when a new kind of branch instruction is added, this PR causes there to no longer be a compile error or runtime error when a match is missed. Previously forgetting to add it to analyze_branch would trigger the !is_branch assertion and if a new BranchInfo variant was added you did get a compile error.</p>\n</blockquote>\n<p>This is true, however my hope was that we've now arrived at the necessary set of branch instructions and won't need to add any others. We have unconditional jump, conditional branch, and branch through table instructions, which feel like the right building blocks for more complicated control flow. I think the <code>switch</code> module in cranelift-frontend is a great example of this.</p>\n</blockquote>",
        "id": 326404800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675787740
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421229469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would that have turned into a return value of BranchInfo::Table in analyze_branch?</p>\n</blockquote>\n<p>Yes</p>\n<blockquote>\n<p>If so, you would still have needed to re-match the opcode to apply special behavior for your new instruction.</p>\n</blockquote>\n<p>Yeah, in some cases that is indeed necessary. In other cases it doesn't actually care about which exact branch instruction is used. Just which successors exist.</p>\n<blockquote>\n<p>This is true, however my hope was that we've now arrived at the necessary set of branch instructions and won't need to add any others. We have unconditional jump, conditional branch, and branch through table instructions, which feel like the right building blocks for more complicated control flow. I think the switch module in cranelift-frontend is a great example of this.</p>\n</blockquote>\n<p>I see. For exceptions I am pretty sure we will need an invoke/invoke_indirect instruction to be able to define the unwinding path that a call will take. From the clif ir perspective this will be a branch instruction which branches when an exception happens. I don't think this is implementable without support from cranelift-codegen.</p>\n</blockquote>",
        "id": 326425020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675793199
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421263870\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<p>+1 to <code>invoke</code>-family instructions: fundamentally we can't represent the zero-cost exception model without it, I think, because the unwinder is external and effectively jumps to a different return address.</p>\n</blockquote>",
        "id": 326430682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675794818
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421263870\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<p>+1 to <code>invoke</code>-family instructions: fundamentally we can't represent the zero-cost exception model without it (EDIT: being another kind of branch), I think, because the unwinder is external and effectively jumps to a different return address.</p>\n</blockquote>",
        "id": 326430825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675794854
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421267193\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<blockquote>\n<p>I see. For exceptions I am pretty sure we will need an invoke/invoke_indirect instruction to be able to define the unwinding path that a call will take. From the clif ir perspective this will be a branch instruction which branches when an exception happens. I don't think this is implementable without support from cranelift-codegen.</p>\n</blockquote>\n<p>I'll make a PR that both implements @jameysharp's earlier refactoring suggestion, and add <code>assert!(!inst.is_branch())</code> to all the cases that I modified when removing <code>BranchInfo</code>. Does that seem sufficient for not making the addition of <code>invoke</code>/<code>invoke_indirect</code> not too painful?</p>\n</blockquote>",
        "id": 326431268,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675794986
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421268554\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<p>I think that is sufficient.</p>\n</blockquote>",
        "id": 326431461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675795057
    },
    {
        "content": "<p>elliottt edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730#issuecomment-1421267193\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5730\">issue #5730</a>:</p>\n<blockquote>\n<blockquote>\n<p>I see. For exceptions I am pretty sure we will need an invoke/invoke_indirect instruction to be able to define the unwinding path that a call will take. From the clif ir perspective this will be a branch instruction which branches when an exception happens. I don't think this is implementable without support from cranelift-codegen.</p>\n</blockquote>\n<p>I'll make a PR that both implements @jameysharp's earlier refactoring suggestion, and add <code>assert!(!inst.is_branch())</code> to all the cases that I modified when removing <code>BranchInfo</code>. Does that seem sufficient for not making the addition of <code>invoke</code>/<code>invoke_indirect</code> too painful?</p>\n<p>(edited to remove accidental double negative)</p>\n</blockquote>",
        "id": 326431663,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675795110
    }
]