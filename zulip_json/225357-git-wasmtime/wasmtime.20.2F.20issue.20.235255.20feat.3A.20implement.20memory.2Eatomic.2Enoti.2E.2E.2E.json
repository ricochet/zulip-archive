[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1311766687\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>The rustix crate wasmtime already uses has futex support. memory.atomic.{notify,wait32,wait64} are modeled after the futex model afaik, not the thread parking model that parking_lot_core exposes. In addition parking_lot_core is modelled on top of futex on Linux. As such using rustix:<span aria-label=\"thread\" class=\"emoji emoji-1f9f5\" role=\"img\" title=\"thread\">:thread:</span>:futex will likely require less code and be more efficient.</p>\n</blockquote>",
        "id": 309203467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668177151
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1311766687\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>The rustix crate wasmtime already uses has futex support. memory.atomic.{notify,wait32,wait64} are modeled after the futex model afaik, not the thread parking model that parking_lot_core exposes. In addition parking_lot_core is modelled on top of futex on Linux. As such using <code>rustix::thread::futex</code> will likely require less code and be more efficient.</p>\n</blockquote>",
        "id": 309204046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668177341
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1311772407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>@bjorn3 <br>\nI had a futex solution <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...haraldh:wasi-threads-working#diff-aeecd191ed2832ecc670202be8de1d73ff30c8476f710bc5aa6d759bd5d925b9R434\">here</a>, but we need a solution for other OSes and AtomicU64, too.</p>\n</blockquote>",
        "id": 309204562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668177501
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1311775891\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>@bjorn3 see also this <a href=\"https://github.com/WebAssembly/wasi-threads/issues/10#issuecomment-1291896985\">comment</a></p>\n</blockquote>",
        "id": 309205171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668177721
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1311780649\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>Didn't think of wait64. That is indeed an issue.</p>\n</blockquote>",
        "id": 309205962,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668178020
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1317184771\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>Implemented <code>parking_spot</code> as a <code>parking_lot_core</code> replacement.</p>\n</blockquote>",
        "id": 310432858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668611896
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1317308714\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>Err... SIGKILL is hard in the CI :)</p>\n</blockquote>",
        "id": 310449458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668616408
    },
    {
        "content": "<p>haraldh edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1317308714\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>Err... SIGKILL is hard in the CI :)<br>\nedit: maybe a timeout killer?</p>\n</blockquote>",
        "id": 310449858,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668616512
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1317312112\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>Oh, and to reiterate, this will require tests to merge.</p>\n</blockquote>",
        "id": 310449944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668616530
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1317317076\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh, and to reiterate, this will require tests to merge.</p>\n</blockquote>\n<p>@alexcrichton wouldn't that need threading support first, to test it in full action?</p>\n</blockquote>",
        "id": 310450624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668616736
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1317347506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>It would indeed, and everything necessary should be implemented in Wasmtime today. There are, for example, already tests with threads.</p>\n</blockquote>",
        "id": 310454201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668617781
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1318294640\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>Addressed some of the issues, working on the others. Now tested with my real pthread example.</p>\n</blockquote>",
        "id": 310567138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668675188
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1318429151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<p>So, I setup the aarch64 cross compile locally and it passes... just takes some time:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">parking_spot</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"err\">ÓÇ†</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"o\">/</span><span class=\"n\">atomic_wait_notify</span><span class=\"w\"> </span><span class=\"n\">via</span><span class=\"w\"> </span><span class=\"err\">ü¶Ä</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mf\">65.0</span><span class=\"w\"> </span><span class=\"n\">took</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">debian</span><span class=\"o\">-</span><span class=\"n\">toolbox</span>:<span class=\"nc\">latest</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"err\">‚ùØ</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">locked</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">parking_spot</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">lib</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">parking_spot</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">.</span><span class=\"mf\">0.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">harald</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">parking_spot</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">optimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.78</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">unittests</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">harald</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">wasmtime_parking_spot</span><span class=\"o\">-</span><span class=\"mi\">91</span><span class=\"n\">a65de835bf666b</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">atomic_wait_notify</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">hundred_unpark_all_one</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_fifty</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_one</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_one</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_fifty_then_fifty_all</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_hundred_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_one_fifty_then_fifty_all_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_hundred</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_hundred_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">hundred_unpark_all_one_fast</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">seconds</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_one_fast</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">over</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">seconds</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">hundred_unpark_all_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">parking_lot</span>::<span class=\"n\">unpark_all_one_fast</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">98.13</span><span class=\"n\">s</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 310582362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668681301
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1318778727\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh, and to reiterate, this will require tests to merge.</p>\n</blockquote>\n<p>@alexcrichton added one basic test... more to follow</p>\n</blockquote>",
        "id": 310628376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668697858
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1319710211\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 310771803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668761367
    },
    {
        "content": "<p>haraldh <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1319969579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looks reasonable to me, thanks!</p>\n<p>One thing that we'll want to add is embedder APIs to interact with these instructions as well. For eample I think we'll want <code>SharedMemory::{notify,wait32,wait64}</code> which are basically the same wasm instructions but callable by <code>wasmtime</code> embedders, allowing programmatic interactions with threads as well. That doesn't need to be added necessarily in this PR, however, but it might motivate movement of the implementation of these instructions into <code>wasmtime_runtime::SharedMemory</code> instead of keeping it in libcalls in the long run.</p>\n</blockquote>\n<p>added <code>Shared::Memory::atomic_*</code> methods.</p>\n</blockquote>",
        "id": 310817266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668776722
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255#issuecomment-1321050784\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">issue #5255</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 311102274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1668925523
    }
]