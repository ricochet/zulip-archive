[
    {
        "content": "<p>sunshowers opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a> from <code>sunshowers:illumos</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>With this change, the basic wasm tests all pass on illumos. Note the addition of NORESERVE to mmap calls.</p>\n<p>However:</p>\n<p>While wasmtime appears to be functional on illumos, it is still quite slow, particularly in the wast tests. For example, the following test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">beta</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Cranelift</span><span class=\"o\">/</span><span class=\"n\">pooling</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n</code></pre></div>\n<p>takes 0.07 seconds on Linux, but over 5 seconds on illumos. Some profiling suggests that this is due to lock contention inside the kernel while freeing memory, so I don't think this is a wasmtime issue. I'd like to pull some illumos experts in to do some debugging here as time permits, but I don't think this PR should necessarily be held up on that.</p>\n<p>Thanks to iximeow for all the help with this!</p>\n<p>(One note is that due to a <a href=\"https://sunshowers.io/posts/rustc-segfault-illumos/\">rustc segfault on\nillumos</a>, building wasmtime requires Rust 1.83 or higher. I did my building and testing with <code>+beta</code>.)</p>\n</blockquote>",
        "id": 479956173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407129
    },
    {
        "content": "<p><strong>sunshowers</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479956174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407129
    },
    {
        "content": "<p><strong>sunshowers</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479956175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407129
    },
    {
        "content": "<p>sunshowers submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409038666\">PR review</a>.</p>",
        "id": 479956361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407228
    },
    {
        "content": "<p>sunshowers created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825139819\">PR review comment</a>:</p>\n<blockquote>\n<p>Having spent some time digging into this, I believe that we should also pass in NORESERVE on Linux here as well. On Linux this is a bit hidden with overcommit, but e.g. Chromium passes in NORESERVE: <a href=\"https://chromium.googlesource.com/v8/v8/+/chromium/2840/src/base/platform/platform-linux.cc#234\">https://chromium.googlesource.com/v8/v8/+/chromium/2840/src/base/platform/platform-linux.cc#234</a></p>\n</blockquote>",
        "id": 479956363,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407228
    },
    {
        "content": "<p>sunshowers edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825139819\">PR review comment</a>.</p>",
        "id": 479956484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407302
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450782352\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<p>re slowness, for future reference, with 997Hz sampling:</p>\n<p>user stacks: <a href=\"https://gist.github.com/sunshowers/b69b7bd2e671d9c23355d5e952636c5e\">https://gist.github.com/sunshowers/b69b7bd2e671d9c23355d5e952636c5e</a></p>\n<p>kernel stacks: <a href=\"https://gist.github.com/sunshowers/fa822f161e54d57a8103f6736656fbe8\">https://gist.github.com/sunshowers/fa822f161e54d57a8103f6736656fbe8</a></p>\n</blockquote>",
        "id": 479956713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407411
    },
    {
        "content": "<p>sunshowers edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<p>With this change, the basic wasm tests all pass on illumos. Note the addition of NORESERVE to mmap calls.</p>\n<p>However:</p>\n<p>While wasmtime appears to be functional on illumos, it is still quite slow, particularly in the wast tests. For example, the following test:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">beta</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">wast</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Cranelift</span><span class=\"o\">/</span><span class=\"n\">pooling</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">spec_testsuite</span><span class=\"o\">/</span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"n\">wast</span>\n</code></pre></div>\n<p>takes 0.07 seconds on Linux, but over 5 seconds on illumos. Some profiling suggests that this is due to lock contention inside the kernel while freeing memory, so I don't think this is a wasmtime issue. I'd like to pull some illumos experts in to do some debugging here as time permits, but I don't think this PR should necessarily be held up on that.</p>\n<p>Thanks to iximeow for all the help with this!</p>\n<p>(One note is that due to a <a href=\"https://sunshowers.io/posts/rustc-segfault-illumos/\">rustc segfault on illumos</a>, building wasmtime requires Rust 1.83 or higher. I did my building and testing with <code>+beta</code>.)</p>\n</blockquote>",
        "id": 479956759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730407440
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825152471\">PR review comment</a>:</p>\n<blockquote>\n<p>Question for you (as I've not had much experience historically with <code>MMAP_NORESERVE</code>): </p>\n<p>In above situations <code>MMAP_NORESERVE</code> is paired with <code>ProtFlags::empty()</code> which makes sense to me because that's just a VM reservation as opposed to actually needing readable/writable memory at any one point in time. Here,  though, there are read/write flags (same as <code>remap_as_zeros_at</code> below). Does that means that we should leave off <code>MMAP_NORESERVE</code> here?</p>\n<p>This function is for example used for erasing wasm memory that was already accessible to the guest itself so in some sense we in theory already have pages reserved for it, so I think there's a case to be made for leaving off the flag here and below. That being said I'm new to this flag, so I'm curious what you think too!</p>\n</blockquote>",
        "id": 479958935,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730408527
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409051564\">PR review</a>:</p>\n<blockquote>\n<p>This is great, thank you for your time in doing this!</p>\n<p>One high-level question for you: how easy is it to compile for illumos from Linux? For example we'd ideally couple this with a check in our CI that illumos continues to build (e.g. at least via <code>cargo check</code>) but our CI only runs Linux/macOS/Windows right now so we'd have to cross-compile. If it's easy to cross-compile I think it'd be quite reasonable to have a check added to CI that this passes. For example <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a82bdd833d1787953b866b2c375832dd9b911f1b/.github/workflows/main.yml#L507-L510\">this is our FreeBSD check</a> (and reading that again we should probably apply the same trick you've done here with handling vtune/ittapi by default, but that's ok to leave to a future PR)</p>\n<blockquote>\n<p>takes 0.07 seconds on Linux, but over 5 seconds on illumos</p>\n</blockquote>\n<p>Whoa! It looks like the pooling allocator is the part that's slow here and that, by default, has a large number of virtual memory mappings associated with it. For example it'll allocate terabytes of virtual memory and then within that giant chunk it'll slice up roughly 10_000 linear memories (each with guard regions between them). These are prepared with a <code>MemoryImageSlot</code> each.</p>\n<p>My guess is that the way things are managed is tuned to \"this is acceptable due to some fast path in Linux we're hidding\" which we didn't really design for and just happened to run across. I think it'd be reasonable to solve this along a number of lines such as:</p>\n<ul>\n<li>Rely on the kernel to fix this (as you mentioned)</li>\n<li>Change default settings in Wasmtime for illumos (e.g. different defaults for the pooling allocator or something like that)</li>\n<li>Refactor the pooling allocator to have a different allocation strategy by default which is better-by-default on illumos.</li>\n</ul>\n<p>Basically I think it'd be reasonable to handle this in Wasmtime with code changes too. I'm certainly no expert with illumos though so I'm also happy to defer to those with more knowledge of it.</p>\n</blockquote>",
        "id": 479958936,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730408527
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825148394\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds reasonable to me!</p>\n</blockquote>",
        "id": 479958937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730408527
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825149556\">PR review comment</a>:</p>\n<blockquote>\n<p>I think for this one in specific we'll want to leave off <code>NORESERVE</code> since this is creating a mapping that is entirely readable/writable and aren't doing the same trick with address-space reservation like the <code>reserve</code> call below.</p>\n<p>(unless in your testing you found that this was required, in which case I'd be curious to dig in!)</p>\n</blockquote>",
        "id": 479958938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730408527
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450817639\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<blockquote>\n<p>Change default settings in Wasmtime for illumos (e.g. different defaults for the pooling allocator or something like that)</p>\n</blockquote>\n<p>Interesting -- how would I go about doing this? I was floundering around the illumos code haha :)</p>\n</blockquote>",
        "id": 479959609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730408859
    },
    {
        "content": "<p>sunshowers submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409085373\">PR review</a>.</p>",
        "id": 479960311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409214
    },
    {
        "content": "<p>sunshowers created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825169884\">PR review comment</a>:</p>\n<blockquote>\n<p>I was wondering about this and the other cases with non-PROT_NONE permissions! From reading the code it wasn't quite clear to me whether this is memory that guests would certainly have accessed and therefore have physical reservations for already, or memory that guests could merely _theoretically_ access.</p>\n</blockquote>",
        "id": 479960312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409214
    },
    {
        "content": "<p>sunshowers edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450817639\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<blockquote>\n<p>Change default settings in Wasmtime for illumos (e.g. different defaults for the pooling allocator or something like that)</p>\n</blockquote>\n<p>Interesting -- how would I go about doing this? I was floundering around the wasmtime code haha :)</p>\n</blockquote>",
        "id": 479960326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409223
    },
    {
        "content": "<p>sunshowers submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409086179\">PR review</a>.</p>",
        "id": 479960377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409243
    },
    {
        "content": "<p>sunshowers created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825170356\">PR review comment</a>:</p>\n<blockquote>\n<p>@iximeow actually suggested I do this, so I'm wondering if they have thoughts</p>\n</blockquote>",
        "id": 479960382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409243
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450830221\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<blockquote>\n<p>One high-level question for you: how easy is it to compile for illumos from Linux? For example we'd ideally couple this with a check in our CI that illumos continues to build (e.g. at least via cargo check) but our CI only runs Linux/macOS/Windows right now so we'd have to cross-compile. If it's easy to cross-compile I think it'd be quite reasonable to have a check added to CI that this passes.</p>\n</blockquote>\n<p><code>cargo check</code> is definitely feasible. <code>cargo build</code> would require the linker etc, and is likely easier with cross.</p>\n</blockquote>",
        "id": 479960667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409416
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409107161\">PR review</a>.</p>",
        "id": 479961054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409645
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825176056\">PR review comment</a>:</p>\n<blockquote>\n<p>i may have misremembered where <code>decommit_pages</code> gets used! my memory was that this is used when cleaning up after an instance exits, where a new module that could have a smaller max heap size. so my thinking was that even though the pages had been accessible before, we don't yet know if that will still be the case on the instance's next invocation.</p>\n</blockquote>",
        "id": 479961055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409645
    },
    {
        "content": "<p>sunshowers edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450830221\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<blockquote>\n<p>One high-level question for you: how easy is it to compile for illumos from Linux? For example we'd ideally couple this with a check in our CI that illumos continues to build (e.g. at least via cargo check) but our CI only runs Linux/macOS/Windows right now so we'd have to cross-compile. If it's easy to cross-compile I think it'd be quite reasonable to have a check added to CI that this passes.</p>\n</blockquote>\n<p><code>cargo check</code> is definitely feasible. <code>cargo build</code> would require the linker etc, and is likely easier with cross.</p>\n<p>edit: ahh spoke too soon. <code>cargo check</code> on illumos currently fails with \"error occurred: Failed to find tool. Is <code>gar</code> installed?\" (<a href=\"https://gist.github.com/sunshowers/9b9e0103872365fb14b477ecb3b128c9\">full output</a>).</p>\n<p><code>cross build --target x86_64-unknown-illumos</code> appears to work though.</p>\n</blockquote>",
        "id": 479961470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409924
    },
    {
        "content": "<p>sunshowers edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450830221\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<blockquote>\n<p>One high-level question for you: how easy is it to compile for illumos from Linux? For example we'd ideally couple this with a check in our CI that illumos continues to build (e.g. at least via cargo check) but our CI only runs Linux/macOS/Windows right now so we'd have to cross-compile. If it's easy to cross-compile I think it'd be quite reasonable to have a check added to CI that this passes.</p>\n</blockquote>\n<p><code>cargo check</code> is definitely feasible. <code>cargo build</code> would require the linker etc, and is likely easier with cross.</p>\n<p>edit: ahh spoke too soon. <code>cargo check</code> on illumos currently fails with \"error occurred: Failed to find tool. Is <code>gar</code> installed?\" (<a href=\"https://gist.github.com/sunshowers/9b9e0103872365fb14b477ecb3b128c9\">full output</a>).</p>\n<p><code>gar</code> is what GNU <code>ar</code> is called on illumos. One could mangle paths and such but it's easier to just use <code>cross build --target x86_64-unknown-illumos</code>, which works great.</p>\n</blockquote>",
        "id": 479961577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730409977
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409198525\">PR review</a>:</p>\n<blockquote>\n<blockquote>\n<p>but it's easier to just use cross build --target x86_64-unknown-illumos</p>\n</blockquote>\n<p>oh nice! If you'd like to add that here as well feel free, otherwise I'm happy to try to finagle this in a follow-up too</p>\n<hr>\n<p>If you want to setup the <code>NORESERVE</code> flag for linux builds as well I think this might be good to go after that?</p>\n</blockquote>",
        "id": 479967126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413109
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825239020\">PR review comment</a>:</p>\n<blockquote>\n<p>Heh this function definitely has a storied history and has gone through many iterations. I had to reread up on the callsites to refresh myself on what exactly is happening here. @iximeow you're right that this is used after an instance is deallocated, but this is separate from resizing memory. Here <code>decommit_pages</code> is only used to purge backing memory for ranges that were possibly-in-use previously and reset them to their original contents. That's used for both linear memories and tables then. Later other functions like <code>hide_existing_mapping</code> are use to shrink memory or <code>expose_existing_mapping</code> are used to grow memory.</p>\n<p>So put another way: this function is used on memory which was theoretically accessible to wasm but it may or may not have touched because it may not have touched every page in its linear memory. Some of it may be reused for the next instance without further syscalls. Some of it may be hidden via <code>mprotect</code> and then re-exposed via <code>mprotect</code> to use in wasm later on too.</p>\n<p>I suspect Wasmtime's not built currently to work well with precise overcommit because we'd have to hook into <code>expose_existing_mapping</code> as well for example which currently is just a bland <code>mprotect</code>. Otherwise I don't think it's unreasonable to use <code>NORESERVE</code> here.</p>\n<p>Overall though it seems like the main use case for <code>NORESERVE</code> is in the <code>reserve</code> function above where the allocations are often 6G+. Everywhere else should be relatively small allocations/deallocations related to what wasm is about to use or previously using. </p>\n<p>In any case happy to leave this in here and we can always frob it later if necessary.</p>\n</blockquote>",
        "id": 479967127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413109
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409209450\">PR review</a>.</p>",
        "id": 479968192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413800
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825246955\">PR review comment</a>:</p>\n<blockquote>\n<p>on second read, mind moving this up to the first case? I think this is the same as that up there and should only need an update to the <code>#[cfg]</code> to include illumos too</p>\n</blockquote>",
        "id": 479968193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413800
    },
    {
        "content": "<p><strong>sunshowers</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479968272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413824
    },
    {
        "content": "<p>sunshowers updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479968273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413824
    },
    {
        "content": "<p>sunshowers submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409210133\">PR review</a>.</p>",
        "id": 479968301,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413852
    },
    {
        "content": "<p>sunshowers created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825247430\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah good catch.</p>\n</blockquote>",
        "id": 479968302,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413852
    },
    {
        "content": "<p>sunshowers updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479968501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730413961
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450969501\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<p>Ugh, I guess I need to clean the target dir for illumos. Silly glibc.</p>\n</blockquote>",
        "id": 479969080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730414257
    },
    {
        "content": "<p>sunshowers updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479970020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730414863
    },
    {
        "content": "<p>sunshowers updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479970096,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730414902
    },
    {
        "content": "<p>sunshowers updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479970213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730415002
    },
    {
        "content": "<p>sunshowers <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#issuecomment-2450985317\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>:</p>\n<blockquote>\n<p>All right, CI updated and I think this is good to go.</p>\n</blockquote>",
        "id": 479970630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730415272
    },
    {
        "content": "<p>sunshowers submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409229436\">PR review</a>.</p>",
        "id": 479970695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730415327
    },
    {
        "content": "<p>sunshowers created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825261463\">PR review comment</a>:</p>\n<blockquote>\n<p>I left this in based on the discussion below -- do you feel like that's okay or should I test without the flag?</p>\n</blockquote>",
        "id": 479970696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730415327
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409324260\">PR review</a>.</p>",
        "id": 479980876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730423760
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#discussion_r1825327431\">PR review comment</a>:</p>\n<blockquote>\n<p>Nah yeah let's leave it here and see how it goes, it doesn't seem unreasonable given the parts below</p>\n</blockquote>",
        "id": 479980877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730423761
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535#pullrequestreview-2409324815\">PR review</a>.</p>",
        "id": 479980951,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730423815
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9535\">PR #9535</a>.</p>",
        "id": 479982257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730424948
    }
]