[
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1301191911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<blockquote>\n<p>Additionally, this PR marks <code>r14</code> on s390x as non-allocatable, as it's used as the link register in the return instruction.</p>\n</blockquote>\n<p>This is really unfortunate, in general we'll get better code by allowing <code>r14</code> to be allocatable inside the function (and other compilers do this).   I guess modelling this fully correctly would require something like extracting the incoming return address from <code>r14</code> into a vreg at the <code>args</code> instruction, and then passing that vreg back as argument into the return instruction?<br>\n</p>\n</blockquote>",
        "id": 307613175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667421056
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1301206217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Additionally, this PR marks <code>r14</code> on s390x as non-allocatable, as it's used as the link register in the return instruction.</p>\n</blockquote>\n<p>This is really unfortunate, in general we'll get better code by allowing <code>r14</code> to be allocatable inside the function (and other compilers do this). I guess modelling this fully correctly would require something like extracting the incoming return address from <code>r14</code> into a vreg at the <code>args</code> instruction, and then passing that vreg back as argument into the return instruction?</p>\n</blockquote>\n<p>Right, and we can certainly do that. The short-term issue is we want to rework all uses of pinned vregs, so the current approach of naming r14 as such (via the corresponding pinned vreg) has to go, but there's nothing stopping us from doing the same thing in an SSA-friendly way. I might suggest we can do that in a followup PR though, unless @elliottt is willing to do it right away. (And to be clear, I spoke with Trevor yesterday and suggested the approach currently in the PR as a way to make progress for now, so I think waiting is fine.)</p>\n</blockquote>",
        "id": 307614655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667421684
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1301830411\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Additionally, this PR marks <code>r14</code> on s390x as non-allocatable, as it's used as the link register in the return instruction.</p>\n</blockquote>\n<p>This is really unfortunate, in general we'll get better code by allowing <code>r14</code> to be allocatable inside the function (and other compilers do this). I guess modelling this fully correctly would require something like extracting the incoming return address from <code>r14</code> into a vreg at the <code>args</code> instruction, and then passing that vreg back as argument into the return instruction?</p>\n</blockquote>\n<p>Right, and we can certainly do that. The short-term issue is we want to rework all uses of pinned vregs, so the current approach of naming r14 as such (via the corresponding pinned vreg) has to go, but there's nothing stopping us from doing the same thing in an SSA-friendly way. I might suggest we can do that in a followup PR though, unless @elliottt is willing to do it right away. (And to be clear, I spoke with Trevor yesterday and suggested the approach currently in the PR as a way to make progress for now, so I think waiting is fine.)</p>\n</blockquote>\n<p>Sure, I agree, this can be fixed afterwards.</p>\n<p>Actually, there seems to be a much simpler fix: just remove the <code>use</code> of the link register by the return instruction as far as regalloc is concerned.  The return instruction is emitted after the epilog, where by definition all callee-saved registers must have the contents they had on function entry.  As this includes the link register, we know it has the correct content and can just use it without involving the register allocator at all.</p>\n<p>There is another place that might cause issues for regalloc: the call instructions currently have a <code>def</code> of the link register.  But as that value is never actually used by the <em>caller</em>, it doesn't really need to be a <code>def</code> - it would suffice to have the link register as part of the clobbers of the call.<br>\n</p>\n</blockquote>",
        "id": 307684945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667467389
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1302402176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<p>Ah, that is actually a far simpler approach! @elliottt would you be willing to implement this instead?</p>\n</blockquote>",
        "id": 307792771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667494588
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1302459629\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah, that is actually a far simpler approach! @elliottt would you be willing to implement this instead?</p>\n</blockquote>\n<p>Absolutely! Thanks for the suggestion, @uweigand!</p>\n</blockquote>",
        "id": 307802017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667497308
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1302502104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<p>@uweigand I've implemented your suggestion in 57f0a6b.</p>\n</blockquote>",
        "id": 307809572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667499528
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1302561635\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand I've implemented your suggestion in <a href=\"https://github.com/bytecodealliance/wasmtime/commit/57f0a6b915772721a799ce47615d1c35e947e1f9\">57f0a6b</a>.</p>\n</blockquote>\n<p>LGTM, thanks!</p>\n</blockquote>",
        "id": 307820101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667503081
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172#issuecomment-1307701825\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5172\">issue #5172</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand, would you mind taking one last look over the s390x changes? I fixed the struct-return behavior, and would appreciate some additional eyes.</p>\n</blockquote>\n<p>Still looks good to me, code quality seems unchanged compares to the last time I looked.  Note that s390x doesn't actually require the struct-return behavior, that's an Intel issue.  But from what I can see there, this also looks good.</p>\n</blockquote>",
        "id": 308655421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1667934505
    }
]