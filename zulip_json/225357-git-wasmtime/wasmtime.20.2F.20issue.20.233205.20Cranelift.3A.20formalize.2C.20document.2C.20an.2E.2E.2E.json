[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>In #3202 and a number of past issues as well, we've repeatedly encountered some uncertainty as to (i) how boolean values of varying widths are stored in registers, (ii) whether they can be loaded/stored or not and what representation they take in memory (see e.g. #3102 where we addressed this for trampoline args), and (iii) how this interacts with boolean&lt;-&gt;integer conversion ops like <code>bint</code> and <code>bmask</code>.</p>\n<p>The understanding we seem to generally agree on is that booleans of width &gt; 1 bit have all bits set (true) or all bits cleared (false). And a <code>b1</code> is stored in a register with the same invariant as other integer values: the upper bits (in this case everything above the LSB) are undefined.</p>\n<p>However, this is far from being confusion-free and unambiguous; thus, it seems reasonable to (i) agree definitively on how bools are represented in registers and memory, and (ii) audit our compliance to whatever invariants we decide on.</p>\n</blockquote>",
        "id": 249880144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629306186
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>In #3202 and a number of past issues as well, we've repeatedly encountered some uncertainty as to (i) how boolean values of varying widths are stored in registers, (ii) whether they can be loaded/stored or not and what representation they take in memory (see e.g. #3102 where we addressed this for trampoline args), and (iii) how this interacts with boolean&lt;-&gt;integer conversion ops like <code>bint</code> and <code>bmask</code>.</p>\n<p>The understanding we seem to generally agree on is that booleans of width &gt; 1 bit have all bits set (true) or all bits cleared (false). And a <code>b1</code> is stored in a register with the same invariant as other integer values: the upper bits (in this case everything above the LSB) are undefined.</p>\n<p>However, this is far from being confusion-free and unambiguous; thus, it seems reasonable to (i) agree definitively on how bools are represented in registers and memory, and (ii) audit our compliance to whatever invariants we decide on.</p>\n</blockquote>",
        "id": 249880209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629306214
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901279568\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>cc @abrown @afonso360 @bjorn3 @alexcrichton @akirilov-arm for recent folks who've discussed this topic.</p>\n</blockquote>",
        "id": 249880345,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629306256
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901292428\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I'd like to propose the following for loads and stores:</p>\n<ul>\n<li>Define loads and stores of boolean values. We haven't done this in the past, but it is a somewhat incongruous hole in our semantics, IMHO, and we <em>do</em> load and store booleans sometimes behind the scenes (see: trampoline args). I think it would be better if we formally say what it means to do so.</li>\n<li>Let's define the size of a <code>b1</code> to be one byte, and others (<code>b8</code> and up) as the size of the equivalent integer type.</li>\n<li>A store of a <code>b1</code> stores 0 or 1 (i.e., it is zero-extended to 8 bits); a store of a <code>b8</code>..<code>b128</code> stores all zeroes or all ones.</li>\n<li>A load of a boolean type has undefined behavior if the value loaded from memory is not canonical as per the above bullet point.</li>\n</ul>\n<p>The last is probably the most controversial; disallowing loads and stores of bools avoids the semantic question, which may have been why this was done (@sunfishcode comments?). But we already allow bitcasts, so we already have some notion of the bits underlying a bool, so IMHO it's better to allow loading/storing those bits.</p>\n<p>An alternative is to canonicalize a boolean when loading. For a <code>b1</code> this is a mask (<code>and</code> op); for a <code>b8</code> and up we could just compare to zero and if the loaded value is nonzero (any bit is set), canonicalize to <code>true</code> (all bits set). I actually prefer this option, after a bit of thought: it gives well-defined semantics and avoids illegal bool values (e.g. <code>b128</code> with half the bits set) that might cause other undefined behavior.</p>\n<p>Then for bitcasts:</p>\n<ul>\n<li>A raw_bitcast or bitcast from a bool to an int produces the same value that a store would produce.</li>\n<li>A raw_bitcast or bitcast from an int to a bool canonicalizes just as a load does.</li>\n</ul>\n<p>All of the above should fully pin down how we store the values in registers as well: we (i) have a well-defined integer interpretation of the bool, (ii) always store it in canonicalized form (all zeroes or all ones in defined bits), and (iii) keep to the same \"upper bits undefined\" invariant as for integers. With one exception: for a <code>b1</code> type I think that we should maintain the lowest <em>8</em> bits defined, i.e. lowest byte of <code>0x00</code> or <code>0x01</code> only, so that a store can be done without a mask.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 249882982,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629307377
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901292428\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I'd like to propose the following for loads and stores:</p>\n<ul>\n<li>Define loads and stores of boolean values. We haven't done this in the past, but it is a somewhat incongruous hole in our semantics, IMHO, and we <em>do</em> load and store booleans sometimes behind the scenes (see: trampoline args). I think it would be better if we formally say what it means to do so.</li>\n<li>Let's define the size of a <code>b1</code> to be one byte, and others (<code>b8</code> and up) as the size of the equivalent integer type.</li>\n<li>A store of a <code>b1</code> stores 0 or 1 (i.e., it is zero-extended to 8 bits); a store of a <code>b8</code>..<code>b128</code> stores all zeroes or all ones.</li>\n<li>&lt;strike&gt;A load of a boolean type has undefined behavior if the value loaded from memory is not canonical as per the above bullet point.&lt;/strike&gt; <em>better option, see below</em></li>\n</ul>\n<p>The last is probably the most controversial; disallowing loads and stores of bools avoids the semantic question, which may have been why this was done (@sunfishcode comments?). But we already allow bitcasts, so we already have some notion of the bits underlying a bool, so IMHO it's better to allow loading/storing those bits.</p>\n<p>An alternative is to canonicalize a boolean when loading. For a <code>b1</code> this is a mask (<code>and</code> op); for a <code>b8</code> and up we could just compare to zero and if the loaded value is nonzero (any bit is set), canonicalize to <code>true</code> (all bits set). I actually prefer this option, after a bit of thought: it gives well-defined semantics and avoids illegal bool values (e.g. <code>b128</code> with half the bits set) that might cause other undefined behavior.</p>\n<p>Then for bitcasts:</p>\n<ul>\n<li>A raw_bitcast or bitcast from a bool to an int produces the same value that a store would produce.</li>\n<li>A raw_bitcast or bitcast from an int to a bool canonicalizes just as a load does.</li>\n</ul>\n<p>All of the above should fully pin down how we store the values in registers as well: we (i) have a well-defined integer interpretation of the bool, (ii) always store it in canonicalized form (all zeroes or all ones in defined bits), and (iii) keep to the same \"upper bits undefined\" invariant as for integers. With one exception: for a <code>b1</code> type I think that we should maintain the lowest <em>8</em> bits defined, i.e. lowest byte of <code>0x00</code> or <code>0x01</code> only, so that a store can be done without a mask.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 249883186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629307449
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901404151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I've just added this to the agenda for Monday's public Cranelift biweekly meeting as well.</p>\n</blockquote>",
        "id": 249906423,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629318039
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901414872\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I think a side effect of going doing the path above would be that <code>raw_bitcast</code> is no longer necessary. <code>bitcast</code> says: \"A bitcast is equivalent to storing one type and loading the other type from the same address.\" If we can load and store booleans I think that eliminates the reason for <code>raw_bitcast</code>'s existence (?).</p>\n</blockquote>",
        "id": 249908424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629319119
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901417670\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>That's a good point; the distinction between the two is pretty confusing, so if we could remove <code>raw_bitcast</code> as well and have only one kind of bitcast, all the better.</p>\n</blockquote>",
        "id": 249908975,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629319429
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901465989\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<blockquote>\n<p>A store of a <code>b1</code> stores 0 or 1 (i.e., it is zero-extended to 8 bits); a store of a <code>b8</code>..<code>b128</code> stores all zeroes or all ones.</p>\n</blockquote>\n<p>Why not have <code>b1</code> store all ones? The inconsistency between <code>b1</code> and <code>b8..b128</code> is a bit of a surprise.</p>\n</blockquote>",
        "id": 249918789,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629325038
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901468488\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why not have <code>b1</code> store all ones?</p>\n</blockquote>\n<p>So my thought process is: <code>b1</code> is, semantically, one bit wide; so \"all ones\" is just <code>0x01</code>. But because memory is byte-oriented, we have to store a whole byte, so we zero-extend. I definitely recognize this is kind of subjective and \"all ones in all bits that are written\" is just as much a valid perspective though.</p>\n<p>Pragmatic reasons: <code>b1</code> will be most common, and generating a zero or one is slightly easier than zero or <code>-1</code> (all ones), e.g. the one instruction <code>cset</code> on aarch64; and <code>bint</code> (bool to int) from a <code>b1</code> with a zero-or-one value is a no-op (just a copy) while it's a masking operation with zero or <code>-1</code>.</p>\n</blockquote>",
        "id": 249919230,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629325380
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901473558\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I should probably add another possibility too: we could define all of <code>b1</code>..<code>b128</code> to use <code>0</code> for false and <code>1</code> for true.</p>\n<p>The main reason for the all-ones representation, to my understanding, was to be able to use e.g. a <code>b128</code> as a SIMD mask after a <code>raw_bitcast</code> (or at least, that's the way it has been explained to me -- many issues back I think someone linked some code that had assumed this). But this is sort of getting a desired higher-level semantic behavior implicitly by setting up the low-level definitions in a certain way; it would be better to require the \"turn this bool into an all-ones mask\" use-case to use <code>bmask</code>, which already exists for this purpose. Then we get to use the (IMHO) slightly more intuitive <code>0</code>/<code>1</code> values which work well for most cases, and we have a fully consistent behavior. We would just need to look for use-cases that assume all-ones currently and ensure they use <code>bmask</code> instead.</p>\n<p>This probably needs a sanity check from a SIMD perspective though -- @abrown / @jlb6740 / @akirilov-arm, thoughts?</p>\n</blockquote>",
        "id": 249920266,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629326143
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901476385\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>Ah, here is one example of a dependence on all-ones in cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/75eff64977ff149ead73bc0077bac5872d599aa2/src/intrinsics/mod.rs#L293\">link</a> (linked by @afonso360 in #3003)</p>\n</blockquote>",
        "id": 249920823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629326574
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901478585\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I would mention that the all-ones/all-zeroes representation for SIMD is not just because using the output of a comparison as a mask is convenient, it's also that the Wasm SIMD spec <a href=\"https://github.com/WebAssembly/simd/blob/main/proposals/simd/SIMD.md#comparisons\">specifies that representation</a> (but obviously without the boolean type) and that machines (x64, aarch64) represent things this way as well.</p>\n</blockquote>",
        "id": 249921222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629326924
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901498010\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>@abrown this has me thinking further: the existing Wasm-SIMD implementation (lowering in <code>cranelift-wasm</code> specifically) does not use <code>b128</code> (or any other boolean type), right?</p>\n<p>So one fundamental question I have is: what is the use-case for boolean types wider than 1 bit? If for an actual SIMD use-case we represent the mask as an <code>I8X16</code> (that's what I gather from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ddfadaeb384c11d2928fcf89dd1bd4e40692367b/cranelift/wasm/src/code_translator.rs#L2612-L2615\">here</a> and the implementation of <code>optionally_bitcast_vector</code>), then it seems that the question of what Wasm-SIMD masks require is separate from the question of what <code>b128</code> means.</p>\n<p>In other words, what we decide here doesn't impact Wasm-SIMD, because Wasm-SIMD doesn't depend on CLIF-level bool types; so it's better to base on decision on whatever makes the most semantic sense and leads to the least confusion, IMHO.</p>\n<p>If <code>b128</code> is just \"a 1-bit-narrow value stored in a much wider space\", then IMHO it makes as much sense to zero-extend it (as one would zero-extend an <code>i8</code> stored in an <code>i128</code> worth of space) as sign-extend it.</p>\n<p>Argued from another perspective: If we say that booleans (abstractly) have two possible values, then storing such a value in anything wider than 1 bit grants us the freedom to choose the bit representation for each of those two possible values. In other words, <code>b128</code> is still just semantically <code>true</code> or <code>false</code>; the bit-patterns that represent those are invisible at the CLIF-semantics level.</p>\n<p>So I'm starting to convince myself a bit more than the <code>0</code>/<code>1</code> approach is cleanest, and then we need to look for uses of <code>raw_bitcast</code> (as in cg_clif) to peek under the hood and see the actual bits, and convert those uses into <code>bmask</code> or <code>bint</code> as appropriate. But I'm (still) very curious how that sits with others...</p>\n</blockquote>",
        "id": 249924620,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629329739
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-901643025\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<blockquote>\n<p>Why not have b1 store all ones? The inconsistency between b1 and b8..b128 is a bit of a surprise.</p>\n</blockquote>\n<p>Rust stores bools as 0 or 1. Storing b1 as all zeros or all ones would require an extra instruction in the common case to convert it to 0 or 1 when storing it. The larger boolean types are pretty much only useful for vector types where it is common for masks to have all zeros or all ones as value.</p>\n</blockquote>",
        "id": 249946098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629354072
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-903713032\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>@cfallin I am a bit confused about your comments on <code>B128</code> and its relation to SIMD - isn't that a scalar type? I.e. in the SIMD case wouldn't one use something like <code>B16X8</code>?</p>\n<blockquote>\n<p>Pragmatic reasons: <code>b1</code> will be most common, and generating a zero or one is slightly easier than zero or <code>-1</code> (all ones), e.g. the one instruction <code>cset</code> on aarch64...</p>\n</blockquote>\n<p>The all ones case is actually a single AArch64 instruction as well, <code>CSETM</code> (assuming that the upper bits for types like <code>B16</code> are undefined, so that we can set them to all ones).</p>\n</blockquote>",
        "id": 250342948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629721085
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-903873941\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>@akirilov-arm indeed, that was more or less my point as well -- in the past it has been described as all-ones \"because SIMD\" and e.g. see the <code>raw_bitcast</code> linked above that uses it as a mask, but really it's a <code>true</code>/<code>false</code> value still, and so the fundamental question is \"what does a multi-bit scalar boolean mean\".</p>\n</blockquote>",
        "id": 250367518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629732347
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>In #3202 and a number of past issues as well, we've repeatedly encountered some uncertainty as to (i) how boolean values of varying widths are stored in registers, (ii) whether they can be loaded/stored or not and what representation they take in memory (see e.g. #3102 where we addressed this for trampoline args), and (iii) how this interacts with boolean&lt;-&gt;integer conversion ops like <code>bint</code> and <code>bmask</code>.</p>\n<p>The understanding we seem to generally agree on is that booleans of width &gt; 1 bit have all bits set (true) or all bits cleared (false). And a <code>b1</code> is stored in a register with the same invariant as other integer values: the upper bits (in this case everything above the LSB) are undefined.</p>\n<p>However, this is far from being confusion-free and unambiguous; thus, it seems reasonable to (i) agree definitively on how bools are represented in registers and memory, and (ii) audit our compliance to whatever invariants we decide on.</p>\n</blockquote>",
        "id": 281231889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651705102
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>In #3202 and a number of past issues as well, we've repeatedly encountered some uncertainty as to (i) how boolean values of varying widths are stored in registers, (ii) whether they can be loaded/stored or not and what representation they take in memory (see e.g. #3102 where we addressed this for trampoline args), and (iii) how this interacts with boolean&lt;-&gt;integer conversion ops like <code>bint</code> and <code>bmask</code>.</p>\n<p>The understanding we seem to generally agree on is that booleans of width &gt; 1 bit have all bits set (true) or all bits cleared (false). And a <code>b1</code> is stored in a register with the same invariant as other integer values: the upper bits (in this case everything above the LSB) are undefined.</p>\n<p>However, this is far from being confusion-free and unambiguous; thus, it seems reasonable to (i) agree definitively on how bools are represented in registers and memory, and (ii) audit our compliance to whatever invariants we decide on.</p>\n</blockquote>",
        "id": 281231891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651705106
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-1267590607\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>Here's a link to the <a href=\"https://github.com/bytecodealliance/meetings/blob/main/cranelift/2021/cranelift-08-23.md#notes-1\">2021-08-23</a> meeting notes where this was discussed originally.</p>\n</blockquote>",
        "id": 302349031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664918422
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-1267713534\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>There has been discussion recently about whether or not we need the boolean types at all, and we seem to be converging on the opinion that we should remove them rather than handle the issues surrounding load/store with <code>b1</code> values. Effectively, this would mean that we will remove all boolean types, scalar and vector, replacing them with their bit-width integer equivalent (except for <code>b1</code> that would be replaced with <code>i8</code>).</p>\n<p>I'd like to propose the following semantics for instructions that return boolean values now:</p>\n<ul>\n<li>Instructions that currently return <code>b1</code> values will switch to returning <code>i8</code> values in the range [0,1]. This doesn't immediately address the current issues surrounding load/store with <code>b1</code> values, and I'm interested to hear how we should address cases that look like <code>x = load.i8 ...; brz x ...</code>.</li>\n<li>All other boolean types would return integer values of the same bit-width, where true would be represented as all <code>1</code>s and false would be represented as all <code>0</code>s. I believe this would be effectively no value-level change from the current behavior.</li>\n</ul>\n</blockquote>",
        "id": 302363058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664925913
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-1267732416\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>Thanks @elliottt -- I think the above is largely a good plan and will result in nice simplifications and removal of awkward special cases!</p>\n<blockquote>\n<p><code>x = load.i8 ...; brz x ...</code></p>\n</blockquote>\n<p>For this case specifically I think the semantics would be for <code>brz</code> to branch if <code>x != 0</code>; in fact I think it already works this way (accepted types defined <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e63771f2d921cdce440620dbf38bd3e186747b1e/cranelift/codegen/meta/src/shared/instructions.rs#L40-L47\">here</a> and the mnemonics are \"branch if zero\" and \"branch if not zero\"). So the 0/1 encodings of a bool work as always, and other nonzero values are also truthy.</p>\n</blockquote>",
        "id": 302365615,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664927316
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205#issuecomment-1268642200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>I agree. IIRC, there may be an optimization or two that rely on the boolean type but given the move towards e-graphs those optimizations will need to be re-worked anyway.</p>\n</blockquote>",
        "id": 302493306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664986556
    },
    {
        "content": "<p>elliottt closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3205\">issue #3205</a>:</p>\n<blockquote>\n<p>In #3202 and a number of past issues as well, we've repeatedly encountered some uncertainty as to (i) how boolean values of varying widths are stored in registers, (ii) whether they can be loaded/stored or not and what representation they take in memory (see e.g. #3102 where we addressed this for trampoline args), and (iii) how this interacts with boolean&lt;-&gt;integer conversion ops like <code>bint</code> and <code>bmask</code>.</p>\n<p>The understanding we seem to generally agree on is that booleans of width &gt; 1 bit have all bits set (true) or all bits cleared (false). And a <code>b1</code> is stored in a register with the same invariant as other integer values: the upper bits (in this case everything above the LSB) are undefined.</p>\n<p>However, this is far from being confusion-free and unambiguous; thus, it seems reasonable to (i) agree definitively on how bools are represented in registers and memory, and (ii) audit our compliance to whatever invariants we decide on.</p>\n</blockquote>",
        "id": 304575992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1666047629
    }
]