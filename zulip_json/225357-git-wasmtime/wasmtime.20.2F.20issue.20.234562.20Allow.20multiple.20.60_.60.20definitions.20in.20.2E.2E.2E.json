[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#issuecomment-1200034219\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">issue #4562</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 291393491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659137856
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#issuecomment-1201426350\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">issue #4562</a>:</p>\n<blockquote>\n<p>It might be better to implement full shadowing instead, which would resolve #3526.</p>\n</blockquote>",
        "id": 291599246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659371088
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#issuecomment-1201619506\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">issue #4562</a>:</p>\n<blockquote>\n<p>@cfallin I went the route of implementing shadowing instead, as it seems like a more complete solution to the problem. To resolve the issue of restoring the previous bindings, I turned the <code>TypeEnv::sym_map</code> field into a vector of maps, ensuring that the vector is never empty. I'd be happy to replace the vector of maps with a more efficient implementation <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 291621510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659381909
    },
    {
        "content": "<p>elliottt <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562#issuecomment-1201652437\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4562\">issue #4562</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for pushing further and doing full shadowing!</p>\n<p>However I think there may be a simpler way to do this. I didn't expect the symbol-interning itself to become aware of nested scopes, and in fact that could (?) lead to unexpected behavior later if we remove a binding. Basically I had meant for that to be an interning layer so that we could use <code>Sym</code> indices everywhere as a substitute for string identifiers.</p>\n<p>Instead I had expected <code>bindings</code> to handle the scope entry and exit. It was actually structured originally with the intent of supporting shadowing some day: it remains an ordered list of bindings (in order of introduction). We truncate away all bindings within the <code>let</code> after we process the <code>let</code>'s body. I suspect all we need to do is to remove the \"am I shadowing another binding\" check (line 1954 in the original <code>sema.rs</code>), and ensure that the search for a binding occurs as a reverse search from the end (I _believe_ it already might). Does that make sense?</p>\n</blockquote>\n<p>This makes sense, and is indeed a much simpler approach. The var lookup already searches backwards through the bindings, so this really might be as simple as removing the check for duplicate bindings.</p>\n</blockquote>",
        "id": 291625804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659384103
    }
]