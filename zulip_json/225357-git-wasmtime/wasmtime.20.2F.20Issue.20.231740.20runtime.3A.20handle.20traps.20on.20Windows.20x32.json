[
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740#issuecomment-632330646\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740\">Issue #1740</a>:</p>\n<blockquote>\n<p>Your assessment of this for x86 is correct.  In x86, SEH handlers are registered via a stack-based linked list of handlers, with the head in the TIB (at <code>FS:[0]</code>).</p>\n<p>As we don't currently have exception handling in Wasm frames and we always use frame pointers, there's nothing here to do for x86.</p>\n<p>When we do have exception handling in Wasm frames, we will need completely different prologue/epilogue generation for 32-bit Windows for setting up SEH.</p>\n<p>Given the plethora of calling conventions on 32-bit Windows, lack of unwind information, and SEH affecting code gen, it's really an unpleasant target to work with from a tooling perspective. </p>\n</blockquote>",
        "id": 198373537,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590093247
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740#issuecomment-632331557\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740\">Issue #1740</a>:</p>\n<blockquote>\n<p>On the plus side, Microsoft is no longer shipping 32-bit Windows going forward <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>.</p>\n</blockquote>",
        "id": 198373729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590093358
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740#issuecomment-632336024\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740\">Issue #1740</a>:</p>\n<blockquote>\n<blockquote>\n<p>On the plus side, Microsoft is no longer shipping 32-bit Windows going forward .</p>\n</blockquote>\n<p>Yeah, but I'll support 32-bit applications forever. I'm trying to ship a Python package that uses wasmtime, and the Python installer suggested by <a href=\"http://python.org\">http://python.org</a> is still 32-bit.</p>\n</blockquote>",
        "id": 198374947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590093927
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740#issuecomment-632336024\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1740\">Issue #1740</a>:</p>\n<blockquote>\n<blockquote>\n<p>On the plus side, Microsoft is no longer shipping 32-bit Windows going forward .</p>\n</blockquote>\n<p>Yeah, but it'll support 32-bit applications forever. I'm trying to ship a Python package that uses wasmtime, and the Python installer suggested by <a href=\"http://python.org\">http://python.org</a> is still 32-bit.</p>\n</blockquote>",
        "id": 198374964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590093934
    }
]