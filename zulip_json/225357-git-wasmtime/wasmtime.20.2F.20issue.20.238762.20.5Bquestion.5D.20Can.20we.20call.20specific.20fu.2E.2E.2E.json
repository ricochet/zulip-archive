[
    {
        "content": "<p>nyue opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762\">issue #8762</a>:</p>\n<blockquote>\n<p>I am studying this C and WASI approach</p>\n<p><a href=\"https://docs.wasmtime.dev/examples-c-wasi.html\">https://docs.wasmtime.dev/examples-c-wasi.html</a></p>\n<p>Let's say I have something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">myfunction1</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"My function 1, {}!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">first_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">myfunction2</span><span class=\"p\">(</span><span class=\"n\">last_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"My function 2, {}!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Can I call myfunction1 and myfunction2 via wasmtime C-API ?</p>\n<p>How would the C code call look like ? Is there some example I can reference for further studying ?</p>\n<p>Cheers<br>\n</p>\n</blockquote>",
        "id": 443539228,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717895154
    },
    {
        "content": "<p>ssnover <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762#issuecomment-2156804157\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762\">issue #8762</a>:</p>\n<blockquote>\n<p>Check out the next page: <a href=\"https://docs.wasmtime.dev/examples-c-linking.html\">https://docs.wasmtime.dev/examples-c-linking.html</a></p>\n<p>There they get a function which was defined and exported from the wasm module called <code>run</code>, then call it.</p>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Lookup our `run` export function</span>\n<span class=\"n\">wasmtime_extern_t</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">;</span>\n<span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_instance_export_get</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linking1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">run</span><span class=\"p\">);</span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"p\">);</span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_EXTERN_FUNC</span><span class=\"p\">);</span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_func_call</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">of</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">exit_with_error</span><span class=\"p\">(</span><span class=\"s\">\"failed to call run\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 443646093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717969704
    },
    {
        "content": "<p>ssnover edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762#issuecomment-2156804157\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762\">issue #8762</a>:</p>\n<blockquote>\n<p>Check out the next page: <a href=\"https://docs.wasmtime.dev/examples-c-linking.html\">https://docs.wasmtime.dev/examples-c-linking.html</a></p>\n<p>There they get a function which was defined and exported from the wasm module called <code>run</code>, then call it. (the following pages show some examples of passing arguments to the exported function)</p>\n<p><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"c1\">// Lookup our `run` export function</span>\n<span class=\"n\">wasmtime_extern_t</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">;</span>\n<span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_instance_export_get</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linking1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"run\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">run</span><span class=\"p\">);</span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"p\">);</span>\n<span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_EXTERN_FUNC</span><span class=\"p\">);</span>\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_func_call</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">of</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">trap</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">exit_with_error</span><span class=\"p\">(</span><span class=\"s\">\"failed to call run\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trap</span><span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 443646362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717969828
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762#issuecomment-2158599276\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762\">issue #8762</a>:</p>\n<blockquote>\n<p>To better understand how to work with a module like this in C you'll need to probably understand how Rust translates to wasm. For example the functions you listed above there's a number of issues:</p>\n<ul>\n<li>Neither function will actually be exported from the WebAssembly module produced. They both lack <code>pub extern \"C\" fn ...</code> in addition to <code>#[no_mangle]</code>. Hosts can only access exports of a wasm module, so you'll need to understand Rust's model for compiling to wasm (or play around with some examples).</li>\n<li>The argument to these functions is <code>&amp;str</code> which does not have a stable ABI in Rust. That will currently map to two <code>i32</code> function parameters in wasm. You'll need to understand what these are and how to pass them from the host. Right now I believe that this is a pointer parameter into linear memory and a string byte length. This may change in the future due to Rust's ABI guarantees so for example it would be recommended to take <code>*const u8</code> and <code>usize</code> parameters instead.</li>\n<li>One argument is a pointer but you'll need to pass a valid pointer. Acquiring a valid pointer is not easy to do and would probably require the module to export a <code>malloc</code>-style function first. You'll need to call that, copy in the data, then pass the pointer to these functions.</li>\n</ul>\n<p>Overall the tl;dr; is that calling functions like the ones you're outlining is going to require a good deal of work. Much of that is sort of just the reality of wasm, it's a \"virtual CPU\" and there's lots of stuff you need to do to interact with a CPU. This is one of the reasons we've been working on the component model is that it ends up handling much of this for you. That being said the component model does not have a C API at this time, so I bring this up mostly to put something on your radar, not to propose a solution for you at this time.</p>\n</blockquote>",
        "id": 443790648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718031611
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762\">issue #8762</a>:</p>\n<blockquote>\n<p>I am studying this C and WASI approach</p>\n<p><a href=\"https://docs.wasmtime.dev/examples-c-wasi.html\">https://docs.wasmtime.dev/examples-c-wasi.html</a></p>\n<p>Let's say I have something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">myfunction1</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"My function 1, {}!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">first_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">myfunction2</span><span class=\"p\">(</span><span class=\"n\">last_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"My function 2, {}!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">last_name</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Can I call myfunction1 and myfunction2 via wasmtime C-API ?</p>\n<p>How would the C code call look like ? Is there some example I can reference for further studying ?</p>\n<p>Cheers<br>\n</p>\n</blockquote>",
        "id": 445216207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718655130
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762#issuecomment-2174339405\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8762\">issue #8762</a>:</p>\n<blockquote>\n<p>I think this has been answered so I'm going to close this, but if there's still more questions feel free to comment and/or open another issue.</p>\n</blockquote>",
        "id": 445216209,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718655131
    }
]