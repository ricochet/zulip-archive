[
    {
        "content": "<p>theduke opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> .<br>\n</p>\n</blockquote>",
        "id": 220495481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608425374
    },
    {
        "content": "<p>theduke edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 220495533,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608425428
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 220496237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1608426711
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561176595\">PR Review</a>.</p>",
        "id": 221548204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609778901
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551435286\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could this documentation detail the error cases as well? It also might be good to mention that the size of the copy is the size of the buffer itself.</p>\n</blockquote>",
        "id": 221548205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609778902
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561176595\">PR Review</a>.</p>",
        "id": 221548206,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609778902
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551434519\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW I don't think that we'll ever need this error because we'll basically be implementing <code>memory.copy</code> semantics which would never need an error for this.</p>\n</blockquote>",
        "id": 221548207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609778902
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551435547\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think here this will want to use <code>checked_add</code> to avoid overflow.</p>\n</blockquote>",
        "id": 221548208,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609778902
    },
    {
        "content": "<p>theduke submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561277155\">PR Review</a>.</p>",
        "id": 221567668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609787941
    },
    {
        "content": "<p>theduke created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551515342\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In that case ... should the error just be a struct? </p>\n<p>I don't see any other relevant error conditions.</p>\n</blockquote>",
        "id": 221567669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609787941
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561279648\">PR Review</a>.</p>",
        "id": 221568170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609788172
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551517266\">PR Review Comment</a>:</p>\n<blockquote>\n<p>That's true yeah, and I think we could go ahead and have it just be an opaque structure with a singular private field so we can add more to it later if we want.</p>\n</blockquote>",
        "id": 221568171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609788172
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 221571166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789603
    },
    {
        "content": "<p>theduke submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561295658\">PR Review</a>.</p>",
        "id": 221571213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789620
    },
    {
        "content": "<p>theduke created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551530228\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done.</p>\n</blockquote>",
        "id": 221571214,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789620
    },
    {
        "content": "<p>theduke created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551530658\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah yeah, I'm too used to <code>debug</code> semantics for overflow checking...</p>\n<p>Both <code>read</code> and <code>write</code> now use <code>checked_add</code>.</p>\n</blockquote>",
        "id": 221571325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789671
    },
    {
        "content": "<p>theduke submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561296237\">PR Review</a>.</p>",
        "id": 221571327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789671
    },
    {
        "content": "<p>theduke submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561296593\">PR Review</a>.</p>",
        "id": 221571434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789703
    },
    {
        "content": "<p>theduke created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551530952\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I expanded the docs for both <code>read</code> and <code>write</code> a bit.</p>\n</blockquote>",
        "id": 221571435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789703
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 221571849,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609789888
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 221573507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609790643
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 221575914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609791867
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561321873\">PR Review</a>.</p>",
        "id": 221576599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792214
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551550735\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think it should be ok to drop the <code>PartialEq</code> here</p>\n</blockquote>",
        "id": 221576600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792214
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561321873\">PR Review</a>.</p>",
        "id": 221576601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792214
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551550926\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It's ok to remove this comment, I don't think it adds much over what the existence of the <code>checked_add</code> already implies.</p>\n</blockquote>",
        "id": 221576603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792214
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551551553\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Although thinking about this again, another perhaps safer way to write these methods would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_unchecked</span><span class=\"p\">().</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"o\">..</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">copy_from_slice</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(and something similar below)</p>\n</blockquote>",
        "id": 221576604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792214
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#pullrequestreview-561323563\">PR Review</a>.</p>",
        "id": 221576685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792261
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528#discussion_r551552037\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Or actually to avoid having to do checked arithmetic:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_unchecked</span><span class=\"p\">().</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"o\">..</span><span class=\"p\">).</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 221576686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609792261
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 223995077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611633855
    },
    {
        "content": "<p>theduke updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a> from <code>issue-2484-safe-memory-access</code> to <code>main</code>:</p>\n<blockquote>\n<p>Introduce <code>Memory::read</code> and <code>Memory::write</code> methods for accessing memory contents safely.</p>\n<p>Also adds a test and mentions the  the new methods in the <code>Memory</code> docs.</p>\n<p>Fixes #2484.</p>\n<p>Currently most fallible methods use <code>anyhow::Error</code>. <br>\nI have instead added a new <code>MemoryError</code>, since recovering from such errors is possible and it's more expressive.<br>\n(future proofed with <code>#[non_exhaustive]</code>).</p>\n<p>Could to change it to a <code>anyhow::Error</code> if that's the preferred strategy (or wrap the MemoryError with anyhow).</p>\n<p>I also already added a <code>MemoryError::Locked</code> variant, which is not required yet, but apparently will be once threading support lands. Happy to remove it or slap on a <code>#[doc(hidden)]</code> to prevent confusion.<br>\n</p>\n</blockquote>",
        "id": 223995190,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611634074
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">PR #2528</a>.</p>",
        "id": 224052056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611673761
    }
]