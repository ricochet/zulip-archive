[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> from <code>fuzz-stats</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR Introduces a statistics module for fuzzgen. This allows us to measure stuff and get some info about what is going on.</p>\n<p>I don't want to commit this in its current format since it has some issues, see the comments below.</p>\n<p>Here's the output after 50000 inputs:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">FuzzGen</span><span class=\"w\"> </span><span class=\"n\">Statistics</span><span class=\"w\">  </span><span class=\"o\">====================</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">50000</span><span class=\"w\"></span>\n<span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"n\">Inputs</span>: <span class=\"mi\">29130</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">58.3</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">42358</span><span class=\"w\"></span>\n<span class=\"n\">Successful</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">17564</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">41.5</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Timed</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">Runs</span>: <span class=\"mi\">12445</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">29.4</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Traps</span>:\n        <span class=\"nc\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">icall_null</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">int_divz</span>: <span class=\"mi\">12349</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">29.2</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">debug</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">heap_misaligned</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_sig</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">bad_toint</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">interrupt</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">unreachable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">table_oob</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">resumable</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">user</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">stk_ovf</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Total</span><span class=\"w\"> </span><span class=\"n\">Runs</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 297137805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322527
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1095710066\">PR review</a>.</p>",
        "id": 297137901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322644
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962364038\">PR review comment</a>:</p>\n<blockquote>\n<p>I think doing this looses us the nice <code>cargo fmt</code> output which is not great. Do we have some other way of getting the amount of inputs that the fuzzer tried, while using the Arbitrary version of the macro?</p>\n</blockquote>",
        "id": 297137902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322644
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962364038\">PR review comment</a>.</p>",
        "id": 297137992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322726
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962364038\">PR review comment</a>.</p>",
        "id": 297138013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322751
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962364038\">PR review comment</a>.</p>",
        "id": 297138021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322765
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962364038\">PR review comment</a>.</p>",
        "id": 297138037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662322798
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> from <code>fuzz-stats</code> to <code>main</code>.</p>",
        "id": 297139166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662323924
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1096079015\">PR review</a>.</p>",
        "id": 297186361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662367075
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962639317\">PR review comment</a>:</p>\n<blockquote>\n<p>Comparing Traps and Timeouts against runs is a correct but misleading metric.</p>\n<p>We have many runs per input.</p>\n<p>Every run has a chance to either trap or timeout. However when they do so we drop the entire input instead of just that run. This causes these values to be under represented in terms of percentage.</p>\n<p>A better metric would be timeouts / valid inputs. But it also seems like a very wrong metric in its own way. However it would better represent inefficiencies in the fuzzer.</p>\n</blockquote>",
        "id": 297186362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662367075
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r962639317\">PR review comment</a>.</p>",
        "id": 297186451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662367098
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1098419404\">PR review</a>.</p>",
        "id": 297511453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662514535
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r964303550\">PR review comment</a>:</p>\n<blockquote>\n<p>As a crude hack, we could duplicate the logic in the libfuzzer crate that's triggered by the <code>RUST_LIBFUZZER_DEBUG_PATH</code> environment variable: <a href=\"https://github.com/rust-fuzz/libfuzzer/blob/63b922685a0e714d2e7d2af9050e8860d5f6dc09/src/lib.rs#L203-L218\">https://github.com/rust-fuzz/libfuzzer/blob/63b922685a0e714d2e7d2af9050e8860d5f6dc09/src/lib.rs#L203-L218</a></p>\n<p>I've been trying to work out how to gather statistics like this from all the fuzz targets, and the other problem that bothers me is how to report results at the end of the run. At the moment the option I find most appealing is if somebody sorts out <a href=\"https://github.com/rust-fuzz/libfuzzer/issues/46\">https://github.com/rust-fuzz/libfuzzer/issues/46</a>. As I noted over there, it's also possible to use <code>libc::atexit</code>, but only if you're careful not to use any Rust I/O functions in the at-exit handler.</p>\n</blockquote>",
        "id": 297511454,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662514535
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1099796036\">PR review</a>.</p>",
        "id": 297670749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662583711
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r965284113\">PR review comment</a>:</p>\n<blockquote>\n<p>In a variety of fuzz targets I've written in the past, we have something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">ITER</span>: <span class=\"nc\">AtomicUsize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">fuzz_target</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">data</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ITER</span><span class=\"p\">.</span><span class=\"n\">fetch_add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">log</span>::<span class=\"n\">is_enabled</span><span class=\"p\">(</span><span class=\"n\">log</span>::<span class=\"n\">Level</span>::<span class=\"n\">Info</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dump_statistics</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and this has worked out pretty well, with adjustments to <code>1024</code> as needed for the fuzz target's throughput, of course.</p>\n</blockquote>",
        "id": 297670750,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662583711
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1099891086\">PR review</a>.</p>",
        "id": 297683236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662589772
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r965350981\">PR review comment</a>:</p>\n<blockquote>\n<p>That's approximately what Afonso has done in this PR, and what Andrew did in the <code>differential</code> fuzz target. It's a pattern that has already helped us find important issues in both fuzzers, so that's great!</p>\n<p>An alternative is what the <a href=\"https://docs.rs/metrics_printer/latest/metrics_printer/\">metrics_printer</a> crate does: kick off a thread and dump metrics at a periodic interval. That avoids having to separately tune for each fuzz target's throughput.</p>\n<p>But one thing I'd like to be able to do is get these statistics for OSS-Fuzz runs. I had the thought that instead of slowing down fuzzing, maybe we could fetch the corpus from OSS-Fuzz and replay it locally with stats collection turned on. Those corpora currently range from under 2k up to 25k tests. It's possible each corpus is heavily biased in terms of the statistics we care about, compared to the full run which produced it. So maybe this isn't an effective alternative to just dumping stats to the OSS-Fuzz stderr log. But if it is: I don't see any way right now to make metrics printing useful with so few tests, except by setting an environment variable with the number of inputs and having the fuzz target print after it has processed that many inputs.</p>\n<p>Afonso's recent testing has a related issue. I noticed the test plan was \"ask libfuzzer to run 100,010 inputs\" and the statistics are printed after a hardcoded number of inputs (this PR says 50k but I'm guessing it was 100k for these experiments), so there are about 10 tests that get run at the end without being counted in the stats. If you try to make these two numbers equal, it's tedious to reason about whether the current test is included in the count or not, so adding a few extra tests on the end just to be sure makes total sense.</p>\n<p>Again, an environment variable could help since we know how many tests we're trying to run. But in both cases I'd really rather just be able to print the statistics when libFuzzer is done with its run, and not have to tune anything at all.</p>\n</blockquote>",
        "id": 297683238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1662589772
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> from <code>fuzz-stats</code> to <code>main</code>.</p>",
        "id": 298969449,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663248935
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1118933307\">PR review</a>.</p>",
        "id": 300433518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663959955
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987574\">PR review comment</a>:</p>\n<blockquote>\n<p>I think this is no longer very relevant timeouts are now solidly in 0.0% territory and with #4895 it now makes sense to compare traps with runs since they no longer drop an input.</p>\n</blockquote>",
        "id": 300433519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663959955
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1118933528\">PR review</a>.</p>",
        "id": 300433594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663959969
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987722\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>As a crude hack, we could duplicate the logic in the libfuzzer crate that's triggered by the RUST_LIBFUZZER_DEBUG_PATH environment variable: <a href=\"https://github.com/rust-fuzz/libfuzzer/blob/63b922685a0e714d2e7d2af9050e8860d5f6dc09/src/lib.rs#L203-L218\">https://github.com/rust-fuzz/libfuzzer/blob/63b922685a0e714d2e7d2af9050e8860d5f6dc09/src/lib.rs#L203-L218</a></p>\n</blockquote>\n<p>Huh so that's how they do it! I never knew. I think there's a better solution, see below.</p>\n<blockquote>\n<p>I've been trying to work out how to gather statistics like this from all the fuzz targets, and the other problem that bothers me is how to report results at the end of the run. </p>\n</blockquote>\n<p>I think switching to <code>iter % n == 0</code> for printing is a great idea! And when I'm measuring stuff for other PR's I can always adjust how many runs I do so that it prints at the end of the run. i.e. pick n=10k and run 50k when benchmarking or something like that.</p>\n<p>It doesn't fix that exact issue, but at least for my use case it works, and it sounds like it would be useful for OSS-Fuzz as well.</p>\n<hr>\n<p>And I've also been thinking maybe we can do without the <code>total_inputs</code> metric. <code>total_inputs</code> is only used for the \"Valid Inputs %\" and we can get that metric by other means. When looking at the fuzz log we can check the run number that printed this statistics and do some math (run 50k has 25k valid inputs, so its 50% valid). When benchmarking its also easy to calculate manually when presenting results.</p>\n<p>Additionally we should soon be at 100% on this target (only 1 PR left! I hope), so it would become really obvious if we are missing some runs, since <code>Valid inputs</code> would no longer be <code>50000</code> or <code>100000</code>  it would be something like <code>41273</code> and that would be something that would probably stand out.</p>\n<p>It would still be nice to have a 100% there, but while we figure out some solution I think it would be worth merging this. (I'm also tired of cherry-picking these 3 commits everywhere <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>).<br>\n</p>\n</blockquote>",
        "id": 300433596,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663959969
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987574\">PR review comment</a>.</p>",
        "id": 300434181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663960168
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987722\">PR review comment</a>.</p>",
        "id": 300434497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663960268
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987722\">PR review comment</a>.</p>",
        "id": 300434539,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663960284
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987722\">PR review comment</a>.</p>",
        "id": 300441328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663963150
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987722\">PR review comment</a>.</p>",
        "id": 300441883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663963355
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r978987722\">PR review comment</a>.</p>",
        "id": 300441967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663963390
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#discussion_r979123962\">PR review comment</a>:</p>\n<blockquote>\n<p>I think removing the \"total inputs\" metric is a good plan. It at least lets us get something merged, even if it isn't perfect for all our use cases. I'll be happy to review and approve that!</p>\n</blockquote>",
        "id": 300467831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663977600
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1119120272\">PR review</a>.</p>",
        "id": 300467832,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663977600
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> from <code>fuzz-stats</code> to <code>main</code>.</p>",
        "id": 300486016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663997128
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> from <code>fuzz-stats</code> to <code>main</code>.</p>",
        "id": 300486667,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663997721
    },
    {
        "content": "<p><strong>afonso360</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> as ready for review.</p>",
        "id": 300487469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663998471
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868#pullrequestreview-1121026224\">PR review</a>.</p>",
        "id": 300914107,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664234110
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a> from <code>fuzz-stats</code> to <code>main</code>.</p>",
        "id": 300970021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664271834
    },
    {
        "content": "<p>jameysharp has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a>.</p>",
        "id": 301049530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664294478
    },
    {
        "content": "<p>jameysharp merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4868\">PR #4868</a>.</p>",
        "id": 301050355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664294698
    }
]