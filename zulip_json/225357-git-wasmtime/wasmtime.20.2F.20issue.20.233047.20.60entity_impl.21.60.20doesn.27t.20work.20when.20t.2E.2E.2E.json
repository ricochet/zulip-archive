[
    {
        "content": "<p>cratelyn opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047\">issue #3047</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Hi! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'd like to propose extending <a href=\"https://docs.rs/cranelift-entity/0.75.0/cranelift_entity/macro.entity_impl.html\"><code>cranelift_entity::entity_impl</code></a> to accept an expression that ought to be used to construct the given entity.</p>\n<h4>Benefit</h4>\n<p>In certain corner cases, particularly when using libraries that generate code from <code>.witx</code> defintions, we want to use <code>entity_impl!</code> with handle types that are not defined ourselves. Consequentially, we cannot always construct the handle directly via a statement like <code>$entity(index as u32)</code>.</p>\n<p>I put together a Rust Playground example demonstrating the problem <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bd3cc30e63be51d6b52a2ec12a540c83\">here</a>, you could also refer to <a href=\"https://gist.github.com/rust-play/bd3cc30e63be51d6b52a2ec12a540c83\">this gist</a>.</p>\n<h4><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span> Implementation</h4>\n<p>This part I have some questions, and welcome advice. At a high level, I hoped for this to look something like this...</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>macro_rules! entity_impl {\n     ($entity:ident) =&gt; { ... };\n     ($entity:ident, $display_prefix:expr) =&gt; { ... };\n<span class=\"gi\">+    ($entity:ident, $display_prefix:expr, $construct:expr) =&gt; { ... };</span>\n}\n</code></pre></div>\n<p>...which would allow an invocation shaped like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">entity_impl</span><span class=\"p\">(</span><span class=\"n\">ExampleHandle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example-prefix-\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, when experimenting with this, I ended up running into errors shaped like <code>cannot find value 'index' in this scope</code>. I tried alternative <a href=\"https://doc.rust-lang.org/beta/rust-by-example/macros/designators.html\">designators</a> like <code>stmt</code>, but didn't have much luck.</p>\n<p>I'm happy to carry out the fix for this, but might need a bit of help deciding how to present this change to callers.</p>\n</blockquote>",
        "id": 244489601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625087996
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047#issuecomment-871739344\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047\">issue #3047</a>:</p>\n<blockquote>\n<p>You would need something like <code>|$index:ident| $construct:expr</code> and then define the <code>$index</code> variableble instead of <code>index</code>. In rust macros are hygienic, preventing names from flowing in or out of a macro body.</p>\n</blockquote>",
        "id": 244490497,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625088431
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047#issuecomment-871749805\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047\">issue #3047</a>:</p>\n<blockquote>\n<p>@cratelyn thanks for filing this issue!</p>\n<p>I played with the Rust Playground for a bit and (as @bjorn3 notes above) got something to work by passing in an identifier to work with the hygiene. Something like:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e798654ac02ac488689666d6d5eed72d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e798654ac02ac488689666d6d5eed72d</a></p>\n<p>the key bit there is the macro form that takes <code>($entity:ident, $display_prefix:expr, $arg:ident, $to_expr:expr, $from_expr:expr)</code>, with which we can then do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">entity_impl</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ExternalHandle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"external-\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExternalHandle</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Does that seem reasonable? Happy to review a PR if so!</p>\n</blockquote>",
        "id": 244492902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625089756
    },
    {
        "content": "<p>cratelyn <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047#issuecomment-873075186\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047\">issue #3047</a>:</p>\n<blockquote>\n<p>That makes sense to me @cfallin, thank you for taking a look! I'll put a patch together for you soon! :adhesive_bandage:</p>\n</blockquote>",
        "id": 244717294,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625239047
    },
    {
        "content": "<p>cfallin assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047\">issue #3047</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Hi! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'd like to propose extending <a href=\"https://docs.rs/cranelift-entity/0.75.0/cranelift_entity/macro.entity_impl.html\"><code>cranelift_entity::entity_impl</code></a> to accept an expression that ought to be used to construct the given entity.</p>\n<h4>Benefit</h4>\n<p>In certain corner cases, particularly when using libraries that generate code from <code>.witx</code> defintions, we want to use <code>entity_impl!</code> with handle types that are not defined ourselves. Consequentially, we cannot always construct the handle directly via a statement like <code>$entity(index as u32)</code>.</p>\n<p>I put together a Rust Playground example demonstrating the problem <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bd3cc30e63be51d6b52a2ec12a540c83\">here</a>, you could also refer to <a href=\"https://gist.github.com/rust-play/bd3cc30e63be51d6b52a2ec12a540c83\">this gist</a>.</p>\n<h4><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span> Implementation</h4>\n<p>This part I have some questions, and welcome advice. At a high level, I hoped for this to look something like this...</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>macro_rules! entity_impl {\n     ($entity:ident) =&gt; { ... };\n     ($entity:ident, $display_prefix:expr) =&gt; { ... };\n<span class=\"gi\">+    ($entity:ident, $display_prefix:expr, $construct:expr) =&gt; { ... };</span>\n}\n</code></pre></div>\n<p>...which would allow an invocation shaped like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">entity_impl</span><span class=\"p\">(</span><span class=\"n\">ExampleHandle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example-prefix-\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, when experimenting with this, I ended up running into errors shaped like <code>cannot find value 'index' in this scope</code>. I tried alternative <a href=\"https://doc.rust-lang.org/beta/rust-by-example/macros/designators.html\">designators</a> like <code>stmt</code>, but didn't have much luck.</p>\n<p>I'm happy to carry out the fix for this, but might need a bit of help deciding how to present this change to callers.</p>\n</blockquote>",
        "id": 244753833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625257665
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3047\">issue #3047</a> (assigned to cratelyn):</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Hi! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'd like to propose extending <a href=\"https://docs.rs/cranelift-entity/0.75.0/cranelift_entity/macro.entity_impl.html\"><code>cranelift_entity::entity_impl</code></a> to accept an expression that ought to be used to construct the given entity.</p>\n<h4>Benefit</h4>\n<p>In certain corner cases, particularly when using libraries that generate code from <code>.witx</code> defintions, we want to use <code>entity_impl!</code> with handle types that are not defined ourselves. Consequentially, we cannot always construct the handle directly via a statement like <code>$entity(index as u32)</code>.</p>\n<p>I put together a Rust Playground example demonstrating the problem <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=bd3cc30e63be51d6b52a2ec12a540c83\">here</a>, you could also refer to <a href=\"https://gist.github.com/rust-play/bd3cc30e63be51d6b52a2ec12a540c83\">this gist</a>.</p>\n<h4><span aria-label=\"question\" class=\"emoji emoji-2753\" role=\"img\" title=\"question\">:question:</span> Implementation</h4>\n<p>This part I have some questions, and welcome advice. At a high level, I hoped for this to look something like this...</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>macro_rules! entity_impl {\n     ($entity:ident) =&gt; { ... };\n     ($entity:ident, $display_prefix:expr) =&gt; { ... };\n<span class=\"gi\">+    ($entity:ident, $display_prefix:expr, $construct:expr) =&gt; { ... };</span>\n}\n</code></pre></div>\n<p>...which would allow an invocation shaped like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">entity_impl</span><span class=\"p\">(</span><span class=\"n\">ExampleHandle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"example-prefix-\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">).</span><span class=\"n\">into</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, when experimenting with this, I ended up running into errors shaped like <code>cannot find value 'index' in this scope</code>. I tried alternative <a href=\"https://doc.rust-lang.org/beta/rust-by-example/macros/designators.html\">designators</a> like <code>stmt</code>, but didn't have much luck.</p>\n<p>I'm happy to carry out the fix for this, but might need a bit of help deciding how to present this change to callers.</p>\n</blockquote>",
        "id": 256469210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633548168
    }
]