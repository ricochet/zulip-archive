[
    {
        "content": "<p>amusingimpala75 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<h3>Expected behaviour:</h3>\n<p><code>wasm_valtype_new_funcref()</code> or <code>wasm_valtype_new(WASM_FUNCREF)</code> return a <code>wasm_valtype_t *</code> with a FuncRef type.</p>\n<h3>Actual behaviour:</h3>\n<p>errors with</p>\n<blockquote>\n<p>thread '&lt; unnamed&gt;' panicked at 'unexpected kind: 129', crates/c-api/src/types/val.rs:40:14</p>\n</blockquote>\n<p>and terminates</p>\n</blockquote>",
        "id": 301875350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664666274
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1264506828\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>There is no wasm_valtype_new_funcref function in wasmtime. As for WASM_FUNCREF it exists and should be handled at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3fa545bd89d6e18e6e85eab57499ee9c9f5032f2/crates/c-api/src/types/val.rs?q=WASM_FUNCREF#L38\">https://github.com/bytecodealliance/wasmtime/blob/3fa545bd89d6e18e6e85eab57499ee9c9f5032f2/crates/c-api/src/types/val.rs?q=WASM_FUNCREF#L38</a>. Are you using the latest wasmtime version?</p>\n</blockquote>",
        "id": 301875724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664666558
    },
    {
        "content": "<p>amusingimpala75 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1264507827\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>wasmtime-v1.0.1-aarch64-macos-c-api</p>\n</blockquote>",
        "id": 301876184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664666978
    },
    {
        "content": "<p>amusingimpala75 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1264507985\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>also include/wasm.h defines an inline <code>wasm_valtype_new_funcref()</code> which just defers to <code>wasm_valtype_new(WASM_FUNCREF)</code>.</p>\n</blockquote>",
        "id": 301876259,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664667041
    },
    {
        "content": "<p>amusingimpala75 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1264754022\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>externref does not work either.</p>\n</blockquote>",
        "id": 301980523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664751802
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1265642351\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>Thanks for the report, but this looks like something may be going wrong on your end somewhere, although I'm not sure where. The error message</p>\n<blockquote>\n<p><code>thread '&lt; unnamed&gt;' panicked at 'unexpected kind: 129', crates/c-api/src/types/val.rs:40:14</code></p>\n</blockquote>\n<p>says that 129 wasn't expected but that's the value of <code>WASM_FUNCREF</code> which is in the <code>match</code> arm. This may mean that while you think you're using 1.0.1 you're using an older binary by accident or something like that (or a completely different binary?)</p>\n<p>I've tested this locally with the Python bindings for the C API and these functions work and return the expected result.</p>\n</blockquote>",
        "id": 302087168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664810892
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1265643346\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>Although now that I think this could also be an aarch64-macos ABI-specific issue, unfortunately though I do not have access to such hardware to test myself.</p>\n</blockquote>",
        "id": 302087298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664810937
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1265805991\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>Could this be <a href=\"https://github.com/rust-lang/rust/issues/97463\">https://github.com/rust-lang/rust/issues/97463</a>?</p>\n</blockquote>",
        "id": 302112996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664818764
    },
    {
        "content": "<p>amusingimpala75 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1266144494\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>I have not used Wasmtime previously, so it is not a stale binary problem.<br>\nYeah, it just doesnâ€™t make sense because WASM_FUNCREF is clearly being evaluated as 129 from <a href=\"http://vals.rs\">vals.rs</a>, but then a direct comparison to that variable in the rust function fails, so I suspect it might be the ABI problem. </p>\n</blockquote>",
        "id": 302160973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664836680
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1267190337\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>Ok this is definitely an ABI issue. On an aarch64 linux system which I presume is similar enough ABI-wise to macos:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">the_imported_func</span><span class=\"p\">(</span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">the_imported_func</span><span class=\"p\">(</span><span class=\"mi\">129</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">o</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">littleaarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">foo</span><span class=\"o\">&gt;</span>:\n   <span class=\"mi\">0</span>:   <span class=\"nc\">a9bf7bfd</span><span class=\"w\">        </span><span class=\"n\">stp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">910003</span><span class=\"n\">fd</span><span class=\"w\">        </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">12800</span><span class=\"n\">fc0</span><span class=\"w\">        </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xffffff81</span><span class=\"w\">                 </span><span class=\"c1\">// #-127</span>\n<span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"mi\">94000000</span><span class=\"w\">        </span><span class=\"n\">bl</span><span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">the_imported_func</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"nc\">a8c17bfd</span><span class=\"w\">        </span><span class=\"n\">ldp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span>#<span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">14</span>:   <span class=\"nc\">d65f03c0</span><span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where at <code>8</code> the operand is being sign extended from 8 to 32-bits.</p>\n<p>On Rust stable:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">wat</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">129</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>yields:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"k\">crate</span><span class=\"o\">-</span><span class=\"k\">type</span> <span class=\"nc\">cdylib</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">o</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">littleaarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">wat</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wat</span><span class=\"o\">&gt;</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">7102041</span><span class=\"n\">f</span><span class=\"w\">        </span><span class=\"n\">cmp</span><span class=\"w\">     </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x81</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">1</span><span class=\"n\">a9f17e0</span><span class=\"w\">        </span><span class=\"n\">cset</span><span class=\"w\">    </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\">  </span><span class=\"c1\">// eq = none</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"nc\">d65f03c0</span><span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where the comparison is a 32-bit comparison hence the failure.</p>\n<p>On nightly Rust, however:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"k\">crate</span><span class=\"o\">-</span><span class=\"k\">type</span> <span class=\"nc\">cdylib</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"></span>\n\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">o</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">littleaarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">wat</span>:\n\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">wat</span><span class=\"o\">&gt;</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">12001</span><span class=\"n\">c08</span><span class=\"w\">        </span><span class=\"n\">and</span><span class=\"w\">     </span><span class=\"n\">w8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0xff</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">7102051</span><span class=\"n\">f</span><span class=\"w\">        </span><span class=\"n\">cmp</span><span class=\"w\">     </span><span class=\"n\">w8</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mh\">0x81</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">1</span><span class=\"n\">a9f17e0</span><span class=\"w\">        </span><span class=\"n\">cset</span><span class=\"w\">    </span><span class=\"n\">w0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\">  </span><span class=\"c1\">// eq = none</span>\n<span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"nc\">d65f03c0</span><span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here the <code>and</code> fixes the issue.</p>\n<p>So @amusingimpala75 I think you'll need to compile with nightly Rust for now instead of using the precompiled artifacts for AArch64 macos for the time being.</p>\n</blockquote>",
        "id": 302288213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664897577
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1267192777\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>Given that this is a rustc bug and otherwise <code>wasm.h</code> isn't something we can modify, I'm going to close this. This can be worked around with nightly Rust-compiled artifacts and looks like it will get fixed with time as that makes its way to stable.</p>\n</blockquote>",
        "id": 302288652,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664897686
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<h3>Expected behaviour:</h3>\n<p><code>wasm_valtype_new_funcref()</code> or <code>wasm_valtype_new(WASM_FUNCREF)</code> return a <code>wasm_valtype_t *</code> with a FuncRef type.</p>\n<h3>Actual behaviour:</h3>\n<p>errors with</p>\n<blockquote>\n<p>thread '&lt; unnamed&gt;' panicked at 'unexpected kind: 129', crates/c-api/src/types/val.rs:40:14</p>\n</blockquote>\n<p>and terminates</p>\n</blockquote>",
        "id": 302288654,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664897686
    },
    {
        "content": "<p>amusingimpala75 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1267771262\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>I have now tried building the c-api with +nightly (1.66.0-nightly, from Oct 3), and it is producing a binary with a different hash, but it still will not work, creating the same error. I've never really fiddled with Rust before, so maybe I just do not know what I am doing.</p>\n</blockquote>",
        "id": 302370716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664930531
    },
    {
        "content": "<p>amusingimpala75 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993#issuecomment-1267782128\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4993\">issue #4993</a>:</p>\n<blockquote>\n<p>Nevermind, I just have to use the debug build, not the release build.</p>\n</blockquote>",
        "id": 302371901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664931582
    }
]