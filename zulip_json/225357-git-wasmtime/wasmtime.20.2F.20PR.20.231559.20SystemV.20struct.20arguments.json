[
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[ ] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[ ] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202226841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593333669
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[ ] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202341218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593450968
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202342016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593451375
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202342017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593451377
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202343161,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593451833
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202344988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593452787
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 202352973,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593456807
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a>.</p>",
        "id": 203939947,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594810490
    },
    {
        "content": "<p><strong>tschneidereit</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> and <a href=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a>.</p>",
        "id": 203939987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594810516
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449070430\">PR Review</a>.</p>",
        "id": 203980469,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831208
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449070430\">PR Review</a>.</p>",
        "id": 203980470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455149773\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is there a reason for the double-underscore here? I see it consistently below and am wondering if <code>sarg__</code> is part of the ABI definition -- if so, let's document it / add a reference to its definition here.</p>\n</blockquote>",
        "id": 203980471,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831208
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455154885\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Comment here to describe the string format being parsed (<code>// Parse 'sarg(size)'</code>?)</p>\n</blockquote>",
        "id": 203980472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831209
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455139463\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: s/as most/at most/</p>\n</blockquote>",
        "id": 203980473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831209
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455159099\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Add doc comment here?</p>\n</blockquote>",
        "id": 203980474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831209
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455179228\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Perhaps <code>args.len() == types.len() &amp;&amp; args.iter().zip(types.iter()).all(|(arg, type)| ...)</code>?</p>\n</blockquote>",
        "id": 203980476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831209
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455158935\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Not totally clear here why \"incoming arg\" always reduces to \"incoming struct arg\" -- I suppose it's the case that no other argument types are passed in stack slots? Let's have a comment saying this, if so. The API also seems somewhat misleading -- it doesn't really make sense to call <code>make_incoming_arg(I32, ...)</code> for a normal (non-struct) argument, right? (I know the API is pre-existing -- just trying to make sense of it.)</p>\n</blockquote>",
        "id": 203980514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831232
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455182890\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe pull out this and the <code>import_function</code> call below into an <code>import_memcpy</code> helper?</p>\n<p>Also, it seems that this will create a new signature/import for every struct argument; can we lazily initialize it once instead?</p>\n</blockquote>",
        "id": 203980515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594831232
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449144076\">PR Review</a>.</p>",
        "id": 203982889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594832516
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455198235\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I am using <code>sarg__</code> for the type to distinguish it from the <code>sarg(size)</code> argument purpose. Otherwise there is a lexer (and maybe parser) ambiguity.</p>\n</blockquote>",
        "id": 203982891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594832516
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449145391\">PR Review</a>.</p>",
        "id": 203983139,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594832620
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455199291\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>make_incoming_arg</code> is used for when a \"regular\" argument doesn't fit in registers anymore and needs to be stored on the stack. I could rename <code>make_incoming_struct_arg</code> and use <code>ty.bytes()</code> at every caller of the current <code>make_incoming_arg</code>.</p>\n</blockquote>",
        "id": 203983153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594832627
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 203985051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833584
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 203985255,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594833675
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449211620\">PR Review</a>.</p>",
        "id": 203991913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594836718
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455246369\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yep, that makes sense to me; thanks.</p>\n</blockquote>",
        "id": 203991914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594836718
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449212168\">PR Review</a>.</p>",
        "id": 203992045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594836765
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455246828\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah, right. Perhaps <code>sarg_t</code> (to borrow a C-ism) then? The double underscore just seems a bit out of place, is all.</p>\n</blockquote>",
        "id": 203992047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594836765
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 203997562,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594839393
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449243719\">PR Review</a>.</p>",
        "id": 203997592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594839408
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455272922\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Done</p>\n</blockquote>",
        "id": 203997593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594839408
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 203998086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594839630
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 204000865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594841004
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449904822\">PR Review</a>.</p>",
        "id": 204094284,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#pullrequestreview-449904822\">PR Review</a>.</p>",
        "id": 204094285,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455833039\">PR Review Comment</a>:</p>\n<blockquote>\n<p>uber nit: can you add a \\n after this match (or <code>if</code>, if you agree with the above proposal)</p>\n</blockquote>",
        "id": 204094286,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455829728\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: incorrect comment, this changes the type to <code>ty</code></p>\n<div class=\"codehilite\"><pre><span></span><code>            // Assign argument to a location, change type to the requested one and move on to the next one.\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204094287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455832578\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Since this is a match with one arm, <code>if let ArgumentPurpose::StructArgument(size) = abi_type.purpose {</code> would look slightly better.</p>\n</blockquote>",
        "id": 204094288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455834443\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Maybe add a comment in this if's body, to indicate that the incoming argument had been added during legalization?</p>\n</blockquote>",
        "id": 204094289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455838364\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Last argument to memcpy is a size_t, which apparently can be different from the size of a pointer on certain obscure architectures. Can you add a comment that it doesn't matter in our case, that is, that size_t should be the size of a machine word, for all the architectures we're interested in?</p>\n</blockquote>",
        "id": 204094290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455846226\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ditto</p>\n</blockquote>",
        "id": 204094291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559#discussion_r455846003\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you add a second test with a function that takes two parameters, say, one i64 and one struct argument (in final position), please?</p>\n</blockquote>",
        "id": 204094292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594911110
    },
    {
        "content": "<p>bjorn3 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a> from <code>abi_struct_args</code> to <code>main</code>:</p>\n<blockquote>\n<p>According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn't have any way to implement this before. This is necessary to compile proc-macros using cg_clif: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/905#issuecomment-616173297</a></p>\n<p>Fixes #1108</p>\n<h1>TODO</h1>\n<ul>\n<li>[x] Don't misuse <code>INVALID</code>, but introduce a proper type.</li>\n<li>[x] Implement this correctly for WindowsFastcall or give an error.</li>\n</ul>\n</blockquote>",
        "id": 204107643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594916630
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">PR #1559</a>.</p>",
        "id": 204189476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594980200
    }
]