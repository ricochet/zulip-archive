[
    {
        "content": "<p>Milek7 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777\">issue #7777</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Precompiled modules are ELF files that seemingly are able to be linked into executables. Would it be possible to let them load using OS loader (either by linking them into application binary, or linking into shared object and <code>dlopen</code>), and then import this code into wasmtime Module?</p>\n<h4>Benefit</h4>\n<p>Support of platforms that doesn't allow mapping pages as executable, like iOS or game consoles.</p>\n<h4>Implementation</h4>\n<p><code>Module::deserialize</code> variant that takes pointers to already loaded segments and fills them into <code>CodeMemory</code> struct instead of mmaping them. Probably also needs #7349 to be useful.</p>\n</blockquote>",
        "id": 412973934,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705330521
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777#issuecomment-1894141612\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777\">issue #7777</a>:</p>\n<blockquote>\n<p>Serialized modules happen to use the ELF format, but that should be treated as an internal implementation detail to Wasmtime and is not intended to be exposed to any loader other than Module::deserialize, such as an OS loader.</p>\n<p>In general if pages can't be mapped as executable at all, then Wasmtime won't work whether it is mapping those pages out of a file (as in deserialize) or materializing them otherwise to create an executable Module.</p>\n<p>Can you tell us more about the use case that motivates this request? Maybe there is another way to meet it.</p>\n</blockquote>",
        "id": 413198738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705424235
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777#issuecomment-1894213488\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777\">issue #7777</a>:</p>\n<blockquote>\n<p>Use case is using Wasmtime on platforms which limit mapping pages as executable. As I understand it, Wasmtime only needs to map compiled code as executable during Module creation, and doesn't need to generate any new code during execution, right? (with the exception of generating host function trampolines, but I take that this is intended to be removed too)</p>\n</blockquote>",
        "id": 413207064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705426905
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777#issuecomment-1894357183\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777\">issue #7777</a>:</p>\n<blockquote>\n<p>Yes once a module is loaded and executable no further executable mappings need be may (so long as you don't use <code>Func::new</code> and friends or create new modules). It's theoretically possible that a precompiled module could be made into a linkable object to link into the main application, but that's a pretty significant chunk of work to be done at the API layer in addition to the object layer. Currently the ELF artifact, as @pchickey mentions, \"just happens to be ELF\" and isn't suitable for actually linking into an application.</p>\n<p>Are you working with a platform like iOS that doesn't allow mapping executable memory at all? Or something along those lines? If new executable memory can be dynamically loaded Wasmtime should work well, but if all the executable memory must be statically enumerated that'll be more difficult.</p>\n</blockquote>",
        "id": 413222136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705432362
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777#issuecomment-1894446221\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777\">issue #7777</a>:</p>\n<blockquote>\n<p>I'm looking at feasibility of using wasmtime on game console. I will know more about the limitations later but it would be under NDA so I probably won't be able to discuss them here anyway. Alternatively I'm considiering using something like wasm2c, but that would require more changes in embedding code so getting wasmtime to work would be nice.</p>\n<p>I'm correct in that if sections from ELF artifact would be loaded into address space (with .text mapped as executable), it would suffice to basically modify CodeMemory::new to read header from passed pointer (obviously it won't be header of real underlying file, just decoy to point to already loaded data), and make CodeMemory::publish no-op? Or is there something more to it? It would need some external tooling to mangle precompiled output into object file that can be used, put decoy header in there, etc, but doesn't seem too complicated.</p>\n<p>As for <code>Func::new</code>, I found that this proposal <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/tail-calls.md\">https://github.com/bytecodealliance/rfcs/blob/main/accepted/tail-calls.md</a> specified that after changes wasm â†’ array case would handled by \"This trampoline is generated by the Wasm compiler and stored in the compiled Wasm module.\" Were the plans changed or it's still expected that this change will happen?</p>\n</blockquote>",
        "id": 413231840,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705436107
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777#issuecomment-1894495104\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7777\">issue #7777</a>:</p>\n<blockquote>\n<p>Ah ok makes sense. The exact implementation of this I'm not certain about, but you're on the right track ish. Currently <code>CodeMemory</code> is not exposed from the public API of the <code>wasmtime</code> crate, so while it's part of the internal stuff happening in Wasmtime it's not exposed to end-users to easily integrate with. </p>\n<p>What this would perhaps look like is something along the lines of a <code>trait NativeObject</code> in the public API of Wasmtime which acts as a <code>CodeMemory</code> (of sorts). The internals of Wasmtime would use the trait and embedders could supply their own version of statically linked data for example. How exactly an embedder would create such a trait object, though, is a bit unknown to me. That's where there's a good bit of design I think. All technically feasible, but perhaps a little hairy too.</p>\n</blockquote>",
        "id": 413236944,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1705438366
    }
]