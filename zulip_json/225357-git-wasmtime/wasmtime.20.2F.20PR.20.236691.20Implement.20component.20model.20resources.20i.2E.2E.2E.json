[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a> from <code>alexcrichton:resources</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[ ] destructors</li>\n<li>[ ] <code>(borrow $T)</code></li>\n<li>[ ] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[ ] fill out all <code>/// TODO</code> documentation</li>\n<li>[ ] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n</blockquote>",
        "id": 372684315,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688582298
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1515418490\">PR review</a>.</p>",
        "id": 372721518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688594401
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1515418490\">PR review</a>.</p>",
        "id": 372721519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688594401
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1253684902\">PR review comment</a>:</p>\n<blockquote>\n<p>This is probably not a huge optimization, but these two instructions to compute the new <code>rep</code> value can be emitted into <code>call_func_ref_block</code> instead so that they're not executed if there is no destructor.<br>\n</p>\n</blockquote>",
        "id": 372721521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688594401
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1253697391\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm curious why this code is checking for the function pointer being null, instead of testing the least significant bit of the value returned by <code>resource_drop</code>. Do we ever have a <code>Some</code> value with a null destructor pointer?</p>\n</blockquote>",
        "id": 372721522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688594401
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 372725459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688596382
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1253721400\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah they end up being two different conditions. First is that <code>resource.drop</code> can be used to drop either own or borrow values, so the first check is basically \"which did I drop?\". The second check is \"ok is there actually a destructor?\". So a return value of 0 from the intrinsic means \"you dropped a borrow do nothing else\". Otherwise the return value is <code>(rep &lt;&lt; 1) | 1</code> where the destructor, if specified, is invoked with <code>rep</code>.</p>\n<p>As I type this out though I realize that whether or not the destructor is specified is actually static so there's actually no need for a runtime check of the funcref, all that needs to be checked is the return value from the drop intrinsic to see if it's an own/borrow.</p>\n</blockquote>",
        "id": 372725766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688596539
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 372726739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688597114
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[x] destructors</li>\n<li>[ ] <code>(borrow $T)</code></li>\n<li>[ ] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[ ] fill out all <code>/// TODO</code> documentation</li>\n<li>[ ] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n</blockquote>",
        "id": 372730188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688599122
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 372766420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688618629
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 372940280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688657328
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 372978295,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688665619
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 372995157,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688669962
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1515481477\">PR review</a>.</p>",
        "id": 373017794,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688676613
    },
    {
        "content": "<p>sunfishcode submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1515481477\">PR review</a>.</p>",
        "id": 373017796,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688676613
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1254875829\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this use <a href=\"https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.cast\"><code>NonNull::cast</code></a>?</p>\n</blockquote>",
        "id": 373017798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688676613
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1254888027\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment should be updated to reflect its meaning.</p>\n</blockquote>",
        "id": 373017799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688676613
    },
    {
        "content": "<p>sunfishcode created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1253730463\">PR review comment</a>:</p>\n<blockquote>\n<p>This comment about the null check is now out of date; it'd be good to mention what you said earlier about the type being known statically.</p>\n</blockquote>",
        "id": 373017800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1688676613
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374077916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689021039
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374078225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689021143
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374078542,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689021247
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374079595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689021648
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374085538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689023666
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374091491,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689026025
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374327256,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689093051
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374345450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689097403
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 374972657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689262014
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[x] destructors</li>\n<li>[x] <code>(borrow $T)</code></li>\n<li>[ ] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[ ] fill out all <code>/// TODO</code> documentation</li>\n<li>[ ] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n</blockquote>",
        "id": 375018398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689271410
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[x] destructors</li>\n<li>[x] <code>(borrow $T)</code></li>\n<li>[x] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[ ] fill out all <code>/// TODO</code> documentation</li>\n<li>[ ] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n</blockquote>",
        "id": 375018407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689271411
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[x] destructors</li>\n<li>[x] <code>(borrow $T)</code></li>\n<li>[x] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[ ] fill out all <code>/// TODO</code> documentation</li>\n<li>[x] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n</blockquote>",
        "id": 375018426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689271417
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[x] destructors</li>\n<li>[x] <code>(borrow $T)</code></li>\n<li>[x] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[ ] fill out all <code>/// TODO</code> documentation</li>\n<li>[x] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n<p>Closes #6583</p>\n</blockquote>",
        "id": 375018500,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689271437
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 375028628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689273600
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 375060339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689281918
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 375329205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689353464
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is a work-in-progress of implementing the resource type of the component model in Wasmtime. My goal at this time is to implement everything necessary to get <code>*.wast</code> and embedder API tests working. This has notable omissions which are deferred to a future PR:</p>\n<ul>\n<li>No support in <code>component::bindgen!</code></li>\n<li>No support for component-to-component resources (fact compiler)</li>\n</ul>\n<p>Remaining items:</p>\n<ul>\n<li>[x] destructors</li>\n<li>[x] <code>(borrow $T)</code></li>\n<li>[x] probably more tests</li>\n<li>[ ] rewrite this OP with more words</li>\n<li>[x] fill out all <code>/// TODO</code> documentation</li>\n<li>[x] Land and publish <code>wasm-tools</code> changes</li>\n</ul>\n<p>Closes #6583</p>\n</blockquote>",
        "id": 375329240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689353477
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>:</p>\n<blockquote>\n<p>This PR is an implementation of the resource datatype in the component model <a href=\"https://github.com/webassembly/component-model\">as specified upstream</a>. The goal of this PR is to get lots of the low-level infrastructure for resources sorted out, but not 100% of the story as there's still remaining work. Features implemented in this PR are:</p>\n<ul>\n<li>Validation, translation, and compilation of resources now works</li>\n<li>Implementation of all resource-related intrinsics such as <code>resource.{rep,new,drop}</code></li>\n<li>Updates to the compiled image of components as necessary for intrinsics</li>\n<li>Implementation of runtime state of resources, aka tables, in component instances</li>\n<li>Updates to type-checking and type-matching to take resources into account</li>\n<li>Implementation of an embedding API for host-defined resources</li>\n<li>Implementation of an embedding API for guest-defined resources</li>\n<li>An initial suite of test which showcase basic behavior of resources and the capabilities of the embedding API</li>\n</ul>\n<p>This is intended to be a solid implementation for all the \"internals\" of resources throughout Wasmtime. It's expected that all further work will be much easier, less invasive, and not so large a scale. Or at least that's the hope. Note though that this is not a 100% complete story for resources in Wasmtime. For example it's still not possible to take a WIT off the shelf with resources and use that with Wasmtime. Key missing features in Wasmtime related to resources are:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6722\">https://github.com/bytecodealliance/wasmtime/issues/6722</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6696\">https://github.com/bytecodealliance/wasmtime/issues/6696</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6724\">https://github.com/bytecodealliance/wasmtime/issues/6724</a></li>\n</ul>\n<p>This work is a prerequisite for the above, though, and the hope additionally is that the above can all start to progress in parallel with this work as a basis. Basically getting enough in that everything is no longer bottlenecked on me but it's possible to start building out from here.</p>\n<p>Closes #6583</p>\n</blockquote>",
        "id": 375330851,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689353858
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 375330872,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689353865
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a> as ready for review.</p>",
        "id": 375330888,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689353869
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 375330891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689353870
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1533760057\">PR review</a>:</p>\n<blockquote>\n<p>r=me with nitpicks below</p>\n</blockquote>",
        "id": 377380166,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1265944645\">PR review comment</a>:</p>\n<blockquote>\n<p>This isn't just for transcodes, right? Outdated comment?</p>\n</blockquote>",
        "id": 377380168,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1265945031\">PR review comment</a>:</p>\n<blockquote>\n<p>It would be nice to have an index newtype for libcalls.</p>\n</blockquote>",
        "id": 377380169,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1533760057\">PR review</a>:</p>\n<blockquote>\n<p>r=me with nitpicks below</p>\n</blockquote>",
        "id": 377380170,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1265945191\">PR review comment</a>:</p>\n<blockquote>\n<p>Can this be read only?</p>\n</blockquote>",
        "id": 377380171,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1265948425\">PR review comment</a>:</p>\n<blockquote>\n<p>Copy paste comment needs to be inverted.</p>\n</blockquote>",
        "id": 377380172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1265945269\">PR review comment</a>:</p>\n<blockquote>\n<p>This as well?</p>\n</blockquote>",
        "id": 377380173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1265939610\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we emit an assertion in the generated code for this when <code>cfg(debug_assertions)</code>?</p>\n</blockquote>",
        "id": 377380174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270844608\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we make this branch <code>unreachable!()</code>?</p>\n</blockquote>",
        "id": 377380175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270854751\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// definition which should refer to a resource itself.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270868526\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Unlike `resource_id_to_table_index` this is required to be eagerly\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380178,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270864876\">PR review comment</a>:</p>\n<blockquote>\n<p>Sometimes \"wasmparser\" has backticks and sometimes it doesn't in this big doc comment. We should be consistent. I personally prefer backticks but this is obviously not a big deal.</p>\n<p>(Thanks, btw, for writing this nice big doc comment!)</p>\n</blockquote>",
        "id": 377380179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270865733\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! and then from then on purely talk about table indices. Each component\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270877472\">PR review comment</a>:</p>\n<blockquote>\n<p>Copy-paste doc comment is misleading</p>\n</blockquote>",
        "id": 377380181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270862529\">PR review comment</a>:</p>\n<blockquote>\n<p>Non-resource types are structural, not nominal, right?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! such as `list`, `record`, and `string` are considered \"structural\" where two\n//! types are considered equal if their components are equal. For example `(list\n//! $a)` and `(list $b)` are the same if `$a` and `$b` are the same. Resources,\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380182,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270863946\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>//! Given the subtlety here the goal is to lean on `wasmparser` as much as\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961259
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270892700\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        // signature for `resource.drop` is mentioned somewhere, and if the\n        // wasm-to-native trampoline for `resource.drop` hasn't been created yet\n        // then insert that here. This is possibly required by destruction of\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270894054\">PR review comment</a>:</p>\n<blockquote>\n<p>Not sure I am 100% following so take this with a grain of salt, but can this just check whether <code>ret.resource_drop_wasm_to_native_trampoline.is_some()</code> instead of maintaining a hash set if all compile keys?</p>\n</blockquote>",
        "id": 377380185,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270913973\">PR review comment</a>:</p>\n<blockquote>\n<p>If a component takes two resource type imports, and is instantiated from the host with the same resource for both imports, and we get the <code>ResourceType</code> for each of those imports <em>from that component</em>, will both of those result in the same <code>ResourceType</code>? That is, even though the compiled component cannot know they are the same, at the Wasmtime API level when we do reflection on the instantiated component, do we see through everything and determine they are the same? I think we should, and I think we should test this if we don't already.</p>\n</blockquote>",
        "id": 377380186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270899001\">PR review comment</a>:</p>\n<blockquote>\n<p>Kind of annoying we have to thread this through everything specially, when we worked so hard to avoid that elsewhere. Can we perhaps give it it a known compile key or something, so we can just look it up in the various output maps or whatever? Rather than add a special field to all of our compiler's structs. Not sure this is feasible but I'd like to just push in that direction if possible.</p>\n</blockquote>",
        "id": 377380187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270926720\">PR review comment</a>:</p>\n<blockquote>\n<p>Nice.</p>\n</blockquote>",
        "id": 377380188,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270914427\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>/// component model provides is that the `u32` is not forgeable by guests and\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380189,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270925141\">PR review comment</a>:</p>\n<blockquote>\n<p>The parenthetical could be clarified a bit:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>///   doesn't go further and test for equality in the guest itself (for example\n///   two different heap allocations of `Box&lt;u32&gt;` can be equal in normal Rust if they contain\n///   the same value, but will never be considered equal when compared as `Val::Resource`s).\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 377380191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689961260
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1541658057\">PR review</a>.</p>",
        "id": 377398763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689965368
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270984256\">PR review comment</a>:</p>\n<blockquote>\n<p>This branch is hit at runtime so it can't be <code>unreachable!</code>, but I'll update the comment to clarify that.</p>\n</blockquote>",
        "id": 377398764,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689965368
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1541658967\">PR review</a>.</p>",
        "id": 377399028,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689965418
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270984793\">PR review comment</a>:</p>\n<blockquote>\n<p>Oops heh yes I mean the exact opposite of what I say</p>\n</blockquote>",
        "id": 377399031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689965418
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1541677935\">PR review</a>.</p>",
        "id": 377401693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689966060
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270992453\">PR review comment</a>:</p>\n<blockquote>\n<p>Correct! Added a test as well <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 377401694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689966060
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1270992453\">PR review comment</a>.</p>",
        "id": 377401696,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689966060
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1541728292\">PR review</a>.</p>",
        "id": 377407689,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689967460
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1271009860\">PR review comment</a>:</p>\n<blockquote>\n<p>It's a bit subtle and worth a comment that's not currently present, but this is doing 2 things where first it's determining if a trampoline is required and if so creating a <code>CompileKey</code> for it. Next it's detecting if that key was already compiled for some previous trampoline, and if not it adds it.</p>\n<p>In that sense this is the \"root\" where <code>resource_drop_wasm_to_native_trampoline</code> is first set to <code>Some</code>, so it can't piggy-back on anything else.</p>\n<p>That being said coupled with your below concern I'll see if I can clean this up a bit.</p>\n</blockquote>",
        "id": 377407693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689967461
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377412611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689968906
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#pullrequestreview-1541764570\">PR review</a>.</p>",
        "id": 377412729,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689968937
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691#discussion_r1271030546\">PR review comment</a>:</p>\n<blockquote>\n<p>True! There's a newtype for core wasm libcalls but I was a bit hesitant to duplicate all the macro machinery for that as well since the libcalls already duplicate other macro machinery.</p>\n</blockquote>",
        "id": 377412731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689968937
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377413825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689969250
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377420603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689971256
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377420800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689971302
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377426665,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689973112
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377426676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689973116
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377436553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689976743
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377436576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689976749
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6691\">PR #6691</a>.</p>",
        "id": 377452614,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689984411
    }
]