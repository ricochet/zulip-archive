[
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453\">PR #7453</a>.</p>",
        "id": 399942797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698933649
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453\">PR #7453</a>.</p>",
        "id": 399942799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698933650
    },
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453\">PR #7453</a> from <code>afonso360:egraphs-shifts-2</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR adds a few mid-end rules that merge consecutive shift and rotate instructions. Here's an overview of the rules added.</p>\n<h4>Merge consecutive shifts by a constant</h4>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">ishl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ishl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ishl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"w\"> </span><span class=\"nb\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">ty_bits</span>\n<span class=\"p\">(</span><span class=\"nv\">ushr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ushr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ushr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"w\"> </span><span class=\"nb\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">ty_bits</span>\n<span class=\"p\">(</span><span class=\"nv\">sshr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sshr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">sshr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">add</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"w\"> </span><span class=\"nb\">&lt;</span><span class=\"w\"> </span><span class=\"nv\">ty_bits</span>\n</code></pre></div>\n<h4>Merge consecutive shifts by a constant if they overflow the type size</h4>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">ishl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ishl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"w\"> </span><span class=\"nb\">&gt;=</span><span class=\"w\"> </span><span class=\"nv\">ty_bits</span>\n<span class=\"p\">(</span><span class=\"nv\">ushr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">ushr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">k1</span><span class=\"w\"> </span><span class=\"nb\">+</span><span class=\"w\"> </span><span class=\"nv\">k2</span><span class=\"w\"> </span><span class=\"nb\">&gt;=</span><span class=\"w\"> </span><span class=\"nv\">ty_bits</span>\n</code></pre></div>\n<h4>Merge consecutive rotates</h4>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n<span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"nv\">x</span>\n\n<span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iadd</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">iadd</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">isub</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotr</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nv\">==</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">rotl</span><span class=\"w\"> </span><span class=\"nv\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">isub</span><span class=\"w\"> </span><span class=\"nv\">y</span><span class=\"w\"> </span><span class=\"nv\">z</span><span class=\"p\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 399942800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698933650
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453#pullrequestreview-1710627615\">PR review</a>:</p>\n<blockquote>\n<p>LGTM with minor nitpick about comment. Thanks!</p>\n</blockquote>",
        "id": 399970312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698939783
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453#pullrequestreview-1710627615\">PR review</a>:</p>\n<blockquote>\n<p>LGTM with minor nitpick about comment. Thanks!</p>\n</blockquote>",
        "id": 399970313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698939783
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453#discussion_r1380352316\">PR review comment</a>:</p>\n<blockquote>\n<p>This one is a little subtle because the example identities in the comment do <em>not</em> hold, but the rules are correct because they are doing the shift mask on <code>k{1,2}</code> before the add, and when you do that it is correct.</p>\n<p>Mind updating the comment like so?</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>;; Simliarly, if the shift amount overflows the type, then we can turn\n;; it into a 0\n;;\n;; (ishl (ishl x k1) k2) == 0 if shift_mask(k1) + shift_mask(k2) &gt;= ty_bits\n;; (ushr (ushr x k1) k2) == 0 if shift_mask(k1) + shift_mask(k2) &gt;= ty_bits\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 399970314,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698939783
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453\">PR #7453</a>.</p>",
        "id": 399987086,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698944757
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453\">PR #7453</a>.</p>",
        "id": 399987163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698944776
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7453\">PR #7453</a>.</p>",
        "id": 399998081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1698949023
    }
]