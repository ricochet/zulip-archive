[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928\">PR #2928</a> from <code>aarch64-i128-ops</code> to <code>main</code>:</p>\n<blockquote>\n<p>This PR implements some basic operations (add, sub, mul) for i128 types on AArch64</p>\n</blockquote>",
        "id": 239967159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621792287
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r637614587\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we include this test in a separate PR for the iconst issue? Or alternately just update the iconst implementation here (it should only be a few lines of code, I think!).</p>\n</blockquote>",
        "id": 239985152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621811740
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-666313398\">PR review</a>.</p>",
        "id": 239985153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621811740
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r637614570\">PR review comment</a>:</p>\n<blockquote>\n<p>A few more test vectors would be good to have here, I think -- e.g. the upper 64 bits of the first operand are always zero here. Want to make sure that all four of the half-product quadrants are computed properly :-)</p>\n</blockquote>",
        "id": 239985154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621811740
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-666313398\">PR review</a>.</p>",
        "id": 239985155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621811740
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r637613573\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we could get away with not using a <code>tmp</code> here, no? We could <code>umulh</code> directly into <code>dst_hi</code> and then use <code>madd</code> to add the other terms; that's slightly better from an allocate-fewer-vregs (compiler performance) perspective.</p>\n</blockquote>",
        "id": 239985156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621811741
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r637947635\">PR review comment</a>:</p>\n<blockquote>\n<p>This should be the second instruction in the sequence, since it can execute in parallel with <code>UMULH</code>.</p>\n</blockquote>",
        "id": 240051406,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621863188
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-666740109\">PR review</a>.</p>",
        "id": 240051407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621863188
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-666883749\">PR review</a>.</p>",
        "id": 240067937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621870482
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638056577\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, I think I prefer including this in the PR for the iconst.</p>\n<p>I think changing it here involves changing a bit more than just the emission for Iconst.  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/76c6b83f6a21a12a11d4f890490f8acb6329a600/cranelift/codegen/src/machinst/lower.rs#L110\"><code>get_constant</code></a> only returns a u64 and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/76c6b83f6a21a12a11d4f890490f8acb6329a600/cranelift/codegen/src/data_value.rs#L15\"><code>get_immediate</code></a> doesn't support 128bit values yet.</p>\n</blockquote>",
        "id": 240067938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621870482
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-666932379\">PR review</a>.</p>",
        "id": 240072929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621872620
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638083353\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, yes, you're right, we need more infrastructure for that; sorry! Happy to have this whole test deferred then.</p>\n</blockquote>",
        "id": 240072930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621872620
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928\">PR #2928</a> from <code>aarch64-i128-ops</code> to <code>main</code>.</p>",
        "id": 240082989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621877140
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638139782\">PR review comment</a>:</p>\n<blockquote>\n<p>I added a few more tests to all three functions, but if you have any particular test case in mind, let me know.</p>\n</blockquote>",
        "id": 240083212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621877252
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-666996382\">PR review</a>.</p>",
        "id": 240083213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621877253
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667002717\">PR review</a>.</p>",
        "id": 240084331,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621877763
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638144769\">PR review comment</a>:</p>\n<blockquote>\n<p>It looks like when we do this, we do get a few extra mov's in the emitted code.</p>\n<p>When placing the <code>mul</code> as the first or second instruction in the sequence we get the following code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">umulh</span><span class=\"w\"> </span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xzr</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x5</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"w\"></span>\n<span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"w\"></span>\n<span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which makes sense, since we need x0 (lhs_lo) for the 2nd <code>madd</code>. I don't know if this is preferred to the 4 instruction codegen? It may be faster, but is longer?</p>\n<p>Adding it after the second <code>madd</code> (as the third instruction in the sequence) gets us back to a 4 instruction result. But I'm not sure if <code>madd</code> executes in parallel with <code>mul</code>, I had a quick look at the Software Optimization guide for a few different cores and it doesn't look like it.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">umulh</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xzr</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Let me know which one you prefer</p>\n</blockquote>",
        "id": 240084335,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621877763
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638144769\">PR review comment</a>.</p>",
        "id": 240084478,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621877832
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928\">PR #2928</a>.</p>",
        "id": 240084991,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621878052
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667013619\">PR review</a>.</p>",
        "id": 240086317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621878658
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638153468\">PR review comment</a>:</p>\n<blockquote>\n<p>the <code>C0FFEE</code> -&gt; <code>DECAF</code> test vector is excellent; thanks :-)</p>\n</blockquote>",
        "id": 240086318,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621878659
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667016081\">PR review</a>.</p>",
        "id": 240086746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621878850
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638155478\">PR review comment</a>:</p>\n<blockquote>\n<p>IMHO we should prefer code that keeps the regalloc happy and reduces moves (those can have a measurable impact as code-fetch bandwidth can be a limiting factor in some cases) to small reorderings, at least on modern out-of-order cores that can reason about dependencies and issue the <code>mul</code> as soon as possible. I'll defer to @akirilov-arm as to whether it makes sense to try harder here for older in-order microarchitectures though!</p>\n</blockquote>",
        "id": 240086749,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621878850
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667017384\">PR review</a>.</p>",
        "id": 240086966,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621878956
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667024333\">PR review</a>.</p>",
        "id": 240088308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621879521
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638161665\">PR review comment</a>:</p>\n<blockquote>\n<p>Are you testing with a simple function that just does the multiplication and returns the product? If yes, I wouldn't be too bothered by the additional moves because that's an overly simplified test case (and yes, the longer version might still be faster on an in-order core like the Cortex-A55 that I have in mind with my comments), but you can also try another experiment - reverse the order of the last 2 instructions and see what you get.</p>\n</blockquote>",
        "id": 240088310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621879521
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667033712\">PR review</a>.</p>",
        "id": 240090104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621880344
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638168574\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, these are all for the function that is in tests:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">mul_i128</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<blockquote>\n<p>but you can also try another experiment - reverse the order of the last 2 instructions and see what you get.</p>\n</blockquote>\n<p>Do you mean the last <code>mul</code> and <code>madd</code>? </p>\n<p>For the version with <code>mul</code> as the last instruction we get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">umulh</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xzr</span><span class=\"w\"></span>\n</code></pre></div>\n<p>For the version with the last <code>madd</code> as the last instruction, we get this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">umulh</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x4</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xzr</span><span class=\"w\"></span>\n<span class=\"n\">madd</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 240090105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621880345
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638161665\">PR review comment</a>.</p>",
        "id": 240090695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621880610
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638168574\">PR review comment</a>.</p>",
        "id": 240091744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621881079
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667093268\">PR review</a>.</p>",
        "id": 240098275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621883844
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-667093268\">PR review</a>.</p>",
        "id": 240098276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621883844
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638212330\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, I meant precisely your last experiment and the result is disappointing (the first move is unnecessary at the very least). Anyway, let's go with the current version, i.e. <code>MUL</code> in the last position (which still makes it possible to use the dedicated forwarding path between the pair of <code>MADD</code>s and to dual-issue), and I (or someone else) can check later what the real performance impact is and if there is some way to avoid the moves.</p>\n</blockquote>",
        "id": 240098277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621883844
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928\">PR #2928</a>.</p>",
        "id": 240107179,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621888057
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#pullrequestreview-668053521\">PR review</a>.</p>",
        "id": 240213521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621959832
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2928#discussion_r638962235\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin Just a quick note - now that the announcement is <a href=\"https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/first-armv9-cpu-cores\">public</a>, I can actually say that not only current generation, but also some of the next generation cores (i.e. Cortex-A510) are also going to be in-order.</p>\n</blockquote>",
        "id": 240213522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1621959832
    }
]