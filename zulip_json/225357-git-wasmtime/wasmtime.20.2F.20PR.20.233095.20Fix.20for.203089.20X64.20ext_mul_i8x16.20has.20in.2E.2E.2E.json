[
    {
        "content": "<p>jlb6740 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095\">PR #3095</a> from <code>fix-x64-ext_mul_i8x16</code> to <code>main</code>:</p>\n<blockquote>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 246394580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626636982
    },
    {
        "content": "<p><strong>jlb6740</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095\">PR #3095</a> as ready for review.</p>",
        "id": 246397531,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626641469
    },
    {
        "content": "<p>jlb6740 assigned <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095\">PR #3095</a> to alexcrichton.</p>",
        "id": 246397644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626641563
    },
    {
        "content": "<p>jlb6740 assigned <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095\">PR #3095</a> to alexcrichton.</p>",
        "id": 246397651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626641579
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709620392\">PR review</a>.</p>",
        "id": 246463366,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626705670
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709620392\">PR review</a>.</p>",
        "id": 246463367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626705670
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672351749\">PR review comment</a>:</p>\n<blockquote>\n<p>This may be my lack of knowledge about the x64 backend, but the above instruction</p>\n<blockquote>\n<p><code>Inst::gen_move(tmp_reg, lhs, output_ty)</code></p>\n</blockquote>\n<p>has the destination as the first parameter (<code>tmp_reg</code> I believe) and the parameters to the instruction as the second (<code>lhs</code>).</p>\n<p>Does that mean that this should be <code>dst</code> as the first parameter since that should be the destination? (or does <code>xmm_rm_r</code> behave differently in that the destination is the second parameter?)</p>\n</blockquote>",
        "id": 246463368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626705670
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672353989\">PR review comment</a>:</p>\n<blockquote>\n<p>Looking at the pattern matching and such, it looks like the codegen here is actually the same as-if the specialized pattern matching in this function weren't present? Basically it looks like this is generating <code>palignr; pmovsxbw</code> for each lhs/rhs, and then it's <code>pmullw</code> for the result. That looks like the same codegen as if the component operations of <code>i16x8.extmul_high_i8x16_s</code> were each translated individually.</p>\n<p>If that's the case is it necessary to have a specialized pattern-match here for x64? E.g. were the wasm instructions primarily for other platforms which have a native instruction for the operation?</p>\n</blockquote>",
        "id": 246463369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626705670
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672358557\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, how come a temp register is used? It seems like the goal of <code>palignr</code> is to get the high 8 values into the low 8 values, and then the <code>pmovsxbw</code> will sign-extend the low values into 16-bit values, but looking at the intructions it seems like that can all be done with the same register?</p>\n</blockquote>",
        "id": 246463370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626705670
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672359120\">PR review comment</a>:</p>\n<blockquote>\n<p>Hm although given <code>xmm_rm_r_imm</code> it looks like the destination isn't the first argument, so I may just not know the backend here in this regard.</p>\n</blockquote>",
        "id": 246463376,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626705672
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709688172\">PR review</a>.</p>",
        "id": 246470192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626708467
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672402953\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>This may be my lack of knowledge about the x64 backend, but the above instruction</p>\n<blockquote>\n<p><code>Inst::gen_move(tmp_reg, lhs, output_ty)</code></p>\n</blockquote>\n<p>has the destination as the first parameter (<code>tmp_reg</code> I believe) and the parameters to the instruction as the second (<code>lhs</code>).</p>\n<p>Does that mean that this should be <code>dst</code> as the first parameter since that should be the destination? (or does <code>xmm_rm_r</code> behave differently in that the destination is the second parameter?)</p>\n</blockquote>\n<p>Yes .. good observation. gen_move is unique in this way by having the first operand as the destination. Not sure the history behind that but it is something that perhaps should be refactored to avoid confusion.<br>\n</p>\n</blockquote>",
        "id": 246470193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626708467
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709699116\">PR review</a>.</p>",
        "id": 246471551,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626709071
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672411456\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Looking at the pattern matching and such, it looks like the codegen here is actually the same as-if the specialized pattern matching in this function weren't present? Basically it looks like this is generating <code>palignr; pmovsxbw</code> for each lhs/rhs, and then it's <code>pmullw</code> for the result. That looks like the same codegen as if the component operations of <code>i16x8.extmul_high_i8x16_s</code> were each translated individually.</p>\n<p>If that's the case is it necessary to have a specialized pattern-match here for x64? E.g. were the wasm instructions primarily for other platforms which have a native instruction for the operation?</p>\n</blockquote>\n<p>@alexcrichton Another good observation. Yes, obviously this instruction is just the combination of a 3 instruction sequence written as one. For arm these 3 instructions can be lowered efficiently more easily with this 3 instruction combination for all 3 variants, i.e.  (i16x8.extmul_high_i8x16_s, i32x4.extmul_high_i16x8_s, i64x2.extmul_high_i32x4_s) so the lowering is optimal but for x64 more optimal lowering is only available for a few of the variants. Namely i16x8.extmul_high_i8x16_s and i16x8.extmul_high_i8x16_u does not have a more optimal lowering so I end up just inlining the codegen here. In fact the mistake was simply a copy paste error in that inlining, not seeing a way to print the final codegen to triple-check,  and then not having adequate to testing to catch the mistake. For the other variants the specialized codegen I think saves an instruction or two (though I haven't counted explicitly).</p>\n</blockquote>",
        "id": 246471552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626709071
    },
    {
        "content": "<p>jlb6740 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095\">PR #3095</a> (assigned to alexcrichton) from <code>fix-x64-ext_mul_i8x16</code> to <code>main</code>.</p>",
        "id": 246488311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626717028
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672523840\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah ok! Do you think it'd be possible to structure the code such that it falls-through to the normal lowerings for non-specialized implementations, but specialized implementaitons (the other widths &gt; 8) still have pattern-matched codegen? Either way seems fine to me though</p>\n</blockquote>",
        "id": 246491672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626718490
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709845200\">PR review</a>.</p>",
        "id": 246491673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626718490
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709872685\">PR review</a>.</p>",
        "id": 246496388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626720572
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672546801\">PR review comment</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton, I think so but I am not quite confident how to write this ... particular when there are two input registers here. What you gain is the normal benefit of code reuse but the lowering should be no more efficient than what you see here and may introduce a few more jumps. If you are ok with either way I'd prefer to just merge this fix now and refactor after a discussion with @cfallin. </p>\n</blockquote>",
        "id": 246496389,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626720572
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-709905994\">PR review</a>.</p>",
        "id": 246502395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626723124
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r672573587\">PR review comment</a>:</p>\n<blockquote>\n<p>Oh sure yeah, I think it's fine to land this now and refactor later (although I think some tests here would still be good)</p>\n</blockquote>",
        "id": 246502396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626723124
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-715286769\">PR review</a>.</p>",
        "id": 247263843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627333879
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r676947370\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW I'm fine with this minor code duplication for now; a bigger refactor later when we have a more systematic way of writing lowering pattern-matching seems reasonable.</p>\n</blockquote>",
        "id": 247263845,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627333879
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-715289862\">PR review</a>.</p>",
        "id": 247264501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627334142
    },
    {
        "content": "<p>jlb6740 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#pullrequestreview-715368528\">PR review</a>.</p>",
        "id": 247277893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627343315
    },
    {
        "content": "<p>jlb6740 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r677017262\">PR review comment</a>:</p>\n<blockquote>\n<p>Hi @alexcrichton, did you have in many any particular type of test in mind? There is spec tests, file tests, unit tests, and in the future fuzz testing but for proving correctness I think the spec tests have been what we've used. The unit tests help confirm encodings as long as we are confirming with as or some other tool. </p>\n</blockquote>",
        "id": 247277894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627343315
    },
    {
        "content": "<p>jlb6740 deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095#discussion_r677017262\">PR review comment</a>.</p>",
        "id": 247289494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627355097
    },
    {
        "content": "<p>jlb6740 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3095\">PR #3095</a>.</p>",
        "id": 247289590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1627355204
    }
]