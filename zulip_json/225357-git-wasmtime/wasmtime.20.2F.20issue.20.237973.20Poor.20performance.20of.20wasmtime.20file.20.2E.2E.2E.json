[
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile and generate machine code to obtain test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n####<span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n\n<span class=\"o\">**</span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tokio</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Have</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">considered</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?**</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422555931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708498902
    },
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile ,got test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n####<span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n\n<span class=\"o\">**</span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tokio</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Have</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">considered</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?**</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422557212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708499665
    },
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile ,got test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 40 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n####<span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n\n<span class=\"o\">**</span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tokio</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Have</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">considered</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?**</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422558124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708500217
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1957574988\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thanks for this detailed report!</p>\n<p>The short answer is, haven't benchmarked performance of file IO yet, and right off the top of my head we have a couple optimization ideas we haven't explored because we were just trying to get things out the door.</p>\n<p>I will dig in deeper and see if we can come up with some improvements here.</p>\n</blockquote>",
        "id": 422677599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708538974
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1957574988\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thanks for this detailed report!</p>\n<p>The short answer is, we haven't benchmarked performance of file IO yet, and right off the top of my head we have a couple optimization ideas we haven't explored because we were just trying to get things out the door.</p>\n<p>I will dig in deeper and see if we can come up with some improvements here.</p>\n</blockquote>",
        "id": 422677798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708539032
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1958564674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you for your prompt response.<br>\nBesides tokio, does wasmtime have any other I/O solutions?</p>\n</blockquote>",
        "id": 422738592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708570353
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1958564674\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you for your prompt response.<br>\nBesides tokio, does wasmtime have any other I/O solutions?</p>\n<p>Or is there any configuration on wasmtime that can improve tokio's io performance a bit?</p>\n</blockquote>",
        "id": 422738861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708570576
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960513214\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Those are great questions. This is a long answer but this is a pretty involved topic, so please excuse this wall of text, and let me know if there is anything about this I should explain better.</p>\n<p>We chose to use <code>tokio</code> for <code>wasmtime-wasi</code>'s implementation partly because for many production embedders (i.e. not users of the <code>wasmtime-cli</code> binary, but Fastly and Fermyon and Cosmonic and etc who use the <code>wasmtime</code> crate directly in their server software), wasmtime and WASI need to be implemented on top of an async runtime, and tokio is the async of choice for all of our known embedders.</p>\n<p>Another significant factor is that <code>wasmtime-wasi-http</code> is built on an HTTP implementation and needs to integrate with the <code>pollable</code>s and <code>stream</code>s provided by <code>wasmtime-wasi</code>. For production HTTP stacks in Rust, <code>hyper</code>, which is built on <code>tokio</code>, is essentially the only option. A significant fraction of all internet traffic passes through hyper today - I'm not aware of any credible alternatives.</p>\n<p>In order to fit in with the same <code>pollable</code> and <code>stream</code> resources as wasi-sockets, wasi-http, and etc, wasi-filesystem is also implemented on top of tokio. Because Linux doesn't provide a non-blocking way to do File IO (except for <code>io_uring</code>, which afaik no production-ready Rust systems are using yet, though hopefully they will soon), the correct way to do File IO in tokio is to move that work onto a special blocking IO thread-pool managed by tokio, which costs two synchronizations between threads per blocking operation for the executor to hand the work off from an async task, and to get notified of completion to resume the async task - that our hypothesis for where the <code>futex</code> and <code>epoll_pwait</code> syscalls are coming from.</p>\n<p>I don't actually know where the extra <code>write</code> syscalls are coming from, but I haven't had time to dig in deeper yet. There may be an obvious low-hanging fruit there? If we could it cut down to just one <code>write</code> per WASI file <code>blocking-write-and-flush</code> that would be a nice win.</p>\n<p>Finally, why does wasmtime-cli, which is a totally synchronous Rust program, use <code>tokio</code> under the hood to implement the WASI interface? Basically, because we only had time to implement <code>wasmtime-wasi</code> once. When you use <code>wasmtime-wasi</code> with a synchronous wasmtime (i.e. <code>wasmtime::Config::async_support(false)</code>, which is the default), <code>wasmtime-wasi</code> provides the <code>Linker</code> with a shim that lazily creates a private <code>tokio</code> runtime, and calls the async Rust implementations of all the <code>pollable</code> and <code>stream</code> bits (and various other <code>wasi-filesystem</code> operations that turn into blocking-syscalls) underneath that private tokio.</p>\n<p>There is no configuration available to change whether blocking file IO is moved to separate thread or not - its very fundamental to how tokio and the wasmtime-wasi implementation work. The only way to change that behavior would be to rewrite wasmtime-wasi with a completely different internal architecture, to solely use synchronous Rust.</p>\n<p>A rewrite of <code>wasmtime-wasi</code> for the synchronous register of Rust would take a significant amount of time to write and maintain, and it would be challenging to integrate with the rest of the ecosystem - it would essentially cleave the wasmtime ecosystem in two. For example, <code>wasmtime-wasi-http</code>, or whatever other crates folks write beyond this tree that integrate with <code>wasmtime-wasi</code> - and thats virtually every interface that does any sort of IO, since streams and pollables are so fundamental - currently use wasmtime-wasi's <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/trait.Subscribe.html\"><code>pub trait Subscribe</code></a>, <code>pub trait </code>HostInputStream<code>, and </code>pub trait HostOutputStream<code>, which all use async Rust functions and assume a tokio executor. We don't expect that problem to change anytime soon, and in fact we may expect it to become even more deeply integrated with </code>wasmtime` as the Component Model works on having native async as part of the next big effort.</p>\n<p>To give historical context: I designed <code>wasi-common</code> so that tokio was an optional dependency, and we were able to get away with it during WASI Preview 1 because WASI didnt yet have streams or an extensible poll interface. Our experience embedding <code>wasi-common</code> in various contexts where we needed to wait on e.g. HTTP request readiness, or treat HTTP bodies as a stream, highlighted that the design of WASI Preview 1's <code>poll_oneoff</code> was not the right design for composable  systems. So, we changed the design of WASI itself in Preview 2 to have a <code>pollable</code> resource that can be created by any interface that needs to express waiting on readiness, and with that we more or less got forced into using async Rust for <code>async trait Subscribe</code> as the host implementation of each <code>pollable</code>.</p>\n<p>We may be able to find a way, for synchronous embeddings, to break some of tokio's rules about performing blocking syscalls on the \"main thread\", because that operation should only affect wasmtime-wasi and other crates that build on top of it. If we could break those rules, we could provide a faster path to perform some blocking file IO operations (likely <code>input-stream.blocking-read</code> and <code>output-stream.blocking-write-and-flush</code> only) without the cost of context switches. However, thats just a guess we have, and I am apprehensive to break tokio's rules because the consequences of that for other crates (like wasmtime-wasi-http, as well as whatever other code that others implement outside this tree) could both be pretty severe, and difficult to understand or document. We will see if we can investigate that more, but to be totally honest its not at the top of my priorities right now. If you can help us understand the business case for improving performance, that may help us move it up in priority.</p>\n</blockquote>",
        "id": 422922855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708644873
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960513214\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Those are great questions. This is a long answer but this is a pretty involved topic, so please excuse this wall of text, and let me know if there is anything about this I should explain better.</p>\n<p>We chose to use <code>tokio</code> for <code>wasmtime-wasi</code>'s implementation partly because for many production embedders (i.e. not users of the <code>wasmtime-cli</code> binary, but Fastly and Fermyon and Cosmonic and etc who use the <code>wasmtime</code> crate directly in their server software), wasmtime and WASI need to be implemented on top of an async runtime, and tokio is the async ecosystem of choice for all of our known embedders.</p>\n<p>Another significant factor is that <code>wasmtime-wasi-http</code> is built on an HTTP implementation and needs to integrate with the <code>pollable</code>s and <code>stream</code>s provided by <code>wasmtime-wasi</code>. For production HTTP stacks in Rust, <code>hyper</code>, which is built on <code>tokio</code>, is essentially the only option. A significant fraction of all internet traffic passes through hyper today - I'm not aware of any credible alternatives.</p>\n<p>In order to fit in with the same <code>pollable</code> and <code>stream</code> resources as wasi-sockets, wasi-http, and etc, wasi-filesystem is also implemented on top of tokio. Because Linux doesn't provide a non-blocking way to do File IO (except for <code>io_uring</code>, which afaik no production-ready Rust systems are using yet, though hopefully they will soon), the correct way to do File IO in tokio is to move that work onto a special blocking IO thread-pool managed by tokio, which costs two synchronizations between threads per blocking operation for the executor to hand the work off from an async task, and to get notified of completion to resume the async task - that our hypothesis for where the <code>futex</code> and <code>epoll_pwait</code> syscalls are coming from.</p>\n<p>I don't actually know where the extra <code>write</code> syscalls are coming from, but I haven't had time to dig in deeper yet. There may be an obvious low-hanging fruit there? If we could it cut down to just one <code>write</code> per WASI file <code>blocking-write-and-flush</code> that would be a nice win.</p>\n<p>Finally, why does wasmtime-cli, which is a totally synchronous Rust program, use <code>tokio</code> under the hood to implement the WASI interface? Basically, because we only had time to implement <code>wasmtime-wasi</code> once. When you use <code>wasmtime-wasi</code> with a synchronous wasmtime (i.e. <code>wasmtime::Config::async_support(false)</code>, which is the default), <code>wasmtime-wasi</code> provides the <code>Linker</code> with a shim that lazily creates a private <code>tokio</code> runtime, and calls the async Rust implementations of all the <code>pollable</code> and <code>stream</code> bits (and various other <code>wasi-filesystem</code> operations that turn into blocking-syscalls) underneath that private tokio.</p>\n<p>There is no configuration available to change whether blocking file IO is moved to separate thread or not - its very fundamental to how tokio and the wasmtime-wasi implementation work. The only way to change that behavior would be to rewrite wasmtime-wasi with a completely different internal architecture, to solely use synchronous Rust.</p>\n<p>A rewrite of <code>wasmtime-wasi</code> for the synchronous register of Rust would take a significant amount of time to write and maintain, and it would be challenging to integrate with the rest of the ecosystem - it would essentially cleave the wasmtime ecosystem in two. For example, <code>wasmtime-wasi-http</code>, or whatever other crates folks write beyond this tree that integrate with <code>wasmtime-wasi</code> - and thats virtually every interface that does any sort of IO, since streams and pollables are so fundamental - currently use wasmtime-wasi's <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/trait.Subscribe.html\"><code>pub trait Subscribe</code></a>, <code>pub trait </code>HostInputStream<code>, and </code>pub trait HostOutputStream<code>, which all use async Rust functions and assume a tokio executor. We don't expect that problem to change anytime soon, and in fact we may expect it to become even more deeply integrated with </code>wasmtime` as the Component Model works on having native async as part of the next big effort.</p>\n<p>To give historical context: I designed <code>wasi-common</code> so that tokio was an optional dependency, and we were able to get away with it during WASI Preview 1 because WASI didnt yet have streams or an extensible poll interface. Our experience embedding <code>wasi-common</code> in various contexts where we needed to wait on e.g. HTTP request readiness, or treat HTTP bodies as a stream, highlighted that the design of WASI Preview 1's <code>poll_oneoff</code> was not the right design for composable  systems. So, we changed the design of WASI itself in Preview 2 to have a <code>pollable</code> resource that can be created by any interface that needs to express waiting on readiness, and with that we more or less got forced into using async Rust for <code>async trait Subscribe</code> as the host implementation of each <code>pollable</code>.</p>\n<p>We may be able to find a way, for synchronous embeddings, to break some of tokio's rules about performing blocking syscalls on the \"main thread\", because that operation should only affect wasmtime-wasi and other crates that build on top of it. If we could break those rules, we could provide a faster path to perform some blocking file IO operations (likely <code>input-stream.blocking-read</code> and <code>output-stream.blocking-write-and-flush</code> only) without the cost of context switches. However, thats just a guess we have, and I am apprehensive to break tokio's rules because the consequences of that for other crates (like wasmtime-wasi-http, as well as whatever other code that others implement outside this tree) could both be pretty severe, and difficult to understand or document. We will see if we can investigate that more, but to be totally honest its not at the top of my priorities right now. If you can help us understand the business case for improving performance, that may help us move it up in priority.</p>\n</blockquote>",
        "id": 422922886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708644898
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960513214\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Those are great questions. This is a long answer but this is a pretty involved topic, so please excuse this wall of text, and let me know if there is anything about this I should explain better.</p>\n<p>We chose to use <code>tokio</code> for <code>wasmtime-wasi</code>'s implementation partly because for many production embedders (i.e. not users of the <code>wasmtime-cli</code> binary, but Fastly and Fermyon and Cosmonic and etc who use the <code>wasmtime</code> crate directly in their server software), wasmtime and WASI need to be implemented on top of an async runtime, and tokio is the async ecosystem of choice for all of our known embedders.</p>\n<p>Another significant factor is that <code>wasmtime-wasi-http</code> is built on an HTTP implementation and needs to integrate with the <code>pollable</code>s and <code>stream</code>s provided by <code>wasmtime-wasi</code>. For production HTTP stacks in Rust, <code>hyper</code>, which is built on <code>tokio</code>, is essentially the only option. A significant fraction of all internet traffic passes through hyper today - I'm not aware of any credible alternatives.</p>\n<p>In order to fit in with the same <code>pollable</code> and <code>stream</code> resources as wasi-sockets, wasi-http, and etc, wasi-filesystem is also implemented on top of tokio. Because Linux doesn't provide a non-blocking way to do File IO (except for <code>io_uring</code>, which afaik no production-ready Rust systems are using yet, though hopefully they will soon), the correct way to do File IO in tokio is to move that work onto a special blocking IO thread-pool managed by tokio, which costs two synchronizations between threads per blocking operation for the executor to hand the work off from an async task, and to get notified of completion to resume the async task - that our hypothesis for where the <code>futex</code> and <code>epoll_pwait</code> syscalls are coming from.</p>\n<p>I don't actually know where the extra <code>write</code> syscalls are coming from, but I haven't had time to dig in deeper yet. There may be an obvious low-hanging fruit there? If we could it cut down to just one <code>write</code> per WASI file <code>blocking-write-and-flush</code> that would be a nice win.</p>\n<p>Finally, why does wasmtime-cli, which is a totally synchronous Rust program, use <code>tokio</code> under the hood to implement the WASI interface? Basically, because we only had time to implement <code>wasmtime-wasi</code> once. When you use <code>wasmtime-wasi</code> with a synchronous wasmtime (i.e. <code>wasmtime::Config::async_support(false)</code>, which is the default), <code>wasmtime-wasi</code> provides the <code>Linker</code> with a shim that lazily creates a private <code>tokio</code> runtime, and calls the async Rust implementations of all the <code>pollable</code> and <code>stream</code> bits (and various other <code>wasi-filesystem</code> operations that turn into blocking-syscalls) underneath that private tokio.</p>\n<p>There is no configuration available to change whether blocking file IO is moved to separate thread or not - its very fundamental to how tokio and the wasmtime-wasi implementation work. The only way to change that behavior would be to rewrite wasmtime-wasi with a completely different internal architecture, to solely use synchronous Rust.</p>\n<p>A rewrite of <code>wasmtime-wasi</code> for the synchronous register of Rust would take a significant amount of time to write and maintain, and it would be challenging to integrate with the rest of the ecosystem - it would essentially cleave the wasmtime ecosystem in two. For example, <code>wasmtime-wasi-http</code>, or whatever other crates folks write beyond this tree that integrate with <code>wasmtime-wasi</code> - and thats virtually every interface that does any sort of IO, since streams and pollables are so fundamental - currently use wasmtime-wasi's <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/trait.Subscribe.html\"><code>pub trait Subscribe</code></a>, <code>pub trait HostInputStream</code>, and <code>pub trait HostOutputStream</code>, which all use async Rust functions and assume a tokio executor. We don't expect that problem to change anytime soon, and in fact we may expect it to become even more deeply integrated with <code>wasmtime</code> as the Component Model works on having native async as part of the next big effort.</p>\n<p>To give historical context: I designed <code>wasi-common</code> so that tokio was an optional dependency, and we were able to get away with it during WASI Preview 1 because WASI didnt yet have streams or an extensible poll interface. Our experience embedding <code>wasi-common</code> in various contexts where we needed to wait on e.g. HTTP request readiness, or treat HTTP bodies as a stream, highlighted that the design of WASI Preview 1's <code>poll_oneoff</code> was not the right design for composable  systems. So, we changed the design of WASI itself in Preview 2 to have a <code>pollable</code> resource that can be created by any interface that needs to express waiting on readiness, and with that we more or less got forced into using async Rust for <code>async trait Subscribe</code> as the host implementation of each <code>pollable</code>.</p>\n<p>We may be able to find a way, for synchronous embeddings, to break some of tokio's rules about performing blocking syscalls on the \"main thread\", because that operation should only affect wasmtime-wasi and other crates that build on top of it. If we could break those rules, we could provide a faster path to perform some blocking file IO operations (likely <code>input-stream.blocking-read</code> and <code>output-stream.blocking-write-and-flush</code> only) without the cost of context switches. However, thats just a guess we have, and I am apprehensive to break tokio's rules because the consequences of that for other crates (like wasmtime-wasi-http, as well as whatever other code that others implement outside this tree) could both be pretty severe, and difficult to understand or document. We will see if we can investigate that more, but to be totally honest its not at the top of my priorities right now. If you can help us understand the business case for improving performance, that may help us move it up in priority.</p>\n</blockquote>",
        "id": 422922919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708644923
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960788176\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you very much for explaining the reasons for choosing tokio in such detail.</p>\n<p>Currently, I am using <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> as my database. <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> two file APIs: LIBC file API (like fopen/fread/fwrte/fclose) and Posix file API (like open/read/write/close). After being compiled by the wasi-sdk, the two types of file APIs invoke the same type of interface: __imported_wasi_snapshot_preview1_fd_read.  <br>\n__imported_wasi_snapshot_preview1_fd_seek  <br>\n__imported_wasi_snapshot_preview1_fd_sync <br>\n__imported_wasi_snapshot_preview1_fd_write...and so on, please.</p>\n<p>For the FlashDB scenario, I now expect the file IO performance of wasmtime to be close to native, so I plan to try to modify the implementation of wasmtime's file IO, and directly use rust's file IO instead of using tokio. This is just a try, of course, very much look forward to your suggestions for changes.</p>\n</blockquote>",
        "id": 422956258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708669110
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960788176\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you very much for explaining the reasons for choosing tokio in such detail.</p>\n<p>Currently, I am using <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> as my database. <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> has two types of file APIs: LIBC file API (like fopen/fread/fwrte/fclose) and Posix file API (like open/read/write/close). After being compiled by the wasi-sdk, the two types of file APIs invoke the same type of interface: __imported_wasi_snapshot_preview1_fd_read.  <br>\n__imported_wasi_snapshot_preview1_fd_seek  <br>\n__imported_wasi_snapshot_preview1_fd_sync <br>\n__imported_wasi_snapshot_preview1_fd_write...and so on, please.</p>\n<p>For the FlashDB scenario, I now expect the file IO performance of wasmtime to be close to native, so I plan to try to modify the implementation of wasmtime's file IO, and directly use rust's file IO instead of using tokio. This is just a try, of course, very much look forward to your suggestions for changes.</p>\n</blockquote>",
        "id": 422956513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708669325
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960788176\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you very much for explaining the reasons for choosing tokio in such detail.</p>\n<p>Currently, I am using <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> as my database. <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> has two types of file APIs: LIBC file API (like fopen/fread/fwrte/fclose) and Posix file API (like open/read/write/close). After being compiled by the wasi-sdk, the two types of file APIs invoke the same type of interface:<br>\n__imported_wasi_snapshot_preview1_fd_read<br>\n__imported_wasi_snapshot_preview1_fd_seek  <br>\n__imported_wasi_snapshot_preview1_fd_sync <br>\n__imported_wasi_snapshot_preview1_fd_write...and so on, please.</p>\n<p>For the FlashDB scenario, I now expect the file IO performance of wasmtime to be close to native, so I plan to try to modify the implementation of wasmtime's file IO, and directly use rust's file IO instead of using tokio. This is just a try, of course, very much look forward to your suggestions for changes.</p>\n</blockquote>",
        "id": 422956675,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708669449
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960788176\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you very much for explaining the reasons for choosing tokio in such detail.</p>\n<p>Currently, I am using <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> as my database. <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> has two types of file APIs: LIBC file API (like fopen/fread/fwrte/fclose) and Posix file API (like open/read/write/close). After being compiled by the wasi-sdk, the two types of file APIs invoke the same type of interface:<br>\n__imported_wasi_snapshot_preview1_fd_read<br>\n__imported_wasi_snapshot_preview1_fd_seek  <br>\n__imported_wasi_snapshot_preview1_fd_sync <br>\n__imported_wasi_snapshot_preview1_fd_write...and so on, please.</p>\n<p>For the FlashDB scenario, I now expect the file IO performance of wasmtime to be close to native, so I plan to try to modify the implementation of wasmtime's file IO, and directly use rust's file IO instead of using tokio. This is just a try, of course, very much look forward to your suggestions.</p>\n</blockquote>",
        "id": 422957138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708669790
    },
    {
        "content": "<p>squillace <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1961145876\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>@pchickey: Just to add to the users of async wasmtime at scale, Microsoft also uses this, and has built it into the containerd/runwasi project for generalized Kubernetes usage as well. Great description of how this came about, thank you for the time and effort.</p>\n</blockquote>",
        "id": 422996224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708686990
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1961714264\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>@liutao-liu Thanks for your response, that use case makes sense and its one that many users might encounter whether using FlashDB or sqlite or etc.</p>\n<p>One detail I glossed over: we are using <code>cap_std::fs::File</code> (a thin wrapper on std File) to actually perform the io operations, not <code>tokio::fs::File</code>, but we are doing so inside a <code>tokio::task::spawn_blocking</code>, which makes it morally equivalent to the way tokio File wraps std File. The trick to avoiding the thread synchronizations is getting rid of <code>spawn_blocking</code>, which is architecturally kinda tricky to avoid, but it may be possible to hack through it, especially if you only need <code>wasmtime-cli</code> to work and not the more difficult composition scenarios I outlined.</p>\n</blockquote>",
        "id": 423061381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708709041
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1960788176\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thank you very much for explaining the reasons for choosing tokio in such detail.</p>\n<p>Currently, I am using <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> as my database. <a href=\"https://github.com/armink/FlashDB?tab=readme-ov-file\">FlashDB </a> has two types of file APIs: LIBC file API (like fopen/fread/fwrte/fclose) and Posix file API (like open/read/write/close). After being compiled by the wasi-sdk, the two types of file APIs invoke the same type of interface:<br>\n__imported_wasi_snapshot_preview1_fd_read<br>\n__imported_wasi_snapshot_preview1_fd_seek  <br>\n__imported_wasi_snapshot_preview1_fd_sync <br>\n__imported_wasi_snapshot_preview1_fd_write...and so on,.</p>\n<p>For the FlashDB scenario, I now expect the file IO performance of wasmtime to be close to native, so I plan to try to modify the implementation of wasmtime's file IO, and directly use rust's file IO instead of using tokio. This is just a try, of course, very much look forward to your suggestions.</p>\n</blockquote>",
        "id": 423306581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708909668
    },
    {
        "content": "<p>liutao-liu edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n#<span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile ,got test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 23 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n####<span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n#<span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n\n<span class=\"o\">**</span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tokio</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Have</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">considered</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?**</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 425436175,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709866017
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1984961122\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Hi @pchickey,thank you for your modification tips. After I made the following changes according to your tips, the performance of wasmtime has been greatly improved. <br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/1ceb425a-a1d7-4344-b970-ab1ed0e6bfa0\">https://github.com/bytecodealliance/wasmtime/assets/10509166/1ceb425a-a1d7-4344-b970-ab1ed0e6bfa0</a>)<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/3988e271-3584-4ec9-9e06-1f17824ec487\">https://github.com/bytecodealliance/wasmtime/assets/10509166/3988e271-3584-4ec9-9e06-1f17824ec487</a>)</p>\n<p>In the above test case, the wasmtime time has been optimized from 23 seconds to 6 seconds. As you might expect, the <code>futex</code> system call is gone. Also, the <code>write</code> and <code>read</code> system calls become <code>pwrite64</code> and <code>pread64</code>. I haven't figured out why yet.</p>\n<p>Also, is it necessary to submit a PR for my changes? I added a run option to control whether or not to block in tokio.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/85a40960-7471-4988-b8c7-a5336245900c\">https://github.com/bytecodealliance/wasmtime/assets/10509166/85a40960-7471-4988-b8c7-a5336245900c</a>)</p>\n</blockquote>",
        "id": 425437460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709866899
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1984961122\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Hi @pchickey,thank you for your modification tips. After I made the following changes according to your tips, the performance of wasmtime has been greatly improved. <br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/1ceb425a-a1d7-4344-b970-ab1ed0e6bfa0\">https://github.com/bytecodealliance/wasmtime/assets/10509166/1ceb425a-a1d7-4344-b970-ab1ed0e6bfa0</a>)<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/3988e271-3584-4ec9-9e06-1f17824ec487\">https://github.com/bytecodealliance/wasmtime/assets/10509166/3988e271-3584-4ec9-9e06-1f17824ec487</a>)</p>\n<p>In the above test case, the wasmtime time has been optimized from 23 seconds to 6 seconds. As you might expect, the <code>futex</code> system call is gone. Also, the <code>write</code> and <code>read</code> system calls become <code>pwrite64</code> and <code>pread64</code>,i haven't figured out why yet.</p>\n<p>Is it necessary to submit a PR for my changes? I added a run option to control whether or not to block in tokio.</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/85a40960-7471-4988-b8c7-a5336245900c\">https://github.com/bytecodealliance/wasmtime/assets/10509166/85a40960-7471-4988-b8c7-a5336245900c</a>)</p>\n</blockquote>",
        "id": 425437662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709867013
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1984961122\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Hi @pchickey,thank you for your modification tips. After I made the following changes according to your tips, the performance of wasmtime has been greatly improved. <br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/1ceb425a-a1d7-4344-b970-ab1ed0e6bfa0\">https://github.com/bytecodealliance/wasmtime/assets/10509166/1ceb425a-a1d7-4344-b970-ab1ed0e6bfa0</a>)<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/3988e271-3584-4ec9-9e06-1f17824ec487\">https://github.com/bytecodealliance/wasmtime/assets/10509166/3988e271-3584-4ec9-9e06-1f17824ec487</a>)</p>\n<p>In the above test case, the wasmtime time has been optimized from 23 seconds to 6 seconds. As you might expect, the <code>futex</code> system call is gone. Also, the <code>write</code> and <code>read</code> system calls become <code>pwrite64</code> and <code>pread64</code>,i haven't figured out why yet.</p>\n<p>Is it necessary to submit a PR for my changes? I added a run option to control whether or not to block in tokio. I think it is still necessary to provide an option for users to choose whether to use tokio</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/85a40960-7471-4988-b8c7-a5336245900c\">https://github.com/bytecodealliance/wasmtime/assets/10509166/85a40960-7471-4988-b8c7-a5336245900c</a>)</p>\n</blockquote>",
        "id": 425438013,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709867246
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1986529480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Thanks for testing that out @liutao-liu! I think it'd be reasonable to land something along these lines into the CLI itself, although I'd personally prefer to avoid a flag here since it'd be best to have the behavior turned on by default. What I might propose is something like:</p>\n<ul>\n<li>Add a new flag to <code>WasiCtx</code> that indicates whether blocking the current thread is ok. This defaults to <code>faults</code> but the CLI would set it to <code>true</code>. That would then be consulted during <code>spawn_blocking</code> to do what you're doing, but from configuration via <code>WasiCtx</code> instead.</li>\n<li>For the second slowdown, avoiding <code>in_tokio</code>, I think the best solution would be to do that as part of the CLI. For example the CLI could call <code>in_tokio</code> originally and that way all of wasm is executed within a tokio context. I believe that would hit the fast path in the <code>in_tokio</code> function where nothing is done.</li>\n</ul>\n<p>Would that work for you?</p>\n</blockquote>",
        "id": 425619249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1709938020
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1987544168\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for testing that out @liutao-liu! I think it'd be reasonable to land something along these lines into the CLI itself, although I'd personally prefer to avoid a flag here since it'd be best to have the behavior turned on by default. What I might propose is something like:</p>\n<ul>\n<li>Add a new flag to <code>WasiCtx</code> that indicates whether blocking the current thread is ok. This defaults to <code>faults</code> but the CLI would set it to <code>true</code>. That would then be consulted during <code>spawn_blocking</code> to do what you're doing, but from configuration via <code>WasiCtx</code> instead.</li>\n<li>For the second slowdown, avoiding <code>in_tokio</code>, I think the best solution would be to do that as part of the CLI. For example the CLI could call <code>in_tokio</code> originally and that way all of wasm is executed within a tokio context. I believe that would hit the fast path in the <code>in_tokio</code> function where nothing is done.</li>\n</ul>\n<p>Would that work for you?</p>\n</blockquote>\n<p>I understand your first propose, I can move the flag to wasictx.</p>\n<p>But I don't understand your second propose. Do you mean to run the whole wasmtime in tokio? Can you explain that in more detail?</p>\n</blockquote>",
        "id": 425829444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710126430
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1987544168\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for testing that out @liutao-liu! I think it'd be reasonable to land something along these lines into the CLI itself, although I'd personally prefer to avoid a flag here since it'd be best to have the behavior turned on by default. What I might propose is something like:</p>\n<ul>\n<li>Add a new flag to <code>WasiCtx</code> that indicates whether blocking the current thread is ok. This defaults to <code>faults</code> but the CLI would set it to <code>true</code>. That would then be consulted during <code>spawn_blocking</code> to do what you're doing, but from configuration via <code>WasiCtx</code> instead.</li>\n<li>For the second slowdown, avoiding <code>in_tokio</code>, I think the best solution would be to do that as part of the CLI. For example the CLI could call <code>in_tokio</code> originally and that way all of wasm is executed within a tokio context. I believe that would hit the fast path in the <code>in_tokio</code> function where nothing is done.</li>\n</ul>\n<p>Would that work for you?</p>\n</blockquote>\n<p>I understand your first propose, I can move the flag to wasictx. That's a good idea, it would be simpler.</p>\n<p>But I don't understand your second propose. Do you mean to run the whole wasmtime in tokio? Can you explain that in more detail?</p>\n</blockquote>",
        "id": 425829580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710126537
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1988946350\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>For the second point, sorry I think <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/fn.with_ambient_tokio_runtime.html\">this is actually the right function</a>, namely <code>with_ambient_tokio_runtime</code>.</p>\n<p>Can you try wrapping <a href=\"https://github.com/bytecodealliance/wasmtime/blob/99ea051b02cbb77662625b54c7073506f5d37d1d/src/commands/run.rs#L540\">this invocation of <code>Func::call</code></a> in that function and see if it improves the performance you're seeing?</p>\n</blockquote>",
        "id": 425968071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710176027
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2006964348\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Thanks for testing that out @liutao-liu! I think it'd be reasonable to land something along these lines into the CLI itself, although I'd personally prefer to avoid a flag here since it'd be best to have the behavior turned on by default. What I might propose is something like:</p>\n<ul>\n<li>Add a new flag to <code>WasiCtx</code> that indicates whether blocking the current thread is ok. This defaults to <code>faults</code> but the CLI would set it to <code>true</code>. That would then be consulted during <code>spawn_blocking</code> to do what you're doing, but from configuration via <code>WasiCtx</code> instead.</li>\n<li>For the second slowdown, avoiding <code>in_tokio</code>, I think the best solution would be to do that as part of the CLI. For example the CLI could call <code>in_tokio</code> originally and that way all of wasm is executed within a tokio context. I believe that would hit the fast path in the <code>in_tokio</code> function where nothing is done.</li>\n</ul>\n<p>Would that work for you?</p>\n</blockquote>\n<p>Hello @alexcrichton , I tested the solution you proposed and it actually took an average of 14 seconds. Compared with the original solution (23 seconds), this improvement is not ideal. This is because each I/O operation is performed by invoking spawn_blocking, which still causes a large number of asynchronous waits.<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/af1930ad-aa22-43d2-beac-444ba7d2b850\">https://github.com/bytecodealliance/wasmtime/assets/10509166/af1930ad-aa22-43d2-beac-444ba7d2b850</a>)</p>\n</blockquote>",
        "id": 427673242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710848585
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2007417798\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Sorry, but to confirm, did you keep the changes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1984961122\">mentioned above</a>, e.g. the <code>--block-file-io-in-tokio</code> flag? </p>\n<p>I sketched out what those changes might look like <a href=\"https://github.com/alexcrichton/wasmtime/commit/427ec065d11f80c7568ceed0dc280b11afc81af9\">in this commit</a>, but I think we'll both want to skip the <code>spawn_blocking</code> (conditionally) and additionally have the <code>with_ambient_tokio_runtime</code> bits.</p>\n<p>Can you confirm whether that commit has the performance that you're looking for?</p>\n</blockquote>",
        "id": 427742545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710860410
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2008485911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Sorry, but to confirm, did you keep the changes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1984961122\">mentioned above</a>, e.g. the <code>--block-file-io-in-tokio</code> flag?</p>\n<p>I sketched out what those changes might look like <a href=\"https://github.com/alexcrichton/wasmtime/commit/427ec065d11f80c7568ceed0dc280b11afc81af9\">in this commit</a>, but I think we'll both want to skip the <code>spawn_blocking</code> (conditionally) and additionally have the <code>with_ambient_tokio_runtime</code> bits.</p>\n<p>Can you confirm whether that commit has the performance that you're looking for?</p>\n</blockquote>\n<p>With these two changes, it takes 6 seconds, no further improvement.</p>\n<p>Also, you mentioned the new flags added in wasictx, which can't be read here.<a href=\"https://github.com/alexcrichton/wasmtime/blob/b1e7ae92ae075535136ade63677f847993264c85/crates/wasi/src/preview2/preview1.rs#L550\">in_tokio</a></p>\n</blockquote>",
        "id": 427836617,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710897302
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2008485911\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Sorry, but to confirm, did you keep the changes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-1984961122\">mentioned above</a>, e.g. the <code>--block-file-io-in-tokio</code> flag?</p>\n<p>I sketched out what those changes might look like <a href=\"https://github.com/alexcrichton/wasmtime/commit/427ec065d11f80c7568ceed0dc280b11afc81af9\">in this commit</a>, but I think we'll both want to skip the <code>spawn_blocking</code> (conditionally) and additionally have the <code>with_ambient_tokio_runtime</code> bits.</p>\n<p>Can you confirm whether that commit has the performance that you're looking for?</p>\n</blockquote>\n<p>With these two changes, it takes 6 seconds, hardly any further improvement.</p>\n<p>Also, you mentioned the new flags added in wasictx, which can't be read here.<a href=\"https://github.com/alexcrichton/wasmtime/blob/b1e7ae92ae075535136ade63677f847993264c85/crates/wasi/src/preview2/preview1.rs#L550\">in_tokio</a></p>\n</blockquote>",
        "id": 427836721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710897372
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2008493054\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Oops sorry I forgot to actually turn the option on. I do realize that the goal is to avoid <code>spawn_blocking</code>, and most of the patch I linked was doing that. If you try <a href=\"https://github.com/alexcrichton/wasmtime/commits/releive-tokio-overhead\">this branch's latest commit</a> that should remove the <code>spawn_blocking</code>. Can you test and see if that performance is what you're looking for?</p>\n</blockquote>",
        "id": 427836902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710897571
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2008590590\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oops sorry I forgot to actually turn the option on. I do realize that the goal is to avoid <code>spawn_blocking</code>, and most of the patch I linked was doing that. If you try <a href=\"https://github.com/alexcrichton/wasmtime/commits/releive-tokio-overhead\">this branch's latest commit</a> that should remove the <code>spawn_blocking</code>. Can you test and see if that performance is what you're looking for?</p>\n</blockquote>\n<p>Using your latest commit, it took 7 seconds. You haven't changed the code <a href=\"https://github.com/alexcrichton/wasmtime/blob/b1e7ae92ae075535136ade63677f847993264c85/crates/wasi/src/preview2/preview1.rs#L550\">here.</a> After I changed it here, it took 6 seconds.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">in_tokio</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">future</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">futures</span>::<span class=\"n\">executor</span>::<span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 427845017,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710903354
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2008590590\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oops sorry I forgot to actually turn the option on. I do realize that the goal is to avoid <code>spawn_blocking</code>, and most of the patch I linked was doing that. If you try <a href=\"https://github.com/alexcrichton/wasmtime/commits/releive-tokio-overhead\">this branch's latest commit</a> that should remove the <code>spawn_blocking</code>. Can you test and see if that performance is what you're looking for?</p>\n</blockquote>\n<p>Using your latest commit, it took 7 seconds. You haven't changed the code <a href=\"https://github.com/alexcrichton/wasmtime/blob/b1e7ae92ae075535136ade63677f847993264c85/crates/wasi/src/preview2/preview1.rs#L550\">here.</a> After I modified it based on yours,  it took 6 seconds.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">in_tokio</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nc\">Future</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">future</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>::<span class=\"n\">Output</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">futures</span>::<span class=\"n\">executor</span>::<span class=\"n\">block_on</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 427845186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710903475
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2009683591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Ok, thanks for confirming!</p>\n<p>You're right that I didn't change <code>in_tokio</code> and that was intentional. Changing <code>in_tokio</code> would break other functionality, even on an opt-in basis, so we can't quite so easily switch to a different executor and assume that it works. Some users of <code>in_tokio</code> require the tokio event loop to get turned, and other users don't necessarily need it. To use a totally different executor we'd have to classify which is which.</p>\n</blockquote>",
        "id": 427938248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710944274
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2009788389\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8190\">https://github.com/bytecodealliance/wasmtime/pull/8190</a> with the changes I made above cleaned up a bit. That's probably at least a good new baseline to start from in terms of optimizing.</p>\n</blockquote>",
        "id": 427949292,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1710946994
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028005074\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>hi @pchickey,<br>\nI'm still working on optimizing wasmtime's fd_read\\fd_write performance, and I've found <code>BorrowChecker</code> to be a performance hotspot, at around 7% cpu. I looked at the history of commits for <code>crates/wiggle</code> and couldn't see why <code>BorrowChecker</code> was introduced. Do you know the historical background to the introduction of <code>BorrowChecker</code>?</p>\n</blockquote>",
        "id": 430377922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711794368
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028005074\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>hi @pchickey,<br>\nI'm still working on optimizing wasmtime's fd_read\\fd_write performance, and I've found <code>BorrowChecker</code> to be a performance hotspot, at around 7% cpu. I looked at the history of commits for <code>crates/wiggle</code> and couldn't see why <code>BorrowChecker</code> was introduced. Do you know the historical background to the introduction of <code>BorrowChecker</code>?</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/1e53b770-66a1-47c6-92be-a0ce71ba1500\">https://github.com/bytecodealliance/wasmtime/assets/10509166/1e53b770-66a1-47c6-92be-a0ce71ba1500</a>)</p>\n</blockquote>",
        "id": 430377952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711794420
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028005074\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>/hi @pchickey,<br>\nI'm still working on optimizing wasmtime's fd_read\\fd_write performance, and I've found <code>BorrowChecker</code> to be a performance hotspot, at around 7% cpu. I looked at the history of commits for <code>crates/wiggle</code> and couldn't see why <code>BorrowChecker</code> was introduced. Do you know the historical background to the introduction of <code>BorrowChecker</code>?<br>\nWhich practical application scenarios require the use of <code>BorrowChecker</code>, and does the cli method also require the use of <code>BorrowChecker</code>?</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/1e53b770-66a1-47c6-92be-a0ce71ba1500\">https://github.com/bytecodealliance/wasmtime/assets/10509166/1e53b770-66a1-47c6-92be-a0ce71ba1500</a>)</p>\n</blockquote>",
        "id": 430386458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711802099
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028640677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Wasmtime's <code>borrow checker</code> should be modeled after Rust's <code>borrow checker</code>, right? The <code>borrow checker</code> of Rust will only be executed by the compiler, so it will not have a negative impact on runtime performance. The <code>borrow checker</code>  of wasmtime is executed during runtime, which can have a negative impact on performance. I don't know in what scenario there will be a simultaneous occurrence of <code>share borrow</code> and <code>mut borrow</code> for <code>guest memory</code>, especially <code>wasmtime-cli</code>.</p>\n</blockquote>",
        "id": 430468038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711882470
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028005074\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>//hi @pchickey,<br>\nI'm still working on optimizing wasmtime's fd_read\\fd_write performance, and I've found <code>BorrowChecker</code> to be a performance hotspot, at around 7% cpu. I looked at the history of commits for <code>crates/wiggle</code> and couldn't see why <code>BorrowChecker</code> was introduced. Do you know the historical background to the introduction of <code>BorrowChecker</code>?<br>\nWhich practical application scenarios require the use of <code>BorrowChecker</code>, and does the wasmtime-cli also require the use of <code>BorrowChecker</code>?</p>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/1e53b770-66a1-47c6-92be-a0ce71ba1500\">https://github.com/bytecodealliance/wasmtime/assets/10509166/1e53b770-66a1-47c6-92be-a0ce71ba1500</a>)</p>\n</blockquote>",
        "id": 430468055,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711882500
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028640677\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Wasmtime's <code>borrow checker</code> should be modeled after Rust's <code>borrow checker</code>, right? The <code>borrow checker</code> of Rust will only be executed by the compiler in the static code analysis phase, so it will not have a negative impact on runtime performance. The <code>borrow checker</code>  of wasmtime is executed during runtime, which can have a negative impact on performance. I don't know in what scenario there will be a simultaneous occurrence of <code>share borrow</code> and <code>mut borrow</code> for <code>guest memory</code>, especially <code>wasmtime-cli</code>.</p>\n</blockquote>",
        "id": 430468210,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711882674
    },
    {
        "content": "<p>liutao-liu <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028751095\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/734\">Issue#734</a> have some explaination of the backgroud of  <code>borrow checker</code>, the <code>proposal</code> mentioned in the issue is which proposal?</p>\n</blockquote>",
        "id": 430478270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711893056
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028640677\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Wasmtime's <code>borrow checker</code> should be modeled after Rust's <code>borrow checker</code>, right? The <code>borrow checker</code> of Rust will only be executed by the compiler in the static code analysis phase, so it will not have a negative impact on runtime performance. The <code>borrow checker</code>  of wasmtime is executed during runtime, which can have a negative impact on performance. I don't know why is wasmtime not allowing hosts to hold simultaneously <code>share borrow</code> and <code>mut borrow</code> pointer of <code>guest memory</code>. I feel like this can be relaxed like C language, with <code>.wasm</code> ensuring memory security.</p>\n</blockquote>",
        "id": 430485988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711899402
    },
    {
        "content": "<p>liutao-liu edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028640677\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>Wasmtime's <code>borrow checker</code> should be modeled after Rust's <code>borrow checker</code>, right? The <code>borrow checker</code> of Rust will only be executed by the compiler in the static code analysis phase, so it will not have a negative impact on runtime performance. The <code>borrow checker</code>  of wasmtime is executed during runtime, which can have a negative impact on performance. I don't know why is wasmtime not allowing hosts to hold simultaneously <code>share borrow</code> and <code>mut borrow</code> pointer of <code>guest memory</code>. I feel like this can be relaxed like C/C++, with <code>.wasm</code> ensuring memory security.</p>\n</blockquote>",
        "id": 430486046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711899466
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2028959419\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<blockquote>\n<p>I don't know why is wasmtime not allowing hosts to hold simultaneously <code>share borrow</code> and <code>mut borrow</code> pointer of <code>guest memory</code>. I feel like this can be relaxed like C/C++, with <code>.wasm</code> ensuring memory security.</p>\n</blockquote>\n<p>wasm memory sandboxing is not really related to <code>BorrowChecker</code> - <code>BorrowChecker</code> ensures that regardless of what a wasm program may provide to Wasmtime as hostcall arguments, Wasmtime cannot be caused to violate Rust safety rules. imagine if an embedder exposed a host-optimized <code>memcpy(dest, src, len)</code>; if a wasm program called that with overlapping <code>dest</code> and <code>src</code>, implementing such a function by just forwarding the arguments to libc's <code>memcpy()</code> would yield UB in Wasmtime, even though the wasm guest was safely sandboxed from directly accessing memory outside its heap.</p>\n<p>(<code>BorrowChecker</code> also ensures references are properly aligned and lie entirely inside the wasm memory they ought to be in, which are checks even a C/C++ embedder of wasmtime would need and would cause some overhead. this is all pretty similar to the kinds of checks <code>pread(2)</code> and similar do before using user inputs)</p>\n<p>while it might be possible to defer these checks in some cases (passthrough to a host <code>pread(2)</code> is probably a good example..) it's still tricky in Wasmtime because we don't know that pread(2) isn't happening at the end of a call chain like:<br>\n<code>wasm -&gt; embedder_hostcall(buf, len) -&gt; BorrowChecker in wasmtime tracks &amp;[buf] -&gt; call back into wasm -&gt; wasm calls wasi-common's fd_read(buf, len)</code>. so from <code>fd_read</code>'s perspective it's only safe to pass through arguments to the host OS _if Wasmtime has no other borrow overlapping with the buffer to be read into_.</p>\n<p>iirc the proposal in #734 is basically what became <code>BorrowChecker</code> and <code>BorrowChecker</code> is still what what we plan to use even as <code>wig/wit/witx</code> has evolved, though Pat or Alex would definitely be more familiar with that.</p>\n<p>re. simultaneously holding <code>share borrow</code> and <code>mut borrow</code> of guest memory, <code>BorrowChecker</code> exists partially to support that, erroring if those borrows would overlap. disallowing concurrent borrows of guest memory would make <code>BorrowChecker</code> much simpler and faster, but a much more limited host interface <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>",
        "id": 430518988,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711930210
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2029908374\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>The <code>BorrowChecker</code> type is quite old in Wasmtime and I don't have anything to add about its rationale over what @iximeow already said. That being said I believe it's over-powered relative to what we need it to do, hence the cost you're seeing, so I posted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8277\">https://github.com/bytecodealliance/wasmtime/pull/8277</a> which should remove the performance issue you're seeing related to <code>BorrowChecker</code>. That comes at a cost of redefining what it does, but I believe that should be ok given how it's used today.</p>\n</blockquote>",
        "id": 430608231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711983956
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdio</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">stdlib</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unistd</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n<span class=\"p\">#</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">fcntl</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FILE</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">fp</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n\n<span class=\"w\">        </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">O_CREAT</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">O_WRONLY</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">S_IRUSR</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">S_IWUSR</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n\n<span class=\"w\">            </span><span class=\"n\">lseek</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SEEK_SET</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"hello world! \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">fsync</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>firstï¼Œcompile test.c in the preceding test case into WASM bytecode using the WASI SDK</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O3</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<ul>\n<li>second, WASMTIME AOT compile ,got test.aot.</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">simd</span><span class=\"p\">,</span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<ul>\n<li>third, Test Case Running Duration. It takes about 40 seconds. </li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<h3>Expected Results</h3>\n<p>wasmtime takes about the same time as native and wamr.</p>\n<h3>Actual Results</h3>\n<p>Wasmtime takes about 23 seconds. <br>\nThe same test.c, native or wamr only takes about 2 seconds.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version :16.0.0</p>\n<p>Operating system: ubuntu 20.04</p>\n<p>Architecture: aarch64 (same as x86 for this case)</p>\n<h3>Extra Info</h3>\n<h4>Profile</h4>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\">  </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">profile</span><span class=\"o\">=</span><span class=\"n\">jitdump</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n<span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n<span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span>\n</code></pre></div>\n<p>As shown in the following figure, most performance hotspots are on Tokio. This is because wasmtime uses Tokio to implement the file I/O interface, involving:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__imported_wasi_snapshot_preview1_fd_read</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_seek</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_sync</span>\n<span class=\"n\">__imported_wasi_snapshot_preview1_fd_write</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/082e97b5-3a03-40bf-87fa-9041de881571)</span>\n</code></pre></div>\n<h1>profile for native</h1>\n<p>perf record -g -k mono ./test<br>\nperf report </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/995f3fb1-164d-4b6c-93ba-f7c7d71b67b2)</span>\n\n<span class=\"p\">####</span><span class=\"w\"> </span><span class=\"n\">System</span><span class=\"w\"> </span><span class=\"n\">Call</span><span class=\"w\"> </span><span class=\"n\">Times</span><span class=\"w\"> </span><span class=\"n\">Statistics</span>\n<span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">figure</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">.</span>\n<span class=\"n\">Is</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">uses</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">tokio</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">IO</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">three</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resulting</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">poor</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n<span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>\n<span class=\"n\">strace</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">aot</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447\">https://github.com/bytecodealliance/wasmtime/assets/10509166/b964aa40-e4ae-4378-a01d-3a604f8b1447</a>)</p>\n<p>```</p>\n<h1>strace for native( ths same as wamr )</h1>\n<p>strace -c ./test </p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">image</span><span class=\"p\">](</span><span class=\"n\">https</span><span class=\"p\">:</span><span class=\"c1\">//github.com/bytecodealliance/wasmtime/assets/10509166/c351808f-f8cc-4b28-8a74-c94f600242f2)</span>\n\n\n<span class=\"o\">**</span><span class=\"n\">Why</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">Tokio</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">/</span><span class=\"n\">O</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">Have</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">considered</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"o\">?**</span>\n\n<span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 482667695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731693938
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973#issuecomment-2479633452\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7973\">issue #7973</a>:</p>\n<blockquote>\n<p>IIRC this was fixed in #8303, so I'm going to close this</p>\n</blockquote>",
        "id": 482667698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1731693939
    }
]