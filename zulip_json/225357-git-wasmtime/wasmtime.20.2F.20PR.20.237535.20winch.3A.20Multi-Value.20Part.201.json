[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a> from <code>saulecabrera:winch-multi-value</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This change adds initial support for the Multi-Value proposal to Winch, focusing on function calls, support for Multi-Value for blocks will be added on top of this change in a different pull request.</p>\n<p>This change is divided into two main parts:</p>\n<ul>\n<li>Infrastructure changes needed to support Multi-Value</li>\n<li>Handling Multi-Value returns for function calls</li>\n</ul>\n<h4>Infrastructure changes needed to support Multi-Value</h4>\n<p>Some notable changes were needed in order to support this proposal, namely:</p>\n<ul>\n<li>Introducing the notion of <code>ABIOperands</code> and rewriting the <code>ABIParams</code> and <code>ABIResults</code> in terms of <code>ABIOperands</code>.</li>\n<li>In Winch's default calling convention, results are stored in reverse order: if a function produces multiple results, the first result is stored in a memory location and the last result is stored in a register; given that function results are captured in the value stack after a function call, this approach makes it trivial to maintain the following value stack invariants:<ul>\n<li>Spilled memory values always precede register values</li>\n<li>Spilled values are stored from oldest to newest, matching their respective locations on the machine stack.</li>\n</ul>\n</li>\n<li>Introducing type-sized spills: Prior to this change, only floats produced type-sized spills, this created an inconsistency on how slots for results are handled and made it harder to manage the stack for multiple-results; this change introduces type-sized spills for integer and floats, making the spilling strategy uniform across the compiler. This might introduce some overhead, since this change is now introducing two instructions were previously there only used to be one (e.g. <code>push</code> vs <code>sub + mov</code>). My intention is to profile,  and try to improve this strategy if possible later on.</li>\n</ul>\n<h4>Handling Multi-Value returns for function calls</h4>\n<p>The approach for handling multiple results for function calls involves:</p>\n<p>Adding an implicit extra parameter to the <code>ABIParams</code> definition, when a function returns multiple values; from the callee's perspective, this parameter is treated like any other \"special\" parameter (e.g <code>VMContext</code>), to which, we give it a well know <code>LocalSlot</code> for later referencing when storing the return values. From the caller's perspective, extra stack space is created before the call, and the address to that space is passed in to the callee, via the return pointer parameter and once the function returns, the values in the created space are captured as values in the value stack.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 401979545,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699966184
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 401979546,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699966184
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 401979547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699966184
    },
    {
        "content": "<p><strong>saulecabrera</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 401979548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699966184
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 401995939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699971442
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 401996152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699971503
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>:</p>\n<blockquote>\n<p>This change adds initial support for the Multi-Value proposal to Winch, focusing on function calls, support for Multi-Value for blocks will be added on top of this change in a different pull request.</p>\n<p>This change is divided into two main parts:</p>\n<ul>\n<li>Infrastructure changes needed to support Multi-Value</li>\n<li>Handling Multi-Value returns for function calls</li>\n</ul>\n<h4>Infrastructure changes needed to support Multi-Value</h4>\n<p>Some notable changes were needed in order to support this proposal, namely:</p>\n<ul>\n<li>Introducing the notion of <code>ABIOperands</code> and rewriting the <code>ABIParams</code> and <code>ABIResults</code> in terms of <code>ABIOperands</code>.</li>\n<li>In Winch's default calling convention, results are stored in reverse order: if a function produces multiple results, the first result is stored in a memory location and the last result is stored in a register; given that function results are captured in the value stack after a function call, this approach makes it trivial to maintain the following value stack invariants:<ul>\n<li>Spilled memory values always precede register values</li>\n<li>Spilled values are stored from oldest to newest, matching their respective locations on the machine stack.</li>\n</ul>\n</li>\n<li>Introducing type-sized spills: Prior to this change, only floats produced type-sized spills, this created an inconsistency on how slots for results are handled and made it harder to manage the stack for multiple-results; this change introduces type-sized spills for integer and floats, making the spilling strategy uniform across the compiler. This might introduce some overhead, since this change is now, in the 32-bit case, introducing two instructions were previously there only used to be one (e.g. <code>push</code> vs <code>sub + mov</code>). My intention is to profile, and try to improve this strategy if needed, later on. </li>\n</ul>\n<h4>Handling Multi-Value returns for function calls</h4>\n<p>The approach for handling multiple results for function calls involves:</p>\n<p>Adding an implicit extra parameter to the <code>ABIParams</code> definition, when a function returns multiple values; from the callee's perspective, this parameter is treated like any other \"special\" parameter (e.g <code>VMContext</code>), to which, we give it a well know <code>LocalSlot</code> for later referencing when storing the return values. From the caller's perspective, extra stack space is created before the call, and the address to that space is passed in to the callee, via the return pointer parameter and once the function returns, the values in the created space are captured as values in the value stack.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 401997643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699971965
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730294743\">PR review</a>:</p>\n<blockquote>\n<p>LGTM but I'm still a little sketched out by those disassembly changes where I feel like I'm only seeing one half of a change or something like that. Maybe you can explain what is going on?</p>\n</blockquote>",
        "id": 402036143,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983686
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730294743\">PR review</a>:</p>\n<blockquote>\n<p>LGTM but I'm still a little sketched out by those disassembly changes where I feel like I'm only seeing one half of a change or something like that. Maybe you can explain what is going on?</p>\n</blockquote>",
        "id": 402036144,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983686
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392960548\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we document what the <code>map</code> closure is supposed to do here? Was not immediately obvious to me when reading the code.</p>\n</blockquote>",
        "id": 402036146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392956521\">PR review comment</a>:</p>\n<blockquote>\n<p>This seems like it is unnecessarily setting us up for porting issues in the future when we have a 32-bit target. Can we just put the size directly or use <code>mem::size_of::&lt;u32&gt;()</code> or something instead?</p>\n</blockquote>",
        "id": 402036147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392988896\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, great!</p>\n</blockquote>",
        "id": 402036148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392971361\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this an expected/intended change in this first commit? I thought this was purely a refactoring to prep for multi-value, and I wouldn't expect any functional changes. Certainly not ones where we are changing from where we are pushing values to the stack when I don't see any corresponding changes in how we pop values from the stack.</p>\n<p>But maybe this is addressed in follow up commits that I haven't gotten to yet...</p>\n</blockquote>",
        "id": 402036149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392962117\">PR review comment</a>:</p>\n<blockquote>\n<p>Documentation is out of sync with the code: it returns a set not an iterator.</p>\n</blockquote>",
        "id": 402036150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392963205\">PR review comment</a>:</p>\n<blockquote>\n<p>Ditto regarding <code>map</code></p>\n</blockquote>",
        "id": 402036151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392974541\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> </p>\n</blockquote>",
        "id": 402036152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1392962660\">PR review comment</a>:</p>\n<blockquote>\n<p><code>debug_assert_eq!</code> will give better diagnostics on panic.</p>\n</blockquote>",
        "id": 402036153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699983687
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 402057874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991371
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730642287\">PR review</a>.</p>",
        "id": 402058033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991435
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393185308\">PR review comment</a>:</p>\n<blockquote>\n<p>I ended up moving the definition to the implementation of each ABI, that way once it'll be easier to integrate once we support 32-bit targets. </p>\n</blockquote>",
        "id": 402058034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991435
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730642452\">PR review</a>.</p>",
        "id": 402058042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991441
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393185435\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 402058043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991441
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730643046\">PR review</a>.</p>",
        "id": 402058092,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991464
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393185910\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed! </p>\n</blockquote>",
        "id": 402058094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991465
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730643403\">PR review</a>.</p>",
        "id": 402058127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991478
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393186178\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 402058129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991478
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730646327\">PR review</a>.</p>",
        "id": 402058322,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991576
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393188391\">PR review comment</a>:</p>\n<blockquote>\n<p>It's indeed intended, I just forgot to mention it in the commit message: I realized that the slot for the <code>VMContext</code> was not aligned, so I introduced alignment for it, similar to what I did for the return pointer. </p>\n<p>In the first commit, that is here <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535/commits/5dcefe38b9dc4cac3f24bf9f4d0eb20f43f9b6a1#diff-b396908c6cc30abb2ad12e93c9443d5b8875dd320980cde6896068f5e5cbf4c1R101-R106\">https://github.com/bytecodealliance/wasmtime/pull/7535/commits/5dcefe38b9dc4cac3f24bf9f4d0eb20f43f9b6a1#diff-b396908c6cc30abb2ad12e93c9443d5b8875dd320980cde6896068f5e5cbf4c1R101-R106</a>; hopefully this clarifies things!</p>\n</blockquote>",
        "id": 402058325,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991576
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730647322\">PR review</a>.</p>",
        "id": 402058386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991612
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393189210\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed</p>\n</blockquote>",
        "id": 402058387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991612
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393185308\">PR review comment</a>.</p>",
        "id": 402059207,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1699991969
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#pullrequestreview-1730919797\">PR review</a>.</p>",
        "id": 402080647,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700000420
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535#discussion_r1393378710\">PR review comment</a>:</p>\n<blockquote>\n<p>That makes sense -- thanks for the explanation!</p>\n</blockquote>",
        "id": 402080649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700000420
    },
    {
        "content": "<p>saulecabrera merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7535\">PR #7535</a>.</p>",
        "id": 402083309,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1700001629
    }
]