[
    {
        "content": "<p>michelledaviest <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1666243584\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Hi! When you run <code>wasmtime run --help</code>, it still says that the way to pass arguments into the WebAssembly file you're executing is using the <code>--</code> flag, ie, <code>wasmtime run [OPTIONS] &lt;MODULE&gt; [--] [ARGS]...</code>. Could we change this to remove the <code>--</code> from the help message? </p>\n<p>For reference: Currently when you run <code>wasmtime run foo.wasm -- --arg</code> (which used to work a few weeks ago), wasmtime reports that it can't find <code>--arg</code>, which is super confusing behavior and it took me a long time to debug this and trace it back to this commit.</p>\n</blockquote>",
        "id": 381988457,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691188725
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1666536674\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>I think you might be using different versions of wasmtime perhaps? Currently I see:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">h</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">Usage</span>: <span class=\"nc\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">OPTIONS</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">WASM</span><span class=\"o\">&gt;..</span><span class=\"p\">.</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>whereas with 11.0.1 I see:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">h</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">USAGE</span>:\n    <span class=\"nc\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">OPTIONS</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">MODULE</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">ARGS</span><span class=\"p\">]</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>so I think that with 11.0.1 the help message is accurate and with <code>main</code> the help message is also accurate. The main difference is that the CLI changed with this PR, which was the purpose of this PR?</p>\n</blockquote>",
        "id": 382175367,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691249909
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1671856011\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>As a quick data point, this change also tripped up @ssunkin-fastly just now while she was re-running some things after rebasing her summer internship branch on top of current <code>main</code>. It indeed does what it says on the tin; but if both of my interns independently tripped over it and burned a few hours trying to work things out, other CLI users might as well. I wonder if we should think a little bit about whether we can include some more prominent notice, or figure out some sort of migration strategy?</p>\n</blockquote>",
        "id": 383368513,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691602220
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1671915906\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Do y'all have a place in mind for where this could be mentioned or how this could be migrated to? I do realize it's confusing coming from prior versions so I at least wanted to make sure <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/RELEASES.md#changed-1\">it's in the release notes for 12.0.0</a> but I'm not sure how else best to mitigate this </p>\n</blockquote>",
        "id": 383381436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691604991
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1671997618\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Yeah, I've thought about this for a bit and I'm not comping up with a good intermediate point or \"you might have done something wrong\" warning trigger condition. The issue I guess is that in the new design, we strictly pass through every arg past the wasm; looking at those args for wasmtime-like things or a <code>--</code> or whatnot and heuristically emitting a warning would be incorrect. Maybe I'm missing someway we could detect this though -- anyone else have thoughts?</p>\n</blockquote>",
        "id": 383395428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691608362
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672002258\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>I guess an alternative would be to simply not do this -- if we believe that the details of the old syntax are hardcoded in enough places (the shell histories of two people above for sure, maybe assorted scripts that others have), and the long-tail cost of silent breakage is high, then maybe we should revert and consider the interface frozen. (I'll note that we haven't released this change yet, so it's \"not too late\".) In the end that's a value judgment though; the only objective data we have is \"cost a half-day of debugging total\" <em>shrug</em></p>\n</blockquote>",
        "id": 383396177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691608556
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672018329\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>One other option from conversation with @iximeow just now: Wasmtime could scan the WASI program's args for options that are also valid Wasmtime args, and warn, with a warning that will eventually be removed. Then add a <code>--literal-args</code> or <code>--disable-arg-warning</code> or something to silence this warning. In some future version remove both and make the current (args are just literals, no warnings) behavior the default.</p>\n</blockquote>",
        "id": 383398076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691609098
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672033979\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>One option would be to include both CLI parsers and compare the results of parsing. If both the old and the new CLI parser successfully parse but produce different results then a warning could be issued. I don't know how to implement that in a way that's maintainable though (aka not duplicating everything and a giant <code>impl PartialEq&lt;OldOpts&gt; for NewOpts</code> which is brittle)</p>\n<p>Personally I'm not too much of a fan of considering things frozen. That was a conscious decision on our part to have an ever-increasing major version number to signal that while we'll do our best to not change everything all the time we still reserve the right to do so. I think it's ok to back this out and reconsider how best to land it,  but I don't want to be in a state where we're afraid of landing changes. Additionally I would prefer to avoid a situation where we spend most of our time figuring out how to land changes rather than actually landing changes.</p>\n<p>I certainly don't mean to discount the confusion and frustration though. My personal take on topics like this is typically pretty biased towards the maintenance-of-the-tool aspect since that's what I do primarily, so I know I don't do a great job of always anticipating all the fallout of changes like this.</p>\n</blockquote>",
        "id": 383400394,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691609767
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672143677\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Would it make sense to talk about this at the next Wasmtime biweekly (next week)? I'm also sympathetic to the tool-maintainer \"we need to move the design forward\" aspect too, FWIW. Would be curious to hear what others think.</p>\n</blockquote>",
        "id": 383416812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691614883
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672172201\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Sounds good to me!</p>\n</blockquote>",
        "id": 383420645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691616301
    },
    {
        "content": "<p>michelledaviest <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672178469\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>How about if you pass in <code>--</code>, wasmtime spits out a custom error that says something along the lines of \"Things have changed. This is what the new behavior is\"? I think it's fine that the old version of passing arguments isn't supported anymore as long as there's a way to recognize what the issue was and quickly change things. I think the reason Sophia and I spent hours debugging this was just that the error message was super confusing and not helpful.</p>\n</blockquote>",
        "id": 383421419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691616638
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672199401\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Above you mentioned that the error you were seeing was that Wasmtime said it couldn't find \"--arg\" when executed as <code>wasmtime run foo.wasm -- --arg</code>, could you paste the full error you were seeing? With Wasmtime 11 that's interpreted as <code>foo.wasm --arg</code> but with Wasmtime 12 (and <code>main</code>) that's interpreted as <code>foo.wasm -- --arg</code> (e.g. the wasm itself receives the <code>--</code>). I'm not actually sure what component of the system was indicating that <code>--arg</code> couldn't be located, but it might have been the wasm itself because the wasm may not have been expecting <code>--</code> as its first argument.</p>\n<p>Otherwise though unfortunately that runs afoul of the disambiguation here because you may want to pass <code>--</code> to the wasm module itself, so <code>--</code> doesn't necessarily indicate that it's old-vs-new.</p>\n</blockquote>",
        "id": 383423392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691617623
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672227640\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>one other thought i wanted to mention here in case it helps any other readers think through the space - there are kind of two camps of <code>--</code>-as-a-separator:</p>\n<ul>\n<li><code>perf</code>, <code>strace</code>, etc, now wasmtime, where the argument scheme is pretty stoically <code>[command] [command-args] [target-program] [target-program-args]</code></li>\n<li><code>cargo run</code>, <code>lldb</code>, <code>gdb kinda</code>, etc, where the argument scheme is <code>[command] [arguments, target program might be in the arg list somewhere] -- [target-program-args]</code>. gdb uses <code>--args</code> instead of <code>--</code> because sure i guess..</li>\n</ul>\n<p>i personally have a strong preference for the former in the interest of not guessing at what the intended program to run probably is. but that helped me understand my instinct for <code>cargo run -- --the --arguments</code>.</p>\n<p>anyway, my concrete thoughts here are: i'm also curious what folks think at the wasmtime biweekly, a heuristic might be nice for a little bit if folks trip on the change, and i'd also +1 not asserting that the CLI parsing rules are frozen any more than other API changes that programs would deal with.</p>\n</blockquote>",
        "id": 383426034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691618940
    },
    {
        "content": "<p>michelledaviest <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1672267574\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>The specific error I get is, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n<span class=\"n\">error</span>: <span class=\"nc\">unexpected</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"o\">'--</span><span class=\"n\">file</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">found</span>\n\n<span class=\"n\">Usage</span>: <span class=\"nc\">foo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">OPTIONS</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">FILE</span><span class=\"o\">&gt;</span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"o\">'--</span><span class=\"n\">help</span><span class=\"o\">'</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>It would be nice if there was a warning here that said, <br>\n<code>!!! Things have changed, don't pass in arguments to wasm files with -- anymore !!!</code><br>\nIt would have helped with debugging things. </p>\n<p>You could have the warning displayed in wasmtime 13.0 and remove it in 14.0. </p>\n</blockquote>",
        "id": 383428810,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691620519
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1673433839\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>FWIW one of the reasons <code>cargo run</code> is the way it is is because there's no positional argument that specifies the binary to run, so the only way to start differentiating between Cargo's arguments or the binary's arguments is via <code>--</code> or a positional argument passed to the binary. For example <code>cargo run foo -h</code> will execute <code>./target/debug/rust-program foo -h</code> but <code>cargo run -h</code> prints Cargo's help.</p>\n<p>@michelledaviest ah ok thanks! I can see how that's confusing, but that's compounded because it's <code>foo.wasm</code> printing that error message, not Wasmtime. The meaning of <code>wasmtime run foo.wasm -- --file bar.txt</code> changed with this PR where before this PR that was interpreted as <code>foo.wasm --file bar.txt</code> but after this PR that's interpreted (intentionally) as <code>foo.wasm -- --file bar.txt</code> and your <code>foo.wasm</code> program probably wasn't ready for that <code>--</code> argument.</p>\n<p>The warning is unfortunately difficult because it's unclear whether <code>--</code> is intended to be passed to the wasm program or not. The goal of this PR is to make things more consistent with other tools (e.g. <code>perf</code> and <code>strace</code> as mentioned by @iximeow in addition to things like <code>docker</code> that I'm aware of), but it necessarily requires breaking the meaning of previous invocations of Wasmtime. In that sense I don't know of a way to provide a warning other than what I mentioned earlier by parsing twice and seeing if the results are different.</p>\n</blockquote>",
        "id": 383666508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691680765
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1673635262\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>I realize now I may not be able to make the meeting this coming Thursday, so I've posted a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6830\">revert for 12.0.0</a> since it'll be our last meeting before 12.0.0 goes out and there's no urgency to land this now, it can wait for the next release.</p>\n</blockquote>",
        "id": 383710748,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1691689168
    },
    {
        "content": "<p>cardoso <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1703613923\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Similar discussion here: <a href=\"https://github.com/fermyon/spin/issues/1214\">https://github.com/fermyon/spin/issues/1214</a></p>\n<p>The preference was for <code>cargo run [options] [-- args]</code>.</p>\n<p>I think it boiled down to:</p>\n<ul>\n<li>Args are clearly separate: CLI uses args until it sees -- and all else is forwarded. Autocompletion tools liked that. </li>\n<li>It's clap's happy path: args_conflicts_with_subcommands and other flags can get pretty unpredictable.</li>\n</ul>\n<p>Spin got stuck on clap 3 due to clap 4 seeing the combination of flags slightly differently, so it will have to take the breaking change if it wants to update the dependency. A bunch of improvements are blocked too.</p>\n<p>Anyway, things may be different here, but I hated dealing with this enough I had to chime in.</p>\n</blockquote>",
        "id": 388627220,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693617340
    },
    {
        "content": "<p>cardoso edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1703613923\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Similar discussion here: <a href=\"https://github.com/fermyon/spin/issues/1214\">https://github.com/fermyon/spin/issues/1214</a></p>\n<p>The preference was for <code>cargo run [options] [-- args]</code>.</p>\n<p>I think it boiled down to:</p>\n<ul>\n<li>Args are clearly separate: CLI uses args until it sees -- and all else is forwarded. Autocompletion tools liked that. </li>\n<li>It's clap's happy path: args_conflicts_with_subcommands and other flags can get pretty unpredictable.</li>\n</ul>\n<p>Spin got stuck on clap 3 due to clap 4 seeing the combination of flags slightly differently, so it will have to take the breaking change if it wants to update the dependency. A bunch of improvements are blocked too.</p>\n<p>Anyway, things may be different here, but I hated dealing with this enough I had to chime in.</p>\n<p>Edit: more ~suffering~ context: <a href=\"https://github.com/clap-rs/clap/issues/1404\">https://github.com/clap-rs/clap/issues/1404</a> <a href=\"https://github.com/fermyon/spin/pull/1198\">https://github.com/fermyon/spin/pull/1198</a></p>\n</blockquote>",
        "id": 388627961,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693617705
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737#issuecomment-1706695063\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6737\">issue #6737</a>:</p>\n<blockquote>\n<p>Thanks for the link! Wasmtime may be in a bit of a different situation here though than <code>cargo run</code>. For Wasmtime the main demarcation of \"ok here's guest arguments\" is the wasm module itself. For a tool like <code>cargo run</code> there's no demarcation \"by default\" since you don't know when Cargo's flags stop and the tool's flags start, but for us the wasm module is a good point in the middle. Whether that makes auto-completion difficult though I'm not sure.</p>\n<p>Technically the change here for <code>args_conflicts_with_subcommands</code> is actually somewhat orthogonal. I wanted to improve the implementation of our support for <code>wasmtime foo.wasm</code> which is a shortcut for <code>wasmtime run foo.wasm</code>. The way it's currently implemented without <code>args_conflicts_with_subcommands</code> can sometimes lead to confusing error messages (since we catch some errors and parse twice but errors can change over time with clap). Otherwise though that setting isn't integral to the change to where options are parsed, and I should probably have split that out to a separate change. </p>\n<p>Regardless though I'll read up on these contexts and see what more I can lean, thanks for the links!</p>\n</blockquote>",
        "id": 389198538,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1693922825
    }
]