[
    {
        "content": "<p>itsrainy opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a> from <code>bytecodealliance:rainy/winch-popcnt</code> to <code>bytecodealliance:main</code>.</p>",
        "id": 364112844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686084648
    },
    {
        "content": "<p><strong>fitzgen</strong> requested <a href=\"https://github.com/saulecabrera\">saulecabrera</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 364337019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686155932
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1468245314\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for putting this together! The current changes look good to me. I have one thought/comment though: are you planning on providing a fallback implementation for <code>popcnt</code> if the <code>has_popcnt</code> flag is not enabled, similar to what Cranelift provides? If it's too burdensome to do as part of this PR a TODO is also totally fine I think, but we might want to consider updating the fuzzing configuration so that it always enables the <code>has_popcnt</code> flag to avoid failures when fuzzing winch. Even though we only enable the fuzzer locally, it's still useful for verifying our changes.</p>\n<p>Also, you might also want to add <code>&lt;I32|I64&gt;Popcnt</code> here <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/fuzz/fuzz_targets/differential.rs#L335\">https://github.com/bytecodealliance/wasmtime/blob/main/fuzz/fuzz_targets/differential.rs#L335</a></p>\n</blockquote>",
        "id": 364352270,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686159484
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 365698897,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686611161
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228168361\">PR review comment</a>:</p>\n<blockquote>\n<p>If I'm not wrong, in the case of a fallback we'd need extra temporary register because the scratch is clobbered by all the calls to <code>load_constant</code> right? </p>\n</blockquote>",
        "id": 365881138,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686665051
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1477234517\">PR review</a>:</p>\n<blockquote>\n<p>I think that it'd be nice to save a couple of instructions if possible, so I'm leaning towards the second fallback. This is also how SpiderMonkey handles this case <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/MacroAssembler-x86-shared-inl.h#110\">https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/MacroAssembler-x86-shared-inl.h#110</a></p>\n<p>I left a couple of extra comments, but feel free to ignore if those are things that you were already thinking about!</p>\n</blockquote>",
        "id": 365881141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686665051
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#pullrequestreview-1477234517\">PR review</a>:</p>\n<blockquote>\n<p>I think that it'd be nice to save a couple of instructions if possible, so I'm leaning towards the second fallback. This is also how SpiderMonkey handles this case <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/MacroAssembler-x86-shared-inl.h#110\">https://searchfox.org/mozilla-central/source/js/src/jit/x86-shared/MacroAssembler-x86-shared-inl.h#110</a></p>\n<p>I left a couple of extra comments, but feel free to ignore if those are things that you were already thinking about!</p>\n</blockquote>",
        "id": 365881151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686665053
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228180006\">PR review comment</a>:</p>\n<blockquote>\n<p>Could we replace the <code>emit</code> calls in this function with the emit functions in the assembler? That has the added benefit that it already handles constant loading based on the operand size. </p>\n</blockquote>",
        "id": 365881154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686665053
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228177076\">PR review comment</a>:</p>\n<blockquote>\n<p>If that's the case, perhaps we can pass in a mutable reference to the <code>CodeGenContext</code> to <code>MacroAssembler::popcnt</code> and do the dispatching at that level and if we need to emit the fallback, we can request an extra temporary register via <code>CodeGenContext::any_gpr</code>? Similar to to the implementation of <code>clz</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/masm.rs#L343\">https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/masm.rs#L343</a> </p>\n</blockquote>",
        "id": 365881155,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686665053
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228325355\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>scratch is clobbered by all the calls to load_constant right?</p>\n</blockquote>\n<p>Oh this is good to know! I didn't know that. I am still learning the relationships between the different reg types and how their different abstraction layers are used, so if it seems like I'm doing something weird, please let me know :)</p>\n<p>I'll take the approach in your second comment!</p>\n</blockquote>",
        "id": 365907590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686669935
    },
    {
        "content": "<p>itsrainy created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228339991\">PR review comment</a>:</p>\n<blockquote>\n<p>I think so. So, for instance I could replace this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"n\">Inst</span>::<span class=\"n\">AluRmiR</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">size</span>: <span class=\"nc\">size</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">AluRmiROpcode</span>::<span class=\"n\">Sub</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">src1</span>: <span class=\"nc\">reg</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"n\">src2</span>: <span class=\"nc\">masked1</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"n\">dst</span>: <span class=\"nc\">reg</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>with something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sub_rr</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">masked</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>right? I noticed some of the instructions don't have corresponding functions on the assembler (<code>shiftr</code>, <code>and</code>), should I add functions for those?</p>\n</blockquote>",
        "id": 365911219,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686670566
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531#discussion_r1228368541\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah exactly. </p>\n<p>For <code>shift</code> we have <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/asm.rs#L448-L459\"><code>shift_ir</code> and <code>shift_rr</code></a> in the assembler and for <code>and</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/asm.rs#L346-L356\">we have <code>and_rr</code> and <code>and_ir</code> </a>, I think that should cover all the cases for the lowering here. But if it doesn't feel free to make any additions to the assembler!</p>\n</blockquote>",
        "id": 365917279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686671805
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 365998263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686692351
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 365998746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686692527
    },
    {
        "content": "<p>itsrainy updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366003369,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686694283
    },
    {
        "content": "<p><strong>itsrainy</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a> as ready for review.</p>",
        "id": 366004511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686694720
    },
    {
        "content": "<p><strong>itsrainy</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366004514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686694721
    },
    {
        "content": "<p><strong>itsrainy</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366004515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686694721
    },
    {
        "content": "<p><strong>itsrainy</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6531\">PR #6531</a>.</p>",
        "id": 366004516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1686694722
    }
]