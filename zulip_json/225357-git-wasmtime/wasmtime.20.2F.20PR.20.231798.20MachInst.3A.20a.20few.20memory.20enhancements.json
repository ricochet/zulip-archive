[
    {
        "content": "<p>bnjbvr opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798\">PR #1798</a> from <code>memory-enhancements</code> to <code>master</code>:</p>\n<blockquote>\n<p>This series of commits (which will have to land with a version bump of <a href=\"http://regalloc.rs\">regalloc.rs</a> to accommodate the API changes) reduces the number of memory allocations during compilation.</p>\n<ul>\n<li>First commit changes the return type of mem_finalize so it's a SmallVec, avoiding short-lived a SmallVec allocation that was convered into a Vec.</li>\n<li>Second commit adapts to changes in <a href=\"http://regalloc.rs\">regalloc.rs</a> brought by <a href=\"https://github.com/bytecodealliance/regalloc.rs/pull/71\">https://github.com/bytecodealliance/regalloc.rs/pull/71</a>, reducing the need for short-lived Sets. Also avoids hashing computations, etc.</li>\n<li>Third commit makes an effort to reduce the size of the <code>Inst</code> enum down to 32 bytes. Unfortunately this means more pointer chasing for Call/JTSequence instructions (their members are now living in a *Info data structures) so not sure it's something we'd take as is. Maybe we could mitigate the indirection effects by reversing some of the attributes moves, putting them back next to the box; it's unclear which are most often accessed, and thus should be prioritized.</li>\n</ul>\n<p>All in all, with all the changes from <a href=\"https://github.com/bytecodealliance/regalloc.rs/pull/71\">https://github.com/bytecodealliance/regalloc.rs/pull/71</a> too, the results are the following:</p>\n<table>\n<thead>\n<tr>\n<th>benchmark</th>\n<th>bytes allocs</th>\n<th>block allocs</th>\n<th>inst count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>big.clif before</td>\n<td>389M</td>\n<td>458K</td>\n<td>4966M</td>\n</tr>\n<tr>\n<td>big.clif after</td>\n<td>317M</td>\n<td>424K</td>\n<td>4798M</td>\n</tr>\n<tr>\n<td>medium.clif before</td>\n<td>17.9M</td>\n<td>33K</td>\n<td>173M</td>\n</tr>\n<tr>\n<td>medium.clif after</td>\n<td>14.8M</td>\n<td>22K</td>\n<td>155M</td>\n</tr>\n<tr>\n<td>regex-rs.wasm before</td>\n<td>700M</td>\n<td>1.942M</td>\n<td>5030M</td>\n</tr>\n<tr>\n<td>regex-rs.wasm after</td>\n<td>586M</td>\n<td>1.619M</td>\n<td>4582M</td>\n</tr>\n</tbody>\n</table>\n<p>It's hard to measure the wallclock effect, because my machine is quite noisy (despite setting CPU governance to perf, etc.) and the benchmarks run for really short. Instruction counts are pretty stable, though, and for a final measure I performed them with Cachegrind, just to be sure about those.</p>\n<p>cc @julian-seward1 </p>\n</blockquote>",
        "id": 199392938,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591030094
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798\">PR #1798</a>.</p>",
        "id": 199392940,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591030094
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798#pullrequestreview-422014647\">PR Review</a>.</p>",
        "id": 199394023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591030633
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798#pullrequestreview-422014647\">PR Review</a>.</p>",
        "id": 199394024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591030633
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798#discussion_r433361750\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Pre-existing, but I just realized that we don't document this side-effect of <code>emit_call</code> on the <code>ABICall</code> trait. Perhaps add to the doc comment (in the trait def) to note that <code>emit_call()</code> should only be called once, because it is allowed to re-use parts of the ABICall object in emitting instructions?</p>\n</blockquote>",
        "id": 199394025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591030633
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798\">PR #1798</a> from <code>memory-enhancements</code> to <code>master</code>:</p>\n<blockquote>\n<p>This series of commits (which will have to land with a version bump of <a href=\"http://regalloc.rs\">regalloc.rs</a> to accommodate the API changes) reduces the number of memory allocations during compilation.</p>\n<ul>\n<li>First commit changes the return type of mem_finalize so it's a SmallVec, avoiding short-lived a SmallVec allocation that was convered into a Vec.</li>\n<li>Second commit adapts to changes in <a href=\"http://regalloc.rs\">regalloc.rs</a> brought by <a href=\"https://github.com/bytecodealliance/regalloc.rs/pull/71\">https://github.com/bytecodealliance/regalloc.rs/pull/71</a>, reducing the need for short-lived Sets. Also avoids hashing computations, etc.</li>\n<li>Third commit makes an effort to reduce the size of the <code>Inst</code> enum down to 32 bytes. Unfortunately this means more pointer chasing for Call/JTSequence instructions (their members are now living in a *Info data structures) so not sure it's something we'd take as is. Maybe we could mitigate the indirection effects by reversing some of the attributes moves, putting them back next to the box; it's unclear which are most often accessed, and thus should be prioritized.</li>\n</ul>\n<p>All in all, with all the changes from <a href=\"https://github.com/bytecodealliance/regalloc.rs/pull/71\">https://github.com/bytecodealliance/regalloc.rs/pull/71</a> too, the results are the following:</p>\n<table>\n<thead>\n<tr>\n<th>benchmark</th>\n<th>bytes allocs</th>\n<th>block allocs</th>\n<th>inst count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>big.clif before</td>\n<td>389M</td>\n<td>458K</td>\n<td>4966M</td>\n</tr>\n<tr>\n<td>big.clif after</td>\n<td>317M</td>\n<td>424K</td>\n<td>4798M</td>\n</tr>\n<tr>\n<td>medium.clif before</td>\n<td>17.9M</td>\n<td>33K</td>\n<td>173M</td>\n</tr>\n<tr>\n<td>medium.clif after</td>\n<td>14.8M</td>\n<td>22K</td>\n<td>155M</td>\n</tr>\n<tr>\n<td>regex-rs.wasm before</td>\n<td>700M</td>\n<td>1.942M</td>\n<td>5030M</td>\n</tr>\n<tr>\n<td>regex-rs.wasm after</td>\n<td>586M</td>\n<td>1.619M</td>\n<td>4582M</td>\n</tr>\n</tbody>\n</table>\n<p>It's hard to measure the wallclock effect, because my machine is quite noisy (despite setting CPU governance to perf, etc.) and the benchmarks run for really short. Instruction counts are pretty stable, though, and for a final measure I performed them with Cachegrind, just to be sure about those.</p>\n<p>cc @julian-seward1 </p>\n</blockquote>",
        "id": 199490758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591104624
    },
    {
        "content": "<p>bnjbvr updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798\">PR #1798</a> from <code>memory-enhancements</code> to <code>master</code>:</p>\n<blockquote>\n<p>This series of commits (which will have to land with a version bump of <a href=\"http://regalloc.rs\">regalloc.rs</a> to accommodate the API changes) reduces the number of memory allocations during compilation.</p>\n<ul>\n<li>First commit changes the return type of mem_finalize so it's a SmallVec, avoiding short-lived a SmallVec allocation that was convered into a Vec.</li>\n<li>Second commit adapts to changes in <a href=\"http://regalloc.rs\">regalloc.rs</a> brought by <a href=\"https://github.com/bytecodealliance/regalloc.rs/pull/71\">https://github.com/bytecodealliance/regalloc.rs/pull/71</a>, reducing the need for short-lived Sets. Also avoids hashing computations, etc.</li>\n<li>Third commit makes an effort to reduce the size of the <code>Inst</code> enum down to 32 bytes. Unfortunately this means more pointer chasing for Call/JTSequence instructions (their members are now living in a *Info data structures) so not sure it's something we'd take as is. Maybe we could mitigate the indirection effects by reversing some of the attributes moves, putting them back next to the box; it's unclear which are most often accessed, and thus should be prioritized.</li>\n</ul>\n<p>All in all, with all the changes from <a href=\"https://github.com/bytecodealliance/regalloc.rs/pull/71\">https://github.com/bytecodealliance/regalloc.rs/pull/71</a> too, the results are the following:</p>\n<table>\n<thead>\n<tr>\n<th>benchmark</th>\n<th>bytes allocs</th>\n<th>block allocs</th>\n<th>inst count</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>big.clif before</td>\n<td>389M</td>\n<td>458K</td>\n<td>4966M</td>\n</tr>\n<tr>\n<td>big.clif after</td>\n<td>317M</td>\n<td>424K</td>\n<td>4798M</td>\n</tr>\n<tr>\n<td>medium.clif before</td>\n<td>17.9M</td>\n<td>33K</td>\n<td>173M</td>\n</tr>\n<tr>\n<td>medium.clif after</td>\n<td>14.8M</td>\n<td>22K</td>\n<td>155M</td>\n</tr>\n<tr>\n<td>regex-rs.wasm before</td>\n<td>700M</td>\n<td>1.942M</td>\n<td>5030M</td>\n</tr>\n<tr>\n<td>regex-rs.wasm after</td>\n<td>586M</td>\n<td>1.619M</td>\n<td>4582M</td>\n</tr>\n</tbody>\n</table>\n<p>It's hard to measure the wallclock effect, because my machine is quite noisy (despite setting CPU governance to perf, etc.) and the benchmarks run for really short. Instruction counts are pretty stable, though, and for a final measure I performed them with Cachegrind, just to be sure about those.</p>\n<p>cc @julian-seward1 </p>\n</blockquote>",
        "id": 199491056,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591104768
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798#pullrequestreview-422679079\">PR Review</a>.</p>",
        "id": 199491081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591104778
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798#discussion_r433877420\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Good point, added!</p>\n</blockquote>",
        "id": 199491082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591104778
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1798\">PR #1798</a>.</p>",
        "id": 199499713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1591108147
    }
]