[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n```\n\nwhich is just `w0 := w1 - 1`. It would be much better to recognize when\nthe inverse of an immediate will fit in a 12-bit immediate field if the\nimmediate itself does not, and flip add to subtract (and vice versa), so\nwe can instead generate:\n\n```\n    sub w0, w1, #-1\n```\n\nWe see this pattern in e.g. `bz2`, where this commit makes the following\ndifference (counting instructions with `perf stat`, filling in the\nwasmtime cache first then running again to get just runtime):\n\npre:\n\n```\n        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n```\n\npost:\n\n```\n        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n```\n\nIn other words, a 2.1% redunction in instruction count on `bz2`.\n\n&lt;!--\n\nPlease ensure that the following steps are all taken care of before submitting\nthe PR.\n\n- [ ] This has been discussed in issue #..., or if not, please tell us why\n  here.\n- [ ] A short description of what this does, why it is needed; if the\n  description becomes long, the matter should probably be discussed in an issue\n  first.\n- [ ] This PR contains test cases, if meaningful.\n- [ ] A reviewer from the core maintainer team has been assigned for this PR.\n  If you don&#39;t know who could review this, please indicate so. The list of\n  suggested reviewers on the right can help you.\n\nPlease ensure all communication adheres to the [code of\nconduct](https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md).\n--&gt;\n\n~~~\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204473401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277606
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a>.</p>",
        "id": 204473402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277606
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n```\n\nwhich is just `w0 := w1 - 1`. It would be much better to recognize when\nthe inverse of an immediate will fit in a 12-bit immediate field if the\nimmediate itself does not, and flip add to subtract (and vice versa), so\nwe can instead generate:\n\n```\n    sub w0, w1, #-1\n```\n\nWe see this pattern in e.g. `bz2`, where this commit makes the following\ndifference (counting instructions with `perf stat`, filling in the\nwasmtime cache first then running again to get just runtime):\n\npre:\n\n```\n        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n```\n\npost:\n\n```\n        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n```\n\nIn other words, a 2.1% redunction in instruction count on `bz2`.\n\n&lt;!--\n\nPlease ensure that the following steps are all taken care of before submitting\nthe PR.\n\n- [ ] This has been discussed in issue #..., or if not, please tell us why\n  here.\n- [ ] A short description of what this does, why it is needed; if the\n  description becomes long, the matter should probably be discussed in an issue\n  first.\n- [ ] This PR contains test cases, if meaningful.\n- [ ] A reviewer from the core maintainer team has been assigned for this PR.\n  If you don&#39;t know who could review this, please indicate so. The list of\n  suggested reviewers on the right can help you.\n\nPlease ensure all communication adheres to the [code of\nconduct](https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md).\n--&gt;\n\n~~~\n</code></pre></div>\n\n\n</blockquote>",
        "id": 204473434,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277633
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #-1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% redunction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204473437,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277636
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% redunction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204473470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277662
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% redunction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204473509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277703
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% redunction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204473616,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277765
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% reduction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204473624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595277771
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% reduction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204589653,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595358669
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% reduction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204825842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595524373
    },
    {
        "content": "<p>julian-seward1 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051#pullrequestreview-454625834\">PR Review</a>.</p>",
        "id": 204877931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595564062
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% reduction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204950401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595615212
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% reduction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204951203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595615588
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a> from <code>aarch64-add-negative-imm</code> to <code>main</code>:</p>\n<blockquote>\n<p>We often see patterns like:</p>\n<div class=\"codehilite\"><pre><span></span><code>    mov w2, #0xffff_ffff   // uses ORR with logical immediate form\n    add w0, w1, w2\n</code></pre></div>\n\n\n<p>which is just <code>w0 := w1 - 1</code>. It would be much better to recognize when<br>\nthe inverse of an immediate will fit in a 12-bit immediate field if the<br>\nimmediate itself does not, and flip add to subtract (and vice versa), so<br>\nwe can instead generate:</p>\n<div class=\"codehilite\"><pre><span></span><code>    sub w0, w1, #1\n</code></pre></div>\n\n\n<p>We see this pattern in e.g. <code>bz2</code>, where this commit makes the following<br>\ndifference (counting instructions with <code>perf stat</code>, filling in the<br>\nwasmtime cache first then running again to get just runtime):</p>\n<p>pre:</p>\n<div class=\"codehilite\"><pre><span></span><code>        992.762250      task-clock (msec)         #    0.998 CPUs utilized\n               109      context-switches          #    0.110 K/sec\n                 0      cpu-migrations            #    0.000 K/sec\n             5,035      page-faults               #    0.005 M/sec\n     3,224,119,134      cycles                    #    3.248 GHz\n     4,000,521,171      instructions              #    1.24  insn per cycle\n   &lt;not supported&gt;      branches\n        27,573,755      branch-misses\n\n       0.995072322 seconds time elapsed\n</code></pre></div>\n\n\n<p>post:</p>\n<div class=\"codehilite\"><pre><span></span><code>        993.853850      task-clock (msec)         #    0.998 CPUs utilized\n               123      context-switches          #    0.124 K/sec\n                 1      cpu-migrations            #    0.001 K/sec\n             5,072      page-faults               #    0.005 M/sec\n     3,201,278,337      cycles                    #    3.221 GHz\n     3,917,061,340      instructions              #    1.22  insn per cycle\n   &lt;not supported&gt;      branches\n        28,410,633      branch-misses\n\n       0.996008047 seconds time elapsed\n</code></pre></div>\n\n\n<p>In other words, a 2.1% reduction in instruction count on <code>bz2</code>.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;</p>\n</blockquote>",
        "id": 204951959,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595616102
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2051\">PR #2051</a>.</p>",
        "id": 204956680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1595618815
    }
]