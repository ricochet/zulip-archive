[
    {
        "content": "<p>bkolobara opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Hi! I'm trying to use Wasmtime inside a generator. I would like to provide a host function to suspend the execution by yielding from the generator. This is my current attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Generator</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">yielder</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">suspend</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">param</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">yielder</span><span class=\"p\">.</span><span class=\"n\">suspend</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">suspend</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I had now multiple attempts of passing <code>yielder</code> inside the closure, but nothing worked. I always get a lifetime related error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">gen</span>::<span class=\"n\">Generator</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">gen</span>::<span class=\"n\">Generator</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It's not clear to me why the passed in closure needs to be static. Can this requirement be relaxed? Or is there maybe a better way of approaching this?</p>\n<p>Could <code>yielder</code> be attached to <code>Caller</code> and then later accessed?</p>\n</blockquote>",
        "id": 207880946,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598294717
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-679314820\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>The <code>'static</code> bound comes from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1554\">https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1554</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1586\">https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1586</a>.</p>\n</blockquote>",
        "id": 207884496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598296545
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-679314820\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>The <code>'static</code> bound comes from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1554\">https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1554</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1586\">https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L1586</a></p>\n</blockquote>",
        "id": 207884552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598296563
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-679315941\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>This bound is necessary because <code>Func</code> has a static lifetime itself, as it doesn't have any lifetime parameters: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L144-L148\">https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/func.rs#L144-L148</a></p>\n</blockquote>",
        "id": 207884759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598296685
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-679316828\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Which in turn is necessary because <code>Instance</code> itself doesn't have a lifetime parameter: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/instance.rs#L99-L103\">https://github.com/bytecodealliance/wasmtime/blob/c7cd70fcec3eee66c9d7b5aa6fb4580d5a802218/crates/wasmtime/src/instance.rs#L99-L103</a></p>\n</blockquote>",
        "id": 207884915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598296788
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-679637077\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Due to the memory management of wasm objects right now (e.g. instances and stores) everything must live for the <code>'static</code> lifetime and you can't have stack-borrowed data. Fixing this would require some sort of lifetime on a <code>Store</code> and everything connected to it which would be a very significant investment, and one that I'm not entirely sure is possible. </p>\n<p>It's worth noting though that a form of stack switching like you're trying to use is something we're interested in providing first-class support for. There's a few wasm proposals in flight but we'd like to have something at least for async in the meantime as well. Basically just to say that this is likely to be supported in <em>some</em> fashion in the future.</p>\n</blockquote>",
        "id": 207925002,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598331537
    },
    {
        "content": "<p>bkolobara <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-679862263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Thank you for the feedback! I will probably just cast it to a pointer and back to \"cheat\" the lifetime. The function will be only called while inside the closure, so it should be safe.</p>\n<blockquote>\n<p>It's worth noting though that a form of stack switching like you're trying to use is something we're interested in providing first-class support for. There's a few wasm proposals in flight but we'd like to have something at least for async in the meantime as well. Basically just to say that this is likely to be supported in _some_ fashion in the future.</p>\n</blockquote>\n<p>I'm <strong>really</strong> interested in this. Are there maybe some issues open where I could follow the development of this or some places where the discussion was started? I could not find any active proposals regarding it.</p>\n</blockquote>",
        "id": 207933058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598341491
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-680170616\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Andreas Rossberg has presented at several CG meetings in the past year about approaches to stack switching based on delimited continuations. It does not appear that there is any formal proposal work in <a href=\"https://github.com/WebAssembly/proposals\">https://github.com/WebAssembly/proposals</a> at this time, but the work is something the Bytecode Alliance is very interested in implementing.</p>\n</blockquote>",
        "id": 207994963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598377043
    },
    {
        "content": "<p>pchickey edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-680170616\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Andreas Rossberg has presented at several CG meetings in the past year about approaches to stack switching based on delimited continuations. It does not appear that there is any formal proposal work in <a href=\"https://github.com/WebAssembly/proposals\">https://github.com/WebAssembly/proposals</a> at this time, but the work is something the Bytecode Alliance is very interested in implementing.</p>\n<p>Lucet already has some limited support for stack switching (it is not as general or powerful as Andreas's proposal) and this PR uses it to enable async computations which suspend the wasm stack. We will need to implement something similar in Wasmtime as part of our plans to merge the features of the two runtimes. <a href=\"https://github.com/bytecodealliance/lucet/pull/551\">https://github.com/bytecodealliance/lucet/pull/551</a></p>\n</blockquote>",
        "id": 207995241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598377167
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-680194453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>I've also <a href=\"https://gist.github.com/peterhuene/9eb00781112fea84bad5f8c4f9b70cef\">toyed with using a generator</a> (from the <code>generator</code> crate) to \"async-ify\" a host function.  It also needed to cast away the lifetime of the closure's argument.</p>\n<p>I am looking forward to first-class support for this in Wamtime.</p>\n</blockquote>",
        "id": 208001697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598379860
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-680194453\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>I've also <a href=\"https://gist.github.com/peterhuene/9eb00781112fea84bad5f8c4f9b70cef\">toyed with using a generator</a> (from the <code>generator</code> crate) to \"async-ify\" a host function.  It also needed to cast away the lifetime of the closure's argument.</p>\n<p>I am looking forward to first-class support for this in Wasmtime.</p>\n</blockquote>",
        "id": 208001704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598379866
    },
    {
        "content": "<p>bkolobara <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159#issuecomment-680717905\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Thank you everyone for the discussion. The restrictions are much clearer to me now. I will close this issue as I don't think there is any straightforward way right now to reduce the lifetime from <code>'static</code>.</p>\n</blockquote>",
        "id": 208061592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598427983
    },
    {
        "content": "<p>bkolobara closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2159\">Issue #2159</a>:</p>\n<blockquote>\n<p>Hi! I'm trying to use Wasmtime inside a generator. I would like to provide a host function to suspend the execution by yielding from the generator. This is my current attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Generator</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">yielder</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">suspend</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">param</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">yielder</span><span class=\"p\">.</span><span class=\"n\">suspend</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">suspend</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>I had now multiple attempts of passing <code>yielder</code> inside the closure, but nothing worked. I always get a lifetime related error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">gen</span>::<span class=\"n\">Generator</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">gen</span>::<span class=\"n\">Generator</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It's not clear to me why the passed in closure needs to be static. Can this requirement be relaxed? Or is there maybe a better way of approaching this?</p>\n<p>Could <code>yielder</code> be attached to <code>Caller</code> and then later accessed?</p>\n</blockquote>",
        "id": 208061593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1598427983
    }
]