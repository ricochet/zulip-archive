[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011#issuecomment-1467317255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011\">issue #6011</a>:</p>\n<blockquote>\n<p>@uweigand If you're able I'd like to get your review on the last commit of this PR, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011/commits/0fd035c33f80e856671e203baf1cb564fcd7803c\">https://github.com/bytecodealliance/wasmtime/pull/6011/commits/0fd035c33f80e856671e203baf1cb564fcd7803c</a>, where I updated how signal handling works on s390x. Trap emission is now buried within <code>MachBuffer</code> so while I could plumb through a flag for \"register the trap code on the last byte of the opcode vs the first\" I thought it might be easier to update the s390x-specific logic in the signal handler instead to avoid the s390x-specific-ness from spilling over into the mostly-independent <code>MachBuffer</code>. You probably know much more about the intricacies here, though, and I'd like to confirm that things should work as I expect/hope.</p>\n</blockquote>",
        "id": 341616575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678766324
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011#issuecomment-1468607598\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011\">issue #6011</a>:</p>\n<blockquote>\n<blockquote>\n<p>@uweigand If you're able I'd like to get your review on the last commit of this PR, <a href=\"https://github.com/bytecodealliance/wasmtime/commit/0fd035c33f80e856671e203baf1cb564fcd7803c\">0fd035c</a>, where I updated how signal handling works on s390x. Trap emission is now buried within <code>MachBuffer</code> so while I could plumb through a flag for \"register the trap code on the last byte of the opcode vs the first\" I thought it might be easier to update the s390x-specific logic in the signal handler instead to avoid the s390x-specific-ness from spilling over into the mostly-independent <code>MachBuffer</code>. You probably know much more about the intricacies here, though, and I'd like to confirm that things should work as I expect/hope.</p>\n</blockquote>\n<p>Hmm.  As far as I can tell, this will work - at least for now.  The assumption that only 2-byte instructions can result in a <code>SIGILL</code> is of course not correct in general, that's just a consequence of the particular subset of instructions the back-end is currently using, so I'd be a bit hesitant to hard-code this ...</p>\n<p>The whole approach of moving trap instructions to the end of the function may not be the best approach on s390x anyway.  Other compilers tend to use a trick (that I haven't implemented yet in cranelift) where the \"trap\" instruction overlaps the conditional branch instruction.  Specifically, to implement a conditional trap, you can use something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"n\">jgCOND</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">+</span><span class=\"mi\">2</span>\n</code></pre></div>\n<p>which is encoded as a 6-byte instruction like so (with M encoding the condition):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">C0</span><span class=\"w\"> </span><span class=\"n\">M4</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">01</span>\n</code></pre></div>\n<p>If the condition is true, this will branch two bytes forward, landing on the <code>00 00</code> bytes embedded in the branch itself - which now double as the trap instruction.</p>\n<p>This is the same size as a branch to the end of the function, but doesn't actually require anything to be there.<br>\n</p>\n</blockquote>",
        "id": 341873293,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678817919
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011#issuecomment-1468612857\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011\">issue #6011</a>:</p>\n<blockquote>\n<p>Ah ok makes sense, would it be best to not apply this change to s390x in that case?</p>\n</blockquote>",
        "id": 341873754,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678818082
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011#issuecomment-1468634345\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011\">issue #6011</a>:</p>\n<blockquote>\n<blockquote>\n<p>Ah ok makes sense, would it be best to not apply this change to s390x in that case?</p>\n</blockquote>\n<p>Agreed.  Just leave s390x out for now, and I'll implement that other change separately.   Thanks!</p>\n</blockquote>",
        "id": 341876881,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678819071
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011#issuecomment-1478124912\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6011\">issue #6011</a>:</p>\n<blockquote>\n<p>@alexcrichton I've now implemented the s390x solution discussed above as #6079 .</p>\n</blockquote>",
        "id": 343457105,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679414838
    }
]