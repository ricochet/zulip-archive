[
    {
        "content": "<p>Milek7 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a> from <code>Milek7:premapped-image</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>As discussed previously in #7777 for some platform it is useful to allow loading modules using platform specific methods without mmaping memory as executable. This attempts to sidestep defining completely user-implementable CodeMemory trait, by requiring that precompiled <code>cwasm</code> file is mapped before using platform-specific methods, with headers and all. This way only host memory range needs to be passed to new <code>Module::from_premapped_image</code> method, which will then parse wasmtime-specific ELF header as usual.</p>\n<p>For testing I hacked together this tool for packing cwasm files into Windows DLL or Linux DSO files: <a href=\"https://gist.github.com/Milek7/e8c1a9c284dc82c60cf48637f753b102\">https://gist.github.com/Milek7/e8c1a9c284dc82c60cf48637f753b102</a></p>\n<p>It can be used as follows:<br>\n<code>wasmtime compile wasmmodule.wasm</code><br>\n<code>cwasm2so pe wasmmodule wasmmodule.wasm wasmmodule.dll</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">HMODULE</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LoadLibraryW</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"s\">\"wasmmodule.dll\"</span><span class=\"p\">);</span>\n<span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">GetProcAddress</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"elf_ptr\"</span><span class=\"p\">);</span>\n<span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">GetProcAddress</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"elf_size\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_from_premapped_image</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FreeLibrary</span><span class=\"p\">((</span><span class=\"n\">HMODULE</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>or<br>\n<code>wasmtime compile wasmmodule.wasm</code><br>\n<code>cwasm2so elf wasmmodule wasmmodule.wasm wasmmodule.so</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"p\">(</span><span class=\"s\">\"wasmmodule.so\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RTLD_NOW</span><span class=\"p\">);</span>\n<span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">dlsym</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasmmodule_elf_ptr\"</span><span class=\"p\">);</span>\n<span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dlsym</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasmmodule_elf_size\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_from_premapped_image</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">dlclose</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 429743502,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711488812
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>.</p>",
        "id": 429743505,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711488813
    },
    {
        "content": "<p><strong>Milek7</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>.</p>",
        "id": 429743506,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711488813
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>As discussed previously in #7777 for some platforms it is useful to allow loading modules using platform specific methods without mmaping memory as executable. This attempts to sidestep defining completely user-implementable CodeMemory trait, by requiring that precompiled <code>cwasm</code> file is mapped before using platform-specific methods, with headers and all. This way only host memory range needs to be passed to new <code>Module::from_premapped_image</code> method, which will then parse wasmtime-specific ELF header as usual.</p>\n<p>For testing I hacked together this tool for packing cwasm files into Windows DLL or Linux DSO files: <a href=\"https://gist.github.com/Milek7/e8c1a9c284dc82c60cf48637f753b102\">https://gist.github.com/Milek7/e8c1a9c284dc82c60cf48637f753b102</a></p>\n<p>It can be used as follows:<br>\n<code>wasmtime compile wasmmodule.wasm</code><br>\n<code>cwasm2so pe wasmmodule wasmmodule.wasm wasmmodule.dll</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">HMODULE</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LoadLibraryW</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"s\">\"wasmmodule.dll\"</span><span class=\"p\">);</span>\n<span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">GetProcAddress</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"elf_ptr\"</span><span class=\"p\">);</span>\n<span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">GetProcAddress</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"elf_size\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_from_premapped_image</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FreeLibrary</span><span class=\"p\">((</span><span class=\"n\">HMODULE</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>or<br>\n<code>wasmtime compile wasmmodule.wasm</code><br>\n<code>cwasm2so elf wasmmodule wasmmodule.wasm wasmmodule.so</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"p\">(</span><span class=\"s\">\"wasmmodule.so\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RTLD_NOW</span><span class=\"p\">);</span>\n<span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">dlsym</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasmmodule_elf_ptr\"</span><span class=\"p\">);</span>\n<span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dlsym</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasmmodule_elf_size\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_from_premapped_image</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">dlclose</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 429743534,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711488828
    },
    {
        "content": "<p>Milek7 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>.</p>",
        "id": 429744021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711489066
    },
    {
        "content": "<p>Milek7 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>As discussed previously in #7777 for some platforms it is useful to allow loading modules using platform specific methods without mmaping memory as executable. This attempts to sidestep defining completely user-implementable CodeMemory trait, by requiring that precompiled <code>cwasm</code> file is mapped before using platform-specific methods, with headers and all. This way only host memory range needs to be passed to new <code>Module::from_premapped_image</code> method, which will then parse wasmtime-specific ELF header as usual.</p>\n<p>For testing I hacked together this tool for packing cwasm files into Windows DLL or Linux DSO files: <a href=\"https://gist.github.com/Milek7/e8c1a9c284dc82c60cf48637f753b102\">https://gist.github.com/Milek7/e8c1a9c284dc82c60cf48637f753b102</a></p>\n<p>It can be used as follows:<br>\n<code>wasmtime compile wasmmodule.wasm</code><br>\n<code>cwasm2so pe wasmmodule wasmmodule.cwasm wasmmodule.dll</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">HMODULE</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">LoadLibraryW</span><span class=\"p\">(</span><span class=\"n\">L</span><span class=\"s\">\"wasmmodule.dll\"</span><span class=\"p\">);</span>\n<span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">GetProcAddress</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"elf_ptr\"</span><span class=\"p\">);</span>\n<span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">GetProcAddress</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"elf_size\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_from_premapped_image</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">FreeLibrary</span><span class=\"p\">((</span><span class=\"n\">HMODULE</span><span class=\"p\">)</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>or<br>\n<code>wasmtime compile wasmmodule.wasm</code><br>\n<code>cwasm2so elf wasmmodule wasmmodule.cwasm wasmmodule.so</code></p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dlopen</span><span class=\"p\">(</span><span class=\"s\">\"wasmmodule.so\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RTLD_NOW</span><span class=\"p\">);</span>\n<span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint8_t</span><span class=\"o\">**</span><span class=\"p\">)</span><span class=\"n\">dlsym</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasmmodule_elf_ptr\"</span><span class=\"p\">);</span>\n<span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">dlsym</span><span class=\"p\">(</span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasmmodule_elf_size\"</span><span class=\"p\">);</span>\n\n<span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_module_from_premapped_image</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hmodule</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[](</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">dlclose</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"p\">},</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 429744721,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711489400
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2021526254\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:c-api\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api, wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 429744861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711489467
    },
    {
        "content": "<p>Milek7 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>.</p>",
        "id": 429750077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711492191
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>.</p>",
        "id": 429875657,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711550444
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2022991388\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>Thanks for the PR here! I like the look of this and I agree it's probably best to avoid allowing arbitrary implementations of <code>CodeMemory</code>. To make sure I understand what's going on here -- this is assuming that the <code>*.so</code> and <code>*.dll</code> created by your tool maps the <code>*.cwasm</code> into memory but the directives in the native object are such that the memory protections of all attributes are already configured appropriately? For example <code>.text</code> is already executable and everything else is already readonly?</p>\n<p>Also, how willing are you to continue to work on this? I realize you're probably focused on what you're working on rather than changing this according to review, but I think some of the points below are going to be important to continue to maintain this over time for us. Additionally I think this feature could be useful to other folks as well, so I think it'd be good to polish it too if we can. That being said I'm happy to help out myself where I can, but I probably can't take on everything below, so your assistance as well would be much appreicated. </p>\n<p>If my assumption above is correct, I like this approach! At a high-level though some things I think may want to be changed are:</p>\n<ul>\n<li>Primarily I think we should test this in CI somehow. This sort of feature is ripe for getting broken over time so I think it would be best to have tests. This is, however, probably tricky to do because it would require your <code>cwasm2so</code> tool. That to me points in a slightly different direction, leading me to...</li>\n<li>I think it'd be reasonable to bake in your <code>cwasm2so</code> into Wasmtime itself. We recently added a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8181\"><code>CodeBuilder</code></a> structure which is used to configure compilation, and I think this might make a good option for that. Something like <code>builder.create_native_so(true)</code> or something like that so the bytes that pop out of <code>compile_module_serialized</code> look like the ones from <code>cwasm2so</code> you've written. This would, for example, set a flag in <code>CodeBuilder</code> where it does the normal compile process and then more-or-less runs your tool. That's what would enable running tests on CI as well (as we could perhaps literally dlopen)</li>\n<li>For a more bikesheddy point, would it work for your use case to perhaps let Wasmtime dlopen the file? That way we could change the constructor to take a <code>&amp;Path</code> and we'd dlopen it internally. That would help clean up the API a bit for example around the arbitrary destructor.</li>\n</ul>\n</blockquote>",
        "id": 429880074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711551473
    },
    {
        "content": "<p>Milek7 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2023110308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>Yes, its contents are mapped directly so that calling <code>serialize()</code> would yield <code>cwasm</code> original file, with separate segments for executable areas:<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a\">https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a</a>)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142\">https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142</a>)<br>\nHere first three segments contain <code>cwasm</code> file, while second one corresponds to <code>.text</code> section inside it. Remaining segments contain metadata needed for dynamic library, headers pointing to unwind information, etc.</p>\n<p>I have taken the view here that generating these binaries and how exactly they are loaded are up to embedder. One thing to note that while I don't need that for my use case, replacing raw memory range with library to be loaded would preclude use of linking compiled module as static library. Nevertheless if that's desired I could work on moving generation and loading into wasmtime itself some time later.</p>\n</blockquote>",
        "id": 429891736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711554516
    },
    {
        "content": "<p>Milek7 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2023110308\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>Yes, its contents are mapped directly so that calling <code>serialize()</code> would yield <code>cwasm</code> original file, with separate segments for executable areas: (screenshots for ELF and PE, with different input files)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a\">https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a</a>)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142\">https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142</a>)<br>\nHere first three segments contain <code>cwasm</code> file, while second one corresponds to <code>.text</code> section inside it. Remaining segments contain metadata needed for dynamic library, headers pointing to unwind information, etc.</p>\n<p>I have taken the view here that generating these binaries and how exactly they are loaded are up to embedder. One thing to note that while I don't need that for my use case, replacing raw memory range with library to be loaded would preclude use of linking compiled module as static library. Nevertheless if that's desired I could work on moving generation and loading into wasmtime itself some time later.</p>\n</blockquote>",
        "id": 429895812,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711555468
    },
    {
        "content": "<p>Milek7 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2023110308\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>Yes, its contents are mapped directly so that calling <code>serialize()</code> would yield <code>cwasm</code> original file, with separate segments for executable areas: (screenshots for ELF and PE, with different input files)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a\">https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a</a>)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142\">https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142</a>)<br>\nHere first three segments contain <code>cwasm</code> file, while second one corresponds to <code>.text</code> section inside it. Remaining segments contain metadata needed for dynamic library, headers pointing to unwind information, etc.</p>\n<p>I have taken the view here that generating these binaries and how exactly they are loaded are up to embedder. One thing to note that while I don't think I need that for my use case, replacing raw memory range with library to be loaded would preclude use of linking compiled module as static library. Nevertheless if that's desired I could work on moving generation and loading into wasmtime itself some time later.</p>\n</blockquote>",
        "id": 429920289,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711563294
    },
    {
        "content": "<p>Milek7 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2023110308\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>Yes, its contents are mapped directly so that calling <code>serialize()</code> would yield <code>cwasm</code> original file, with separate segments for executable areas: (screenshots for ELF and PE, with different input files)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a\">https://github.com/bytecodealliance/wasmtime/assets/7935014/af86a809-acfd-4e95-8288-152888ebcd5a</a>)<br>\n![obraz](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142\">https://github.com/bytecodealliance/wasmtime/assets/7935014/53ca3bd1-2fe9-4b10-8a90-a73ff90e8142</a>)<br>\nHere first three segments contain <code>cwasm</code> file, while second one corresponds to <code>.text</code> section inside it. Remaining segments contain metadata needed for dynamic library, headers pointing to unwind information, etc.</p>\n<p>I have taken the view here that generating these binaries and how exactly they are loaded are up to embedder. One thing to note that while I don't need that for my use case, replacing raw memory range with library to be loaded would preclude use of linking compiled module as static library. Nevertheless if that's desired I could work on moving generation and loading into wasmtime itself some time later.</p>\n</blockquote>",
        "id": 429925066,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711565109
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245#issuecomment-2024079032\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8245\">PR #8245</a>:</p>\n<blockquote>\n<p>Ok makes sense, thanks for the clarification!</p>\n<p>Personally I think it's important to have tests for this, and to do that I think it's ok to move the bits and pieces necessary to build this image into Wasmtime itself. If the bits and pieces in Wasmtime don't work for your use case though then I definitely don't want to ask you to build something you're not going to use.</p>\n<p>One of the main worries I have is that there's a lot of implicit assumptions about the output of Wasmtime for this tool to work, so I'm a bit afraid of putting that on embedders as it seems like we may accidentally break it in the future. For example:</p>\n<ul>\n<li>This assumes the output is an ELF, but one day we may switch to platform-specific outputs.</li>\n<li>This assumes the output is a single ELF, but with components we may want to produce multiple outputs one day.</li>\n<li>This assumes various specifics about the number and placement of sections.</li>\n<li>This assumes that there's no relocations to be applied, which is mostly true but won't always be the case.</li>\n</ul>\n<p>More-or-less I'd be more comfortable if we internalized some of these pieces in Wasmtime to be able to update it as the design in Wasmtime itself evolves over time. For example if the goal is to create a linkable object I think that'd be great to add here as well. If creating a dynamic object is all that's needed I think your gist would work well to live in Wasmtime too.</p>\n</blockquote>",
        "id": 429957912,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1711577575
    }
]