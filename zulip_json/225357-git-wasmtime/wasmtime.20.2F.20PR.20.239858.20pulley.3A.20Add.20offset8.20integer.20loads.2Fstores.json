[
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489847243,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734558900
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489847244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734558900
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a> from <code>alexcrichton:pulley-offset8</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit extends the set of opcodes to load/stores from memory with integer registers. Previously the only addressing mode supported was a base register plus a 32-bit signed immediate. This immediate frequently doesn't need 32-bits though and can often fit in a much smaller range. Looking at <code>spidermonkey.cwasm</code> a large number of loads/stores can fit within an unsigned 8-bit integer instead so this commit adds an <code>offset8</code> mode in addition to the preexisting <code>offset32</code> mode. Empirically this commit shrinks <code>spidermonkey.cwasm</code> for pulley64 from 33M to 31M.</p>\n<p>This notably, at this time, does not extend general addressing modes in Pulley nor does it extend all loads/stores. For example float/vector/big-endian loads and stores all continue to only support a 32-bit signed offset from the base pointer. This is done under the assumption that integer loads/stores dominate both performance/code-size, but this is not empirically proven just yet.</p>\n<p>Additionally at this time the choice is being made to add an opcode-per-addressing-mode rather than having a single load opcode take a general addressing mode. The assumption here is that decoding a fully general addressing mode and processing it is probably slower at runtime than specializing opcodes per addressing mode. This is currently an unproven assumption however and the cost of this is increased complexity in the Cranelift backend as it has to have many branches for all loads/stores supported.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 489847246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734558900
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489847248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734558900
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489847249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734558900
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489847250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734558901
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858#pullrequestreview-2513021953\">PR review</a>:</p>\n<blockquote>\n<p>LGTM. Agree with both intuitions, looking forward to seeing empirical evidence.</p>\n</blockquote>",
        "id": 489856530,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734563014
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489859924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734564739
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489859948,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734564755
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9858\">PR #9858</a>.</p>",
        "id": 489863308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1734566656
    }
]