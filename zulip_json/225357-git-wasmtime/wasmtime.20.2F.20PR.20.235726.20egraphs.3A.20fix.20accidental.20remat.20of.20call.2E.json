[
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a>.</p>",
        "id": 326248090,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675721572
    },
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a> from <code>fix-5716</code> to <code>main</code>:</p>\n<blockquote>\n<p>In the provided test case in #5716, the result of a call was then added to 0. We have a rewrite rule that sets the remat-bit on any add of a value and a constant, because these frequently appear (e.g. from address offset calculations) and this can frequently reduce register pressure (one long-lived base vs. many long-lived base+offset values). Separately, we have an algebraic rule that <code>x+0</code> rewrites to <code>x</code>.</p>\n<p>The result of this was that we had an eclass with the remat bit set on the add, but the add was also union'd into the call. We pick the latter during extraction, because it's cheaper not to do the add at all; but we still get the remat bit, and try to remat a call (!), which blows up later.</p>\n<p>This PR fixes the logic to look up the \"best value\" for a value (i.e., whatever extraction determined), and look up the remat bit on <em>that</em> node, not the canonical node.</p>\n<p>(Why did the canonical node become the iadd and not the call? Because the latter had a lower value-number, as an accident of IR construction; we don't impose any requirements on the input CLIF's value-number ordering, and I don't think this breaks any of the important acyclic properties, even though there is technically a dependence from a lower-numbered to a higher-numbered node. In essence one can think of them as having \"virtual numbers\" in any true topologically-sorted order, and the only place the actual integer indices matter should be in choosing the \"canonical ID\", which is just used for dedup'ing, modulo this bug.)</p>\n<p>Fixes #5716.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 326248091,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675721573
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a>.</p>",
        "id": 326248093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675721573
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a>.</p>",
        "id": 326248094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675721573
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a> from <code>fix-5716</code> to <code>main</code>.</p>",
        "id": 326248193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675721618
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a> from <code>fix-5716</code> to <code>main</code>:</p>\n<blockquote>\n<p>In the provided test case in #5716, the result of a call was then added to 0. We have a rewrite rule that sets the remat-bit on any add of a value and a constant, because these frequently appear (e.g. from address offset calculations) and this can frequently reduce register pressure (one long-lived base vs. many long-lived base+offset values). Separately, we have an algebraic rule that <code>x+0</code> rewrites to <code>x</code>.</p>\n<p>The result of this was that we had an eclass with the remat bit set on the add, but the add was also union'd into the call. We pick the latter during extraction, because it's cheaper not to do the add at all; but we still get the remat bit, and try to remat a call (!), which blows up later.</p>\n<p>This PR fixes the logic to look up the \"best value\" for a value (i.e., whatever extraction determined), and look up the remat bit on <em>that</em> node, not the canonical node.</p>\n<p>(Why did the canonical node become the iadd and not the call? Because the former had a lower value-number, as an accident of IR construction; we don't impose any requirements on the input CLIF's value-number ordering, and I don't think this breaks any of the important acyclic properties, even though there is technically a dependence from a lower-numbered to a higher-numbered node. In essence one can think of them as having \"virtual numbers\" in any true topologically-sorted order, and the only place the actual integer indices matter should be in choosing the \"canonical ID\", which is just used for dedup'ing, modulo this bug.)</p>\n<p>Fixes #5716.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 326248215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675721626
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726#pullrequestreview-1286129606\">PR review</a>.</p>",
        "id": 326252186,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675723253
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726#discussion_r1097993883\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this lookup also switch to <code>best_value</code> instead of <code>canonical_value</code>? What about the later uses of <code>canonical_value</code>? Perhaps <code>canonical_value</code> should just be dead as soon as we've looked up <code>best_value</code>, maybe enforced by shadowing it?</p>\n</blockquote>",
        "id": 326252187,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675723253
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a> from <code>fix-5716</code> to <code>main</code>.</p>",
        "id": 326253477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675723796
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726#pullrequestreview-1286139762\">PR review</a>.</p>",
        "id": 326253598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675723845
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726#discussion_r1098000746\">PR review comment</a>:</p>\n<blockquote>\n<p>This actually needs to be the canonical-value, to avoid unnecessary codegen!</p>\n<p>The reason is that we record the elaborated values in the map with canonical-ID as key, and we want to dedup as much as possible here. Otherwise if we refer to a value with different IDs that point to different parts of the eclass, we'll have unnecessary misses and recomputations.</p>\n<p>However it's good that you asked because I went over the whole function and saw that below, another <code>canonical_value</code> should be <code>best_value</code>, when we look up remat in the other case!</p>\n</blockquote>",
        "id": 326253599,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675723845
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726#pullrequestreview-1286148337\">PR review</a>.</p>",
        "id": 326254899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675724409
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a> from <code>fix-5716</code> to <code>main</code>.</p>",
        "id": 326255321,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675724630
    },
    {
        "content": "<p>cfallin has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a>.</p>",
        "id": 326255532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675724738
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5726\">PR #5726</a>.</p>",
        "id": 326258978,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1675726578
    }
]