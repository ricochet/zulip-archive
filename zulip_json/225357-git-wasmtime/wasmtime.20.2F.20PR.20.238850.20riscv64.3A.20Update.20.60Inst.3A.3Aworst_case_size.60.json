[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a> from <code>afonso360:issue8847</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This PR updates the <code>Inst::worst_case_size</code> size for the RISC-V backend. The panic that happens in #8847 is entirely due to the <code>return_call_indirect</code> generating too many bytes.</p>\n<p>I found it difficult to add an automatic calculation of the worst possible size for that instruction to the test that we have, so I attempted to manually calculate the worst case size and used that.</p>\n<p>The two test cases here are the original test case, and a minimized version without zicond. I'm not entirely sure why it bisects to the ZiCond PR (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/8695\">https://github.com/bytecodealliance/wasmtime/pull/8695</a>), but having both test cases is not too much of a burden, so might as well.</p>\n<p>The increased worst case size now causes an island to be emitted in the <code>return-call.clif</code> test, which are the changes for that test in this PR.</p>\n</blockquote>",
        "id": 445931682,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718910348
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>.</p>",
        "id": 445931683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718910348
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>.</p>",
        "id": 445931685,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718910348
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850#pullrequestreview-2131169735\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Suggestion for a test but otherwise LGTM.</p>\n</blockquote>",
        "id": 445932722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718910684
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850#pullrequestreview-2131169735\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! Suggestion for a test but otherwise LGTM.</p>\n</blockquote>",
        "id": 445932724,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718910685
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850#discussion_r1648021905\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree it's theoretically hard to enumerate all the different possible <code>Inst</code>s<code> and programmatically test the worst case -- but could we add a test at least that manually constructs what we think is the worst-case </code>Inst<code> (</code>return_call_indirect` with all clobbers set, etc) and asserts its size is 172? Size tests like this for large pseudoinsts plus a social norm of adding them for new large pseudoinsts will at least give partial coverage for this issue I think...</p>\n</blockquote>",
        "id": 445932725,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718910685
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>.</p>",
        "id": 445944593,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718914471
    },
    {
        "content": "<p>afonso360 has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>.</p>",
        "id": 445945496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718914763
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>.</p>",
        "id": 445947939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718915462
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850#issuecomment-2181543028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm not entirely sure why it bisects to the ZiCond PR (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/8695\">https://github.com/bytecodealliance/wasmtime/pull/8695</a>)</p>\n</blockquote>\n<p>In retrospect this is my fault. The test case in #8847 uses <code>has_zicond</code> so during bisection I marked \"unknown feature <code>has_zicond</code>\" as \"good\" which pointed to the ZiCond PR. I suspect if I had just removed the zicond feature itself I would have found a different point of bisection.</p>\n<p>Sorry about that, should have dug in a bit further myself! I naively assumed that the bug was in the zicond instructions added but in retrospect I see how that doesn't make sense</p>\n</blockquote>",
        "id": 445951781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718916720
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850\">PR #8850</a>.</p>",
        "id": 445953395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718917435
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8850#discussion_r1648021905\">PR review comment</a>.</p>",
        "id": 445962164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718921503
    }
]