[
    {
        "content": "<p>eust-dfinity opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 191696250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585103915
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381204172\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381204172\">PR Review</a>.</p>",
        "id": 191754047,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147022
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381204172\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381204172\">PR Review</a>.</p>",
        "id": 191754048,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147022
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397901219\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397901219\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Could you elaborate a bit on your use case for this? I would sort of expect that to override everything about allocation you'd have imported memories, but it sounds like your use case is also covering situations where the host wants to instantiate modules that define their own memory, but the host still wants to configure how those memories are allocated.</p>\n</blockquote>",
        "id": 191754049,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147022
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397900131\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397900131\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW this is making the <code>wasmtime_runtime</code> crate a public dependency of the <code>wasmtime</code> crate. We've previously avoided doing this because the <code>wasmtime_*</code> family of crate are intended to be far more lower level than the <code>wasmtime</code> crate.</p>\n<p>That being said we haven't quite had a vector of customization like this before where completely dynamic behavior is needed. I suspect we're going to have these grow over time, but I figured it's worth pointing out that this has a few consequences for the <code>wasmtime</code> crate:</p>\n<ul>\n<li>\n<p>This primarily means that if <code>wasmtime_runtime</code> has a major version bump, we have to bump the major version of <code>wasmtime</code> as well. It's expected that <code>wasmtime_runtime</code> will have <em>lots</em> of major version bumps because it's just a bunch of internals. For <code>wasmtime</code>, however, I think the idea is that eventually we reach a steady state where we just release new patch/minor versions.</p>\n</li>\n<li>\n<p>This is also relatively difficult to use since you'll have to match up, manually, with the version of <code>wasmtime_runtime</code> that <code>wasmtime</code> is using. </p>\n</li>\n</ul>\n<p>All that is to say that if we can avoid exposing this degree of a public dependency I think we should. One way, for example, would be to define traits in <code>wasmtime</code> as well as in <code>wasmtime_runtime</code>. The <code>wasmtime</code> crate would then provide its own implementation of the traits in <code>wasmtime_runtime</code> for provided types. This is a bit wonky, however, from our perspective and may not be the most trivial to manage.</p>\n</blockquote>",
        "id": 191754050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147022
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397903594\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397903594\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The term \"Allocator\" feels a bit general here, would it be possible to tweak the naming here to indicate that this isn't like a malloc/free allocator but rather an allocator of linear memories?</p>\n</blockquote>",
        "id": 191754051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147022
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397902425\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r397902425\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In terms of safety <em>something</em> here needs to be <code>unsafe</code> due to the trickiness to get this all right (and segfaults which happen if there's a bug). I think all traits introduced here (both <code>Allocator</code> and <code>LinearMemory</code>) will need to be <code>unsafe trait</code> declarations since they have a number of safety guarantees to uphold in their implementations.</p>\n</blockquote>",
        "id": 191754052,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585147022
    },
    {
        "content": "<p>eust-dfinity submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381668135\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381668135\">PR Review</a>.</p>",
        "id": 191835094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585190817
    },
    {
        "content": "<p>eust-dfinity created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r398287254\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r398287254\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Our use case is in fact to control all memories used in modules, not just imported ones. Basically we monitor memory usage and track memory changes. Possible reallocations which may happen in wasmtime right now make it more difficult.</p>\n</blockquote>",
        "id": 191835095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585190817
    },
    {
        "content": "<p>eust-dfinity submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381669346\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-381669346\">PR Review</a>.</p>",
        "id": 191835307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585191078
    },
    {
        "content": "<p>eust-dfinity created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r398288380\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r398288380\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Thank you for the info. I was meaning to ask about it as well.<br>\nI'll try to move things around, but first I'd rather come to a consensus on the general picture of how the whole thing should work internally.</p>\n<p>There is also a question of MemoryPlan which resides in environ now.</p>\n</blockquote>",
        "id": 191835308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585191078
    },
    {
        "content": "<p>eust-dfinity updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 192607365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585785698
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-386655775\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-386655775\">PR Review</a>.</p>",
        "id": 192701860,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585849583
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-386655775\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-386655775\">PR Review</a>.</p>",
        "id": 192701861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585849583
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402497529\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402497529\">PR Review Comment</a>:</p>\n<blockquote>\n<p>How come this is wrapped in a <code>RefCell</code>?</p>\n</blockquote>",
        "id": 192701864,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585849584
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402497889\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402497889\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think it's safe to remove this and have <code>as_ptr</code> return <code>*mut u8</code> since all linear memories need to support interior mutability anyway.</p>\n</blockquote>",
        "id": 192701865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585849584
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402498288\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402498288\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It might be good to leave a statement here too saying that this is a pretty new and experimental feature and it's recommended to be familiar with the code before using it. I'm not confident personally at least that this is an exhaustive set of what you need to guarantee for usage of this to be safe.</p>\n</blockquote>",
        "id": 192701866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585849584
    },
    {
        "content": "<p>eust-dfinity updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 192741790,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585870766
    },
    {
        "content": "<p>eust-dfinity submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-386856694\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#pullrequestreview-386856694\">PR Review</a>.</p>",
        "id": 192743316,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585871986
    },
    {
        "content": "<p>eust-dfinity created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402662909\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400#discussion_r402662909\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is complementary to:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/a325b62ade47540b4fe528d0c98e3c7dc1bfc042/crates/runtime/src/memory.rs#L147\" title=\"https://github.com/bytecodealliance/wasmtime/blob/a325b62ade47540b4fe528d0c98e3c7dc1bfc042/crates/runtime/src/memory.rs#L147\">https://github.com/bytecodealliance/wasmtime/blob/a325b62ade47540b4fe528d0c98e3c7dc1bfc042/crates/runtime/src/memory.rs#L147</a><br>\nBasically it's here because RuntimeLinearMemory::vmmemory() takes &amp;self and not &amp;mut self, but needs to return mut ptr.</p>\n</blockquote>",
        "id": 192743317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585871986
    },
    {
        "content": "<p>eust-dfinity updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 192759893,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585891827
    },
    {
        "content": "<p>eust-dfinity updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 192762062,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585894844
    },
    {
        "content": "<p>eust-dfinity updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 192774407,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585904177
    },
    {
        "content": "<p>eust-dfinity updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a> from <code>host_memory</code> to <code>master</code>:</p>\n<blockquote>\n<p>As per discussion on host managed memory on zulip started by @lostman here is a simple implementation.</p>\n<p>To make things least invasive I ended up with two traits - one for allocator and one for actual memory. This way LinearMemory is not forced to know anything about the allocator and consequently does not need to inherit restrictions placed on the allocator (e.g. Sync).</p>\n<p>Additionally DefaultAllocator is made public, so it's possible to create a wrapper around the existing allocator/memory (insert some hooks) and supply it as a custom one.</p>\n<p>There are no specific test cases for custom allocators. Can be added if required.<br>\nImplementation itself is tested within existing tests with DefaultAllocator.</p>\n<p>@alexcrichton @tschneidereit @peterhuene please have a look</p>\n</blockquote>",
        "id": 192985992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586133962
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1400\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1400\">PR #1400</a>.</p>",
        "id": 193053432,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586184765
    }
]