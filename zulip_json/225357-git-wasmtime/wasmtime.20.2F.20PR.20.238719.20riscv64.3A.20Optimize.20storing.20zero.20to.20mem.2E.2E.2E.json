[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a> from <code>alexcrichton:riscv64-store-zero-optimization</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit is similar to #8701 in that it adds a special case to <code>store</code> operations to use the <code>zero</code> register when applicable.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 441724710,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717166567
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>.</p>",
        "id": 441724711,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717166567
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>.</p>",
        "id": 441724712,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717166567
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#pullrequestreview-2091181877\">PR review</a>:</p>\n<blockquote>\n<p>Neat!</p>\n<p>I also have a suspicion that the CI failures might be that we are now trying to encode a compressed store with the zero register. I don't remember if this is legal, but I'm going to investigate it a bit.</p>\n</blockquote>",
        "id": 441741680,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717170891
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#pullrequestreview-2091181877\">PR review</a>:</p>\n<blockquote>\n<p>Neat!</p>\n<p>I also have a suspicion that the CI failures might be that we are now trying to encode a compressed store with the zero register. I don't remember if this is legal, but I'm going to investigate it a bit.</p>\n<p>Edit: Yeah, the <a href=\"https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf\">RISC-V Manual Page 70</a> states:</p>\n<blockquote>\n<p>For many RVC instructions, zero-valued immediates are disallowed and x0 is not a valid 5-bit register specifier. These restrictions free up encoding space for other instructions requiring fewer operand bits.</p>\n</blockquote>\n<p>There is nothing specific about the store instructions falling under these restrictions and It's probably why we don't have the check <a href=\"https://github.com/bytecodealliance/wasmtime/blob/34a9ad98264a351ae72928c1fb77d85c1c750d12/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L676-L677\">here</a>. Note the regular stores (non-stack based) should not need an update since they use a compressed register which automatically excludes the zero register.</p>\n</blockquote>",
        "id": 441743428,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717171298
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#pullrequestreview-2091181877\">PR review</a>:</p>\n<blockquote>\n<p>Neat!</p>\n<p>I also have a suspicion that the CI failures might be that we are now trying to encode a compressed store with the zero register. I don't remember if this is legal, but I'm going to investigate it a bit.</p>\n<p>Edit: Yeah, the <a href=\"https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf\">RISC-V Manual (Page 70)</a> states:</p>\n<blockquote>\n<p>For many RVC instructions, zero-valued immediates are disallowed and x0 is not a valid 5-bit register specifier. These restrictions free up encoding space for other instructions requiring fewer operand bits.</p>\n</blockquote>\n<p>There is nothing specific about the store instructions falling under these restrictions and It's probably why we don't have the check <a href=\"https://github.com/bytecodealliance/wasmtime/blob/34a9ad98264a351ae72928c1fb77d85c1c750d12/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L676-L677\">here</a>. Note the regular stores (non-stack based) should not need an update since they use a compressed register which automatically excludes the zero register.</p>\n</blockquote>",
        "id": 441743655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717171326
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#pullrequestreview-2091181877\">PR review</a>:</p>\n<blockquote>\n<p>Neat!</p>\n<p>I also have a suspicion that the CI failures might be that we are now trying to encode a compressed store with the zero register. I don't remember if this is legal, but I'm going to investigate it a bit.</p>\n<p>Edit: Yeah, the <a href=\"https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf\">RISC-V Manual (Page 70)</a> states:</p>\n<blockquote>\n<p>For many RVC instructions, zero-valued immediates are disallowed and x0 is not a valid 5-bit register specifier. These restrictions free up encoding space for other instructions requiring fewer operand bits.</p>\n</blockquote>\n<p>There is nothing specific about the store instructions falling under these restrictions and It's probably why we don't have the check <a href=\"https://github.com/bytecodealliance/wasmtime/blob/34a9ad98264a351ae72928c1fb77d85c1c750d12/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L670-L692\">here</a>. </p>\n<p>Note the regular stores (non-stack based) should not need an update since they use a compressed register which automatically excludes the zero register.</p>\n</blockquote>",
        "id": 441744051,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717171425
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#pullrequestreview-2091181877\">PR review</a>:</p>\n<blockquote>\n<p>Neat!</p>\n<p>I also have a suspicion that the CI failures might be that we are now trying to encode a compressed store with the zero register. I don't remember if this is legal, but I'm going to investigate it a bit.</p>\n<p>Edit: Yeah, the <a href=\"https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf\">RISC-V Manual (Page 70)</a> states:</p>\n<blockquote>\n<p>For many RVC instructions, zero-valued immediates are disallowed and x0 is not a valid 5-bit register specifier. These restrictions free up encoding space for other instructions requiring fewer operand bits.</p>\n</blockquote>\n<p>There is nothing specific about the store instructions falling under these restrictions and It's probably why we don't have the check <a href=\"https://github.com/bytecodealliance/wasmtime/blob/34a9ad98264a351ae72928c1fb77d85c1c750d12/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L670-L692\">here</a>. This still allows us to use the zero register for floating point compressed stores though!</p>\n<p>Note the regular stores (non-stack based) should not need an update since they use a compressed register which automatically excludes the zero register.</p>\n</blockquote>",
        "id": 441744296,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717171488
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>.</p>",
        "id": 441752852,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717173621
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#issuecomment-2142625820\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>:</p>\n<blockquote>\n<p>At least one issue I tracked to my misunderstanding of how <code>istore{8,16,32}</code> worked. I was inferring the type of store from the operand but that's not correct for those instructions. I'll take a look at the compressed bits now as well.</p>\n</blockquote>",
        "id": 441753124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717173696
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>.</p>",
        "id": 441759291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717175143
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>.</p>",
        "id": 441759508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717175189
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#issuecomment-2142667207\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>:</p>\n<blockquote>\n<p>Ok I did a bit of an audit of the compressed stores. I added a new test in the zcb.clif test doing all the store widths to both an arbitrary register and the stack. My bugfix around my misinterpretation of <code>istore8</code> and friends fixed CI, so there was no \"smoking gun\" per se to the compressed loads. </p>\n<p>Compressed loads to arbitrary registers already don't work since that gates on the source being x8-x15 (as you pointed out). We are emitting compressed loads to the stack for <code>x0</code> though but at least capstone disassembles it so it seems like it might be intended to work? Do you think I should add a condition to avoid generating the instruction to be safe though to ensure that it doesn't get emitted?</p>\n<blockquote>\n<p>This still allows us to use the zero register for floating point compressed stores though!</p>\n</blockquote>\n<p>By this do you mean that we could use a compressed <code>sw</code> instruction for a f32 store for example? I haven't done that yet because it would involve changing the type of the store to recognize that which is somewhat orthogonal to this. That being said I actually discovered a bug as well adding the f32/f64 case to the test here. Turns out <code>i64_from_iconst</code> will match <code>f32const</code> and <code>f64const</code> nodes, so I switched instead to <code>u64_from_iconst</code> which actually only matches <code>iconst</code> nodes.</p>\n</blockquote>",
        "id": 441760461,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717175413
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#issuecomment-2142721438\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>:</p>\n<blockquote>\n<blockquote>\n<p>My bugfix around my misinterpretation of istore8 and friends fixed CI, so there was no \"smoking gun\" per se to the compressed loads.</p>\n</blockquote>\n<p>Nice! Good to know.</p>\n<blockquote>\n<p>We are emitting compressed loads to the stack for x0 though but at least capstone disassembles it so it seems like it might be intended to work?</p>\n</blockquote>\n<p>For loads we shouldn't be, at least we have that specific <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d65ccd85cc111ef279c9eb6b02f3aef7a839fb78/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L577-L590\">check in the emit code</a></p>\n<p>For stores I would agree, If capstone disassembles it it's probably intended to work. It also seems like a very useful instruction to have, so I wouldn't be surprised that it is intended.</p>\n<blockquote>\n<p>Do you think I should add a condition to avoid generating the instruction to be safe though to ensure that it doesn't get emitted?</p>\n</blockquote>\n<p>I think this is fine as is. I'm fairly sure that if it wasn't intended the testsuites would fail in a bunch of places.</p>\n<blockquote>\n<p>By this do you mean that we could use a compressed sw instruction for a f32 store for example? </p>\n</blockquote>\n<p>No, just that the zero_reg in the emit for <code>Fsd (float store double)</code>, means <code>f0</code> and that is a perfectly normal register, but since we are not restricting the zero reg, it doesn't matter.</p>\n<blockquote>\n<p>Turns out i64_from_iconst will match f32const and f64const nodes</p>\n</blockquote>\n<p>That's super weird, and I would not expect that at all.</p>\n</blockquote>",
        "id": 441768384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717177751
    },
    {
        "content": "<p>afonso360 merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>.</p>",
        "id": 441773774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717179504
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719#issuecomment-2142778231\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">PR #8719</a>:</p>\n<blockquote>\n<blockquote>\n<p>For loads we shouldn't be, at least we have that specific <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d65ccd85cc111ef279c9eb6b02f3aef7a839fb78/cranelift/codegen/src/isa/riscv64/inst/emit.rs#L577-L590\">check in the emit code</a></p>\n</blockquote>\n<p>Oops sorry I misspoke, I meant stores!</p>\n</blockquote>",
        "id": 441775282,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717179982
    }
]