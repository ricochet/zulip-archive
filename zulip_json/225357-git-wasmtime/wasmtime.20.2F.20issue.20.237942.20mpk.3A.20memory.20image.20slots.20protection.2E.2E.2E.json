[
    {
        "content": "<p><a href=\"https://github.com/abrown\">abrown</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7942\">Issue #7942</a>.</p>",
        "id": 421553857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707954679
    },
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7942\">issue #7942</a>:</p>\n<blockquote>\n<p>While adding a test to check that the PKRU bits are properly switched out when each async fiber is suspended, I discovered that memory images are undoing the MPK protection applied to the memory pool. The fix is relatively simple: re-apply the MPK protection. But how we do so matters, since the memory image logic and MPK logic are completely separate at the moment.</p>\n<h3>Test Case</h3>\n<p>Initial draft at this <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:pku-async-draft\">branch</a>; some manual tweaking required.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>add a <code>(data ...)</code> section to a WebAssembly module</li>\n<li>instantiate a pool-allocated, MPK-enabled instance</li>\n<li>observe the memory mappings, e.g., (<code>cat /proc/$(pidof all-657fb8d34994dd9d)/smaps</code>)</li>\n</ul>\n<h3>Expected Results</h3>\n<p>All of the single-page (64kB) slot memory is protected with the same MPK key.</p>\n<h3>Actual Results</h3>\n<p>Because the MPK protection is applied when the memory pool is instantiated, each instantiation of a new Wasm module containing image data will replace the MPK protection with generic key 0 protection when <a href=\"https://github.com/abrown/wasmtime/blob/b87c2137925e7166ab1fffe6dfc15dce0c8fa3ae/crates/runtime/src/cow.rs#L406\"><code>MemoryImageSlot::instantiate</code></a> is called. When instantiating a single-page memory I discovered that the slot was split up with different keys instead of all the same key (e.g., key 1 used here):</p>\n<ul>\n<li>a 4kB read-write mapping for <code>/memfd:wasm-memory-image</code> with __key 0__ (e.g., 7ffef532c000-7ffef532d000)</li>\n<li>a 60kB read-write mapping with __key 1__ (e.g., 7ffef532d000-7ffef533c000)</li>\n<li>a 216208kB no-access mapping with __key 1__ (e.g., 7ffef533c000-7fff02660000) &mdash; this is the guard region</li>\n</ul>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: <code>main</code><br>\nOperating system: Linux<br>\nArchitecture: x64</p>\n<h3>Extra Info</h3>\n<p>One option here is to pass through an <code>Option&lt;ProtectionKey&gt;</code> to the <code>MemoryImageSlot::instantiate</code> function. Other suggestions?<br>\n</p>\n</blockquote>",
        "id": 421553859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707954680
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7942#issuecomment-1945062038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7942\">issue #7942</a>:</p>\n<blockquote>\n<p>cc: @alexcrichton </p>\n</blockquote>",
        "id": 421553876,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1707954696
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7942#issuecomment-1946472286\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7942\">issue #7942</a>:</p>\n<blockquote>\n<p>To confirm, the problem here is that when a new mapping for a memory image is installed in the virtual address space that overwrites the pkey mapping previously configured? And the fix is to <code>pkey_mprotect</code> again? (want to make sure I understand first)</p>\n</blockquote>",
        "id": 421691669,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708014084
    }
]