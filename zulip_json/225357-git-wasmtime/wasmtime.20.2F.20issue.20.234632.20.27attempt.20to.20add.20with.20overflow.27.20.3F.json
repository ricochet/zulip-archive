[
    {
        "content": "<p>Zhangyx24 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632\">issue #4632</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/9276462/test-wat.txt\">test-wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/9276463/test-rs.txt\">test-rs.txt</a><br>\n<a href=\"http://test.rs\">test.rs</a> is uploaded as test-rs.txt, test.wat is uploaded asa test-wat.txt.</p>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -q --example test</code></p>\n<h3>Expected Results</h3>\n<p>sum_i32_host Results: 3<br>\nsum_i32_host Results: -656906904<br>\nsum_i32_host Results: 2124157492</p>\n<h3>Actual Results</h3>\n<p>Extracting export...<br>\nCalling func1...<br>\nsum_i32_host Results: 3<br>\nthread 'main' panicked at 'attempt to add with overflow', test.rs:24:17<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.38.0</p>\n<p>Operating system: macOS10.15 and ubuntu20.04</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 292307737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659861660
    },
    {
        "content": "<p>Zhangyx24 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632\">issue #4632</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/9276462/test-wat.txt\">test-wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/9276463/test-rs.txt\">test-rs.txt</a><br>\n<a href=\"http://test.rs\">test.rs</a> is uploaded as test-rs.txt, test.wat is uploaded asa test-wat.txt.</p>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -q --example test</code></p>\n<h3>Expected Results</h3>\n<p>sum_i32_host Results: 3<br>\nsum_i32_host Results: -656906904<br>\nsum_i32_host Results: 2124157492</p>\n<h3>Actual Results</h3>\n<p>Extracting export...<br>\nCalling func1...<br>\nsum_i32_host Results: 3<br>\nthread 'main' panicked at 'attempt to add with overflow', test.rs:24:17<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.38.0</p>\n<p>Operating system: macOS10.15 and ubuntu20.04</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 292307738,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659861661
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632#issuecomment-1207374200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632\">issue #4632</a>:</p>\n<blockquote>\n<p>Posting the sources inline to make it easier to see them:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"myenv\"</span> <span class=\"s2\">\"sum_i32\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$sum_i32</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$test</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$sum_i32</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">0x1)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">0x2)</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$sum_i32</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">0x6C6C_0000)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">0x6C6C_6568)</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$sum_i32</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">0x6C6C_1234)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">0x1230_0000)</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! Small example of how to instantiate a wasm module that imports one function,</span>\n<span class=\"sd\">//! showing how you can fill in host functionality for a wasm module.</span>\n\n<span class=\"c1\">// cargo run -q --example test</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Modules can be compiled through either the text or binary format</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./test.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"myenv\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"sum_i32\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"sum_i32_host Results: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Extracting export...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"test\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Calling func1...\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func1</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292311488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659867123
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632#issuecomment-1207376084\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632\">issue #4632</a>:</p>\n<blockquote>\n<p>The error happens at the <code>let s = x + y;</code>. This is correct as 0x6C6C_0000 + 0x6C6C_6568 does indeed overflow. Note that this panic only happens when debug assertions are enabled as rustc compiles the addition to a wrapping addition if debug assertions are disabled. If you want to explicitly use wrapping on overflow, you can use <code>let s = x.wrapping_add(y);</code>.</p>\n</blockquote>",
        "id": 292311916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659867749
    },
    {
        "content": "<p>Zhangyx24 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632#issuecomment-1207389847\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632\">issue #4632</a>:</p>\n<blockquote>\n<p>Thanks a lot !</p>\n</blockquote>",
        "id": 292315248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659872700
    },
    {
        "content": "<p>Zhangyx24 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4632\">issue #4632</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/9276462/test-wat.txt\">test-wat.txt</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/9276463/test-rs.txt\">test-rs.txt</a><br>\n<a href=\"http://test.rs\">test.rs</a> is uploaded as test-rs.txt, test.wat is uploaded asa test-wat.txt.</p>\n<h3>Steps to Reproduce</h3>\n<p><code>cargo run -q --example test</code></p>\n<h3>Expected Results</h3>\n<p>sum_i32_host Results: 3<br>\nsum_i32_host Results: -656906904<br>\nsum_i32_host Results: 2124157492</p>\n<h3>Actual Results</h3>\n<p>Extracting export...<br>\nCalling func1...<br>\nsum_i32_host Results: 3<br>\nthread 'main' panicked at 'attempt to add with overflow', test.rs:24:17<br>\nnote: run with <code>RUST_BACKTRACE=1</code> environment variable to display a backtrace</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 0.38.0</p>\n<p>Operating system: macOS10.15 and ubuntu20.04</p>\n<p>Architecture: x86_64<br>\n</p>\n</blockquote>",
        "id": 292315253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659872702
    }
]