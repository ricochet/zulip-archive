[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>I've minimized a test case that currently fails on 32-bit platforms:</p>\n<div class=\"codehilite\"><pre><span></span><code>target i686\n\nfunction u0:1516(i32) -&gt; i32 system_v {\nblock0(v0: i32):\n    v1 = load.i32 notrap aligned readonly v0\n    ;v2 = load.i32 v1\n    ;v3 = sextend.i64 v2\n    v3 = sload32 v1\n    v4, v5 = isplit v3\n    return v4\n}\n</code></pre></div>\n\n\n<p>I've tried writing a legalizer for it that would produce the commented instructions but it doesn't do anything (same lack of result for expand, widen, narrow). What gives?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -107,6 +107,7 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     let sdiv_imm = insts.by_name(&quot;sdiv_imm&quot;);\n     let select = insts.by_name(&quot;select&quot;);\n     let sextend = insts.by_name(&quot;sextend&quot;);\n\n<span class=\"gi\">+    let sload32 = insts.by_name(&quot;sload32&quot;);</span>\n     let sshr = insts.by_name(&quot;sshr&quot;);\n     let sshr_imm = insts.by_name(&quot;sshr_imm&quot;);\n     let srem = insts.by_name(&quot;srem&quot;);\n<span class=\"gu\">@@ -213,6 +214,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     // embedded as part of arguments), so use a custom legalization for now.\n     narrow.custom_legalize(iconst, &quot;narrow_iconst&quot;);\n\n\n<span class=\"gi\">+    expand.legalize(</span>\n<span class=\"gi\">+        def!(a = sload32.I64(flags, ptr, offset)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(b = load.I32(flags, ptr, offset)),</span>\n<span class=\"gi\">+            def!(a = sextend.I64(b)),</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     for &amp;(ty, ty_half) in &amp;[(I128, I64), (I64, I32)] {\n         let inst = uextend.bind(ty).bind(ty_half);\n         narrow.legalize(\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198430760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590146807
    },
    {
        "content": "<p>whitequark labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>I've minimized a test case that currently fails on 32-bit platforms:</p>\n<div class=\"codehilite\"><pre><span></span><code>target i686\n\nfunction u0:1516(i32) -&gt; i32 system_v {\nblock0(v0: i32):\n    v1 = load.i32 notrap aligned readonly v0\n    ;v2 = load.i32 v1\n    ;v3 = sextend.i64 v2\n    v3 = sload32 v1\n    v4, v5 = isplit v3\n    return v4\n}\n</code></pre></div>\n\n\n<p>I've tried writing a legalizer for it that would produce the commented instructions but it doesn't do anything (same lack of result for expand, widen, narrow). What gives?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -107,6 +107,7 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     let sdiv_imm = insts.by_name(&quot;sdiv_imm&quot;);\n     let select = insts.by_name(&quot;select&quot;);\n     let sextend = insts.by_name(&quot;sextend&quot;);\n\n<span class=\"gi\">+    let sload32 = insts.by_name(&quot;sload32&quot;);</span>\n     let sshr = insts.by_name(&quot;sshr&quot;);\n     let sshr_imm = insts.by_name(&quot;sshr_imm&quot;);\n     let srem = insts.by_name(&quot;srem&quot;);\n<span class=\"gu\">@@ -213,6 +214,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     // embedded as part of arguments), so use a custom legalization for now.\n     narrow.custom_legalize(iconst, &quot;narrow_iconst&quot;);\n\n\n<span class=\"gi\">+    expand.legalize(</span>\n<span class=\"gi\">+        def!(a = sload32.I64(flags, ptr, offset)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(b = load.I32(flags, ptr, offset)),</span>\n<span class=\"gi\">+            def!(a = sextend.I64(b)),</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     for &amp;(ty, ty_half) in &amp;[(I128, I64), (I64, I32)] {\n         let inst = uextend.bind(ty).bind(ty_half);\n         narrow.legalize(\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198430761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590146807
    },
    {
        "content": "<p>whitequark labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>I've minimized a test case that currently fails on 32-bit platforms:</p>\n<div class=\"codehilite\"><pre><span></span><code>target i686\n\nfunction u0:1516(i32) -&gt; i32 system_v {\nblock0(v0: i32):\n    v1 = load.i32 notrap aligned readonly v0\n    ;v2 = load.i32 v1\n    ;v3 = sextend.i64 v2\n    v3 = sload32 v1\n    v4, v5 = isplit v3\n    return v4\n}\n</code></pre></div>\n\n\n<p>I've tried writing a legalizer for it that would produce the commented instructions but it doesn't do anything (same lack of result for expand, widen, narrow). What gives?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -107,6 +107,7 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     let sdiv_imm = insts.by_name(&quot;sdiv_imm&quot;);\n     let select = insts.by_name(&quot;select&quot;);\n     let sextend = insts.by_name(&quot;sextend&quot;);\n\n<span class=\"gi\">+    let sload32 = insts.by_name(&quot;sload32&quot;);</span>\n     let sshr = insts.by_name(&quot;sshr&quot;);\n     let sshr_imm = insts.by_name(&quot;sshr_imm&quot;);\n     let srem = insts.by_name(&quot;srem&quot;);\n<span class=\"gu\">@@ -213,6 +214,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     // embedded as part of arguments), so use a custom legalization for now.\n     narrow.custom_legalize(iconst, &quot;narrow_iconst&quot;);\n\n\n<span class=\"gi\">+    expand.legalize(</span>\n<span class=\"gi\">+        def!(a = sload32.I64(flags, ptr, offset)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(b = load.I32(flags, ptr, offset)),</span>\n<span class=\"gi\">+            def!(a = sextend.I64(b)),</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     for &amp;(ty, ty_half) in &amp;[(I128, I64), (I64, I32)] {\n         let inst = uextend.bind(ty).bind(ty_half);\n         narrow.legalize(\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198430762,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590146807
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-632643228\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 198430772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590146819
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-632643767\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>cc @iximeow perhaps?</p>\n</blockquote>",
        "id": 198430896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590146892
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-632647617\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>It should probably be in <code>narrow</code>. <code>narrow</code> is used for types bigger than the native pointer size:</p>\n</blockquote>",
        "id": 198431582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590147475
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-632647617\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>It should probably be in <code>narrow</code>. <code>narrow</code> is used for types bigger than the native pointer size:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/26ee986c2f99bb339f171267731f9108890044ab/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59\">https://github.com/bytecodealliance/wasmtime/blob/26ee986c2f99bb339f171267731f9108890044ab/cranelift/codegen/meta/src/isa/x86/mod.rs#L40-L59</a></p>\n</blockquote>",
        "id": 198431630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590147489
    },
    {
        "content": "<p>whitequark edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>I've minimized a test case that currently fails on 32-bit platforms:</p>\n<div class=\"codehilite\"><pre><span></span><code>target i686\n\nfunction u0:1516(i32) -&gt; i32 system_v {\nblock0(v0: i32):\n    v1 = load.i32 notrap aligned readonly v0\n    ;v2 = load.i32 v1\n    ;v3 = sextend.i64 v2\n    v3 = sload32 v1\n    v4, v5 = isplit v3\n    return v4\n}\n</code></pre></div>\n\n\n<p>I've tried writing a legalizer for it that would produce the commented instructions but it doesn't do anything (same lack of result for expand, widen, narrow). What gives?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -107,6 +107,7 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     let sdiv_imm = insts.by_name(&quot;sdiv_imm&quot;);\n     let select = insts.by_name(&quot;select&quot;);\n     let sextend = insts.by_name(&quot;sextend&quot;);\n\n<span class=\"gi\">+    let sload32 = insts.by_name(&quot;sload32&quot;);</span>\n     let sshr = insts.by_name(&quot;sshr&quot;);\n     let sshr_imm = insts.by_name(&quot;sshr_imm&quot;);\n     let srem = insts.by_name(&quot;srem&quot;);\n<span class=\"gu\">@@ -213,6 +214,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     // embedded as part of arguments), so use a custom legalization for now.\n     narrow.custom_legalize(iconst, &quot;narrow_iconst&quot;);\n\n\n<span class=\"gi\">+    narrow.legalize(</span>\n<span class=\"gi\">+        def!(a = sload32.I64(flags, ptr, offset)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(b = load.I32(flags, ptr, offset)),</span>\n<span class=\"gi\">+            def!(a = sextend.I64(b)),</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     for &amp;(ty, ty_half) in &amp;[(I128, I64), (I64, I32)] {\n         let inst = uextend.bind(ty).bind(ty_half);\n         narrow.legalize(\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198431773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590147648
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-632648680\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Sure, I tried that first, it doesn't work there either. Or am I doing it wrong?</p>\n</blockquote>",
        "id": 198431775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590147650
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-634797751\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Looks right to me; what is the error you are getting when you run the snippet?</p>\n</blockquote>",
        "id": 198920005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590598349
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-634985285\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<blockquote>\n<p>what is the error you are getting when you run the snippet?</p>\n</blockquote>\n<p>There is no error. It just doesn't legalize anything.</p>\n</blockquote>",
        "id": 198963588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590619953
    },
    {
        "content": "<p>whitequark edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-634985285\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<blockquote>\n<p>what is the error you are getting when you run the snippet?</p>\n</blockquote>\n<p>There is no error. It just doesn't legalize anything. The output is the same as if I don't apply the patch.</p>\n</blockquote>",
        "id": 198963600,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590619964
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635435365\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Oh, I see now. What about this theory: <code>v1 = load.i32 ...</code> makes <code>v1</code> an <code>i32</code> but your legalization is for <code>a = sload32.I64(flags, ptr, offset)</code>--so maybe the legalization is looking for an <code>i64</code> but the snippet provides an <code>i32</code>? Or something like along those lines?</p>\n</blockquote>",
        "id": 199041492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590681238
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635903723\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>@abrown Sorry, my original minimized testcase was not minimized enough and so it was a bit misleading. Take a look at this:</p>\n<div class=\"codehilite\"><pre><span></span><code>target i686\n\nfunction u0:1516(i32) -&gt; i32 system_v {\nblock0(v0: i32):\n    ;v1 = load.i32 v0\n    ;v2 = sextend.i64 v1\n    v2 = sload32 v0\n    v3, v4 = isplit v2\n    return v3\n}\n</code></pre></div>\n\n\n<p>Does this illustrate the problem better?</p>\n</blockquote>",
        "id": 199137583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590748801
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635930492\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>diff\n+    narrow.legalize(\n+        def!(a = sload32.I64(flags, ptr, offset)),\n+        vec![\n+            def!(b = load.I32(flags, ptr, offset)),\n+            def!(a = sextend.I64(b)),\n+        ]\n+    );\n</code></p>\n</blockquote>\n<p>What @abrown is talking about is that the <code>I64</code> part of <code>sload32.I64</code> forces <code>ptr</code> to be an <code>i64</code>, not the output value.</p>\n</blockquote>",
        "id": 199143341,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590753102
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635930492\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>diff\n+    narrow.legalize(\n+        def!(a = sload32.I64(flags, ptr, offset)),\n+        vec![\n+            def!(b = load.I32(flags, ptr, offset)),\n+            def!(a = sextend.I64(b)),\n+        ]\n+    );\n</code></p>\n</blockquote>\n<p>What @abrown is talking about is that the <code>I64</code> part of <code>sload32.I64</code> maybe forces <code>ptr</code> to be an <code>i64</code>, not the output value.</p>\n</blockquote>",
        "id": 199143362,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590753118
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635930492\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>diff\n+    narrow.legalize(\n+        def!(a = sload32.I64(flags, ptr, offset)),\n+        vec![\n+            def!(b = load.I32(flags, ptr, offset)),\n+            def!(a = sextend.I64(b)),\n+        ]\n+    );\n</code></p>\n</blockquote>\n<p>What @abrown is talking about is that the <code>I64</code> part of <code>sload32.I64</code> maybe forces <code>ptr</code> to be an <code>i64</code>, and not the output value.</p>\n</blockquote>",
        "id": 199143405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590753125
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635930992\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Oh... I totally misunderstood how it works. Sorry!</p>\n</blockquote>",
        "id": 199143475,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590753185
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-635931856\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Nope</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/01f46d02383be038465d86d5c2e22e2d2454d3ec/cranelift/wasm/src/code_translator.rs#L1819\">https://github.com/bytecodealliance/wasmtime/blob/01f46d02383be038465d86d5c2e22e2d2454d3ec/cranelift/wasm/src/code_translator.rs#L1819</a></p>\n<p>it seems that the <code>I64</code> part is really the output type and not the pointer type.</p>\n</blockquote>",
        "id": 199143619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590753323
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636095065\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Bizarrely, it works for stores:</p>\n<div class=\"codehilite\"><pre><span></span><code>    narrow.legalize(\n        def!(istore32.I64(flags, a, ptr, offset)),\n        vec![\n            def!((al, ah) = isplit(a)),\n            def!(store.I32(flags, al, ptr, offset)),\n        ]\n    );\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>target i686\n\nfunction u0:0(i32, i32, i32) {\nblock0(v0: i32, v1: i32, v2: i32):\n    v3 = iconcat v1, v2\n    istore32.i64 v3, v0\n    return\n}\n</code></pre></div>\n\n\n</blockquote>",
        "id": 199185992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590773609
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636098907\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Ahh I know what happens. The problem is that <code>isplit.i64</code> is not legal and so the legalizer never actually looks at <code>sload32.i64</code> at all. It looks like it's not easily possible to encode that in the meta language, how would I proceed?</p>\n</blockquote>",
        "id": 199187078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590774107
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636143579\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">value_type</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">ir</span>::<span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>this is an excerpt from the <code>sload32</code> legalization. It seems that it <strong>does</strong> check the pointer type.</p>\n</blockquote>",
        "id": 199199684,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590780018
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636144089\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>That seems like a bug then? But I'm not sure where.</p>\n</blockquote>",
        "id": 199199841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590780097
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636148449\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>It seems that the ctrl typevar of <code>sload32</code> is actually the pointer size. The output type is always <code>i64</code>. This means that you should use <code>sload32.i32</code> when you have a 32bit pointer and <code>sload32.i64</code> when you have a 64bit pointer.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iAddr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">TypeVar</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;iAddr&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;An integer address type&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeSetBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">ints</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"o\">..</span><span class=\"mi\">64</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Operand</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;p&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iAddr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iExt32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">TypeVar</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;iExt32&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">&quot;An integer type with more than 32 bits&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TypeSetBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">ints</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"o\">..</span><span class=\"mi\">64</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Operand</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;x&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iExt32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Operand</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">&quot;a&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">iExt32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n<span class=\"n\">ig</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Inst</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">&quot;sload32&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">&quot;</span>\n<span class=\"s\">    Load 32 bits from memory at ``p + Offset`` and sign-extend.</span>\n\n<span class=\"s\">    This is equivalent to ``load.i32`` followed by ``sextend``.</span>\n<span class=\"s\">    &quot;</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">formats</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">operands_in</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">MemFlags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Offset</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">operands_out</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">can_load</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Only <code>p</code> and <code>a</code> are values. <code>p</code> can be <code>i32</code> or <code>i64</code>, but <code>a</code> can only be <code>i64</code>.</p>\n</blockquote>",
        "id": 199201097,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590780716
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636148942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Using <code>sload.I32</code> in the legalization and moving it to <code>expand</code> fixes it.</p>\n</blockquote>",
        "id": 199201247,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590780784
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-636152094\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 199202106,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590781200
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747#issuecomment-713325072\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>I believe #1794 has fixed but didn't close this issue because of some CI weirdness.</p>\n</blockquote>",
        "id": 214010929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603260087
    },
    {
        "content": "<p>whitequark closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1747\">Issue #1747</a>:</p>\n<blockquote>\n<p>I've minimized a test case that currently fails on 32-bit platforms:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">i686</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1516</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">readonly</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sload32</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>I've tried writing a legalizer for it that would produce the commented instructions but it doesn't do anything (same lack of result for expand, widen, narrow). What gives?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- a/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gi\">+++ b/cranelift/codegen/meta/src/shared/legalize.rs</span>\n<span class=\"gu\">@@ -107,6 +107,7 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     let sdiv_imm = insts.by_name(\"sdiv_imm\");\n     let select = insts.by_name(\"select\");\n     let sextend = insts.by_name(\"sextend\");\n<span class=\"gi\">+    let sload32 = insts.by_name(\"sload32\");</span>\n     let sshr = insts.by_name(\"sshr\");\n     let sshr_imm = insts.by_name(\"sshr_imm\");\n     let srem = insts.by_name(\"srem\");\n<span class=\"gu\">@@ -213,6 +214,14 @@ pub(crate) fn define(insts: &amp;InstructionGroup, imm: &amp;Immediates) -&gt; TransformGro</span>\n     // embedded as part of arguments), so use a custom legalization for now.\n     narrow.custom_legalize(iconst, \"narrow_iconst\");\n\n<span class=\"gi\">+    narrow.legalize(</span>\n<span class=\"gi\">+        def!(a = sload32.I64(flags, ptr, offset)),</span>\n<span class=\"gi\">+        vec![</span>\n<span class=\"gi\">+            def!(b = load.I32(flags, ptr, offset)),</span>\n<span class=\"gi\">+            def!(a = sextend.I64(b)),</span>\n<span class=\"gi\">+        ]</span>\n<span class=\"gi\">+    );</span>\n<span class=\"gi\">+</span>\n     for &amp;(ty, ty_half) in &amp;[(I128, I64), (I64, I32)] {\n         let inst = uextend.bind(ty).bind(ty_half);\n         narrow.legalize(\n</code></pre></div>\n\n</blockquote>",
        "id": 214010930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603260087
    }
]