[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/735#issuecomment-928095969\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/735\">issue #735</a>:</p>\n<blockquote>\n<p>Lightbeam was removed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3390\">https://github.com/bytecodealliance/wasmtime/pull/3390</a> as explained in <a href=\"https://github.com/bytecodealliance/rfcs/pull/14\">RFC 14</a>, so I'm going to close this.</p>\n</blockquote>",
        "id": 255087147,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763762
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/735\">issue #735</a>:</p>\n<blockquote>\n<h1>Issue description</h1>\n<p>A call to <code>assert!</code> make <code>wasmtime</code> to panic (on both backends) when the memory is shared.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ ./target/release/wasmtime assert_mt_failed.wasm\nthread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'assertion failed: !mt.shared'</span>, crates/api/src/module.rs:14:5\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace.\n$ ./target/release/wasmtime --lightbeam assert_mt_failed.wasm\nthread <span class=\"s1\">'main'</span> panicked at <span class=\"s1\">'assertion failed: !mt.shared'</span>, crates/api/src/module.rs:14:5\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace.\n</code></pre></div>\n<p>This issue is related to the following piece of code:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/31472fbb5a6417ea3d9eb10417ff5ea49712998a/crates/api/src/module.rs#L13-L16\">https://github.com/bytecodealliance/wasmtime/blob/31472fbb5a6417ea3d9eb10417ff5ea49712998a/crates/api/src/module.rs#L13-L16</a></p>\n<h1>Reproduction</h1>\n<p>Download <a href=\"https://github.com/bytecodealliance/wasmtime/files/3978091/assert_mt_failed.zip\">assert_mt_failed.zip</a></p>\n<p>or <code> wasm2wat --enable-all assert_mt_failed.wasm</code>:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">memory.grow</span>\n    <span class=\"nb\">i32.load8_u</span>\n    <span class=\"nb\">i64.load8_s</span> <span class=\"k\">offset</span><span class=\"o\">=</span><span class=\"mi\">119</span>\n    <span class=\"nb\">memory.size</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">nop</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">1 1</span> <span class=\"err\">shared</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"w1c\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"get\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">start</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"s2\">\"A\"</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>Note: this testcase can be even more minimized.</p>\n<p>Build wasmtime with lightbeam:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ <span class=\"nv\">RUSTFLAGS</span><span class=\"o\">=</span>-g cargo build --release --features lightbeam\n</code></pre></div>\n<p>wasmtime commit: 31472fbb5a6417ea3d9eb10417ff5ea49712998a</p>\n</blockquote>",
        "id": 255087149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1632763762
    }
]