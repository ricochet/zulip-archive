[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516\">PR #3516</a> from <code>fuzz-unaligned</code> to <code>main</code>:</p>\n<blockquote>\n<p>Alignment on all memory instructions in wasm is currently best-effort<br>\nand not actually required, meaning that whatever wasm actually uses as<br>\nan address should work regardless of whether the address is aligned or<br>\nnot. This is theoretically tested in the fuzzers via<br>\nwasm-smith-generated code, but wasm-smith doesn't today have too too<br>\nhigh of a chance of generating an actual successful load/store.</p>\n<p>This commit adds a new configuration option to the <code>Config</code> generator<br>\nfor fuzzing which forces usage of a custom linear memory implementation<br>\nwhich is backed by Rust's <code>Vec&lt;u8&gt;</code> and forces the base address of<br>\nlinear memory to be off-by-one relative to the base address of the<br>\n<code>Vec&lt;u8&gt;</code> itself. This should theoretically force host addresses to<br>\nalmost always be unaligned, even if wasm addresses are otherwise<br>\naligned.</p>\n<p>The main interesting fuzz coverage here is likely to be in the existing<br>\n<code>differential</code> target which compares running the same module in wasmtime<br>\nwith two different <code>Config</code> values to ensure the same results are<br>\nproduced. This probably won't increase coverage all that much in the<br>\nnear future due to wasm-smith rarely generating successful loads/stores,<br>\nbut in the meantime by hooking this up into <code>Config</code> it also means that<br>\nwe'll be running in comparison against v8 and also ensuring that all<br>\nspec tests succeed if misalignment is forced at the hardware level.</p>\n<p>As a side effect this commit also cleans up the fuzzers slightly:</p>\n<ul>\n<li>The <code>DifferentialConfig</code> struct is removed and folded into <code>Config</code></li>\n<li>\n<p>The <code>init_hang_limit</code> processing is removed since we don't use<br>\n<code>-ttf</code>-generated modules from binaryen any more.</p>\n</li>\n<li>\n<p>Traps are now asserted to have the same trap code, otherwise<br>\n  differential fuzzing fails.</p>\n</li>\n<li>\n<p>Some more debug logging was added to the differential fuzzer</p>\n</li>\n</ul>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 261186558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636666192
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516\">PR #3516</a>.</p>",
        "id": 261186856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636666421
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804270491\">PR review</a>.</p>",
        "id": 261191785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636670140
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804270491\">PR review</a>.</p>",
        "id": 261191786,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636670140
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747858897\">PR review comment</a>:</p>\n<blockquote>\n<p>There is an interesting question here: do we need to _always_ pessimize (simd) loads/stores to work with unaligned memory?</p>\n<p>Ideally, we would have a fast path and a slow path, emit the fast path when the Wasm says it is correctly aligned, and the slow path otherwise. The fast path would then have a fallback (probably via signal handlers) if the load/store wasn't actually aligned, like the Wasm said it would be.</p>\n<p>However, if the memory itself is unaligned, then the \"aligned\" loads/stores in Wasm are unaligned at the native level, meaning we would always hit the fast path's fallback, which is presumably even worse than just using slow path loads/stores.</p>\n<p>So allowing unaligned memories potentially invalidates our speculative fast paths for loads/stores. I guess that is fine, because no one should ever give us unaligned memories in practice?</p>\n</blockquote>",
        "id": 261191787,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636670140
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804284655\">PR review</a>.</p>",
        "id": 261193726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636671591
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747870755\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a good question! In practice, at least on modern x86 cores, unaligned SSE loads have the same performance as aligned ones (zero penalty on Haswell and later, IIRC, which is the 2013 core); and on earlier cores, IIRC, it split into two uops (or two issues of one uop, I don't remember), so at worst it costs \"one extra ALU instruction\". An alignment check is at least that (AND rAddr, 1/3/7/15) and a conditional branch; the branch doesn't enter the BTB if never taken, but still costs fetch bandwidth. So I think it's always better to use aligned loads/stores (<code>movups</code> rather than <code>movaps</code>) unconditionally.</p>\n<p>I'm not sure about aarch64; maybe @akirilov-arm or @sparker-arm can say more? I suspect at least on some smaller cores it might be an interesting question.</p>\n</blockquote>",
        "id": 261193727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636671591
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804287964\">PR review</a>.</p>",
        "id": 261194337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636672011
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747873362\">PR review comment</a>:</p>\n<blockquote>\n<p>Alex mentioned that he saw crashes on the aarch64 machine with this change, so I assume it is something we can't rely on modern x86 behavior with.</p>\n</blockquote>",
        "id": 261194338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636672012
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804288109\">PR review</a>.</p>",
        "id": 261194354,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636672031
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747873461\">PR review comment</a>:</p>\n<blockquote>\n<p>(I'll let him provide more details)</p>\n</blockquote>",
        "id": 261194355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636672031
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804292475\">PR review</a>.</p>",
        "id": 261195037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636672603
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747877084\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I've always been under the impression that unaligned things are \"just as fast\" nowadays and the overhead and angst of correctly implementing \"fixup the operation in a signal handler\" is quite far from being worth it.</p>\n<p>To clarify though I haven't seen any new actual crashes with this fuzzer. I ran locally for a bit with simd enable on both x64 and aarch64 but no crashes that were interesting (just bugs in me writing this new fuzz stuff).</p>\n<p>My main goal of this sort of fuzzer is to weed out codegen issues like <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2943\">https://github.com/bytecodealliance/wasmtime/issues/2943</a> with more regularity.</p>\n</blockquote>",
        "id": 261195038,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636672603
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804302642\">PR review</a>.</p>",
        "id": 261196494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636674053
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747885947\">PR review comment</a>:</p>\n<blockquote>\n<p>I just read a bit more about this and it seems that aarch64 does indeed support unaligned vector loads as well, architecturally (and tested just now with a little asm on my RPi4 doing a <code>LDR qN, [xN]</code> with a pointer ending in <code>...1</code>). I think for simplicity I'd prefer to avoid the two-path solution here, as (on thinking through implications to codegen a bit more) a CFG diamond at every load/store would (i) significantly increase code size, (ii) slow down any CFG-sensitive analyses, e.g. liveness and branch splitting in regalloc, and (iii) most likely add measurable runtime overhead. We can definitely think about this more if we have to support an architecture that forces us into this, IMHO...</p>\n</blockquote>",
        "id": 261196495,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636674053
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r747890740\">PR review comment</a>:</p>\n<blockquote>\n<p>I was imagining we wouldn’t actually emit code to do checks (so no cfg diamond), just catch unaligned access faults in signal handlers and then jump to slow path stubs from there, but it seems I misunderstood Alex and we don’t actually even support any architectures where this is an issue, so I think we can continue ignoring it for now.</p>\n</blockquote>",
        "id": 261197388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636674889
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-804308206\">PR review</a>.</p>",
        "id": 261197398,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636674896
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516\">PR #3516</a>.</p>",
        "id": 261502761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636986265
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-806352487\">PR review</a>.</p>",
        "id": 261529427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636996971
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r749534739\">PR review comment</a>:</p>\n<blockquote>\n<p>As @cfallin said, support for unaligned data accesses (not instruction fetches) to normal memory is required by the 64-bit Arm architecture and can be toggled at runtime by privileged software (e.g. the operating system kernel), but in practice all environments we target enable it; in fact, some functionality in the system libraries like <code>memcpy()</code> may rely on it. Vector operations are not an exception, though we could use the structure load <code>LD1</code>, for instance, which requires alignment on the element size (not the vector size). As for performance, it depends on the particular implementation, but usually there is no penalty unless the access crosses a coarser-grained boundary such as 16 or 64 bytes.</p>\n<p>There is one major exception to this rule - atomic and exclusive operations. Would this fuzz mode be applied to code that uses the Wasm threads proposal (which I think is the only case that would result in the generation of those instructions)?</p>\n</blockquote>",
        "id": 261529429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636996972
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-806375832\">PR review</a>.</p>",
        "id": 261533173,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636998371
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r749551859\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yeah my assumption was that we would disable this mode of fuzzing once the threads proposal was implemented. I agree that I don't think we can get away with misaligning the host memory once atomics come into play.</p>\n</blockquote>",
        "id": 261533174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1636998371
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#pullrequestreview-806425030\">PR review</a>.</p>",
        "id": 261540655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637001656
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3516#discussion_r749588528\">PR review comment</a>:</p>\n<blockquote>\n<p>(Or we could just make sure that we never combine threads and unaligned memories in the fuzzer, rather than disabling it entirely.)</p>\n</blockquote>",
        "id": 261540656,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1637001656
    }
]