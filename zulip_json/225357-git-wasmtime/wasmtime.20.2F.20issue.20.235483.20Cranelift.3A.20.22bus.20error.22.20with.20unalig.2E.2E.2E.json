[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5483\">issue #5483</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Fuzzgen found this on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">atomic_store</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<p>This test does not crash in QEMU, only in a real AArch64 machine.</p>\n<h3>Expected Results</h3>\n<p>I would expect this to either pass or fail to compile. According to the docs, the instruction should not be allowed to trap, since it does not have the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/struct.MemFlags.html#method.aligned\"><code>aligned</code> flag</a>.</p>\n<blockquote>\n<p>By default, Cranelift memory instructions work with any unaligned effective address. If the aligned flag is set, the instruction is permitted to trap or return a wrong result if the effective address is misaligned.</p>\n</blockquote>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">instance</span><span class=\"o\">-</span><span class=\"mi\">20220805</span><span class=\"o\">-</span><span class=\"mi\">0848</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.16</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">ubuntu</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Bus</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Linux<br>\nArchitecture: AArch64</p>\n<h3>Extra Info</h3>\n<p>Maybe we should restrict the current lowering to only if the <code>aligned</code> flag is present?<br>\n</p>\n</blockquote>",
        "id": 317036020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671568817
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5483\">issue #5483</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Fuzzgen found this on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">atomic_store</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<p>This test does not crash in QEMU, only in a real AArch64 machine.</p>\n<h3>Expected Results</h3>\n<p>I would expect this to either pass or fail to compile. According to the docs, the instruction should not be allowed to trap, since it does not have the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/struct.MemFlags.html#method.aligned\"><code>aligned</code> flag</a>.</p>\n<blockquote>\n<p>By default, Cranelift memory instructions work with any unaligned effective address. If the aligned flag is set, the instruction is permitted to trap or return a wrong result if the effective address is misaligned.</p>\n</blockquote>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">instance</span><span class=\"o\">-</span><span class=\"mi\">20220805</span><span class=\"o\">-</span><span class=\"mi\">0848</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.16</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">ubuntu</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Bus</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Linux<br>\nArchitecture: AArch64</p>\n<h3>Extra Info</h3>\n<p>Maybe we should restrict the current lowering to only if the <code>aligned</code> flag is present?<br>\n</p>\n</blockquote>",
        "id": 317036022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671568817
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5483\">issue #5483</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Fuzzgen found this on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">atomic_store</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<p>This test does not crash in QEMU, only in a real AArch64 machine.</p>\n<h3>Expected Results</h3>\n<p>I would expect this to either pass or fail to compile. According to the docs, the instruction should not be allowed to trap, since it does not have the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/struct.MemFlags.html#method.aligned\"><code>aligned</code> flag</a>.</p>\n<blockquote>\n<p>By default, Cranelift memory instructions work with any unaligned effective address. If the aligned flag is set, the instruction is permitted to trap or return a wrong result if the effective address is misaligned.</p>\n</blockquote>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">instance</span><span class=\"o\">-</span><span class=\"mi\">20220805</span><span class=\"o\">-</span><span class=\"mi\">0848</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.16</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">ubuntu</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Bus</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Linux<br>\nArchitecture: AArch64</p>\n<h3>Extra Info</h3>\n<p>Maybe we should restrict the current lowering to only if the <code>aligned</code> flag is present?<br>\n</p>\n</blockquote>",
        "id": 317036023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1671568818
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5483#issuecomment-1386169026\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5483\">issue #5483</a>:</p>\n<blockquote>\n<blockquote>\n<p>Maybe we should restrict the current lowering to only if the aligned flag is present?</p>\n</blockquote>\n<p>I think that's the most reasonable fix, yeah; and correspondingly, add the <code>aligned</code> flag when generating these instructions from Wasm atomic ops in <code>cranelift-wasm</code>, as we guarantee that the heap is aligned with the built-in allocators and I believe the Wasm ops require the address to be naturally aligned wrt the heap base. Support for atomic ops in CLIF without <code>aligned</code> is then machine-dependent: x86 has them, most other architectures probably don't.</p>\n</blockquote>",
        "id": 321937937,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1673994484
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5483\">issue #5483</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Fuzzgen found this on AArch64.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">14</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">atomic_store</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<p>This test does not crash in QEMU, only in a real AArch64 machine.</p>\n<h3>Expected Results</h3>\n<p>I would expect this to either pass or fail to compile. According to the docs, the instruction should not be allowed to trap, since it does not have the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/struct.MemFlags.html#method.aligned\"><code>aligned</code> flag</a>.</p>\n<blockquote>\n<p>By default, Cranelift memory instructions work with any unaligned effective address. If the aligned flag is set, the instruction is permitted to trap or return a wrong result if the effective address is misaligned.</p>\n</blockquote>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">instance</span><span class=\"o\">-</span><span class=\"mi\">20220805</span><span class=\"o\">-</span><span class=\"mi\">0848</span>:<span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.16</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">ubuntu</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"n\">Bus</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">dumped</span><span class=\"p\">)</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: Linux<br>\nArchitecture: AArch64</p>\n<h3>Extra Info</h3>\n<p>Maybe we should restrict the current lowering to only if the <code>aligned</code> flag is present?<br>\n</p>\n</blockquote>",
        "id": 338045267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677349526
    }
]