[
    {
        "content": "<p>lann opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new <code>Engine::serialization_compatibility_hash</code> method that returns a hash of the \"compiler info\" appended to precompiled Wasm binaries.</p>\n<h4>Benefit</h4>\n<p>This would allow precompiled Wasm from multiple configurations/versions of Wasmtime to be safely and efficiently stored together. This may still be a little pessimistic compared with Wasmtime's actual compatibility checks but would be better than the conservative approach of only reusing precompiled binaries on a single host.</p>\n<h4>Implementation</h4>\n<p>Extract the following section from <code>append_compiler_info</code> and reuse it to compute a sha-256 digest of the \"compiler info\": <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64\">https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64</a></p>\n<h4>Alternatives</h4>\n<ul>\n<li>There is some overlap between the features this would be used for and Wasmtime's cache system, but the cache system is currently somewhat opaque and difficult to reason about wrt shared storage and performance characteristics.</li>\n<li>This could be done today without changes to Wasmtime by precompiling a dummy module and hashing its <code>.wasmtime.engine</code> section, which seems fragile.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3900\">https://github.com/bytecodealliance/wasmtime/issues/3900</a> suggests splitting out compatibility data into a separate structure, which appears to require a larger effort.</li>\n</ul>\n</blockquote>",
        "id": 328274462,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676563201
    },
    {
        "content": "<p>lann edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new <code>Engine::serialization_compatibility_hash</code> method that returns a hash of the \"compiler info\" appended to precompiled Wasm binaries.</p>\n<h4>Benefit</h4>\n<p>This would allow precompiled Wasm from multiple configurations/versions of Wasmtime to be safely and efficiently stored together by, for example, keying its storage on <code>(Hash(wasm), serialization_compat_hash)</code>.  This may still be a little pessimistic compared with Wasmtime's actual compatibility checks but would be better than the conservative approach of only reusing precompiled binaries on a single host.</p>\n<h4>Implementation</h4>\n<p>Extract the following section from <code>append_compiler_info</code> and reuse it to compute a sha-256 digest of the \"compiler info\": <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64\">https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64</a></p>\n<h4>Alternatives</h4>\n<ul>\n<li>There is some overlap between the features this would be used for and Wasmtime's cache system, but the cache system is currently somewhat opaque and difficult to reason about wrt shared storage and performance characteristics.</li>\n<li>This could be done today without changes to Wasmtime by precompiling a dummy module and hashing its <code>.wasmtime.engine</code> section, which seems fragile.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3900\">https://github.com/bytecodealliance/wasmtime/issues/3900</a> suggests splitting out compatibility data into a separate structure, which appears to require a larger effort.</li>\n</ul>\n</blockquote>",
        "id": 328274967,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676563321
    },
    {
        "content": "<p>lann edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new <code>Engine::serialization_compatibility_hash</code> method that returns a hash of the \"compiler info\" appended to precompiled Wasm binaries.</p>\n<h4>Benefit</h4>\n<p>This would allow precompiled Wasm from multiple configurations/versions of Wasmtime to be safely and efficiently stored together by, for example, keying its storage on <code>(Hash(wasm), serialization_compat_hash)</code>.  This may still be a little pessimistic compared with Wasmtime's actual compatibility checks but would be better than the conservative approach of only reusing precompiled binaries on a single host.</p>\n<h4>Implementation</h4>\n<p>Extract the following section from <code>append_compiler_info</code> and reuse it to compute a sha-256 digest of the \"compiler info\": <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64\">https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64</a></p>\n<h4>Alternatives</h4>\n<ul>\n<li>There is some overlap between the features this would be used for and Wasmtime's cache system, but the cache system is currently somewhat opaque and difficult to reason about wrt shared storage and the cache \"worker\"'s performance characteristics.</li>\n<li>This could be done today without changes to Wasmtime by precompiling a dummy module and hashing its <code>.wasmtime.engine</code> section, which seems fragile.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3900\">https://github.com/bytecodealliance/wasmtime/issues/3900</a> suggests splitting out compatibility data into a separate structure, which appears to require a larger effort.</li>\n</ul>\n</blockquote>",
        "id": 328275200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676563374
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1434788748\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>One alternative idea for this would be to implement <code>Hash</code> and <code>Eq</code> for the <code>Config</code> type perhaps. That's more-or-less what the blob here is but would be a bit less specific to the current serialization strategy.</p>\n</blockquote>",
        "id": 328494306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676646924
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1434835480\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<blockquote>\n<p>implement Hash and Eq for the Config</p>\n</blockquote>\n<p>That seems like it could work, though it would be a little more pessimistic compatibility-wise for settings that don't affect compilation or if a rustc update changes <code>Hash</code> (rare I assume).</p>\n<p>One notable oddity is that we'd need to special-case <code>Config::module_version</code>'s <code>WasmtimeVersion</code> to mix in <code>CARGO_PKG_VERSION</code> somewhere.</p>\n<p>Would this be documented behavior of <code>impl Hash for Config</code>? Is it reasonable to assume that <code>Config</code> will continue to cover everything used in compatibility checks?</p>\n</blockquote>",
        "id": 328503012,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676649106
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1434976220\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>That's true, yeah. I'm mostly thinking that I'd prefee to not bake in sha256 or something like that but to expose this through <code>Hash</code> and <code>Eq</code> if possible (in case anyone wants strict-equality as well instead of just hash-equality). One possibility would be something like <code>Engine::cache_key(&amp;self) -&gt; impl Hash + Eq</code> instead of returning the sha256 hash itself as well. We could then change the <code>serialization.rs</code> to use this directly to ensure nothing regresses as well perhaps.</p>\n</blockquote>",
        "id": 328524396,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676654676
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1434987519\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>What about <code>Engine::cache_key(&amp;self) -&gt; impl AsRef&lt;[u8]&gt;</code>? </p>\n</blockquote>",
        "id": 328525401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676654963
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1434987519\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>The semantics of <code>Hash</code> just don't seem quite right for this use. You can get a <code>u64</code> out of it for indexing but you wouldn't really use this key in a HashMap.</p>\n<p>What about <code>Engine::cache_key(&amp;self) -&gt; impl AsRef&lt;[u8]&gt;</code>?</p>\n</blockquote>",
        "id": 328526203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676655189
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1434987519\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>The semantics of <code>Hash</code> just don't seem quite right for this. You can get a <code>u64</code> out of it for indexing but you wouldn't really use this key in a HashMap.</p>\n<p>What about <code>Engine::cache_key(&amp;self) -&gt; impl AsRef&lt;[u8]&gt;</code>?</p>\n</blockquote>",
        "id": 328526264,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676655201
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1435001747\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>I suppose that's probably the only reasonable thing to implement in the short term. I'm hesitant to have something that feels so specific here, but if it solves a use case for y'all and it's already used elsewhere it shouldn't really increase maintenance burden at all.</p>\n</blockquote>",
        "id": 328526474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676655261
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1435008441\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>Yeah, I actually think <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3900\">https://github.com/bytecodealliance/wasmtime/issues/3900</a> would be a more generally-useful approach but I don't think I have the context/time to tackle it myself. I'm not actually opposed to the \"build a dummy module and read out the compiler info\" hack as a short term workaround but I wouldn't want to rely on it for very long.</p>\n</blockquote>",
        "id": 328527578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676655569
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1435008441\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>Yeah, I actually think <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3900\">https://github.com/bytecodealliance/wasmtime/issues/3900</a> (if exposed publicly) would be a more generally-useful approach but I don't think I have the context/time to tackle it myself. I'm not actually opposed to the \"build a dummy module and read out the compiler info\" hack as a short term workaround but I wouldn't want to rely on it for very long.</p>\n</blockquote>",
        "id": 328527668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676655599
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802#issuecomment-1435237594\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<p>Nah it's much easier to \"just\" add a method to <code>Engine</code> to expose that section rather than harvesting it yourself, so I think that's ok to add.</p>\n</blockquote>",
        "id": 328558349,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676666004
    },
    {
        "content": "<p>jameysharp closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5802\">issue #5802</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Add a new <code>Engine::serialization_compatibility_hash</code> method that returns a hash of the \"compiler info\" appended to precompiled Wasm binaries.</p>\n<h4>Benefit</h4>\n<p>This would allow precompiled Wasm from multiple configurations/versions of Wasmtime to be safely and efficiently stored together by, for example, keying its storage on <code>(Hash(wasm), serialization_compat_hash)</code>.  This may still be a little pessimistic compared with Wasmtime's actual compatibility checks but would be better than the conservative approach of only reusing precompiled binaries on a single host.</p>\n<h4>Implementation</h4>\n<p>Extract the following section from <code>append_compiler_info</code> and reuse it to compute a sha-256 digest of the \"compiler info\": <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64\">https://github.com/bytecodealliance/wasmtime/blob/c3c16eb207eccd895f5fbbc4b771bd74ea36d071/crates/wasmtime/src/engine/serialization.rs#L50-L64</a></p>\n<h4>Alternatives</h4>\n<ul>\n<li>There is some overlap between the features this would be used for and Wasmtime's cache system, but the cache system is currently somewhat opaque and difficult to reason about wrt shared storage and the cache \"worker\"'s performance characteristics.</li>\n<li>This could be done today without changes to Wasmtime by precompiling a dummy module and hashing its <code>.wasmtime.engine</code> section, which seems fragile.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3900\">https://github.com/bytecodealliance/wasmtime/issues/3900</a> suggests splitting out compatibility data into a separate structure, which appears to require a larger effort.</li>\n</ul>\n</blockquote>",
        "id": 350893024,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681855708
    }
]