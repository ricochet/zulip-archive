[
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654486011\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>@iximeow the gist of the problem is that a \"frame pointer\" in Win64 unwind information should point at the base of the static part of the local frame and <em>not</em> what we discussed earlier when you originally implemented the FPR saves for Windows; that being a \"normal\" frame pointer with the unwind information describing how to offset it to get that base address for unwinding only.</p>\n<p>Windows actually expects the \"frame pointer\" to be offset from RSP when established and Cranelift doesn't do that.  To eliminate the potential for confusion regarding what a \"frame pointer\" is, I've opted to simply remove encoding the \"set frame pointer\" unwind code in the unwind information for now.  In the future, if we ever need to support dynamically sized frames, we can add it back in the right way (i.e. the frame pointer offset should be discovered via the establishing instruction and not based on the register saves).</p>\n</blockquote>",
        "id": 203045555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594072646
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654488172\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 203046136,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594073010
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654546471\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>That's correct.  Windows doesn't need a traditional frame pointer at all to figure out where the frame starts because every function that modifies the SP, in any way, must have unwind information that describes the adjustments.  For frames that can't describe that adjustment statically (e.g. a call to <code>alloca</code>), there must be a register that points at what RSP would be <em>post</em> statically-known adjustment (i.e. <code>lea rbp, [rsp-static_frame_size]</code> or <code>sub rsp, static_frame_size; mov rbp, rsp</code>).  This is what the Windows x64 unwind information considers a \"frame pointer\".  The FPR saves are always a positive offset from this frame pointer if there is one.</p>\n<p>We were calculating the \"frame pointer\" and describing it correctly in the unwind information, but Cranelift establishes the frame pointer as one would one expect: always using the start (highest address) of the local frame.</p>\n<p>I thought that the Windows unwind information <em>also</em> expected this traditional notion of frame pointer and the encoded offset would be <em>subtracted</em> from the frame pointer during unwinding to determine the base address that FPR saves are relative to.  Instead it was actually the opposite: the unwinder would <em>add</em> the offset to the frame pointer to find the top of the frame.  This obviously caused bad stack walks during unwind, not to mention it restored the saved FPRs from the wrong addresses as well.</p>\n</blockquote>",
        "id": 203059463,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594085511
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654549292\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>I just noticed a subtle bug in how we're encoding <code>SaveXmm128Far</code> too: the offset should be an unscaled 32-bit value but we're accidentally scaling down by 16.  It would require a stack allocation of 1+ MiB (coincidentally, the default stack size for Windows is 1 MiB) for a function with FPR saves to encounter, though.  I'll push up a fix for that.</p>\n<p>I'll push up a fix.</p>\n</blockquote>",
        "id": 203060003,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594086192
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654549292\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>I just noticed a subtle bug in how we're encoding <code>SaveXmm128Far</code> too: the offset should be an unscaled 32-bit value but we're accidentally scaling down by 16.  It would require a stack allocation of 1+ MiB (coincidentally, the default stack size for Windows is 1 MiB) for a function with FPR saves to encounter, though.</p>\n<p>I'll push up a fix.</p>\n</blockquote>",
        "id": 203060217,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594086447
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654549292\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>I just noticed a subtle bug in how we're encoding <code>SaveXmm128Far</code> too: the offset should be an unscaled 32-bit value but we're accidentally scaling down by 16.  It would require a stack allocation of 1+ MiB (coincidentally, the default stack size for Windows is 1 MiB) for a function to encounter, though.</p>\n<p>I'll push up a fix.</p>\n</blockquote>",
        "id": 203060574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594086884
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654552466\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>@iximeow does the commit I just push up make sense?</p>\n</blockquote>",
        "id": 203060602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594086930
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654552466\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>@iximeow does the commit I just pushed up make sense?</p>\n</blockquote>",
        "id": 203060608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594086939
    },
    {
        "content": "<p>peterhuene edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654552466\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>@iximeow does the commit (b1c7c1401ef8948aeb311f23b6bdd8d62fbedc6a) I just pushed up make sense?</p>\n</blockquote>",
        "id": 203060994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594087445
    },
    {
        "content": "<p>whitequark <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654576180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>That was an impressively fast fix for such a complex issue! Thanks everyone.</p>\n</blockquote>",
        "id": 203063814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594092274
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-654580551\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<blockquote>\n<p>@iximeow does the commit (b1c7c14) I just pushed up make sense?</p>\n</blockquote>\n<p>Yep! This all looks great.</p>\n</blockquote>",
        "id": 203064365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594093336
    },
    {
        "content": "<p>nevercast <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983#issuecomment-655168637\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1983\">Issue #1983</a>:</p>\n<blockquote>\n<p>Pure speed! Thanks heaps for getting this in main so quick!</p>\n</blockquote>",
        "id": 203211042,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594160769
    }
]