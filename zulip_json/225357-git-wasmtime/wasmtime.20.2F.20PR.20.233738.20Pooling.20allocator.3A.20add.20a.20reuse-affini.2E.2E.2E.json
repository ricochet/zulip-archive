[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>:</p>\n<blockquote>\n<p>(Builds on #3697.)</p>\n<p>This policy attempts to reuse the same instance slot for subsequent                                                                                                                           <br>\ninstantiations of the same module. This is particularly useful when                                                                                                                           <br>\nusing a pooling backend such as memfd that benefits from this reuse: for                                                                                                                      <br>\nexample, in the memfd case, instantiating the same module into the same                                                                                                                       <br>\nslot allows us to avoid several calls to mmap() because the same                                                                                                                              <br>\nmappings can be reused.                                                                                                                                                                       </p>\n<p>The policy tracks a freelist per \"compiled module ID\", and when                                                                                                                               <br>\nallocating a slot for an instance, tries these three options in order:                                                                                                                        </p>\n<ol>\n<li>\n<p>A slot from the freelist for this module (i.e., last used for another                                                                                                                      <br>\n   instantiation of this particular module);                                                                                                                                                  </p>\n</li>\n<li>\n<p>A slot that has never been used before; or                                                                                                                                                 </p>\n</li>\n<li>A slot that was last used by some other module.                                                                                                                                            </li>\n</ol>\n<p>The \"victim\" module for choice 3 is randomly chosen, to avoid biases due                                                                                                                      <br>\nto the hashmap's ordering (which would be persistent across the lifetime                                                                                                                      <br>\nof the pooling allocator).                                                                                                                                                                    </p>\n<p>This policy is now the default when the memfd backend is selected via                                                                                                                         <br>\nthe <code>memfd-allocator</code> feature flag.     </p>\n</blockquote>",
        "id": 269699326,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643357058
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a>.</p>",
        "id": 269699327,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643357058
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-866714870\">PR review</a>.</p>",
        "id": 269803797,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643404674
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-866714870\">PR review</a>.</p>",
        "id": 269803798,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643404674
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r794893304\">PR review comment</a>:</p>\n<blockquote>\n<p>Why not change <code>CompiledModuleId</code> to be a newtype around <code>NonZeroU64</code> and then we can use plain <code>Option</code> and <code>None</code> without pessimizing size, instead of having our own custom sentinel that we can forget to check for?</p>\n</blockquote>",
        "id": 269803799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643404675
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r794895029\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, this is an existing issue (introduced in the memfd PR?) that is maybe going to become worse with these changes, but we use a relaxed ordering in the <code>fetch_add</code> when allocating new <code>CompiledModuleId</code>s below -- it seems like this could be a problem on non-x86?</p>\n</blockquote>",
        "id": 269803800,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643404675
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r794906569\">PR review comment</a>:</p>\n<blockquote>\n<p>Re: relaxed ordering, that's fine -- all that means is that the atomic ID-allocation event is not synchronized with respect to any other loads/stores in the system (there are no fences). But the fetch-add itself is still an atomic action, with some linear ordering amongst the other accesses to the \"next ID\" atomic. That's sufficient for the invariants we need: we just need unique IDs for each module, we don't care what they are.</p>\n<p>(Good idea wrt <code>NonZeroU64</code>; I'll make that change!)</p>\n</blockquote>",
        "id": 269806510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643406018
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-866733546\">PR review</a>.</p>",
        "id": 269806511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643406018
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-866735135\">PR review</a>.</p>",
        "id": 269806744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643406155
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r794907745\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah yes, I didn't think about how the <code>fetch_add</code> itself was still atomic. Thanks!</p>\n</blockquote>",
        "id": 269806745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643406156
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269809865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643407859
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269821671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643414915
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269822291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643415328
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269827490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643419478
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>:</p>\n<blockquote>\n<p>(Builds on #3697.)</p>\n<p>This policy attempts to reuse the same instance slot for subsequent<br>\ninstantiations of the same module. This is particularly useful when<br>\nusing a pooling backend such as memfd that benefits from this reuse: for<br>\nexample, in the memfd case, instantiating the same module into the same<br>\nslot allows us to avoid several calls to mmap() because the same<br>\nmappings can be reused.</p>\n<p>The policy tracks a freelist per \"compiled module ID\", and when<br>\nallocating a slot for an instance, tries these three options in order:</p>\n<ol>\n<li>\n<p>A slot from the freelist for this module (i.e., last used for another<br>\n   instantiation of this particular module), or</p>\n</li>\n<li>\n<p>A slot that was last used by some other module or never before.</p>\n</li>\n</ol>\n<p>The \"victim\" slot for choice 2 is randomly chosen.</p>\n<p>The data structures are carefully designed so that all updates are O(1),<br>\nand there is no retry-loop in any of the random selection.</p>\n<p>This policy is now the default when the memfd backend is selected via<br>\nthe <code>memfd-allocator</code> feature flag.<br>\n</p>\n</blockquote>",
        "id": 269827532,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643419525
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269827788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643419753
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269828375,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643420313
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269830008,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643422057
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 269834299,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643426872
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>:</p>\n<blockquote>\n<p>(Builds on #3697.)</p>\n<p>This policy attempts to reuse the same instance slot for subsequent<br>\ninstantiations of the same module. This is particularly useful when<br>\nusing a pooling backend such as memfd that benefits from this reuse: for<br>\nexample, in the memfd case, instantiating the same module into the same<br>\nslot allows us to avoid several calls to mmap() because the same<br>\nmappings can be reused.</p>\n<p>The policy tracks a freelist per \"compiled module ID\", and when<br>\nallocating a slot for an instance, tries these two options in order:</p>\n<ol>\n<li>\n<p>A slot from the freelist for this module (i.e., last used for another<br>\n   instantiation of this particular module), or</p>\n</li>\n<li>\n<p>A slot that was last used by some other module or never before.</p>\n</li>\n</ol>\n<p>The \"victim\" slot for choice 2 is randomly chosen.</p>\n<p>The data structures are carefully designed so that all updates are O(1),<br>\nand there is no retry-loop in any of the random selection.</p>\n<p>This policy is now the default when the memfd backend is selected via<br>\nthe <code>memfd-allocator</code> feature flag.<br>\n</p>\n</blockquote>",
        "id": 270071889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643650679
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270072587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643650907
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868165370\">PR review</a>.</p>",
        "id": 270075065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651793
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868165370\">PR review</a>.</p>",
        "id": 270075067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795888181\">PR review comment</a>:</p>\n<blockquote>\n<p>This is <em>all</em> slot indices that are free, right? That is, an invariant of this code is that every free slot index is always in this list, right?</p>\n<p>If my understanding is correct, then I think it makes sense to clarify this comment as such.</p>\n</blockquote>",
        "id": 270075068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795897665\">PR review comment</a>:</p>\n<blockquote>\n<p>All of the methods on <code>SlotState</code> panic if the <code>SlotState</code> is <code>Taken</code>. What do you think of refactoring <code>SlotState</code> to look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">SlotState</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Taken</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Free</span><span class=\"p\">(</span><span class=\"n\">FreeSlotState</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">SlotState</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Do the expected matching where `Taken` returns `None` here...</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_free_slot</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">FreeSlotState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_free_slot_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FreeSlotState</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">FreeSlotState</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Empty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Affinity</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FreeSlotState</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// all the methods above, which don't need to have panicking paths anymore</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This way we can consolidate all the is-this-a-taken-slot checking into a single <code>slot_state[i].as_free_slot().expect(\"blah blah blah\")</code> call, our types give us guarantees about their data, and potential panics aren't hidden behind method calls.</p>\n</blockquote>",
        "id": 270075069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795905658\">PR review comment</a>:</p>\n<blockquote>\n<p>Is the idea that as <code>Module</code>s get dropped, we don't need to actively empty the <code>per_module</code> free lists, because they will eventually get stolen by other instance allocations, and once the dropped module's free list is empty, it is removed from the <code>per_module</code> free lists? I think this would be good to test somehow, since it seems like an easy memory leak if we mess this up. Also, it seems like it would be good to document in a comment somewhere.</p>\n</blockquote>",
        "id": 270075070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795903689\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">per_module</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">per_module</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">id</span><span class=\"p\">).</span><span class=\"n\">is_empty</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>\n<p>at the start of this function?</p>\n</blockquote>",
        "id": 270075071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795908537\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: maybe name this <code>remove_global_free_list_item</code> to clarify the difference between this and <code>remove_module_free_list_item</code>?</p>\n<p>Ditto about freeling like a free function.</p>\n</blockquote>",
        "id": 270075073,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795901428\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: sort of feels like this should be a free function.</p>\n</blockquote>",
        "id": 270075075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795918667\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a very helpful comment, thanks for writing this!</p>\n</blockquote>",
        "id": 270075076,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795920315\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the <code>id</code> is unnecessary here, and we can recover this from the <code>slot_state[index]</code>, if it exists? If so, removing <code>id</code> would help move us towards a single source of truth with fewer things that can get misaligned and out of sync, and would allow us to clean up slots that have a module affinity even when callers forgot to pass a module id here.</p>\n</blockquote>",
        "id": 270075077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795916660\">PR review comment</a>:</p>\n<blockquote>\n<p>It would be nice to have a newtype for slot indices (<code>SlotId</code>?) too.</p>\n<p><code>new_id</code> threw me for a little bit of a loop, and made me double check that this wasn't a <code>CompiledModuleId</code> and was actually a slot index, which is what I expected it to be, but just the naming made me doubt myself enough that I had to double check.</p>\n</blockquote>",
        "id": 270075078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795921319\">PR review comment</a>:</p>\n<blockquote>\n<p>Nitpick: we know we are going to insert into this new vec so we can do <code>.or_insert_with(|| Vec::with_capacity(1))</code> here.</p>\n</blockquote>",
        "id": 270075079,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795923029\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah so calling <code>free</code> without an <code>id</code> will create new <code>SlotState::Empty</code>s which goes against that steady-state comment above (ignoring a global analysis of all <code>free</code> callers). So yeah I think removing the <code>id</code> param would be nice if we can, since it also helps make it easier to verify statements about the correctness of this system.</p>\n</blockquote>",
        "id": 270075080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795899340\">PR review comment</a>:</p>\n<blockquote>\n<p>Could also have <code>SlotState::unwrap_free_slot[_mut]</code> methods to avoid the <code>exepect</code> at every call site, but still have the potential panics \"visible\" to callers.</p>\n</blockquote>",
        "id": 270075081,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r795917079\">PR review comment</a>:</p>\n<blockquote>\n<p>and/or we could <code>s/new_id/slot_index/</code> here</p>\n</blockquote>",
        "id": 270075082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643651794
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270112715,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643666631
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270118297,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668791
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868498946\">PR review</a>.</p>",
        "id": 270118310,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668799
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796123117\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, clarified, thanks!</p>\n</blockquote>",
        "id": 270118311,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668800
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868499497\">PR review</a>.</p>",
        "id": 270118429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668843
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796123562\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, I refactored along these lines (and took the route of panic'ing in the as_free accessors). Good idea, thanks!</p>\n</blockquote>",
        "id": 270118430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668843
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868499593\">PR review</a>.</p>",
        "id": 270118441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668852
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796123636\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, exactly; a slot's affinity remains until the slot is overwritten (reused for a different module). Extended the doc-comment, and added some testing for the keys of this hashmap (and that its values are non-empty lists) as well.</p>\n</blockquote>",
        "id": 270118442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668852
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868499759\">PR review</a>.</p>",
        "id": 270118472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668865
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796123752\">PR review comment</a>:</p>\n<blockquote>\n<p>Yup, done on both.</p>\n</blockquote>",
        "id": 270118473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668865
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868500123\">PR review</a>.</p>",
        "id": 270118510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668894
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796124034\">PR review comment</a>:</p>\n<blockquote>\n<p>I newtyped All The Things (<code>SlotId</code>, <code>GlobalFreeListIndex</code>, <code>PerModuleFreeListIndex</code>); hopefully this is better!</p>\n</blockquote>",
        "id": 270118511,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668894
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868500239\">PR review</a>.</p>",
        "id": 270118524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668904
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796124119\">PR review comment</a>:</p>\n<blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 270118525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668905
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868500454\">PR review</a>.</p>",
        "id": 270118590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668922
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796124285\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, that's a good point; made it a field of the <code>Taken</code> state now, to remember it for the free.</p>\n</blockquote>",
        "id": 270118594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668923
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868500542\">PR review</a>.</p>",
        "id": 270118606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668930
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796124360\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point!</p>\n</blockquote>",
        "id": 270118607,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643668931
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868501370\">PR review</a>.</p>",
        "id": 270118720,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669000
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796124966\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed. The intent was to be a little more general (one could in theory choose <em>not</em> to retain the state that makes a slot have affinity) but as you say that complexifies things a bit and we should probably approach that as we need it. (And it need not necessarily touch the affinity state either; there's little harm in a stray affinity for a module that will never exist again.)</p>\n</blockquote>",
        "id": 270118722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669000
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868501443\">PR review</a>.</p>",
        "id": 270118736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669007
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796125020\">PR review comment</a>:</p>\n<blockquote>\n<p>The first is covered by the <code>get_mut()</code> at the top; I added a <code>.expect()</code> rather than <code>.unwrap()</code> to make any failure clearer though. Added the second.</p>\n</blockquote>",
        "id": 270118737,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669007
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868501525\">PR review</a>.</p>",
        "id": 270118745,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669013
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796125076\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 270118747,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669014
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868505055\">PR review</a>.</p>",
        "id": 270119356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669312
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796127760\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>The first is covered by the <code>get_mut()</code> at the top</p>\n</blockquote>\n<p>FWIW, I don't mind having \"redundant\" assertions because, in some sense, debug assertions are <em>always</em> redundant, since we are checking things that we believe should always be true.</p>\n</blockquote>",
        "id": 270119357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669312
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270120574,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643669888
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868513731\">PR review</a>.</p>",
        "id": 270121102,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643670114
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868513731\">PR review</a>.</p>",
        "id": 270121103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643670114
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796134276\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd personally add <code>unwrap_</code> as a prefix to these match-on-a-variant-and-return-the-inner-bits-or-else-panic methods. Typically a plain <code>as_blah</code> would return an <code>Option&lt;&amp;T&gt;</code> if it is possibly not a <code>T</code>, rather than panicking.</p>\n</blockquote>",
        "id": 270121104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643670114
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270122438,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643670666
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#pullrequestreview-868520425\">PR review</a>.</p>",
        "id": 270122450,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643670673
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738#discussion_r796139113\">PR review comment</a>:</p>\n<blockquote>\n<p>Done!</p>\n</blockquote>",
        "id": 270122451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643670673
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270135203,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643677934
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270135334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643678006
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270155834,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643693602
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270158235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643695982
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270159963,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643697587
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270309768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643759872
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270313885,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643762235
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270431124,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643825078
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270443609,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643830147
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270444630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643830512
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270445863,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643830992
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a> from <code>pooling-affinity</code> to <code>main</code>.</p>",
        "id": 270451804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643833537
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3738\">PR #3738</a>.</p>",
        "id": 270458245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643836300
    }
]