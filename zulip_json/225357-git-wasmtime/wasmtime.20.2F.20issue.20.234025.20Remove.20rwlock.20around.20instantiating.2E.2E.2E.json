[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4025\">issue #4025</a>:</p>\n<blockquote>\n<p>Currently whenever a module is instantiated within a store for the first time it will register itself within the global map of all modules so the signal handlers have a way to go from a faulting address to determine whether it's a wasm pc that should have faulted. This operation, however, is quite costly relative to many other things wasmtime does, especially because pthread rwlocks aren't necessarily known for their speed.</p>\n<p>Instead we should probably skip this lock altogether. Instead we should probably perform the global registration task when a <code>Module</code> is created rather than when a <code>Module</code> is instantiated for the first time within a store. This will remove both the rwlock used when a module is instantiated as well as when a store is dropped and the module is unregistered in the global map.</p>\n</blockquote>",
        "id": 278892482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649884848
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4025\">issue #4025</a>:</p>\n<blockquote>\n<p>Currently whenever a module is instantiated within a store for the first time it will register itself within the global map of all modules so the signal handlers have a way to go from a faulting address to determine whether it's a wasm pc that should have faulted. This operation, however, is quite costly relative to many other things wasmtime does, especially because pthread rwlocks aren't necessarily known for their speed.</p>\n<p>Instead we should probably skip this lock altogether. Instead we should probably perform the global registration task when a <code>Module</code> is created rather than when a <code>Module</code> is instantiated for the first time within a store. This will remove both the rwlock used when a module is instantiated as well as when a store is dropped and the module is unregistered in the global map.</p>\n</blockquote>",
        "id": 278892483,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1649884848
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4025\">issue #4025</a>:</p>\n<blockquote>\n<p>Currently whenever a module is instantiated within a store for the first time it will register itself within the global map of all modules so the signal handlers have a way to go from a faulting address to determine whether it's a wasm pc that should have faulted. This operation, however, is quite costly relative to many other things wasmtime does, especially because pthread rwlocks aren't necessarily known for their speed.</p>\n<p>Instead we should probably skip this lock altogether. Instead we should probably perform the global registration task when a <code>Module</code> is created rather than when a <code>Module</code> is instantiated for the first time within a store. This will remove both the rwlock used when a module is instantiated as well as when a store is dropped and the module is unregistered in the global map.</p>\n</blockquote>",
        "id": 279462558,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1650399228
    }
]