[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1112901593\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>(For context for those not already deeply lost in the depths of the x64 backend, the <code>movabs</code> lowering for immediates happens when the value doesn't fit in a signed 32-bit immediate field that most reg/mem/immediate operands support. So this sort of code would not appear when doing arithmetic on small integers, but appears all the time when 64-bit bitmasks are involved, e.g. in SpiderMonkey's NaN-(un)boxing sequences.)</p>\n</blockquote>",
        "id": 280589514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651211770
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1112907821\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 280590261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651212591
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1113148135\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>How will this affect disassemblers? I presume they would try to interpret the constant pool as instructions and due to the varying size of x86 instructions completely mess up disassembly of instructions following the constant pool, right? Would it be an option to allow disabling the constant pool usage?</p>\n</blockquote>",
        "id": 280613046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651227753
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1113537911\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<blockquote>\n<p>How will this affect disassemblers? I presume they would try to interpret the constant pool as instructions and due to the varying size of x86 instructions completely mess up disassembly of instructions following the constant pool, right? Would it be an option to allow disabling the constant pool usage?</p>\n</blockquote>\n<p>@bjorn3 most disassemblers will sync to function boundaries at least (if they have that metadata, e.g. with an ELF image), so the constant pool at the end will at worst become garbage instructions after the final <code>ret</code>.</p>\n<p>I do agree it'd be better to put the constants somewhere else if possible (in <code>.rodata</code> or at least between functions, outside of the ranges/function body sizes specified by metadata) -- but two factors work against this:</p>\n<ul>\n<li>Our per-function compilation strategy means that we would need a separate pass at the end to collect all constant pools, and do fixups for rip-relative references at that point. Right now with per-function constant pools each function body is completely independent and has no relocs for constant references.</li>\n<li>On some platforms (e.g. aarch64) the available range for constant references is limited (+/- 128MiB, IIRC), so we need at least the possibility of constant pools among/between functions as well as in a separate <code>.rodata</code>. And as long as we're doing that, it's simpler to adopt a strategy that always works (constants per function, with <code>MachBuffer</code>'s constant-island handling) rather than choose between strategies and have a rarely-used path (i.e., less well-tested).</li>\n</ul>\n<p>And finally I'll note that we have constant pools already, for SIMD constants; this PR is expanding their use, not introducing them at all.</p>\n</blockquote>",
        "id": 280661474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651252187
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1113544837\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<blockquote>\n<p>@bjorn3 most disassemblers will sync to function boundaries at least (if they have that metadata, e.g. with an ELF image), so the constant pool at the end will at worst become garbage instructions after the final ret.</p>\n</blockquote>\n<p>This PR doesn't put the constant pool in the middle in case of large functions like it does for AArch64?</p>\n<blockquote>\n<p>On some platforms (e.g. aarch64) the available range for constant references is limited (+/- 128MiB, IIRC)</p>\n</blockquote>\n<p>For AArch64 it is less of an issue due to the instructions having a fixed size and thus there being no risk of the disassembler desyncing for as long as the constant pool size is a multiple of the instruction length.</p>\n</blockquote>",
        "id": 280662377,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651252651
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1113547457\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>@bjorn3 most disassemblers will sync to function boundaries at least (if they have that metadata, e.g. with an ELF image), so the constant pool at the end will at worst become garbage instructions after the final ret.</p>\n</blockquote>\n<p>This PR doesn't put the constant pool in the middle in case of large functions like it does for AArch64?</p>\n</blockquote>\n<p>It doesn't change the behavior at all; the <code>MachBuffer</code> will do whatever it did before for SIMD constants. On x86-64 the available PC-relative range is +/- 2GiB, so realistically the constant pool will always be at the end of the function.</p>\n</blockquote>",
        "id": 280662760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651252839
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1113827924\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>@abrown or @fitzgen: rebased and ready for review (stacks on #4080, which stacks on #4091).</p>\n</blockquote>",
        "id": 280697077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651271342
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1115199650\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>How about we review this after we figure out #4080?</p>\n</blockquote>",
        "id": 280911025,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651514789
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1115461583\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>Rebased now that #4080 merged.</p>\n</blockquote>",
        "id": 280947867,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651533772
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1121856852\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>@abrown or @fitzgen, I think this should be OK to review now (thanks!).</p>\n</blockquote>",
        "id": 281773664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652154401
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1122659792\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>I was poking around and it looks like this PR fails tests on <code>main</code> due to what looks like a \"merge conflict\" in test added after this PR was created, but I suspect the test probably just needs an updated output</p>\n</blockquote>",
        "id": 281856480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652202749
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088#issuecomment-1122663816\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4088\">issue #4088</a>:</p>\n<blockquote>\n<p>Urgh, we really need a bors-like thing... I'll take a look, sorry!</p>\n</blockquote>",
        "id": 281857030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652203010
    }
]