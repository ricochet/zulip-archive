[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5816\">issue #5816</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Our cranelift-fuzzgen library should allow generating random ISA flags for each target.</p>\n<h4>Benefit</h4>\n<p>This allows us to test multiple implementations of the same cranelift instruction, if some ISA extension is available. For example fuzzgen currently never covers the new instructions added in #5795 since we never turn on AVX. We always stick to the defaults.</p>\n<h4>Implementation</h4>\n<p>We currently have two fuzz targets using the <code>cranelift-fuzzgen</code> library. (<code>icache</code> and <code>fuzzgen</code>).</p>\n<ul>\n<li><code>icache</code> cross compiles a function into a given target architecture but never executes it. For this target we should allow all existing extensions to be enabled.</li>\n<li><code>fuzzgen</code> compiles and executes the code, thus we need to use <code>cranelift-native</code> to query which extensions are available in the current fuzzing host, and only allow those to be enabled.</li>\n</ul>\n<p>Additionally we can't start from an empty set of ISA flags, we must start from the default ISA flags for that architecture. This is due to<br>\nthe x64 backend requiring <code>sse3</code>/<code>sse4.1</code> and <code>sse4.2</code> to lower some instructions and we don't have fallback lowerings so those would panic if we start from the empty set and not turn those on.</p>\n<p>We should largely be able to query existing extensions from the ISA and turn on random ISA flags. <strong>However</strong> there are some flags that we must specially handle such as <code>aarch64</code>'s <code>sign_return_address_with_bkey</code>, this is platform specific, and we can't just randomly enable that on fuzzgen. That is the only flag that I'm aware that could cause issues.</p>\n<h4>Alternatives</h4>\n<p>Wasmtime's fuzzers already covers some of this, but can't reach all of the instructions that fuzzgen generates so there would still be value there.<br>\n</p>\n</blockquote>",
        "id": 328483260,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676644067
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5816\">issue #5816</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Our cranelift-fuzzgen library should allow generating random ISA flags for each target.</p>\n<h4>Benefit</h4>\n<p>This allows us to test multiple implementations of the same cranelift instruction, if some ISA extension is available. For example fuzzgen currently never covers the new instructions added in #5795 since we never turn on AVX. We always stick to the defaults.</p>\n<h4>Implementation</h4>\n<p>We currently have two fuzz targets using the <code>cranelift-fuzzgen</code> library. (<code>icache</code> and <code>fuzzgen</code>).</p>\n<ul>\n<li><code>icache</code> cross compiles a function into a given target architecture but never executes it. For this target we should allow all existing extensions to be enabled.</li>\n<li><code>fuzzgen</code> compiles and executes the code, thus we need to use <code>cranelift-native</code> to query which extensions are available in the current fuzzing host, and only allow those to be enabled.</li>\n</ul>\n<p>Additionally we can't start from an empty set of ISA flags, we must start from the default ISA flags for that architecture. This is due to<br>\nthe x64 backend requiring <code>sse3</code>/<code>sse4.1</code> and <code>sse4.2</code> to lower some instructions and we don't have fallback lowerings so those would panic if we start from the empty set and not turn those on.</p>\n<p>We should largely be able to query existing extensions from the ISA and turn on random ISA flags. <strong>However</strong> there are some flags that we must specially handle such as <code>aarch64</code>'s <code>sign_return_address_with_bkey</code>, this is platform specific, and we can't just randomly enable that on fuzzgen. That is the only flag that I'm aware that could cause issues.</p>\n<h4>Alternatives</h4>\n<p>Wasmtime's fuzzers already covers some of this, but can't reach all of the instructions that fuzzgen generates so there would still be value there.<br>\n</p>\n</blockquote>",
        "id": 328483261,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676644067
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5816\">issue #5816</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Our cranelift-fuzzgen library should allow generating random ISA flags for each target.</p>\n<h4>Benefit</h4>\n<p>This allows us to test multiple implementations of the same cranelift instruction, if some ISA extension is available. For example fuzzgen currently never covers the new instructions added in #5795 since we never turn on AVX. We always stick to the defaults.</p>\n<h4>Implementation</h4>\n<p>We currently have two fuzz targets using the <code>cranelift-fuzzgen</code> library. (<code>icache</code> and <code>fuzzgen</code>).</p>\n<ul>\n<li><code>icache</code> cross compiles a function into a given target architecture but never executes it. For this target we should allow all existing extensions to be enabled.</li>\n<li><code>fuzzgen</code> compiles and executes the code, thus we need to use <code>cranelift-native</code> to query which extensions are available in the current fuzzing host, and only allow those to be enabled.</li>\n</ul>\n<p>Additionally we can't start from an empty set of ISA flags, we must start from the default ISA flags for that architecture. This is due to the x64 backend requiring <code>sse3</code>/<code>sse4.1</code> and <code>sse4.2</code> to lower some instructions and we don't have fallback lowerings so those would panic if we start from the empty set and not turn those on.</p>\n<p>We should largely be able to query existing extensions from the ISA and turn on random ISA flags. <strong>However</strong> there are some flags that we must specially handle such as <code>aarch64</code>'s <code>sign_return_address_with_bkey</code>, this is platform specific, and we can't just randomly enable that on fuzzgen. That is the only flag that I'm aware that could cause issues.</p>\n<h4>Alternatives</h4>\n<p>Wasmtime's fuzzers already covers some of this, but can't reach all of the instructions that fuzzgen generates so there would still be value there.<br>\n</p>\n</blockquote>",
        "id": 328483486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676644134
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5816#issuecomment-1434776613\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5816\">issue #5816</a>:</p>\n<blockquote>\n<p>While not exactly applicable to cranelift-fuzzgen <a href=\"https://github.com/bytecodealliance/wasmtime/blob/db9efcb099e07dbb3b433668a5404deefc0eb709/crates/fuzzing/src/generators/codegen_settings.rs#L7-L192\">this is Wasmtime's implementation of selection here</a>. Wasmtime's goal is to run the code so it ends up duplicating the logic in <code>cranelift-native</code> for mapping between Rust-standard-library feature names and Cranelift feature names. </p>\n</blockquote>",
        "id": 328492245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1676646404
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5816\">issue #5816</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<h4>Feature</h4>\n<p>Our cranelift-fuzzgen library should allow generating random ISA flags for each target.</p>\n<h4>Benefit</h4>\n<p>This allows us to test multiple implementations of the same cranelift instruction, if some ISA extension is available. For example fuzzgen currently never covers the new instructions added in #5795 since we never turn on AVX. We always stick to the defaults.</p>\n<h4>Implementation</h4>\n<p>We currently have two fuzz targets using the <code>cranelift-fuzzgen</code> library. (<code>icache</code> and <code>fuzzgen</code>).</p>\n<ul>\n<li><code>icache</code> cross compiles a function into a given target architecture but never executes it. For this target we should allow all existing extensions to be enabled.</li>\n<li><code>fuzzgen</code> compiles and executes the code, thus we need to use <code>cranelift-native</code> to query which extensions are available in the current fuzzing host, and only allow those to be enabled.</li>\n</ul>\n<p>Additionally we can't start from an empty set of ISA flags, we must start from the default ISA flags for that architecture. This is due to the x64 backend requiring <code>sse3</code>/<code>sse4.1</code> and <code>sse4.2</code> to lower some instructions and we don't have fallback lowerings so those would panic if we start from the empty set and not turn those on.</p>\n<p>We should largely be able to query existing extensions from the ISA and turn on random ISA flags. <strong>However</strong> there are some flags that we must specially handle such as <code>aarch64</code>'s <code>sign_return_address_with_bkey</code>, this is platform specific, and we can't just randomly enable that on fuzzgen. That is the only flag that I'm aware that could cause issues.</p>\n<h4>Alternatives</h4>\n<p>Wasmtime's fuzzers already covers some of this, but can't reach all of the instructions that fuzzgen generates so there would still be value there.<br>\n</p>\n</blockquote>",
        "id": 343650308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679485333
    }
]