[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>This proposal tackles a situation where, given some directory handle, the user tries to open a subdirectory as a file, and invokes <code>fd_read</code> on the obtained WASI handle. This way, even though they obtained a valid handle from the <code>path_open</code> call (we don't have a way to tell the runtime to fail if the specified subpath is <em>not</em> a file; we can only fail if the subpath is not a directory and we specified the oflag <code>O_DIRECTORY</code>), the <code>fd_read</code> call will fail with <code>ENOTCAPABLE</code> errno since we don't include <code>FD_READ</code> right on directory handles when spawning them. In general, returning <code>ENOTCAPABLE</code> is fine, however, it doesn't match the common (expected?) behaviour of returning <code>EISDIR</code> in this case. Although, having said that, POSIX prescribes we should return <code>EPERM</code> rather than <code>EISDIR</code>. However, it seems that the Linux way of returning <code>EISDIR</code> is treated as standard. @sunfishcode please feel free to correct me here!</p>\n<p>@sunfishcode and I had a discussion offline about this, and we both believe it would be reasonable to return <code>EISDIR</code> in this case in WASI as well. To achieve this, we would need to add <code>FD_READ</code> right to directory handles, and in the <code>fd_read</code> and <code>fd_pread</code> calls always return <code>EISDIR</code> errno. Having <code>FD_READ</code> right on the handle would prevent the implementation from failing with <code>ENOTCAPABLE</code> when verifying required rights on the handle.</p>\n<p>I've decided to submit an issue about this first before rolling out a PR so that we can all agree if this is the right approach to the presented problem or not. The proposal if lands will introduce a breaking change to the end-user's code in that the expected errno values will change for the chain of syscalls described above.</p>\n</blockquote>",
        "id": 202252019,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593373946
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>This proposal tackles a situation where, given some directory handle, the user tries to open a subdirectory as a file, and invokes <code>fd_read</code> on the obtained WASI handle. This way, even though they obtained a valid handle from the <code>path_open</code> call (we don't have a way to tell the runtime to fail if the specified subpath is <em>not</em> a file; we can only fail if the subpath is not a directory and we specified the oflag <code>O_DIRECTORY</code>), the <code>fd_read</code> call will fail with <code>ENOTCAPABLE</code> errno since we don't include <code>FD_READ</code> right on directory handles when spawning them. In general, returning <code>ENOTCAPABLE</code> is fine, however, it doesn't match the common (expected?) behaviour of returning <code>EISDIR</code> in this case. Although, having said that, POSIX prescribes we should return <code>EPERM</code> rather than <code>EISDIR</code>. However, it seems that the Linux way of returning <code>EISDIR</code> is treated as standard. @sunfishcode please feel free to correct me here!</p>\n<p>@sunfishcode and I had a discussion offline about this, and we both believe it would be reasonable to return <code>EISDIR</code> in this case in WASI as well. To achieve this, we would need to add <code>FD_READ</code> right to directory handles, and in the <code>fd_read</code> and <code>fd_pread</code> calls always return <code>EISDIR</code> errno. Having <code>FD_READ</code> right on the handle would prevent the implementation from failing with <code>ENOTCAPABLE</code> when verifying required rights on the handle.</p>\n<p>I've decided to submit an issue about this first before rolling out a PR so that we can all agree if this is the right approach to the presented problem or not. The proposal if lands will introduce a breaking change to the end-user's code in that the expected errno values will change for the chain of syscalls described above.</p>\n</blockquote>",
        "id": 202252020,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593373946
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>This proposal tackles a situation where, given some directory handle, the user tries to open a subdirectory as a file, and invokes <code>fd_read</code> on the obtained WASI handle. This way, even though they obtained a valid handle from the <code>path_open</code> call (we don't have a way to tell the runtime to fail if the specified subpath is <em>not</em> a file; we can only fail if the subpath is not a directory and we specified the oflag <code>O_DIRECTORY</code>), the <code>fd_read</code> call will fail with <code>ENOTCAPABLE</code> errno since we don't include <code>FD_READ</code> right on directory handles when spawning them. In general, returning <code>ENOTCAPABLE</code> is fine, however, it doesn't match the common (expected?) behaviour of returning <code>EISDIR</code> in this case. Although, having said that, POSIX prescribes we should return <code>EPERM</code> rather than <code>EISDIR</code>. However, it seems that the Linux way of returning <code>EISDIR</code> is treated as standard. @sunfishcode please feel free to correct me here!</p>\n<p>@sunfishcode and I had a discussion offline about this, and we both believe it would be reasonable to return <code>EISDIR</code> in this case in WASI as well. To achieve this, we would need to add <code>FD_READ</code> right to directory handles, and in the <code>fd_read</code> and <code>fd_pread</code> calls always return <code>EISDIR</code> errno. Having <code>FD_READ</code> right on the handle would prevent the implementation from failing with <code>ENOTCAPABLE</code> when verifying required rights on the handle.</p>\n<p>I've decided to submit an issue about this first before rolling out a PR so that we can all agree if this is the right approach to the presented problem or not. The proposal if lands will introduce a breaking change to the end-user's code in that the expected errno values will change for the chain of syscalls described above.</p>\n</blockquote>",
        "id": 202252021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593373946
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>This proposal tackles a situation where, given some directory handle, the user tries to open a subdirectory as a file, and invokes <code>fd_read</code> on the obtained WASI handle. This way, even though they obtained a valid handle from the <code>path_open</code> call (we don't have a way to tell the runtime to fail if the specified subpath is <em>not</em> a file; we can only fail if the subpath is not a directory and we specified the oflag <code>O_DIRECTORY</code>), the <code>fd_read</code> call will fail with <code>ENOTCAPABLE</code> errno since we don't include <code>FD_READ</code> right on directory handles when spawning them. In general, returning <code>ENOTCAPABLE</code> is fine, however, it doesn't match the common (expected?) behaviour of returning <code>EISDIR</code> in this case. Although, having said that, POSIX prescribes we should return <code>EPERM</code> rather than <code>EISDIR</code>. However, it seems that the Linux way of returning <code>EISDIR</code> is treated as standard. @sunfishcode please feel free to correct me here!</p>\n<p>@sunfishcode and I had a discussion offline about this, and we both believe it would be reasonable to return <code>EISDIR</code> in this case in WASI as well. To achieve this, we would need to add <code>FD_READ</code> right to directory handles, and in the <code>fd_read</code> and <code>fd_pread</code> calls always return <code>EISDIR</code> errno. Having <code>FD_READ</code> right on the handle would prevent the implementation from failing with <code>ENOTCAPABLE</code> when verifying required rights on the handle.</p>\n<p>I've decided to submit an issue about this first before rolling out a PR so that we can all agree if this is the right approach to the presented problem or not. The proposal if lands will introduce a breaking change to the end-user's code in that the expected errno values will change for the chain of syscalls described above.</p>\n</blockquote>",
        "id": 202252022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593373946
    },
    {
        "content": "<p>kubkon labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>This proposal tackles a situation where, given some directory handle, the user tries to open a subdirectory as a file, and invokes <code>fd_read</code> on the obtained WASI handle. This way, even though they obtained a valid handle from the <code>path_open</code> call (we don't have a way to tell the runtime to fail if the specified subpath is <em>not</em> a file; we can only fail if the subpath is not a directory and we specified the oflag <code>O_DIRECTORY</code>), the <code>fd_read</code> call will fail with <code>ENOTCAPABLE</code> errno since we don't include <code>FD_READ</code> right on directory handles when spawning them. In general, returning <code>ENOTCAPABLE</code> is fine, however, it doesn't match the common (expected?) behaviour of returning <code>EISDIR</code> in this case. Although, having said that, POSIX prescribes we should return <code>EPERM</code> rather than <code>EISDIR</code>. However, it seems that the Linux way of returning <code>EISDIR</code> is treated as standard. @sunfishcode please feel free to correct me here!</p>\n<p>@sunfishcode and I had a discussion offline about this, and we both believe it would be reasonable to return <code>EISDIR</code> in this case in WASI as well. To achieve this, we would need to add <code>FD_READ</code> right to directory handles, and in the <code>fd_read</code> and <code>fd_pread</code> calls always return <code>EISDIR</code> errno. Having <code>FD_READ</code> right on the handle would prevent the implementation from failing with <code>ENOTCAPABLE</code> when verifying required rights on the handle.</p>\n<p>I've decided to submit an issue about this first before rolling out a PR so that we can all agree if this is the right approach to the presented problem or not. The proposal if lands will introduce a breaking change to the end-user's code in that the expected errno values will change for the chain of syscalls described above.</p>\n</blockquote>",
        "id": 202252023,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593373946
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-650813425\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @kubkon</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasi\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>kubkon: wasi</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202252033,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593373958
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-650814190\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>I should also mention that the alternative could be some post-processing/errno remapping in the <code>libc</code> (or equivalent). @sunfishcode already pointed out that some post-processing in <code>fd_read</code> already happens in <a href=\"https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/cloudlibc/src/libc/unistd/read.c#L14\"><code>wasi-libc</code></a>.</p>\n</blockquote>",
        "id": 202252350,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593374377
    },
    {
        "content": "<p>kubkon edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-650814190\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>I should also mention that the alternative could be some post-processing/errno remapping in the <code>libc</code> (or equivalent). @sunfishcode already pointed out that some post-processing in <code>read</code> already happens in <a href=\"https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/cloudlibc/src/libc/unistd/read.c#L14\"><code>wasi-libc</code></a>.</p>\n</blockquote>",
        "id": 202252361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593374397
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-651937029\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>This seems like a reasonable approach to implementing the current interface. If we could kick this problem up to design changes in the WASI interfaces themselves, I would love some way to distinguish between directory handles and file handles in the type system so that doing file operations on a directory is caught as a type check rather than a capability check.</p>\n</blockquote>",
        "id": 202469146,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593538192
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-652092314\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>I agree with @pchickey; we should work towards having directories be a separate type, with separate rights, and make this a type error caught at runtime and translated by libc into <code>EISDIR</code>. But for now, using FD_READ seems a simple and unintrusive way to fix the immediate problem.</p>\n</blockquote>",
        "id": 202506222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593558456
    },
    {
        "content": "<p>kubkon edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-652485883\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>OK then, I'll submit a patch to that effect that will fix it as discussed.</p>\n</blockquote>",
        "id": 202582765,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593617168
    },
    {
        "content": "<p>kubkon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935#issuecomment-652485883\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1935\">Issue #1935</a>:</p>\n<blockquote>\n<p>OK, then, I'll submit a patch to that effect that will fix it as discussed.</p>\n</blockquote>",
        "id": 202582770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593617170
    }
]