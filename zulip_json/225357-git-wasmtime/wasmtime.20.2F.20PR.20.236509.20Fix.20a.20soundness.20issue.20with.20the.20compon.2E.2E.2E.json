[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509\">PR #6509</a> from <code>alexcrichton:component-async-bug</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit addresses <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6493\">https://github.com/bytecodealliance/wasmtime/issues/6493</a> by fixing a soundness issue with the async<br>\nimplementation of the component model. This issue has been presence<br>\nsince the inception of the addition of async support to the component<br>\nmodel and doesn't represent a recent regression. The underlying problem<br>\nis that one of the base assumptions of the trap handling code is that<br>\nthere's only one single activation in TLS that needs to be pushed/popped<br>\nwhen a stack is switched (e.g. a fiber is switched to or from). In the<br>\ncase of the component model there might be two activations: one for an<br>\ninvocation of a component function and then a second for an invocation<br>\nof a <code>realloc</code> function to return results back to wasm (e.g. in the case<br>\nan imported function returns a list).</p>\n<p>This problem is fixed by changing how TLS is managed in the presence of<br>\nfibers. Previously when a fiber was suspended it would pop a single<br>\nactivation from the top of the stack and save that to get pushed when<br>\nthe fiber was resumed. This has the benefit of maintaining an entire<br>\nlinked list of activations for the current thread but has the problem<br>\nabove where it doesn't handle a fiber with multiple activations on it.<br>\nInstead now TLS management is done when a fiber is resumed instead of<br>\nsuspended. Instead of pushing/popping a single activation the entire<br>\nlinked list of activations is tracked for a particular fiber and stored<br>\nwithin the fiber itself. In this manner resuming a fiber will push<br>\nall activations onto the current thread and suspending a fiber will pop<br>\nall activations for the fiber (and store them as a new linked list in<br>\nthe fiber's state itself).</p>\n<p>This end result is that all activations on a fiber should now be managed<br>\ncorrectly, regardless of how many there are. The main downside of this<br>\ncommit is that fiber suspension and resumption is more complicated, but<br>\nthe hope there is that fiber suspension typically corresponds with I/O<br>\nnot being ready or similar so the order of magnitude of TLS operations<br>\nisn't too significant compared to the I/O overhead.</p>\n</blockquote>",
        "id": 363097391,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685721792
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509\">PR #6509</a>.</p>",
        "id": 363097393,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685721792
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509\">PR #6509</a>.</p>",
        "id": 363097397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685721793
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#pullrequestreview-1458144535\">PR review</a>:</p>\n<blockquote>\n<p>Mostly LGTM but I have an idea around making this slightly stronger typed and also some naming nitpicks (take these with a grain of salt, I'm not 100% sure why I hate \"TLS\" here so much, maybe you can think of something better tho, since I am woefully lacking in terms of actual alternatives)</p>\n</blockquote>",
        "id": 363140921,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#pullrequestreview-1458144535\">PR review</a>:</p>\n<blockquote>\n<p>Mostly LGTM but I have an idea around making this slightly stronger typed and also some naming nitpicks (take these with a grain of salt, I'm not 100% sure why I hate \"TLS\" here so much, maybe you can think of something better tho, since I am woefully lacking in terms of actual alternatives)</p>\n</blockquote>",
        "id": 363140922,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214655984\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess we don't really (and shouldn't) have easy access to the top <code>CallThreadState</code> where we actually call the function, so making it a method wouldn't really help.</p>\n<p>But I still don't like the \"TLS\" nomenclature and find it mildly confusing.</p>\n</blockquote>",
        "id": 363140923,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214663790\">PR review comment</a>:</p>\n<blockquote>\n<p>Instead of \"reverse order\" can we say \"from youngest to oldest activation\"?</p>\n</blockquote>",
        "id": 363140924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214653730\">PR review comment</a>:</p>\n<blockquote>\n<p>Can we mess around with wording a bit here? \"TLS pointer\" could maybe instead be \"<code>CallThreadState</code> pointer\" and similar changes to \"TLS\" elsewhere in here? Maybe even make this a method like <code>CallThreadState::assert_not_in_range</code>? Because as-written I was thinking that this relied on some kind of details of the underlying system's TLS implementation, not our per-thread <code>CallThreadState</code> linked list, which is indeed always on the stack.</p>\n</blockquote>",
        "id": 363140925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214648980\">PR review comment</a>:</p>\n<blockquote>\n<p>Very nice</p>\n</blockquote>",
        "id": 363140926,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214677060\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly, I wouldn't mind calling this <code>AsyncWasmCallState</code> or something along those lines.</p>\n<p>Maybe I'm taking this too far...</p>\n</blockquote>",
        "id": 363140927,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214680899\">PR review comment</a>:</p>\n<blockquote>\n<p>So currently nothing is really stopping us from calling <code>push</code> twice, with no <code>pop</code>s in between, which would lead to broken things. Do you think it is worth having two types here? </p>\n<ol>\n<li>a <code>PushedTlsState</code> for when it is pushed, and this would have a <code>fn pop(self) -&gt; PoppedTlsState</code></li>\n<li>a <code>PoppedTlsState</code> for when it is popped, and this would have a <code>fn push(self) -&gt; PushedTlsState</code></li>\n</ol>\n<p>It wouldn't be <em>too</em> much extra boilerplate, and would help ensure that these methods are called correctly.</p>\n</blockquote>",
        "id": 363140928,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214685038\">PR review comment</a>:</p>\n<blockquote>\n<p>The idea is that <code>self.state</code>, when the <code>TlsState</code> is pushed, is the previous head of the <code>CallThreadState</code> stack before this <code>TlsState</code> was pushed? I guess that is what the comment above, on the field, says. The fact that this same field is punned to hold different things (even if they are of the same type) whether we are in a pushed vs popped state is sorta subtle and is making me think that the type-per-state approach would be good. At minimum we could have more descriptive field names to make this code easier to grok at a glance, because I was having to read this pretty closely to understand the loop termination condition.</p>\n</blockquote>",
        "id": 363140929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214686888\">PR review comment</a>:</p>\n<blockquote>\n<p>Wait it is actually oldest to youngest, right? So that the towers-of-hanoi style pushing and popping onto different stacks works?</p>\n<p>Concretely: can we explicitly list the order (rather than say it is the usual vs reverse order).</p>\n</blockquote>",
        "id": 363140930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214688239\">PR review comment</a>:</p>\n<blockquote>\n<p>And then this would become <code>Option&lt;wasmtime_runtime::PoppedTlsState&gt;</code>...</p>\n</blockquote>",
        "id": 363140931,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#discussion_r1214689105\">PR review comment</a>:</p>\n<blockquote>\n<p>And this would become</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">popped</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tls</span><span class=\"p\">.</span><span class=\"n\">take</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pushed</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">popped</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fuber</span><span class=\"p\">.</span><span class=\"n\">resume</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">);</span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">pushed</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">());</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 363140932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685732279
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509\">PR #6509</a>.</p>",
        "id": 363145894,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685733809
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509\">PR #6509</a>.</p>",
        "id": 363149075,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685734844
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509#pullrequestreview-1458468961\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! LGTM!</p>\n</blockquote>",
        "id": 363163460,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685739399
    },
    {
        "content": "<p>fitzgen merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6509\">PR #6509</a>.</p>",
        "id": 363170127,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685741719
    }
]