[
    {
        "content": "<p>lann opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p><a href=\"#narrow/stream/217126-wasmtime/topic/Return.20type.20of.20.60add_to_linker.60.20closures\">From this Zulip discussion</a>:</p>\n<p>I've been experimenting with ways to provide reusable bits of host functionality and have run into a stumbling block with wasmtime's generated <code>add_to_linker</code> functions, which take <code>get</code>closures with types (roughly) like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">get</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Host</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>These closures are usually trivial field accesses like <code>|data| &amp;mut data.some_host_impl</code>, but this is somewhat limiting because you can only return <code>&amp;mut</code>s borrowing from <code>T</code>. As a specific example, the wasmtime-wasi <a href=\"https://docs.rs/wasmtime-wasi/19.0.2/wasmtime_wasi/trait.WasiView.html#tymethod.table\"><code>WasiView::table</code></a> needs to be shared with wasmtime-wasi-http's <a href=\"https://docs.rs/wasmtime-wasi-http/latest/wasmtime_wasi_http/types/trait.WasiHttpView.html#tymethod.table\"><code>WasiHttpView::table</code></a>, but this currently requires both <code>*View</code> implementations to use the same concrete type within <code>T</code>, making the two host implementations uncomposable.</p>\n<p>There are some <code>unsafe</code> approaches to deal with this but I'm wondering if it would be possible to change the <code>add_to_linker</code> closure signature to permit returning non-ref types, e.g. something that <code>impl</code>s <code>AsMut&lt;U&gt;</code>. I've been trying to find a way to do this backward-compatibility but I'm running into the limits of my understanding of closure lifetime</p>\n</blockquote>",
        "id": 433544608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713280130
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2059329703\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<blockquote>\n<p>@alexcrichton:<br>\nI can definitely say that the <code>&amp;mut T -&gt; &amp;mut U</code> closures I've never felt great about. I've always preferred to do <code>&amp;mut T -&gt; U</code> with trait bounds on <code>U</code>, which I think is what you're getting at as well. I've also tried to stretch my Rust knowledge of closures to achieve this and while it's possible it gets really nasty really quickly.</p>\n<p>The next-closest approximation I've thought of is to allow returning <code>&amp;mut dyn Trait</code> but I haven't gotten around to pursuing that much.</p>\n<p>I was experimenting with this to clean up wasmtime-wasi APIs a bit ago but I seem to have misplace the branch</p>\n<p>I <a href=\"https://users.rust-lang.org/t/generic-closure-returns-that-can-capture-arguments/76513\">asked about this on the Rust user forums</a> a long time ago too</p>\n</blockquote>\n</blockquote>",
        "id": 433545151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713280250
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2059907556\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>One other point I'd add is that I wouldn't take strict backwards compatibility as a constraint here. Everything that works today should continue to  work, but beyond that it's fine if callers need a slightly different function call or annotations or such.</p>\n</blockquote>",
        "id": 433605133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713300882
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2061441999\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>It turns out the closure lifetime problems were due to a type inference limitation: <a href=\"https://github.com/rust-lang/rust/issues/58052\">https://github.com/rust-lang/rust/issues/58052</a></p>\n<p>This seems to work as a rough approach to improve on:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">borrow</span>::<span class=\"n\">BorrowMut</span><span class=\"p\">;</span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BorrowHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow_host</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">BorrowMut</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"n\">U</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">BorrowHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">F</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow_host</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">BorrowMut</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"n\">U</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">get</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">U</span>: <span class=\"nc\">Host</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add_to_linker_borrow_host</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add_to_linker_borrow_host</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Host</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">getter</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">BorrowHost</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span>: <span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">getter</span><span class=\"p\">.</span><span class=\"n\">borrow_host</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">());</span>\n<span class=\"w\">            </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">().</span><span class=\"n\">host_func</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// add_to_linker(linker, |data| &amp;mut data.host)?;</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 433794200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713365327
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2061450611\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>Nice that looks reasonable to me <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> </p>\n</blockquote>",
        "id": 433796080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713365534
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2072597625\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>After some more iteration here I've come up with something that solves my problems. I'm not really _happy_ with it but its the best compromise I've been able to make with the borrow checker: <a href=\"https://gist.github.com/lann/8d85f69ef334051206ee1c7c0897f0f4\">https://gist.github.com/lann/8d85f69ef334051206ee1c7c0897f0f4</a></p>\n<p>If this looks acceptable I can PR it, though I'd also be happy if someone was able to refine the design further.</p>\n</blockquote>",
        "id": 435005016,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713884429
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2072982976\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>Some minor cleanups on that:</p>\n<ul>\n<li>Testing locally I think you can drop the <code>HostBorrowFn</code> struct entirely in favor of <code>impl&lt;T, U, F&gt; GetHost&lt;T&gt; for F</code> directly.</li>\n<li><code>impl&lt;T: Host&gt; Host for &amp;mut T {</code> I think should be auto-synthesized by <code>bindgen!</code> and I don't think there's any issue with that.</li>\n</ul>\n<p>One point I think is pretty important is that we'll need <code>GetHost</code> per-<code>Host</code>-trait which is a lot of them. That would be untenable if <code>HostBorrowFn</code> were required because you'd need a different-type-per-closure, but with being able to implement <code>GetHost&lt;T&gt; for F</code> directly that means that a single closure should be able to work with all <code>Host</code> traits just fine.</p>\n<p>One other minor possibility might be to have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">GetHost</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Host</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span>: <span class=\"nc\">Host</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">get_host</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">Host</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>As I write that out though I don't think I like that, so probably scratch that.</p>\n</blockquote>",
        "id": 435033520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713893077
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2072986390\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>Oh also I'd generalize <code>impl&lt;T: Host&gt; Host for &amp;mut T</code> to <code>impl&lt;T: Host + ?Sized&gt; Host for &amp;mut T</code> for the most-general-blanket-forward-impl</p>\n</blockquote>",
        "id": 435033883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713893194
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2072999553\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<blockquote>\n<p>Testing locally I think you can drop the <code>HostBorrowFn</code> struct entirely in favor of <code>impl&lt;T, U, F&gt; GetHost&lt;T&gt; for F</code> directly.</p>\n</blockquote>\n<p>I added <code>HostBorrowFn</code> to work around some coherence issue but that may have been with a different signature on <code>add_to_linker_get_host</code>; it does seem to work without now.</p>\n</blockquote>",
        "id": 435035225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713893633
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073003308\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>Heh yeah when I've tried to golf this stuff historically I've found that it's a very fine line to walk between rustc and usability here...</p>\n</blockquote>",
        "id": 435035658,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713893771
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073013327\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>I'll start on the PR. I also updated the gist with your suggestions in case someone is looking here before the PR is ready.</p>\n</blockquote>",
        "id": 435036371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713894023
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073022113\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<blockquote>\n<p>One other minor possibility might be to have: (GAT stuff)</p>\n</blockquote>\n<p>I tried many variations with GATs but ended up playing whack-a-mole with various lifetime constraints. It may be possible to express this with a generic <code>GetHost</code> but I don't seem to be capable of figuring it out. <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> </p>\n</blockquote>",
        "id": 435037267,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713894315
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073022113\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<blockquote>\n<p>One other minor possibility might be to have: (GAT stuff)</p>\n</blockquote>\n<p>I tried many variations with GATs but ended up playing whack-a-mole with various lifetime constraints. It may be possible to express this with a single generic <code>GetHost</code> but I don't seem to be capable of figuring it out. <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span> </p>\n</blockquote>",
        "id": 435037346,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713894340
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073228030\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>This is what I was (vaguely) worried about:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0119</span><span class=\"p\">]</span>: <span class=\"nc\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementations</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">async_io</span>::<span class=\"n\">wasi</span>::<span class=\"n\">sockets</span>::<span class=\"n\">ip_name_lookup</span>::<span class=\"n\">Host</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ip_name_lookup</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">23</span>:<span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">23</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">WasiView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"err\">`</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 435051763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713899584
    },
    {
        "content": "<p>lann <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073366394\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>From an out-of-band discussion, we're going to try:</p>\n<ul>\n<li>Adding a <code>add_to_linker_with_closure: false</code> that allows opting-out of the generated <code>add_to_linker</code>, <code>impl Host for &amp;mut Host</code>, and <code>impl GetHost for Fn(&amp;mut T) -&gt; &amp;mut U</code></li>\n<li>Update wasi(-http) to set the above opt-out flag and change <code>impl</code>s as necessary (e.g. <code>impl ... for dyn WasiView</code>)</li>\n</ul>\n</blockquote>",
        "id": 435061384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713903277
    },
    {
        "content": "<p>lann edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382#issuecomment-2073228030\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8382\">issue #8382</a>:</p>\n<blockquote>\n<p>This is what I was (vaguely) worried about: <a href=\"https://github.com/bytecodealliance/wasmtime/actions/runs/8805989303/job/24169783936?pr=8448#step:17:392\">https://github.com/bytecodealliance/wasmtime/actions/runs/8805989303/job/24169783936?pr=8448#step:17:392</a></p>\n<p>e.g.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0119</span><span class=\"p\">]</span>: <span class=\"nc\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementations</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">async_io</span>::<span class=\"n\">wasi</span>::<span class=\"n\">sockets</span>::<span class=\"n\">ip_name_lookup</span>::<span class=\"n\">Host</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ip_name_lookup</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">23</span>:<span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">23</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">WasiView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"err\">`</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 435063487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1713904154
    }
]