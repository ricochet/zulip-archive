[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Me and @alexcrichton were discussing this via Zulip. The <code>stack_load</code> gets <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3ff3994a128e900dfe7a465c7f36fc5a074d07ef/cranelift/codegen/src/legalizer/mod.rs#L85-L87\">translated into</a> a <code>load.f64x2 notrap aligned v34</code>, and that's why we do the load sinking in the backend.</p>\n<p>Is <code>stack_load</code> required to be sufficiently aligned? Reading the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.stack_load\">docs</a>, they don't mention anything. So it might just be a case of lets update the docs and the fuzzer.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">69</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">28</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">36</span>\n\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">23</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">extractlane</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v30</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>This passes on AArch64 and S390x.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Generated assembly:&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x14</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">a</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x1c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">f6</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">23</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">26</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">e</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">29</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x17</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"n\">e</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"mi\">07</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\">          </span><span class=\"n\">pshufd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0xee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">33</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">37</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">a</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">b</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>&lt;/details&gt;<br>\n</p>\n</blockquote>",
        "id": 339399802,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677863325
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Me and @alexcrichton were discussing this via Zulip. The <code>stack_load</code> gets <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3ff3994a128e900dfe7a465c7f36fc5a074d07ef/cranelift/codegen/src/legalizer/mod.rs#L85-L87\">translated into</a> a <code>load.f64x2 notrap aligned v34</code>, and that's why we do the load sinking in the backend.</p>\n<p>Is <code>stack_load</code> required to be sufficiently aligned? Reading the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.stack_load\">docs</a>, they don't mention anything. So it might just be a case of lets update the docs and the fuzzer.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">69</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">28</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">36</span>\n\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">23</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">extractlane</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v30</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>This passes on AArch64 and S390x.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Generated assembly:&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x14</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">a</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x1c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">f6</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">23</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">26</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">e</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">29</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x17</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"n\">e</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"mi\">07</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\">          </span><span class=\"n\">pshufd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0xee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">33</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">37</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">a</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">b</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>&lt;/details&gt;<br>\n</p>\n</blockquote>",
        "id": 339399803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677863325
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Me and @alexcrichton were discussing this via Zulip. The <code>stack_load</code> gets <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3ff3994a128e900dfe7a465c7f36fc5a074d07ef/cranelift/codegen/src/legalizer/mod.rs#L85-L87\">translated into</a> a <code>load.f64x2 notrap aligned v34</code>, and that's why we do the load sinking in the backend.</p>\n<p>Is <code>stack_load</code> required to be sufficiently aligned? Reading the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.stack_load\">docs</a>, they don't mention anything. So it might just be a case of lets update the docs and the fuzzer.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">69</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">28</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">36</span>\n\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">23</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">extractlane</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v30</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>This passes on AArch64 and S390x.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Generated assembly:&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x14</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">a</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x1c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">f6</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">23</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">26</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">e</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">29</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x17</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"n\">e</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"mi\">07</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\">          </span><span class=\"n\">pshufd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0xee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">33</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">37</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">a</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">b</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>&lt;/details&gt;<br>\n</p>\n</blockquote>",
        "id": 339399805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677863325
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Me and @alexcrichton were discussing this via Zulip. The <code>stack_load</code> gets <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3ff3994a128e900dfe7a465c7f36fc5a074d07ef/cranelift/codegen/src/legalizer/mod.rs#L85-L87\">translated into</a> a <code>load.f64x2 notrap aligned v34</code>, and that's why we do the load sinking in the backend.</p>\n<p>Is <code>stack_load</code> required to be sufficiently aligned? Reading the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.stack_load\">docs</a>, they don't mention anything. So it might just be a case of lets update the docs and the fuzzer.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">69</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">28</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">36</span>\n\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">23</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">extractlane</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v30</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>This passes on AArch64 and S390x.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Generated assembly:&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x14</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">a</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x1c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">f6</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">23</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">26</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">e</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">29</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x17</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"n\">e</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"mi\">07</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\">          </span><span class=\"n\">pshufd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0xee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">33</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">37</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">a</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">b</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>&lt;/details&gt;<br>\n</p>\n</blockquote>",
        "id": 339399807,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677863325
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1453900455\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p>I think cg_clif can emit unaligned stack_load and stack_store instructions. I can change it if the consensus is that unaligned accesses are not allowed.</p>\n</blockquote>",
        "id": 339411618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1677866580
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1457242467\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p>As far as I can tell, Wasmtime doesn't use Cranelift's explicit stack support. So I think cg_clif gets to have a particularly large say on this question.</p>\n<p>My personal opinion is the StackLoad and StackStore formats ought to have a MemFlags so the frontend can decide this question for itself. I think there's room in both formats without making <code>InstructionData</code> any larger.</p>\n<p>If not that, I think at least that legalization should stop generating the <code>aligned</code> flag: since these instructions allow arbitrary offsets, it makes sense to me that someone might ask for unaligned offsets. I think the <code>notrap</code> flag is okay though?</p>\n</blockquote>",
        "id": 339991808,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678147454
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1457699985\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think the notrap flag is okay though?</p>\n</blockquote>\n<p>I agree. The stack should never be unmapped. For stack overflow there is stack probing.</p>\n<blockquote>\n<p>If not that, I think at least that legalization should stop generating the aligned flag: since these instructions allow arbitrary offsets, it makes sense to me that someone might ask for unaligned offsets.</p>\n</blockquote>\n<p>It will need to be possible to specify the alignment of a stack slot. Currently they are 1 aligned, except if you ensure that every stack slot is a multiple of 16, you get 16 aligned stack slots on all current backends. As such I do this in cg_clif as workaround for the lack of alignment specification support. If alignment specification is added to stack slots, Cranelift could infer if a <code>stack_load</code> or <code>stack_store</code> is aligned based on the stack slot alignment and the offset within the stack slot.</p>\n</blockquote>",
        "id": 340038054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678175111
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1457926624\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<blockquote>\n<p>My personal opinion is the StackLoad and StackStore formats ought to have a MemFlags so the frontend can decide this question for itself. I think there's room in both formats without making InstructionData any larger.</p>\n</blockquote>\n<p>This is also nice for cross endian <code>stack_{load,store}</code>s. They currently have to be manually emitted as <code>stack_addr</code>+<code>{load,store}</code> since we always pick the native endianness. And it removes one source of the native endianness flags.</p>\n<p>Also, can we do something like #4721 to these instructions? Instead of having them magically translated in Cranelift, just build them as regular loads/stores in the frontend. One less Instruction Format to deal with!</p>\n<blockquote>\n<p>It will need to be possible to specify the alignment of a stack slot. Currently they are 1 aligned, except if you ensure that every stack slot is a multiple of 16, you get 16 aligned stack slots on all current backends. As such I do this in cg_clif as workaround for the lack of alignment specification support. If alignment specification is added to stack slots, Cranelift could infer if a stack_load or stack_store is aligned based on the stack slot alignment and the offset within the stack slot.</p>\n</blockquote>\n<p>Another issue that the fuzzer found  is that even with a load without an offset if the stack slot is unaligned it can fault. Since we always align stack slots to 8 bytes, that is not enough for SSE, we get a crash there.</p>\n<p>Adding an alignment field to stack slots seems like a great idea to me! I think I might have to do that before finishing up the work on the SIMD part of the fuzzer. Otherwise I'll have to start tracking the alignment of the whole stack which I don't really want to do.</p>\n</blockquote>",
        "id": 340070444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678184948
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1457926624\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<blockquote>\n<p>My personal opinion is the StackLoad and StackStore formats ought to have a MemFlags so the frontend can decide this question for itself. I think there's room in both formats without making InstructionData any larger.</p>\n</blockquote>\n<p>This is also nice for cross endian <code>stack_{load,store}</code>s. They currently have to be manually emitted as <code>stack_addr</code>+<code>{load,store}</code> since we always pick the native endianness. And it removes one source of the native endianness flags.</p>\n<p>Also, can we do something like #4721 to these instructions? Instead of having them magically translated in Cranelift, just build them as regular loads/stores in the frontend. One less Instruction Format to deal with!</p>\n<blockquote>\n<p>It will need to be possible to specify the alignment of a stack slot. Currently they are 1 aligned, except if you ensure that every stack slot is a multiple of 16, you get 16 aligned stack slots on all current backends. As such I do this in cg_clif as workaround for the lack of alignment specification support. If alignment specification is added to stack slots, Cranelift could infer if a stack_load or stack_store is aligned based on the stack slot alignment and the offset within the stack slot.</p>\n</blockquote>\n<p>Another issue that the fuzzer found  is that even with a load without an offset if the stack slot is unaligned it can fault. Since we always align stack slots to 8 bytes, that is not enough for SSE, we get a crash there.</p>\n<p>Adding an alignment field to stack slots seems like a great idea to me! I think I might have to do that before finishing up the work on the SIMD part of the fuzzer (though that has a bunch of issues as well). Otherwise I'll have to start tracking the alignment of the whole stack which I don't really want to do.</p>\n</blockquote>",
        "id": 340085624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678189229
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1457926624\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<blockquote>\n<p>My personal opinion is the StackLoad and StackStore formats ought to have a MemFlags so the frontend can decide this question for itself. I think there's room in both formats without making InstructionData any larger.</p>\n</blockquote>\n<p>This is also nice for cross endian <code>stack_{load,store}</code>s. They currently have to be manually emitted as <code>stack_addr</code>+<code>{load,store}</code> since we always pick the native endianness. And it removes one source of the native endianness flags.</p>\n<p>Also, can we do something like #4721 to these instructions? Instead of having them magically translated in Cranelift, just build them as regular loads/stores in the frontend. One less Instruction Format to deal with!</p>\n<blockquote>\n<p>It will need to be possible to specify the alignment of a stack slot. Currently they are 1 aligned, except if you ensure that every stack slot is a multiple of 16, you get 16 aligned stack slots on all current backends. As such I do this in cg_clif as workaround for the lack of alignment specification support. If alignment specification is added to stack slots, Cranelift could infer if a stack_load or stack_store is aligned based on the stack slot alignment and the offset within the stack slot.</p>\n</blockquote>\n<p>Another issue that the fuzzer found  is that even with a load without an offset if the stack slot is unaligned it can fault. Since we always align stack slots to 8 bytes, that is not enough for SSE, we get a crash there.</p>\n<p>Adding an alignment field to stack slots seems like a great idea to me (though that has a bunch of issues as well)! I think I might have to do that before finishing up the work on the SIMD part of the fuzzer. Otherwise I'll have to start tracking the alignment of the whole stack which I don't really want to do.</p>\n</blockquote>",
        "id": 340088560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678190026
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922#issuecomment-1458551778\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p>I like the idea of removing the <code>stack_load</code> and <code>stack_store</code> instructions, and instead always pairing <code>stack_addr</code> with a regular <code>load</code> or <code>store</code>, for most of the same reasons as #5386. It nicely resolves the question of whether these instructions need a <code>MemFlags</code> operand, and was already necessary anyway if you wanted to use the narrowing stores or widening loads.</p>\n<p>I think cranelift-fuzzgen might need to start remembering which variables hold addresses, along with metadata like whether it's a <code>func_addr</code> or <code>stack_addr</code> and, in the stack case, what minimum alignment and maximum offset it has. I haven't thought through the details. I hope there's a simpler approach than I've thought of so far.</p>\n<p>I spent a moment thinking about whether <code>stack_addr</code> should be removed too before remembering that, unlike wasm heaps and tables, Cranelift really is responsible for the stack.</p>\n<p>And yeah, adding alignment specifiers to stack slots makes sense to me. As a later memory-usage optimization maybe we can sort the stack slots (both explicit and spill) by alignment to minimize padding.</p>\n</blockquote>",
        "id": 340167496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678209839
    },
    {
        "content": "<p>afonso360 closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5922\">issue #5922</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>Me and @alexcrichton were discussing this via Zulip. The <code>stack_load</code> gets <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3ff3994a128e900dfe7a465c7f36fc5a074d07ef/cranelift/codegen/src/legalizer/mod.rs#L85-L87\">translated into</a> a <code>load.f64x2 notrap aligned v34</code>, and that's why we do the load sinking in the backend.</p>\n<p>Is <code>stack_load</code> required to be sufficiently aligned? Reading the <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.stack_load\">docs</a>, they don't mention anything. So it might just be a case of lets update the docs and the fuzzer.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">69</span>\n\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">28</span>\n<span class=\"w\">    </span><span class=\"n\">stack_store</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">36</span>\n\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_load</span><span class=\"p\">.</span><span class=\"n\">f64x2</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"o\">+</span><span class=\"mi\">23</span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">extractlane</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v30</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.0</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The test to pass</p>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.25</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">afonso</span><span class=\"o\">/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lmao</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span>\n<span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span>\n</code></pre></div>\n<p>This passes on AArch64 and S390x.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Generated assembly:&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Disassembly</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">60</span><span class=\"w\"> </span><span class=\"n\">bytes</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">   </span><span class=\"mi\">8</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x14</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r10</span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">db</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span>:   <span class=\"mi\">4</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">a</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r10</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">13</span>:   <span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">c</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x1c</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span>\n<span class=\"w\">  </span><span class=\"mi\">18</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">f6</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">b</span>:   <span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"n\">e</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x24</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"mi\">23</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">26</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"n\">e</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">29</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\">          </span><span class=\"n\">leaq</span><span class=\"w\">    </span><span class=\"mh\">0x17</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"n\">e</span>:   <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">70</span><span class=\"w\"> </span><span class=\"mi\">07</span><span class=\"w\"> </span><span class=\"n\">ee</span><span class=\"w\">          </span><span class=\"n\">pshufd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mh\">0xee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span>\n<span class=\"w\">  </span><span class=\"mi\">33</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">c4</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">             </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x50</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">37</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">a</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"n\">b</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>&lt;/details&gt;<br>\n</p>\n</blockquote>",
        "id": 342138925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678905575
    }
]