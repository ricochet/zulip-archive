[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2237#issuecomment-877493863\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2237\">issue #2237</a>:</p>\n<blockquote>\n<p>And there is even trouble with <code>b8</code> and <code>b1</code> as @afonso360 points out <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3062/files#r665657148\">here</a>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">C</span>:<span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">Afonso</span><span class=\"err\">\\</span><span class=\"n\">CLionProjects</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"err\">\\</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">debug</span><span class=\"err\">\\</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">worker</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">argument</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">mismatch</span>: <span class=\"nc\">b8</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"err\">\\</span><span class=\"n\">filetests</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">function_runner</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">200</span>:<span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">panicked</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">worker</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"nc\">argument</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">mismatch</span>: <span class=\"nc\">b8</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"> </span><span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 245514077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1625870589
    },
    {
        "content": "<p>akirilov-arm labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2237\">issue #2237</a>:</p>\n<blockquote>\n<p>The <code>test run</code> directive compiles CLIF to machine code using the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/src/function_runner.rs\"><code>SingleFunctionCompiler</code></a>; the trampolines created <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/src/function_runner.rs#L326-L328\">here</a> are limited in that they only really understand how to handle small booleans: <code>b1</code> and <code>b8</code>. They should support larger boolean types, both scalar and vector.</p>\n<p>The underlying issue here is that Cranelift's <code>load</code> and <code>store</code> do not operate on boolean types so the trampoline must convert them from an equivalent integer type in memory to their boolean type before calling the compiled function (and vice-versa for the return).</p>\n</blockquote>",
        "id": 255808736,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1633122969
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2237\">issue #2237</a>:</p>\n<blockquote>\n<p>The <code>test run</code> directive compiles CLIF to machine code using the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/src/function_runner.rs\"><code>SingleFunctionCompiler</code></a>; the trampolines created <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/src/function_runner.rs#L326-L328\">here</a> are limited in that they only really understand how to handle small booleans: <code>b1</code> and <code>b8</code>. They should support larger boolean types, both scalar and vector.</p>\n<p>The underlying issue here is that Cranelift's <code>load</code> and <code>store</code> do not operate on boolean types so the trampoline must convert them from an equivalent integer type in memory to their boolean type before calling the compiled function (and vice-versa for the return).</p>\n</blockquote>",
        "id": 287621440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1656355916
    }
]