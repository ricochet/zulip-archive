[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257\">PR #3257</a> from <code>mmap-vec</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit reimplements the main serialization format for Wasmtime's<br>\nprecompiled artifacts. Previously they were generally a binary blob of<br>\n<code>bincode</code>-encoded metadata prefixed with some versioning information.<br>\nThe downside of this format, though, is that loading a precompiled<br>\nartifact required pushing all information through <code>bincode</code>. This is<br>\ninefficient when some data, such as trap/address tables, are rarely<br>\naccessed.</p>\n<p>The new format added in this commit is one which is designed to be<br>\n<code>mmap</code>-friendly. This means that the relevant parts of the precompiled<br>\nartifact are already page-aligned for updating permissions of pieces<br>\nhere and there. Additionally the artifact is optimized so that if data<br>\nis rarely read then we can delay reading it until necessary.</p>\n<p>The new artifact format for serialized modules is an ELF file. This is<br>\nnot a public API guarantee, so it cannot be relied upon. In the meantime<br>\nthough this is quite useful for exploring precompiled modules with<br>\nstandard tooling like <code>objdump</code>. The ELF file is already constructed as<br>\npart of module compilation, and this is the main contents of the<br>\nserialized artifact.</p>\n<p>THere is some extra information, though, not encoded in each module's<br>\nindividual ELF file such as type information. This information continues<br>\nto be <code>bincode</code>-encoded, but it's intended to be much smaller and much<br>\nfaster to deserialize. This extra information is appended to the end of<br>\nthe ELF file. This means that the original ELF file is still a valid ELF<br>\nfile, we just get to have extra bits at the end. More information on the<br>\nnew format can be found in the module docs of the serialization module<br>\nof Wasmtime.</p>\n<p>Another refatoring implemented as part of this commit is to deserialize<br>\nand store object files directly in <code>mmap</code>-backed storage. This avoids<br>\nthe need to copy bytes after the artifact is loaded into memory for each<br>\ncompiled module, and in a future commit it opens up the door to avoiding<br>\ncopying the text section into a <code>CodeMemory</code>. For now, though, the main<br>\nchange is that copies are not necessary when loading from a precompiled<br>\ncompilation artifact once the artifact is itself in mmap-based memory.</p>\n<p>To assist with managing <code>mmap</code>-based memory a new <code>MmapVec</code> type was<br>\nadded to <code>wasmtime_jit</code> which acts as a form of <code>Vec&lt;T&gt;</code> backed by a<br>\n<code>wasmtime_runtime::Mmap</code>. This type notably supports <code>drain(..N)</code> to<br>\nslice the buffer into disjoint regions that are all separately owned,<br>\nsuch as having a separately owned window into one artifact for all<br>\nobject files contained within.</p>\n<p>Finally this commit implements a small refactoring in <code>wasmtime-cache</code><br>\nto use the standard artifact format for cache entries rather than a<br>\nbincode-encoded version. This required some more hooks for<br>\nserializing/deserializing but otherwise the crate still performs as<br>\nbefore.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 250947027,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630077429
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/peterhuene\">peterhuene</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257\">PR #3257</a>.</p>",
        "id": 250947034,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630077432
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257\">PR #3257</a> from <code>mmap-vec</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit reimplements the main serialization format for Wasmtime's<br>\nprecompiled artifacts. Previously they were generally a binary blob of<br>\n<code>bincode</code>-encoded metadata prefixed with some versioning information.<br>\nThe downside of this format, though, is that loading a precompiled<br>\nartifact required pushing all information through <code>bincode</code>. This is<br>\ninefficient when some data, such as trap/address tables, are rarely<br>\naccessed.</p>\n<p>The new format added in this commit is one which is designed to be<br>\n<code>mmap</code>-friendly. This means that the relevant parts of the precompiled<br>\nartifact are already page-aligned for updating permissions of pieces<br>\nhere and there. Additionally the artifact is optimized so that if data<br>\nis rarely read then we can delay reading it until necessary.</p>\n<p>The new artifact format for serialized modules is an ELF file. This is<br>\nnot a public API guarantee, so it cannot be relied upon. In the meantime<br>\nthough this is quite useful for exploring precompiled modules with<br>\nstandard tooling like <code>objdump</code>. The ELF file is already constructed as<br>\npart of module compilation, and this is the main contents of the<br>\nserialized artifact.</p>\n<p>THere is some extra information, though, not encoded in each module's<br>\nindividual ELF file such as type information. This information continues<br>\nto be <code>bincode</code>-encoded, but it's intended to be much smaller and much<br>\nfaster to deserialize. This extra information is appended to the end of<br>\nthe ELF file. This means that the original ELF file is still a valid ELF<br>\nfile, we just get to have extra bits at the end. More information on the<br>\nnew format can be found in the module docs of the serialization module<br>\nof Wasmtime.</p>\n<p>Another refatoring implemented as part of this commit is to deserialize<br>\nand store object files directly in <code>mmap</code>-backed storage. This avoids<br>\nthe need to copy bytes after the artifact is loaded into memory for each<br>\ncompiled module, and in a future commit it opens up the door to avoiding<br>\ncopying the text section into a <code>CodeMemory</code>. For now, though, the main<br>\nchange is that copies are not necessary when loading from a precompiled<br>\ncompilation artifact once the artifact is itself in mmap-based memory.</p>\n<p>To assist with managing <code>mmap</code>-based memory a new <code>MmapVec</code> type was<br>\nadded to <code>wasmtime_jit</code> which acts as a form of <code>Vec&lt;T&gt;</code> backed by a<br>\n<code>wasmtime_runtime::Mmap</code>. This type notably supports <code>drain(..N)</code> to<br>\nslice the buffer into disjoint regions that are all separately owned,<br>\nsuch as having a separately owned window into one artifact for all<br>\nobject files contained within.</p>\n<p>Finally this commit implements a small refactoring in <code>wasmtime-cache</code><br>\nto use the standard artifact format for cache entries rather than a<br>\nbincode-encoded version. This required some more hooks for<br>\nserializing/deserializing but otherwise the crate still performs as<br>\nbefore.</p>\n<p>cc #3230</p>\n</blockquote>",
        "id": 250947356,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630077563
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257#pullrequestreview-740971399\">PR review</a>.</p>",
        "id": 251030418,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630128834
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257#pullrequestreview-740971399\">PR review</a>.</p>",
        "id": 251030419,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630128834
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257#discussion_r697808764\">PR review comment</a>:</p>\n<blockquote>\n<p>Clippy nit:</p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>        Ok(ret)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 251030420,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630128834
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257#discussion_r697794561\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// Gets cached data if state matches, otherwise calls `compute`.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 251030421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630128834
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257#discussion_r697795660\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>    /// This `MmapVec` will shrink by `range.end` bytes, and it will only refer\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 251030422,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630128834
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257\">PR #3257</a> from <code>mmap-vec</code> to <code>main</code>.</p>",
        "id": 251236436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630333126
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3257\">PR #3257</a>.</p>",
        "id": 251236525,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630333161
    }
]