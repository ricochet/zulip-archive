[
    {
        "content": "<p><a href=\"https://github.com/meijies\">meijies</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">Issue #7976</a>.</p>",
        "id": 422729111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708563737
    },
    {
        "content": "<p><a href=\"https://github.com/meijies\">meijies</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">Issue #7976</a>.</p>",
        "id": 422729112,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708563737
    },
    {
        "content": "<p>meijies opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<h3>Summary</h3>\n<p>I am try to compile and execute a function which execute expression <code>(a + b) / c &lt; d</code> on each element in the arrays.  firstly, I generate the IR of this function with F64 type, that works fine. then I convert the function to F64X2 variant to see if there are any performance improvements, but unexpected memory problem occurs. My first intuition is that the problem lies in the function call section, but nothing i can found.</p>\n<h3>failure <code>.clif</code> Test Case for F64X2</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset_downward_to_clobbers</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">68</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span>\n<span class=\"w\">  </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">68</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block1</span>:\n  <span class=\"nc\">vmovupd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vaddpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vdivpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vcmppd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vmovdqu</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span>\n<span class=\"w\">  </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">jl</span><span class=\"w\">      </span><span class=\"n\">label2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"n\">block2</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block3</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>the test cases.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_jit_expr_on_array_v3_64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BATCH_SIZE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">       </span><span class=\"c1\">// jit compiled function.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_v3</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_on_array_v3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">into_parts</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The problem lies in the third iteration，blew is the debug screenshot<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13784260/3a2d97c6-b616-4902-8fca-7b6730d9e26d\">https://github.com/bytecodealliance/wasmtime/assets/13784260/3a2d97c6-b616-4902-8fca-7b6730d9e26d</a>)</p>\n<ol start=\"2\">\n<li>jit compiled function.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_v3</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CodegenContext</span>::<span class=\"n\">builder</span><span class=\"p\">().</span><span class=\"n\">debug</span><span class=\"p\">().</span><span class=\"n\">finish</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I8X2</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">create_func_gen_ctx</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"op_v3\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">()),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">()),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">special</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ArgumentPurpose</span>::<span class=\"n\">StructReturn</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_div</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_lt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fadd</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">div_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fdiv</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_div</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">fcmp</span><span class=\"p\">(</span><span class=\"n\">FloatCC</span>::<span class=\"n\">LessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">div_result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_lt</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_lhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_result_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">result_offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"n\">IntCC</span>::<span class=\"n\">SignedLessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">next_start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">brif</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">cond</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body_block</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">next_lhs_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_rhs_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_result_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">to_div</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">to_lt</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_start</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">end</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">exit_block</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>call jit comiled function</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_on_array_v3</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">BooleanArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ArrowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullBuffer</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BooleanBuffer</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">BooleanArray</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>sucessful <code>.clif</code> Test Case for F64</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset_downward_to_clobbers</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block1</span>:\n  <span class=\"nc\">vmovsd</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">vaddsd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">vdivsd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">ucomisd</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span>\n<span class=\"w\">  </span><span class=\"n\">setnbe</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r10b</span>\n<span class=\"w\">  </span><span class=\"n\">movb</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r10b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">jl</span><span class=\"w\">      </span><span class=\"n\">label2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"n\">block2</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block3</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) the test cases.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_jit_expr_on_array_v3_64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BATCH_SIZE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_v3</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_on_array_v3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">into_parts</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_on_array_v3</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">BooleanArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ArrowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullBuffer</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BooleanBuffer</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Boole</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422729113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708563738
    },
    {
        "content": "<p>meijies edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<h3>Summary</h3>\n<p>I am try to compile and execute a function which execute expression <code>(a + b) / c &lt; d</code> on each element in the arrays.  firstly, I generate the IR of this function with F64 type, that works fine. then I convert the function to F64X2 variant to see if there are any performance improvements, but unexpected memory problem occurs. My first intuition is that the problem lies in the function call section, but nothing i can found.</p>\n<h3>failure <code>.clif</code> Test Case for F64X2</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset_downward_to_clobbers</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">68</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span>\n<span class=\"w\">  </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">68</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block1</span>:\n  <span class=\"nc\">vmovupd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vaddpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vdivpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vcmppd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vmovdqu</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span>\n<span class=\"w\">  </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">jl</span><span class=\"w\">      </span><span class=\"n\">label2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"n\">block2</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block3</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>the test cases.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_jit_expr_on_array_v3_64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BATCH_SIZE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">       </span><span class=\"c1\">// jit compiled function.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_v3</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_on_array_v3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">into_parts</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The problem lies in the third iteration，blew is the debug screenshot<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13784260/3a2d97c6-b616-4902-8fca-7b6730d9e26d\">https://github.com/bytecodealliance/wasmtime/assets/13784260/3a2d97c6-b616-4902-8fca-7b6730d9e26d</a>)</p>\n<ol start=\"2\">\n<li>jit compiled function.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_v3</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CodegenContext</span>::<span class=\"n\">builder</span><span class=\"p\">().</span><span class=\"n\">debug</span><span class=\"p\">().</span><span class=\"n\">finish</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I8X2</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">create_func_gen_ctx</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"op_v3\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">()),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">()),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">special</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ArgumentPurpose</span>::<span class=\"n\">StructReturn</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_div</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_lt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fadd</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">div_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fdiv</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_div</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">fcmp</span><span class=\"p\">(</span><span class=\"n\">FloatCC</span>::<span class=\"n\">LessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">div_result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_lt</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_lhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_result_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">result_offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"n\">IntCC</span>::<span class=\"n\">SignedLessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">next_start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">brif</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">cond</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body_block</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">next_lhs_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_rhs_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_result_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">to_div</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">to_lt</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_start</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">end</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">exit_block</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>call jit comiled function</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_on_array_v3</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">BooleanArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ArrowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullBuffer</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BooleanBuffer</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">BooleanArray</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<blockquote>\n<p>also attch workable version.</p>\n</blockquote>\n<h3>sucessful <code>.clif</code> Test Case for F64</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset_downward_to_clobbers</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block1</span>:\n  <span class=\"nc\">vmovsd</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">vaddsd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">vdivsd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">ucomisd</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span>\n<span class=\"w\">  </span><span class=\"n\">setnbe</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r10b</span>\n<span class=\"w\">  </span><span class=\"n\">movb</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r10b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">jl</span><span class=\"w\">      </span><span class=\"n\">label2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"n\">block2</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block3</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) the test cases.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_jit_expr_on_array_v3_64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BATCH_SIZE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_v3</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_on_array_v3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">into_parts</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_on_array_v3</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">BooleanArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ArrowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullBuffer</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Boole</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422729490,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708564025
    },
    {
        "content": "<p>meijies edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<h3>Summary</h3>\n<p>I am try to compile and execute a function which execute expression <code>(a + b) / c &lt; d</code> on each element in the arrays.  firstly, I generate the IR of this function with F64 type, that works fine. then I convert the function to F64X2 variant to see if there are any performance improvements, but unexpected memory problem occurs. My first intuition is that the problem lies in the function call section, but nothing i can found. so the biggest problem is that I don't know how to troubleshoot this type of issue.</p>\n<h3>failure <code>.clif</code> Test Case for F64X2</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset_downward_to_clobbers</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">68</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span>\n<span class=\"w\">  </span><span class=\"n\">vpshufd</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">68</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block1</span>:\n  <span class=\"nc\">vmovupd</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vaddpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vdivpd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vcmppd</span><span class=\"w\">  </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span>\n<span class=\"w\">  </span><span class=\"n\">vmovdqu</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdx</span>\n<span class=\"w\">  </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">jl</span><span class=\"w\">      </span><span class=\"n\">label2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"n\">block2</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block3</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ol>\n<li>the test cases.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_jit_expr_on_array_v3_64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BATCH_SIZE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">       </span><span class=\"c1\">// jit compiled function.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_v3</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_on_array_v3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">into_parts</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The problem lies in the third iteration，blew is the debug screenshot<br>\n![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13784260/3a2d97c6-b616-4902-8fca-7b6730d9e26d\">https://github.com/bytecodealliance/wasmtime/assets/13784260/3a2d97c6-b616-4902-8fca-7b6730d9e26d</a>)</p>\n<ol start=\"2\">\n<li>jit compiled function.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_v3</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CodegenContext</span>::<span class=\"n\">builder</span><span class=\"p\">().</span><span class=\"n\">debug</span><span class=\"p\">().</span><span class=\"n\">finish</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">F64X2</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I8X2</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">create_func_gen_ctx</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"op_v3\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">()),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">()),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">special</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ArgumentPurpose</span>::<span class=\"n\">StructReturn</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">exit_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">splat</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">jump</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">p1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p7</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_div</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">to_lt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">4</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">5</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">body_block</span><span class=\"p\">)[</span><span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">data_type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fadd</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">div_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">fdiv</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_div</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">fcmp</span><span class=\"p\">(</span><span class=\"n\">FloatCC</span>::<span class=\"n\">LessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">div_result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to_lt</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_lhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_result_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">result_offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ref</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">next_start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">icmp</span><span class=\"p\">(</span><span class=\"n\">IntCC</span>::<span class=\"n\">SignedLessThan</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">next_start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">brif</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">cond</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">body_block</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"n\">next_lhs_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_rhs_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_result_ref</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">to_div</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">to_lt</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">next_start</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">end</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">exit_block</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">exit_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>call jit comiled function</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_on_array_v3</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">BooleanArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ArrowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullBuffer</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">BooleanBuffer</span>::<span class=\"n\">from_iter</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">BooleanArray</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<blockquote>\n<p>also attch workable version.</p>\n</blockquote>\n<h3>sucessful <code>.clif</code> Test Case for F64</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">unwind</span><span class=\"w\"> </span><span class=\"n\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">offset_upward_to_caller_sp</span>: <span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset_downward_to_clobbers</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">block0</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block1</span>:\n  <span class=\"nc\">vmovsd</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">vaddsd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">vdivsd</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span>\n<span class=\"w\">  </span><span class=\"n\">ucomisd</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm1</span>\n<span class=\"w\">  </span><span class=\"n\">setnbe</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">r10b</span>\n<span class=\"w\">  </span><span class=\"n\">movb</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r10b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">     </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">cmpq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">jl</span><span class=\"w\">      </span><span class=\"n\">label2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">j</span><span class=\"w\"> </span><span class=\"n\">label3</span>\n<span class=\"n\">block2</span>:\n  <span class=\"nc\">jmp</span><span class=\"w\">     </span><span class=\"n\">label1</span>\n<span class=\"n\">block3</span>:\n  <span class=\"nc\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">ret</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) the test cases.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_jit_expr_on_array_v3_64</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">BATCH_SIZE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_primitive_array</span>::<span class=\"o\">&lt;</span><span class=\"n\">Float64Type</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">BATCH_SIZE</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_v3</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">100000</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit_expr_on_array_v3</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">into_parts</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">jit_expr_on_array_v3</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Float64Array</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">op</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">BooleanArray</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ArrowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ArrowError</span>::<span class=\"n\">ComputeError</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"Cannot perform binary operation on arrays of different length\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">nulls</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NullBuffer</span>::<span class=\"k\">union</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">logical_nulls</span><span class=\"p\">().</span><span class=\"n\">as_ref</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">values</span><span class=\"p\">().</span><span class=\"n\">inner</span><span class=\"p\">().</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">a_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422729763,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708564220
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1958896632\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p>One problem here is that you use <code>fn(...)</code> instead of <code>extern \"C\" fn(...)</code> as function signature for the jitted function. The former will use the rust abi, which is unstable. This is likely not the cause of the crash though.</p>\n<p>Try turning the <code>ArgumentPurpose::StructReturn</code> argument into a regular argument. <code>ArgumentPurpose::StructReturn</code> may cause the arg to be passed different from a regular arg depending om the calling convention. In addition it needs to be the first argument. In your code you don't need it as you can define how to pass return values yourself. You aren't restricted to matching the abi of an existing C function.</p>\n</blockquote>",
        "id": 422765067,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708588905
    },
    {
        "content": "<p>meijies <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959051945\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p>@bjorn3 I have changed my code as you suggested, but don't work. Then I found libc pthread invalid next size(fast) usually due to illegal writing to memory，so i changed the result vector capacity and test successfully, but I don't known why?</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- let mut res: Vec&lt;bool&gt; = Vec::with_capacity((a.len() / 2) * 2);</span>\n<span class=\"gi\">+ let mut res: Vec&lt;bool&gt; = Vec::with_capacity((a.len() / 2) * 2+10);</span>\n</code></pre></div>\n</blockquote>",
        "id": 422779184,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708594669
    },
    {
        "content": "<p>meijies edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959051945\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p>@bjorn3 I have changed my code as you suggested, but don't work. Then I found libc pthread invalid next size(fast) usually due to illegal writing to memory，so i changed the result vector capacity and test successfully, but I don't known why writing beyond boundaries</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- let mut res: Vec&lt;bool&gt; = Vec::with_capacity((a.len() / 2) * 2);</span>\n<span class=\"gi\">+ let mut res: Vec&lt;bool&gt; = Vec::with_capacity((a.len() / 2) * 2+10);</span>\n</code></pre></div>\n</blockquote>",
        "id": 422779474,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708594773
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959076651\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p>a.len() / 2 * 2 rounds down. If you meant to round up you need to add 1 before dividing.</p>\n</blockquote>",
        "id": 422781412,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708595481
    },
    {
        "content": "<p>meijies <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959103727\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p>yes, a.len() / 2 * 2 rounds down may result in one less element being calculated, but shouldn't lead to writing beyond boundary. further more the memory issue occurs randomly and test failure even increase the capacity to (a.len() / 2) * 2+4</p>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">- let mut res: Vec&lt;bool&gt; = Vec::with_capacity((a.len() / 2) * 2);</span>\n<span class=\"gi\">+ let mut res: Vec&lt;bool&gt; = Vec::with_capacity((a.len() / 2) * 2+4);</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422783775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708596336
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959174298\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p>Maybe you could try running in valgrind to see if it reports the issue? Valgrind can handle JIT compilation just fine unlike asan and miri.</p>\n</blockquote>",
        "id": 422789746,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708598627
    },
    {
        "content": "<p>meijies <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959268513\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Memcheck</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detector</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Copyright</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2002</span><span class=\"o\">-</span><span class=\"mi\">2017</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"w\"> </span><span class=\"n\">GPL</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">Julian</span><span class=\"w\"> </span><span class=\"n\">Seward</span><span class=\"w\"> </span><span class=\"n\">et</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">.</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Using</span><span class=\"w\"> </span><span class=\"n\">Valgrind</span><span class=\"o\">-</span><span class=\"mf\">3.18.1</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">LibVEX</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">copyright</span><span class=\"w\"> </span><span class=\"n\">info</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Command</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">it_works</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">te</span>:\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Invalid</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4BE601F</span>: <span class=\"o\">???</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191C2B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">314</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192DAB</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">393</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF9E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDF0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x193205</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x198246</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"p\">{{</span><span class=\"n\">vtable</span><span class=\"p\">.</span><span class=\"n\">shim</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">529</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7B8E84</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">Thread</span>::<span class=\"n\">new</span>::<span class=\"n\">thread_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2016</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A09AC2</span>: <span class=\"nc\">start_thread</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pthread_create</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">442</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A9AA03</span>: <span class=\"nc\">clone</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">clone</span><span class=\"p\">.</span><span class=\"n\">S</span>:<span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"mh\">0x4be5584</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mi\">68</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">74</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">'</span><span class=\"na\">d</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B6A98</span>: <span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2A6D18</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate_in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">199</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">145</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">672</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">with_capacity</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">481</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191B6A</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">312</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192DAB</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">393</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF9E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDF0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x193205</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">12.82</span><span class=\"n\">s</span>\n\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">HEAP</span><span class=\"w\"> </span><span class=\"n\">SUMMARY</span>:\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">     </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">exit</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">209</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">   </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">usage</span>: <span class=\"mi\">301</span><span class=\"p\">,</span><span class=\"mi\">154</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">301</span><span class=\"p\">,</span><span class=\"mi\">147</span><span class=\"w\"> </span><span class=\"n\">frees</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"p\">,</span><span class=\"mi\">607</span><span class=\"p\">,</span><span class=\"mi\">330</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">allocated</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F7A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x634062</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1259</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C42</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8499</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8352</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623482</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5271C9</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">once</span>::<span class=\"n\">futex</span>::<span class=\"n\">Once</span>::<span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6232EF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C81BC</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">375</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8682</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_try_init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">298</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F7A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x634517</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1282</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C42</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8499</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8352</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623482</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5271C9</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">once</span>::<span class=\"n\">futex</span>::<span class=\"n\">Once</span>::<span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6232EF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C81BC</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">375</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8682</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_try_init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">298</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x484DCD3</span>: <span class=\"nc\">realloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x789533</span>: <span class=\"nc\">realloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">136</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x789533</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">grow_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">213</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x789A0F</span>: <span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>::<span class=\"n\">grow</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">266</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x780FE9</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">finish_grow</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">518</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2C89E8</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">grow_amortized</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">433</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2D2568</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">reserve_for_push</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">318</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x28E4A1</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">push</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1919</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x634A67</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1301</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C42</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8499</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8352</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623482</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F7A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x633E29</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1246</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C42</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8499</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8352</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623482</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5271C9</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">once</span>::<span class=\"n\">futex</span>::<span class=\"n\">Once</span>::<span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6232EF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C81BC</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">375</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8682</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_try_init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">298</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1C6623</span>: <span class=\"nc\">test</span>::<span class=\"n\">test_main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1C762C</span>: <span class=\"nc\">test</span>::<span class=\"n\">test_main_static</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191F82</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F71A</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FFDD</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">backtrace</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">155</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FB00</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">166</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7A8C20</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">284</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FAD9</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">165</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191FAD</span>: <span class=\"nc\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">meijie</span><span class=\"o\">/</span><span class=\"n\">Work</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">prototype</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3287</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F7A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x568527</span>: <span class=\"nc\">ahash</span>::<span class=\"n\">random_state</span>::<span class=\"n\">get_fixed_seeds</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">218</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">108775</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x69B689</span>: <span class=\"nc\">once_cell</span>::<span class=\"n\">race</span>::<span class=\"n\">once_box</span>::<span class=\"n\">OnceBox</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422798191,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708601783
    },
    {
        "content": "<p>meijies edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959268513\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">valgrind</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">tool</span><span class=\"o\">=</span><span class=\"n\">memcheck</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">leak</span><span class=\"o\">-</span><span class=\"n\">check</span><span class=\"o\">=</span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Memcheck</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detector</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Copyright</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2002</span><span class=\"o\">-</span><span class=\"mi\">2017</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"w\"> </span><span class=\"n\">GPL</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">Julian</span><span class=\"w\"> </span><span class=\"n\">Seward</span><span class=\"w\"> </span><span class=\"n\">et</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">.</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Using</span><span class=\"w\"> </span><span class=\"n\">Valgrind</span><span class=\"o\">-</span><span class=\"mf\">3.18.1</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">LibVEX</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">copyright</span><span class=\"w\"> </span><span class=\"n\">info</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Command</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span>\n\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">it_works</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">te</span>:\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Invalid</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4BE601F</span>: <span class=\"o\">???</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191BF6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">314</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192D7B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">393</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF6E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDC0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1931D5</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x198216</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"p\">{{</span><span class=\"n\">vtable</span><span class=\"p\">.</span><span class=\"n\">shim</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">529</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7B8E54</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">Thread</span>::<span class=\"n\">new</span>::<span class=\"n\">thread_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2016</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A09AC2</span>: <span class=\"nc\">start_thread</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pthread_create</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">442</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A9AA03</span>: <span class=\"nc\">clone</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">clone</span><span class=\"p\">.</span><span class=\"n\">S</span>:<span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"mh\">0x4be557a</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">'</span><span class=\"na\">d</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B6A68</span>: <span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2A6CE8</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate_in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">199</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">145</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">672</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">with_capacity</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">481</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191B33</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">312</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192D7B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">393</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF6E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDC0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1931D5</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">13.05</span><span class=\"n\">s</span>\n\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">HEAP</span><span class=\"w\"> </span><span class=\"n\">SUMMARY</span>:\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">     </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">exit</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">209</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">   </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">usage</span>: <span class=\"mi\">301</span><span class=\"p\">,</span><span class=\"mi\">154</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">301</span><span class=\"p\">,</span><span class=\"mi\">147</span><span class=\"w\"> </span><span class=\"n\">frees</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">607</span><span class=\"p\">,</span><span class=\"mi\">330</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">allocated</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">096</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">definitely</span><span class=\"w\"> </span><span class=\"n\">lost</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x484DE30</span>: <span class=\"nc\">memalign</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x484DF92</span>: <span class=\"nc\">posix_memalign</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7B3898</span>: <span class=\"nc\">__rdl_alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">102</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x22FD89</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x232500</span>: <span class=\"nc\">cranelift_jit</span>::<span class=\"n\">memory</span>::<span class=\"n\">PtrLen</span>::<span class=\"n\">with_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">59</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x232A79</span>: <span class=\"nc\">cranelift_jit</span>::<span class=\"n\">memory</span>::<span class=\"n\">Memory</span>::<span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">170</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x247203</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_jit</span>::<span class=\"n\">backend</span>::<span class=\"n\">JITModule</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"n\">module</span>::<span class=\"n\">Module</span><span class=\"o\">&gt;</span>::<span class=\"n\">define_function_with_control_plane</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">backend</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">697</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1D2DEA</span>: <span class=\"nc\">cranelift_module</span>::<span class=\"n\">module</span>::<span class=\"n\">Module</span>::<span class=\"n\">define_function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">958</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1D17A3</span>: <span class=\"nc\">core</span>::<span class=\"n\">gen</span>::<span class=\"n\">ctx</span>::<span class=\"n\">CodegenContext</span>::<span class=\"n\">finalize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x19165C</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">283</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192CA1</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">391</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">LEAK</span><span class=\"w\"> </span><span class=\"n\">SUMMARY</span>:\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">definitely</span><span class=\"w\"> </span><span class=\"n\">lost</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">096</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">indirectly</span><span class=\"w\"> </span><span class=\"n\">lost</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">      </span><span class=\"n\">possibly</span><span class=\"w\"> </span><span class=\"n\">lost</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span>: <span class=\"mi\">113</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\">         </span><span class=\"n\">suppressed</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Reachable</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">those</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">pointer</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">shown</span><span class=\"p\">.</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">To</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">them</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">with</span>: <span class=\"o\">--</span><span class=\"n\">leak</span><span class=\"o\">-</span><span class=\"n\">check</span><span class=\"o\">=</span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">leak</span><span class=\"o\">-</span><span class=\"n\">kinds</span><span class=\"o\">=</span><span class=\"n\">all</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">lists</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">suppressed</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">with</span>: <span class=\"o\">-</span><span class=\"n\">s</span>\n<span class=\"o\">==</span><span class=\"mi\">111584</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"n\">SUMMARY</span>: <span class=\"mi\">1000001</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">contexts</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">suppressed</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422800700,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708602895
    },
    {
        "content": "<p>meijies edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959268513\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Memcheck</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detector</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Copyright</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2002</span><span class=\"o\">-</span><span class=\"mi\">2017</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"w\"> </span><span class=\"n\">GPL</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">Julian</span><span class=\"w\"> </span><span class=\"n\">Seward</span><span class=\"w\"> </span><span class=\"n\">et</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">.</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Using</span><span class=\"w\"> </span><span class=\"n\">Valgrind</span><span class=\"o\">-</span><span class=\"mf\">3.18.1</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">LibVEX</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">copyright</span><span class=\"w\"> </span><span class=\"n\">info</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Command</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">it_works</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">te</span>:\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Invalid</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4BE601F</span>: <span class=\"o\">???</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191BF6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">314</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192D7B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">393</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF6E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDC0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1931D5</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x198216</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"p\">{{</span><span class=\"n\">vtable</span><span class=\"p\">.</span><span class=\"n\">shim</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">529</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7B8E54</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">Thread</span>::<span class=\"n\">new</span>::<span class=\"n\">thread_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2016</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A09AC2</span>: <span class=\"nc\">start_thread</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pthread_create</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">442</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A9AA03</span>: <span class=\"nc\">clone</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">clone</span><span class=\"p\">.</span><span class=\"n\">S</span>:<span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"mh\">0x4be557a</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">'</span><span class=\"na\">d</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B6A68</span>: <span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2A6CE8</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate_in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">199</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">145</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">672</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">with_capacity</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">481</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191B33</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">312</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192D7B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">393</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">384</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF6E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDC0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1931D5</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">13.16</span><span class=\"n\">s</span>\n\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">HEAP</span><span class=\"w\"> </span><span class=\"n\">SUMMARY</span>:\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">     </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">exit</span>: <span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">209</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">   </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"n\">heap</span><span class=\"w\"> </span><span class=\"n\">usage</span>: <span class=\"mi\">301</span><span class=\"p\">,</span><span class=\"mi\">154</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">301</span><span class=\"p\">,</span><span class=\"mi\">147</span><span class=\"w\"> </span><span class=\"n\">frees</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">,</span><span class=\"mi\">607</span><span class=\"p\">,</span><span class=\"mi\">330</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">allocated</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">1</span>:\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F4A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x634032</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1259</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C12</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8469</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8322</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623452</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x527199</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">once</span>::<span class=\"n\">futex</span>::<span class=\"n\">Once</span>::<span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6232BF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C818C</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">375</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8652</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_try_init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">298</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F4A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6344E7</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1282</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C12</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8469</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8322</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623452</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x527199</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">once</span>::<span class=\"n\">futex</span>::<span class=\"n\">Once</span>::<span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6232BF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C818C</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">375</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8652</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_try_init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">298</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x484DCD3</span>: <span class=\"nc\">realloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x789503</span>: <span class=\"nc\">realloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">136</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x789503</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">grow_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">213</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7899DF</span>: <span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>::<span class=\"n\">grow</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">266</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x780FB9</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">finish_grow</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">518</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2C89B8</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">grow_amortized</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">433</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2D2538</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">reserve_for_push</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">318</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x28E471</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">push</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1919</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x634A37</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1301</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C12</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8469</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8322</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623452</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F4A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x633DF9</span>: <span class=\"nc\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">create_reg_env_systemv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1246</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x632C12</span>: <span class=\"o\">&lt;</span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">isa</span>::<span class=\"n\">x64</span>::<span class=\"n\">abi</span>::<span class=\"n\">X64ABIMachineSpec</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">abi</span>::<span class=\"n\">ABIMachineSpec</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_machine_env</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">802</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8469</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_init</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8322</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">376</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x623452</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x527199</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">once</span>::<span class=\"n\">futex</span>::<span class=\"n\">Once</span>::<span class=\"n\">call</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">124</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6232BF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once</span>::<span class=\"n\">Once</span>::<span class=\"n\">call_once_force</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">208</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C818C</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">375</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5C8652</span>: <span class=\"nc\">std</span>::<span class=\"n\">sync</span>::<span class=\"n\">once_lock</span>::<span class=\"n\">OnceLock</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">get_or_try_init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">once_lock</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">298</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1C65F3</span>: <span class=\"nc\">test</span>::<span class=\"n\">test_main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1C75FC</span>: <span class=\"nc\">test</span>::<span class=\"n\">test_main_static</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">162</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191F52</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F71A</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FFDD</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">backtrace</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">155</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FB00</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">166</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7A8BF0</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">284</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FAD9</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">165</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191F7D</span>: <span class=\"nc\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">meijie</span><span class=\"o\">/</span><span class=\"n\">Work</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">prototype</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">reachable</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">loss</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">7</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3257</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B2F4A</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">exchange_malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5684F7</span>: <span class=\"nc\">ahash</span>::<span class=\"n\">random_state</span>::<span class=\"n\">get_fixed_seeds</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">218</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">111797</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x69B659</span>: <span class=\"nc\">once_cell</span>::<span class=\"n\">race</span>::<span class=\"n\">once_box</span>::<span class=\"n\">Onc</span>\n<span class=\"p\">[</span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"p\">]</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 422801030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708603015
    },
    {
        "content": "<p>meijies edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976#issuecomment-1959268513\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7976\">issue #7976</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">➜</span><span class=\"w\">  </span><span class=\"n\">query</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"o\">-</span><span class=\"n\">prototype</span><span class=\"w\"> </span><span class=\"n\">git</span>:<span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">✗</span><span class=\"w\"> </span><span class=\"n\">valgrind</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">tool</span><span class=\"o\">=</span><span class=\"n\">memcheck</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">leak</span><span class=\"o\">-</span><span class=\"n\">check</span><span class=\"o\">=</span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">show</span><span class=\"o\">-</span><span class=\"n\">leak</span><span class=\"o\">-</span><span class=\"n\">kinds</span><span class=\"o\">=</span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Memcheck</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">detector</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Copyright</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2002</span><span class=\"o\">-</span><span class=\"mi\">2017</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"w\"> </span><span class=\"n\">GPL</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">Julian</span><span class=\"w\"> </span><span class=\"n\">Seward</span><span class=\"w\"> </span><span class=\"n\">et</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">.</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Using</span><span class=\"w\"> </span><span class=\"n\">Valgrind</span><span class=\"o\">-</span><span class=\"mf\">3.18.1</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">LibVEX</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">copyright</span><span class=\"w\"> </span><span class=\"n\">info</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Command</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">experiment</span><span class=\"o\">-</span><span class=\"mf\">56e243</span><span class=\"n\">a5137b130b</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span>\n\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">tests</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">tests</span>::<span class=\"n\">it_works</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">te</span>:\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Invalid</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4BE601F</span>: <span class=\"o\">???</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191C09</span>: <span class=\"o\">**</span><span class=\"n\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">314</span><span class=\"p\">)</span><span class=\"o\">**</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192D9B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">394</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">385</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF8E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDE0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1931F5</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x198236</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"p\">{{</span><span class=\"n\">vtable</span><span class=\"p\">.</span><span class=\"n\">shim</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">529</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7B8E74</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">pal</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">Thread</span>::<span class=\"n\">new</span>::<span class=\"n\">thread_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2016</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A09AC2</span>: <span class=\"nc\">start_thread</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pthread_create</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">442</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4A9AA03</span>: <span class=\"nc\">clone</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">clone</span><span class=\"p\">.</span><span class=\"n\">S</span>:<span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"mh\">0x4be557a</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mi\">58</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">'</span><span class=\"na\">d</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x4848899</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">libexec</span><span class=\"o\">/</span><span class=\"n\">valgrind</span><span class=\"o\">/</span><span class=\"n\">vgpreload_memcheck</span><span class=\"o\">-</span><span class=\"n\">amd64</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3277</span>: <span class=\"nc\">alloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">98</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B3277</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span>::<span class=\"n\">alloc_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">181</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x5B6A88</span>: <span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Allocator</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">241</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2A6D08</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">raw_vec</span>::<span class=\"n\">RawVec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">A</span><span class=\"o\">&gt;</span>::<span class=\"n\">allocate_in</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">199</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">raw_vec</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">145</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">with_capacity_in</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alloc</span>::<span class=\"n\">alloc</span>::<span class=\"n\">Global</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">672</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18FDA5</span>: <span class=\"nc\">alloc</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">with_capacity</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">481</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x191B4B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">jit_expr_on_array_v3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">312</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x192D9B</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">394</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F8E6</span>: <span class=\"nc\">experiment</span>::<span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">385</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x18F6A5</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CCF8E</span>: <span class=\"nc\">test</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1CBDE0</span>: <span class=\"nc\">test</span>::<span class=\"n\">run_test</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">644</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1931F5</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">595</span><span class=\"p\">)</span>\n<span class=\"o\">==</span><span class=\"mi\">112967</span><span class=\"o\">==</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">expr</span>::<span class=\"n\">tests</span>::<span class=\"n\">test_jit_expr_on_array_v3_64</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">6.78</span><span class=\"n\">s</span>\n</code></pre></div>\n<p>![image](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/13784260/d84f7348-70f8-43de-afb8-5ffcc0040838\">https://github.com/bytecodealliance/wasmtime/assets/13784260/d84f7348-70f8-43de-afb8-5ffcc0040838</a>)</p>\n</blockquote>",
        "id": 422803213,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1708603845
    }
]