[
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284\">issue #4284</a>:</p>\n<blockquote>\n<p>Right now the given CLIF</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generates the following assembly</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, x64 allows the following encoding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried to fix that, by:</p>\n<ol>\n<li>Change the <code>src2</code> of <code>AluRM</code> from <code>Gpr</code> to <code>GprMemImm</code>, </li>\n<li>Add the corresponding encoding.</li>\n<li>Change the <code>alu_rm</code> constructor to take <code>GprMemImm</code></li>\n<li>Change the <code>x64_add_mem</code>&amp;co constructors to take <code>GprMemImm</code>.</li>\n</ol>\n<p>This is a bit stupid since <code>AluRM</code> already takes a memory operand, so there is no way to encode the <code>Mem</code> part of <code>GprMemImm</code>. I guess maybe we could introduce <code>RegImm</code> and <code>GprImm</code> types. But that feels wrong and redundant.</p>\n<p>Related issue where this first was brought up <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">https://github.com/bytecodealliance/wasmtime/issues/1925</a></p>\n</blockquote>",
        "id": 286520269,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655487222
    },
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284\">issue #4284</a>:</p>\n<blockquote>\n<p>Right now the given CLIF</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generates the following assembly</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, x64 allows the following encoding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried to fix that, by:</p>\n<ol>\n<li>Change the <code>src2</code> of <code>AluRM</code> from <code>Gpr</code> to <code>GprMemImm</code>, </li>\n<li>Add the corresponding encoding.</li>\n<li>Change the <code>alu_rm</code> constructor to take <code>GprMemImm</code></li>\n<li>Change the <code>x64_add_mem</code>&amp;co constructors to take <code>GprMemImm</code>.</li>\n</ol>\n<p>This is a bit stupid since <code>AluRM</code> already takes a memory operand, so there is no way to encode the <code>Mem</code> part of <code>GprMemImm</code>. I guess maybe we could introduce <code>RegImm</code> and <code>GprImm</code> types. But that feels wrong and redundant.</p>\n<p>Related issue where this first was brought up <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">https://github.com/bytecodealliance/wasmtime/issues/1925</a></p>\n</blockquote>",
        "id": 286520271,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655487222
    },
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284\">issue #4284</a>:</p>\n<blockquote>\n<p>Right now the given CLIF</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generates the following assembly</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, x64 allows the following encoding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried to fix that, by:</p>\n<ol>\n<li>Change the <code>src2</code> of <code>AluRM</code> from <code>Gpr</code> to <code>GprMemImm</code>, </li>\n<li>Add the corresponding encoding.</li>\n<li>Change the <code>alu_rm</code> constructor to take <code>GprMemImm</code></li>\n<li>Change the <code>x64_add_mem</code>&amp;co constructors to take <code>GprMemImm</code>.</li>\n</ol>\n<p>This is a bit stupid since <code>AluRM</code> already takes a memory operand, so there is no way to encode the <code>Mem</code> part of <code>GprMemImm</code>. I guess maybe we could introduce <code>RegImm</code> and <code>GprImm</code> types. But that feels wrong and redundant.</p>\n<p>Related issue where this first was brought up <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">https://github.com/bytecodealliance/wasmtime/issues/1925</a></p>\n</blockquote>",
        "id": 286520272,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655487222
    },
    {
        "content": "<p>pepyakin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284\">issue #4284</a>:</p>\n<blockquote>\n<p>Right now the given CLIF</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generates the following assembly</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, x64 allows the following encoding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried to fix that, by:</p>\n<ol>\n<li>Change the <code>src2</code> of <code>AluRM</code> from <code>Gpr</code> to <code>GprMemImm</code>, </li>\n<li>Add the corresponding encoding.</li>\n<li>Change the <code>alu_rm</code> constructor to take <code>GprMemImm</code></li>\n<li>Change the <code>x64_add_mem</code>&amp;co constructors to take <code>GprMemImm</code>.</li>\n</ol>\n<p>This is a bit stupid since <code>AluRM</code> already takes a memory operand, so there is no way to encode the <code>Mem</code> part of <code>GprMemImm</code>. I guess maybe we could introduce <code>RegImm</code> and <code>GprImm</code> types. But that feels wrong and redundant.</p>\n<p>Related issue where this first was brought up <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">https://github.com/bytecodealliance/wasmtime/issues/1925</a></p>\n</blockquote>",
        "id": 286520273,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655487223
    },
    {
        "content": "<p>pepyakin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284\">issue #4284</a>:</p>\n<blockquote>\n<p>Right now the given CLIF</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n</code></pre></div>\n<p>generates the following assembly</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, x64 allows the following encoding</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">addl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I tried to fix that, by:</p>\n<ol>\n<li>Change the <code>src2</code> of <code>AluRM</code> from <code>Gpr</code> to <code>GprMemImm</code>, </li>\n<li>Add the corresponding encoding.</li>\n<li>Change the <code>alu_rm</code> constructor to take <code>GprMemImm</code></li>\n<li>Change the <code>x64_add_mem</code>&amp;co constructors to take <code>GprMemImm</code>.</li>\n</ol>\n<p>This is a bit stupid since <code>AluRM</code> already takes a memory operand, so there is no way to encode the <code>Mem</code> part of <code>GprMemImm</code>. I guess maybe we could introduce <code>RegImm</code> and <code>GprImm</code> types. But that feels wrong and redundant.</p>\n<p>Related issue where this first was brought up <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">https://github.com/bytecodealliance/wasmtime/issues/1925</a></p>\n</blockquote>",
        "id": 286520278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1655487224
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284#issuecomment-1177970306\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4284\">issue #4284</a>:</p>\n<blockquote>\n<p>Hi @pepyakin -- sorry for the delayed response here. I think introducing <code>RegImm</code> is actually exactly what we want here: it models the possibilities given by the instruction in the type system. I'm happy to review a PR if you want to try your hand at that, otherwise we can save this issue for some future \"codegen quality\" sprint. Thanks!</p>\n</blockquote>",
        "id": 288838578,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1657214928
    }
]