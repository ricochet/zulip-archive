[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-757367186\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<p>@yurydelendik with the vmctx-always-alive hack, this seems to pass the gdb DWARF test locally on the new backend now (and I'm watching CI); thanks!</p>\n<p>Question above about ranges still stands; I want to make sure I got the conversions right.</p>\n<p>Otherwise, though, I think this is ready for review.</p>\n</blockquote>",
        "id": 222189900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610226430
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-757367255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<blockquote>\n<p>Perhaps the simplest would be to just add a hack that emits a value_label psuedo-instruction for vmctx at return -- this would keep it alive and ensure it can be accessed at least from a spillslot if not a register.</p>\n</blockquote>\n<p>It would be nice to have a more general way of keeping a value alive somewhere for debuginfo purposes.</p>\n</blockquote>",
        "id": 222189909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610226457
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-757368031\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Perhaps the simplest would be to just add a hack that emits a value_label psuedo-instruction for vmctx at return -- this would keep it alive and ensure it can be accessed at least from a spillslot if not a register.</p>\n</blockquote>\n<p>It would be nice to have a more general way of keeping a value alive somewhere for debuginfo purposes.</p>\n</blockquote>\n<p>Yes, I agree. I actually thought of a really simple/ugly (but maybe more robust) way of doing this -- allocate slots on the stack for all <code>ValueLabel</code>s, and emit actual stores to these slots every time a labeled value is defined (or the label is associated with a new value). Then the DWARF generation can always use SP-offset expressions.</p>\n<p>This would horribly pessimize code performance, though maybe not too much more than non-optimized debug code already is; but it would be <em>much</em> simpler and more likely to be correct in all sorts of edge cases. I see this as sort of in the same spirit as the idea proposed in #2459 for reftypes tracing: in both cases we instrument the CLIF to provide needed functionality so that the core compiler remains simpler and easier to verify. It is a little unconventional, though, so perhaps for another time.</p>\n</blockquote>",
        "id": 222190130,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1610226775
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-764972283\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<p>@fitzgen or @bnjbvr, would you be able to spare some time to review this? I don't want it to sit too long as it's starting to become stale (I'll rebase across the conflicts when handling any review comments). Thanks!</p>\n</blockquote>",
        "id": 223577649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611266866
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-764988028\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<p>Sure, I can review.</p>\n</blockquote>",
        "id": 223581482,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611268902
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-765019490\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<p>Thanks! I went over this again quickly and noticed a few typos, and decided to rebase while I was here. Also note there's a ridealong change to remove an outdated doc-comment about the backend pipeline (I can split that out if you'd like).</p>\n</blockquote>",
        "id": 223588307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611273798
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565#issuecomment-765802683\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2565\">Issue #2565</a>:</p>\n<blockquote>\n<p>@fitzgen I addressed your comments, but while double-checking the CI results one last time, realized the debug tests weren't actually running on CI (GitHub Actions config issue). On fixing that, discovered that the tests I was running locally were a subset of all debug tests, and two of the others were failing. These failures were due to (IMHO) not-super-important differences in codegen, so I added directives to ignore; but let me know if this is still r+ or if you'd like me to dig deeper. Thanks!</p>\n</blockquote>",
        "id": 223721464,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1611362853
    }
]