[
    {
        "content": "<p><a href=\"https://github.com/meithecatte\">meithecatte</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8959\">Issue #8959</a>.</p>",
        "id": 451614924,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073130
    },
    {
        "content": "<p><a href=\"https://github.com/meithecatte\">meithecatte</a> added the cranelift label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8959\">Issue #8959</a>.</p>",
        "id": 451614925,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073130
    },
    {
        "content": "<p>meithecatte opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8959\">issue #8959</a>:</p>\n<blockquote>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">optimize</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">brif</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v5</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">occurrences</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">optimization</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">iadd</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test meow.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>The <code>imul</code> stays in <code>block0</code>.</p>\n<h3>Actual Results</h3>\n<p>The <code>imul</code> is needlessly duplicated between <code>block1</code> and <code>block2</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: de29ce35982eba2060709491309ccc93b397168c (main at the time of writing)</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x86_64</p>\n</blockquote>",
        "id": 451614930,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073131
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8959#issuecomment-2229280516\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8959\">issue #8959</a>:</p>\n<blockquote>\n<p>That's true, but unfortunately I can't see a low-cost of way avoiding this: one would have to ask \"is this value demanded in every subtree of the domtree from this point\", at every point, and move it there; in the extreme, requiring an upward-pass on the domtree. Remember that we're reconstructing code placement as we recreate the CFG, we don't have any notion that there was a single <code>imul</code> in the parent block previously.</p>\n<p>I would consider this an issue in the same category as the \"instruction scheduling\" general concern (#6159 / #6260): the current algorithm is working as designed and produces correct code, but better heuristics could be better.</p>\n<p>I'm curious if you have an idea for a better algorithm here?</p>\n</blockquote>",
        "id": 451617910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721073636
    }
]