[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032#issuecomment-1117845236\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">issue #1032</a>:</p>\n<blockquote>\n<p>I'm doing some issue gardening here and I believe we have done <em>most</em> of the above by now: we have conditional move-based mitigations on heap accesses, table accesses, and branch table loads. We don't have any indirect predictor-specific mitigations yet, but we're working on incorporating hardware CFI techniques (see <a href=\"https://github.com/bytecodealliance/rfcs/issues/17\">bytecodealliance/rfcs#17</a>).</p>\n<p>I'll leave it up to our processor-vendor folks whether they think we have sufficient mitigations now, or with the CFI features, to mark this issue \"resolved\" -- @akirilov-arm, @abrown, @uweigand, others, what do you think?</p>\n</blockquote>",
        "id": 281212877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694955
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">issue #1032</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>You are probably well aware, but some mainstream compilers are emitting <a href=\"https://support.google.com/faqs/answer/7625886\">retpolines</a> to help mitigate <a href=\"https://spectreattack.com/spectre.pdf\">Spectre variant 2 attacks</a>. Do you have any plans to add  a similar capability to the cretonne code generator (and/or do you think it makes sense for cretonne to do this sort of thing)?</p>\n<p>Thanks,<br>\nJon</p>\n<p>/cc @tyler @pchickey </p>\n</blockquote>",
        "id": 281212899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694968
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">issue #1032</a>:</p>\n<blockquote>\n<p>Hello,</p>\n<p>You are probably well aware, but some mainstream compilers are emitting <a href=\"https://support.google.com/faqs/answer/7625886\">retpolines</a> to help mitigate <a href=\"https://spectreattack.com/spectre.pdf\">Spectre variant 2 attacks</a>. Do you have any plans to add  a similar capability to the cretonne code generator (and/or do you think it makes sense for cretonne to do this sort of thing)?</p>\n<p>Thanks,<br>\nJon</p>\n<p>/cc @tyler @pchickey </p>\n</blockquote>",
        "id": 281212939,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651694991
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032#issuecomment-1122751761\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">issue #1032</a>:</p>\n<blockquote>\n<p>Concerning the Arm architecture, Arm has published <a href=\"https://developer.arm.com/Arm%20Security%20Center/Speculative%20Processor%20Vulnerability\">documentation</a> on the various speculative execution vulnerabilities. Unfortunately the hardware CFI techniques that are discussed by the RFC proposal mentioned above do not really help with speculative execution attacks that target indirect branch predictors - they rely on instructions that raise processor exceptions, which in most implementations does not happen while executing speculatively; that is somewhat similar to the straight-line speculation vulnerability covered by the documentation.</p>\n<p>As for the attacks that apply to conditional direct branches, e.g. bounds checks, according to Arm's guidance the conditional moves should be followed by the <code>CSDB</code> <a href=\"https://armv8.arm.com/v8-A/A_profile/isa64/ISA_A64_xml_A_profile-2022-03/csdb.xml\">instruction</a> in order to future-proof the mitigations (that barrier instruction executes as a no-op on processors that predate it).</p>\n</blockquote>",
        "id": 281869565,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1652208848
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032#issuecomment-1122751761\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">issue #1032</a>:</p>\n<blockquote>\n<p>Concerning the Arm architecture, Arm has published <a href=\"https://developer.arm.com/Arm%20Security%20Center/Speculative%20Processor%20Vulnerability\">documentation</a> on the various speculative execution vulnerabilities. Unfortunately the hardware CFI techniques that are discussed by the RFC proposal mentioned above do not really help with speculative execution attacks that target indirect branch predictors - they rely on instructions that raise processor exceptions, which in most implementations does not happen while executing speculatively; that is somewhat similar to the straight-line speculation vulnerability covered by the documentation.</p>\n<p>As for the attacks that apply to conditional direct branches, e.g. bounds checks, according to Arm's guidance the conditional moves should be followed by the <code>CSDB</code> <a href=\"https://developer.arm.com/documentation/ddi0602/2022-06/Base-Instructions/CSDB--Consumption-of-Speculative-Data-Barrier-?lang=en\">instruction</a> in order to future-proof the mitigations (that barrier instruction executes as a no-op on processors that predate it).</p>\n</blockquote>",
        "id": 291102979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1658952211
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032#issuecomment-1249736886\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">issue #1032</a>:</p>\n<blockquote>\n<p>Recently I have done a little bit of research on Spectre-V2, and my conclusion is that on AArch64 the only efficient mitigation (so I exclude techniques such as retpolines) is provided by the <code>FEAT_CSV2_2</code> extension to the Arm architecture. It specifies a system register, <code>SCXTNUM_EL0</code>, that can be used to associate a software-defined context number with branch prediction, and as a result branch predictions for one context are unable to influence speculative execution in another one. So, one implementation approach would be to reserve a context number, e.g. <code>0</code>, for the WebAssembly runtime, and then come up with a number for each Wasm context that the runtime manages. On a transition from the runtime implementation to a Wasm module, for example, it would be necessary to execute:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">msr</span><span class=\"w\"> </span><span class=\"n\">scxtnum_el0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">xn</span><span class=\"w\"></span>\n<span class=\"n\">isb</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>Xn</code> holds the context number associated with the Wasm module. Note that no changes to the code generated from WebAssembly are necessary. Depending on the threat model, it might also make sense for each Wasm module to get its own runtime context number (that is, the runtime is not always going to use <code>0</code>), or even a (pseudo)random value (the <code>PACGA</code> instruction provided by the pointer authentication extension is an efficient way to obtain one). The hardware itself does not assign a special meaning to any context number value.</p>\n<p>The <code>FEAT_CSV2_2</code> extension is supported by recent processors such as Arm Cortex-A510, A710, A715, X2, and X3, and also Arm Neoverse N2. Unfortunately AFAIK the Linux kernel (as of version <code>6.0-rc5</code>) does not expose an interface such as <code>getauxval(AT_HWCAP2)</code> to query about the availability of that extension.</p>\n<p>We also have a similar attack to contend with, <a href=\"https://developer.arm.com/Arm%20Security%20Center/Spectre-BHB\">Spectre-BHB</a>. The mitigation against it is to execute a small loop that would be located right next to the operation setting <code>SCXTNUM_EL0</code> - the details are in <a href=\"https://developer.arm.com/documentation/102898/0107/?lang=en\">the white paper</a> that Arm has published about the attack. Future processors may have even more efficient mitigations - the white paper covers those too.</p>\n</blockquote>",
        "id": 299229573,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1663357057
    }
]