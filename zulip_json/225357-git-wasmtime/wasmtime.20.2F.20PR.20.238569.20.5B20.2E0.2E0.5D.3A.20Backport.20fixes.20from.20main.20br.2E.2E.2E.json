[
    {
        "content": "<p>dundargoc opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a> from <code>dundargoc:backport/release-20.0.0</code> to <code>bytecodealliance:release-20.0.0</code>.</p>",
        "id": 437420429,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715076495
    },
    {
        "content": "<p><strong>dundargoc</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a>.</p>",
        "id": 437420430,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715076495
    },
    {
        "content": "<p><strong>dundargoc</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a>.</p>",
        "id": 437420431,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715076495
    },
    {
        "content": "<p><strong>dundargoc</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a>.</p>",
        "id": 437420433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715076495
    },
    {
        "content": "<p>dundargoc edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p>[20.0.0]: Backport fixes from main to the release branch (#8331)</p>\n</li>\n<li>\n<p>cranelift: Include clobbers and outgoing args in stack limit (#8301)</p>\n</li>\n</ul>\n<p>When we compute the amount of space that we need in a stack frame for<br>\nthe stack limit check, we were only counting spill-slots and explicit<br>\nstack-slots. However, we need to account for all uses of the stack which<br>\noccur before the next stack limit check. That includes clobbers and any<br>\nstack arguments we want to pass to callees.</p>\n<p>The maximum amount that we could have missed by is essentially bounded<br>\nby the number of arguments which could be passed to a function. In<br>\nWasmtime, that is limited by <code>MAX_WASM_FUNCTION_PARAMS</code> in<br>\n<code>wasmparser::limits</code>, which is set to 1,000, and the largest arguments<br>\nare 16-byte vectors, so this could undercount by about 16kB.</p>\n<p>This is not a security issue according to Wasmtime's security policy<br>\n(<a href=\"https://docs.wasmtime.dev/security-what-is-considered-a-security-vulnerability.html\">https://docs.wasmtime.dev/security-what-is-considered-a-security-vulnerability.html</a>)<br>\nbecause it's the embedder's responsibility to ensure that the stack<br>\nwhere Wasmtime is running has enough extra space on top of the<br>\nconfigured <code>max_wasm_stack</code> size, and getting within 16kB of the host<br>\nstack size is too small to be safe even with this fixed.</p>\n<p>However, this was definitely not the intended behavior when stack limit<br>\nchecks or stack probes are enabled, and anyone with non-default<br>\nconfigurations or non-Wasmtime uses of Cranelift should evaluate whether<br>\nthis bug impacts your use case.</p>\n<p>(For reference: When Wasmtime is used in async mode or on Linux, the<br>\ndefault stack size is 1.5MB larger than the default WebAssembly stack<br>\nlimit, so such configurations are typically safe regardless. On the<br>\nother hand, on macOS the default non-async stack size for threads other<br>\nthan the main thread is the same size as the default for<br>\n<code>max_wasm_stack</code>, so that is too small with or without this bug fix.)</p>\n<ul>\n<li>fix: bindgen trappable_errors using unversion/versioned packages (#8305)</li>\n</ul>\n<p>Signed-off-by: Brian H &lt;<a href=\"mailto:brian.hardock@fermyon.com\">brian.hardock@fermyon.com</a>&gt;</p>\n<ul>\n<li>\n<p>Cranelift: Do not dedupe/GVN bitcasts from reference values (#8317)</p>\n</li>\n<li>\n<p>Cranelift: Do not dedupe/GVN bitcasts from reference values</p>\n</li>\n</ul>\n<p>Deduping bitcasts to integers from references can make the references no long<br>\nlonger live across safepoints, and instead only the bitcasted integer results<br>\nwould be. Because the reference is no longer live after the safepoint, the<br>\nsafepoint's stack map would not have an entry for the reference, which could<br>\nresult in the collector reclaiming an object too early, which is basically a<br>\nuse-after-free bug. Luckily, we sandbox the GC heap now, so such UAF bugs aren't<br>\nmemory unsafe, but they could potentially result in denial of service<br>\nattacks. Either way, we don't want those bugs!</p>\n<p>On the other hand, it is technically fine to dedupe bitcasts <em>to</em> reference<br>\ntypes. Doing so extends, rather than shortens, the live range of the GC<br>\nreference. This potentially adds it to more stack maps than it otherwise would<br>\nhave been in, which means it might unnecessarily survive a GC it otherwise<br>\nwouldn't have. But that is fine. Shrinking live ranges of GC references, and<br>\nremoving them from stack maps they otherwise should have been in, is the<br>\nproblematic transformation.</p>\n<ul>\n<li>\n<p>Add additional logging and debug asserts for GC stuff</p>\n</li>\n<li>\n<p>Handle out-of-bounds component sections (#8323)</p>\n</li>\n<li>\n<p>Handle out-of-bounds component sections</p>\n</li>\n</ul>\n<p>Fixes <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8322\">https://github.com/bytecodealliance/wasmtime/issues/8322</a></p>\n<ul>\n<li>Add a test that trancated component binaries don't cause panics</li>\n</ul>\n<hr>\n<p>Signed-off-by: Brian H &lt;<a href=\"mailto:brian.hardock@fermyon.com\">brian.hardock@fermyon.com</a>&gt;<br>\nCo-authored-by: Jamey Sharp &lt;<a href=\"mailto:jsharp@fastly.com\">jsharp@fastly.com</a>&gt;<br>\nCo-authored-by: Brian &lt;<a href=\"mailto:brian.hardock@fermyon.com\">brian.hardock@fermyon.com</a>&gt;<br>\nCo-authored-by: Nick Fitzgerald &lt;<a href=\"mailto:fitzgen@gmail.com\">fitzgen@gmail.com</a>&gt;</p>\n<ul>\n<li>\n<p>Backport 8066 to release-20.0.0 (#8351)</p>\n</li>\n<li>\n<p>wasmtime-c-api: switch from wasi-common to wasmtime-wasi (#8066)</p>\n</li>\n<li>\n<p>wasmtime-c-api: switch from using wasi-common to wasmtime-wasi</p>\n</li>\n<li>\n<p>Fix WasiP1Ctx references, and stop eagerly opening dirs for preopens</p>\n</li>\n<li>\n<p>Add OutputFile to skip async writes in stdout/stderr</p>\n</li>\n</ul>\n<hr>\n<p>Co-authored-by: Trevor Elliott &lt;<a href=\"mailto:telliott@fastly.com\">telliott@fastly.com</a>&gt;</p>\n<ul>\n<li>Add release notes for 8066</li>\n</ul>\n<hr>\n<p>Co-authored-by: Pat Hickey &lt;<a href=\"mailto:phickey@fastly.com\">phickey@fastly.com</a>&gt;</p>\n<ul>\n<li>\n<p>[20.0.0] More backports of fixes, mostly c-api related (#8368)</p>\n</li>\n<li>\n<p>c-api: Better differentiate between <code>wasm.h</code> and <code>wasmtime.h</code> APIs (#8344)</p>\n</li>\n</ul>\n<p>This renames some types and adds some type aliases to help us better distinguish<br>\nbetween <code>wasm.h</code> APIs and <code>wasmtime.h</code> APIs, primarily for <code>Store</code>-related<br>\ntypes. In general, <code>WasmFoo</code> is related to <code>wasm.h</code> and <code>WasmtimeFoo</code> is related<br>\nto <code>wasmtime.h</code>.</p>\n<ul>\n<li><code>StoreRef</code> -&gt; <code>WasmStoreRef</code></li>\n<li>Introduce the <code>WasmStore[Data]</code> and <code>WasmStoreContext[Mut]</code> aliases</li>\n<li><code>StoreData</code> -&gt; <code>WasmtimeStoreData</code></li>\n<li><code>CStoreContext[Mut]</code> -&gt; <code>WasmtimeStoreContext[Mut]</code></li>\n<li>\n<p>Introduce the <code>Wasmtime{Store,Caller}</code> aliases</p>\n</li>\n<li>\n<p><code>wasmtime-c-api</code>: Improve non-support of GC references in <code>wasm.h</code> APIs (#8345)</p>\n</li>\n<li>\n<p>c-api: Better differentiate between <code>wasm.h</code> and <code>wasmtime.h</code> APIs</p>\n</li>\n</ul>\n<p>This renames some types and adds some type aliases to help us better distinguish<br>\nbetween <code>wasm.h</code> APIs and <code>wasmtime.h</code> APIs, primarily for <code>Store</code>-related<br>\ntypes. In general, <code>WasmFoo</code> is related to <code>wasm.h</code> and <code>WasmtimeFoo</code> is related<br>\nto <code>wasmtime.h</code>.</p>\n<ul>\n<li><code>StoreRef</code> -&gt; <code>WasmStoreRef</code></li>\n<li>Introduce the <code>WasmStore[Data]</code> and <code>WasmStoreContext[Mut]</code> aliases</li>\n<li><code>StoreData</code> -&gt; <code>WasmtimeStoreData</code></li>\n<li><code>CStoreContext[Mut]</code> -&gt; <code>WasmtimeStoreContext[Mut]</code></li>\n<li>\n<p>Introduce the <code>Wasmtime{Store,Caller}</code> aliases</p>\n</li>\n<li>\n<p>c-api: Improve non-support of GC references in <code>wasm.h</code> APIs</p>\n</li>\n</ul>\n<p>A couple small tweaks: error message improvements, exhaustive matching, etc...</p>\n<ul>\n<li>\n<p>Fix running wasi-common tests on CI (#8353)</p>\n</li>\n<li>\n<p>Fix running wasi-common tests on CI</p>\n</li>\n</ul>\n<p>Turns out we haven't been running wasi-common tests for some time in CI<br>\nand they've started failing. Force enable the test at all times and then<br>\nfix the test failures. The test failures here were introduced in #8277<br>\nand weren't caught due to the test not running and the fix was to relax<br>\nthe implementation of <code>fd_pread</code> to avoid taking multiple mutable<br>\nborrows.</p>\n<ul>\n<li>\n<p>Fix CI</p>\n</li>\n<li>\n<p>Update release notes for 20.0.0 (#8358)</p>\n</li>\n</ul>\n<p>A busy release!</p>\n<ul>\n<li>Enable the gc feature by default in the c-api (#8356)</li>\n</ul>\n<p>Match the Wasmtime crate in this respect</p>\n<ul>\n<li>wasmtime-c-api: Add support for GC references in <code>wasmtime.h</code> APIs (#8346)</li>\n</ul>\n<p>Restores support for <code>externref</code> in <code>wasmtime_val_t</code>, methods for manipulating<br>\nthem and getting their wrapped host data, and examples/tests for these things.</p>\n<p>Additionally adds support for <code>anyref</code> in <code>wasmtime_val_t</code>, clone/delete methods<br>\nsimilar to those for <code>externref</code>, and a few <code>i31ref</code>-specific methods. Also adds<br>\nC and Rust example / test for working with <code>anyref</code>.</p>\n<ul>\n<li>\n<p>Fix calculation of gc refs in functions (#8355)</p>\n</li>\n<li>\n<p>Fix calculation of gc refs in functions</p>\n</li>\n</ul>\n<p>In addition to excluding i31 also exclude funcrefs.</p>\n<ul>\n<li>\n<p>Review comments</p>\n</li>\n<li>\n<p>Remove <code>wasi_config_preopen_socket</code> from C header (#8364)</p>\n</li>\n</ul>\n<p>This was removed in #8066</p>\n<ul>\n<li>\n<p>Tidy up some headers related to shared memory (#8366)</p>\n</li>\n<li>\n<p>Tidy up some headers related to shared memory</p>\n</li>\n<li>\n<p>Don't declare an anonymous <code>struct wasmtime_sharedmemory</code>, instead<br>\n<code>#include</code> the actual definition.</p>\n</li>\n<li>\n<p>Fix an issue where a header in <code>sharedmemory.h</code> referred to a type in<br>\n<code>extern.h</code> which wasn't <code>#include</code>'d. This function,<br>\n<code>wasmtime_sharedmemory_into_extern</code>, additionally isn't necessary as<br>\n  it's no different than manually constructing it. Fix this by removing<br>\n  this function.</p>\n</li>\n<li>\n<p>Run clang-format</p>\n</li>\n<li>\n<p>c-api: Fix alignment of <code>wasmtime_val_*</code> (#8363)</p>\n</li>\n<li>\n<p>c-api: Fix alignment of <code>wasmtime_val_*</code></p>\n</li>\n</ul>\n<p>This commit fixes an issue where <code>wasmtime_val_raw_t</code> had an incorrect<br>\nalignment. In Rust <code>ValRaw</code> contains a <code>u128</code> which has an alignment of<br>\n16 but in C the representation had a smaller alignment meaning that the<br>\nalignment of the two structures was different. This was seen to cause<br>\nalignment faults when structure were passed from C++ to Rust, for<br>\nexample.</p>\n<p>This commit changes the Rust representation of <code>ValRaw</code>'s <code>v128</code> field<br>\nto do the same as C which is to use <code>[u8; 16]</code>. This avoids the need to<br>\nraise the alignment in C which appears to be nontrivial. Cranelift is<br>\nappropriately adjusted to understand that loads/stores from <code>ValRaw</code> are<br>\nno longer aligned. Technically this only applies to the <code>v128</code> field but<br>\nit's not too bad to apply it to the other fields as well.</p>\n<ul>\n<li>\n<p>Try alternate syntax for alignof</p>\n</li>\n<li>\n<p>Use <code>--locked</code> on all <code>cargo install</code> in CI, also remove non-locked example (#8369)</p>\n</li>\n<li>\n<p>Use <code>--locked</code> on all <code>cargo install</code> in CI</p>\n</li>\n</ul>\n<p>Prevents any updates to rustc or crates from accidentally causing issues<br>\nby ensuring that the same set of deps is used over time.</p>\n<ul>\n<li>Remove rust/WASI markdown parser example</li>\n</ul>\n<p>The documentation referring to this example was removed in #6994 and<br>\nthat forgot to remove this as well. This example is building without a<br>\nlock file which is causing issues in #8368.</p>\n<hr>\n<p>Co-authored-by: Nick Fitzgerald &lt;<a href=\"mailto:fitzgen@gmail.com\">fitzgen@gmail.com</a>&gt;</p>\n<ul>\n<li>\n<p>c-api: Create <code>RootScope</code> where necessary (#8374) (#8375)</p>\n</li>\n<li>\n<p>c-api: Create <code>RootScope</code> where necessary</p>\n</li>\n</ul>\n<p>This commit changes the <code>wasmtime_val_t::{from_val, to_val}</code> methods to<br>\ntake a <code>RootScope</code> instead of any <code>AsContextMut</code>. This then required a<br>\nnumber of refactorings in callers to ensure that a <code>RootScope</code> was<br>\ncreated for any function that needed one. This is required to ensure<br>\nthat GC references in the C API aren't forced to live for the entire<br>\nlifetime of the store.</p>\n<p>This additionally added <code>*_unrooted</code> variants which do the same thing<br>\nbut don't require <code>RootScope</code>. This was needed for when the C API calls<br>\nout to the embedder through a function call because a new <code>RootScope</code><br>\nwouldn't work for return values (they're bound to a scope within the<br>\nclosure when we want them to outlive the closure). In these situations<br>\nthough we know a <code>RootScope</code> is already present at the entrypoint.</p>\n<p>Closes #8367</p>\n<ul>\n<li>\n<p>Review comments</p>\n</li>\n<li>\n<p>Fix use-after-free in externref example (#8410) (#8414)</p>\n</li>\n</ul>\n<p>[message truncated]</p>\n</blockquote>",
        "id": 437420451,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715076504
    },
    {
        "content": "<p>dundargoc edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a>:</p>\n<blockquote>\n<ul>\n<li>fix(c-api): give a cleaner error message if cargo isn't found (#8497)</li>\n</ul>\n<p>Instead of</p>\n<blockquote>\n<p>Performing build step for<br>\n'wasmtime-crate''WASMTIME_CARGO_BINARY-NOTFOUND' is not recognized as an<br>\ninternal or external command, operable program or batch file.</p>\n</blockquote>\n<p>this will now instead output</p>\n<blockquote>\n<p>\"cargo\" was not found. Ensure \"cargo\" is in PATH. Aborting...</p>\n</blockquote>\n<ul>\n<li>\n<p>c-api: use <code>--release</code> when MinSizeRel and RelWithDebInfo is used (#8549)</p>\n</li>\n<li>\n<p>build: add \"fastest-runtime\" profile for runtime optimization (#8554)</p>\n</li>\n</ul>\n<p>This is extremely useful for cases where the default optimizations just<br>\nare not enough.</p>\n<p>Background: <a href=\"https://github.com/neovim/neovim\">neovim</a> is interested to<br>\nadd wasmtime support in <a href=\"https://github.com/neovim/neovim/pull/28415\">https://github.com/neovim/neovim/pull/28415</a> but<br>\nwe noticed that including wasmtime, even when not using wasmtime<br>\ndirectly, heavily affects runtime performance. This is not only<br>\nreflected in the increased startuptime but affects the runtime<br>\nperformance overall.</p>\n<p>Here are the benchmarks for startuptimes for different configurations.<br>\nImportant to note is that all of runtime is affected, but the<br>\nstartuptime is a decent proxy to measure runtime performance:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">50.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">   </span><span class=\"mf\">1.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">32.8</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">12.3</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">48.3</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">54.4</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"mi\">56</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Wasm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lto</span><span class=\"o\">=</span><span class=\"n\">thin</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:     <span class=\"mf\">104.9</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">   </span><span class=\"mf\">3.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">86.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">12.7</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">99.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"mf\">111.1</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"mi\">26</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Wasm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lto</span><span class=\"o\">=</span><span class=\"kc\">true</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">83.8</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">   </span><span class=\"mf\">2.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">65.8</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">12.1</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">80.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">93.3</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n\n<span class=\"n\">Wasm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lto</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"s\">\"none\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">incremental</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">codegen</span><span class=\"o\">-</span><span class=\"n\">units</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">=</span><span class=\"s\">\"abort\"</span>\n<span class=\"w\">  </span><span class=\"n\">Time</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">mean</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"err\">σ</span><span class=\"p\">)</span>:      <span class=\"mf\">53.1</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\">   </span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"p\">[</span><span class=\"n\">User</span>: <span class=\"mf\">35.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">System</span>: <span class=\"mf\">12.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">  </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\"> </span><span class=\"n\">max</span><span class=\"p\">)</span>:    <span class=\"mf\">50.6</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"err\">…</span><span class=\"w\">  </span><span class=\"mf\">55.5</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\">    </span><span class=\"mi\">54</span><span class=\"w\"> </span><span class=\"n\">runs</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 437420628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715076591
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569#pullrequestreview-2043863935\">PR review</a>.</p>",
        "id": 437505231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715105603
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8569\">PR #8569</a>.</p>",
        "id": 437505237,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715105608
    }
]