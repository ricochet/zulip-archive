[
    {
        "content": "<p>Dakror opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<p>As i understand the documentation, wasmtime offers debugging support using DWARF data embedded in wasm binaries.<br>\nHowever this cannot be used when writing / generating raw Webassembly or converting it via wat2wasm. It would therefore be a great feature to add wat-source-level debugging (much like the early Chrome DevTools debugging) to atleast look at the text representation.</p>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<p>This would aid in debugging of immediate wasm code, where a high source representation is unavailable</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<p>When using a wat2wasm parser or when generating an IR by yourself, you'd need to track the binary locations of your expressions to emit DWARF yourself</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;</p>\n<p>I've also opened this issue over at binaryen, since this is what I'm using to generate raw WASM (via their C-API). However I think that this feature is generator independent and would best be implemented at the runtime.</p>\n</blockquote>",
        "id": 221531126,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609771651
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542#issuecomment-754141453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<p>FWIW, <code>-g</code> generates DWARF info that uses wasm bytecode offset for source locations. See <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/simulate.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/simulate.rs</a> </p>\n<p>That's what Chrome and Firefox DevTools do, UI do the rest of the WAT magic. </p>\n</blockquote>",
        "id": 221562063,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609785240
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542#issuecomment-754142594\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<blockquote>\n<p>When using a wat2wasm parser or when generating an IR by yourself, you'd need to track the binary locations of your expressions to emit DWARF yourself</p>\n</blockquote>\n<p>Looks like this is request for the wat2wasm tool(s) and not for wasmtime.</p>\n</blockquote>",
        "id": 221562338,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609785381
    },
    {
        "content": "<p>Dakror <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542#issuecomment-754221322\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<blockquote>\n<p>FWIW, <code>-g</code> generates DWARF info that uses wasm bytecode offset for source locations. See <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/simulate.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/simulate.rs</a></p>\n<p>That's what Chrome and Firefox DevTools do, UI do the rest of the WAT magic.</p>\n</blockquote>\n<p>Where am i to specify <code>-g</code>? When compiling wasmtime from source? I don't quite understand. I'm using the Wasm C api + the wasmtime specific functions to embed wasmtime right now.</p>\n</blockquote>",
        "id": 221581180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609794674
    },
    {
        "content": "<p>Dakror edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542#issuecomment-754221322\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<blockquote>\n<p>FWIW, <code>-g</code> generates DWARF info that uses wasm bytecode offset for source locations. See <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/simulate.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/debug/simulate.rs</a></p>\n<p>That's what Chrome and Firefox DevTools do, UI do the rest of the WAT magic.</p>\n</blockquote>\n<p>Where am i to specify <code>-g</code>? When compiling wasmtime from source? I don't quite understand. I'm using the Wasm C api + the wasmtime specific functions to embed wasmtime right now, and im setting <code>wasmtime_config_debug_info_set</code> to true.</p>\n</blockquote>",
        "id": 221581664,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609794893
    },
    {
        "content": "<p>Dakror <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542#issuecomment-754245396\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<p>I've found that this is actually working and my tools werent properly set up. So the only thing that remains is the need for a UI / lookup for the code section offset into WAT code.</p>\n</blockquote>",
        "id": 221586566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609797463
    },
    {
        "content": "<p>Dakror closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2542\">Issue #2542</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in<br>\nCranelift/Wasmtime and/or expect from it. You can answer the questions below if<br>\nthey're relevant and delete this text before submitting. Thanks for opening an<br>\nissue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in<br>\nCranelift/Wasmtime? --&gt;</p>\n<p>As i understand the documentation, wasmtime offers debugging support using DWARF data embedded in wasm binaries.<br>\nHowever this cannot be used when writing / generating raw Webassembly or converting it via wat2wasm. It would therefore be a great feature to add wat-source-level debugging (much like the early Chrome DevTools debugging) to atleast look at the text representation.</p>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift/Wasmtime? --&gt;</p>\n<p>This would aid in debugging of immediate wasm code, where a high source representation is unavailable</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or<br>\nalgorithms to use? --&gt;</p>\n<p>When using a wat2wasm parser or when generating an IR by yourself, you'd need to track the binary locations of your expressions to emit DWARF yourself</p>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they<br>\nbetter or worse than your proposal? --&gt;</p>\n<p>I've also opened this issue over at binaryen, since this is what I'm using to generate raw WASM (via their C-API). However I think that this feature is generator independent and would best be implemented at the runtime.</p>\n</blockquote>",
        "id": 221586567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1609797463
    }
]