[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, the clif fuzzer reported this issue.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I don't know.</p>\n<p>The <code>iadd_imm.i128</code> takes a i64 constant.</p>\n<p>The interpreter sign extends the constant, the backend does not.</p>\n<h3>Actual Results</h3>\n<p>Interpreter sign extends and returns 0 passing the test. </p>\n<p>Native returns <code>0x1_0000_0000_0000_0000</code> and fails.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: windows<br>\nArchitecture: x86</p>\n<h3>Extra Info</h3>\n<p>I'm pretty much seeking confirmation that we don't sign extend these constant values. I think it looks weird that we input -1, but get something completely different.</p>\n<p>cc: @cfallin @jameysharp <br>\n</p>\n</blockquote>",
        "id": 291511239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659299902
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, the clif fuzzer reported this issue.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I don't know.</p>\n<p>The <code>iadd_imm.i128</code> takes a i64 constant.</p>\n<p>The interpreter sign extends the constant, the backend does not.</p>\n<h3>Actual Results</h3>\n<p>Interpreter sign extends and returns 0 passing the test. </p>\n<p>Native returns <code>0x1_0000_0000_0000_0000</code> and fails.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: windows<br>\nArchitecture: x86</p>\n<h3>Extra Info</h3>\n<p>I'm pretty much seeking confirmation that we don't sign extend these constant values. I think it looks weird that we input -1, but get something completely different.</p>\n<p>cc: @cfallin @jameysharp <br>\n</p>\n</blockquote>",
        "id": 291511240,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659299902
    },
    {
        "content": "<p>afonso360 labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, the clif fuzzer reported this issue.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I don't know.</p>\n<p>The <code>iadd_imm.i128</code> takes a i64 constant.</p>\n<p>The interpreter sign extends the constant, the backend does not.</p>\n<h3>Actual Results</h3>\n<p>Interpreter sign extends and returns 0 passing the test. </p>\n<p>Native returns <code>0x1_0000_0000_0000_0000</code> and fails.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: windows<br>\nArchitecture: x86</p>\n<h3>Extra Info</h3>\n<p>I'm pretty much seeking confirmation that we don't sign extend these constant values. I think it looks weird that we input -1, but get something completely different.</p>\n<p>cc: @cfallin @jameysharp <br>\n</p>\n</blockquote>",
        "id": 291511241,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659299902
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1200496288\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>Backends should either sign extend, or the operand type should change to Uimm64 I think.</p>\n</blockquote>",
        "id": 291511343,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659300066
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1200496288\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>Backends should either sign extend, or the operand type should change to Uimm64 (which doesn't exist yet, unlike for some other sizes) I think.</p>\n</blockquote>",
        "id": 291511361,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659300101
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1201540263\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>Backends <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a47a82d2e5a7a76de158480e5c6b9dca62ebeeab/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L1616\">actually</a> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a47a82d2e5a7a76de158480e5c6b9dca62ebeeab/cranelift/codegen/src/isa/s390x/lower.rs#L242\">never</a> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a47a82d2e5a7a76de158480e5c6b9dca62ebeeab/cranelift/codegen/src/isa/x64/lower.rs#L2816\">see</a> the <code>iadd_imm</code> instruction. Looking at the operation <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a47a82d2e5a7a76de158480e5c6b9dca62ebeeab/cranelift/codegen/meta/src/shared/instructions.rs#L2047\">definition</a>, an issue that springs to me straight away is that the operation is defined for <code>I128</code>, but the immediate value is only a 64-bit one, and there is no rule how to handle that. So, IMHO the first step is to decide how to extend the value and change the operation description accordingly, and then update the rest of the code. I don't expect any backend changes at all.</p>\n</blockquote>",
        "id": 291612473,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659377334
    },
    {
        "content": "<p>afonso360 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1201550153\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>The <a href=\"https://docs.rs/cranelift-codegen/0.85.1/cranelift_codegen/ir/trait.InstBuilder.html#method.iadd_imm\">InstBuilder function for <code>iadd_imm</code></a> suggests that it should be sign extended, since it takes a <code>Imm64</code> (<br>\nI think this is what @bjorn3 was alluding to.), unlike some operations that take a <code>Uimm*</code> argument which would signify a zero extend. (i.e. <a href=\"https://docs.rs/cranelift-codegen/0.85.1/cranelift_codegen/ir/trait.InstBuilder.html#method.heap_addr\">heap_add</a>, <a href=\"https://docs.rs/cranelift-codegen/0.85.1/cranelift_codegen/ir/trait.InstBuilder.html#method.insertlane\">insert_lane</a>).</p>\n<p>But it looks like a use case that probably wasn't considered when adding these instructions initially so we should probably review this.<br>\n</p>\n</blockquote>",
        "id": 291613619,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659377970
    },
    {
        "content": "<p>afonso360 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1201550153\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>The <a href=\"https://docs.rs/cranelift-codegen/0.85.1/cranelift_codegen/ir/trait.InstBuilder.html#method.iadd_imm\">InstBuilder function for <code>iadd_imm</code></a> suggests that it should be sign extended, since it takes a <code>Imm64</code> (<br>\nI think this is what @bjorn3 was alluding to.), unlike some operations that take a <code>Uimm*</code> argument which would signify a zero extend. (i.e. <a href=\"https://docs.rs/cranelift-codegen/0.85.1/cranelift_codegen/ir/trait.InstBuilder.html#method.heap_addr\">heap_addr</a>, <a href=\"https://docs.rs/cranelift-codegen/0.85.1/cranelift_codegen/ir/trait.InstBuilder.html#method.insertlane\">insert_lane</a>).</p>\n<p>But it looks like a use case that probably wasn't considered when adding these instructions initially so we should probably review this.<br>\n</p>\n</blockquote>",
        "id": 291613727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659378014
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1201555113\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>My point is that the behaviour should be specified explicitly, and yes, I agree that sign-extending makes the most sense.</p>\n</blockquote>",
        "id": 291614215,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659378283
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568#issuecomment-1209698522\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p>I agree that sign-extension makes the most sense here. There is actually an equivalent issue with <code>iconst.i128</code>; I just verified now that on x86-64 and aarch64, <code>iconst.i128 -1</code> produces a zero-extended-i64 value (<code>0x0000_0000_0000_0000_ffff_ffff_ffff_ffff</code>); we should do the same thing in that case.</p>\n</blockquote>",
        "id": 292627996,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660067858
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4568\">issue #4568</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, the clif fuzzer reported this issue.</p>\n<h3><code>.clif</code> Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_llvm_abi_extensions</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd_imm</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>clif-util test ./the-above.clif</code></li>\n</ul>\n<h3>Expected Results</h3>\n<p>I don't know.</p>\n<p>The <code>iadd_imm.i128</code> takes a i64 constant.</p>\n<p>The interpreter sign extends the constant, the backend does not.</p>\n<h3>Actual Results</h3>\n<p>Interpreter sign extends and returns 0 passing the test. </p>\n<p>Native returns <code>0x1_0000_0000_0000_0000</code> and fails.</p>\n<h3>Versions and Environment</h3>\n<p>Cranelift version or commit: main<br>\nOperating system: windows<br>\nArchitecture: x86</p>\n<h3>Extra Info</h3>\n<p>I'm pretty much seeking confirmation that we don't sign extend these constant values. I think it looks weird that we input -1, but get something completely different.</p>\n<p>cc: @cfallin @jameysharp <br>\n</p>\n</blockquote>",
        "id": 293595337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1660586902
    }
]