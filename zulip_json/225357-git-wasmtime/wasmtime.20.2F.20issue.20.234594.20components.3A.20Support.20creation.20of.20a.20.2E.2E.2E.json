[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4594\">issue #4594</a>:</p>\n<blockquote>\n<p>Currently the <code>Linker::func_new</code> API added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">https://github.com/bytecodealliance/wasmtime/pull/4537</a> has a bit of an odd API for the creation of a host function. Instead of taking a <code>Component</code>/string pair this should ideally look similar to the core wasm support where a function type is created directly.</p>\n<p>This will entail being able to create a function type at runtime. Note that this is nontrivial compared to the support for core wasm since the type hierarchy is more complicated. I'm not sure how best this would work.</p>\n<p>Additionally shortly after this is implemented we'll need to also implement the ability to compare two types across two different <code>ComponentTypes</code> stores. Currently type equality only checks indices but in the case of different indices a deep type equality needs to be performed.</p>\n</blockquote>",
        "id": 291859456,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659537694
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4594\">issue #4594</a>:</p>\n<blockquote>\n<p>Currently the <code>Linker::func_new</code> API added in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4537\">https://github.com/bytecodealliance/wasmtime/pull/4537</a> has a bit of an odd API for the creation of a host function. Instead of taking a <code>Component</code>/string pair this should ideally look similar to the core wasm support where a function type is created directly.</p>\n<p>This will entail being able to create a function type at runtime. Note that this is nontrivial compared to the support for core wasm since the type hierarchy is more complicated. I'm not sure how best this would work.</p>\n<p>Additionally shortly after this is implemented we'll need to also implement the ability to compare two types across two different <code>ComponentTypes</code> stores. Currently type equality only checks indices but in the case of different indices a deep type equality needs to be performed.</p>\n</blockquote>",
        "id": 291859459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1659537695
    }
]