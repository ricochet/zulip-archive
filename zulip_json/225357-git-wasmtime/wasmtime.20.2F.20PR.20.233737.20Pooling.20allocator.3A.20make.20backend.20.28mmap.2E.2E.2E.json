[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737\">PR #3737</a> from <code>pooling-backend-dynamic-choice</code> to <code>main</code>:</p>\n<blockquote>\n<p>(Stacked on top of #3697)</p>\n<p>Currently, the pooling allocator makes heavy use of compile-time<br>\nfeatures to determine its runtime behavior and allocation strategy. This<br>\nmakes testing harder, and makes runtime configuration from higher levels<br>\nof the system impossible.</p>\n<p>This PR passes a <code>PoolingBackend</code> value down from the configuration<br>\nplumbing and into the pooling allocator, and uses its value to<br>\ndynamically choose a backend instead. This is mostly a matter of lots of<br>\nplumbing and conditionals.</p>\n<p>The most complex part of this PR is actually the testing and feature<br>\nsetup. We still want the memfd and uffd backends to be optional -- i.e.,<br>\none should be able to build a wasmtime binary without them included.<br>\nThis implies not including the enum options in the config enum, and<br>\neverything down from there.</p>\n<p>In order to test all possible situations, we actually need to test four<br>\nbuilds -- with neither uffd nor memfd, with just one, or with both. We<br>\nalso want to test that everything works when different backends are<br>\nspecified, and the simplest way to do this is just to run the whole test<br>\nsuite with the default backend set to each possible option. Hence we run<br>\ntests with both backends included and the default set three different<br>\nways; with one backend included and the default set to that or the<br>\nallback mmap backend; etc.</p>\n<p>I'm not sure that this is actually the simplest option -- it may, in the<br>\nend, be simpler to entirely remove uffd, if we eventually determine that<br>\nmemfd supersedes it, and then unconditionally include memfd support on<br>\nLinux. But it was suggested here [1] to opt for a dynamic approach, so<br>\nthis PR explores what that would look like!</p>\n<p>[1] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3697#discussion_r792246996\">https://github.com/bytecodealliance/wasmtime/pull/3697#discussion_r792246996</a></p>\n</blockquote>",
        "id": 269685883,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643344937
    },
    {
        "content": "<p><strong>cfallin</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737\">PR #3737</a>.</p>",
        "id": 269685884,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643344937
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#pullrequestreview-866544083\">PR review</a>.</p>",
        "id": 269786767,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396906
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#discussion_r794773624\">PR review comment</a>:</p>\n<blockquote>\n<p>I definitely don't think we should have to do this in CI. There's no way we can do the whole matrix here so if we feel we need to then I think the design should be tweaked elsewhere.</p>\n</blockquote>",
        "id": 269786768,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396906
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#pullrequestreview-866544083\">PR review</a>.</p>",
        "id": 269786769,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396906
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#discussion_r794774426\">PR review comment</a>:</p>\n<blockquote>\n<p>I think that this API for configuring the pooling allocator is a bit overly-wordy and we would probably want to move to a builder-style configuration system if we added another top-level configuration option like this. </p>\n</blockquote>",
        "id": 269786770,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396906
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#discussion_r794776334\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree that the need to do something like this is definitely overkill, althought the suggestion below of impl-as-methods-on-something might cut down on the wordiness here.</p>\n</blockquote>",
        "id": 269786771,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396907
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#discussion_r794775423\">PR review comment</a>:</p>\n<blockquote>\n<p>If we go the runtime-value-<code>PoolingBackend</code> route I think this would make more sense as:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">PoolingBackend</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_accessible</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 269786772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396907
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#discussion_r794779708\">PR review comment</a>:</p>\n<blockquote>\n<p>And another possible way to organize this is something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">PoolingBackend</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Mmap</span><span class=\"p\">(</span><span class=\"n\">NativeMmap</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Uffd</span><span class=\"p\">(</span><span class=\"n\">Uffd</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Memfd</span><span class=\"p\">(</span><span class=\"n\">Memfd</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">NativeMmap</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">NativeMmap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// methods here, probably one impl of `NativeMmap` per-OS</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Memfd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"memfd\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Supported</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Memfd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Memfd</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"memfd\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Memfd</span>::<span class=\"n\">Supported</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(not(feature = </span><span class=\"s\">\"memfd\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"support not compiled in (or os not supported\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_method</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"memfd\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Memfd</span>::<span class=\"n\">Supported</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// the implementation</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I think this would be a more manageable way to handle platform-specific and feature-specific functionality perhaps?</p>\n</blockquote>",
        "id": 269786773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396907
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737#discussion_r794777057\">PR review comment</a>:</p>\n<blockquote>\n<p>Personally I don't really feel the need to have separate features for default backends. If this is purely for test coverage then we could have normal <code>cargo test</code> just loop through the backends or otherwise just pick a random one for each test so we get more coverage over time or something like that.</p>\n</blockquote>",
        "id": 269786774,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643396907
    },
    {
        "content": "<p>cfallin closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3737\">PR #3737</a>.</p>",
        "id": 271353481,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1644443979
    }
]