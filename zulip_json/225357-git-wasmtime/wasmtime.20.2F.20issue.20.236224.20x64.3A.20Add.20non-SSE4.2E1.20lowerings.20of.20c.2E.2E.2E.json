[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224#issuecomment-1511877036\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224\">issue #6224</a>:</p>\n<blockquote>\n<p>I'll also note that this doesn't enable the runtest for insertlane yet because there are other lowerings that use SSE4.1 instructions but a future commit will enable the insertlane test for testing without SSE4.1</p>\n</blockquote>",
        "id": 350589687,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1681756031
    },
    {
        "content": "<p>penzn <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224#issuecomment-1553306884\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224\">issue #6224</a>:</p>\n<blockquote>\n<p>Curious - is this just for testing or are there important users that only have SSE2? Even low-power x86(32/64) CPUs have had SSE4 for a very long time, and the standard standard was written with SSE4 in mind, web implementations don't support anything lower. In case someone would try to accelerate their code using instructions in this PR on SSE2 machine they are likely to get surprised. </p>\n</blockquote>",
        "id": 359441458,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684427036
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224#issuecomment-1553325284\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224\">issue #6224</a>:</p>\n<blockquote>\n<p>Just for testing and completeness. We occasionally get reports about users getting an error message that their machine didn't support SSE4.2 which was the basline required by Wasmtime originally. Part of this is on Wasmtime since we require SSE4.2 even if the module doesn't actually use simd instructions and that error could probably be improved by first detecting SIMD and then requiring SSE4.2 or something like that.</p>\n<p>Otherwise though I was basically just curious if it was even possible to take the requirement from SSE4.2 to SSE2. I wanted to learn x64 a bit more and the various instructions and it ended up not being too bad and it fits well in the instruction selection framework that Cranelift has, so I figured I'd land it.</p>\n<p>My guess though is that this'll only be here for compatibility in niche cases. I definitely have no plans myself to use work like this to shape future standards or anything like that, I think that the SSE4.2 baseline is quite reasonable and well thought out.</p>\n</blockquote>",
        "id": 359445236,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684428032
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224#issuecomment-1553337380\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224\">issue #6224</a>:</p>\n<blockquote>\n<p>@penzn FWIW, the current discussion on this and Alex's work were spawned by a downstream user trying to run Wasmtime on a Penryn-era (Core 2) machine a month or so ago, so these users do still exist, even if rarely (I'm not finding the issue at the moment, but all the related ones are linked from #3810, and we've had pretty extensive discussions on that cluster of issues over the past 1.5 years). It's also just nice to be able to say that we support our full feature set on <em>any</em> x86_64 machine (i.e. only SSE2), and dynamically detect the presence of better options (almost always switch to our SSE4.2 lowerings when available), rather than the other way around where we have a dynamically-detected error path or a \"hole\" in our support matrix. Wasm is all about portability, after all!</p>\n</blockquote>",
        "id": 359447624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684428716
    },
    {
        "content": "<p>penzn <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224#issuecomment-1553385697\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224\">issue #6224</a>:</p>\n<blockquote>\n<p>Some instructions were added only because 4.1/4.2 support is assumed. Here is one <a href=\"https://github.com/WebAssembly/simd/pull/412\">example</a>, also see <a href=\"https://docs.google.com/document/d/16mT7xZ4QvL_dccFhaVOn6dpXlPUtKCcJYA6U8gIFbmo/edit#heading=h.n7rdjckrtpe5\">notes</a> from the meeting that approved it. On the other hand adding fallbacks makes sense.</p>\n<p>The tricky part of SIMD is that it needs to be fast as well as correct, you probably don't want to get into a situation when someone would accelerate their code using SIMD operations only to find out it got slower (probably even worse if compiler would quietly do it for them). Performance is pretty hard to specify precisely, criteria for adding instructions was something along the lines of \"no slowdown, speedup for at least one platform\" (i.e. swizzle).</p>\n</blockquote>",
        "id": 359456776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684431106
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224#issuecomment-1553436872\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6224\">issue #6224</a>:</p>\n<blockquote>\n<p>Right, and that came up in earlier discussions here too. From my perspective at least, it makes sense to <em>tune</em> the feature for newer hardware (and we do), but it kind of also sucks to just abandon users with old hardware completely. Given the choice between \"user with 2007 laptop cannot run Wasmtime at all\" and \"user with 2007 laptop can run Wasmtime, but it's slow just like everything else on this machine\" I think we'll take the latter :-)</p>\n</blockquote>",
        "id": 359465970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684433607
    }
]