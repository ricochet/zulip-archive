[
    {
        "content": "<p><a href=\"https://github.com/tschneidereit\">tschneidereit</a> added the enhancement label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9699\">Issue #9699</a>.</p>",
        "id": 485492524,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733068682
    },
    {
        "content": "<p><a href=\"https://github.com/tschneidereit\">tschneidereit</a> added the fuzzing label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9699\">Issue #9699</a>.</p>",
        "id": 485492529,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733068682
    },
    {
        "content": "<p>tschneidereit opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9699\">issue #9699</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><a href=\"https://github.com/ossf/fuzz-introspector\">Fuzz Inspector</a> helps to gain insights into the effectiveness of a fuzzing setup and to identify blockers that keep parts of the code base uncovered.</p>\n<h4>Benefit</h4>\n<p>Wasmtime is sufficiently complex that it's challenging to reason about the effectiveness of the various fuzzing harnesses we employ. That's the very problem Fuzz Inspector was created to help address.</p>\n<h4>Implementation</h4>\n<p>Rust support was <a href=\"https://github.com/ossf/fuzz-introspector/pull/1818\">added to Fuzz Inspector</a> very recently, so it's not yet fully documented. I think that PR contains sufficient bread crumbs to find the right path to integration with our OSS-Fuzz setup, though.</p>\n<h4>Alternatives</h4>\n<p>There might be alternative initiatives with similar goals that'd be more valuable to integrate. If so, I'm not aware of them.</p>\n</blockquote>",
        "id": 485492548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733068684
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9699#issuecomment-2509869874\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9699\">issue #9699</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"fuzzing\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: fuzzing</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 485492570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733068720
    },
    {
        "content": "<p>tschneidereit edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9699\">issue #9699</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p><a href=\"https://github.com/ossf/fuzz-introspector\">Fuzz Introspector</a> helps to gain insights into the effectiveness of a fuzzing setup and to identify blockers that keep parts of the code base uncovered.</p>\n<h4>Benefit</h4>\n<p>Wasmtime is sufficiently complex that it's challenging to reason about the effectiveness of the various fuzzing harnesses we employ. That's the very problem Fuzz Introspector was created to help address.</p>\n<h4>Implementation</h4>\n<p>Rust support was <a href=\"https://github.com/ossf/fuzz-introspector/pull/1818\">added to Fuzz Introspector</a> very recently, so it's not yet fully documented. I think that PR contains sufficient bread crumbs to find the right path to integration with our OSS-Fuzz setup, though.</p>\n<h4>Alternatives</h4>\n<p>There might be alternative initiatives with similar goals that'd be more valuable to integrate. If so, I'm not aware of them.</p>\n</blockquote>",
        "id": 485492825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733068902
    }
]