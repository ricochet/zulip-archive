[
    {
        "content": "<p>doinkythederp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<p>Here's the WASM code required to reproduce this bug:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_dir</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n</code></pre></div>\n<p>Compiled in release mode with <code>debug = true</code>:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/12554668/test.wasm.tgz\">test.wasm.tgz</a></p>\n<p>Here's the Rust host code required, modified from the <a href=\"https://docs.wasmtime.dev/examples-rust-wasi.html\">WASI example</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"p\">{</span><span class=\"n\">ambient_authority</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sync</span>::<span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dir</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Define the WASI functions globally on the `Config`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_fs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Dir</span>::<span class=\"n\">open_ambient_dir</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Filesystem root should be accessible\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a WASI context and put it in a Store; all instances in the store</span>\n<span class=\"w\">    </span><span class=\"c1\">// share this context. `WasiCtxBuilder` provides a number of ways to</span>\n<span class=\"w\">    </span><span class=\"c1\">// configure what the target program will have access to.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"n\">wasm_fs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate our module with the imports we've created, and run it.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./test.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// --&gt; Panic occurs here</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_default</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Use <code>wasmtime_wasi::Dir</code> to allow access to the root directory</li>\n<li>Attempt to read the root directory from WASM</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The program will print the files in the root directory: <code>bin</code>, <code>dev</code>, <code>usr</code>, etc.</p>\n<h3>Actual Results</h3>\n<p>Program panics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">TryFromIntError</span><span class=\"p\">(())</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;/</span><span class=\"n\">cap</span><span class=\"o\">-</span><span class=\"n\">primitives</span><span class=\"o\">-</span><span class=\"mf\">2.0.0</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rustix</span><span class=\"o\">/</span><span class=\"n\">fs</span><span class=\"o\">/</span><span class=\"n\">metadata_ext</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">167</span>:<span class=\"mi\">49</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v12.0.1 </p>\n<p>Operating system: macOS Ventura 13.5.1</p>\n<p>Architecture: arm64 Apple Silicon</p>\n<h3>Extra Info</h3>\n<p>I'm not familiar with ambient authority.<br>\n</p>\n</blockquote>",
        "id": 389791043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694137898
    },
    {
        "content": "<p><a href=\"https://github.com/doinkythederp\">doinkythederp</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">Issue #6978</a>.</p>",
        "id": 389791044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694137898
    },
    {
        "content": "<p>doinkythederp edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<p>Here's the WASM code required to reproduce this bug:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_dir</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n</code></pre></div>\n<p>Compiled in release mode with <code>debug = true</code>:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/12554668/test.wasm.tgz\">test.wasm.tgz</a></p>\n<p>Here's the Rust host code required, modified from the <a href=\"https://docs.wasmtime.dev/examples-rust-wasi.html\">WASI example</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"p\">{</span><span class=\"n\">ambient_authority</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sync</span>::<span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dir</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Define the WASI functions globally on the `Config`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_fs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Dir</span>::<span class=\"n\">open_ambient_dir</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Filesystem root should be accessible\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a WASI context and put it in a Store; all instances in the store</span>\n<span class=\"w\">    </span><span class=\"c1\">// share this context. `WasiCtxBuilder` provides a number of ways to</span>\n<span class=\"w\">    </span><span class=\"c1\">// configure what the target program will have access to.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"n\">wasm_fs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate our module with the imports we've created, and run it.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./test.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// --&gt; Panic occurs here</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_default</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Use <code>wasmtime_wasi::Dir</code> to allow access to the root directory</li>\n<li>Attempt to read the root directory from WASM</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The program will print the files in the root directory: <code>bin</code>, <code>dev</code>, <code>usr</code>, etc.</p>\n<h3>Actual Results</h3>\n<p>Program panics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">TryFromIntError</span><span class=\"p\">(())</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;/</span><span class=\"n\">cap</span><span class=\"o\">-</span><span class=\"n\">primitives</span><span class=\"o\">-</span><span class=\"mf\">2.0.0</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rustix</span><span class=\"o\">/</span><span class=\"n\">fs</span><span class=\"o\">/</span><span class=\"n\">metadata_ext</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">167</span>:<span class=\"mi\">49</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v12.0.1 </p>\n<p>Operating system: macOS Ventura 13.5.1</p>\n<p>Architecture: arm64 Apple Silicon</p>\n<h3>Extra Info</h3>\n<p>I'm not familiar with ambient authority.</p>\n<p>```[tasklist]</p>\n<h3>Tasks</h3>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 389791054,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694137906
    },
    {
        "content": "<p>doinkythederp edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Thanks for filing a bug report! Please fill out the TODOs below.</p>\n<p><strong>Note: if you want to report a security issue, please read our <a href=\"https://bytecodealliance.org/security\">security policy</a>!</strong></p>\n<h3>Test Case</h3>\n<p>Here's the WASM code required to reproduce this bug:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_dir</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">());</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n</code></pre></div>\n<p>Compiled in release mode with <code>debug = true</code>:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/files/12554668/test.wasm.tgz\">test.wasm.tgz</a></p>\n<p>Here's the Rust host code required, modified from the <a href=\"https://docs.wasmtime.dev/examples-rust-wasi.html\">WASI example</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"p\">{</span><span class=\"n\">ambient_authority</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sync</span>::<span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Dir</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Define the WASI functions globally on the `Config`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm_fs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Dir</span>::<span class=\"n\">open_ambient_dir</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Filesystem root should be accessible\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a WASI context and put it in a Store; all instances in the store</span>\n<span class=\"w\">    </span><span class=\"c1\">// share this context. `WasiCtxBuilder` provides a number of ways to</span>\n<span class=\"w\">    </span><span class=\"c1\">// configure what the target program will have access to.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"n\">wasm_fs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"/\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_args</span><span class=\"p\">()</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Instantiate our module with the imports we've created, and run it.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./test.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// --&gt; Panic occurs here</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_default</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li>Use <code>wasmtime_wasi::Dir</code> to allow access to the root directory</li>\n<li>Attempt to read the root directory from WASM</li>\n</ul>\n<h3>Expected Results</h3>\n<p>The program will print the files in the root directory: <code>bin</code>, <code>dev</code>, <code>usr</code>, etc.</p>\n<h3>Actual Results</h3>\n<p>Program panics:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">TryFromIntError</span><span class=\"p\">(())</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;..</span><span class=\"p\">.</span><span class=\"o\">&gt;/</span><span class=\"n\">cap</span><span class=\"o\">-</span><span class=\"n\">primitives</span><span class=\"o\">-</span><span class=\"mf\">2.0.0</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rustix</span><span class=\"o\">/</span><span class=\"n\">fs</span><span class=\"o\">/</span><span class=\"n\">metadata_ext</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">167</span>:<span class=\"mi\">49</span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: v12.0.1 </p>\n<p>Operating system: macOS Ventura 13.5.1</p>\n<p>Architecture: arm64 Apple Silicon</p>\n<h3>Extra Info</h3>\n<p>I'm not familiar with ambient authority.</p>\n</blockquote>",
        "id": 389791061,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694137915
    },
    {
        "content": "<p>pchickey <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1712251171\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>it looks like this is a <code>cap-primitives</code> crate bug, can you please report it here: <a href=\"https://github.com/bytecodealliance/cap-std/issues\">https://github.com/bytecodealliance/cap-std/issues</a></p>\n</blockquote>",
        "id": 389953384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694209080
    },
    {
        "content": "<p>doinkythederp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1712302800\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>I'm not familiar with how wasmtime_wasi uses the Dir struct and I don't know anything about cap-primitives so I'm not really sure what to put in the bug report</p>\n</blockquote>",
        "id": 389958833,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694212632
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1712465938\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>It looks like <code>u64::try_from(stat.st_dev).unwrap()</code> fails. On Linux <code>dev_t</code> is a u64, but on macOS it is an i32: <a href=\"https://github.com/rust-lang/libc/blob/835661543db1ec42a6d9a809d69c3c5b5b978b81/src/unix/bsd/apple/mod.rs#L9\">https://github.com/rust-lang/libc/blob/835661543db1ec42a6d9a809d69c3c5b5b978b81/src/unix/bsd/apple/mod.rs#L9</a> Presumably it is a negative number in this case. Could you try <code>stat /*</code> and see which dir gets which device number?</p>\n</blockquote>",
        "id": 390013692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694250980
    },
    {
        "content": "<p>pchickey assigned <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a> to sunfishcode.</p>",
        "id": 390092414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694316031
    },
    {
        "content": "<p>doinkythederp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1716796899\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Not sure what to make of this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"cm\">/*</span>\n<span class=\"cm\">16777234 87498924 drwxrwxr-x 86 root admin 0 2752 \"Sep 12 18:14:56 2023\" \"Sep 12 18:14:56 2023\" \"Sep 12 18:14:56 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x100000 /Applications</span>\n<span class=\"cm\">16777234 87484854 drwxr-xr-x 72 root wheel 0 2304 \"Sep  7 20:23:48 2023\" \"Sep  7 20:23:26 2023\" \"Sep  7 20:23:26 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x100000 /Library</span>\n<span class=\"cm\">16777234 1152921500311879701 drwxr-xr-x 10 root wheel 0 320 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x80000 /System</span>\n<span class=\"cm\">16777234 23836 drwxr-xr-x 6 root admin 0 192 \"Sep  7 20:23:21 2023\" \"Sep  7 20:22:54 2023\" \"Sep  7 20:22:54 2023\" \"Aug 24 01:59:39 2022\" 4096 0 0x100000 /Users</span>\n<span class=\"cm\">16777234 26293 drwxr-xr-x 3 root wheel 0 96 \"Sep 11 19:52:22 2023\" \"Sep 11 19:52:22 2023\" \"Sep 11 19:52:22 2023\" \"Aug 24 01:59:39 2022\" 4096 0 0x8000 /Volumes</span>\n<span class=\"cm\">16777234 1152921500312435255 drwxr-xr-x 39 root wheel 0 1248 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /bin</span>\n<span class=\"cm\">16777234 26295 drwxr-xr-x 2 root wheel 0 64 \"Sep 22 17:50:54 2022\" \"Aug 24 01:59:39 2022\" \"Sep 22 17:50:54 2022\" \"Aug 24 01:59:39 2022\" 4096 0 0x8000 /cores</span>\n<span class=\"cm\">855137406 335 dr-xr-xr-x 4 root wheel 0 5023 \"Sep 12 18:24:40 2023\" \"Sep  7 20:22:04 2023\" \"Sep  7 20:22:04 2023\" \"Dec 31 16:00:00 1969\" 512 10 0x8000 /dev</span>\n<span class=\"cm\">16777234 1152921500312435332 lrwxr-xr-x 1 root wheel 0 11 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /etc</span>\n<span class=\"cm\">16777234 1152921504606781440 lrwxr-xr-x 1 root wheel 0 25 \"Sep  7 20:23:38 2023\" \"Sep  7 20:23:38 2023\" \"Sep  7 20:23:38 2023\" \"Sep  7 20:23:38 2023\" 4096 0 0x8000 /home</span>\n<span class=\"cm\">16777240 2 drwxr-xr-x 5 root nixbld 0 160 \"Sep  8 14:52:37 2023\" \"Sep  8 14:52:31 2023\" \"Sep  8 14:52:31 2023\" \"Sep  8 14:52:12 2023\" 4096 0 0 /nix</span>\n<span class=\"cm\">16777234 26292 drwxr-xr-x 4 root wheel 0 128 \"Mar  9 17:51:16 2023\" \"Mar  3 22:04:09 2023\" \"Mar  3 22:04:09 2023\" \"Aug 24 01:59:39 2022\" 4096 0 0x8000 /opt</span>\n<span class=\"cm\">16777234 87497982 drwxr-xr-x 6 root wheel 0 192 \"Sep  8 08:24:55 2023\" \"Sep  7 20:23:34 2023\" \"Sep  7 20:23:34 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x108000 /private</span>\n<span class=\"cm\">16777234 1152921504606781443 lrwxr-xr-x 1 root wheel 0 15 \"Sep  8 15:03:25 2023\" \"Sep  8 15:03:25 2023\" \"Sep  8 15:03:25 2023\" \"Sep  8 15:03:25 2023\" 4096 0 0 /run</span>\n<span class=\"cm\">16777234 1152921500312435335 drwxr-xr-x 64 root wheel 0 2048 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /sbin</span>\n<span class=\"cm\">16777234 1152921500312435438 lrwxr-xr-x 1 root wheel 0 11 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /tmp</span>\n<span class=\"cm\">16777234 1152921500312435439 drwxr-xr-x 11 root wheel 0 352 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /usr</span>\n<span class=\"cm\">16777234 1152921500312470639 lrwxr-xr-x 1 root wheel 0 11 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /var</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 390625288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694568348
    },
    {
        "content": "<p>doinkythederp edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1716796899\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Not sure what to make of this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">stat</span><span class=\"w\"> </span><span class=\"cm\">/*</span>\n<span class=\"cm\">16777234 87498924 drwxrwxr-x 86 root admin 0 2752 \"Sep 12 18:14:56 2023\" \"Sep 12 18:14:56 2023\" \"Sep 12 18:14:56 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x100000 /Applications</span>\n<span class=\"cm\">16777234 87484854 drwxr-xr-x 72 root wheel 0 2304 \"Sep  7 20:23:48 2023\" \"Sep  7 20:23:26 2023\" \"Sep  7 20:23:26 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x100000 /Library</span>\n<span class=\"cm\">16777234 1152921500311879701 drwxr-xr-x 10 root wheel 0 320 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x80000 /System</span>\n<span class=\"cm\">16777234 23836 drwxr-xr-x 6 root admin 0 192 \"Sep  7 20:23:21 2023\" \"Sep  7 20:22:54 2023\" \"Sep  7 20:22:54 2023\" \"Aug 24 01:59:39 2022\" 4096 0 0x100000 /Users</span>\n<span class=\"cm\">16777234 26293 drwxr-xr-x 3 root wheel 0 96 \"Sep 11 19:52:22 2023\" \"Sep 11 19:52:22 2023\" \"Sep 11 19:52:22 2023\" \"Aug 24 01:59:39 2022\" 4096 0 0x8000 /Volumes</span>\n<span class=\"cm\">16777234 1152921500312435255 drwxr-xr-x 39 root wheel 0 1248 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /bin</span>\n<span class=\"cm\">16777234 26295 drwxr-xr-x 2 root wheel 0 64 \"Sep 22 17:50:54 2022\" \"Aug 24 01:59:39 2022\" \"Sep 22 17:50:54 2022\" \"Aug 24 01:59:39 2022\" 4096 0 0x8000 /cores</span>\n<span class=\"cm\">855137406 335 dr-xr-xr-x 4 root wheel 0 5023 \"Sep 12 18:24:40 2023\" \"Sep  7 20:22:04 2023\" \"Sep  7 20:22:04 2023\" \"Dec 31 16:00:00 1969\" 512 10 0x8000 /dev</span>\n<span class=\"cm\">16777234 1152921500312435332 lrwxr-xr-x 1 root wheel 0 11 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /etc</span>\n<span class=\"cm\">16777234 1152921504606781440 lrwxr-xr-x 1 root wheel 0 25 \"Sep  7 20:23:38 2023\" \"Sep  7 20:23:38 2023\" \"Sep  7 20:23:38 2023\" \"Sep  7 20:23:38 2023\" 4096 0 0x8000 /home</span>\n<span class=\"cm\">16777240 2 drwxr-xr-x 5 root nixbld 0 160 \"Sep  8 14:52:37 2023\" \"Sep  8 14:52:31 2023\" \"Sep  8 14:52:31 2023\" \"Sep  8 14:52:12 2023\" 4096 0 0 /nix</span>\n<span class=\"cm\">16777234 26292 drwxr-xr-x 4 root wheel 0 128 \"Mar  9 17:51:16 2023\" \"Mar  3 22:04:09 2023\" \"Mar  3 22:04:09 2023\" \"Aug 24 01:59:39 2022\" 4096 0 0x8000 /opt</span>\n<span class=\"cm\">16777234 87497982 drwxr-xr-x 6 root wheel 0 192 \"Sep  8 08:24:55 2023\" \"Sep  7 20:23:34 2023\" \"Sep  7 20:23:34 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x108000 /private</span>\n<span class=\"cm\">16777234 1152921504606781443 lrwxr-xr-x 1 root wheel 0 15 \"Sep  8 15:03:25 2023\" \"Sep  8 15:03:25 2023\" \"Sep  8 15:03:25 2023\" \"Sep  8 15:03:25 2023\" 4096 0 0 /run</span>\n<span class=\"cm\">16777234 1152921500312435335 drwxr-xr-x 64 root wheel 0 2048 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /sbin</span>\n<span class=\"cm\">16777234 1152921500312435438 lrwxr-xr-x 1 root wheel 0 11 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /tmp</span>\n<span class=\"cm\">16777234 1152921500312435439 drwxr-xr-x 11 root wheel 0 352 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /usr</span>\n<span class=\"cm\">16777234 1152921500312470639 lrwxr-xr-x 1 root wheel 0 11 \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" \"Sep  2 00:35:13 2023\" 4096 0 0x88000 /var</span>\n</code></pre></div>\n<p>\"The default format displays the st_dev, st_ino, st_mode, st_nlink, st_uid, st_gid, st_rdev, st_size, st_atime, st_mtime, st_ctime, st_birthtime, st_blksize, st_blocks, and st_flags fields, in that order.\"</p>\n</blockquote>",
        "id": 390625453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694568444
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1717378972\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>All these dev numbers are positive. Could you also try <code>stat /</code>? Maybe it is the root directory itself for which the dev number is negative?</p>\n</blockquote>",
        "id": 390693788,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694601471
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1718049728\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Thanks for helping to track this down @bjorn3, I've posted a hypothetical fix at <a href=\"https://github.com/bytecodealliance/cap-std/pull/329\">https://github.com/bytecodealliance/cap-std/pull/329</a>, although I don't understand enough here to know if <code>st_dev</code> being negative is a bad thing or not. Once that's released I can help update it here in Wasmtime to get tested by @doinkythederp </p>\n</blockquote>",
        "id": 390771074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694626738
    },
    {
        "content": "<p>doinkythederp <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978#issuecomment-1718167504\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6978\">issue #6978</a>:</p>\n<blockquote>\n<p>Hi again! Looks like the number changed after a restart or something and the error isn't happening anymore. I haven't changed anything in my code. This might make it harder for me to help with debugging.</p>\n</blockquote>",
        "id": 390785180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694631918
    }
]