[
    {
        "content": "<p>VamshiReddy02 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a> from <code>VamshiReddy02:DominatorTree</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>ref: #7954 <br>\nHey @jameysharp,<br>\nI made a few changes; this is my first time contributing to wasmtime. please let me know if there are any changes to make.</p>\n</blockquote>",
        "id": 436829803,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714720409
    },
    {
        "content": "<p><strong>VamshiReddy02</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>.</p>",
        "id": 436829805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714720410
    },
    {
        "content": "<p><strong>VamshiReddy02</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>.</p>",
        "id": 436829806,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714720410
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>.</p>",
        "id": 436913595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714752016
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2093298797\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>@jameysharp, sounds like you have some previous context for this change?</p>\n</blockquote>",
        "id": 436913659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714752037
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2093712477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>I do, thanks Andrew! I proposed doing this in #7954.</p>\n<p>@VamshiReddy02, this is a good start! I'm excited that you're working on it.</p>\n<p>I labeled this issue \"easy\" but there are some things that are not so easy about it, and you've started with one of the more difficult cases: Comparing two instructions, instead of two blocks. That's okay! Let's figure out how to make it work.</p>\n<p>Instruction <code>a</code> dominates instruction <code>b</code> if either of these conditions are true:</p>\n<ol>\n<li><code>a</code> and <code>b</code> are in the same block, and <code>a</code> is not after <code>b</code>. Here's an example showing how to check if <code>inst_a</code> is not after <code>last</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/71800cc1a1daf01e8c3cfee09e651cf8f46ff31b/cranelift/codegen/src/dominator_tree.rs#L137\">https://github.com/bytecodealliance/wasmtime/blob/71800cc1a1daf01e8c3cfee09e651cf8f46ff31b/cranelift/codegen/src/dominator_tree.rs#L137</a></li>\n<li>Or the block containing <code>a</code> dominates the block containing <code>b</code>.</li>\n</ol>\n<p>You've implemented the second condition, but not the first.</p>\n<p>The first thing I think you should do is add a new method to <code>DominatorTreePreorder</code> which answers the question of whether one instruction dominates another. I suggest this method should look like <code>pub fn dominates_inst(&amp;self, a: Inst, b: Inst, layout: &amp;Layout) -&gt; bool</code>, and it needs to implement the above condition.</p>\n<p>Then you can call <code>dominates_inst</code> in <code>alias_analysis.rs</code>. I think this should make the changes in <code>alias_analysis.rs</code> very small. This method will also be useful for the calls to <code>dominates</code> that are in <code>cranelift/codegen/src/verifier/mod.rs</code>. The only other calls are in <code>cranelift/codegen/src/loop_analysis.rs</code>, which can just compare blocks, but it's a little complicated to explain why.</p>\n<p>I hope that helps. One more request:</p>\n<p>Could you run <code>cargo fmt</code> before committing changes? That will clean up changes to whitespace and make your pull requests easier to review.</p>\n<p>Thank you for working on this!</p>\n</blockquote>",
        "id": 436953686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714767820
    },
    {
        "content": "<p>VamshiReddy02 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2094259198\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>Hey @jameysharp,<br>\nThank you for the feedback. Correct me if I am wrong, First I need to add a new method called <code>pub fn dominates_inst(&amp;self, a: Inst, b: Inst, layout: &amp;Layout) -&gt; bool</code> in the <code>DominatorTreePreorder</code> applying all the above conditions. For example like this: </p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">impl DominatorTreePreorder {</span>\n<span class=\"go\"> pub fn dominates_inst(&amp;self, a: Inst, b: Inst, layout: &amp;Layout) -&gt; bool {</span>\n<span class=\"go\">        match (layout.inst_block(a), layout.inst_block(b)) {</span>\n<span class=\"go\">            (Some(block_a), Some(block_b)) =&gt; {</span>\n<span class=\"go\">                if block_a == block_b {</span>\n<span class=\"go\">                    layout.pp_cmp::&lt;ProgramPoint, ProgramPoint&gt;(a.into(), b.into()) != Ordering::Greater</span>\n<span class=\"go\">                } else {</span>\n<span class=\"go\">                    self.dominates(block_a, block_b)</span>\n<span class=\"go\">                }</span>\n<span class=\"go\">            }</span>\n<span class=\"go\">            _ =&gt; false,</span>\n<span class=\"go\">        }</span>\n<span class=\"go\">    }</span>\n<span class=\"go\">}</span>\n</code></pre></div>\n<p>Then I need to call the <code>dominates_inst</code> in <code>alias_analysis.rs</code> file, for example like this:</p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"go\">let aliased =</span>\n<span class=\"go\">                    if let Some((def_inst, value)) = self.mem_values.get(&amp;mem_loc).cloned() {</span>\n<span class=\"go\">                        trace!(</span>\n<span class=\"go\">                            \" -&gt; sees known value v{} from inst{}\",</span>\n<span class=\"go\">                            value.index(),</span>\n<span class=\"go\">                            def_inst.index()</span>\n<span class=\"go\">                        );</span>\n<span class=\"go\">                        if let (Some(_def_block), Some(_inst_block)) = (</span>\n<span class=\"go\">                            func.layout.inst_block(def_inst),</span>\n<span class=\"go\">                            func.layout.inst_block(inst),</span>\n<span class=\"go\">                        ) {</span>\n<span class=\"go\">                            if self.domtree.`dominates_inst(def_inst, inst, &amp;func.layout)` {</span>\n<span class=\"go\">                                trace!(</span>\n<span class=\"go\">                                    \" -&gt; dominates; value equiv from v{} to v{} inserted\",</span>\n<span class=\"go\">                                    load_result.index(),</span>\n<span class=\"go\">                                    value.index()</span>\n<span class=\"go\">                                );</span>\n<span class=\"go\">                                Some(value)</span>\n<span class=\"go\">                            } else {</span>\n<span class=\"go\">                                None</span>\n<span class=\"go\">                            }</span>\n<span class=\"go\">                        } else {</span>\n<span class=\"go\">                            None</span>\n<span class=\"go\">                        }</span>\n<span class=\"go\">                    } else {</span>\n<span class=\"go\">                        None</span>\n<span class=\"go\">                    };</span>\n</code></pre></div>\n<p>Am I going in the correct direction?</p>\n</blockquote>",
        "id": 437029651,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714836594
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2094905765\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>Yes, that is the correct direction! There are a few ways to make this easier though:</p>\n<ol>\n<li>\n<p>In <code>alias_analysis.rs</code>, you don't need to call <code>inst_block</code>, because now you don't need to know the blocks there. So you can delete that <code>if</code> in the middle.</p>\n</li>\n<li>\n<p>Instead of explicitly specifying the type of <code>pp_cmp</code>, you can let Rust figure it out. <code>layout.pp_cmp(a, b)</code> should work. Just don't call <code>.into()</code> in this case, because that gives the compiler too many choices and it gets confused.</p>\n</li>\n<li>\n<p>When <code>dominates_inst</code> is called, I happen to know that the instructions should be in the <code>Layout</code>, so <code>inst_block</code> should not fail. As a result, instead of checking whether <code>inst_block</code> returns <code>Some</code>, you can use <code>expect</code>, like this: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/81a89169f556d2ba8c6ddc75ae0ac471f213f1c3/cranelift/codegen/src/dominator_tree.rs#L133-L135\">https://github.com/bytecodealliance/wasmtime/blob/81a89169f556d2ba8c6ddc75ae0ac471f213f1c3/cranelift/codegen/src/dominator_tree.rs#L133-L135</a></p>\n</li>\n</ol>\n<p>But yes, you are most of the way there! I look forward to seeing your updated pull request.</p>\n<p>Some other projects expect \"perfect\" git commits, so I just want to let you know that we don't care about that for Wasmtime and Cranelift. As you make further changes, just commit them and push them to your <code>DominatorTree</code> branch. You don't need to open a new PR or use <code>git rebase</code> or anything. We'll \"squash\" your changes together into a single commit once they're ready to merge.</p>\n</blockquote>",
        "id": 437153212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714934002
    },
    {
        "content": "<p>VamshiReddy02 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>.</p>",
        "id": 437235421,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714991570
    },
    {
        "content": "<p>VamshiReddy02 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>.</p>",
        "id": 437236233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1714991978
    },
    {
        "content": "<p>VamshiReddy02 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2097498453\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>Hey @jameysharp, I made some changes, let me know if any changes need to be made.</p>\n</blockquote>",
        "id": 437382666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715060942
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#pullrequestreview-2042124929\">PR review</a>:</p>\n<blockquote>\n<p>This is almost exactly what I wanted! Let's just figure out why the test suite is failing in CI.</p>\n<p>Based on the logs from CI, you should be able to reproduce the test failures by running <code>cargo test -p wasi-common --test all</code>. It looks like Cranelift's tests all passed, which I think means we need some more tests…</p>\n<p>The key error messages I'm looking at say \"cranelift/codegen/src/egraph/elaborate.rs:691:21: something has gone very wrong if we are elaborating effectful instructions, they should have remained in the skeleton\". This is not very helpful if you don't already know how the egraph optimization pass works, but as you make changes you can at least check whether this message changes or goes away.</p>\n<p>My guess is that what happened is that you've called <code>DominatorTreePreorder::new</code> but it's uninitialized and empty. I looked at the implementation of <code>DominatorTreePreorder::dominates</code> and I think it always returns <code>true</code> when it isn't initialized. This seems like a reasonable explanation for the test failures to me: if it falsely reports that things dominate each other when they actually don't, then we would \"optimize\" in places where we aren't actually allowed to.</p>\n<p>The first thing I would like you to do is add this to the existing <code>DominatorTreePreorder::dominates</code> function, and commit this change because if other people have the same problem this will help them figure it out more quickly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Check that both blocks are reachable.</span>\n<span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">na</span><span class=\"p\">.</span><span class=\"n\">pre_number</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">nb</span><span class=\"p\">.</span><span class=\"n\">pre_number</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>When you do that, I predict that more tests will start failing at these asserts. In particular, I hope that <code>cargo test -p cranelift-tools</code> will have some failing tests.</p>\n<p>If you can confirm that those asserts fail for some tests, then you can try fixing this and then make sure that the tests pass afterward. I think all you need to do is, in <code>cranelift/codegen/src/context.rs</code>, change <code>compute_domtree</code> so after it calls <code>self.domtree.compute</code> it also calls <code>self.domtree_preorder.compute</code>.</p>\n<p>If any of that doesn't work, I'm happy to look at it more carefully.</p>\n<p>Once the tests are all passing, I have a couple more comments below. But again, I think this is almost ready!</p>\n</blockquote>",
        "id": 437386916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715063680
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#pullrequestreview-2042124929\">PR review</a>:</p>\n<blockquote>\n<p>This is almost exactly what I wanted! Let's just figure out why the test suite is failing in CI.</p>\n<p>Based on the logs from CI, you should be able to reproduce the test failures by running <code>cargo test -p wasi-common --test all</code>. It looks like Cranelift's tests all passed, which I think means we need some more tests…</p>\n<p>The key error messages I'm looking at say \"cranelift/codegen/src/egraph/elaborate.rs:691:21: something has gone very wrong if we are elaborating effectful instructions, they should have remained in the skeleton\". This is not very helpful if you don't already know how the egraph optimization pass works, but as you make changes you can at least check whether this message changes or goes away.</p>\n<p>My guess is that what happened is that you've called <code>DominatorTreePreorder::new</code> but it's uninitialized and empty. I looked at the implementation of <code>DominatorTreePreorder::dominates</code> and I think it always returns <code>true</code> when it isn't initialized. This seems like a reasonable explanation for the test failures to me: if it falsely reports that things dominate each other when they actually don't, then we would \"optimize\" in places where we aren't actually allowed to.</p>\n<p>The first thing I would like you to do is add this to the existing <code>DominatorTreePreorder::dominates</code> function, and commit this change because if other people have the same problem this will help them figure it out more quickly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Check that both blocks are reachable.</span>\n<span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">na</span><span class=\"p\">.</span><span class=\"n\">pre_number</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">nb</span><span class=\"p\">.</span><span class=\"n\">pre_number</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>When you do that, I predict that more tests will start failing at these asserts. In particular, I hope that <code>cargo test -p cranelift-tools</code> will have some failing tests.</p>\n<p>If you can confirm that those asserts fail for some tests, then you can try fixing this and then make sure that the tests pass afterward. I think all you need to do is, in <code>cranelift/codegen/src/context.rs</code>, change <code>compute_domtree</code> so after it calls <code>self.domtree.compute</code> it also calls <code>self.domtree_preorder.compute</code>.</p>\n<p>If any of that doesn't work, I'm happy to look at it more carefully.</p>\n<p>Once the tests are all passing, I have a couple more comments below. But again, I think this is almost ready!</p>\n</blockquote>",
        "id": 437386917,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715063680
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#discussion_r1591848438\">PR review comment</a>:</p>\n<blockquote>\n<p>This statement can be removed, because the instruction's block is not used here.</p>\n<p>The place that I meant you could use this pattern is in the <code>dominates_inst</code> function, where you could use it instead of the <code>match</code> expression. But you don't have to do that if you don't want to; that function is okay the way you wrote it.</p>\n</blockquote>",
        "id": 437386918,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715063680
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#discussion_r1591879790\">PR review comment</a>:</p>\n<blockquote>\n<p>This is a minor thing, but I would prefer to have <code>dominates_inst</code> next to the <code>dominates</code> method that it uses. Then someone looking at one of them can easily see the other one too.</p>\n</blockquote>",
        "id": 437386919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715063680
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2106376081\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>I think you are very close to having this working, so I just want to check how you're doing with it. I'd love to merge this PR once it passes the test suite!</p>\n</blockquote>",
        "id": 438212592,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715548374
    },
    {
        "content": "<p>fbrv <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2249756717\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>happy to take a look if @VamshiReddy02 does not enough bandwith.</p>\n</blockquote>",
        "id": 453885317,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721896013
    },
    {
        "content": "<p>VamshiReddy02 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2249768909\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>Sure! Sorry for being inactive, caught up with some work. I'll close this PR. @fbrv you can create a new PR.</p>\n</blockquote>",
        "id": 453886337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721896364
    },
    {
        "content": "<p>jameysharp <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535#issuecomment-2250783774\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>:</p>\n<blockquote>\n<p>Thank you for your effort on this, @VamshiReddy02! I think you got most of the way there and I appreciate the time that you put into it.</p>\n<p>@fbrv, welcome! Let me know if you have any questions.</p>\n</blockquote>",
        "id": 453985595,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721923022
    },
    {
        "content": "<p>VamshiReddy02 closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8535\">PR #8535</a>.</p>",
        "id": 454003905,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721927253
    }
]