[
    {
        "content": "<p><a href=\"https://github.com/brettcannon\">brettcannon</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">Issue #7813</a>.</p>",
        "id": 417963484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706130271
    },
    {
        "content": "<p>brettcannon opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Various CPython test cases have started failing when moving from wasmtime 13 to 16 due to <code>ESPIPE</code>. Adding <code>--wasi threads=y</code> fixes the issue which seems unrelated to file seeking.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>git clone https://github.com/python/cpython.git</code></li>\n<li><code>cd cpython</code></li>\n<li><code>python3 Tools/wasm/wasi.py build</code></li>\n<li>Edit <code>cross-build/wasm32-wasi/python.sh</code> and remove <code>--wasi threads=y</code></li>\n<li><code>./cross-build/wasm32-wasi/python.sh -m test test___all__</code></li>\n</ul>\n<p>You can also try  test___all__ test_bufio test_compileall test_dbm_dumb test_importlib test_io test_marshal test_pathlib test_posix test_runpy test_tarfile test_zipfile .</p>\n<h3>Expected Results</h3>\n<p>The test should pass w/o issue (it was working fine under wasmtime 13 w/ e.g. <code>wasmtime run --env PYTHONPATH=/builddir/wasi/build/lib.wasi-wasm32-3.12:/Lib --mapdir /::/home/brettcannon/Repositories/python/cpython-3.12 -- python.wasm</code>.</p>\n<h3>Actual Results</h3>\n<p>W/o <code>--wasi threads=y</code>, it causes a <code>ESPIPE</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 16.0.0</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>WASI-SDK 20.<br>\n</p>\n</blockquote>",
        "id": 417963489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706130271
    },
    {
        "content": "<p>brettcannon edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Various CPython test cases have started failing when moving from wasmtime 13 to 16 due to <code>ESPIPE</code>. Adding <code>--wasi threads=y</code> fixes the issue which seems unrelated to file seeking.</p>\n<p>Example failure run can be seen at <a href=\"https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio\">https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio</a> right after I switched to wasmtime 16 from 13.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>git clone https://github.com/python/cpython.git</code></li>\n<li><code>cd cpython</code></li>\n<li><code>python3 Tools/wasm/wasi.py build</code></li>\n<li>Edit <code>cross-build/wasm32-wasi/python.sh</code> and remove <code>--wasi threads=y</code></li>\n<li><code>./cross-build/wasm32-wasi/python.sh -m test test___all__</code></li>\n</ul>\n<p>You can also try  test___all__ test_bufio test_compileall test_dbm_dumb test_importlib test_io test_marshal test_pathlib test_posix test_runpy test_tarfile test_zipfile .</p>\n<h3>Expected Results</h3>\n<p>The test should pass w/o issue (it was working fine under wasmtime 13 w/ e.g. <code>wasmtime run --env PYTHONPATH=/builddir/wasi/build/lib.wasi-wasm32-3.12:/Lib --mapdir /::/home/brettcannon/Repositories/python/cpython-3.12 -- python.wasm</code>.</p>\n<h3>Actual Results</h3>\n<p>W/o <code>--wasi threads=y</code>, it causes a <code>ESPIPE</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 16.0.0</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>WASI-SDK 20.<br>\n</p>\n</blockquote>",
        "id": 417963608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706130335
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1908950294\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<blockquote>\n<p>Adding --wasi threads=y fixes the issue which seems unrelated to file seeking.</p>\n</blockquote>\n<p>Under the hood this toggles the <code>-Spreview2=n</code> flag (sorry it's confusingly named). Basically we've got two implementations of preview1 in-tree. One is based on preview2 primitives and is the current default (<code>-Spreview2</code>, the <code>wasmtime_wasi::preview2</code> module). The other is the historical version based on preview1 (<code>-Spreview2=n</code>, the <code>wasi-common</code> crate).</p>\n<p>What you're probably seeing here is an unintended difference in the implementation between the two and a bug we need to fix (thanks for filing!).</p>\n<p>Would you be able to capture some extra logging to help debug a bit? Could you set <code>WASMTIME_LOG=wasmtime_wasi</code> for one of the failing tests, and then <code>WASMTIME_LOG=wasi_common,wasmtime_wasi</code> for the passing version when <code>-Spreview2=n</code> is passed (assuming <code>-Spreview2=n</code> makes it pass in the same manner as <code>--wasi threads</code></p>\n</blockquote>",
        "id": 417967232,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706131925
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1908950294\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<blockquote>\n<p>Adding --wasi threads=y fixes the issue which seems unrelated to file seeking.</p>\n</blockquote>\n<p>Under the hood this toggles the <code>-Spreview2=n</code> flag (sorry it's confusingly named). Basically we've got two implementations of preview1 in-tree. One is based on preview2 primitives and is the current default (<code>-Spreview2</code>, the <code>wasmtime_wasi::preview2</code> module). The other is the historical version based on preview1 (<code>-Spreview2=n</code>, the <code>wasi-common</code> crate).</p>\n<p>What you're probably seeing here is an unintended difference in the implementation between the two and a bug we need to fix (thanks for filing!).</p>\n<p>Would you be able to capture some extra logging to help debug a bit? Could you set <code>WASMTIME_LOG=wasmtime_wasi</code> for one of the failing tests, and then <code>WASMTIME_LOG=wasi_common,wasmtime_wasi</code> for the passing version when <code>-Spreview2=n</code> is passed (assuming <code>-Spreview2=n</code> makes it pass in the same manner as <code>--wasi threads</code>)</p>\n</blockquote>",
        "id": 417967248,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706131930
    },
    {
        "content": "<p>brettcannon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1908994805\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<blockquote>\n<p>Under the hood this toggles the <code>-Spreview2=n</code> flag (sorry it's confusingly named)</p>\n</blockquote>\n<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> definitely wouldn't have guessed that's how you force falling back to preview1.</p>\n<blockquote>\n<p>(thanks for filing!).</p>\n</blockquote>\n<p>Of course! You all have always been prompt and friendly when I run into issues trying to get Python working w/ WASI.</p>\n<blockquote>\n<p>Would you be able to capture some extra logging to help debug a bit? Could you set <code>WASMTIME_LOG=wasmtime_wasi</code> for one of the failing tests</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/14044037/failure.txt\">failure.txt</a></p>\n<blockquote>\n<p>then <code>WASMTIME_LOG=wasi_common,wasmtime_wasi</code> for the passing version when <code>-Spreview2=n</code> is passed</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/14044040/success.txt\">success.txt</a></p>\n<blockquote>\n<p>assuming <code>-Spreview2=n</code> makes it pass in the same manner as <code>--wasi threads</code></p>\n</blockquote>\n<p>It did!</p>\n<p>I also downloaded v15.0.1 and 14.0.4 and the issue is in 15 but <strong>not</strong> 14 (I'll update the opening comment accordingly). I have downgraded the buildbot I'm using to test CPython to 14.0.4 and the results will hopefully show a pass in <a href=\"https://buildbot.python.org/all/#/builders/1046/builds/4082\">https://buildbot.python.org/all/#/builders/1046/builds/4082</a> .</p>\n</blockquote>",
        "id": 417972212,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706134078
    },
    {
        "content": "<p>brettcannon edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Various CPython test cases have started failing when moving from wasmtime 13 to 16 due to <code>ESPIPE</code>. Adding <code>--wasi threads=y</code> fixes the issue which seems unrelated to file seeking.</p>\n<p>Example failure run can be seen at <a href=\"https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio\">https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio</a> right after I switched to wasmtime 16 from 13.</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>git clone https://github.com/python/cpython.git</code></li>\n<li><code>cd cpython</code></li>\n<li><code>python3 Tools/wasm/wasi.py build</code></li>\n<li>Edit <code>cross-build/wasm32-wasi/python.sh</code> and remove <code>--wasi threads=y</code></li>\n<li><code>./cross-build/wasm32-wasi/python.sh -m test test___all__</code></li>\n</ul>\n<p>You can also try  test___all__ test_bufio test_compileall test_dbm_dumb test_importlib test_io test_marshal test_pathlib test_posix test_runpy test_tarfile test_zipfile .</p>\n<h3>Expected Results</h3>\n<p>The test should pass w/o issue (it was working fine under wasmtime 13 w/ e.g. <code>wasmtime run --env PYTHONPATH=/builddir/wasi/build/lib.wasi-wasm32-3.12:/Lib --mapdir /::/home/brettcannon/Repositories/python/cpython-3.12 -- python.wasm</code>.</p>\n<h3>Actual Results</h3>\n<p>W/o <code>--wasi threads=y</code>, it causes a <code>ESPIPE</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 16.0.0</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>WASI-SDK 20.<br>\n</p>\n</blockquote>",
        "id": 417972281,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706134094
    },
    {
        "content": "<p>brettcannon edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Various CPython test cases have started failing when moving from wasmtime 13 to 16 due to <code>ESPIPE</code>. Adding <code>--wasi threads=y</code> fixes the issue which seems unrelated to file seeking.</p>\n<p>Example failure run can be seen at <a href=\"https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio\">https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio</a> right after I switched to wasmtime 16 from 13 (wasmtime 14.0.4 does not seem to have the issue).</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>git clone https://github.com/python/cpython.git</code></li>\n<li><code>cd cpython</code></li>\n<li><code>python3 Tools/wasm/wasi.py build</code></li>\n<li>Edit <code>cross-build/wasm32-wasi/python.sh</code> and remove <code>--wasi threads=y</code></li>\n<li><code>./cross-build/wasm32-wasi/python.sh -m test test___all__</code></li>\n</ul>\n<p>You can also try  test___all__ test_bufio test_compileall test_dbm_dumb test_importlib test_io test_marshal test_pathlib test_posix test_runpy test_tarfile test_zipfile .</p>\n<h3>Expected Results</h3>\n<p>The test should pass w/o issue (it was working fine under wasmtime 13 w/ e.g. <code>wasmtime run --env PYTHONPATH=/builddir/wasi/build/lib.wasi-wasm32-3.12:/Lib --mapdir /::/home/brettcannon/Repositories/python/cpython-3.12 -- python.wasm</code>.</p>\n<h3>Actual Results</h3>\n<p>W/o <code>--wasi threads=y</code>, it causes a <code>ESPIPE</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 16.0.0 and 15.0.1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>WASI-SDK 20.<br>\n</p>\n</blockquote>",
        "id": 417972351,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706134136
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1909009984\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>oh for <code>success.txt</code> that older version of Wasmtime might use <code>RUST_LOG</code> instead of <code>WASMTIME_LOG</code> (the log you uploaded is an empty file). Either that or the directive isn't right, which I could also be misremembering!</p>\n<p>Also the 14/15 split makes sense, that's when the switch in the defaults happened (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/RELEASES.md#1500\">release notes</a>)</p>\n</blockquote>",
        "id": 417974041,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706134899
    },
    {
        "content": "<p>brettcannon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1909022560\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<blockquote>\n<p>oh for <code>success.txt</code> that older version of Wasmtime might use <code>RUST_LOG</code> instead of <code>WASMTIME_LOG</code> (the log you uploaded is an empty file</p>\n</blockquote>\n<p>This was all under wasmtime 16; I validated separately about 14.0.4.</p>\n<blockquote>\n<p>Either that or the directive isn't right, which I could also be misremembering!</p>\n</blockquote>\n<p>It was a typo in the directive on my end. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Sorry about that!</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/14044350/success.txt\">success.txt</a></p>\n</blockquote>",
        "id": 417975440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706135602
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1909052004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>Ah ok, makes sense. I'm having difficulty reproducing in that I can't get a build to work it seems. My system's stock python seems too old since it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">📁</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">cpython</span><span class=\"o\">/</span><span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">build</span>\n<span class=\"n\">Traceback</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">most</span><span class=\"w\"> </span><span class=\"n\">recent</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">)</span>:\n  <span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"s\">\"/home/alex/code/cpython/Tools/wasm/wasi.py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">345</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">main</span><span class=\"p\">()</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s\">\"/home/alex/code/cpython/Tools/wasm/wasi.py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">341</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">main</span>\n<span class=\"w\">    </span><span class=\"n\">dispatch</span><span class=\"p\">[</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">subcommand</span><span class=\"p\">](</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s\">\"/home/alex/code/cpython/Tools/wasm/wasi.py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">265</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">build_all</span>\n<span class=\"w\">    </span><span class=\"n\">step</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">File</span><span class=\"w\"> </span><span class=\"s\">\"/home/alex/code/cpython/Tools/wasm/wasi.py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">78</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wrapper</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">contextlib</span><span class=\"p\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"n\">working_dir</span><span class=\"p\">)</span>:\n<span class=\"nc\">AttributeError</span>: <span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">contextlib</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">attribute</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">chdir</span><span class=\"o\">'</span>\n</code></pre></div>\n<p>Using 3.11 (as opposed to my 3.10) got further however (after installing wasi-sdk-21.0):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">21.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"w\">   </span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">524288</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">initial</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"mi\">10485760</span><span class=\"w\">   </span><span class=\"n\">Modules</span><span class=\"o\">/</span><span class=\"n\">_testimportmultiple</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\">   </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Modules</span><span class=\"o\">/</span><span class=\"n\">_testimportmultiple</span><span class=\"p\">.</span><span class=\"n\">cpython</span><span class=\"o\">-</span><span class=\"mi\">313</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span>: <span class=\"nc\">error</span>: <span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">argument</span>: <span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">first</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span>: <span class=\"nc\">error</span>: <span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">argument</span>: <span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">initial</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"mi\">10485760</span>\n<span class=\"n\">make</span>: <span class=\"o\">***</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Makefile</span>:<span class=\"mi\">3140</span>: <span class=\"nc\">Modules</span><span class=\"o\">/</span><span class=\"n\">_testimportmultiple</span><span class=\"p\">.</span><span class=\"n\">cpython</span><span class=\"o\">-</span><span class=\"mi\">313</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I edited the <code>configure</code> script to remove the <code>-Wl,</code> prefix since the linker is invoked directly here instead of through <code>clang</code> but that then led to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">21.0</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"w\">   </span><span class=\"o\">-</span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">524288</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">initial</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"mi\">10485760</span><span class=\"w\">   </span><span class=\"n\">Modules</span><span class=\"o\">/</span><span class=\"n\">_testimportmultiple</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\">   </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">Modules</span><span class=\"o\">/</span><span class=\"n\">_testimportmultiple</span><span class=\"p\">.</span><span class=\"n\">cpython</span><span class=\"o\">-</span><span class=\"mi\">313</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span>: <span class=\"nc\">error</span>: <span class=\"nc\">entry</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">suppress</span><span class=\"p\">)</span>: <span class=\"nc\">_start</span>\n<span class=\"n\">make</span>: <span class=\"o\">***</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Makefile</span>:<span class=\"mi\">3140</span>: <span class=\"nc\">Modules</span><span class=\"o\">/</span><span class=\"n\">_testimportmultiple</span><span class=\"p\">.</span><span class=\"n\">cpython</span><span class=\"o\">-</span><span class=\"mi\">313</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>Do you perhaps have a <code>CFLAGS</code> or <code>CC</code> or similar configured? (or do I need a fork of wasi-sdk? or is 21.0 too new?) </p>\n<hr>\n<p>I do notice though that in the failure logs I'm seeing a lot of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">host</span>::<span class=\"n\">filesystem</span>: <span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Too</span><span class=\"w\"> </span><span class=\"n\">many</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>whereas the success logs do not have that. That makes me think we're leaking something somewhere by accident. I don't think we're leaking through WASI fds since it stays around 4 for newly opened fds but my guess is that we have some <code>Resource&lt;T&gt;</code> which we're forgetting to drop or something like that which means the internal indices are filling up along with the host OS.</p>\n<p>Could you run <code>strace</code> to try to see what syscall leads to the large fd numbers? Might be able to go backwards from there to what's opening and forgetting to close.</p>\n</blockquote>",
        "id": 417977645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706136764
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1909054862\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>Aha it appears that this panics after 1k iterations:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"foo.rs\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{i}\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>so I think we found at least one culprit</p>\n</blockquote>",
        "id": 417977945,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706136942
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1909074753\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>Could you try <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7816\">https://github.com/bytecodealliance/wasmtime/pull/7816</a> and see if it resolves the issue? If not I can keep digging and see if there's still places we forgot to close things.</p>\n</blockquote>",
        "id": 417979522,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706137781
    },
    {
        "content": "<p>brettcannon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1910905368\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>I should be able to test the PR today or tomorrow (although based on how today is going, most likely tomorrow).</p>\n</blockquote>",
        "id": 418155686,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706212986
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1910962855\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>Wasmtime 17 is also released with the above fix which may make getting a binary easier</p>\n</blockquote>",
        "id": 418161183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706215174
    },
    {
        "content": "<p>brettcannon closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p>Various CPython test cases have started failing when moving from wasmtime 13 to 16 due to <code>ESPIPE</code>. Adding <code>--wasi threads=y</code> fixes the issue which seems unrelated to file seeking.</p>\n<p>Example failure run can be seen at <a href=\"https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio\">https://buildbot.python.org/all/#/builders/1124/builds/640/steps/11/logs/stdio</a> right after I switched to wasmtime 16 from 13 (wasmtime 14.0.4 does not seem to have the issue).</p>\n<h3>Steps to Reproduce</h3>\n<ul>\n<li><code>git clone https://github.com/python/cpython.git</code></li>\n<li><code>cd cpython</code></li>\n<li><code>python3 Tools/wasm/wasi.py build</code></li>\n<li>Edit <code>cross-build/wasm32-wasi/python.sh</code> and remove <code>--wasi threads=y</code></li>\n<li><code>./cross-build/wasm32-wasi/python.sh -m test test___all__</code></li>\n</ul>\n<p>You can also try  test___all__ test_bufio test_compileall test_dbm_dumb test_importlib test_io test_marshal test_pathlib test_posix test_runpy test_tarfile test_zipfile .</p>\n<h3>Expected Results</h3>\n<p>The test should pass w/o issue (it was working fine under wasmtime 13 w/ e.g. <code>wasmtime run --env PYTHONPATH=/builddir/wasi/build/lib.wasi-wasm32-3.12:/Lib --mapdir /::/home/brettcannon/Repositories/python/cpython-3.12 -- python.wasm</code>.</p>\n<h3>Actual Results</h3>\n<p>W/o <code>--wasi threads=y</code>, it causes a <code>ESPIPE</code>.</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 16.0.0 and 15.0.1</p>\n<p>Operating system: Linux</p>\n<p>Architecture: x64</p>\n<h3>Extra Info</h3>\n<p>WASI-SDK 20.<br>\n</p>\n</blockquote>",
        "id": 418344383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706299712
    },
    {
        "content": "<p>brettcannon <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813#issuecomment-1912627498\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7813\">issue #7813</a>:</p>\n<blockquote>\n<p>Wasmtime 17 fixed it!</p>\n<p>Now to file the other bugs I found. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>",
        "id": 418344385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1706299712
    }
]