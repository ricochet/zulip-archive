[
    {
        "content": "<p>Mrmaxmeier opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>The docs for <code>uextend</code> and friends mention</p>\n<blockquote>\n<p>If the input and output types are the same, this is a no-op.</p>\n</blockquote>\n<p>When called with matching types, the verifier complains though:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471\">https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471</a></p>\n</blockquote>",
        "id": 269202552,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643078996
    },
    {
        "content": "<p>Mrmaxmeier labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>The docs for <code>uextend</code> and friends mention</p>\n<blockquote>\n<p>If the input and output types are the same, this is a no-op.</p>\n</blockquote>\n<p>When called with matching types, the verifier complains though:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471\">https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471</a></p>\n</blockquote>",
        "id": 269202553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643078996
    },
    {
        "content": "<p>Mrmaxmeier labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>The docs for <code>uextend</code> and friends mention</p>\n<blockquote>\n<p>If the input and output types are the same, this is a no-op.</p>\n</blockquote>\n<p>When called with matching types, the verifier complains though:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471\">https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471</a></p>\n</blockquote>",
        "id": 269202554,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643078996
    },
    {
        "content": "<p>Mrmaxmeier edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>The docs for <code>uextend</code> and friends mention</p>\n<blockquote>\n<p>If the input and output types are the same, this is a no-op.</p>\n</blockquote>\n<p>When called with matching types, the verifier complains though:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471\">https://github.com/bytecodealliance/wasmtime/blob/5fc01bafc7185b797f71c37352cbe66aa740893c/cranelift/codegen/src/verifier/mod.rs#L1471</a></p>\n<p>(Whoops, this probably shouldn't be labeled as a bug ^^)</p>\n</blockquote>",
        "id": 269202731,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643079137
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722#issuecomment-1021503819\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>Thanks for filing an issue.</p>\n<p>I'd be in favor of updating the docs to match reality, rather than changing the verifier. Thoughts @cfallin?</p>\n</blockquote>",
        "id": 269304976,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643136757
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722#issuecomment-1021519995\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>@Mrmaxmeier I'm actually somewhat surprised that a uextend-T-to-T didn't work; this line</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">arg_type</span><span class=\"p\">.</span><span class=\"n\">lane_bits</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">ctrl_type</span><span class=\"p\">.</span><span class=\"n\">lane_bits</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>seems to indicate that equal input and output widths (<code>&gt;=</code>) should be fine. I think that this is a reasonable thing to support; it simplifies the producer side not to have to special-case. Could you share the input that led to this error?</p>\n</blockquote>",
        "id": 269307987,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643137937
    },
    {
        "content": "<p>Mrmaxmeier <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722#issuecomment-1021561306\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>The <code>&gt;=</code> condition guards the error case. Here's a <code>.clif</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 269315820,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643141076
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722#issuecomment-1021596475\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3722\">issue #3722</a>:</p>\n<blockquote>\n<p>Urgh, you're right, I didn't read closely enough; sorry!</p>\n<p>I looked a bit more into whether the backends would already support this or not, and it appears that at least e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/595e3227c530a68597ea29a30283e4114f621b10/cranelift/codegen/src/isa/x64/lower.rs#L2015-L2021\">here</a> in the x64 backend (maybe others too) the T-to-T case isn't handled. If you want to try your hand at doing so, I'm happy to review a PR, otherwise it's probably OK to update the docs to reflect the limitation for now. We might want to come back to this as we review opcode/type-coverage completeness, though.</p>\n</blockquote>",
        "id": 269321882,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1643143839
    }
]