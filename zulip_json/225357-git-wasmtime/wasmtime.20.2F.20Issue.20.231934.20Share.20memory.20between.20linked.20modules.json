[
    {
        "content": "<p>bubagl opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>I've tried to experiment with linking several wasm modules together (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs</a>). It works but it seems the memory isn't \"shared\". For instance it is impossible to send a string between modules. Am I missing something? Thanks!</p>\n</blockquote>",
        "id": 202195153,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593277041
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-650588848\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>WASI modules export their memory. They don't import it. This means that every WASI module has it's own memory that it gives access to others to. It never accesses memory of other modules.</p>\n</blockquote>",
        "id": 202196218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593278706
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-650606520\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>It never accesses memory of other modules.</p>\n</blockquote>\n<p>Is there any way to send data between different modules except \"by value\"?</p>\n</blockquote>",
        "id": 202200673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593285130
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-650607567\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>You need to make all modules except for at most one import the memory instead of export. This means that you will have to use <code>wasm32-unknown-unknown</code> instead of <code>wasm32-wasi</code> and then use I think <code>-Clink-arg=--import-memory</code> to tell LLD to import the memory instead of export it.</p>\n</blockquote>",
        "id": 202200968,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593285554
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-650625728\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>have to use <code>wasm32-unknown-unknown</code></p>\n</blockquote>\n<p>but in this case the module wouldn't be able to use any system/wasi call. </p>\n</blockquote>",
        "id": 202204587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593291309
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-650651321\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>Btw, what is the usecase of merging multiple wasms into a single instance?</p>\n</blockquote>",
        "id": 202210742,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593302175
    },
    {
        "content": "<p>bubagl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-650651321\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>Btw, what is the usecase of merging multiple wasms into a single instance? Does this feature has any limitations?</p>\n</blockquote>",
        "id": 202265021,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593394253
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-651150299\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>Today it's somewhat difficult to set this up. Wasm modules today can have at most one memory, which means you can't natively, in wasm, copy between memories (since you can only reference at most up to one). This means that there's two ways you can set up modules which \"share\" a linear memory:</p>\n<ul>\n<li>\n<p>The host itself can copy between memories. On the host you can reference all the memories you want, but you'd have to implement the boilerplate of marshalling messages between modules. Eventually with interface types it's intended that the runtime can do this for you.</p>\n</li>\n<li>\n<p>You can compile all wasm modules to import a memory, and then the host provides a single memory to each module. This is a form of \"dynamic linking\" in the wasm world, but AFAIK the support is somewhat limited here in toolchains. I believe it's technically possible to get things working but you're sort of on your own in the way of documentation, examples, etc.</p>\n</li>\n</ul>\n<p>I don't think you're currently missing anything about wasm, this is sort of just about how the state of toolchains are today. We're working to improve things with interface types, though, as well as the module linking proposal which will guide toolchains towards wasm modules which are easily linked together.</p>\n<blockquote>\n<p>Is there any way to send data between different modules except \"by value\"?</p>\n</blockquote>\n<p>Functions can only pass integers around at this time. With interface types you'll be able to pass richer types. Passing a pointer, however, will only work if the modules reference the same memory or know which memory the pointer is pointing to.</p>\n<blockquote>\n<p>Btw, what is the usecase of merging multiple wasms into a single instance? Does this feature has any limitations?</p>\n</blockquote>\n<p>Wasmtime doesn't do this and this sounds like more of a toolchain question? There's various reasons you might want to do this but why is this question coming up? Do you have a use case in mind you'd like to game out?</p>\n</blockquote>",
        "id": 202314676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593440098
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-651159014\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>We're working to improve things with interface types</p>\n</blockquote>\n<p>Interface types are are defined by IDL (WebIDL), correct? </p>\n</blockquote>",
        "id": 202317298,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593440985
    },
    {
        "content": "<p>bubagl edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-651159014\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>We're working to improve things with interface types</p>\n</blockquote>\n<p>Interface types are are defined by IDL (WebIDL), correct? Do you already have interface types working (even as beta)?</p>\n</blockquote>",
        "id": 202318263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593441286
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-651181443\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>A previous iteration of the proposal worked with WebIDL but they are no longer based on WebIDL (although there will be a definition of a translation from WebIDL to interface types). Currently interface types are not implemented in Wasmtime.</p>\n</blockquote>",
        "id": 202323436,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593443219
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-651190237\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>A previous iteration of the proposal worked with WebIDL </p>\n</blockquote>\n<p>That's interesting! What the new iteration is based on? </p>\n</blockquote>",
        "id": 202325645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593444116
    },
    {
        "content": "<p>tschneidereit <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-651207662\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>That's interesting! What the new iteration is based on?</p>\n</blockquote>\n<p>The most important part is the encoding in the binary and text formats for WebAssembly itself, as described in <a href=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md\">the explainer</a>. See also <a href=\"https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md#web-idl-integration\">the section on WebIDL integration</a> in that explainer.</p>\n<p>In the explainer, you can see snippets that include extensions to the <code>wat</code> text format. I've seen people call this <code>wit</code>, and WASI uses an extended form of it, called <code>witx</code>. Developer tools will probably use something along these lines to define interfaces, as described by @radu-matei in <a href=\"https://radu-matei.com/blog/wasm-api-witx/\">a recent blog post</a>.</p>\n</blockquote>",
        "id": 202329594,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593445955
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-652587383\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>Will wasmtime support \"dynamic linking\" (<a href=\"https://webassembly.org/docs/dynamic-linking\">https://webassembly.org/docs/dynamic-linking</a>) in the future?</p>\n</blockquote>",
        "id": 202608371,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593629301
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-652596910\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>Wasmtime should \"support\" that today actually, in the sense that the dynamic linking as proposed there is purely an embedder construct building on core wasm building blocks. AFAIK C/Emscripten have at least basic support for that style of linking but I don't think that it's super widely used at this time. The <a href=\"https://github.com/webassembly/module-linking\">module linking proposal</a> may become a new foundation for dynamic linking.</p>\n<p>In any case Wasmtime will support dynamic linking of wasm modules, it's mostly just a question of how exactly that will look like in the ecosystem.</p>\n</blockquote>",
        "id": 202610992,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593630591
    },
    {
        "content": "<p>bubagl <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-652777294\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<blockquote>\n<p>Wasmtime should \"support\" that today actually</p>\n</blockquote>\n<p>could you point out some example of dynamic linking. I don't see <code>dlopen</code> implemented by WT.</p>\n</blockquote>",
        "id": 202649759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593664870
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934#issuecomment-653114571\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1934\">Issue #1934</a>:</p>\n<blockquote>\n<p>I don't currently know of any examples of dlopen and/or that scheme of dynamic linking. I believe it's mostly just a description of how it <em>could</em> work rather than a working system. The purpose of that explanation, however, is how it can be built on the MVP of wasm and doesn't need runtime support, so for that scheme of dynamic linking you won't find it in Wasmtime.</p>\n</blockquote>",
        "id": 202713683,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593708354
    }
]