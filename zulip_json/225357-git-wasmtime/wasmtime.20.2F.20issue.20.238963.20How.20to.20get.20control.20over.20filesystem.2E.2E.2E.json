[
    {
        "content": "<p>stevenj opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>Our implementation requires filesystems to be fully controlled, and files come from a VFS not any mounted filesystem.<br>\nThat means we need to control the low level aspects of filesystem access for WasiP2.</p>\n<p>I don't see how that can be achieved, because the only option I see is giving Wasi access to a pre-opened directory, which is 100% off the table for our application.  How to use the WaiCtxBuilder, and abstract the necessary filesystem interfaces to the runtime?</p>\n</blockquote>",
        "id": 451757440,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721136035
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963#issuecomment-2231096470\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8963\">issue #8963</a>:</p>\n<blockquote>\n<p>For a fully virtual filesystem you won't be using <code>WasiCtxBuilder</code>. You'll want to instead implement the <code>Host</code> traits directly generated in the <code>wasmtime-wasi</code> crate such as <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/bindings/sync/filesystem/types/trait.Host.html\">this</a>. You'd then call <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/bindings/filesystem/types/fn.add_to_linker.html\"><code>add_to_linker</code></a> or similarly.</p>\n</blockquote>",
        "id": 451774291,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721140878
    }
]