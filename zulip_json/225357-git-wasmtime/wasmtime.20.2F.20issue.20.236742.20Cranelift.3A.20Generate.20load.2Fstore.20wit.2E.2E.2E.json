[
    {
        "content": "<p>maekawatoshiki opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6742\">issue #6742</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Currently, on aarch64 backend, the following piece of CLIF instructions...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span>: <span class=\"nc\">int64_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">v9</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">int64_t</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">[</span><span class=\"n\">v10</span><span class=\"p\">];</span>\n<span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span>\n<span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n</code></pre></div>\n<p>... will generate the assembly like below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">lsl</span><span class=\"w\">     </span><span class=\"n\">x5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">3</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x5</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>However, the assembly can be converted into more efficient one like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">adrp</span><span class=\"w\">    </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x780000</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">]</span>\n<span class=\"n\">ldr</span><span class=\"w\">     </span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">x4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lsl</span><span class=\"w\"> </span>#<span class=\"mi\">3</span><span class=\"p\">]</span>\n</code></pre></div>\n<h4>Benefit</h4>\n<p>The shorter instruction sequence will help improve the performance.<br>\nIn fact, this problem was found when I was diffing the assembly generated by cranelift and llvm, where llvm was around 20% faster than cranelift in my case.</p>\n<h4>Implementation</h4>\n<p>I've walked through the cranelift codebase and figured out that such addressing mode seems to be represented as <code>AMode::RegScaled</code>, but not sure how I can teach the code generator to use <code>RegScaled</code> for <code>ldr</code>.<br>\nEditing isle rules or something like that?</p>\n</blockquote>",
        "id": 376222496,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1689655120
    }
]