[
    {
        "content": "<p>whitequark opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1742\">PR #1742</a> from <code>windows-x32-abi</code> to <code>master</code>:</p>\n<blockquote>\n<p>As it stands the patch in this PR is as minimal as it is hair-raising, and it's really not going to be merged in the current state. However, with it and #1740 I can actually run simple programs on x32! <br>\n![Screenshot_20200521_193835](<a href=\"https://user-images.githubusercontent.com/54771/82598768-a98bc600-9b9a-11ea-861e-7ad54ef5c350.png\">https://user-images.githubusercontent.com/54771/82598768-a98bc600-9b9a-11ea-861e-7ad54ef5c350.png</a>)</p>\n<p>(The <code>-Cpanic=abort</code>, plus a dummy <code>#[no_mangle] pub extern fn _Unwind_Resume() { unimplemented!() }</code>, are there to work around the fact that Linux distributions all build MinGW with SjLj exceptions, but Rust expects a MinGW toolchain with DWARF exceptions.)</p>\n<p>Let me explain the reasons this PR looks like it does. </p>\n<p>First, currently target-lexicon considers Windows as <a href=\"https://github.com/bytecodealliance/target-lexicon/blob/0f50c382befc9f7f13349299f3ca77cabcc4b163/src/triple.rs#L124\">always using <code>fastcall</code></a>. However that's not the case on x32, where C code uses <code>cdecl</code> by default, and Win32 APIs use <code>stdcall</code> by default.  This is why Windows x32 is special-cased in cranelift in this PR. To fix this, I believe that <code>default_calling_convention</code> for Windows x32 should return <code>cdecl</code> so that it matches the behavior of the Rust <code>c</code> calling convention, but that's where we get to the second issue...</p>\n<p>Second, there is actually no way to express \"Windows <code>cdecl</code>\" in either target-lexicon or cranelift. AFAICT this calling convention is functionally identical to the System V one; LLVM calls it <code>ccc</code> to avoid naming it in either a *nix-specific way (\"System V\") or a Windows-specific way (\"<code>cdecl</code>\"). The way this should be handled is purely subjective though (the options being \"rename SystemV to Ccc\", \"rename SystemV to Cdecl\", \"add Cdecl as an alias of SystemV for Windows alone\", and \"do nothing and just use SystemV on Windows x32\") so I'm going to implement whatever the maintainers ask me to.</p>\n</blockquote>",
        "id": 198367980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590090807
    },
    {
        "content": "<p>whitequark updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1742\">PR #1742</a> from <code>windows-x32-abi</code> to <code>master</code>:</p>\n<blockquote>\n<p>As it stands the patch in this PR is as minimal as it is hair-raising, and it's really not going to be merged in the current state. However, with it and #1740 I can actually run simple programs on x32! <br>\n![Screenshot_20200521_193835](<a href=\"https://user-images.githubusercontent.com/54771/82598768-a98bc600-9b9a-11ea-861e-7ad54ef5c350.png\">https://user-images.githubusercontent.com/54771/82598768-a98bc600-9b9a-11ea-861e-7ad54ef5c350.png</a>)</p>\n<p>(The <code>-Cpanic=abort</code>, plus a dummy <code>#[no_mangle] pub extern fn _Unwind_Resume() { unimplemented!() }</code>, are there to work around the fact that Linux distributions all build MinGW with SjLj exceptions, but Rust expects a MinGW toolchain with DWARF exceptions.)</p>\n<p>Let me explain the reasons this PR looks like it does. </p>\n<p>First, currently target-lexicon considers Windows as <a href=\"https://github.com/bytecodealliance/target-lexicon/blob/0f50c382befc9f7f13349299f3ca77cabcc4b163/src/triple.rs#L124\">always using <code>fastcall</code></a>. However that's not the case on x32, where C code uses <code>cdecl</code> by default, and Win32 APIs use <code>stdcall</code> by default.  This is why Windows x32 is special-cased in cranelift in this PR. To fix this, I believe that <code>default_calling_convention</code> for Windows x32 should return <code>cdecl</code> so that it matches the behavior of the Rust <code>c</code> calling convention, but that's where we get to the second issue...</p>\n<p>Second, there is actually no way to express \"Windows <code>cdecl</code>\" in either target-lexicon or cranelift. AFAICT this calling convention is functionally identical to the System V one; LLVM calls it <code>ccc</code> to avoid naming it in either a *nix-specific way (\"System V\") or a Windows-specific way (\"<code>cdecl</code>\"). The way this should be handled is purely subjective though (the options being \"rename SystemV to Ccc\", \"rename SystemV to Cdecl\", \"add Cdecl as an alias of SystemV for Windows alone\", and \"do nothing and just use SystemV on Windows x32\") so I'm going to implement whatever the maintainers ask me to.</p>\n</blockquote>",
        "id": 198379279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590096212
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1742\">PR #1742</a> from <code>windows-x32-abi</code> to <code>main</code>:</p>\n<blockquote>\n<p>As it stands the patch in this PR is as minimal as it is hair-raising, and it's really not going to be merged in the current state. However, with it and #1740 I can actually run simple programs on x32! <br>\n![Screenshot_20200521_193835](<a href=\"https://user-images.githubusercontent.com/54771/82598768-a98bc600-9b9a-11ea-861e-7ad54ef5c350.png\">https://user-images.githubusercontent.com/54771/82598768-a98bc600-9b9a-11ea-861e-7ad54ef5c350.png</a>)</p>\n<p>(The <code>-Cpanic=abort</code>, plus a dummy <code>#[no_mangle] pub extern fn _Unwind_Resume() { unimplemented!() }</code>, are there to work around the fact that Linux distributions all build MinGW with SjLj exceptions, but Rust expects a MinGW toolchain with DWARF exceptions.)</p>\n<p>Let me explain the reasons this PR looks like it does. </p>\n<p>First, currently target-lexicon considers Windows as <a href=\"https://github.com/bytecodealliance/target-lexicon/blob/0f50c382befc9f7f13349299f3ca77cabcc4b163/src/triple.rs#L124\">always using <code>fastcall</code></a>. However that's not the case on x32, where C code uses <code>cdecl</code> by default, and Win32 APIs use <code>stdcall</code> by default.  This is why Windows x32 is special-cased in cranelift in this PR. To fix this, I believe that <code>default_calling_convention</code> for Windows x32 should return <code>cdecl</code> so that it matches the behavior of the Rust <code>c</code> calling convention, but that's where we get to the second issue...</p>\n<p>Second, there is actually no way to express \"Windows <code>cdecl</code>\" in either target-lexicon or cranelift. AFAICT this calling convention is functionally identical to the System V one; LLVM calls it <code>ccc</code> to avoid naming it in either a *nix-specific way (\"System V\") or a Windows-specific way (\"<code>cdecl</code>\"). The way this should be handled is purely subjective though (the options being \"rename SystemV to Ccc\", \"rename SystemV to Cdecl\", \"add Cdecl as an alias of SystemV for Windows alone\", and \"do nothing and just use SystemV on Windows x32\") so I'm going to implement whatever the maintainers ask me to.</p>\n</blockquote>",
        "id": 202009304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593110967
    },
    {
        "content": "<p>whitequark closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1742\">PR #1742</a>.</p>",
        "id": 214010887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1603260013
    }
]