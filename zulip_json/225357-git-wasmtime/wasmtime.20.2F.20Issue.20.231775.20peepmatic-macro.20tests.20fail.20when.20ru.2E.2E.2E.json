[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>I've set up my environment to do cross-compilation and cross-architecture running of aarch64 tests from x86. This uses <code>qemu</code> in its userspace-emulation mode, as documented in <code>docs/contributing-building.md</code>.</p>\n<p>If I try to run tests, I encounter a failure in the <code>peepmatic-macro</code> crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>[cfallin@cfallin-laptop wasmtime.trunk]$ cargo test -p peepmatic-macro --target aarch64-unknown-linux-gnu --release\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.18\n   Compiling proc-macro2 v1.0.10\n   Compiling quote v1.0.3\n   Compiling peepmatic-macro v0.1.0 (/home/cfallin/wasmtime.trunk/cranelift/peepmatic/crates/macro)\n    Finished release [optimized] target(s) in 26.17s\n     Running target/release/deps/peepmatic_macro-30cd4009616cf4d6\n/home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6: Invalid ELF image for this architecture\nerror: test failed, to rerun pass &#39;-p peepmatic-macro --lib&#39;\n\nCaused by:\n  process didn&#39;t exit successfully: `qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib64 /home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6` (exit code: 255)\n</code></pre></div>\n\n\n<p>The named binary is an x86-64 ELF binary, so presumably some bit of build glue is just assuming that host == target.</p>\n<p>This issue has likely existed for a while, but I only recently encountered it because I'm newly cross-compiling; I was previously using a native aarch64 box that we've lost access to. Our CI tests exclude peepmatic, so this is not critical, but it would be nice for a <code>cargo test --all</code> to work by default when one has the right qemu runner set-up.</p>\n</blockquote>",
        "id": 198973071,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590628154
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>I've set up my environment to do cross-compilation and cross-architecture running of aarch64 tests from x86. This uses <code>qemu</code> in its userspace-emulation mode, as documented in <code>docs/contributing-building.md</code>.</p>\n<p>If I try to run tests, I encounter a failure in the <code>peepmatic-macro</code> crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>[cfallin@cfallin-laptop wasmtime.trunk]$ cargo test -p peepmatic-macro --target aarch64-unknown-linux-gnu --release\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.18\n   Compiling proc-macro2 v1.0.10\n   Compiling quote v1.0.3\n   Compiling peepmatic-macro v0.1.0 (/home/cfallin/wasmtime.trunk/cranelift/peepmatic/crates/macro)\n    Finished release [optimized] target(s) in 26.17s\n     Running target/release/deps/peepmatic_macro-30cd4009616cf4d6\n/home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6: Invalid ELF image for this architecture\nerror: test failed, to rerun pass &#39;-p peepmatic-macro --lib&#39;\n\nCaused by:\n  process didn&#39;t exit successfully: `qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib64 /home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6` (exit code: 255)\n</code></pre></div>\n\n\n<p>The named binary is an x86-64 ELF binary, so presumably some bit of build glue is just assuming that host == target.</p>\n<p>This issue has likely existed for a while, but I only recently encountered it because I'm newly cross-compiling; I was previously using a native aarch64 box that we've lost access to. Our CI tests exclude peepmatic, so this is not critical, but it would be nice for a <code>cargo test --all</code> to work by default when one has the right qemu runner set-up.</p>\n</blockquote>",
        "id": 198973072,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590628154
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775#issuecomment-635030942\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift:area:peepmatic\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: cranelift:area:peepmatic</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 198973077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590628167
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>I've set up my environment to do cross-compilation and cross-architecture running of aarch64 tests from x86. This uses <code>qemu</code> in its userspace-emulation mode, as documented in <code>docs/contributing-building.md</code>.</p>\n<p>If I try to run tests, I encounter a failure in the <code>peepmatic-macro</code> crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>[cfallin@cfallin-laptop wasmtime.trunk]$ cargo test -p peepmatic-macro --target aarch64-unknown-linux-gnu --release\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.18\n   Compiling proc-macro2 v1.0.10\n   Compiling quote v1.0.3\n   Compiling peepmatic-macro v0.1.0 (/home/cfallin/wasmtime.trunk/cranelift/peepmatic/crates/macro)\n    Finished release [optimized] target(s) in 26.17s\n     Running target/release/deps/peepmatic_macro-30cd4009616cf4d6\n/home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6: Invalid ELF image for this architecture\nerror: test failed, to rerun pass &#39;-p peepmatic-macro --lib&#39;\n\nCaused by:\n  process didn&#39;t exit successfully: `qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib64 /home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6` (exit code: 255)\n</code></pre></div>\n\n\n<p>The named binary is an x86-64 ELF binary, so presumably some bit of build glue is just assuming that host == target.</p>\n<p>This issue has likely existed for a while, but I only recently encountered it because I'm newly cross-compiling; I was previously using a native aarch64 box that we've lost access to. Our CI tests exclude peepmatic at least for the aarch64 cross-tests, so this is not critical, but it would be nice for a <code>cargo test --all</code> to work by default when one has the right qemu runner set-up.</p>\n</blockquote>",
        "id": 198973094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590628196
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775#issuecomment-635209856\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p><code>peepmatic-macro</code> is a proc-macro, which means that it must be compiled for the host architecture. How did you setup cargo to run tests using qemu?</p>\n</blockquote>",
        "id": 198996908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590655881
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775#issuecomment-635372886\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>TBH this actually looks like a bug in Cargo. In the meantime I've opened up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1778\">https://github.com/bytecodealliance/wasmtime/pull/1778</a></p>\n</blockquote>",
        "id": 199026861,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590674896
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775#issuecomment-635375552\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>Er actually, alternatively, this is fixed in nightly Cargo!</p>\n</blockquote>",
        "id": 199027414,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590675171
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775#issuecomment-635411365\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>Thanks, @alexcrichton!</p>\n<p>@bjorn3: I'm using the <code>~/.cargo/config.toml</code> settings that we added recently in <code>docs/contributing-building.md</code>; basically this gives Cargo the ability to use qemu as a runner automatically.</p>\n</blockquote>",
        "id": 199035618,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590678679
    },
    {
        "content": "<p>fitzgen closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1775\">Issue #1775</a>:</p>\n<blockquote>\n<p>I've set up my environment to do cross-compilation and cross-architecture running of aarch64 tests from x86. This uses <code>qemu</code> in its userspace-emulation mode, as documented in <code>docs/contributing-building.md</code>.</p>\n<p>If I try to run tests, I encounter a failure in the <code>peepmatic-macro</code> crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>[cfallin@cfallin-laptop wasmtime.trunk]$ cargo test -p peepmatic-macro --target aarch64-unknown-linux-gnu --release\n   Compiling unicode-xid v0.2.0\n   Compiling syn v1.0.18\n   Compiling proc-macro2 v1.0.10\n   Compiling quote v1.0.3\n   Compiling peepmatic-macro v0.1.0 (/home/cfallin/wasmtime.trunk/cranelift/peepmatic/crates/macro)\n    Finished release [optimized] target(s) in 26.17s\n     Running target/release/deps/peepmatic_macro-30cd4009616cf4d6\n/home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6: Invalid ELF image for this architecture\nerror: test failed, to rerun pass &#39;-p peepmatic-macro --lib&#39;\n\nCaused by:\n  process didn&#39;t exit successfully: `qemu-aarch64 -L /usr/aarch64-linux-gnu -E LD_LIBRARY_PATH=/usr/aarch64-linux-gnu/lib64 /home/cfallin/wasmtime.trunk/target/release/deps/peepmatic_macro-30cd4009616cf4d6` (exit code: 255)\n</code></pre></div>\n\n\n<p>The named binary is an x86-64 ELF binary, so presumably some bit of build glue is just assuming that host == target.</p>\n<p>This issue has likely existed for a while, but I only recently encountered it because I'm newly cross-compiling; I was previously using a native aarch64 box that we've lost access to. Our CI tests exclude peepmatic at least for the aarch64 cross-tests, so this is not critical, but it would be nice for a <code>cargo test --all</code> to work by default when one has the right qemu runner set-up.</p>\n</blockquote>",
        "id": 199040606,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590680773
    }
]