[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-613967038\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-613967038\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\" title=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 194012555,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586947876
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-613976147\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-613976147\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>Ugh, looks like it uncovered another issue - on i686 return pointer parameter will be on stack, but we're assuming it will always be in a register:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/codegen/src/isa/x86/abi.rs#L287-L293\" title=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/codegen/src/isa/x86/abi.rs#L287-L293\">https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/codegen/src/isa/x86/abi.rs#L287-L293</a></p>\n</blockquote>",
        "id": 194014400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586949293
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614022255\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614022255\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>There was one test that didn't pass (<code>cranelift/filetests/filetests/legalizer/popcnt-i128.clif</code>) and it looks like its target should be <code>x86_64</code>, not <code>i686</code> (see <a href=\"https://github.com/bytecodealliance/wasmtime/commit/f7c7245b062be9aab40b36bd8d1f090abde45807\" title=\"https://github.com/bytecodealliance/wasmtime/commit/f7c7245b062be9aab40b36bd8d1f090abde45807\">commit</a>). I changed it to x86_64.</p>\n<p>It looks like function signature legalization for i686 is incomplete. In particular, it doesn't differentiate between registers designated for return values on i686 and x64. I think it should be discussed in separate issue.</p>\n</blockquote>",
        "id": 194024671,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586955332
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614162893\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614162893\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>For SystemV I believe <code>i128</code> should be passed and returned in two registers, like it currently does, instead of through <code>sret</code>.</p>\n</blockquote>",
        "id": 194061932,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1586970435
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614770451\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614770451\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>@bjorn3 </p>\n<p>Okay, <code>i128</code> arguments are definitely handled incorrectly and I'm not sure anymore how <code>i128</code> return values should be handled. The problem is that Microsoft ABI doesn't support 128-bit integer type. It defines <code>__m128</code> vector type, but that's different thing.</p>\n<blockquote>\n<p>A scalar return value that can fit into 64 bits is returned through RAX; this includes __m64 types. Non-scalar types including floats, doubles, and vector types such as __m128, __m128i, __m128d are returned in XMM0. [...] User-defined types can be returned by value from global functions and static member functions. To return a user-defined type by value in RAX, it must have a length of 1, 2, 4, 8, 16, 32, or 64 bits. [...] Otherwise, the caller assumes the responsibility of allocating memory and passing a pointer for the return value as the first argument. Subsequent arguments are then shifted one argument to the right. The same pointer must be returned by the callee in RAX.</p>\n</blockquote>\n<p>So if <code>i128</code> is different from <code>__m128</code> it should be treated like user-defined type and returned via <code>sret</code>. That's what rustc does for <code>win64</code> calling convention and what Cranelift would do with this change. On the other hand, gcc and clang treat <code>int128</code> like <code>__m128</code>.</p>\n<p>&lt;details&gt;&lt;summary&gt;msvc&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;xmmintrin.h&gt;</span><span class=\"cp\"></span>\n<span class=\"kr\">__m128</span> <span class=\"nf\">test_m128</span><span class=\"p\">(</span><span class=\"kr\">__m128</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">x$</span> <span class=\"err\">=</span> <span class=\"mi\">8</span>\n<span class=\"nf\">__m128</span> <span class=\"no\">test_m128</span><span class=\"p\">(</span><span class=\"no\">__m128</span><span class=\"p\">)</span> <span class=\"no\">PROC</span>           <span class=\"c\">; test_m128, COMDAT</span>\n        <span class=\"nf\">movups</span>  <span class=\"no\">xmm0</span><span class=\"p\">,</span> <span class=\"no\">XMMWORD</span> <span class=\"no\">PTR</span> <span class=\"p\">[</span><span class=\"no\">rcx</span><span class=\"p\">]</span>\n        <span class=\"nf\">ret</span>     <span class=\"mi\">0</span>\n<span class=\"nf\">__m128</span> <span class=\"no\">test_m128</span><span class=\"p\">(</span><span class=\"no\">__m128</span><span class=\"p\">)</span> <span class=\"no\">ENDP</span>           <span class=\"c\">; test_m128</span>\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;gcc&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">ms_abi</span><span class=\"p\">))</span> <span class=\"n\">__int128</span> <span class=\"n\">test_i128</span><span class=\"p\">(</span><span class=\"n\">__int128</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">test_i128</span><span class=\"p\">(</span><span class=\"no\">__int128</span><span class=\"p\">):</span>\n        <span class=\"nf\">movdqa</span>  <span class=\"no\">xmm0</span><span class=\"p\">,</span> <span class=\"no\">XMMWORD</span> <span class=\"no\">PTR</span> <span class=\"p\">[</span><span class=\"no\">rcx</span><span class=\"p\">]</span>\n        <span class=\"nf\">ret</span>\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;clang&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">ms_abi</span><span class=\"p\">))</span> <span class=\"n\">__int128</span> <span class=\"n\">test_i128</span><span class=\"p\">(</span><span class=\"n\">__int128</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nf\">test_i128</span><span class=\"p\">(</span><span class=\"no\">__int128</span><span class=\"p\">):</span>                          <span class=\"c\"># @test_i128(__int128)</span>\n        <span class=\"nf\">movaps</span>  <span class=\"no\">xmm0</span><span class=\"p\">,</span> <span class=\"no\">xmmword</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rcx</span><span class=\"p\">]</span>\n        <span class=\"nf\">ret</span>\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>&lt;details&gt;&lt;summary&gt;rustc&lt;/summary&gt;</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;win64&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_i128</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i128</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">test_i128:</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">rax</span><span class=\"p\">,</span> <span class=\"no\">rcx</span>\n        <span class=\"nf\">movups</span>  <span class=\"no\">xmm0</span><span class=\"p\">,</span> <span class=\"no\">xmmword</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rdx</span><span class=\"p\">]</span>\n        <span class=\"nf\">movups</span>  <span class=\"no\">xmmword</span> <span class=\"no\">ptr</span> <span class=\"p\">[</span><span class=\"no\">rcx</span><span class=\"p\">],</span> <span class=\"no\">xmm0</span>\n        <span class=\"nf\">ret</span>\n</pre></div>\n\n\n<p>&lt;/details&gt;</p>\n<p>Regarding the <code>i128</code> arguments:</p>\n<blockquote>\n<p>Any argument that doesn't fit in 8 bytes, or isn't 1, 2, 4, or 8 bytes, must be passed by reference. A single argument is never spread across multiple registers. [...] 16-byte arguments are passed by reference.</p>\n</blockquote>\n<p>From what I see, Cranelift doesn't support specifying that argument should be passed by reference.</p>\n<p>Microsoft spec: <a href=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention\" title=\"https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention\">https://docs.microsoft.com/en-us/cpp/build/x64-calling-convention</a><br>\nCompilers comparison: <a href=\"https://godbolt.org/z/bS9-FG\" title=\"https://godbolt.org/z/bS9-FG\">https://godbolt.org/z/bS9-FG</a></p>\n</blockquote>",
        "id": 194334639,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587055936
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614782080\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-614782080\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>I would prefer matching the rustc abi for all calling conventions. This means splitting into two registers for SystemV and passing by-ref for WindowsFastCall. Matching the rustc abi is important for <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift\">cg_clif</a> to eventually be able to call between it and cg_llvm (the default backend for rustc)</p>\n</blockquote>",
        "id": 194337640,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1587057270
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-621306571\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-621306571\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>In the current state, return values should work properly for win64 fastcall. I think fixing problems with argument passing on win64 deserves a separate PR, as it requires implementing passing-by-ref.</p>\n</blockquote>",
        "id": 195732514,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588176124
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633563793\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>Can somebody review this PR? This is necessary for Windows support in cg_clif.</p>\n</blockquote>",
        "id": 198666508,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590412054
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633607731\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>@teapotd I just tried this and the following resulted in a panic:</p>\n<div class=\"codehilite\"><pre><span></span><code>function u0:29(i128) -&gt; i128 windows_fastcall {\n    sig0 = (i128) -&gt; i128 windows_fastcall\n    fn0 = u0:35 sig0\n\nblock0(v0: i128):\n    trap user0\n\nblock1:\n    v6 = call fn0(v0)\n    trap user0\n}\n</code></pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;Signature still wrong: v11 = call fn0(v0, v10), sig0(i64 [%18], i64 [%24], i64 sret [%17]) -&gt; i64 sret [%16] windows_fastcall&#39;, cranelift/codegen/src/legalizer/boundary.rs:773:5\nstack backtrace:\n[...]\n  12: std::panicking::begin_panic_fmt\n             at src/libstd/panicking.rs:332\n  13: cranelift_codegen::legalizer::boundary::handle_call_abi\n             at cranelift/codegen/src/legalizer/boundary.rs:773\n  14: cranelift_codegen::legalizer::legalize_inst\n             at cranelift/codegen/src/legalizer/mod.rs:58\n  15: cranelift_codegen::legalizer::legalize_function\n             at cranelift/codegen/src/legalizer/mod.rs:170\n  16: cranelift_codegen::context::Context::legalize\n             at cranelift/codegen/src/context.rs:319\n  17: cranelift_codegen::context::Context::compile\n             at cranelift/codegen/src/context.rs:167\n  18: cranelift_codegen::context::Context::compile_and_emit\n             at cranelift/codegen/src/context.rs:131\n[...]\n</code></pre></div>\n\n\n</blockquote>",
        "id": 198676570,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590418243
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633629727\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>It looks like arguments to sret calls are not legalized at all (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/51f9ac2150bd880dc7b92952ba92e72ea3ab60b7/cranelift/codegen/src/legalizer/boundary.rs#L326-L427\"><code>legalize_sret_call</code></a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/51f9ac2150bd880dc7b92952ba92e72ea3ab60b7/cranelift/codegen/src/legalizer/boundary.rs#L753-L771\"><code>handle_call_abi</code></a>). For example this gives the same panic on system_v:</p>\n<div class=\"codehilite\"><pre><span></span><code>function u0:29(i128) {\n    sig0 = (i128) -&gt; i64, i64, i64, i64 system_v\n    fn0 = u0:35 sig0\nblock0(v0: i128):\n    v1, v2, v3, v4 = call fn0(v0)\n    trap user0\n}\n</code></pre></div>\n\n\n<p>I'll look into this.</p>\n</blockquote>",
        "id": 198681699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590421625
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633693180\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>@bjorn3 It should be okay now. I think you should try #1670 instead, as it contains this changes and fixes incoming arguments as well.</p>\n</blockquote>",
        "id": 198696410,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590434958
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633693913\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>I was trying to get it compiling first. With the latest changes and a few changes at my side to shim some inline asm with aborts it now compiles libstd fine. Linking fails for cross-compiling from linux using mingw:</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: x86_64-w64-mingw32-gcc: error: rsbegin.o: No such file or directory\n          x86_64-w64-mingw32-gcc: error: rsend.o: No such file or directory\n</code></pre></div>\n\n\n<p>This is probably a problem with my setup though.</p>\n</blockquote>",
        "id": 198696611,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590435146
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633703315\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>I had to copy a few object files from the cg_llvm sysroot, disable the atomic shim in cg_clif and update <code>object</code> for a bugfix. It now gives the following when run in wine:</p>\n<div class=\"codehilite\"><pre><span></span><code>wine ./target/out/std_example.exe                                                                                       bjorn@laptopbjorn-lenovo\nsome &lt;unknown&gt; text\ncargo:rustc-link-lib=z\n9.974182\n4.9245777\n2.3\n1.5165751\n2\n3\n1\n2.3\n5.29\n1.2016338\n5.29\nwine: Unhandled page fault on read access to 0x00000000 at address 0x8a8a39 (thread 002a), starting debugger...\n</code></pre></div>\n\n\n<p>will try the other PR tomorrow.</p>\n</blockquote>",
        "id": 198699242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590437458
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633703315\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>I had to copy a few object files from the cg_llvm sysroot, disable the atomic shim in cg_clif and update <code>object</code> for a bugfix. It now gives the following when run in wine:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ wine ./target/out/std_example.exe\nsome &lt;unknown&gt; text\ncargo:rustc-link-lib=z\n9.974182\n4.9245777\n2.3\n1.5165751\n2\n3\n1\n2.3\n5.29\n1.2016338\n5.29\nwine: Unhandled page fault on read access to 0x00000000 at address 0x8a8a39 (thread 002a), starting debugger...\n</code></pre></div>\n\n\n<p>will try the other PR tomorrow.</p>\n</blockquote>",
        "id": 198736960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590484125
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633933983\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>The problem was in a compiler-builtins hack to match the abi LLVM expects. It uses <code>#[repr(simd)]</code> which is not implemented in cg_clif.</p>\n<p><a href=\"https://github.com/rust-lang/compiler-builtins/blob/2541f27e8c3d61505815c0492c045b7d17436e35/src/macros.rs#L160\">https://github.com/rust-lang/compiler-builtins/blob/2541f27e8c3d61505815c0492c045b7d17436e35/src/macros.rs#L160</a></p>\n<p>simple-raytracer works fine now in wine.</p>\n</blockquote>",
        "id": 198741793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590487672
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-633933983\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>The problem was in a compiler-builtins hack to match the abi LLVM expects. It uses <code>#[repr(simd)]</code> which is not implemented in cg_clif.</p>\n<p><a href=\"https://github.com/rust-lang/compiler-builtins/blob/2541f27e8c3d61505815c0492c045b7d17436e35/src/macros.rs#L160\">https://github.com/rust-lang/compiler-builtins/blob/2541f27e8c3d61505815c0492c045b7d17436e35/src/macros.rs#L160</a></p>\n<p>simple-raytracer now works fine in wine.</p>\n</blockquote>",
        "id": 198742871,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590488489
    },
    {
        "content": "<p>teapotd <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510#issuecomment-635660821\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">Issue #1510</a>:</p>\n<blockquote>\n<p>@fitzgen Could you take a look at this and related #1670?</p>\n</blockquote>",
        "id": 199097068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1590707155
    }
]