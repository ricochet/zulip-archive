[
    {
        "content": "<p>kubkon opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a> from <code>rc-entry</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit refactors the use of <code>Ref</code>s and <code>RefMut</code>s in <code>wasi-common</code>.<br>\nNow, <code>Entry</code> is stored behind an <code>Rc</code> inside the <code>EntryTable</code>. The <code>Entry</code><br>\nitself on the other hand now stores rights behind a <code>RefCell</code> and the<br>\ndescriptor as <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo to enable easy reference tracking<br>\nand interior mutability which is required down the line in a couple of<br>\nsyscalls. In essence, this implies that we no longer have need for<br>\nmutable accessor to <code>Entry</code> from <code>WasiCtx</code>, and so all related methods<br>\ngo away (<code>get_entry_mut</code>, etc.).</p>\n<p>While here, I've also simplified handling and aggregating of rights on<br>\nthe <code>Entry</code> object. Instead of storing base and inheriting rights as<br>\nseparate fields, they are now aggregated into one struct <code>EntryRights</code><br>\nwhich features convenient constructors for each possible combination; i.e.,<br>\nwhen only base rights are set, or both base and inheriting are set, or<br>\nboth are left as empty. Since we do need to be able to mutate those<br>\nrights down the line in <code>fdstat_set_rights</code> syscall, this object<br>\nis kept behind a <code>RefCell</code> (note no <code>Rc</code> since we don't need to pass it<br>\naround anywhere).</p>\n<p>The descriptor field in <code>Entry</code> is now kept behind <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo<br>\nsince we not only need to mutate it down the line, but we also need to<br>\nbe able to pass it around (as part of the machinery making <code>poll_oneoff</code><br>\nwork).</p>\n<p>I've also removed <code>as_file</code> and <code>try_clone</code> methods on <code>Descriptor</code> struct<br>\nsince they were adding more noise than necessary, and making them work<br>\nwith <code>Rc</code> was unnecessarily complicated.</p>\n<p>Finally, I've converted the <code>get_dir_from_os_handle</code> function into a<br>\nmethod attached to the <code>OsHandle</code> itself, called <code>dir_stream</code>. IMHO,<br>\nit makes more sense to have it there directly as a method than as a separate<br>\nfunction.</p>\n</blockquote>",
        "id": 191874250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585224580
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" title=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a>.</p>",
        "id": 191874252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585224580
    },
    {
        "content": "<p><strong>kubkon</strong> requested <a href=\"https://github.com/alexcrichton\" title=\"https://github.com/alexcrichton\">alexcrichton</a> and <a href=\"https://github.com/sunfishcode\" title=\"https://github.com/sunfishcode\">sunfishcode</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a>.</p>",
        "id": 191874253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585224580
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a> from <code>rc-entry</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit refactors the use of <code>Ref</code>s and <code>RefMut</code>s in <code>wasi-common</code>.<br>\nNow, <code>Entry</code> is stored behind an <code>Rc</code> inside the <code>EntryTable</code>. The <code>Entry</code><br>\nitself on the other hand now stores rights behind a <code>RefCell</code> and the<br>\ndescriptor as <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo to enable easy reference tracking<br>\nand interior mutability which is required down the line in a couple of<br>\nsyscalls. In essence, this implies that we no longer have need for<br>\nmutable accessor to <code>Entry</code> from <code>WasiCtx</code>, and so all related methods<br>\ngo away (<code>get_entry_mut</code>, etc.).</p>\n<p>While here, I've also simplified handling and aggregating of rights on<br>\nthe <code>Entry</code> object. Instead of storing base and inheriting rights as<br>\nseparate fields, they are now aggregated into one struct <code>EntryRights</code><br>\nwhich features convenient constructors for each possible combination; i.e.,<br>\nwhen only base rights are set, or both base and inheriting are set, or<br>\nboth are left as empty. Since we do need to be able to mutate those<br>\nrights down the line in <code>fdstat_set_rights</code> syscall, this object<br>\nis kept behind a <code>RefCell</code> (note no <code>Rc</code> since we don't need to pass it<br>\naround anywhere).</p>\n<p>The descriptor field in <code>Entry</code> is now kept behind <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo<br>\nsince we not only need to mutate it down the line, but we also need to<br>\nbe able to pass it around (as part of the machinery making <code>poll_oneoff</code><br>\nwork).</p>\n<p>I've also removed <code>as_file</code> and <code>try_clone</code> methods on <code>Descriptor</code> struct<br>\nsince they were adding more noise than necessary, and making them work<br>\nwith <code>Rc</code> was unnecessarily complicated.</p>\n<p>Finally, I've converted the <code>get_dir_from_os_handle</code> function into a<br>\nmethod attached to the <code>OsHandle</code> itself, called <code>dir_stream</code>. IMHO,<br>\nit makes more sense to have it there directly as a method than as a separate<br>\nfunction.</p>\n</blockquote>",
        "id": 191874826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585224869
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382174079\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382174079\">PR Review</a>.</p>",
        "id": 191910222,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585239716
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382174079\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382174079\">PR Review</a>.</p>",
        "id": 191910223,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585239716
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398702548\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398702548\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This is a <code>Copy</code> type I think, so could this perhaps be a <code>Cell&lt;types::Fdflags&gt;</code> to entirely elimitate the possibility of panics?</p>\n</blockquote>",
        "id": 191910224,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585239717
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398706553\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398706553\">PR Review Comment</a>:</p>\n<blockquote>\n<p>So to prefix this, I'm not very familiar with what this <code>Descriptor</code> is and what it's used for. That being said I think it'd be great, if possible, to continue to push the <code>RefCell</code> deeper here. The purpose of removing the ability to get <code>&amp;mut Entry</code> was all about making mutable borrows as small as possible to eliminate possibilities of panics, and I think the same might apply here as well. It may even be possible to have <code>Descriptor</code> only have <code>Cell</code> fields, but ideally any <code>RefCell</code> fields would have very small borrows and no methods would have to return a <code>Ref</code> or <code>RefMut</code></p>\n</blockquote>",
        "id": 191910225,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585239717
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a> from <code>rc-entry</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit refactors the use of <code>Ref</code>s and <code>RefMut</code>s in <code>wasi-common</code>.<br>\nNow, <code>Entry</code> is stored behind an <code>Rc</code> inside the <code>EntryTable</code>. The <code>Entry</code><br>\nitself on the other hand now stores rights behind a <code>RefCell</code> and the<br>\ndescriptor as <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo to enable easy reference tracking<br>\nand interior mutability which is required down the line in a couple of<br>\nsyscalls. In essence, this implies that we no longer have need for<br>\nmutable accessor to <code>Entry</code> from <code>WasiCtx</code>, and so all related methods<br>\ngo away (<code>get_entry_mut</code>, etc.).</p>\n<p>While here, I've also simplified handling and aggregating of rights on<br>\nthe <code>Entry</code> object. Instead of storing base and inheriting rights as<br>\nseparate fields, they are now aggregated into one struct <code>EntryRights</code><br>\nwhich features convenient constructors for each possible combination; i.e.,<br>\nwhen only base rights are set, or both base and inheriting are set, or<br>\nboth are left as empty. Since we do need to be able to mutate those<br>\nrights down the line in <code>fdstat_set_rights</code> syscall, this object<br>\nis kept behind a <code>RefCell</code> (note no <code>Rc</code> since we don't need to pass it<br>\naround anywhere).</p>\n<p>The descriptor field in <code>Entry</code> is now kept behind <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo<br>\nsince we not only need to mutate it down the line, but we also need to<br>\nbe able to pass it around (as part of the machinery making <code>poll_oneoff</code><br>\nwork).</p>\n<p>I've also removed <code>as_file</code> and <code>try_clone</code> methods on <code>Descriptor</code> struct<br>\nsince they were adding more noise than necessary, and making them work<br>\nwith <code>Rc</code> was unnecessarily complicated.</p>\n<p>Finally, I've converted the <code>get_dir_from_os_handle</code> function into a<br>\nmethod attached to the <code>OsHandle</code> itself, called <code>dir_stream</code>. IMHO,<br>\nit makes more sense to have it there directly as a method than as a separate<br>\nfunction.</p>\n</blockquote>",
        "id": 191940111,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585252505
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398864718\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398864718\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yep, thanks!</p>\n</blockquote>",
        "id": 191943029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585253898
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382383062\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382383062\">PR Review</a>.</p>",
        "id": 191943030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585253898
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382409756\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382409756\">PR Review</a>.</p>",
        "id": 191947452,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585256092
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398885415\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398885415\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think you're right. Although making it work will require some bigger reorg to <code>OsHandle</code> especially on BSD platform. I have an idea for this and will investigate but given that this probably will be a bigger change, I'd prefer to have it as a subsequent PR. In short, if we make <code>OsHandle</code> a bit closer to the metal by replacing <code>File</code> with <code>RawFd</code>, we can make <code>OsHandle</code> <code>Copy</code> which would then make it possible to have <code>Descriptor</code> inside a <code>Cell</code>. There's a little bit more work involved with BSD since currently <code>OsHandle</code>, in addition to <code>File</code>, also stores an optional <code>yanix::Dir</code> (which is non-<code>Copy</code> since it's got a custom <code>Drop</code> impl) and it would probably make sense to split the handle into either representing an actual file, or a directory. Then, we wouldn't need <code>Option</code> nor interior mutability, since we could easily make <code>yanix::Dir</code> <code>Copy</code> calling it something like <code>yanix::UnsafeDir</code> and specifically mentioning that it is the user's responsibility to close the underlying dir stream with <code>libc::closedir</code> fn. Does that make sense?</p>\n</blockquote>",
        "id": 191947453,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585256092
    },
    {
        "content": "<p>kubkon submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382414503\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382414503\">PR Review</a>.</p>",
        "id": 191948163,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585256430
    },
    {
        "content": "<p>kubkon created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398888338\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398888338\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Oh, and the only reason we ever need to mutate the actual <code>Descriptor</code> in <code>Entry</code> is because on Windows, setting fdstat flags requires reopening the file.</p>\n</blockquote>",
        "id": 191948164,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585256430
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382479772\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382479772\">PR Review</a>.</p>",
        "id": 191960099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585263861
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398943479\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#discussion_r398943479\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Ah ok punting this to later seems fine, in any case looks like a great refactoring!</p>\n</blockquote>",
        "id": 191960100,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585263861
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382479793\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412#pullrequestreview-382479793\">PR Review</a>.</p>",
        "id": 191960117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585263866
    },
    {
        "content": "<p>kubkon updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a> from <code>rc-entry</code> to <code>master</code>:</p>\n<blockquote>\n<p>This commit refactors the use of <code>Ref</code>s and <code>RefMut</code>s in <code>wasi-common</code>.<br>\nNow, <code>Entry</code> is stored behind an <code>Rc</code> inside the <code>EntryTable</code>. The <code>Entry</code><br>\nitself on the other hand now stores rights behind a <code>RefCell</code> and the<br>\ndescriptor as <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo to enable easy reference tracking<br>\nand interior mutability which is required down the line in a couple of<br>\nsyscalls. In essence, this implies that we no longer have need for<br>\nmutable accessor to <code>Entry</code> from <code>WasiCtx</code>, and so all related methods<br>\ngo away (<code>get_entry_mut</code>, etc.).</p>\n<p>While here, I've also simplified handling and aggregating of rights on<br>\nthe <code>Entry</code> object. Instead of storing base and inheriting rights as<br>\nseparate fields, they are now aggregated into one struct <code>EntryRights</code><br>\nwhich features convenient constructors for each possible combination; i.e.,<br>\nwhen only base rights are set, or both base and inheriting are set, or<br>\nboth are left as empty. Since we do need to be able to mutate those<br>\nrights down the line in <code>fdstat_set_rights</code> syscall, this object<br>\nis kept behind a <code>RefCell</code> (note no <code>Rc</code> since we don't need to pass it<br>\naround anywhere).</p>\n<p>The descriptor field in <code>Entry</code> is now kept behind <code>Rc&lt;RefCell&lt;..&gt;&gt;</code> combo<br>\nsince we not only need to mutate it down the line, but we also need to<br>\nbe able to pass it around (as part of the machinery making <code>poll_oneoff</code><br>\nwork).</p>\n<p>I've also removed <code>as_file</code> and <code>try_clone</code> methods on <code>Descriptor</code> struct<br>\nsince they were adding more noise than necessary, and making them work<br>\nwith <code>Rc</code> was unnecessarily complicated.</p>\n<p>Finally, I've converted the <code>get_dir_from_os_handle</code> function into a<br>\nmethod attached to the <code>OsHandle</code> itself, called <code>dir_stream</code>. IMHO,<br>\nit makes more sense to have it there directly as a method than as a separate<br>\nfunction.</p>\n</blockquote>",
        "id": 191985784,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585296051
    },
    {
        "content": "<p>kubkon merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1412\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1412\">PR #1412</a>.</p>",
        "id": 191988320,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585298094
    }
]