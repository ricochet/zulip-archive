[
    {
        "content": "<p>SoniEx2 opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293\">issue #9293</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>Improve error messages.</p>\n<h4>Benefit</h4>\n<p>Descriptive error messages are useful when writing raw wasm code.</p>\n<h4>Implementation</h4>\n<p>N/A</p>\n<h4>Alternatives</h4>\n<p>Not much of an alternative, but one can use wabt. For comparison, wasmtime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">translation</span><span class=\"w\"> </span><span class=\"n\">error</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">Invalid</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mi\">45</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">stack</span>\n</code></pre></div>\n<p>wabt:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wat2wasm</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span>\n<span class=\"w\">    </span><span class=\"o\">^^^^^^^</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 472311197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727119012
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293#issuecomment-2369313454\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293\">issue #9293</a>:</p>\n<blockquote>\n<p>@SoniEx2 could you clarify which part you'd like to be improved? The type mismatch itself is roughly the same in both (\"expected i32\" vs. \"expected [i32]\", \"nothing on stack\" vs. \"got []\", I'd argue wasmtime's \"nothing on stack\" is even a little bit better here). Is it the location/context, i.e. <code>offset 45</code> vs. <code>....wat:3.5</code>? That I believe is an artifact of translating from wat to binary before validating; perhaps we could thread through original source locations, but that's a slightly nontrivial refactor.</p>\n</blockquote>",
        "id": 472325204,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727123283
    },
    {
        "content": "<p>SoniEx2 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293#issuecomment-2369334366\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293\">issue #9293</a>:</p>\n<blockquote>\n<p>Arguably wasmtime's \"nothing on stack\" is a little better, and we should maybe improve that in wabt. But between the lack of line numbers and the lack of spans, in actual use, wasmtime is so much worse...</p>\n</blockquote>",
        "id": 472326989,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727123881
    },
    {
        "content": "<p>SoniEx2 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293#issuecomment-2369334366\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293\">issue #9293</a>:</p>\n<blockquote>\n<p>Arguably wasmtime's \"nothing on stack\" is a little better, and we should maybe improve that in wabt. But between the lack of line numbers and the lack of spans, in actual use, wasmtime is so much worse...</p>\n<p>And this is only one example. We haven't gone around trying to find all cases where wasmtime has worse error messages.</p>\n</blockquote>",
        "id": 472328577,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727124483
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293#issuecomment-2369401549\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293\">issue #9293</a>:</p>\n<blockquote>\n<p>The best error messages are probably not going to come from either Wasmtime or <code>wasm-tools</code> and the underlying tools. Architecturally most tooling assumes the input is a wasm binary and converts text-to-binary primarily as a convenience. This differs from wabt, I believe, which stores the AST of the program which provides a much richer understanding of the original text when the text is input. In Wasmtime (and wasm-tools) the textual AST and such are all lost quickly during the text-to-binary transformation.</p>\n<p>In <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1632\">https://github.com/bytecodealliance/wasm-tools/pull/1632</a> I implemented rudimentary support for metadata in the wasm module which can point back to the original source. This support is turned off by default in the text-to-binary transform. For example though:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x17</span><span class=\"p\">)</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span>\n<span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">nothing</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x17</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Here the <code>-g</code> flag is injecting dwarf debugging information which the error rendering then takes into account to print out a filename and a line number. Wasmtime does not implement this logic yet, though.</p>\n<p>In the end though even with DWARF support the tooling only supports filenames/line numbers in the code section, nowhere else in the module. Given that you'd probably still get higher fidelity error messages from a tool like wabt which maintains the original text AST and spans.</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">~~~</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 472332480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727126050
    },
    {
        "content": "<p>SoniEx2 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293#issuecomment-2374366217\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9293\">issue #9293</a>:</p>\n<blockquote>\n<p>here's something that would help a lot, and we don't have an equivalent to compare it to: when a component import fails, print the expected and real types</p>\n</blockquote>",
        "id": 472719580,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1727276845
    }
]