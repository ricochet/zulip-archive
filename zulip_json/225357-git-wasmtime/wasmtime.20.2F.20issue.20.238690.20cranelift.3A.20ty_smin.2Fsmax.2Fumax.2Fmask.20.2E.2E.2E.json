[
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">Issue #8690</a>.</p>",
        "id": 440590336,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716592976
    },
    {
        "content": "<p><a href=\"https://github.com/jameysharp\">jameysharp</a> added the fuzz-bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">Issue #8690</a>.</p>",
        "id": 440590337,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716592976
    },
    {
        "content": "<p>jameysharp opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">issue #8690</a>:</p>\n<blockquote>\n<p>OSS-Fuzz reported this as <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=69209\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=69209</a>. I've minimized the test case and identified several related panics, all with the message \"unimplemented for &gt; 64 bits\".</p>\n<p>This is not a security issue according to <a href=\"https://docs.wasmtime.dev/security-what-is-considered-a-security-vulnerability.html\">Wasmtime's security policy</a> because it's a panic at compile time. It also shouldn't be reachable from Wasmtime today, only other Cranelift frontends.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Minimized CLIF&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">slt</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">slt</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">ult</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ult</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>The original fuzzbug, and my <code>%slt</code> function above, hit this panic in <code>ty_smin</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/isle_prelude.rs#L287-L289\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/isle_prelude.rs#L287-L289</a></p>\n<p>I believe the optimization rule which invoked <code>ty_smin</code> is here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/opts/icmp.isle#L105-L108\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/opts/icmp.isle#L105-L108</a></p>\n<p>There are similar rules for <code>ult</code> exercised by my <code>%ult</code> function above. They call <code>ty_umax</code>, which calls <code>ty_mask</code>, which has essentially the same panic.</p>\n<p>There are also similar rules for <code>slt</code> which would hit an equivalent panic in <code>ty_smax</code>, but I can't exercise them because ISLE is choosing to call <code>ty_smin</code> first which then panics.</p>\n<p>I believe these panics are only being exposed now because #8686 allowed these rules to match i128 constants when they couldn't before. The rules should still fail to match because of the <code>fits_in_64</code> constraint on the other type in the pattern. However, ISLE does not guarantee anything about what order constructors and extractors will be evaluated in except for data dependencies. So that <code>fits_in_64</code> guard isn't sufficient to ensure that <code>ty_smin</code> won't be called.</p>\n<p>One fix that I've verified works for the <code>%slt</code> test case:</p>\n<ul>\n<li>add the <code>partial</code> keyword to <code>(decl pure ty_smin ...)</code> and similarly for <code>ty_smax</code>,</li>\n<li>make the corresponding Rust functions return <code>Option</code>,</li>\n<li>use <code>?</code> instead of <code>.expect()</code> when <code>.checked_sub()</code> fails.</li>\n</ul>\n<p>However I ran out of energy when I looked at doing the same for <code>ty_umax</code>, which requires doing it for <code>ty_mask</code>, which is called from Rust in a lot of places.</p>\n<p>cc: @scottmcm </p>\n</blockquote>",
        "id": 440590339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716592976
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690#issuecomment-2137744237\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">issue #8690</a>:</p>\n<blockquote>\n<p>Would it perhaps make sense to revert <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8686\">https://github.com/bytecodealliance/wasmtime/pull/8686</a> while a \"true fix\" is found in the meantime?</p>\n</blockquote>",
        "id": 441269442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716997892
    },
    {
        "content": "<p>scottmcm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690#issuecomment-2137775955\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">issue #8690</a>:</p>\n<blockquote>\n<p>From my side, feel free to revert my PR for now.  I likely won't be able to look at fixing this in the short term.</p>\n</blockquote>",
        "id": 441272360,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1716998805
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690#issuecomment-2138017626\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">issue #8690</a>:</p>\n<blockquote>\n<p>I've posted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8707\">https://github.com/bytecodealliance/wasmtime/pull/8707</a> to revert the original PR and included this issue's test cases as well so a re-landing will be sure to trigger the new test case too.</p>\n</blockquote>",
        "id": 441293129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717007159
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8690\">issue #8690</a>:</p>\n<blockquote>\n<p>OSS-Fuzz reported this as <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=69209\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=69209</a>. I've minimized the test case and identified several related panics, all with the message \"unimplemented for &gt; 64 bits\".</p>\n<p>This is not a security issue according to <a href=\"https://docs.wasmtime.dev/security-what-is-considered-a-security-vulnerability.html\">Wasmtime's security policy</a> because it's a panic at compile time. It also shouldn't be reachable from Wasmtime today, only other Cranelift frontends.</p>\n<p>&lt;details&gt;<br>\n&lt;summary&gt;Minimized CLIF&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">compile</span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">slt</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">slt</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">ult</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ult</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>The original fuzzbug, and my <code>%slt</code> function above, hit this panic in <code>ty_smin</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/isle_prelude.rs#L287-L289\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/isle_prelude.rs#L287-L289</a></p>\n<p>I believe the optimization rule which invoked <code>ty_smin</code> is here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/opts/icmp.isle#L105-L108\">https://github.com/bytecodealliance/wasmtime/blob/f40aaa51a1df835498985acfc91ade33240d02b5/cranelift/codegen/src/opts/icmp.isle#L105-L108</a></p>\n<p>There are similar rules for <code>ult</code> exercised by my <code>%ult</code> function above. They call <code>ty_umax</code>, which calls <code>ty_mask</code>, which has essentially the same panic.</p>\n<p>There are also similar rules for <code>slt</code> which would hit an equivalent panic in <code>ty_smax</code>, but I can't exercise them because ISLE is choosing to call <code>ty_smin</code> first which then panics.</p>\n<p>I believe these panics are only being exposed now because #8686 allowed these rules to match i128 constants when they couldn't before. The rules should still fail to match because of the <code>fits_in_64</code> constraint on the other type in the pattern. However, ISLE does not guarantee anything about what order constructors and extractors will be evaluated in except for data dependencies. So that <code>fits_in_64</code> guard isn't sufficient to ensure that <code>ty_smin</code> won't be called.</p>\n<p>One fix that I've verified works for the <code>%slt</code> test case:</p>\n<ul>\n<li>add the <code>partial</code> keyword to <code>(decl pure ty_smin ...)</code> and similarly for <code>ty_smax</code>,</li>\n<li>make the corresponding Rust functions return <code>Option</code>,</li>\n<li>use <code>?</code> instead of <code>.expect()</code> when <code>.checked_sub()</code> fails.</li>\n</ul>\n<p>However I ran out of energy when I looked at doing the same for <code>ty_umax</code>, which requires doing it for <code>ty_mask</code>, which is called from Rust in a lot of places.</p>\n<p>cc: @scottmcm </p>\n</blockquote>",
        "id": 441542070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1717098840
    }
]