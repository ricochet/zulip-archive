[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2405\">Issue #2405</a>:</p>\n<blockquote>\n<p>In the new backend's <code>BlockLoweringOrder</code> algorithm, we do a DFS to determine the order in which basic blocks should be codegen'd into machine code. The algorithm does a pretty good job of placing edge-blocks appropriately, but does not use hints from the CLIF where it could.</p>\n<p>In particular, the <code>fallthrough</code> instruction currently is defined to act like a <code>jump</code>, except that its target <em>must</em> come next in the function block order. It was mostly used in old backends' optimization passes to replace jumps to subsequent blocks, but can also be used by code generators (e.g., Lucet in #2395).</p>\n<p>Following #2395, we correctly generate code for <code>fallthrough</code> by just treating it like a <code>jump</code>: thus we accept a superset of codegen behavior that the old backend does, and generate correct code even when blocks are reordered; but we lose the block-ordering hint.</p>\n<p>Instead, we should take into account when blocks end in <code>fallthrough</code> and alter the DFS logic in <code>BlockLoweringOrder</code> to prefer fallthrough blocks whenever possible. This will result in better block ordering when the frontend is explicit about it.</p>\n</blockquote>",
        "id": 216520891,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211833
    },
    {
        "content": "<p>cfallin labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2405\">Issue #2405</a>:</p>\n<blockquote>\n<p>In the new backend's <code>BlockLoweringOrder</code> algorithm, we do a DFS to determine the order in which basic blocks should be codegen'd into machine code. The algorithm does a pretty good job of placing edge-blocks appropriately, but does not use hints from the CLIF where it could.</p>\n<p>In particular, the <code>fallthrough</code> instruction currently is defined to act like a <code>jump</code>, except that its target <em>must</em> come next in the function block order. It was mostly used in old backends' optimization passes to replace jumps to subsequent blocks, but can also be used by code generators (e.g., Lucet in #2395).</p>\n<p>Following #2395, we correctly generate code for <code>fallthrough</code> by just treating it like a <code>jump</code>: thus we accept a superset of codegen behavior that the old backend does, and generate correct code even when blocks are reordered; but we lose the block-ordering hint.</p>\n<p>Instead, we should take into account when blocks end in <code>fallthrough</code> and alter the DFS logic in <code>BlockLoweringOrder</code> to prefer fallthrough blocks whenever possible. This will result in better block ordering when the frontend is explicit about it.</p>\n</blockquote>",
        "id": 216520979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1605211891
    }
]