[
    {
        "content": "<p>gaukas opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a> from <code>gaukas:export-wasictx</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This pull request _incompletely_ exports <code>WasiCtx</code> in C-API: </p>\n<ul>\n<li>Declare <code>wasi_ctx_t</code> in wasi.h.</li>\n<li>Add implementation for <code>wasi_ctx_insert_file</code> and <code>wasi_ctx_push_file</code> in <a href=\"http://wasi.rs\">wasi.rs</a>. </li>\n<li>Add implementation for <code>wasmtime_context_set_default_wasi_if_not_exist</code> and <code>wasmtime_context_get_wasi_ctx</code> in <a href=\"http://store.rs\">store.rs</a>.</li>\n</ul>\n<p>Discussed in <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/187\">https://github.com/bytecodealliance/wasmtime-go/issues/187</a> with @alexcrichton. </p>\n<p>The corresponding Go changes will be available in a separate pull request to wasmtime-go. </p>\n<p>Please let me know if there are any issues or suggested edits. </p>\n</blockquote>",
        "id": 390398563,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694471269
    },
    {
        "content": "<p><strong>gaukas</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390398566,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694471270
    },
    {
        "content": "<p><strong>gaukas</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390398567,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694471270
    },
    {
        "content": "<p>gaukas updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390400089,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694471997
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1622531436\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the PR! I've noted a few issues below, but @pchickey I think the functionality added here should work both before and after preview2. This is dealing with concrete system primitives as opposed to user-defined things, so it seems reasonable to be able to add/insert those after-the-fact both during the building process and once the context is created too. </p>\n<p>We'll definitely need one API for preview2 and one for preview1 (or somehow update the existing one for preview2), but I think with the various issues below addressed I'd personally be ok merging this.</p>\n</blockquote>",
        "id": 390597303,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553000
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1622531436\">PR review</a>:</p>\n<blockquote>\n<p>Thanks for the PR! I've noted a few issues below, but @pchickey I think the functionality added here should work both before and after preview2. This is dealing with concrete system primitives as opposed to user-defined things, so it seems reasonable to be able to add/insert those after-the-fact both during the building process and once the context is created too. </p>\n<p>We'll definitely need one API for preview2 and one for preview1 (or somehow update the existing one for preview2), but I think with the various issues below addressed I'd personally be ok merging this.</p>\n</blockquote>",
        "id": 390597304,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553000
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323216971\">PR review comment</a>:</p>\n<blockquote>\n<p>Is this necesssary to add? I would expect otherwise that <code>wasmtime_context_set_wasi</code> is sufficient?</p>\n</blockquote>",
        "id": 390597306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553001
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323217957\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think that this is quite correct since this is returning a clone of the original context, meaning that any mutations on the returned value won't be reflected on the original value.</p>\n</blockquote>",
        "id": 390597307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553001
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390597560,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553101
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623161111\">PR review</a>.</p>",
        "id": 390597824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553216
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323584237\">PR review comment</a>:</p>\n<blockquote>\n<p>Theoretically no, but practically it enables a cleaner way to guarantee a valid wasi will be returned even if the caller is not calling SetWasi. </p>\n</blockquote>",
        "id": 390597825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553216
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623164308\">PR review</a>.</p>",
        "id": 390598200,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553367
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323586219\">PR review comment</a>:</p>\n<blockquote>\n<p>It is true, but are there any reason that the pointer would change, without calling SetWasi? </p>\n<p>SetWasi is apparently something a caller shouldn't call, since I would assume all previous states saved in the older wasi will be overridden anyways. </p>\n</blockquote>",
        "id": 390598201,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694553367
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623249238\">PR review</a>.</p>",
        "id": 390603150,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694555850
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323639330\">PR review comment</a>:</p>\n<blockquote>\n<p>Ok in that case I'd prefer to avoid adding this because the C API isn't really one geared towards ergonomics (it is C after all), but such wrappers could always be present in higher-level languages like Go for example.</p>\n</blockquote>",
        "id": 390603151,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694555850
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623250374\">PR review</a>.</p>",
        "id": 390603287,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694555902
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323640286\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes this is where I would recommend <code>wasmtime_context_*</code> methods instead of a separate <code>wasi_ctx_t</code> type. That would operate directly on a store and avoid the need to pull out a WASI pointer.</p>\n</blockquote>",
        "id": 390603288,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694555903
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623276779\">PR review</a>.</p>",
        "id": 390605501,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694556899
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323658892\">PR review comment</a>:</p>\n<blockquote>\n<p>Would you like to suggest a specific change here? Like, tracking if <code>SetWasi</code> is ever called in the caller? </p>\n</blockquote>",
        "id": 390605504,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694556900
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323661424\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah I would love to move this API to <code>wasmtime_context_*</code> if you see it fit, but perhaps it would cause misalignment between Rust, C-API, and caller (say Go). Exposing the same function on the same struct here seems a much straightforward approach, maybe even with some memory safety trade-offs. </p>\n<p>Another way we could do is, exposing it here as <code>wasmtime_context_*</code> and implement a \"fake\" type <code>WasiCtx</code> in Go... </p>\n</blockquote>",
        "id": 390605980,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694557125
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623280404\">PR review</a>.</p>",
        "id": 390605981,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694557125
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623290326\">PR review</a>.</p>",
        "id": 390607082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694557605
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323667880\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes I don't think this API should be added at this time. If a caller wants to conditionally enable WASI or not then I think that should be tracked by the caller for now.</p>\n</blockquote>",
        "id": 390607083,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694557605
    },
    {
        "content": "<p>gaukas updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390622964,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694566985
    },
    {
        "content": "<p>gaukas updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390623165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694567105
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1623469661\">PR review</a>.</p>",
        "id": 390623433,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694567265
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1323807505\">PR review comment</a>:</p>\n<blockquote>\n<p>Removed this function along with <code>wasmtime_context_set_default_wasi_if_not_exist</code>, added <code>wasmtime_context_insert_file</code> and <code>wasmtime_context_push_file</code> which directly call into the <code>WasiCtx</code> deep inside a <code>CStoreContextMut</code>.</p>\n</blockquote>",
        "id": 390623435,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694567266
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624828519\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! I'm remembering now that there's other issues related to portability which this will need to handle too</p>\n</blockquote>",
        "id": 390746906,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694618326
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624828519\">PR review</a>:</p>\n<blockquote>\n<p>Thanks! I'm remembering now that there's other issues related to portability which this will need to handle too</p>\n</blockquote>",
        "id": 390746907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694618327
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324684961\">PR review comment</a>:</p>\n<blockquote>\n<p>I was looking at <code>host_fd</code> here again and first though \"hm shouldn't this be <code>int</code>?\" since that matches what the host has here, but then I remembered additionally that this won't work on Windows because Windows doesn't have file descriptors.</p>\n<p>I think that this and the below function will need to use a different type for <code>host_fd</code> on Windows where it'll use <code>int</code> on Unix and <code>HANDLE</code> on Windows.</p>\n</blockquote>",
        "id": 390746908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694618327
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324687719\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, could this document the <code>access_mode</code> values? I don't believe that maps to octal permissions like <code>0o777</code> as one might otherwise expect.</p>\n</blockquote>",
        "id": 390746910,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694618327
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324685766\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this documentation, and the above block, mention the requirement to configure WASI first? If that's not done then this function will abort the process due to a failed assert.</p>\n</blockquote>",
        "id": 390746911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694618327
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624925378\">PR review</a>.</p>",
        "id": 390755257,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694620919
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324746502\">PR review comment</a>:</p>\n<blockquote>\n<p>This is basically the same as whatever in Rust. </p>\n</blockquote>",
        "id": 390755258,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694620919
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624928355\">PR review</a>.</p>",
        "id": 390755643,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621013
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324748410\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think that this and the below function will need to use a different type for host_fd on Windows where it'll use int on Unix and HANDLE on Windows.</p>\n</blockquote>\n<p>Would you give an example or directly push to my branch? I do not have a Windows setup for testing any change specific to Windows. </p>\n</blockquote>",
        "id": 390755644,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621014
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324746502\">PR review comment</a>.</p>",
        "id": 390755847,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621064
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624931334\">PR review</a>.</p>",
        "id": 390756068,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621109
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324750254\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, glad to make add this to the documentation. </p>\n</blockquote>",
        "id": 390756070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621109
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624937413\">PR review</a>.</p>",
        "id": 390756659,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621310
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324754052\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>it'll use int on Unix</p>\n</blockquote>\n<p>Seems even 'int' is not the case to me. It seems to be i32 on Unix. </p>\n<p>Opt to use u32 here simply for the type consistency across all fds -- iirc the returned guest_fd is in u32. I can double check. </p>\n</blockquote>",
        "id": 390756662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621310
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324748410\">PR review comment</a>.</p>",
        "id": 390756983,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621420
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324748410\">PR review comment</a>.</p>",
        "id": 390757094,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621459
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1624956337\">PR review</a>.</p>",
        "id": 390758372,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621912
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324765555\">PR review comment</a>:</p>\n<blockquote>\n<p>And IMO, it is Rust's fault to select i32 for file descriptors. An apparent better and more consistent choice is uintptr. </p>\n<p>I'm personally against exposing host_fd as i32, but if you insist it should guarantee truthfulness (host_fd: i32, guest_fd: u32) rather than consistency, I can make the corresponding change. </p>\n</blockquote>",
        "id": 390758374,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694621913
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324750254\">PR review comment</a>.</p>",
        "id": 390763901,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694623925
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324765555\">PR review comment</a>.</p>",
        "id": 390763952,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694623950
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1625391846\">PR review</a>.</p>",
        "id": 390796629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694636627
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1325040676\">PR review comment</a>:</p>\n<blockquote>\n<p>I looked again and found Go will only return <code>uintptr</code> for the fd. </p>\n<p>I would propose the change to always use <code>* c_void</code>(Rust)/<code>void *</code> for all guest/host fd for the interface, and leaving the type conversion inside Rust implementation. What do you think? @alexcrichton </p>\n</blockquote>",
        "id": 390796630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694636627
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1325040676\">PR review comment</a>.</p>",
        "id": 390797233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694636851
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1325040676\">PR review comment</a>.</p>",
        "id": 390799030,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694637464
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1324748410\">PR review comment</a>.</p>",
        "id": 390801103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694638355
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1625517682\">PR review</a>.</p>",
        "id": 390809914,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694642479
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1325120327\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry I don't have detailed guides and such of how to build on Windows, I also don't develop on Windows myself. This problem must be fixed to merge this PR, however, because I believe your changes will not compile on Windows due to the usage of <code>std::os::fd</code> which does not on Windows. CI is passing because only a subset of tests are run for PRs, but the full merge will run a full suite of tests. If you'd like you can include a commit with <code>prtest:full</code> somewhere in the commit message to run full CI on this PR.</p>\n<p>As for types, IMO this should match what happens in the native platform. This means that <code>int</code> should be used in the header file for Unix and <code>HANDLE</code> should be used in the header file for Windows. The corresponding Rust types are <code>std::os::fd::RawFd</code> and <code>std::os::windows::io::RawHandle</code>.</p>\n<p>I don't have a better idea of how to define this function other than to just have it defined differently on different platforms. </p>\n</blockquote>",
        "id": 390809915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694642480
    },
    {
        "content": "<p>gaukas updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390810386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694642679
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1625524952\">PR review</a>.</p>",
        "id": 390810843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694642946
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1325125111\">PR review comment</a>:</p>\n<blockquote>\n<p>Luckily it worked after some reverse engineering of the CI script of wasmtime and wasmtime-go, now I can finally compile and test on Windows. </p>\n<p>Just pushed a new change to use <code>void*</code>/<code>*mut c_void</code>/<code>unsafe.Pointer()</code> for <code>host_fd</code>. How does it look to you? Or would you still want different function header on different platforms. (In that case, could you please provide some guidance on how to conditionally declare function header on different platforms?) </p>\n</blockquote>",
        "id": 390810844,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694642946
    },
    {
        "content": "<p>gaukas updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 390947776,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694702961
    },
    {
        "content": "<p>gaukas updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 391089339,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694758838
    },
    {
        "content": "<p><strong>gaukas</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 391090485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694759327
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1629196966\">PR review</a>.</p>",
        "id": 391198755,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791199
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1629196966\">PR review</a>.</p>",
        "id": 391198756,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791200
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327447619\">PR review comment</a>:</p>\n<blockquote>\n<p>I think the documentation here and below may wish to be updated where these constants are not defined by the WASI spec, they're purely an implementation detail in Wasmtime.</p>\n<p>Could this additionally split out the read/write to <code>WASMTIME_WASI_FILE_{READ,WRITE}</code> perhaps as <code>#define</code>s?</p>\n</blockquote>",
        "id": 391198757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791200
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327448500\">PR review comment</a>:</p>\n<blockquote>\n<p>Like with C, can the <code>#[cfg]</code> be used to conditionally define a type and delegate to a small helper internally? As I mentioned before that would avoid duplicating the whole function.</p>\n</blockquote>",
        "id": 391198758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791200
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327444410\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this perhaps do </p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"cp\">#ifdef WASMTIME_UNIX</span>\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">wasmtime_host_file_t</span><span class=\"p\">;</span>\n<span class=\"cp\">#else</span>\n<span class=\"k\">typedef</span><span class=\"w\"> </span><span class=\"n\">HANDLE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_host_file_t</span><span class=\"p\">;</span>\n<span class=\"cp\">#endif</span>\n</code></pre></div>\n<p>to avoid defining the function signature twice?</p>\n<p>Additionally this should use <code>HANDLE</code> on Windows, not <code>void*</code>, as fixing that in Go seems like an orthogonal concern? </p>\n</blockquote>",
        "id": 391198759,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791200
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327442623\">PR review comment</a>:</p>\n<blockquote>\n<p>Could this choose names such as <code>WASMTIME_UNIX</code> or <code>WASMTIME_WINDOWS</code> to avoid clashing with other projects?</p>\n</blockquote>",
        "id": 391198760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694791200
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1629883932\">PR review</a>.</p>",
        "id": 391304158,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694828669
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327886338\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think so since we have different input type. Unless you want to eliminate that? I didn't find a good way to conditionally define ONLY the func header. </p>\n</blockquote>",
        "id": 391304159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694828669
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1629884192\">PR review</a>.</p>",
        "id": 391304486,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694828784
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327886554\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>not defined by the WASI spec</p>\n</blockquote>\n<p>Then possibly some better documentation is needed on the wasi_common package instead. I found no indication saying this is a pure wasmtime thing. </p>\n</blockquote>",
        "id": 391304488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694828784
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1629884653\">PR review</a>.</p>",
        "id": 391305058,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694829028
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327886974\">PR review comment</a>:</p>\n<blockquote>\n<p>Sure, you may just push a change for styling suggestions like that... </p>\n</blockquote>",
        "id": 391305059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694829028
    },
    {
        "content": "<p>gaukas submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#pullrequestreview-1629885127\">PR review</a>.</p>",
        "id": 391305624,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694829285
    },
    {
        "content": "<p>gaukas created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327887402\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not really getting it by what do you mean here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"n\">ifdef</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_UNIX</span>\n<span class=\"n\">typedef</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">wasmtime_host_file_t</span><span class=\"p\">;</span>\n#<span class=\"k\">else</span>\n<span class=\"n\">typedef</span><span class=\"w\"> </span><span class=\"n\">HANDLE</span><span class=\"w\"> </span><span class=\"n\">wasmtime_host_file_t</span><span class=\"p\">;</span>\n#<span class=\"n\">endif</span>\n</code></pre></div>\n<p>Doesn't this just further complicates the interface by adding more layers of indirectness? </p>\n<blockquote>\n<p>Go seems like an orthogonal concern</p>\n</blockquote>\n<p>To be super honest with you, for me, my major concern is if it works in Go. So I would just save the effort. If it won't work for you, someone better at this could fix it... </p>\n</blockquote>",
        "id": 391305625,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694829285
    },
    {
        "content": "<p>gaukas edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001#discussion_r1327886338\">PR review comment</a>.</p>",
        "id": 391307604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1694830103
    },
    {
        "content": "<p>alexcrichton closed without merge <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7001\">PR #7001</a>.</p>",
        "id": 391707726,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1695045914
    }
]