[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1471901103\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @peterhuene</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:c-api\", \"wasmtime:config\", \"wasmtime:docs\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>peterhuene: wasmtime:api, wasmtime:c-api</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 342301757,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678971172
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1471901407\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 342301831,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678971187
    },
    {
        "content": "<p>bnjbvr edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1471901407\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<h4>Label Messager: wasmtime:config</h4>\n<p>It looks like you are changing Wasmtime's configuration options. Make sure to<br>\ncomplete this check list:</p>\n<ul>\n<li>\n<p>[x] If you added a new <code>Config</code> method, you wrote extensive documentation for<br>\n      it.</p>\n<p>&lt;details&gt;</p>\n<p>Our documentation should be of the following form:</p>\n<p>```text<br>\nShort, simple summary sentence.</p>\n<p>More details. These details can be multiple paragraphs. There should be<br>\ninformation about not just the method, but its parameters and results as<br>\nwell.</p>\n<p>Is this method fallible? If so, when can it return an error?</p>\n<p>Can this method panic? If so, when does it panic?</p>\n<h1>Example</h1>\n<p>Optional example here.<br>\n```</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you added a new <code>Config</code> method, or modified an existing one, you<br>\n  ensured that this configuration is exercised by the fuzz targets.</p>\n<p>&lt;details&gt;</p>\n<p>For example, if you expose a new strategy for allocating the next instance<br>\nslot inside the pooling allocator, you should ensure that at least one of our<br>\nfuzz targets exercises that new strategy.</p>\n<p>Often, all that is required of you is to ensure that there is a knob for this<br>\nconfiguration option in [<code>wasmtime_fuzzing::Config</code>][fuzzing-config] (or one<br>\nof its nested <code>struct</code>s).</p>\n<p>Rarely, this may require authoring a new fuzz target to specifically test this<br>\nconfiguration. See [our docs on fuzzing][fuzzing-docs] for more details.</p>\n<p>&lt;/details&gt;</p>\n</li>\n<li>\n<p>[ ] If you are enabling a configuration option by default, make sure that it<br>\n  has been fuzzed for at least two weeks before turning it on by default.</p>\n</li>\n</ul>\n<p>[fuzzing-config]: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194\">https://github.com/bytecodealliance/wasmtime/blob/ca0e8d0a1d8cefc0496dba2f77a670571d8fdcab/crates/fuzzing/src/generators.rs#L182-L194</a><br>\n[fuzzing-docs]: <a href=\"https://docs.wasmtime.dev/contributing-fuzzing.html\">https://docs.wasmtime.dev/contributing-fuzzing.html</a></p>\n<hr>\n<p>&lt;details&gt;</p>\n<p>To modify this label's message, edit the &lt;code&gt;.github/label-messager/wasmtime-config.md&lt;/code&gt; file.</p>\n<p>To add new label messages or remove existing label messages, edit the<br>\n&lt;code&gt;.github/label-messager.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/label-messager-action\">Learn more.</a></p>\n<p>&lt;/details&gt;</p>\n</blockquote>",
        "id": 342307733,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678972545
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472145479\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<blockquote>\n<p>Or is there a reason to use jitdump over this?</p>\n</blockquote>\n<p>Jitdump can handle code memory being reused by multiple functions at different times. In addition it allows perf to show the actual instructions that executed rather than just the function names. It also supports recording unwind tables as opposed to requiring frame pointers for unwinding. And finally it allows recording line tables.</p>\n<blockquote>\n<p>Is there some online documentation for this?</p>\n</blockquote>\n<p><a href=\"https://github.com/torvalds/linux/blob/master/tools/perf/Documentation/jit-interface.txt\">https://github.com/torvalds/linux/blob/master/tools/perf/Documentation/jit-interface.txt</a></p>\n</blockquote>",
        "id": 342338719,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678978778
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472151636\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<p>I think the performance issues of the jitdump support are because we emit a record for each individual function at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/76116fc925067338d57b81e30a5fa2d4b5016d0f/crates/jit/src/profiling/jitdump_linux.rs#L67\">https://github.com/bytecodealliance/wasmtime/blob/76116fc925067338d57b81e30a5fa2d4b5016d0f/crates/jit/src/profiling/jitdump_linux.rs#L67</a> instead of emitting a single record covering the entire text section of the module as intended.</p>\n</blockquote>",
        "id": 342339629,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678978931
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472442223\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think the performance issues of the jitdump support are because we emit a record for each individual function at </p>\n</blockquote>\n<p>Nice find @bjorn3! Although I'm not deep enough into the jitdump support to know how to fix this properly and quickly, and perfmap support is a great start for our use case.</p>\n</blockquote>",
        "id": 342385199,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678988987
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472534817\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<blockquote>\n<p>Oh I didn't realize that it was possible to do this, but reading over <a href=\"https://raw.githubusercontent.com/torvalds/linux/master/tools/perf/Documentation/jitdump-specification.txt\">the documentation</a> it looks like JIT_CODE_LOAD only supports one symbol? Do you know off the top of your head how the whole text section would be loaded? I'd love to fix this myself to avoid generating thousands of tiny *.so files on all perf inject calls.</p>\n</blockquote>\n<p>Right, I should have read the docs more carefully. My bad. All we can do I guess is to make <code>perf inject</code> not produce a <code>.so</code> for each individual function or write some rust code that has the same functionality as <code>perf inject</code> but is faster.</p>\n</blockquote>",
        "id": 342394193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678991588
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472561852\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<p>Wow, <code>perf inject</code> is dumb. It is not even that we do something wrong causing each function to be a separate elf file. Instead it really produces a elf file for each function unconditionally: <a href=\"https://github.com/torvalds/linux/blob/9c1bec9c0b08abeac72ed6214b723adc224013bf/tools/perf/util/jitdump.c#L466\">https://github.com/torvalds/linux/blob/9c1bec9c0b08abeac72ed6214b723adc224013bf/tools/perf/util/jitdump.c#L466</a></p>\n</blockquote>",
        "id": 342396590,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1678992284
    },
    {
        "content": "<p>bjorn3 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472561852\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<p>Wow, <code>perf inject</code> has a pretty naive implementation. It is not even that we do something wrong causing each function to be a separate elf file. Instead it really produces a elf file for each function unconditionally: <a href=\"https://github.com/torvalds/linux/blob/9c1bec9c0b08abeac72ed6214b723adc224013bf/tools/perf/util/jitdump.c#L466\">https://github.com/torvalds/linux/blob/9c1bec9c0b08abeac72ed6214b723adc224013bf/tools/perf/util/jitdump.c#L466</a></p>\n</blockquote>",
        "id": 342426156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679002245
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1472800612\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<blockquote>\n<p>or write some rust code that has the same functionality as perf inject but is faster.</p>\n</blockquote>\n<p><span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span> <a href=\"https://github.com/mstange/samply/issues/33\">https://github.com/mstange/samply/issues/33</a></p>\n</blockquote>",
        "id": 342429630,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679003776
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030#issuecomment-1476317835\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6030\">issue #6030</a>:</p>\n<blockquote>\n<p>I should have addressed all the feedback, thanks for the review!</p>\n</blockquote>",
        "id": 343131874,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1679321822
    }
]