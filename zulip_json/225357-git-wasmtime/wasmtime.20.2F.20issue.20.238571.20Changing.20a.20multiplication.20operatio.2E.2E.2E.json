[
    {
        "content": "<p><a href=\"https://github.com/hungryzzz\">hungryzzz</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">Issue #8571</a>.</p>",
        "id": 437455608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715089041
    },
    {
        "content": "<p>hungryzzz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the same for <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1214\" alt=\"截屏2024-05-07 21 32 15\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f\">https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f</a>\"&gt;</p>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1191\" alt=\"截屏2024-05-07 21 33 33\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf\">https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf</a>\"&gt;</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437455612,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715089042
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the same for <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1214\" alt=\"截屏2024-05-07 21 32 15\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f\">https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f</a>\"&gt;</p>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1191\" alt=\"截屏2024-05-07 21 33 33\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf\">https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf</a>\"&gt;</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437455660,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715089059
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the execution time before and after the modification is nearly the same for <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1214\" alt=\"截屏2024-05-07 21 32 15\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f\">https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f</a>\"&gt;</p>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1191\" alt=\"截屏2024-05-07 21 33 33\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf\">https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf</a>\"&gt;</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437456197,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715089203
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the execution time before and after the modification is nearly the same in <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1214\" alt=\"截屏2024-05-07 21 32 15\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f\">https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f</a>\"&gt;</p>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1191\" alt=\"截屏2024-05-07 21 33 33\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf\">https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf</a>\"&gt;</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437456290,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715089223
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2098477868\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>Division is a lot more expensive than multiplication on pretty much every cpu. It may be that the other wasm engines are optimizing it away, or schedule the instructions slightly differently in a way that masks most of the latency on modern super scalar cpu's.</p>\n</blockquote>",
        "id": 437460312,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715090335
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2098550298\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>Yes, you're right, but the default backend of <code>Wasmer</code> is also <code>Cranelift</code>,  the execution time before and after the modification in <code>Wasmer</code> is nearly the same. So I am wondering if it is possible that the subsequent commits introduce some bugs.</p>\n<p>&lt;img width=\"1366\" alt=\"截屏2024-05-07 22 27 01\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/650171d3-f6db-4e60-9ad1-0a0811c4d026\">https://github.com/bytecodealliance/wasmtime/assets/32137313/650171d3-f6db-4e60-9ad1-0a0811c4d026</a>\"&gt;</p>\n</blockquote>",
        "id": 437466994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715092313
    },
    {
        "content": "<p>cfallin closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the execution time before and after the modification is nearly the same in <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1214\" alt=\"截屏2024-05-07 21 32 15\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f\">https://github.com/bytecodealliance/wasmtime/assets/32137313/41a41f7d-72ab-4233-81eb-2600a6cb021f</a>\"&gt;</p>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:<br>\n&lt;img width=\"1191\" alt=\"截屏2024-05-07 21 33 33\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf\">https://github.com/bytecodealliance/wasmtime/assets/32137313/2f281b67-4568-40d9-adba-240d069b6fdf</a>\"&gt;</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437485148,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715097995
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2098813503\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>@hungryzzz our current version of the mid-end optimizer can't yet rewrite divs by constants into multiplies by magic constants; we have #6049 for this. I'm going to go ahead and close this issue in favor of that as it's a duplicate report.</p>\n</blockquote>",
        "id": 437485149,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715097995
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the execution time before and after the modification is nearly the same in <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>/home/ringzzz/wasm_runtime/wasmer/target/release/wasmer<span class=\"w\"> </span><span class=\"nv\">$filename</span>.wasm<span class=\"w\">  </span><span class=\"m\">1</span>.76s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.766<span class=\"w\"> </span>total\n/home/ringzzz/wasm_runtime/WasmEdge/build/tools/wasmedge/wasmedge<span class=\"w\">   </span><span class=\"m\">1</span>.18s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">99</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.179<span class=\"w\"> </span>total\n/home/ringzzz/wasm_runtime/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">    </span><span class=\"m\">0</span>.74s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">0</span>.741<span class=\"w\"> </span>total\n</code></pre></div>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>/home/ringzzz/wasm_runtime/wasmer/target/release/wasmer<span class=\"w\"> </span><span class=\"nv\">$filename</span>.wasm<span class=\"w\">  </span><span class=\"m\">1</span>.77s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.765<span class=\"w\"> </span>total\n/home/ringzzz/wasm_runtime/WasmEdge/build/tools/wasmedge/wasmedge<span class=\"w\">   </span><span class=\"m\">1</span>.18s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">99</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.181<span class=\"w\"> </span>total\n/home/ringzzz/wasm_runtime/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">    </span><span class=\"m\">4</span>.68s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">4</span>.680<span class=\"w\"> </span>total\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437590416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715151854
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2098550298\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>Yes, you're right, but the default backend of <code>Wasmer</code> is also <code>Cranelift</code>,  the execution time before and after the modification in <code>Wasmer</code> is nearly the same. So I am wondering if it is possible that the subsequent commits introduce some bugs.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>➜<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span>✗<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>wasmer<span class=\"w\"> </span>run<span class=\"w\"> </span>--cranelift<span class=\"w\"> </span>good.wasm\n~/wasmer/target/release/wasmer<span class=\"w\"> </span>run<span class=\"w\"> </span>--cranelift<span class=\"w\">   </span><span class=\"m\">1</span>.76s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.758<span class=\"w\"> </span>total\n➜<span class=\"w\">  </span><span class=\"k\">case</span>✗<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>wasmer<span class=\"w\"> </span>run<span class=\"w\"> </span>--cranelift<span class=\"w\"> </span>bad.wasm\n~/wasmer/target/release/wasmer<span class=\"w\"> </span>run<span class=\"w\"> </span>--cranelift<span class=\"w\">   </span><span class=\"m\">1</span>.75s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.759<span class=\"w\"> </span>total\n</code></pre></div>\n</blockquote>",
        "id": 437590553,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715151918
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<h3>Test Case</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15236026/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code> and <code>WasmEdge</code>, and collect their execution time respectively.</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>Actually the only difference between the attached two cases is as follow, i.e., a multiplication operation to a division one, but the execution time of <code>Wasmtime</code> increases by more than 5 times, while the execution time before and after the modification is nearly the same in <code>Wasmedge</code> and <code>Wasmer</code>.</p>\n<p>![截屏2024-05-07 21 18 58](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3\">https://github.com/bytecodealliance/wasmtime/assets/32137313/a5c51594-b60f-466e-8517-48977fed9da3</a>)</p>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>~/wasmer/target/release/wasmer<span class=\"w\"> </span><span class=\"nv\">$filename</span>.wasm<span class=\"w\">  </span><span class=\"m\">1</span>.76s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.766<span class=\"w\"> </span>total\n~/WasmEdge/build/tools/wasmedge/wasmedge<span class=\"w\">   </span><span class=\"m\">1</span>.18s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">99</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.179<span class=\"w\"> </span>total\n~/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">    </span><span class=\"m\">0</span>.74s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">0</span>.741<span class=\"w\"> </span>total\n</code></pre></div>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>~/wasmer/target/release/wasmer<span class=\"w\"> </span><span class=\"nv\">$filename</span>.wasm<span class=\"w\">  </span><span class=\"m\">1</span>.77s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.765<span class=\"w\"> </span>total\n~/WasmEdge/build/tools/wasmedge/wasmedge<span class=\"w\">   </span><span class=\"m\">1</span>.18s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">99</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">1</span>.181<span class=\"w\"> </span>total\n~/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">    </span><span class=\"m\">4</span>.68s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">4</span>.680<span class=\"w\"> </span>total\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437590758,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715152014
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2171212821\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>@cfallin Hi, I check the generated machine code of <code>bad.wasm</code> and <code>good.wasm</code>, and find that, in the wasm code, the result of <code>i32.div_u</code> or <code>i32.mul</code> will be dropped directly, and the machine code of <code>good.wasm</code> will eliminate the multiplication operation, however, the machine code of <code>bad.wasm</code> will still do the division operation.<br>\nDoes this have anything to do with \"rewrite divs by constants into multiplies by magic constants\"? (In my view, this optimization aims to speed up the division operation under some magic contants?)<br>\nBy the way, I also replace <code>i32.mul</code> to other operator, e.g., <code>i32.sub</code> and <code>i32.add</code>, all of this operator will be eliminated directly. But I don't understand why only the division operator will not be eliminated.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"c1\">;; part of bad.wasm</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n<span class=\"nb\">i32.div_u</span> <span class=\"c1\">;; diff</span>\n<span class=\"nb\">drop</span>\n\n<span class=\"c1\">;; part of good.wasm</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n<span class=\"nb\">i32.mul</span> <span class=\"c1\">;; diff</span>\n<span class=\"nb\">drop</span>\n</code></pre></div>\n<p><a href=\"https://github.com/user-attachments/files/15856642/report.zip\">report.zip</a><br>\n</p>\n</blockquote>",
        "id": 444954521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718525788
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2171212821\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>@cfallin Hi, I check the generated machine code of <code>bad.wasm</code> and <code>good.wasm</code>, and find that, in the wasm code, the result of <code>i32.div_u</code> or <code>i32.mul</code> will be dropped directly, and the machine code of <code>good.wasm</code> will eliminate the multiplication operation, however, the machine code of <code>bad.wasm</code> will still do the division operation.<br>\nDoes this have anything to do with \"rewrite divs by constants into multiplies by magic constants\"? (In my view, this optimization aims to speed up the division operation?)<br>\nBy the way, I also replace <code>i32.mul</code> to other operator, e.g., <code>i32.sub</code> and <code>i32.add</code>, all of this operator will be eliminated directly. But I don't understand why only the division operator will not be eliminated.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"c1\">;; part of bad.wasm</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n<span class=\"nb\">i32.div_u</span> <span class=\"c1\">;; diff</span>\n<span class=\"nb\">drop</span>\n\n<span class=\"c1\">;; part of good.wasm</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n<span class=\"nb\">i32.mul</span> <span class=\"c1\">;; diff</span>\n<span class=\"nb\">drop</span>\n</code></pre></div>\n<p><a href=\"https://github.com/user-attachments/files/15856642/report.zip\">report.zip</a><br>\n</p>\n</blockquote>",
        "id": 444954548,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718525818
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2171212821\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>@cfallin Hi, I check the generated machine code of <code>bad.wasm</code> and <code>good.wasm</code>, and find that, in the wasm code, the result of <code>i32.div_u</code> or <code>i32.mul</code> will be dropped directly, and the machine code of <code>good.wasm</code> will eliminate the multiplication operation, however, the machine code of <code>bad.wasm</code> will still do the division operation.<br>\nDoes this have anything to do with \"rewrite divs by constants into multiplies by magic constants\"? (In my view, this optimization aims to speed up the division operation?)<br>\nBy the way, I also replace <code>i32.mul</code> to other operator, e.g., <code>i32.sub</code> and <code>i32.add</code>, all of this operator will be eliminated directly. But I don't understand why only the division operator will not be eliminated.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"c1\">;; part of bad.wasm</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n<span class=\"nb\">i32.div_u</span> <span class=\"c1\">;; diff</span>\n<span class=\"nb\">drop</span>\n\n<span class=\"c1\">;; part of good.wasm</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n<span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>\n<span class=\"nb\">i32.mul</span> <span class=\"c1\">;; diff</span>\n<span class=\"nb\">drop</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># the division operation in machine code of bad.wasm</span>\n\nxor<span class=\"w\"> </span>%eax,%eax\nmov<span class=\"w\"> </span><span class=\"nv\">$0</span>x1,%esi\nxor<span class=\"w\"> </span>%rdx,%rdx\ndiv<span class=\"w\"> </span>%esi\n</code></pre></div>\n<p><a href=\"https://github.com/user-attachments/files/15856642/report.zip\">report.zip</a><br>\n</p>\n</blockquote>",
        "id": 444955488,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718526660
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571#issuecomment-2172000849\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8571\">issue #8571</a>:</p>\n<blockquote>\n<p>Yes, divides also cannot be removed currently, even if dead: they may have side-effects in general (and Cranelift's predicate for \"is this instruction side-effecting\" doesn't know about constant input values, so it can't reason that a divide-by-constant-1 will never reach the divide-by-zero trap case). That's why a <code>drop</code>'d <code>i32.div_u</code> still appears in codegen while the <code>i32.mul</code> does not.</p>\n</blockquote>",
        "id": 445038839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1718587449
    }
]