[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a> from <code>alexcrichton:remove-native-abi</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit proposes removing the \"native abi\" calling convention used in Wasmtime. For background this ABI dates back to the origins of Wasmtime. Originally Wasmtime only had <code>Func::call</code> and eventually I added <code>TypedFunc</code> with <code>TypedFunc::call</code> and <code>Func::wrap</code> for a faster path. At the time given the state of trampolines it was easiest to call WebAssembly code directly without any trampolines using the native ABI that wasm used at the time. This is the original source of the native ABI and it's persisted over time under the assumption that it's faster than the array ABI due to keeping arguments in registers rather than spilling them to the stack.</p>\n<p>Over time, however, this design decision of using the native ABI has not aged well. Trampolines have changed quite a lot in the meantime and it's no longer possible for the host to call wasm without a trampoline, for example. Compilations nowadays maintain both native and array trampolines for wasm functions in addition to host functions. There's a large split between <code>Func::new</code> and <code>Func::wrap</code>. Overall, there's quite a lot of weight that we're pulling for the design decision of using the native ABI.</p>\n<p>Functionally this hasn't ever really been the end of the world. Trampolines aren't a known issue in terms of performance or code size. There's no known faster way to invoke WebAssembly from the host (or vice-versa). One major downside of this design, however, is that <code>Func::new</code> requires Cranelift as a backend to exist. This is due to the fact that it needs to synthesize various entries in the matrix of ABIs we have that aren't available at any other time. While this is itself not the worst of issues it means that the C API cannot be built without a compiler because the C API does not have access to <code>Func::wrap</code>.</p>\n<p>Overall I'd like to reevaluate given where Wasmtime is today whether it makes sense to keep the native ABI trampolines. Sure they're supposed to be fast, but are they really that much faster than the array-call ABI as an alternative? This commit is intended to measure this.</p>\n<p>This commit removes the native ABI calling convention entirely. For example <code>VMFuncRef</code> is now one pointer smaller. All of <code>TypedFunc</code> now uses <code>*mut ValRaw</code> for loads/stores rather than dealing with ABI business. The benchmarks with this PR are:</p>\n<ul>\n<li><code>sync/no-hook/core - host-to-wasm - typed - nop</code> - 5% faster</li>\n<li><code>sync/no-hook/core - host-to-wasm - typed - nop-params-and-results</code> - 10% slower</li>\n<li><code>sync/no-hook/core - wasm-to-host - typed - nop</code> - no change</li>\n<li><code>sync/no-hook/core - wasm-to-host - typed - nop-params-and-results</code> - 7% faster</li>\n</ul>\n<p>These numbers are a bit surprising as I would have suspected no change in both \"nop\" benchmarks as well as both being slower in the params-and-results benchmarks. Regardless it is apparent that this is not a major change in terms of performance given Wasmtime's current state. In general my hunch is that there are more expensive sources of overhead than reads/writes from the stack when dealing with wasm values (e.g. trap handling, store management, etc).</p>\n<p>Overall this commit feels like a large simplification of what we currently do in <code>TypedFunc</code>:</p>\n<ul>\n<li>The number of ABIs that Wasmtime deals with is reduced by one. ABIs are pretty much always tricky and having fewer moving parts should help improve the understandability of the system.</li>\n<li>All of the <code>WasmTy</code> trait methods and <code>TypedFunc</code> infrastructure is simplified. Traits now work with simple <code>load</code>/<code>store</code> methods rather than various other flavors of conversion.</li>\n<li>The multi-return-value handling of the native ABI is all gone now which gave rise to significant complexity within Wasmtime's Cranelift translation layer in addition to the <code>TypedFunc</code> backing traits.</li>\n<li>This aligns components and core wasm where components always use the array ABI and now core wasm additionally will always use the array ABI when communicating with the host.</li>\n</ul>\n<p>I'll note that this still leaves a major ABI \"complexity\" with respect to native functions do not have a wasm ABI function pointer until they're \"attached\" to a <code>Store</code> with a <code>Module</code>. That's required to avoid needing Cranelift for creating host functions and that property is still true today. This is a bit simpler to understand though now that <code>Func::new</code> and <code>Func::wrap</code> are treated uniformly rather than one being special-cased.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 438887043,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715807759
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 438887045,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715807759
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/elliottt\">elliottt</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 438887046,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715807759
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 438887093,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715807765
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629#issuecomment-2113602817\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"wasmtime:api\", \"wasmtime:ref-types\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>fitzgen: wasmtime:ref-types</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 438898095,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715813082
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629#pullrequestreview-2062142213\">PR review</a>:</p>\n<blockquote>\n<p>Ship it!</p>\n</blockquote>",
        "id": 439126399,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715906976
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 439141159,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715917236
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 439141218,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715917285
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 439145235,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715919303
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 439145245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715919307
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8629\">PR #8629</a>.</p>",
        "id": 439148602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715920925
    }
]