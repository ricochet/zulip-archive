[
    {
        "content": "<p><a href=\"https://github.com/maochenxi\">maochenxi</a> added the bug label to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570\">Issue #9570</a>.</p>",
        "id": 480872913,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730883879
    },
    {
        "content": "<p>maochenxi opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570\">issue #9570</a>:</p>\n<blockquote>\n<h3>Rust code for loading models</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">convert</span><span class=\"p\">::</span><span class=\"n\">TryInto</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi_nn</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">::</span><span class=\"n\">Rng</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bytemuck</span><span class=\"p\">::</span><span class=\"n\">cast_slice</span><span class=\"p\">;</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">xml</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"fixture/model.xml\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Read graph XML, first 50 characters: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">xml</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"mi\">50</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">weights</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"fixture/model.bin\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Read graph weights, size in bytes: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">weights</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">load</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">xml</span><span class=\"p\">.</span><span class=\"n\">into_bytes</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">weights</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">GRAPH_ENCODING_OPENVINO</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">EXECUTION_TARGET_CPU</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Loaded graph into wasi-nn with ID: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">init_execution_context</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Created wasi-nn execution context with ID: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"你好，今天的天气怎么样？\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tokenized_input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">input_text</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indexed_tokens</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokenized_input</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">token</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tensor_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">Tensor</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">dimensions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indexed_tokens</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"p\">#</span><span class=\"k\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">TENSOR_TYPE_I32</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">bytemuck</span><span class=\"p\">::</span><span class=\"n\">cast_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">indexed_tokens</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">set_input</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tensor_a</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Executed graph inference\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">get_output</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">context</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_buffer</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">output_buffer</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"output: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_buffer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">tokenize</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>I encountered an OutOfMemory error when trying to load a TinyLlama model (with approximately 4GB of parameters) using the wasi-nn interface in Wasmtime. The model is in OpenVINO format. This is the url of TinyLlama:<a href=\"https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T\">https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T</a>.</p>\n<p>Here is the command I used:<br>\n<code> /home/maochenxi/wasm/runtime/wasmtime-v24.0.0-x86_64-linux/wasmtime  run -S nn --dir=fixture::fixture target/wasm32-wasip1/release/wasi-nn-example.wasm</code></p>\n<h3>Actual Results</h3>\n<p>However, it throws the following error:<br>\n![image](<a href=\"https://github.com/user-attachments/assets/22d16c1f-70dd-4a9f-89b1-2c1d8b219bd1\">https://github.com/user-attachments/assets/22d16c1f-70dd-4a9f-89b1-2c1d8b219bd1</a>)</p>\n<p>The error message suggests that the model might be exceeding Wasmtime's memory allocation limits, even though I set max-memory-size to larger momery. Such as:<br>\n<code>/home/maochenxi/wasm/runtime/wasmtime-v24.0.0-x86_64-linux/wasmtime  run -W max-m\nemory-size=10240000000 -S nn --dir=fixture::fixture target/wasm32-wasip1/release/wasi-nn-example.wasm</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 24.0.0</p>\n<p>Operating system: Archlinux</p>\n<h3>Questions</h3>\n<ol>\n<li>Is there a specific parameter in Wasmtime that can further increase memory allocation or better manage memory for large models?</li>\n<li>Are there any other workarounds or configurations within Wasmtime or wasi-nn that could help with loading models of this size?<br>\n</li>\n</ol>\n</blockquote>",
        "id": 480872919,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730883881
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570#issuecomment-2459089200\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570\">issue #9570</a>:</p>\n<blockquote>\n<p>Wasm32 is limited to 4GB of linear memory. Subtract from that static data and the emulated stack and you have less than 4GB of memory you have to fit the weights and all other memory allocations in. Wasm64 allows significantly more memory to be used, but I'm not sure if wasi-nn works with wasm64. You can try compiling for the <code>wasm64-wasip1</code> rustc target. Make sure to also pass the right flags to wasmtime to enable the memory64 proposal.</p>\n</blockquote>",
        "id": 480875395,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730884647
    },
    {
        "content": "<p>maochenxi <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570#issuecomment-2461531858\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570\">issue #9570</a>:</p>\n<blockquote>\n<p>Thank you for your response! I tried wasm64, and it does seem that wasi-nn does not support wasm64. Therefore, I’ll have to try switching to a smaller model.</p>\n</blockquote>",
        "id": 481061137,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730965499
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570#issuecomment-2462560924\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570\">issue #9570</a>:</p>\n<blockquote>\n<p>Yes unfortunately currently no 64-bit WASI targets exist. I'm not personally aware of any implementation of 64-bit WASI implementation myself.</p>\n<p>Otherwise though it's expected to see an OOM as 32-bit linear memories are limited to 4GiB. In that sense this is expected behavior and I'm not sure there's much we can do in Wasmtime about it, so I'm going to close this issue. If you're interested in a 64-bit WASI target it might make sense to open a dedicated tracking issue for that on the WASI repo (or one probably already exists)</p>\n</blockquote>",
        "id": 481147632,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730994079
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9570\">issue #9570</a>:</p>\n<blockquote>\n<h3>Rust code for loading models</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">convert</span><span class=\"p\">::</span><span class=\"n\">TryInto</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">fs</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi_nn</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rand</span><span class=\"p\">::</span><span class=\"n\">Rng</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bytemuck</span><span class=\"p\">::</span><span class=\"n\">cast_slice</span><span class=\"p\">;</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">xml</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">\"fixture/model.xml\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Read graph XML, first 50 characters: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">xml</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"mi\">50</span><span class=\"p\">]);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">weights</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span><span class=\"p\">::</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"fixture/model.bin\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Read graph weights, size in bytes: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">weights</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">load</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">xml</span><span class=\"p\">.</span><span class=\"n\">into_bytes</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">weights</span><span class=\"p\">],</span>\n<span class=\"w\">            </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">GRAPH_ENCODING_OPENVINO</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">EXECUTION_TARGET_CPU</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Loaded graph into wasi-nn with ID: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">graph</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">init_execution_context</span><span class=\"p\">(</span><span class=\"n\">graph</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Created wasi-nn execution context with ID: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input_text</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"你好，今天的天气怎么样？\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tokenized_input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokenize</span><span class=\"p\">(</span><span class=\"n\">input_text</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">indexed_tokens</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tokenized_input</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">token</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tensor_a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">Tensor</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">dimensions</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">indexed_tokens</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">],</span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"p\">#</span><span class=\"k\">type</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">TENSOR_TYPE_I32</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">bytemuck</span><span class=\"p\">::</span><span class=\"n\">cast_slice</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">indexed_tokens</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">set_input</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tensor_a</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Executed graph inference\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">i32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi_nn</span><span class=\"p\">::</span><span class=\"n\">get_output</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">context</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">output_buffer</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">i32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">output_buffer</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">).</span><span class=\"n\">try_into</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"output: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output_buffer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">tokenize</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">chars</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">c</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">).</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>I encountered an OutOfMemory error when trying to load a TinyLlama model (with approximately 4GB of parameters) using the wasi-nn interface in Wasmtime. The model is in OpenVINO format. This is the url of TinyLlama:<a href=\"https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T\">https://huggingface.co/TinyLlama/TinyLlama-1.1B-intermediate-step-1431k-3T</a>.</p>\n<p>Here is the command I used:<br>\n<code> /home/maochenxi/wasm/runtime/wasmtime-v24.0.0-x86_64-linux/wasmtime  run -S nn --dir=fixture::fixture target/wasm32-wasip1/release/wasi-nn-example.wasm</code></p>\n<h3>Actual Results</h3>\n<p>However, it throws the following error:<br>\n![image](<a href=\"https://github.com/user-attachments/assets/22d16c1f-70dd-4a9f-89b1-2c1d8b219bd1\">https://github.com/user-attachments/assets/22d16c1f-70dd-4a9f-89b1-2c1d8b219bd1</a>)</p>\n<p>The error message suggests that the model might be exceeding Wasmtime's memory allocation limits, even though I set max-memory-size to larger momery. Such as:<br>\n<code>/home/maochenxi/wasm/runtime/wasmtime-v24.0.0-x86_64-linux/wasmtime  run -W max-m\nemory-size=10240000000 -S nn --dir=fixture::fixture target/wasm32-wasip1/release/wasi-nn-example.wasm</code></p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: 24.0.0</p>\n<p>Operating system: Archlinux</p>\n<h3>Questions</h3>\n<ol>\n<li>Is there a specific parameter in Wasmtime that can further increase memory allocation or better manage memory for large models?</li>\n<li>Are there any other workarounds or configurations within Wasmtime or wasi-nn that could help with loading models of this size?<br>\n</li>\n</ol>\n</blockquote>",
        "id": 481147655,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1730994084
    }
]