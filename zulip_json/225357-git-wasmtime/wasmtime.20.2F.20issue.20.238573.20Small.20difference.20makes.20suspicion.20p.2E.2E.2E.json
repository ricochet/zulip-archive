[
    {
        "content": "<p>hungryzzz opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<h3>Test Cases</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15237560/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code>, <code>WasmEdge(AOT)</code> and <code>Wamr(AOT)</code>, and collect their execution time respectively (measured by <code>time</code> tool).</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:</p>\n<ul>\n<li><code>Wasmtime</code>: 2.81s</li>\n<li><code>WasmEdge</code>: 4.67s</li>\n<li><code>Wamr</code>: 3.29s</li>\n</ul>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:</p>\n<ul>\n<li><code>Wasmtime</code>: 2.35s</li>\n<li><code>WasmEdge</code>: 9.34s</li>\n<li><code>Wamr</code>: 3.29s</li>\n</ul>\n<p>The difference between the attached two cases is as follow, i.e., changing the address of <code>i32.load</code> from <code>local.get 0</code> to <code>i32.const 0</code>, the case with <code>i32.const 0</code> has the bad performance in <code>Wasmtime</code>, whose execution time is 2x slower than the former one. I think the decreasing is confused and suspicious, why is an immediate operation slower than a local variable operation? Moreover, the <code>i32.load</code> is out of the loop, I cannot understand why the operation could affect the overall performance so vastly.</p>\n<p>![截屏2024-05-07 23 19 36](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/be606e8b-7da9-4f99-9697-e23b3b53e376\">https://github.com/bytecodealliance/wasmtime/assets/32137313/be606e8b-7da9-4f99-9697-e23b3b53e376</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437483956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715097643
    },
    {
        "content": "<p>hungryzzz edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<h3>Test Cases</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15237560/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code>, <code>WasmEdge(AOT)</code> and <code>Wamr(AOT)</code>, and collect their execution time respectively (measured by <code>time</code> tool).</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:</p>\n<ul>\n<li><code>Wasmtime</code>: 4.67s</li>\n<li><code>WasmEdge</code>: 2.81s</li>\n<li><code>Wamr</code>: 3.29s</li>\n</ul>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:</p>\n<ul>\n<li><code>Wasmtime</code>: 9.34s</li>\n<li><code>WasmEdge</code>: 2.35s</li>\n<li><code>Wamr</code>: 3.29s</li>\n</ul>\n<p>The difference between the attached two cases is as follow, i.e., changing the address of <code>i32.load</code> from <code>local.get 0</code> to <code>i32.const 0</code>, the case with <code>i32.const 0</code> has the bad performance in <code>Wasmtime</code>, whose execution time is 2x slower than the former one. I think the decreasing is confused and suspicious, why is an immediate operation slower than a local variable operation? Moreover, the <code>i32.load</code> is out of the loop, I cannot understand why the operation could affect the overall performance so vastly.</p>\n<p>![截屏2024-05-07 23 19 36](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/be606e8b-7da9-4f99-9697-e23b3b53e376\">https://github.com/bytecodealliance/wasmtime/assets/32137313/be606e8b-7da9-4f99-9697-e23b3b53e376</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 437484101,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715097684
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2098820875\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>cc @fitzgen , perhaps this is something to do with our bounds-checking cases?</p>\n</blockquote>",
        "id": 437485843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715098215
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2098831279\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@hungryzzz can you share how you are configuring and executing the Wasm in Wasmtime? I.e. the exact flags you are passing to the CLI or the exact Rust code that you are using when embedding Wasmtime if you aren't using the CLI.</p>\n<blockquote>\n<p>cc @fitzgen , perhaps this is something to do with our bounds-checking cases?</p>\n</blockquote>\n<p>With the default configuration of Wasmtime we should be eliding basically all bounds checks, I'd be surprised if this was bounds-check related unless guard pages are being disabled or something.</p>\n</blockquote>",
        "id": 437486781,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715098520
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2098844362\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@fitzgen I use the CLI to run the case, the command I use is <code>wasmtime good.wasm</code> without extra flags.</p>\n</blockquote>",
        "id": 437488050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715098955
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2098859591\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@hungryzzz ah okay, that means that you are measuring compilation time as well, not just execution time.</p>\n<p>If you want to measure execution performance specifically, you should instead do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n</code></pre></div>\n<p>Wasmtime is technically a JIT in the sense that it can compile code on demand and map it executable into the same process that did the compiling right before executing the code. But it is not a JIT in the same sense that engines like V8 and SpiderMonkey are, where there are speculative optimizations, lazy tiering up based on which functions are hot, dynamic deoptimization when speculative assumptions fail, etc... Given all that, I'd highly recommend the two-phase process I sketched above, where the Wasm is first compiled and then second the compiled code is executed (and this second part is what you are timing).</p>\n</blockquote>",
        "id": 437489459,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715099459
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2099782660\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@fitzgen Thank you for your advice, I recollect the execution time with the above commands and the results are as follows.<br>\n&lt;img width=\"1385\" alt=\"截屏2024-05-08 13 40 58\" src=\"<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/88a176a6-ea67-475d-8474-90d61f0fbed6\">https://github.com/bytecodealliance/wasmtime/assets/32137313/88a176a6-ea67-475d-8474-90d61f0fbed6</a>\"&gt;</p>\n</blockquote>",
        "id": 437580417,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715146936
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2099839239\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@hungryzzz a request for your posts: would you mind posting your results as plain text (or formatted as appropriate), rather than PNG screenshots of a terminal?</p>\n<p>There are several reasons for this:</p>\n<ul>\n<li>Plain text shows up in email clients for folks who have GitHub email notifications, whereas images may not load at all, or require an extra action to load (personally the case for me: I have to click through to see your content)</li>\n<li>Plain text follows the configuration of the user's browser, including font-sizes, color and contrast settings, etc., some of which are not just cosmetic but necessary for folks with vision issues (which will be most of us eventually!)</li>\n<li>Plain text can be searched (local Ctrl-F, and also indexed by search engines at GitHub's search functionality), copied and pasted, and otherwise handled as needed, whereas a PNG is just pixels</li>\n<li>Plain text is visible to screen-readers and other tools that inspect the semantic page contents, whereas an image is not</li>\n</ul>\n<p>It may take ever so slightly longer (copy &amp; paste, use markdown triple-backtick quotes) but it's a great kindness to readers here for all the reasons above, and we want to set a standard here for maximally accessible and usable discussion content. Thanks!</p>\n</blockquote>",
        "id": 437586329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715149934
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2099839239\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@hungryzzz a request for your posts: would you mind posting your results as plain text (or formatted as appropriate), rather than PNG screenshots of a terminal?</p>\n<p>There are several reasons for this:</p>\n<ul>\n<li>Plain text shows up in email clients for folks who have GitHub email notifications, whereas images may not load at all, or require an extra action to load (personally the case for me: I have to click through to see your content)</li>\n<li>Plain text follows the configuration of the user's browser, including font-sizes, color and contrast settings, etc., some of which are not just cosmetic but necessary for folks with vision issues (which will be most of us eventually!)</li>\n<li>Plain text can be searched (local Ctrl-F, and also indexed by search engines and GitHub's search functionality), copied and pasted, and otherwise handled as needed, whereas a PNG is just pixels</li>\n<li>Plain text is visible to screen-readers and other tools that inspect the semantic page contents, whereas an image is not</li>\n</ul>\n<p>It may take ever so slightly longer (copy &amp; paste, use markdown triple-backtick quotes) but it's a great kindness to readers here for all the reasons above, and we want to set a standard here for maximally accessible and usable discussion content. Thanks!</p>\n</blockquote>",
        "id": 437586424,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715149991
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2099782660\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@fitzgen Thank you for your advice, I recollect the execution time with the above commands and the results are as follows. I guess the JITed code would be cached after the first compilation, so the execution results are nearly the same as the above one.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>➜<span class=\"w\">  </span>case1<span class=\"w\"> </span>git:<span class=\"o\">(</span>wasm-mutate<span class=\"o\">)</span><span class=\"w\"> </span>✗<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>compile<span class=\"w\"> </span>good.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>good.cwasm\n➜<span class=\"w\">  </span>case1<span class=\"w\"> </span>git:<span class=\"o\">(</span>wasm-mutate<span class=\"o\">)</span><span class=\"w\"> </span>✗<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>compile<span class=\"w\"> </span>bad.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>bad.cwasm\n➜<span class=\"w\">  </span>case1<span class=\"w\"> </span>git:<span class=\"o\">(</span>wasm-mutate<span class=\"o\">)</span><span class=\"w\"> </span>✗<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--allow-precompiled<span class=\"w\"> </span>good.cwasm\n/home/ringzzz/wasm_runtime/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">  </span>good.cwasm<span class=\"w\">  </span><span class=\"m\">4</span>.67s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">4</span>.674<span class=\"w\"> </span>total\n➜<span class=\"w\">  </span>case1<span class=\"w\"> </span>git:<span class=\"o\">(</span>wasm-mutate<span class=\"o\">)</span><span class=\"w\"> </span>✗<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--allow-precompiled<span class=\"w\"> </span>bad.cwasm\n/home/ringzzz/wasm_runtime/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">  </span>bad.cwasm<span class=\"w\">  </span><span class=\"m\">9</span>.36s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">9</span>.365<span class=\"w\"> </span>total\n</code></pre></div>\n</blockquote>",
        "id": 437586583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715150089
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2099839239\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@hungryzzz a request for your posts: would you mind posting your results as plain text (or formatted as appropriate), rather than PNG screenshots of a terminal?</p>\n<p>There are several reasons for this:</p>\n<ul>\n<li>Plain text shows up in email clients for folks who have GitHub email notifications, whereas images may not load at all, or require an extra action to load (personally the case for me: I have to click through to see your content)</li>\n<li>Plain text follows the configuration of the user's browser, including font-sizes, color and contrast settings, etc., some of which are not just cosmetic but necessary for folks with vision issues (which will be most of us eventually!)</li>\n<li>Plain text can be searched (local Ctrl-F, and also indexed by search engines and GitHub's search functionality), copied and pasted, and otherwise handled as needed, whereas a PNG is just pixels</li>\n<li>Plain text is visible to screen-readers and other tools that inspect the semantic page contents, whereas an image is not</li>\n</ul>\n<p>It may take ever so slightly longer (copy &amp; paste, use markdown triple-backtick quotes) but it's a great kindness to readers here for all the reasons above, and we want to set a standard here for maximally accessible and usable discussion content. Thanks!</p>\n<p>(EDIT: thanks for your edit! I'll leave this here for posterity)</p>\n</blockquote>",
        "id": 437586723,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715150149
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2099782660\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>@fitzgen Thank you for your advice, I recollect the execution time with the above commands and the results are as follows. I guess the JITed code would be cached after the first compilation, so the execution results are nearly the same as the above one.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>➜<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span>✗<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>compile<span class=\"w\"> </span>good.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>good.cwasm\n➜<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span>✗<span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>compile<span class=\"w\"> </span>bad.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>bad.cwasm\n➜<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span>✗<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--allow-precompiled<span class=\"w\"> </span>good.cwasm\n~/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">  </span>good.cwasm<span class=\"w\">  </span><span class=\"m\">4</span>.67s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.00s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">4</span>.674<span class=\"w\"> </span>total\n➜<span class=\"w\">  </span><span class=\"k\">case</span><span class=\"w\"> </span>✗<span class=\"w\"> </span><span class=\"nb\">time</span><span class=\"w\"> </span>wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--allow-precompiled<span class=\"w\"> </span>bad.cwasm\n~/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\">  </span>bad.cwasm<span class=\"w\">  </span><span class=\"m\">9</span>.36s<span class=\"w\"> </span>user<span class=\"w\"> </span><span class=\"m\">0</span>.01s<span class=\"w\"> </span>system<span class=\"w\"> </span><span class=\"m\">100</span>%<span class=\"w\"> </span>cpu<span class=\"w\"> </span><span class=\"m\">9</span>.365<span class=\"w\"> </span>total\n</code></pre></div>\n</blockquote>",
        "id": 437586804,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715150171
    },
    {
        "content": "<p>primoly <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2101700502\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>Probably irrelevant, but could code alignment play a role? I noticed that both modules compile to basically the same instructions, just assigned different registers. Yet for <code>func1</code>, good gets more operations aligned to four bytes than bad.</p>\n<p><strong>bad.cwasm</strong> <code>func1</code> x86-64: 60 instructions, 17 start at addresses divisible by four (28%)<br>\n<strong>good.cwasm</strong> <code>func1</code> x86-64: 62 instructions, 25 start at addresses divisible by four (40%)</p>\n<p>Unsurprisingly no difference for <code>func2</code> since it generates identical instructions for better or worse... I mean good and bad.</p>\n</blockquote>",
        "id": 437749857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715213743
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2110640007\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>I use <code>Perf</code> tool to profile the execution time and surprisingly find that the hotspot is not in <code>func1</code> where the small difference happens, but in the <code>func2</code>. I continue to check the binary compiled by <code>Cranelift</code> and find that the binary of <code>func2</code> is the same before and after the small difference. It is really confused to me how the difference in <code>func1</code> could affect the execution of <code>func2</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Samples:<span class=\"w\"> </span>38K<span class=\"w\"> </span>of<span class=\"w\"> </span>event<span class=\"w\"> </span><span class=\"s1\">'cycles'</span>,<span class=\"w\"> </span>Event<span class=\"w\"> </span>count<span class=\"w\"> </span><span class=\"o\">(</span>approx.<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">34572923013</span>\nOverhead<span class=\"w\">  </span>Command<span class=\"w\">          </span>Shared<span class=\"w\"> </span>Object<span class=\"w\">        </span>Symbol\n<span class=\"w\">  </span><span class=\"m\">74</span>.91%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span>jitted-4044282-1.so<span class=\"w\">  </span><span class=\"o\">[</span>.<span class=\"o\">]</span><span class=\"w\"> </span>000000000000004f<span class=\"w\">                                                                                             </span>◆\n<span class=\"w\">  </span><span class=\"m\">24</span>.63%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span>jitted-4044282-1.so<span class=\"w\">  </span><span class=\"o\">[</span>.<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"m\">0000000000000071</span><span class=\"w\">                                                                                             </span>▒\n<span class=\"w\">   </span><span class=\"m\">0</span>.32%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span>jitted-4044282-1.so<span class=\"w\">  </span><span class=\"o\">[</span>.<span class=\"o\">]</span><span class=\"w\"> </span>0x0000000000000067<span class=\"w\">                                                                                           </span>▒\n<span class=\"w\">   </span><span class=\"m\">0</span>.01%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span><span class=\"o\">[</span>kernel.kallsyms<span class=\"o\">]</span><span class=\"w\">    </span><span class=\"o\">[</span>k<span class=\"o\">]</span><span class=\"w\"> </span>__handle_mm_fault<span class=\"w\">                                                                                            </span>▒\n<span class=\"w\">   </span><span class=\"m\">0</span>.01%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span><span class=\"o\">[</span>kernel.kallsyms<span class=\"o\">]</span><span class=\"w\">    </span><span class=\"o\">[</span>k<span class=\"o\">]</span><span class=\"w\"> </span>sync_regs<span class=\"w\">                                                                                                    </span>▒\n<span class=\"w\">   </span><span class=\"m\">0</span>.01%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span><span class=\"o\">[</span>kernel.kallsyms<span class=\"o\">]</span><span class=\"w\">    </span><span class=\"o\">[</span>k<span class=\"o\">]</span><span class=\"w\"> </span>native_irq_return_iret<span class=\"w\">                                                                                       </span>▒\n<span class=\"w\">   </span><span class=\"m\">0</span>.01%<span class=\"w\">  </span>wasmtime<span class=\"w\">         </span><span class=\"o\">[</span>kernel.kallsyms<span class=\"o\">]</span><span class=\"w\">    </span><span class=\"o\">[</span>k<span class=\"o\">]</span><span class=\"w\"> </span>vm_unmapped_area<span class=\"w\">                                                                                             </span>▒\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Samples:<span class=\"w\"> </span>38K<span class=\"w\"> </span>of<span class=\"w\"> </span>event<span class=\"w\"> </span><span class=\"s1\">'cycles'</span>,<span class=\"w\"> </span><span class=\"m\">4000</span><span class=\"w\"> </span>Hz,<span class=\"w\"> </span>Event<span class=\"w\"> </span>count<span class=\"w\"> </span><span class=\"o\">(</span>approx.<span class=\"o\">)</span>:<span class=\"w\"> </span><span class=\"m\">34572923013</span>\n000000000000004f<span class=\"w\">  </span>/home/ringzzz/performance_debug/case1-wasmtime/wasmtime-perf/jitted-4044282-1.so<span class=\"w\"> </span><span class=\"o\">[</span>Percent:<span class=\"w\"> </span><span class=\"nb\">local</span><span class=\"w\"> </span>period<span class=\"o\">]</span>\nPercent│\n<span class=\"w\">       </span>│\n<span class=\"w\">       </span>│\n<span class=\"w\">       </span>│<span class=\"w\">     </span>Disassembly<span class=\"w\"> </span>of<span class=\"w\"> </span>section<span class=\"w\"> </span>.text:\n<span class=\"w\">       </span>│\n<span class=\"w\">       </span>│<span class=\"w\">     </span><span class=\"m\">0000000000000040</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>&gt;:\n<span class=\"w\">       </span>│<span class=\"w\">     </span>wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]()</span>:\n<span class=\"w\">       </span>│<span class=\"w\">       </span>push<span class=\"w\"> </span>%rbp\n<span class=\"w\">       </span>│<span class=\"w\">       </span>mov<span class=\"w\">  </span>%rsp,%rbp\n<span class=\"w\">       </span>│<span class=\"w\">       </span>xor<span class=\"w\">  </span>%eax,%eax\n<span class=\"w\">       </span>│<span class=\"w\">       </span>mov<span class=\"w\">  </span>%rax,%r8\n<span class=\"w\">       </span>│<span class=\"w\"> </span>3a:<span class=\"w\">   </span>cmp<span class=\"w\">  </span><span class=\"nv\">$0</span>xffff,%eax\n<span class=\"w\">       </span>│<span class=\"w\">     </span>↓<span class=\"w\"> </span>jne<span class=\"w\">  </span><span class=\"m\">58</span>\n<span class=\"w\">       </span>│<span class=\"w\">       </span>mov<span class=\"w\">  </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rdi\n<span class=\"w\">       </span>│<span class=\"w\">       </span>movl<span class=\"w\"> </span><span class=\"nv\">$0</span>x1,<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n<span class=\"w\">       </span>│<span class=\"w\">       </span>mov<span class=\"w\">  </span>%rbp,%rsp\n<span class=\"w\">       </span>│<span class=\"w\">       </span>pop<span class=\"w\">  </span>%rbp\n<span class=\"w\">       </span>│<span class=\"w\">     </span>←<span class=\"w\"> </span>retq\n<span class=\"w\">       </span>│<span class=\"w\"> </span><span class=\"m\">58</span>:<span class=\"w\">   </span>lea<span class=\"w\">  </span>0x1<span class=\"o\">(</span>%r8<span class=\"o\">)</span>,%edx\n<span class=\"w\">       </span>│<span class=\"w\">       </span>mov<span class=\"w\">  </span>%r8,%rax\n<span class=\"w\">       </span>│<span class=\"w\">       </span>mov<span class=\"w\">  </span>%rdx,%r8\n<span class=\"w\">       </span>│<span class=\"w\">     </span>↑<span class=\"w\"> </span>jmpq<span class=\"w\"> </span>3a\n</code></pre></div>\n<p><div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># the commands to profile</span>\nperf<span class=\"w\"> </span>record<span class=\"w\"> </span>-k<span class=\"w\"> </span>mono<span class=\"w\"> </span>~/wasmtime/target/release/wasmtime<span class=\"w\"> </span>run<span class=\"w\"> </span>--profile<span class=\"w\"> </span>jitdump<span class=\"w\"> </span>--allow-precompiled<span class=\"w\"> </span>bad.cwasm\nperf<span class=\"w\"> </span>inject<span class=\"w\"> </span>--jit<span class=\"w\"> </span>--input<span class=\"w\"> </span>perf.data<span class=\"w\"> </span>--output<span class=\"w\"> </span>perf.jit.data\nperf<span class=\"w\"> </span>report<span class=\"w\"> </span>--input<span class=\"w\"> </span>perf.jit.data<span class=\"w\"> </span>--no-children\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 438611005,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715703679
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2110670808\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>It is really confused to me how the difference in <code>func1</code> could affect the execution of <code>func2</code>.</p>\n</blockquote>\n<p>Is it changing the alignment of <code>func2</code>? We have both preferred and required alignments inside Cranelift, and it is possible that something is getting bumped from its preferred down to just its required alignment.</p>\n</blockquote>",
        "id": 438614064,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715704680
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2110681601\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>Testing locally I've got the \"good\" function 2 starting at 0x140 and \"bad\" starts at 0x130. That makes sense to me because we align functions to 16-bytes and the \"bad\" version has more constant propagation so function is a bit smaller in the \"bad\" version, hence starting a bit earlier.</p>\n<p>This program appears to be effectively a benchmark of the second function, which you've pasted the machine code above. In <code>perf</code> locally the <code>jmpq</code> and <code>jne</code> instructions are the hottest instructions. My suspicion is that this is CPU-specific for you (I can't reproduce the slowdown myself) where it's falling over some branch predictor heuristics. </p>\n<p>That being said in general the \"function 2\" here is a pretty bad layout choice for cranelift. The loop is spread across the epilogue instead of tightly put together which might omit a jump. Cranelift can probably do better here in terms of block layout on the second function and that might help branch predictor heuristics on your CPU as well</p>\n</blockquote>",
        "id": 438615044,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715705022
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2110716917\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>FWIW, the usual \"fetch bandwidth sin\" to avoid is forcing partial fetch lines -- the CPU frontend grabs an aligned 32B or 64B chunk at a time so if a function starts halfway through a fetch line, we're wasting frontend bandwidth. I suspect a 32B function alignment would be a pretty reasonable default in general -- is there a reason we only require 16B now? Did we find it mattered a lot for object file bloat or somesuch?</p>\n</blockquote>",
        "id": 438618494,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715706203
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2110799254\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>Looks like the 16-byte alignment was added in #4826 as the minimum require for functions at the time to properly align constants in the constant pool. I don't think 32-bytes was specifically rejected in favor of a smaller size. Looks. like aarch64 is aligned to 32-bytes.</p>\n</blockquote>",
        "id": 438625445,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715709061
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2110820996\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>Cool -- @hungryzzz, I think we'd be happy to take a PR to change x86-64's function alignment to 32 bytes as well, if you'd like to create one!</p>\n</blockquote>",
        "id": 438627507,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715709898
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2111884867\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it changing the alignment of <code>func2</code>?</p>\n</blockquote>\n<p>Yes, the machine codes of <code>func2</code> before and after changes are the same excpet the start address of the <code>func2</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># machine code of `func2` in `bad.wasm` generated by Cranelift</span>\n<span class=\"m\">0000000000000130</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>&gt;:\n<span class=\"w\">     </span><span class=\"m\">130</span>:<span class=\"w\">   </span><span class=\"m\">55</span><span class=\"w\">                      </span>push<span class=\"w\">   </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">131</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>e5<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rsp,%rbp\n<span class=\"w\">     </span><span class=\"m\">134</span>:<span class=\"w\">   </span><span class=\"m\">31</span><span class=\"w\"> </span>c0<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%eax,%eax\n<span class=\"w\">     </span><span class=\"m\">136</span>:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rax,%r8\n<span class=\"w\">     </span><span class=\"m\">139</span>:<span class=\"w\">   </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>xffff,%eax\n<span class=\"w\">     </span>13f:<span class=\"w\">   </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span><span class=\"m\">12</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">157</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x27&gt;\n<span class=\"w\">     </span><span class=\"m\">145</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>bf<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rdi\n<span class=\"w\">     </span>14c:<span class=\"w\">   </span>c7<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>movl<span class=\"w\">   </span><span class=\"nv\">$0</span>x1,<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"m\">152</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>ec<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rbp,%rsp\n<span class=\"w\">     </span><span class=\"m\">155</span>:<span class=\"w\">   </span>5d<span class=\"w\">                      </span>pop<span class=\"w\">    </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">156</span>:<span class=\"w\">   </span>c3<span class=\"w\">                      </span>retq\n<span class=\"w\">     </span><span class=\"m\">157</span>:<span class=\"w\">   </span><span class=\"m\">41</span><span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">50</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">             </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%r8<span class=\"o\">)</span>,%edx\n<span class=\"w\">     </span>15b:<span class=\"w\">   </span>4c<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%r8,%rax\n<span class=\"w\">     </span>15e:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"w\">     </span><span class=\"m\">161</span>:<span class=\"w\">   </span>e9<span class=\"w\"> </span>d3<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">          </span>jmpq<span class=\"w\">   </span><span class=\"m\">139</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x9&gt;\n\n<span class=\"c1\"># machine code of `func2` in `good.wasm` generated by Cranelift</span>\n<span class=\"m\">0000000000000120</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>&gt;:\n<span class=\"w\">     </span><span class=\"m\">120</span>:<span class=\"w\">   </span><span class=\"m\">55</span><span class=\"w\">                      </span>push<span class=\"w\">   </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">121</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>e5<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rsp,%rbp\n<span class=\"w\">     </span><span class=\"m\">124</span>:<span class=\"w\">   </span><span class=\"m\">31</span><span class=\"w\"> </span>c0<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%eax,%eax\n<span class=\"w\">     </span><span class=\"m\">126</span>:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rax,%r8\n<span class=\"w\">     </span><span class=\"m\">129</span>:<span class=\"w\">   </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>xffff,%eax\n<span class=\"w\">     </span>12f:<span class=\"w\">   </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span><span class=\"m\">12</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">147</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x27&gt;\n<span class=\"w\">     </span><span class=\"m\">135</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>bf<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rdi\n<span class=\"w\">     </span>13c:<span class=\"w\">   </span>c7<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>movl<span class=\"w\">   </span><span class=\"nv\">$0</span>x1,<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"m\">142</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>ec<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rbp,%rsp\n<span class=\"w\">     </span><span class=\"m\">145</span>:<span class=\"w\">   </span>5d<span class=\"w\">                      </span>pop<span class=\"w\">    </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">146</span>:<span class=\"w\">   </span>c3<span class=\"w\">                      </span>retq\n<span class=\"w\">     </span><span class=\"m\">147</span>:<span class=\"w\">   </span><span class=\"m\">41</span><span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">50</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">             </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%r8<span class=\"o\">)</span>,%edx\n<span class=\"w\">     </span>14b:<span class=\"w\">   </span>4c<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%r8,%rax\n<span class=\"w\">     </span>14e:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"w\">     </span><span class=\"m\">151</span>:<span class=\"w\">   </span>e9<span class=\"w\"> </span>d3<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">          </span>jmpq<span class=\"w\">   </span><span class=\"m\">129</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x9&gt;\n</code></pre></div>\n<blockquote>\n<p>In <code>perf</code> locally the <code>jmpq</code> and <code>jne</code> instructions are the hottest instructions. My suspicion is that this is CPU-specific for you (I can't reproduce the slowdown myself) where it's falling over some branch predictor heuristics.</p>\n</blockquote>\n<p>I am confused that how the function alignment could affect the CPU branch prediction.</p>\n</blockquote>",
        "id": 438750868,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715761573
    },
    {
        "content": "<p>hungryzzz edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2111884867\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it changing the alignment of <code>func2</code>?</p>\n</blockquote>\n<p>Yes, the machine codes of <code>func2</code> before and after changes are the same excpet the start address of the <code>func2</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># machine code of `func2` in `bad.wasm` generated by Cranelift</span>\n<span class=\"m\">0000000000000130</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>&gt;:\n<span class=\"w\">     </span><span class=\"m\">130</span>:<span class=\"w\">   </span><span class=\"m\">55</span><span class=\"w\">                      </span>push<span class=\"w\">   </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">131</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>e5<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rsp,%rbp\n<span class=\"w\">     </span><span class=\"m\">134</span>:<span class=\"w\">   </span><span class=\"m\">31</span><span class=\"w\"> </span>c0<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%eax,%eax\n<span class=\"w\">     </span><span class=\"m\">136</span>:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rax,%r8\n<span class=\"w\">     </span><span class=\"m\">139</span>:<span class=\"w\">   </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>xffff,%eax\n<span class=\"w\">     </span>13f:<span class=\"w\">   </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span><span class=\"m\">12</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">157</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x27&gt;\n<span class=\"w\">     </span><span class=\"m\">145</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>bf<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rdi\n<span class=\"w\">     </span>14c:<span class=\"w\">   </span>c7<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>movl<span class=\"w\">   </span><span class=\"nv\">$0</span>x1,<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"m\">152</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>ec<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rbp,%rsp\n<span class=\"w\">     </span><span class=\"m\">155</span>:<span class=\"w\">   </span>5d<span class=\"w\">                      </span>pop<span class=\"w\">    </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">156</span>:<span class=\"w\">   </span>c3<span class=\"w\">                      </span>retq\n<span class=\"w\">     </span><span class=\"m\">157</span>:<span class=\"w\">   </span><span class=\"m\">41</span><span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">50</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">             </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%r8<span class=\"o\">)</span>,%edx\n<span class=\"w\">     </span>15b:<span class=\"w\">   </span>4c<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%r8,%rax\n<span class=\"w\">     </span>15e:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"w\">     </span><span class=\"m\">161</span>:<span class=\"w\">   </span>e9<span class=\"w\"> </span>d3<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">          </span>jmpq<span class=\"w\">   </span><span class=\"m\">139</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x9&gt;\n\n<span class=\"c1\"># machine code of `func2` in `good.wasm` generated by Cranelift</span>\n<span class=\"m\">0000000000000120</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>&gt;:\n<span class=\"w\">     </span><span class=\"m\">120</span>:<span class=\"w\">   </span><span class=\"m\">55</span><span class=\"w\">                      </span>push<span class=\"w\">   </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">121</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>e5<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rsp,%rbp\n<span class=\"w\">     </span><span class=\"m\">124</span>:<span class=\"w\">   </span><span class=\"m\">31</span><span class=\"w\"> </span>c0<span class=\"w\">                   </span>xor<span class=\"w\">    </span>%eax,%eax\n<span class=\"w\">     </span><span class=\"m\">126</span>:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rax,%r8\n<span class=\"w\">     </span><span class=\"m\">129</span>:<span class=\"w\">   </span><span class=\"m\">81</span><span class=\"w\"> </span>f8<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>cmp<span class=\"w\">    </span><span class=\"nv\">$0</span>xffff,%eax\n<span class=\"w\">     </span>12f:<span class=\"w\">   </span>0f<span class=\"w\"> </span><span class=\"m\">85</span><span class=\"w\"> </span><span class=\"m\">12</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>jne<span class=\"w\">    </span><span class=\"m\">147</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x27&gt;\n<span class=\"w\">     </span><span class=\"m\">135</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span>8b<span class=\"w\"> </span>bf<span class=\"w\"> </span><span class=\"m\">80</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">    </span>mov<span class=\"w\">    </span>0x80<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>,%rdi\n<span class=\"w\">     </span>13c:<span class=\"w\">   </span>c7<span class=\"w\"> </span><span class=\"m\">07</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\"> </span><span class=\"m\">00</span><span class=\"w\">       </span>movl<span class=\"w\">   </span><span class=\"nv\">$0</span>x1,<span class=\"o\">(</span>%rdi<span class=\"o\">)</span>\n<span class=\"w\">     </span><span class=\"m\">142</span>:<span class=\"w\">   </span><span class=\"m\">48</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>ec<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rbp,%rsp\n<span class=\"w\">     </span><span class=\"m\">145</span>:<span class=\"w\">   </span>5d<span class=\"w\">                      </span>pop<span class=\"w\">    </span>%rbp\n<span class=\"w\">     </span><span class=\"m\">146</span>:<span class=\"w\">   </span>c3<span class=\"w\">                      </span>retq\n<span class=\"w\">     </span><span class=\"m\">147</span>:<span class=\"w\">   </span><span class=\"m\">41</span><span class=\"w\"> </span>8d<span class=\"w\"> </span><span class=\"m\">50</span><span class=\"w\"> </span><span class=\"m\">01</span><span class=\"w\">             </span>lea<span class=\"w\">    </span>0x1<span class=\"o\">(</span>%r8<span class=\"o\">)</span>,%edx\n<span class=\"w\">     </span>14b:<span class=\"w\">   </span>4c<span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>c0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%r8,%rax\n<span class=\"w\">     </span>14e:<span class=\"w\">   </span><span class=\"m\">49</span><span class=\"w\"> </span><span class=\"m\">89</span><span class=\"w\"> </span>d0<span class=\"w\">                </span>mov<span class=\"w\">    </span>%rdx,%r8\n<span class=\"w\">     </span><span class=\"m\">151</span>:<span class=\"w\">   </span>e9<span class=\"w\"> </span>d3<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\"> </span>ff<span class=\"w\">          </span>jmpq<span class=\"w\">   </span><span class=\"m\">129</span><span class=\"w\"> </span>&lt;wasm<span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>::function<span class=\"o\">[</span><span class=\"m\">2</span><span class=\"o\">]</span>+0x9&gt;\n</code></pre></div>\n<blockquote>\n<p>In <code>perf</code> locally the <code>jmpq</code> and <code>jne</code> instructions are the hottest instructions. My suspicion is that this is CPU-specific for you (I can't reproduce the slowdown myself) where it's falling over some branch predictor heuristics.</p>\n</blockquote>\n<p>Hi, could I ask why the function alignment could affect the CPU branch prediction? Thanks!</p>\n</blockquote>",
        "id": 438751695,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715761882
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2112748477\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hi, could I ask why the function alignment could affect the CPU branch prediction? Thanks!</p>\n</blockquote>\n<p>I addressed this a few comments up:</p>\n<blockquote>\n<p>FWIW, the usual \"fetch bandwidth sin\" to avoid is forcing partial fetch lines -- the CPU frontend grabs an aligned 32B or 64B chunk at a time so if a function starts halfway through a fetch line, we're wasting frontend bandwidth. I suspect a 32B function alignment would be a pretty reasonable default in general -- is there a reason we only require 16B now? Did we find it mattered a lot for object file bloat or somesuch?</p>\n</blockquote>\n<p>The problem isn't actually with branch prediction, but with the way the instruction fetch works on most modern superscalar machines. (In more detail, fetches are big aligned chunks because it's fewer wires and transistors to grab only an aligned chunk from an icache line rather than any arbitrary alignment with arbitrary shifting.)</p>\n<p>Would you be willing to send a PR to update the alignment on x86-64? Someone else can do it if not, but hopefully it's an easy-ish change!</p>\n</blockquote>",
        "id": 438821065,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715784411
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2112783970\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>Would you be willing to send a PR to update the alignment on x86-64? Someone else can do it if not, but hopefully it's an easy-ish change!</p>\n</blockquote>\n<p>Hi, I am really willing to do it, but I am not familiar with <code>Rust</code> and code generation implementation, could you please give me some references or advices to help me start it?</p>\n</blockquote>",
        "id": 438824050,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715785200
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2112796113\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<p>I think it's just <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c477424f45871563be02eba14815ba3446158441/cranelift/codegen/src/isa/x64/inst/mod.rs#L2705-L2707\">this constant</a> that needs to be changed; probably with a comment update noting that we're aligning for better formance and a link to this issue?</p>\n</blockquote>",
        "id": 438824878,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715785380
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2112809326\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>The problem isn't actually with branch prediction, but with the way the instruction fetch works on most modern superscalar machines.</p>\n</blockquote>\n<p>The <code>func2</code> would be called many times, in my opinion, once the instructions of <code>func2</code> have been fetched into the icache, wouldn't it be necessary to fetch them again when calling <code>func2</code> again?</p>\n</blockquote>",
        "id": 438825645,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715785579
    },
    {
        "content": "<p>hungryzzz <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2112811270\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<p>I think it's just <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c477424f45871563be02eba14815ba3446158441/cranelift/codegen/src/isa/x64/inst/mod.rs#L2705-L2707\">this constant</a> that needs to be changed; probably with a comment update noting that we're aligning for better formance and a link to this issue?</p>\n</blockquote>\n<p>Thank you very much! I'll try it!</p>\n</blockquote>",
        "id": 438825814,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715785623
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573#issuecomment-2112827434\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>The problem isn't actually with branch prediction, but with the way the instruction fetch works on most modern superscalar machines.</p>\n</blockquote>\n<p>The <code>func2</code> would be called many times, in my opinion, once the instructions of <code>func2</code> have been fetched into the icache, wouldn't it be necessary to fetch them again when calling <code>func2</code> again?</p>\n</blockquote>\n<p>Fetch is part of the CPU pipeline, and happens every time an instruction executes: the instructions are fetched <em>from</em> the icache <em>into</em> the pipeline (and then decoded, renamed, scheduled, executed, ...). So fetch bottlenecks affect even inner-loop performance. The step that puts instructions into the icache on a miss is usually called \"cache fill\" and happens in a separate pipeline.</p>\n<p>(This is slightly less true on machines with uop caches and/or loop stream buffers, but those have their own limitations as well)</p>\n</blockquote>",
        "id": 438827526,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1715786042
    },
    {
        "content": "<p>hungryzzz closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8573\">issue #8573</a>:</p>\n<blockquote>\n<h3>Test Cases</h3>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/files/15237560/cases.zip\">cases.zip</a></p>\n<h3>Steps to Reproduce</h3>\n<p>Hi, I run the attached two cases(<code>good.wasm</code>&amp;<code>bad.wasm</code>) in <code>Wasmtime</code>, <code>WasmEdge(AOT)</code> and <code>Wamr(AOT)</code>, and collect their execution time respectively (measured by <code>time</code> tool).</p>\n<h3>Expected Results &amp; Actual Results</h3>\n<p>For <code>good.wasm</code>, the execution time in different runtimes are as follows:</p>\n<ul>\n<li><code>Wasmtime</code>: 4.67s</li>\n<li><code>WasmEdge</code>: 2.81s</li>\n<li><code>Wamr</code>: 3.29s</li>\n</ul>\n<p>For <code>bad.wasm</code>, the execution time in different runtimes are as follows:</p>\n<ul>\n<li><code>Wasmtime</code>: 9.34s</li>\n<li><code>WasmEdge</code>: 2.35s</li>\n<li><code>Wamr</code>: 3.29s</li>\n</ul>\n<p>The difference between the attached two cases is as follow, i.e., changing the address of <code>i32.load</code> from <code>local.get 0</code> to <code>i32.const 0</code>, the case with <code>i32.const 0</code> has the bad performance in <code>Wasmtime</code>, whose execution time is 2x slower than the former one. I think the decreasing is confused and suspicious, why is an immediate operation slower than a local variable operation? Moreover, the <code>i32.load</code> is out of the loop, I cannot understand why the operation could affect the overall performance so vastly.</p>\n<p>![截屏2024-05-07 23 19 36](<a href=\"https://github.com/bytecodealliance/wasmtime/assets/32137313/be606e8b-7da9-4f99-9697-e23b3b53e376\">https://github.com/bytecodealliance/wasmtime/assets/32137313/be606e8b-7da9-4f99-9697-e23b3b53e376</a>)</p>\n<h3>Versions and Environment</h3>\n<p>Wasmtime version or commit: d0cf46a098d97bab9c4cf54a2f3aeaddea7d3831</p>\n<p>Operating system: Linux ringzzz-OptiPlex-7070 5.15.0-97-generic</p>\n<p>Architecture: Intel(R) Core(TM) i5-9500T CPU @ 2.20GHz</p>\n</blockquote>",
        "id": 453629405,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1721809829
    }
]