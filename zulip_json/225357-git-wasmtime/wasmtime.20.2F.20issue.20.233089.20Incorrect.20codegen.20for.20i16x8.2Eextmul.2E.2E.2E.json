[
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>I was writing some tests for Rust's simd support recently and I think that the codegen for one of the recently added extmul instructions may be incorrect:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $inputs (result v128 v128)\n      v128.const i8x16 -1 -2 3 100 124 -38 33 87 92 108 22 8 -43 -128 22 0\n      v128.const i8x16 -5 -2 6 10 45 -4 4 -2 0 88 92 -102 -98 83 73 54)\n\n  (func (export \"low\") (result v128)\n      call $inputs\n      i16x8.extmul_low_i8x16_s)\n  (func (export \"high\") (result v128)\n      call $inputs\n      i16x8.extmul_high_i8x16_s)\n)\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like these two instructions are producing the same result, but I don't think they should be the same?</p>\n<p>cc @jlb6740 @abrown </p>\n</blockquote>",
        "id": 246113077,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626363803
    },
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>I was writing some tests for Rust's simd support recently and I think that the codegen for one of the recently added extmul instructions may be incorrect:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $inputs (result v128 v128)\n      v128.const i8x16 -1 -2 3 100 124 -38 33 87 92 108 22 8 -43 -128 22 0\n      v128.const i8x16 -5 -2 6 10 45 -4 4 -2 0 88 92 -102 -98 83 73 54)\n\n  (func (export \"low\") (result v128)\n      call $inputs\n      i16x8.extmul_low_i8x16_s)\n  (func (export \"high\") (result v128)\n      call $inputs\n      i16x8.extmul_high_i8x16_s)\n)\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like these two instructions are producing the same result, but I don't think they should be the same?</p>\n<p>cc @jlb6740 @abrown </p>\n</blockquote>",
        "id": 246113078,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626363803
    },
    {
        "content": "<p>alexcrichton labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>I was writing some tests for Rust's simd support recently and I think that the codegen for one of the recently added extmul instructions may be incorrect:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $inputs (result v128 v128)\n      v128.const i8x16 -1 -2 3 100 124 -38 33 87 92 108 22 8 -43 -128 22 0\n      v128.const i8x16 -5 -2 6 10 45 -4 4 -2 0 88 92 -102 -98 83 73 54)\n\n  (func (export \"low\") (result v128)\n      call $inputs\n      i16x8.extmul_low_i8x16_s)\n  (func (export \"high\") (result v128)\n      call $inputs\n      i16x8.extmul_high_i8x16_s)\n)\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like these two instructions are producing the same result, but I don't think they should be the same?</p>\n<p>cc @jlb6740 @abrown </p>\n</blockquote>",
        "id": 246113080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626363803
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880857195\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Hm, just checked that the SIMD spec tests are enabled and it looks like they are. If @jlb6740 can confirm this is indeed a bug in #3084 then we need to fix the spec tests as well.</p>\n</blockquote>",
        "id": 246122666,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626367749
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880857195\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Hm, just checked that the SIMD spec tests for these instructions are enabled and it looks like they are. If @jlb6740 can confirm this is indeed a bug in #3084 then we need to fix the spec tests as well.</p>\n</blockquote>",
        "id": 246122701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626367764
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880861061\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>When I looked at the <a href=\"https://github.com/WebAssembly/testsuite/blob/9994915e0cca8b42a16c577e4c85491822367dde/proposals/simd/simd_i16x8_extmul_i8x16.wast\">spec tests</a> it looks like they never exercised the upper/lower halves actually being different. It appeared that if an engine implemented the these two instructions in the same way it'd pass the spec tests (not that wasmtime does this, and agreed that the spec tests should improve to catch this)</p>\n</blockquote>",
        "id": 246123509,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626368103
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880861576\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Yes .. I think a lot of spec tests are inadequate. For this one I modified parts of my implementation to do an incorrect lowering and it would still pass. Didn't want to not push it do to limited spec tests since it's not the only one. </p>\n</blockquote>",
        "id": 246123613,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626368151
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880861576\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Yes .. I think a lot of spec tests are inadequate. For this one I modified parts of my implementation to do an incorrect lowering and it would still pass. Didn't want to not push it though due to limited spec tests since it's not the only one. </p>\n</blockquote>",
        "id": 246123713,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626368179
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880862634\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>I'll try to fix .. If I can't in the next 30 min I'll revert since I won't have much other time before this evening. </p>\n</blockquote>",
        "id": 246123857,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626368256
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880869608\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Oh I don't think there's any need to revert, I just wanted to report this to have it on file!</p>\n</blockquote>",
        "id": 246125342,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626368927
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880875582\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>@alexcrichton Yes ... thanks Alex. I guess it isn't that serious but it may be a second before I get the fix. @abrown is right, I noticed the spec tests were inadequate but that didn't mean the lowering wasn't sound. Need simd fuzz testing. Also, I had trouble printing out the sequence  .. passing  --set has_ssse3=true --set has_sse41=true was an issue for the command:</p>\n<p>\"RUST_LOG=DEBUG cargo run  -- wasm --target x86_64  --set has_ssse3=true --set has_sse41=true -dDpv vcode_x64_examples.wat.bak\". </p>\n<p>Related .. do you know how to pass more than one architecture to cranelift. </p>\n</blockquote>",
        "id": 246126672,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626369476
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880882463\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>@alexcrichton Nevermind. Just got the command with @abrown. This is good:</p>\n<p>cargo run -p cranelift-tools -- wasm --set=\"enable_simd=true\" --target x86_64 -dDv scratch.wat</p>\n<p>has_* is needed no more.</p>\n</blockquote>",
        "id": 246128324,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626370162
    },
    {
        "content": "<p>akirilov-arm <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-880926004\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>@sparker-arm, you should check this test case before merging #3070.</p>\n</blockquote>",
        "id": 246137308,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626374283
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-881017151\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>In testing I think that this is also an issue for the unsigned variant -- <code>i16x8.extmul_high_i8x16_u</code>, but not for any other widths of extmul instructions.</p>\n</blockquote>",
        "id": 246157313,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626383585
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-881927419\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Hi all @alexcrichton @sparker-arm @abrown. I saw this error during my refactoring of the the extmul patch which may have introduced an incorrect lowering for i16x8.extmul_high_i8x16_u:</p>\n<blockquote>\n<p>Downloaded fst v0.4.6<br>\nerror: failed to download from <code>https://crates.io/api/v1/crates/crossbeam-utils/0.8.5/download</code></p>\n<p>Caused by:<br>\n  [55] Failed sending data to the peer (Connection died, tried 5 times before giving up)<br>\nError: Process completed with exit code 101.</p>\n</blockquote>\n<p>And based on the error assumed it was unrelated to the patch. Is it possible that the failed sending is related to this patch that has an incorrect lowering? If so then perhaps I can just submit a patch to ignore this test path? Also, </p>\n<p><code>cargo run -p cranelift-tools -- wasm --set=\"enable_simd=true\" --target x86_64 -dDv scratch.wat</code></p>\n<p>Did not work for allowing multiple ISA requirements (such as both sse41 and ssse3). Is there a way to specify this on the command line? <br>\n</p>\n</blockquote>",
        "id": 246333761,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626541277
    },
    {
        "content": "<p>jlb6740 edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-881927419\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Hi all @alexcrichton @sparker-arm @abrown. I saw this error during my refactoring of the the extmul patch which may have introduced an incorrect lowering for i16x8.extmul_high_i8x16_u:</p>\n<blockquote>\n<p>Downloaded fst v0.4.6<br>\nerror: failed to download from <code>https://crates.io/api/v1/crates/crossbeam-utils/0.8.5/download</code></p>\n<p>Caused by:<br>\n  [55] Failed sending data to the peer (Connection died, tried 5 times before giving up)<br>\nError: Process completed with exit code 101.</p>\n</blockquote>\n<p>And based on the error assumed it was unrelated to the patch. Is it possible that the failed sending is related to this patch that has an incorrect lowering? If so then perhaps I can just submit a patch to ignore this test path or at least market it as should panic on x64? Also, </p>\n<p><code>cargo run -p cranelift-tools -- wasm --set=\"enable_simd=true\" --target x86_64 -dDv scratch.wat</code></p>\n<p>Did not work for allowing multiple ISA requirements (such as both sse41 and ssse3). Is there a way to specify this on the command line? <br>\n</p>\n</blockquote>",
        "id": 246333856,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626541394
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-881930035\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Nah the send error is a Cargo bug that should be fixed on nightly soon, as for ISA requirements I'm not sure myself, I don't know much about the cranelift tools :(</p>\n</blockquote>",
        "id": 246334489,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626542364
    },
    {
        "content": "<p>jlb6740 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-882135843\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>Also submitted a pr here: <a href=\"https://github.com/WebAssembly/testsuite/pull/41\">https://github.com/WebAssembly/testsuite/pull/41</a> for an update of the spec tests.</p>\n</blockquote>",
        "id": 246405245,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1626652303
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089#issuecomment-917513744\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>I think this has since been fixed.</p>\n</blockquote>",
        "id": 252946476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631407431
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3089\">issue #3089</a>:</p>\n<blockquote>\n<p>I was writing some tests for Rust's simd support recently and I think that the codegen for one of the recently added extmul instructions may be incorrect:</p>\n<div class=\"codehilite\" data-code-language=\"wasm\"><pre><span></span><code>(module\n  (func $inputs (result v128 v128)\n      v128.const i8x16 -1 -2 3 100 124 -38 33 87 92 108 22 8 -43 -128 22 0\n      v128.const i8x16 -5 -2 6 10 45 -4 4 -2 0 88 92 -102 -98 83 73 54)\n\n  (func (export \"low\") (result v128)\n      call $inputs\n      i16x8.extmul_low_i8x16_s)\n  (func (export \"high\") (result v128)\n      call $inputs\n      i16x8.extmul_high_i8x16_s)\n)\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"></span>\n<span class=\"n\">warning</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">values</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"></span>\n<span class=\"mi\">339378917725854714996597693406159044613</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It looks like these two instructions are producing the same result, but I don't think they should be the same?</p>\n<p>cc @jlb6740 @abrown </p>\n</blockquote>",
        "id": 252946477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1631407431
    }
]