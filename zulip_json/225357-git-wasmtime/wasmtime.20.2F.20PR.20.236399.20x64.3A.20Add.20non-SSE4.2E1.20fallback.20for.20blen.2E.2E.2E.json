[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a> from <code>alexcrichton:x64-sse2-blend</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit avoids the usage of blend-related instructions when the SSE4.1 feature is not available. This means that <code>bitselect</code> uses the less optimal lowering and additionally the <code>x86_blendv</code> instruction is disabled for relaxed simd lowerings based on whether SSE4.1 is available or not (falling back to the deterministic lowering which is supported if it's not available).</p>\n<p>Additionally the <code>iabs</code> implementation for i64x2 was updated to have a non-blend-based lowering, modeled after LLVM.</p>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 359041074,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684344533
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a>.</p>",
        "id": 359041098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684344539
    },
    {
        "content": "<p><strong>alexcrichton</strong> has marked <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a> as ready for review.</p>",
        "id": 359041113,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684344542
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a>.</p>",
        "id": 359041117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684344543
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/jameysharp\">jameysharp</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a>.</p>",
        "id": 359041121,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684344543
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a>.</p>",
        "id": 359041122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684344543
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a>.</p>",
        "id": 359501791,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684445647
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399#pullrequestreview-1437835432\">PR review</a>:</p>\n<blockquote>\n<p>LGTM; not really sure what to do about my comment about <code>x86_blendv</code> so I'll leave it up to you.</p>\n</blockquote>",
        "id": 360391697,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684796627
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399#pullrequestreview-1437835432\">PR review</a>:</p>\n<blockquote>\n<p>LGTM; not really sure what to do about my comment about <code>x86_blendv</code> so I'll leave it up to you.</p>\n</blockquote>",
        "id": 360391698,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684796627
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399#discussion_r1201270428\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not sure about this: it seems like we are propagating to more places the x86-specificness of all of this, but maybe I'm missing why this refactoring is needed. </p>\n</blockquote>",
        "id": 360391699,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684796627
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399#discussion_r1202339603\">PR review comment</a>:</p>\n<blockquote>\n<p>The purpose here was to conditionally use the cranelift <code>x86_blendv</code> instruction based on what the backend implements. If SSE4.1 is disabled then <code>x86_blendv</code> shouldn't be used because it's not available and the fallback <code>bitselect</code> implementation is more appropriate I think. Given that need I figured some extra accessors were necessary to plumb this around to allow backends themselves to report whether they implement this instruction or not, although this is only ever going to return true for the x64 backend.</p>\n<p>I could perhaps change this to something else like <code>environ.use_x86_for_relaxed_simd(RelaxedSimd::LaneSelect, ty)</code> or something like that, though. There's a few more instructions coming down the pike for SSSE3 which are gated like this where new methods are added to test whether the instruction is available.</p>\n<p>As for plumbing around the x86-specific-ness, that's sort of inherent in the relaxed-simd proposal where the semantics are either x86 or the standard simd semantics. I've for now chosen to implement both for Wasmtime to have speedier implementations on x86 (while still preserving determinism in some cases), which is also the reason for leaking x86-specific-ness. </p>\n</blockquote>",
        "id": 360532855,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1684848681
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399#discussion_r1206913911\">PR review comment</a>:</p>\n<blockquote>\n<p>Just to second @alexcrichton 's points above and add context: I think something like this is close to the best we can do; maybe the refactor above is a good idea, I don't have strong opinions on it in particular. When we talked about how to integrate the initial relaxed-SIMD implementation there was a tension between the determinism of CLIF, where every opcode has a strict machine-independent spec of its bitwise output, and the core idea of relaxed-SIMD, which is that some Wasm ops... don't have that. We figured it was best to push the \"semantic switch\" upward to the translator, above CLIF: so CLIF has different opcodes that encapsulate different kinds of e.g. SIMD blends, every opcode has bit-exact semantics, but x86 may implement only those it has hardware for and machine X implements others and the translator uses only opcodes that are available on the target. (This is like \"old Cranelift\" with machine-specific opcodes to some degree, the difference being how we think about it -- the opcode is \"x86-like semantics\" vs. \"specifically for x86\"). It's not perfect but it seems better than e.g. having a config option that controls what the semantics of opcodes are, or leaving it underspecified.</p>\n</blockquote>",
        "id": 361354177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685113048
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6399\">PR #6399</a>.</p>",
        "id": 361368793,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1685116051
    }
]