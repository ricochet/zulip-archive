[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196\">PR #3196</a> from <code>move-module-trans</code> to <code>main</code>:</p>\n<blockquote>\n<p>This commit deletes the <code>ModuleEnvironment</code> trait and <code>translate_module</code><br>\nfunctions in the <code>cranelift-wasm</code> crate, inlining the implementation<br>\ninto the <code>wasmtime-environ</code> crate. This also removes the <code>wasm</code> mode of<br>\nthe <code>clif-util</code> tool.</p>\n<p>The main purpose for doing this is that this is a large piece of<br>\nfunctionality used by Wasmtime which is entirely independent of<br>\nCranelift. Eventually Wasmtime wants to be able to compile without<br>\nCranelift, but it can't also depend on <code>cranelift-wasm</code> in that<br>\nsituation for module translation which means that something needs to<br>\nhappen. One option is to refactor what's in <code>cranelift-wasm</code> into a<br>\nseparate crate (since all these pieces don't actually depend on<br>\n<code>cranelift-codegen</code>), but I personally chose to not do this because:</p>\n<ul>\n<li>\n<p>The <code>ModuleEnvironment</code> trait, AFAIK, only has a primary user of<br>\n  Wasmtime. The Spidermonkey integration, for example, does not use this.</p>\n</li>\n<li>\n<p>This is an extra layer of abstraction between Wasmtime and the<br>\n  compilation phase which was a bit of a pain to maintain. It couldn't<br>\n  be Wasmtime-specific as it was part of Cranelift but at the same time<br>\n  it had lots of Wasmtime-centric functionality (such as module<br>\n  linking).</p>\n</li>\n<li>\n<p>Updating the \"dummy\" implementation has become pretty onerous over<br>\n  time as frequent additions are made and the \"dummy\" implementation was<br>\n  never actually used anywhere. This ended up feeling like effectively<br>\n  busy-work to update this.</p>\n</li>\n</ul>\n<p>For these reasons I've opted to delete the \"dummy\" implementation and<br>\nentirely remove module translation from <code>cranelift-wasm</code>. Afterwards the<br>\nonly functionality remaining in <code>cranelift-wasm</code> is function translation<br>\n(which is quite important, and won't be moving!). This means that users<br>\nof <code>cranelift-wasm</code> will need to reimplement module translation<br>\nthemselves, if there are any.</p>\n<p>The changes in <code>wasmtime-environ</code> are largely to inline module parsing<br>\ntogether so it's a bit easier to follow instead of trying to connect<br>\nthe dots between lots of various function calls.</p>\n<p>Note, though, I did put in the work to keep the <code>cranelift-wasm</code> tests<br>\npassing. They effectively implement a \"bare bones\" module translator<br>\nwhich can serve to test the functionality of <code>cranelift-wasm</code> that<br>\nWasmtime itself does not exercise.</p>\n<p>&lt;!--</p>\n<p>Please ensure that the following steps are all taken care of before submitting<br>\nthe PR.</p>\n<ul>\n<li>\n<p>[ ] This has been discussed in issue #..., or if not, please tell us why<br>\n  here.</p>\n</li>\n<li>\n<p>[ ] A short description of what this does, why it is needed; if the<br>\n  description becomes long, the matter should probably be discussed in an issue<br>\n  first.</p>\n</li>\n<li>\n<p>[ ] This PR contains test cases, if meaningful.</p>\n</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so. The list of<br>\n  suggested reviewers on the right can help you.</li>\n</ul>\n<p>Please ensure all communication adheres to the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/CODE_OF_CONDUCT.md\">code of\nconduct</a>.<br>\n--&gt;<br>\n</p>\n</blockquote>",
        "id": 249754575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629222950
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196\">PR #3196</a>.</p>",
        "id": 249754591,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629222961
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#discussion_r690601674\">PR review comment</a>:</p>\n<blockquote>\n<p>This will make it much harder to use souper_harvest for wasm modules.</p>\n</blockquote>",
        "id": 249755249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629223232
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#pullrequestreview-732070251\">PR review</a>.</p>",
        "id": 249755250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629223232
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#pullrequestreview-732070666\">PR review</a>.</p>",
        "id": 249755306,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629223259
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#discussion_r690601972\">PR review comment</a>:</p>\n<blockquote>\n<p>Does wasmtime have similar functionality builtin?</p>\n</blockquote>",
        "id": 249755307,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629223259
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#pullrequestreview-732226498\">PR review</a>.</p>",
        "id": 249778899,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629234418
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#discussion_r690723395\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, ideally we would still be able to harvest LHSes from Wasm modules here. Or we would move the Wasm harvester into the <code>wasmtime</code> CLI and leave this as a CLIF-only harvestor.</p>\n</blockquote>",
        "id": 249778900,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629234418
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#discussion_r690734066\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW @fitzgen I'll leave this in since I'll back out the changes to <code>wasmtime-cranelift</code>, but I think if we want to harvest things from wasm that Wasmtime uses then this is the wrong level of abstraction becaue it's missing all of Wasmtime's configuration of Cranelift as well as Wasmtime-specific implementation details of runtime things like tables/references/etc. </p>\n<p>I'll admit I don't know why this command exists, I've never actually seen anyone use it. It also seems to rely somewhat heavily on the <code>Dummy*</code> traits in <code>cranelift-wasm</code> which are barely maintained at best and shouldn't be a great source of \"we're getting real data from these\"</p>\n</blockquote>",
        "id": 249780993,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235490
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#pullrequestreview-732239703\">PR review</a>.</p>",
        "id": 249780994,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235490
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196\">PR #3196</a> from <code>move-module-trans</code> to <code>main</code>.</p>",
        "id": 249781370,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235684
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196\">PR #3196</a> from <code>move-module-trans</code> to <code>main</code>.</p>",
        "id": 249781444,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235734
    },
    {
        "content": "<p>alexcrichton edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196\">PR #3196</a> from <code>move-module-trans</code> to <code>main</code>:</p>\n<blockquote>\n<p>The main purpose for doing this is that this is a large piece of<br>\nfunctionality used by Wasmtime which is entirely independent of<br>\nCranelift. Eventually Wasmtime wants to be able to compile without<br>\nCranelift, but it can't also depend on <code>cranelift-wasm</code> in that<br>\nsituation for module translation which means that something needs to<br>\nhappen. One option is to refactor what's in <code>cranelift-wasm</code> into a<br>\nseparate crate (since all these pieces don't actually depend on<br>\n<code>cranelift-codegen</code>), but I personally chose to not do this because:</p>\n<ul>\n<li>\n<p>The <code>ModuleEnvironment</code> trait, AFAIK, only has a primary user of<br>\n  Wasmtime. The Spidermonkey integration, for example, does not use this.</p>\n</li>\n<li>\n<p>This is an extra layer of abstraction between Wasmtime and the<br>\n  compilation phase which was a bit of a pain to maintain. It couldn't<br>\n  be Wasmtime-specific as it was part of Cranelift but at the same time<br>\n  it had lots of Wasmtime-centric functionality (such as module<br>\n  linking).</p>\n</li>\n<li>\n<p>Updating the \"dummy\" implementation has become pretty onerous over<br>\n  time as frequent additions are made and the \"dummy\" implementation was<br>\n  never actually used anywhere. This ended up feeling like effectively<br>\n  busy-work to update this.</p>\n</li>\n</ul>\n<p>For these reasons I've opted to to move the meat of <code>cranelift-wasm</code><br>\nused by <code>wasmtime-environ</code> directly into <code>wasmtime-environ</code>. This means<br>\nthat the only real meat that Wasmtime uses from <code>cranelift-wasm</code> is the<br>\nfunction-translation bits in the <code>wasmtime-cranelift</code> crate.</p>\n<p>The changes in <code>wasmtime-environ</code> are largely to inline module parsing<br>\ntogether so it's a bit easier to follow instead of trying to connect<br>\nthe dots between lots of various function calls.</p>\n</blockquote>",
        "id": 249781477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629235751
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#pullrequestreview-732250582\">PR review</a>.</p>",
        "id": 249782693,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629236456
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#discussion_r690742907\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, is has known issues around using a different environment than Wasmtime. That said, most of the interesting stuff from a superoptimizer's point of view are the expressions, which don't typically change much depending on the environment, not the I/O and state integration code that do change a bunch depending on the environment.</p>\n</blockquote>",
        "id": 249782694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629236456
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196#pullrequestreview-733154128\">PR review</a>.</p>",
        "id": 249881668,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629306793
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3196\">PR #3196</a>.</p>",
        "id": 249881960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1629306903
    }
]