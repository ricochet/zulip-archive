[
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111718899\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @cfallin, @fitzgen</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\", \"cranelift:area:aarch64\", \"cranelift:area:machinst\", \"cranelift:area:x64\", \"isle\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>cfallin: isle</li>\n<li>fitzgen: isle</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 280442673,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651118528
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111752524\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<p>focusing more on the spidermonkey hot bit that you described, the mov/add with 32-bit wrapping behavior would be faithfully implemented by <code>lead $3(%rsi), %edx</code>, i think that saves both the instruction and ~3 bytes if you can get the <code>lea</code> as <code>8d 72 03</code>..</p>\n</blockquote>",
        "id": 280445716,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651122695
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111771140\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<p>Funny you say that @iximeow, I was just playing with LEA! A quick hack to use it for every add, and pattern-match adds of the form x+y+const, surprisingly is showing no performance difference (fewer Âµops maybe offset by the need to hit a more contended execution unit for addr-gen?).</p>\n<p>The hottest block in SM</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mh\">0xC06B527</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B52A</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B52C</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B52F</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B532</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B538</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dl</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B53D</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B540</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B543</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B546</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B54A</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B550</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12b</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B555</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B558</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B55C</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B562</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dl</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B567</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B56A</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r15d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B56E</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B571</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r15d</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B574</span>:  <span class=\"nc\">cmpl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B577</span>:  <span class=\"nc\">ja</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"mh\">0xC06B527</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in an all-LEA world becomes</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mh\">0xC06D064</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D06A</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D06F</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D075</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12b</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D07A</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D07F</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D084</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r14</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r14</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D08A</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14b</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D08F</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D094</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D098</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D09E</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dil</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0A3</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0A7</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0AC</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0B2</span>:  <span class=\"nc\">cmpl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0B6</span>:  <span class=\"nc\">jbe</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"mh\">0xC06D0C7</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which as at least more _aesthetically pleasing_, if nothing else (and the register allocator is going to be happier with fewer constraints from the non-destructive sources!), but... I'll keep playing.</p>\n<p>(Incidentally, since you're an encoding guru: the 32-bit form of LEA needs the 0x67 addr-size override prefix in long mode; is that much of a penalty from a performance perspective?)</p>\n</blockquote>",
        "id": 280447239,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651124617
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111771140\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<p>Funny you say that @iximeow, I was just playing with LEA! A quick hack to use it for every add, and pattern-match adds of the form x+y+const, surprisingly is showing no performance difference (fewer Âµops maybe offset by the need to hit a more contended execution unit for addr-gen?).</p>\n<p>The hottest block in SM</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mh\">0xC06B527</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B52A</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B52C</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B52F</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B532</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B538</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dl</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B53D</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B540</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B543</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B546</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B54A</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B550</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12b</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B555</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B558</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B55C</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B562</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dl</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B567</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">esi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B56A</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r15d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B56E</span>:  <span class=\"nc\">movq</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B571</span>:  <span class=\"nc\">addl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r15d</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B574</span>:  <span class=\"nc\">cmpl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06B577</span>:  <span class=\"nc\">ja</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"mh\">0xC06B527</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in an all-LEA world becomes</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mh\">0xC06D064</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D06A</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D06F</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D075</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12b</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D07A</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r12d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D07F</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D084</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r14</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">r14</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D08A</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r14b</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r12</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D08F</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D094</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D098</span>:  <span class=\"nc\">movzbq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D09E</span>:  <span class=\"nc\">movb</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dil</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r13</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r11</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0A3</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">edi</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0A7</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r11d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0AC</span>:  <span class=\"nc\">leal</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0B2</span>:  <span class=\"nc\">cmpl</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9d</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mh\">0xC06D0B6</span>:  <span class=\"nc\">jbe</span><span class=\"o\">-</span><span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"mh\">0xC06D0C7</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which is at least more _aesthetically pleasing_, if nothing else (and the register allocator is going to be happier with fewer constraints from the non-destructive sources!), but... I'll keep playing.</p>\n<p>(Incidentally, since you're an encoding guru: the 32-bit form of LEA needs the 0x67 addr-size override prefix in long mode; is that much of a penalty from a performance perspective?)</p>\n</blockquote>",
        "id": 280447300,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651124667
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111778973\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<p>Interesting tidbit: comparing before/after running SpiderMonkey with the LEA change, I see about a 3% reduction in instruction count, but about the same reduction in IPC. I <em>suspect</em> that move elision at the renamer may be making the increased moves of the two-operand traditional <code>add</code> world not matter much. Also, spidermonkey.cwasm in LEA-world is... 0.03% smaller. Weird, I would have expected more...</p>\n</blockquote>",
        "id": 280448141,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651125557
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111781713\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<p>ah! yeah i think contending for address generation would be a real issue there? on the most recent intel parts it should be less of an issue, but i think generally the add-to-lea translation is probably preferable if it lets you collapse an add or two plus a mov, rather than as a default.</p>\n<p>and 0x67, as far as i understand, is \"never use if at all possible\" territory. but for implementing a wrapping 32-bit add with LEA, do you need that? you can use 64-bit input registers and rely on truncation of the destination to get the right value.</p>\n</blockquote>",
        "id": 280448572,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651125844
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080#issuecomment-1111792559\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4080\">issue #4080</a>:</p>\n<blockquote>\n<blockquote>\n<p>ah! yeah i think contending for address generation would be a real issue there? on the most recent intel parts it should be less of an issue, but i think generally the add-to-lea translation is probably preferable if it lets you collapse an add or two plus a mov, rather than as a default.</p>\n</blockquote>\n<p>Yeah, I'll play with some more specific pattern-matching here :-) It's tricky in general to switch fluidly between them because we represent adds in an SSA 3-reg form with a register constraint (reuse src1 for dest) and the regalloc inserts the move, rather than the lowering pattern; so we'd need a way to tell ra2 that \"if you whack this instruction in the right way, it transmutes into a slower form but without a constraint\". Then work out when to pull that lever vs split a liverange. I'm really really curious how LLVM solves this now (it'll turn a <code>return arg0 + arg1</code> function into a single <code>lea rax, [rdi+rsi]</code> but use <code>add</code> otherwise so there has to be some regalloc integration somehow!).</p>\n<blockquote>\n<p>and 0x67, as far as i understand, is \"never use if at all possible\" territory. but for implementing a wrapping 32-bit add with LEA, do you need that? you can use 64-bit input registers and rely on truncation of the destination to get the right value.</p>\n</blockquote>\n<p>You're right, I was misled by nasm here... writing <code>lea eax, [ebx+ecx]</code> in long mode gets a 0x67 prefix but <code>lea eax, [rbx+rcx]</code> does the exact same thing. D'oh.</p>\n</blockquote>",
        "id": 280450031,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1651126876
    }
]