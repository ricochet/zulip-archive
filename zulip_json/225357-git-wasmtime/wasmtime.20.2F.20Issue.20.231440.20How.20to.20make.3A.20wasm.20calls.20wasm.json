[
    {
        "content": "<p>aleksmelnikov opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>Hi,<br>\nplease advise me how to make:</p>\n<ol>\n<li>I created a simple library crate:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>$cat a/src/lib.rs\n\n#[no_mangle]\npub extern &quot;C&quot; fn funca() {\n   println!(&quot;funca&quot;);\n}\n\n#[no_mangle]\npub extern &quot;C&quot; fn _start() {\n}\n</pre></div>\n\n\n<p>And compiled it:<br>\n<code>cargo build --manifest-path=a/Cargo.toml --target=wasm32-wasi</code></p>\n<p>I can invoke <code>funca</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$wasmtime run --invoke funca a/target/wasm32-wasi/debug/a.wasm\nfunca\n</pre></div>\n\n\n<ol start=\"2\">\n<li>I created a simple binary crate:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>$cat d/src/main.rs\n\nuse anyhow::Result;\nuse wasmtime::*;\nuse wasmtime_wasi::{Wasi, WasiCtx};\n\nfn main() -&gt; Result&lt;()&gt; {\n    let store = Store::default();\n    let module = Module::from_file(&amp;store, &quot;/at/rust/wasmer/a/target/wasm32-wasi/debug/a.wasm&quot;)?;\n    let wasi = Wasi::new(&amp;store, WasiCtx::new(std::env::args())?);\n    let mut imports = Vec::new();\n    for import in module.imports() {\n        if import.module() == &quot;wasi_snapshot_preview1&quot; {\n            if let Some(export) = wasi.get_export(import.name()) {\n                imports.push(Extern::from(export.clone()));\n                continue;\n            }\n        }\n        panic!(\n            &quot;couldn&#39;t find import for `{}::{}`&quot;,\n            import.module(),\n            import.name()\n        );\n    }\n\n    let instance = Instance::new(&amp;module, &amp;imports)?;\n\n    // 1\n/*\n    let start = instance\n        .get_export(&quot;_start&quot;)\n        .and_then(|e| e.func())\n        .unwrap();\n    let start = start.get0::&lt;()&gt;()?;\n    start()?;\n*/\n    // 2\n    let funca = instance\n        .get_export(&quot;funca&quot;)\n        .expect(&quot;export named `answer` not found&quot;)\n        .func()\n        .expect(&quot;export `answer` was not a function&quot;);\n    let funca = funca.get0::&lt;()&gt;()?;\n    funca()?;\n\n    Ok(())\n}\n</pre></div>\n\n\n<p>And compiled it:<br>\n<code>cargo build --manifest-path=d/Cargo.toml</code></p>\n<p>I ran it and got:</p>\n<div class=\"codehilite\"><pre><span></span>$cargo run --manifest-path=d/Cargo.toml\nfunca\n</pre></div>\n\n\n<p>Good! Now I want change d from binary crate to library crate. So, I want wasm lib calls wasm lib.<br>\nThe first, I tried to compile my bin crate with <code>--target=wasm32-wasi</code> to get <code>wasm</code> and failed:</p>\n<div class=\"codehilite\"><pre><span></span>$cargo +nightly build --manifest-path=d/Cargo.toml --target=wasm32-wasi\n\n   Compiling wat v1.0.13\n   Compiling jobserver v0.1.21\n   Compiling generic-array v0.12.3\n   Compiling region v2.1.2\n   Compiling gimli v0.20.0\nerror[E0425]: cannot find function `lock` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/lock.rs:30:7\n   |\n30 |   os::lock(\n   |       ^^^^ not found in `os`\n   |\nhelp: possible candidate is found in another module, you can import it into scope\n   |\n1  | use lock::lock;\n   |\n\nerror[E0425]: cannot find function `unlock` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/lock.rs:58:7\n   |\n58 |   os::unlock(\n   |       ^^^^^^ not found in `os`\n   |\nhelp: possible candidate is found in another module, you can import it into scope\n   |\n1  | use lock::unlock;\n   |\n\nerror[E0425]: cannot find function `page_size` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/page.rs:16:39\n   |\n16 |     INIT.call_once(|| PAGE_SIZE = os::page_size());\n   |                                       ^^^^^^^^^ not found in `os`\n\nerror[E0425]: cannot find function `set_protection` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/protect.rs:40:7\n   |\n40 |   os::set_protection(\n   |       ^^^^^^^^^^^^^^ not found in `os`\n\nerror[E0425]: cannot find function `get_region` in module `os`\n   --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/lib.rs:133:7\n    |\n133 |   os::get_region(page::floor(address as usize) as *const u8)\n    |       ^^^^^^^^^^ not found in `os`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\nerror: could not compile `region`.\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</pre></div>\n\n\n<p>So, I think doesn't <code>region</code> support <code>--target=wasm32-wasi</code>? How to create wasm calls wasm?</p>\n</blockquote>",
        "id": 192358816,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585643557
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606561136\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606561136\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>You can't compile <code>wasmtime</code> for wasm, as wasm doesn't allow any JIT compilation. What do you want to actually do?</p>\n</blockquote>",
        "id": 192374392,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585653118
    },
    {
        "content": "<p>aleksmelnikov <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606657764\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606657764\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>@bjorn3 , ok. Thank you for the notes about <code>wasmtime</code>. I see my mistake.</p>\n</blockquote>",
        "id": 192395766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585664374
    },
    {
        "content": "<p>aleksmelnikov closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>Hi,<br>\nplease advise me how to make:</p>\n<ol>\n<li>I created a simple library crate:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>$cat a/src/lib.rs\n\n#[no_mangle]\npub extern &quot;C&quot; fn funca() {\n   println!(&quot;funca&quot;);\n}\n\n#[no_mangle]\npub extern &quot;C&quot; fn _start() {\n}\n</pre></div>\n\n\n<p>And compiled it:<br>\n<code>cargo build --manifest-path=a/Cargo.toml --target=wasm32-wasi</code></p>\n<p>I can invoke <code>funca</code>:</p>\n<div class=\"codehilite\"><pre><span></span>$wasmtime run --invoke funca a/target/wasm32-wasi/debug/a.wasm\nfunca\n</pre></div>\n\n\n<ol start=\"2\">\n<li>I created a simple binary crate:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span>$cat d/src/main.rs\n\nuse anyhow::Result;\nuse wasmtime::*;\nuse wasmtime_wasi::{Wasi, WasiCtx};\n\nfn main() -&gt; Result&lt;()&gt; {\n    let store = Store::default();\n    let module = Module::from_file(&amp;store, &quot;/at/rust/wasmer/a/target/wasm32-wasi/debug/a.wasm&quot;)?;\n    let wasi = Wasi::new(&amp;store, WasiCtx::new(std::env::args())?);\n    let mut imports = Vec::new();\n    for import in module.imports() {\n        if import.module() == &quot;wasi_snapshot_preview1&quot; {\n            if let Some(export) = wasi.get_export(import.name()) {\n                imports.push(Extern::from(export.clone()));\n                continue;\n            }\n        }\n        panic!(\n            &quot;couldn&#39;t find import for `{}::{}`&quot;,\n            import.module(),\n            import.name()\n        );\n    }\n\n    let instance = Instance::new(&amp;module, &amp;imports)?;\n\n    // 1\n/*\n    let start = instance\n        .get_export(&quot;_start&quot;)\n        .and_then(|e| e.func())\n        .unwrap();\n    let start = start.get0::&lt;()&gt;()?;\n    start()?;\n*/\n    // 2\n    let funca = instance\n        .get_export(&quot;funca&quot;)\n        .expect(&quot;export named `answer` not found&quot;)\n        .func()\n        .expect(&quot;export `answer` was not a function&quot;);\n    let funca = funca.get0::&lt;()&gt;()?;\n    funca()?;\n\n    Ok(())\n}\n</pre></div>\n\n\n<p>And compiled it:<br>\n<code>cargo build --manifest-path=d/Cargo.toml</code></p>\n<p>I ran it and got:</p>\n<div class=\"codehilite\"><pre><span></span>$cargo run --manifest-path=d/Cargo.toml\nfunca\n</pre></div>\n\n\n<p>Good! Now I want change d from binary crate to library crate. So, I want wasm lib calls wasm lib.<br>\nThe first, I tried to compile my bin crate with <code>--target=wasm32-wasi</code> to get <code>wasm</code> and failed:</p>\n<div class=\"codehilite\"><pre><span></span>$cargo +nightly build --manifest-path=d/Cargo.toml --target=wasm32-wasi\n\n   Compiling wat v1.0.13\n   Compiling jobserver v0.1.21\n   Compiling generic-array v0.12.3\n   Compiling region v2.1.2\n   Compiling gimli v0.20.0\nerror[E0425]: cannot find function `lock` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/lock.rs:30:7\n   |\n30 |   os::lock(\n   |       ^^^^ not found in `os`\n   |\nhelp: possible candidate is found in another module, you can import it into scope\n   |\n1  | use lock::lock;\n   |\n\nerror[E0425]: cannot find function `unlock` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/lock.rs:58:7\n   |\n58 |   os::unlock(\n   |       ^^^^^^ not found in `os`\n   |\nhelp: possible candidate is found in another module, you can import it into scope\n   |\n1  | use lock::unlock;\n   |\n\nerror[E0425]: cannot find function `page_size` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/page.rs:16:39\n   |\n16 |     INIT.call_once(|| PAGE_SIZE = os::page_size());\n   |                                       ^^^^^^^^^ not found in `os`\n\nerror[E0425]: cannot find function `set_protection` in module `os`\n  --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/protect.rs:40:7\n   |\n40 |   os::set_protection(\n   |       ^^^^^^^^^^^^^^ not found in `os`\n\nerror[E0425]: cannot find function `get_region` in module `os`\n   --&gt; /opt/rust/cargo/registry/src/github.com-1ecc6299db9ec823/region-2.1.2/src/lib.rs:133:7\n    |\n133 |   os::get_region(page::floor(address as usize) as *const u8)\n    |       ^^^^^^^^^^ not found in `os`\n\nerror: aborting due to 5 previous errors\n\nFor more information about this error, try `rustc --explain E0425`.\nerror: could not compile `region`.\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\nerror: build failed\n</pre></div>\n\n\n<p>So, I think doesn't <code>region</code> support <code>--target=wasm32-wasi</code>? How to create wasm calls wasm?</p>\n</blockquote>",
        "id": 192396244,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585664582
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606699557\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606699557\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>Per zullip chat, more notes:</p>\n<p>-<code>wasmtime-cli</code> does not have a way to configure a linking, (<code>--preload</code> is not a parameter that does that)</p>\n<ul>\n<li>it is expected that <code>wasmtime-cli</code> will automatically resolve and load dependent modules.</li>\n<li>currently, the embedding (e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs</a>) is easiest way to do that</li>\n</ul>\n</blockquote>",
        "id": 192405487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585668586
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606699557\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606699557\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>Per zullip chat, more notes:</p>\n<ul>\n<li><code>wasmtime-cli</code> does not have a way to configure a linking, (<code>--preload</code> is not a parameter that does that)</li>\n<li>it is expected that <code>wasmtime-cli</code> will automatically resolve and load dependent modules.</li>\n<li>currently, the embedding (e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs</a>) is easiest way to do that</li>\n</ul>\n</blockquote>",
        "id": 192405516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585668598
    },
    {
        "content": "<p>yurydelendik edited a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606699557\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440#issuecomment-606699557\">comment</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1440\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1440\">Issue #1440</a>:</p>\n<blockquote>\n<p>Per zullip chat, more notes:</p>\n<ul>\n<li><code>wasmtime-cli</code> does not have a way to configure linking, (<code>--preload</code> is not a parameter that does that)</li>\n<li>it is expected that <code>wasmtime-cli</code> will automatically resolve and load dependent modules.</li>\n<li>currently, the embedding (e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/examples/linking.rs</a>) is easiest way to do that</li>\n</ul>\n</blockquote>",
        "id": 192405576,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1585668608
    }
]