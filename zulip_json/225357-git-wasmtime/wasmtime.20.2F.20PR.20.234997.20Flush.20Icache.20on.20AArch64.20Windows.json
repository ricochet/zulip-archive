[
    {
        "content": "<p>afonso360 opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I tried to run the cranelift filetest suite on a <code>aarch64-pc-windows-msvc</code> machine, and it crashes with <code>STATUS_ILLEGAL_INSTRUCTION</code>. All of the tests pass individually, and if I run it on a single core, it sometimes passes the entire test suite.</p>\n<p>I think this is due to us not clearing the icache after writing the new code as required by arm. This PR adds a call to <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-flushinstructioncache\"><code>FlushInstructionCache</code></a> where we already have a <code>membarrier</code> on linux (See #3426).</p>\n<p>I'm not too knowledgeable about this, but Its was what I saw recommended in a <a href=\"https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/caches-and-self-modifying-code\">Arm Community blog post</a>, although I would really appreciate if someone could doublecheck if this is the correct approach. This also seems to be what <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1501269\">firefox does for their jit</a>.</p>\n<p>With this patch we can now pass the entire filetest suite without crashing!</p>\n<hr>\n<p>I applied the same solution to the wasmtime side of things, but it's worth noting that I was never able to get a <code>STATUS_ILLEGAL_INSTRUCTION</code> there!<br>\nI tested with <code>cargo test -p wasmtime-cli wast::Cranelift::spec::simd_i</code> and all 48 tests pass, no matter how many times I try to run them.</p>\n<p>I can't test the entire test suite since that fails due to #4992 (I think)</p>\n<p>cc: @cfallin @akirilov-arm <br>\n</p>\n</blockquote>",
        "id": 301964785,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664736753
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1127681274\">PR review</a>.</p>",
        "id": 301965426,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664737271
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985281622\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe call this from set_readonly_and_executable? That will also allow skipping parts that have already been flushed previously when doing multiple rounds of defining a function and finalizing everything, like for hot reloading.</p>\n</blockquote>",
        "id": 301965427,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664737271
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>I tried to run the cranelift filetest suite on a <code>aarch64-pc-windows-msvc</code> machine, and it crashes with <code>STATUS_ILLEGAL_INSTRUCTION</code>. All of the tests pass individually, and if I run it on a single core, it sometimes passes the entire test suite.</p>\n<p>I think this is due to us not clearing the icache after writing the new code as required by arm. This PR adds a call to <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-flushinstructioncache\"><code>FlushInstructionCache</code></a> where we already have a <code>membarrier</code> on linux (See #3426).</p>\n<p>I'm not too knowledgeable about this, but it was what I saw recommended in a <a href=\"https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/caches-and-self-modifying-code\">Arm Community blog post</a>, although I would really appreciate if someone could doublecheck if this is the correct approach. This also seems to be what <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1501269\">firefox does for their jit</a>.</p>\n<p>With this patch we can now pass the entire filetest suite without crashing!</p>\n<hr>\n<p>I applied the same solution to the wasmtime side of things, but it's worth noting that I was never able to get a <code>STATUS_ILLEGAL_INSTRUCTION</code> there!<br>\nI tested with <code>cargo test -p wasmtime-cli wast::Cranelift::spec::simd_i</code> and all 48 tests pass, no matter how many times I try to run them.</p>\n<p>I can't test the entire test suite since that fails due to #4992 (I think)</p>\n<p>cc: @cfallin @akirilov-arm <br>\n</p>\n</blockquote>",
        "id": 301969253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664740170
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302028060,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664789328
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985571324\">PR review comment</a>:</p>\n<blockquote>\n<p>I've done that and I've also switched the <code>prepare_icache_flush</code> calls to be done in <code>allocate()</code>. Calling one inside <code>Memory</code> and the other outside I think would be a kind of weird API quirk. I added a <code>MemoryUse</code> flag to ensure that we always call the icache flushes/prepares in the appropriate place, and only for memory intended for execution.</p>\n<p>Another thing that I noticed and think is probably a bug, is that we only call <code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE</code> once, when initially allocating the memory, but then can call <code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE</code> multiple times when hotswapping, I'm not totally sure this is allowed and what happens if we do this. </p>\n<p>If it is, then maybe we want to call <code>prepare_icache_flush</code> in <code>new</code> instead of  <code>allocate</code>.</p>\n<p>I tested this patch on <code>aarch64-linux</code> and <code>aarch64-msvc</code> and it seems to work on both.</p>\n</blockquote>",
        "id": 302029103,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664789751
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128071827\">PR review</a>.</p>",
        "id": 302029104,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664789751
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985571324\">PR review comment</a>.</p>",
        "id": 302029205,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664789781
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985571324\">PR review comment</a>.</p>",
        "id": 302029263,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664789808
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985571324\">PR review comment</a>.</p>",
        "id": 302029635,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664789959
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985571324\">PR review comment</a>.</p>",
        "id": 302029826,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664790023
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128090814\">PR review</a>.</p>",
        "id": 302030510,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664790311
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128108310\">PR review</a>.</p>",
        "id": 302038274,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664793780
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985600548\">PR review comment</a>:</p>\n<blockquote>\n<p>One minor suggestion - perform the cache maintenance before making the memory read-only; the architecture permits either option, but I think that there have been cases in the past where the operations failed on non-writable pages due to a CPU erratum.</p>\n</blockquote>",
        "id": 302038275,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664793780
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985604102\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly here - do this before the call on line 161.</p>\n</blockquote>",
        "id": 302038276,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664793780
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128108310\">PR review</a>.</p>",
        "id": 302038277,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664793780
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985631064\">PR review comment</a>:</p>\n<blockquote>\n<p>Refer to <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4987#discussion_r984806226\">my comment</a> in #4987, but the gist of it is that <code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE</code> should be executed only once for the whole lifetime of the process and subsequent calls are just unnecessary overhead, yet harmless. So, yes, you shouldn't have moved the code.</p>\n<p>BTW another subtle issue - the <code>membarrier()</code> calls are completely unnecessary for single-threaded processes and multi-threaded programs, provided that each thread uses its own generated code. However, I can't think of any easy way to distinguish these use cases from the regular multi-threaded one, and I am not sure if adding an option to <code>JITModule::new()</code> is the right approach.</p>\n</blockquote>",
        "id": 302038278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664793780
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985612564\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit - I think the phrasing of this comment gives the wrong impression because there is no obligation really to call <code>icache_flush()</code> at some point after this call; my suggestion is to just state that it is a prerequisite for any usage of the latter.</p>\n</blockquote>",
        "id": 302038279,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664793780
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128173869\">PR review</a>.</p>",
        "id": 302039836,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664794484
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985649589\">PR review comment</a>:</p>\n<blockquote>\n<p>Got it! I'll move it to <code>new</code> and add a comment with that description. Thanks!</p>\n</blockquote>",
        "id": 302039837,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664794484
    },
    {
        "content": "<p>afonso360 deleted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985649589\">PR review comment</a>.</p>",
        "id": 302040134,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664794600
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128182002\">PR review</a>.</p>",
        "id": 302040842,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664794913
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985655240\">PR review comment</a>:</p>\n<blockquote>\n<p>Got it! I'd like to try and keep all the <code>membarrier</code> calls contained to the <code>Memory</code> struct, otherwise I think we get a really weird interface where you need to do some stuff outside of <code>Memory</code> and some other stuff happens automatically. I think moving this to <code>new</code> effectively gets us back to where we were before while keeping these details contained.</p>\n<p>I'm not really seeing a way of cleaning the issue you mentioned in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4987#discussion_r984806226\">https://github.com/bytecodealliance/wasmtime/pull/4987#discussion_r984806226</a> where we only really need to do this once per process.</p>\n</blockquote>",
        "id": 302040843,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664794913
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985655240\">PR review comment</a>.</p>",
        "id": 302041117,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664795020
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1128335509\">PR review</a>.</p>",
        "id": 302059233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664802298
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r985759006\">PR review comment</a>:</p>\n<blockquote>\n<p>Sorry, I might have given the wrong impression - I am not really concerned with where exactly the source code is located, rather with the sequence of operations at runtime. So, as long as the registration happens only at the creation of the <code>JITModule</code> object (which seems to be the \"entry point\" into the <code>cranelift-jit</code> crate), then everything is fine from my point of view.</p>\n<p>As for the other issue - on second thought, you might be able to just execute <code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE</code> and then, assuming that my reading of the documentation is correct, if you fail with <code>EPERM</code>, do the registration and repeat. BTW you will probably have to coordinate with @cfallin because he should touch the same code paths to fix the issue he is working on, so I'd expect merge conflicts.</p>\n</blockquote>",
        "id": 302059234,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664802298
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302321355,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664907843
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130442967\">PR review</a>.</p>",
        "id": 302325176,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909202
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987213698\">PR review comment</a>:</p>\n<blockquote>\n<p>A minor thing, but would it make sense here to call this <code>wasmtime-jit-icache-coherence</code> instead and version it along with the other Wasmtime-related crates (so <code>2.0.0</code> currently)?</p>\n<p>I honestly don't have too many strong opinions here, but absent any other reasons it does seem like a crate that lives in our repo in <code>crates/</code> and is published with all the others should probably be named/versioned in line with the others as well.</p>\n</blockquote>",
        "id": 302325177,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909202
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130442967\">PR review</a>.</p>",
        "id": 302325180,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909203
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987220661\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, here I see you've considered RISC-V, cool (comments above).</p>\n</blockquote>",
        "id": 302325181,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909203
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987218051\">PR review comment</a>:</p>\n<blockquote>\n<p>Not strictly necessary for this PR, but I wonder how RISC-V fits into this -- it looks like at the ISA level it has a <code>fence.i</code> instruction, so it is closer to AArch64 in this regard (weaker coherence by default). Is it enough to do the same <code>membarrier</code> calls as on <code>aarch64</code>? (cc @yuyang-ok)</p>\n<p>In the absence of any other information, perhaps we could perform the same <code>membarrier</code> calls on RISC-V as we do on aarch64?</p>\n</blockquote>",
        "id": 302325183,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909203
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130465446\">PR review</a>.</p>",
        "id": 302326587,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909667
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987229246\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't mind the naming, but I'm a bit unsure about publishing.</p>\n<p>The main reason is that our <code>cache_clear</code> is a lie (on linux), and only works with the <code>pipeline_flush</code>. We do mention in the docs that callers must always call <code>pipeline_flush</code> but I'm worried that someone might not do that.</p>\n</blockquote>",
        "id": 302326588,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909667
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987231720\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, so it actually has to be published if it's a dependency of <code>wasmtime-jit</code>. If the API safety is a concern, perhaps we could work out how to wrap it in a higher-level interface (e.g. some sort of object with methods to cache-clear and pipeline-flush, and only allows one to pipeline-flush once cache-clear has been invoked at least once)?</p>\n</blockquote>",
        "id": 302327119,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909843
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130469000\">PR review</a>.</p>",
        "id": 302327122,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909843
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987230905\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, how come there's a <code>rustix</code> and a <code>libc</code> implementation? Would it be reasonable to pick one as the only non-windows implementation?</p>\n</blockquote>",
        "id": 302327472,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909956
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130465948\">PR review</a>.</p>",
        "id": 302327476,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909957
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987229573\">PR review comment</a>:</p>\n<blockquote>\n<p>One way I'd recommend writing this to make this more easily maintainable over time is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfg_if</span>::<span class=\"n\">cfg_if</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"cp\">#[cfg(target_os = </span><span class=\"s\">\"windows\"</span><span class=\"cp\">)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">win</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">win</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"rustix\"</span><span class=\"cp\">)]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">rustix</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">rustix</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">mod</span> <span class=\"nn\">libc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">libc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">imp</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and below just use <code>imp::the_method()</code> instead of duplicating the <code>#[cfg]</code></p>\n</blockquote>",
        "id": 302327477,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909958
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130465948\">PR review</a>.</p>",
        "id": 302327479,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909958
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987232418\">PR review comment</a>:</p>\n<blockquote>\n<p>Could the functions in this crate use <code>#[inline]</code> instead of <code>#[inline(always)]</code>?</p>\n</blockquote>",
        "id": 302327480,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664909958
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987240810\">PR review comment</a>:</p>\n<blockquote>\n<p>Well, for <code>cranelift-jit</code> we don't want to import rustix since that adds a bunch of dependencies for a couple of membarriers (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/3395\">https://github.com/bytecodealliance/wasmtime/pull/3395</a>). For wasmtime I think we do want the safety guarantees of rustix.</p>\n<p>So we ended up with both, one implementation in <code>wasmtime-jit</code> and another in <code>cranelift-jit</code></p>\n</blockquote>",
        "id": 302329154,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664910541
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130482928\">PR review</a>.</p>",
        "id": 302329174,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664910548
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987240810\">PR review comment</a>.</p>",
        "id": 302329547,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664910689
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130489936\">PR review</a>.</p>",
        "id": 302330116,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664910891
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987245655\">PR review comment</a>:</p>\n<blockquote>\n<p>From a maintainability point of view though I don't think it makes sense to have two different versions of this code. If <code>cranelift-jit</code> doesn't want to use <code>rustix</code> because it's too big of a dependency then that seems like an equivalent argument could be made for wasmtime dropping rustix, but the same arguments for why wasmtime uses rustix I feel can be used in reverse as well to motivate the usage of <code>rustix</code>. </p>\n<p>Overall I assume the actual compiled-down code is basically the same modulo what function does the <code>syscall</code> instruction so at least form my perspective I would prefer to only have one implementation to maintain rather than two.</p>\n<p>Also a bit more broadly I feel that the <code>cranelift-jit</code> crate doesn't really fit well with this repository right now. Nothing in Wasmtime uses it and it does not see heavy usage in tests I believe, but it's quite a complicated an nontrivial crate at the same time. Basically the support/maintenance story for it seems somewhat unclear but I ideally don't want it to place further burdens on other code elsewhere.</p>\n</blockquote>",
        "id": 302330152,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664910909
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130508765\">PR review</a>.</p>",
        "id": 302332581,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664911898
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987258379\">PR review comment</a>:</p>\n<blockquote>\n<p>Cranelift-jit is used and tested by cg_clif.</p>\n</blockquote>",
        "id": 302332582,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664911898
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987276964\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Overall I assume the actual compiled-down code is basically the same modulo what function does the syscall instruction so at least form my perspective I would prefer to only have one implementation to maintain rather than two.</p>\n</blockquote>\n<p>I hope so too! Or its probably a bug. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>  I don't really have an opinion on what we should do here, but I'm happy with whatever.</p>\n<blockquote>\n<p>Also a bit more broadly I feel that the cranelift-jit crate doesn't really fit well with this repository right now. Nothing in Wasmtime uses it and it does not see heavy usage in tests I believe, but it's quite a complicated an nontrivial crate at the same time. Basically the support/maintenance story for it seems somewhat unclear but I ideally don't want it to place further burdens on other code elsewhere.</p>\n</blockquote>\n<p>We do use the jit for all runtests in cranelift (in the filetest suite), that ends up being quite a few and it also runs on all targets that cranelift supports. And we also use the jit when fuzzing the <code>cranelift-fuzzgen</code> target.</p>\n<p>I do think we could go the other way and try to use <code>cranelift-jit</code> in wasmtime instead of <code>wasmtime-jit</code>. That would probably be a big project, and I'm not sure if there is anything that would be fundamentally incompatible. But I think it would make sense in terms of a code sharing perspective, and as a bonus cranelift users would get a better JIT!</p>\n</blockquote>",
        "id": 302336484,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664913380
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130536376\">PR review</a>.</p>",
        "id": 302336487,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664913380
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987276964\">PR review comment</a>.</p>",
        "id": 302336717,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664913482
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987276964\">PR review comment</a>.</p>",
        "id": 302337172,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664913645
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987288510\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we could share the core for handling mapping as executable and relocating, but the user facing interface of cranelift-module is designed for the C linkage model and is not compatible with the wasm linkage model.</p>\n</blockquote>",
        "id": 302338865,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664914298
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1130553180\">PR review</a>.</p>",
        "id": 302338866,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664914298
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302409691,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664958448
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302413242,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664959819
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987685620\">PR review comment</a>:</p>\n<blockquote>\n<p>I've implemented <code>clear_cache</code> as unsafe, and added another note on the doc comments for that function. I like the current API as it allows authors to reorder the <code>clear_cache</code> and <code>pipeline_flush</code> as they see fit. Which should be valid as long as no one tries to execute code in the mean time.</p>\n<p>Once we add an actual <code>clear_cache</code> implementation it should also be easier to just drop the <code>unsafe</code> and keep the same API.</p>\n<p>What do you think about that?</p>\n</blockquote>",
        "id": 302413328,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664959864
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131094121\">PR review</a>.</p>",
        "id": 302413329,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664959864
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987685620\">PR review comment</a>.</p>",
        "id": 302413381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664959888
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302415896,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664960863
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131134524\">PR review</a>.</p>",
        "id": 302418029,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664961724
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987713763\">PR review comment</a>:</p>\n<blockquote>\n<p>I agree that we do need to do something, from what I've read RISCV is allowed to have incoherent I and D caches. From this <a href=\"https://docs.kernel.org/riscv/features.html\">documentation</a> of the kernel, it looks like CORE_SYNC is not yet implemented for RISCV.</p>\n<p>I've tried to read the kernel a bit and I've found that they support a <br>\n</p>\n</blockquote>",
        "id": 302418032,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664961724
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987713763\">PR review comment</a>.</p>",
        "id": 302418165,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664961795
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987713763\">PR review comment</a>.</p>",
        "id": 302418515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664961945
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987713763\">PR review comment</a>.</p>",
        "id": 302419402,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664962271
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987713763\">PR review comment</a>.</p>",
        "id": 302419598,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664962351
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302421583,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664963177
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302427082,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664965322
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302467911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664979816
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131537386\">PR review</a>.</p>",
        "id": 302471984,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664980890
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987994477\">PR review comment</a>:</p>\n<blockquote>\n<p>The <code>not(target_os = \"windows\")</code> condition here can be removed since it's already implied by the <code>if</code> branch above</p>\n</blockquote>",
        "id": 302472059,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664980916
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302474727,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664981690
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987972327\">PR review comment</a>:</p>\n<blockquote>\n<p>Isn't this redundant now?</p>\n</blockquote>",
        "id": 302478517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982752
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988004705\">PR review comment</a>:</p>\n<blockquote>\n<p>See above.</p>\n</blockquote>",
        "id": 302479886,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982802
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988013870\">PR review comment</a>:</p>\n<blockquote>\n<p>Note that this blog post is about AArch32, though I think that it is still correct at a high level (but the reference to CP15, for example, is irrelevant).</p>\n</blockquote>",
        "id": 302479887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982802
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988024825\">PR review comment</a>:</p>\n<blockquote>\n<p><code>all processors that are executing threads in the current process</code> or something like that is probably a more useful statement? <code>in the same coherence domain</code> is technically correct, but perhaps superfluous - I am not aware of any operating system that runs in a different environment, at least any OS that might plausibly execute Wasmtime.</p>\n</blockquote>",
        "id": 302479892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982803
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987994078\">PR review comment</a>:</p>\n<blockquote>\n<p>IMHO we need a longer explanation here because the logic is a bit subtle. To an unfamiliar reader the implementation might be confusing because by the time we reach this point we will have already executed <code>FlushInstructionCache()</code>, so why are we flushing the write buffers now? The reason is that we do not care about the flushing of the write buffers per se, but about the fact that, as documented by Microsoft, this call results in an inter-processor interrupt that affects all processors running a thread of the current process, which would act as a core serializing operation.</p>\n</blockquote>",
        "id": 302479970,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982827
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131503783\">PR review</a>.</p>",
        "id": 302480231,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982891
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131503783\">PR review</a>.</p>",
        "id": 302480233,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982892
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987980756\">PR review comment</a>:</p>\n<blockquote>\n<p>Stray <code>over</code>?</p>\n</blockquote>",
        "id": 302480246,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982898
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988002550\">PR review comment</a>:</p>\n<blockquote>\n<p>No, if it is necessary to call <code>pipeline_flush()</code> (i.e. the application is multi-threaded), then it <strong>must</strong> be called after <code>clear_cache()</code> (think speculative instruction prefetching).</p>\n</blockquote>",
        "id": 302480249,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982898
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988014647\">PR review comment</a>:</p>\n<blockquote>\n<p><code>cache</code> instead of <code>cash</code></p>\n</blockquote>",
        "id": 302480252,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982899
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988015320\">PR review comment</a>:</p>\n<blockquote>\n<p>See the comment on line 19.</p>\n</blockquote>",
        "id": 302480253,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982899
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988018744\">PR review comment</a>:</p>\n<blockquote>\n<p>IMHO the name should emphasize that this function is necessary only for multi-threaded applications, so something like <code>pipeline_flush_mt()</code> or <code>sync_core_mt()</code>?</p>\n</blockquote>",
        "id": 302480278,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982904
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988019695\">PR review comment</a>:</p>\n<blockquote>\n<p>We need a comment here that this is required only for multi-threaded programs, and that it must be executed after <code>clear_cache()</code>.</p>\n</blockquote>",
        "id": 302480280,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664982904
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987977263\">PR review comment</a>:</p>\n<blockquote>\n<p>No, we rely on the <code>mprotect()</code> call that switches the memory from readable and writable to readable and executable.</p>\n</blockquote>",
        "id": 302480701,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664983036
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987982942\">PR review comment</a>:</p>\n<blockquote>\n<p>See my comment on <code>libc::clear_cache</code>.</p>\n</blockquote>",
        "id": 302480704,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664983036
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987997866\">PR review comment</a>:</p>\n<blockquote>\n<p>From an AArch64 perspective, this is a requirement only for multi-threaded code, i.e. code that does not do thread-local code generation and execution.</p>\n</blockquote>",
        "id": 302480709,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664983037
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r987685620\">PR review comment</a>.</p>",
        "id": 302489442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664985466
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131626401\">PR review</a>.</p>",
        "id": 302489443,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664985466
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988054918\">PR review comment</a>:</p>\n<blockquote>\n<p>This is an architectural detail - I am not familiar with RISC-V at all, but it is possible that the architecture specifies that if instruction caches are flushed, then the pipeline might be flushed as well if necessary, hence no need to do anything in addition; on AArch64 these actions are decoupled. Or to put it another way - an architecture having incoherent data and instruction caches does not imply that it behaves in exactly the same way as the 64-bit Arm architecture (and hence requiring exactly the same sequence of actions); possibly there are nuances.</p>\n<p>BTW the system call you have linked to says that it can be made to apply to all threads in the process, not just the caller, which might be what you are looking for.</p>\n</blockquote>",
        "id": 302490022,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664985619
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988102460\">PR review comment</a>:</p>\n<blockquote>\n<p>That sounds good to me!</p>\n</blockquote>",
        "id": 302493521,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664986612
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131695800\">PR review</a>.</p>",
        "id": 302493523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664986612
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302502192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664989149
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302506633,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664990556
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131895984\">PR review</a>.</p>",
        "id": 302527515,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664997405
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988242309\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit - you can mention the \"broadcast\" <code>ISB</code> bit here too for clarity, e.g.:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">serializing</span><span class=\"w\"> </span><span class=\"n\">operation</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">equivalent</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"s\">\"broadcast\"</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ISB</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">architecture</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 302527517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664997405
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988244923\">PR review comment</a>:</p>\n<blockquote>\n<p>I am sorry, but now I remember why I put the <code>membarrier()</code> call after changing the page permissions originally - so that it is ordered after the implicit cache cleaning done by <code>mprotect()</code>. Do you mind moving this line (and the preceding comment) right before line 214?</p>\n</blockquote>",
        "id": 302527519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664997405
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131895984\">PR review</a>.</p>",
        "id": 302527520,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664997405
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988246201\">PR review comment</a>:</p>\n<blockquote>\n<p>Similarly here - do you mind moving this call after line 166?</p>\n</blockquote>",
        "id": 302527523,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664997405
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988242309\">PR review comment</a>.</p>",
        "id": 302527648,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664997455
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1131958540\">PR review</a>.</p>",
        "id": 302532400,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664999191
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r988285154\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah right! that makes sense since we are technically not doing anything in the clear_cache operation!</p>\n</blockquote>",
        "id": 302532401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664999191
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 302532722,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1664999321
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r989940665\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>Or to put it another way - an architecture having incoherent data and instruction caches does not imply that it behaves in exactly the same way as the 64-bit Arm architecture (and hence requiring exactly the same sequence of actions); possibly there are nuances.</p>\n</blockquote>\n<p>Yeah, that's right, we should go and double check that!</p>\n<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5033\">https://github.com/bytecodealliance/wasmtime/issues/5033</a> to track this, but I'm going to look at the ISA manual to check if they guarantee anything like that.</p>\n</blockquote>",
        "id": 302820131,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665138553
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1134263676\">PR review</a>.</p>",
        "id": 302820132,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665138553
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 303402960,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665486211
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1137283539\">PR review</a>.</p>",
        "id": 303407382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665487994
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r992183378\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit - you can omit this.</p>\n</blockquote>",
        "id": 303407383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665487994
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1137283539\">PR review</a>.</p>",
        "id": 303407386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665487995
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#discussion_r992183378\">PR review comment</a>.</p>",
        "id": 303407575,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665488060
    },
    {
        "content": "<p>afonso360 updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a> from <code>windows-aarch64-icache</code> to <code>main</code>.</p>",
        "id": 303422368,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665489831
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997#pullrequestreview-1137414190\">PR review</a>.</p>",
        "id": 303429069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665492069
    },
    {
        "content": "<p><strong>afonso360</strong> requested <a href=\"https://github.com/cfallin\">cfallin</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a>.</p>",
        "id": 303678193,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665592963
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4997\">PR #4997</a>.</p>",
        "id": 303695192,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1665598540
    }
]