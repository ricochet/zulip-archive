[
    {
        "content": "<p>yurydelendik opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring this crates yet. It is work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202143681,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593206257
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202143766,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593206290
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-439270755\">PR Review</a>.</p>",
        "id": 202332601,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593447321
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447067666\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Should this only happen if the symbol is actually referenced?</p>\n</blockquote>",
        "id": 202332602,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593447321
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447087684\">PR Review Comment</a>:</p>\n<blockquote>\n<p>FWIW I've seen this prefix in a number of places. Is there a way that we can canonicalize what's going on here? Ideally the name of a function would be contextually defined on some sort of <code>Module</code> type as well to account for the name section, but that may be a bit of a larger refactoring.</p>\n</blockquote>",
        "id": 202332603,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593447321
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-439270755\">PR Review</a>.</p>",
        "id": 202332604,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593447321
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447067199\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This list shows up in a few places, could we perhaps have an \"iterator macro\" which does this for us? Something like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">add_libcall_symbol</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">for_each_libcall</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">add_libcall_symbol</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>",
        "id": 202332605,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593447321
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447088315\">PR Review Comment</a>:</p>\n<blockquote>\n<p>This has a similar branch above for normal code symbols, so could these two perhaps be unified with a helper function?</p>\n</blockquote>",
        "id": 202332608,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593447322
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202335979,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593448639
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202358135,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593459422
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-439445268\">PR Review</a>.</p>",
        "id": 202358692,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593459677
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447208904\">PR Review Comment</a>:</p>\n<blockquote>\n<p>it is preferable, but not necessary. To detect which libcall is used we need to to prescan relocations or track which symbols exist. We can get away with dumping all at this moment.</p>\n</blockquote>",
        "id": 202358694,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593459678
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-439447629\">PR Review</a>.</p>",
        "id": 202359098,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593459898
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447210968\">PR Review Comment</a>:</p>\n<blockquote>\n<p>In this case these names are just unique string identifier (which can be converted back into <code>FuncIndex</code>). We can maintain separate map of FuncIndex&lt;-&gt;obj function somewhere else.</p>\n</blockquote>",
        "id": 202359099,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593459898
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202375628,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593469689
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-440092024\">PR Review</a>.</p>",
        "id": 202445441,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593528380
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447741648\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'm mostly just a bit worried about this conversion is open-coded in a number of places. Not the worst thing in the world but it'd be great if we could centralize/document this somehow.</p>\n</blockquote>",
        "id": 202445442,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593528380
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-440253548\">PR Review</a>.</p>",
        "id": 202472823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593540010
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-440253548\">PR Review</a>.</p>",
        "id": 202472824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593540010
    },
    {
        "content": "<p>pchickey created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r447872085\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It would be good to avoid these <code>unwrap</code>s and instead make these functions fallible, which will allow the user to recover when loading a bad object.</p>\n</blockquote>",
        "id": 202472825,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593540010
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-440253548\">PR Review</a>.</p>",
        "id": 202472911,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593540063
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202495365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593551435
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202506859,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593558992
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-440448343\">PR Review</a>.</p>",
        "id": 202506907,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593559049
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r448030744\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It this moment we fully trust the generated image, but in the future it might change. I added TODO comment about that.</p>\n</blockquote>",
        "id": 202506908,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593559049
    },
    {
        "content": "<p>yurydelendik submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-440448695\">PR Review</a>.</p>",
        "id": 202507000,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593559111
    },
    {
        "content": "<p>yurydelendik created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#discussion_r448031059\">PR Review Comment</a>:</p>\n<blockquote>\n<p>centralized name handling (inside <a href=\"http://object.rs\">object.rs</a>) and added more docs</p>\n</blockquote>",
        "id": 202507001,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593559111
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 202573903,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593613056
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931#pullrequestreview-443402592\">PR Review</a>.</p>",
        "id": 203039805,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594069048
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 203042238,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594070499
    },
    {
        "content": "<p>yurydelendik updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>Pilot usage of <code>serde</code> to save all compilation artifacts</li>\n</ul>\n</blockquote>",
        "id": 203112250,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594133398
    },
    {
        "content": "<p>yurydelendik edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a> from <code>compiler-elf</code> to <code>main</code>:</p>\n<blockquote>\n<p>The following refactoring is a first step towards #1779 .</p>\n<p>The main idea is to create object/ELF image as the result of the compilation (which can be saved/serialized in the future). The linker will work with this image directly after it is allocated in the <code>CodeMemory</code>. In the past, we did the similar thing with debug image created for GDB JIT interface. Now, we can use the ELF image created after compilation, and convert it to an loadable object.</p>\n<p>There is somewhat common/duplicated code in <code>cranelift-object</code> and <code>creates/obj</code>, this PR is not refactoring these crates yet. It is a work for follow up PRs.</p>\n<p>The changes:</p>\n<ul>\n<li>Create the ELF image from <code>Compilation</code></li>\n<li>Create <code>CodeMemory</code> from the ELF image</li>\n<li>Link using ELF image</li>\n<li>Remove creation of GDB JIT images from <code>crates/debug</code></li>\n<li>Move <code>make_trampoline</code> from <a href=\"http://compiler.rs\">compiler.rs</a></li>\n<li>&lt;del&gt;Pilot usage of <code>serde</code> to save all compilation artifacts&lt;/del&gt;</li>\n</ul>\n</blockquote>",
        "id": 203120080,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594136652
    },
    {
        "content": "<p>yurydelendik merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1931\">PR #1931</a>.</p>",
        "id": 203136485,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1594144286
    }
]