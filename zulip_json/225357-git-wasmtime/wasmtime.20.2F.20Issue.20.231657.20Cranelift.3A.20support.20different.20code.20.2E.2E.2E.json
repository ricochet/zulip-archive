[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1657\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1657\">Issue #1657</a>:</p>\n<blockquote>\n<p>Right now, we do not have a notion of \"code model\", i.e., a set of definitions for ways in which external symbols are referenced. The code model affects which types of relocations we emit, and which address-generation strategies we use: for example, going through a global offset table (GOT) vs. embedding addresses directly, or using PC-relative addressing modes vs. not, or using instructions with differently-sized displacement limits. The closest concept that we have seems to be the <code>colocated</code> flag on external function references.</p>\n<p>Ideally, we would like to add support for this as a global compiler flag so that it can influence codegen.</p>\n<p>This came up in #1570; non-x86 architectures (such as AArch64) will need it more urgently as the displacement limits are often lower (e.g., on AArch64, +/- 128MB for calls without going through some sort of indirection or veneer).</p>\n</blockquote>",
        "id": 196256877,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1588639033
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1657\">Issue #1657</a>:</p>\n<blockquote>\n<p>Right now, we do not have a notion of \"code model\", i.e., a set of definitions for ways in which external symbols are referenced. The code model affects which types of relocations we emit, and which address-generation strategies we use: for example, going through a global offset table (GOT) vs. embedding addresses directly, or using PC-relative addressing modes vs. not, or using instructions with differently-sized displacement limits. The closest concept that we have seems to be the <code>colocated</code> flag on external function references.</p>\n<p>Ideally, we would like to add support for this as a global compiler flag so that it can influence codegen.</p>\n<p>This came up in #1570; non-x86 architectures (such as AArch64) will need it more urgently as the displacement limits are often lower (e.g., on AArch64, +/- 128MB for calls without going through some sort of indirection or veneer).</p>\n</blockquote>",
        "id": 202329902,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593446097
    },
    {
        "content": "<p>github-actions[bot] <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1657#issuecomment-651209131\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1657\">Issue #1657</a>:</p>\n<blockquote>\n<h4>Subscribe to Label Action</h4>\n<p>cc @bnjbvr</p>\n<p>&lt;details&gt;<br>\nThis issue or pull request has been labeled: \"cranelift\"</p>\n<p>Thus the following users have been cc'd because of the following labels:</p>\n<ul>\n<li>bnjbvr: cranelift</li>\n</ul>\n<p>To subscribe or unsubscribe from this label, edit the &lt;code&gt;.github/subscribe-to-label.json&lt;/code&gt; configuration file.</p>\n<p><a href=\"https://github.com/bytecodealliance/subscribe-to-label-action\">Learn more.</a><br>\n&lt;/details&gt;</p>\n</blockquote>",
        "id": 202329933,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1593446110
    }
]