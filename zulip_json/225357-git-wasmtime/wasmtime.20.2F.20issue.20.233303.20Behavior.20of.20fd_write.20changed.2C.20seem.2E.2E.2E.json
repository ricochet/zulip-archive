[
    {
        "content": "<p>DenialAdams opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303\">issue #3303</a>:</p>\n<blockquote>\n<p>I recently updated my local version of wasmtime and noticed that the behavior of <code>fd_write</code> seems to have changed. I am supplying two strings to print: a supplied string, and a newline character. This used to print the newline character, which is what I expect, but seems to no longer do so. I bisected the behavior change back to PR #2444, but I didn't see this behavior change explicitly called out.</p>\n<p>Basically, I'm wondering:</p>\n<p>1) Is this new behavior intended, or a bug?<br>\n2) If this new behavior is intended, what am I doing wrong in the example program?</p>\n<p>Thanks for reading!</p>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_unstable\"</span> <span class=\"s2\">\"fd_write\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"s2\">\"world on a new line!\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">47</span><span class=\"p\">)</span> <span class=\"s2\">\"Hello,\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"nv\">$mem_address</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$print</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">47</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">6</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">18</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">20</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) <code>wasmtime repro.wast</code> (contents above)<br>\n2) Observe that the newline is not printed</p>\n<h3>Expected Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>I first observed this behavior on wasmtime 0.29.0. <strong>I bisected the issue back to PR #2444, which seems to be where the behavior changed.</strong></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86<br>\n</p>\n</blockquote>",
        "id": 252077357,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630849093
    },
    {
        "content": "<p>DenialAdams labeled <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303\">issue #3303</a>:</p>\n<blockquote>\n<p>I recently updated my local version of wasmtime and noticed that the behavior of <code>fd_write</code> seems to have changed. I am supplying two strings to print: a supplied string, and a newline character. This used to print the newline character, which is what I expect, but seems to no longer do so. I bisected the behavior change back to PR #2444, but I didn't see this behavior change explicitly called out.</p>\n<p>Basically, I'm wondering:</p>\n<p>1) Is this new behavior intended, or a bug?<br>\n2) If this new behavior is intended, what am I doing wrong in the example program?</p>\n<p>Thanks for reading!</p>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_unstable\"</span> <span class=\"s2\">\"fd_write\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"s2\">\"world on a new line!\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">47</span><span class=\"p\">)</span> <span class=\"s2\">\"Hello,\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"nv\">$mem_address</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$print</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">47</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">6</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">18</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">20</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) <code>wasmtime repro.wast</code> (contents above)<br>\n2) Observe that the newline is not printed</p>\n<h3>Expected Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>I first observed this behavior on wasmtime 0.29.0. <strong>I bisected the issue back to PR #2444, which seems to be where the behavior changed.</strong></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86<br>\n</p>\n</blockquote>",
        "id": 252077359,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630849093
    },
    {
        "content": "<p>DenialAdams edited <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303\">issue #3303</a>:</p>\n<blockquote>\n<p>I recently updated my local version of wasmtime and noticed that the behavior of <code>fd_write</code> seems to have changed. I am supplying two strings to print: a supplied string, and a newline character. This used to print the newline character, which is what I expect, but seems to no longer do so. I bisected the behavior change back to PR #2444, but I didn't see this behavior change explicitly called out.</p>\n<p>Basically, I'm wondering:</p>\n<p>1) Is this new behavior intended, or a bug?<br>\n2) If this new behavior is intended, what am I doing wrong in the example program?</p>\n<p>Thanks for reading!</p>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_unstable\"</span> <span class=\"s2\">\"fd_write\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"s2\">\"world on a new line!\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">47</span><span class=\"p\">)</span> <span class=\"s2\">\"Hello,\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$print</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">47</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">6</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">18</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">20</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) <code>wasmtime repro.wast</code> (contents above)<br>\n2) Observe that the newline is not printed</p>\n<h3>Expected Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>I first observed this behavior on wasmtime 0.29.0. <strong>I bisected the issue back to PR #2444, which seems to be where the behavior changed.</strong></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86<br>\n</p>\n</blockquote>",
        "id": 252077397,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630849143
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303#issuecomment-913157050\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303\">issue #3303</a>:</p>\n<blockquote>\n<p><code>fd_write</code> returns the amount of bytes written. You have to call it in a loop until all bytes are written. This matches the posix <code>write</code> syscall. From the man page of the <code>write</code> syscall:</p>\n<blockquote>\n<p>The  number  of bytes written may be less than count if, for example, there is insufficient space on the underlying physical medium, or the RLIMIT_FSIZE resource limit is encountered (see setrlimit(2)), or the call was interrupted by a signal handler after having written less than count bytes.  (See also pipe(7).)</p>\n</blockquote>\n<p>Higher level api's generally do this loop for you.</p>\n</blockquote>",
        "id": 252077516,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630849286
    },
    {
        "content": "<p>DenialAdams <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303#issuecomment-913157145\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303\">issue #3303</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>fd_write</code> returns the amount of bytes written. You have to call it in a loop until all bytes are written. This matches the posix <code>write</code> syscall. From the man page of the <code>write</code> syscall:</p>\n<blockquote>\n<p>The  number  of bytes written may be less than count if, for example, there is insufficient space on the underlying physical medium, or the RLIMIT_FSIZE resource limit is encountered (see setrlimit(2)), or the call was interrupted by a signal handler after having written less than count bytes.  (See also pipe(7).)</p>\n</blockquote>\n<p>Higher level api's generally do this loop for you.</p>\n</blockquote>\n<p>Thank you, this makes a lot of sense! Sorry for the false report</p>\n</blockquote>",
        "id": 252077543,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630849322
    },
    {
        "content": "<p>DenialAdams closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3303\">issue #3303</a>:</p>\n<blockquote>\n<p>I recently updated my local version of wasmtime and noticed that the behavior of <code>fd_write</code> seems to have changed. I am supplying two strings to print: a supplied string, and a newline character. This used to print the newline character, which is what I expect, but seems to no longer do so. I bisected the behavior change back to PR #2444, but I didn't see this behavior change explicitly called out.</p>\n<p>Basically, I'm wondering:</p>\n<p>1) Is this new behavior intended, or a bug?<br>\n2) If this new behavior is intended, what am I doing wrong in the example program?</p>\n<p>Thanks for reading!</p>\n<h3>Test Case</h3>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi_unstable\"</span> <span class=\"s2\">\"fd_write\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">)</span> <span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">18</span><span class=\"p\">)</span> <span class=\"s2\">\"world on a new line!\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">47</span><span class=\"p\">)</span> <span class=\"s2\">\"Hello,\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$print</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">16</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.store</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">12</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$fd_write</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"nb\">drop</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">47</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">6</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">18</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">20</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$print</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<h3>Steps to Reproduce</h3>\n<p>1) <code>wasmtime repro.wast</code> (contents above)<br>\n2) Observe that the newline is not printed</p>\n<h3>Expected Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Actual Results</h3>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"fm\">line!</span><span class=\"w\"></span>\n</code></pre></div>\n<h3>Versions and Environment</h3>\n<p>I first observed this behavior on wasmtime 0.29.0. <strong>I bisected the issue back to PR #2444, which seems to be where the behavior changed.</strong></p>\n<p>Operating system: Windows 10</p>\n<p>Architecture: x86<br>\n</p>\n</blockquote>",
        "id": 252077559,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1630849322
    }
]