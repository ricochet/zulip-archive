[
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018#issuecomment-1133197055\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">issue #2018</a>:</p>\n<blockquote>\n<p>This has since been fixed not because I think we did anything but because the layout of jit code is different to prevent the adjacent regions as <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018#issuecomment-661091494\">described above</a></p>\n<p>I think there's probably nothing we can do about this otherwise and as long as we stay our current course in the representation of jit compiler outputs I think we'll be ok.</p>\n</blockquote>",
        "id": 283109674,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653071535
    },
    {
        "content": "<p>alexcrichton closed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2018\">issue #2018</a>:</p>\n<blockquote>\n<p>I noticed recently that jitdump support seems broken on master when used through the wasmtime CLI. I'm pretty perplexed by this, especially because bisection pointed to #1565 as a cause. I think, though, that #1565 as a cause is a red herring, and this has always been a bug. Given this <code>fib.rs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"fib({}) = {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>along with this embedding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">profiler</span><span class=\"p\">(</span><span class=\"n\">ProfilingStrategy</span>::<span class=\"n\">JitDump</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./fib.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"s\">\"main\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"p\">.</span><span class=\"n\">get2</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// changeme</span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]),</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">([]));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>When this is run as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"w\"> </span><span class=\"n\">fib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">k</span><span class=\"w\"> </span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">inject</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">jit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"w\"> </span><span class=\"n\">report</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">perf</span><span class=\"p\">.</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this will not attribute time to <code>fib::fib</code>, but instead lots of jit addresses show up:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\"> </span><span class=\"n\">Overhead</span><span class=\"w\">  </span><span class=\"n\">Command</span><span class=\"w\">   </span><span class=\"n\">Shared</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"w\">       </span><span class=\"n\">Symbol</span><span class=\"w\">                                                                                                                                                                                     </span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"o\">........</span><span class=\"w\">  </span><span class=\"o\">........</span><span class=\"w\">  </span><span class=\"o\">..................</span><span class=\"w\">  </span><span class=\"o\">..........................................................................................................................................................................................</span><span class=\"p\">.</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n#<span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">2.02</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">JIT</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">tid</span><span class=\"w\"> </span><span class=\"mi\">142064</span><span class=\"w\">    </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"mh\">0x00007f6d16b4c418</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.73</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">libc</span><span class=\"o\">-</span><span class=\"mf\">2.31.</span><span class=\"n\">so</span><span class=\"w\">        </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">__memmove_avx_unaligned_erms</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.34</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">JIT</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">tid</span><span class=\"w\"> </span><span class=\"mi\">142064</span><span class=\"w\">    </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"mh\">0x00007f6d16b4c422</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.32</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">JIT</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">tid</span><span class=\"w\"> </span><span class=\"mi\">142064</span><span class=\"w\">    </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"mh\">0x00007f6d16b4c499</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.29</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">            </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">crossbeam_epoch</span>::<span class=\"n\">internal</span>::<span class=\"n\">Local</span>::<span class=\"n\">pin</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.20</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">            </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">swap_nonoverlapping_one</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.09</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">            </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">sync</span>::<span class=\"n\">atomic</span>::<span class=\"n\">atomic_load</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.05</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">JIT</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">tid</span><span class=\"w\"> </span><span class=\"mi\">142064</span><span class=\"w\">    </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"mh\">0x00007f6d16b4c479</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.03</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"p\">[</span><span class=\"n\">JIT</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">tid</span><span class=\"w\"> </span><span class=\"mi\">142064</span><span class=\"w\">    </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"mh\">0x00007f6d16b4c428</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If, however, the line with <code>//changeme</code> is switched to <code>true</code> then you'll get the profile as expected:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\"> </span><span class=\"n\">Overhead</span><span class=\"w\">  </span><span class=\"n\">Command</span><span class=\"w\">   </span><span class=\"n\">Shared</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"w\">       </span><span class=\"n\">Symbol</span><span class=\"w\"></span>\n#<span class=\"w\"> </span><span class=\"o\">........</span><span class=\"w\">  </span><span class=\"o\">........</span><span class=\"w\">  </span><span class=\"o\">..................</span><span class=\"w\">  </span><span class=\"o\">..........................................................................................................................................................</span><span class=\"p\">.</span><span class=\"w\"></span>\n#<span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mf\">25.77</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">jitted</span><span class=\"o\">-</span><span class=\"mi\">142410</span><span class=\"o\">-</span><span class=\"mf\">4.</span><span class=\"n\">so</span><span class=\"w\">  </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">fib</span>::<span class=\"n\">fib</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.80</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">libc</span><span class=\"o\">-</span><span class=\"mf\">2.31.</span><span class=\"n\">so</span><span class=\"w\">        </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">__memmove_avx_unaligned_erms</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">1.14</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">            </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">crossbeam_epoch</span>::<span class=\"n\">internal</span>::<span class=\"n\">Local</span>::<span class=\"n\">pin</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">0.91</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">            </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">sync</span>::<span class=\"n\">atomic</span>::<span class=\"n\">atomic_load</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"mf\">0.91</span><span class=\"o\">%</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">  </span><span class=\"n\">wasmtime</span><span class=\"w\">            </span><span class=\"p\">[.]</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">sync</span>::<span class=\"n\">atomic</span>::<span class=\"n\">atomic_compare_exchange</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'm honestly not entirely sure what's going on. I don't think that our jitdump integration is what's broken. The <code>*.dump</code> file emitted looks reasonable, <code>perf inject</code> appears to work, <code>*.so</code> files pop up and they've all got functions in them with names as expected. I'm not really sure what's happening here.</p>\n<p>@jlb6740 do you know more about <code>perf</code> perhaps to help debug? It'd be great to know why <code>perf</code> is failing to recognize the function in one case but not the other.</p>\n<p>The only real difference here seems to be what's on the stack, whether it's native versions of trampolines (<code>Func::wrap</code>) or runtime-generated versions of trampolines (<code>Func::new</code>). We don't tell jitdump about the trampolines generated by <code>Func::new</code> but after doing that it didn't seem to fix anything. Additionally I think we have unwind info for everything registered, but I'm not even sure why perf would want to unwind since we're not collecting stacks, just samples.</p>\n<p>Overall I'm at a loss myself and I'm not sure what to do next. I'm hoping @jlb6740 you've got ideas of what might be going on :(</p>\n</blockquote>",
        "id": 283109676,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1653071537
    }
]