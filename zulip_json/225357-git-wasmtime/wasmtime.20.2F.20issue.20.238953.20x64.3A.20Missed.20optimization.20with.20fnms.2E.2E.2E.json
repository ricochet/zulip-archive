[
    {
        "content": "<p>UnlimitedHummus opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8953\">issue #8953</a>:</p>\n<blockquote>\n<p>The PR #8888 added support for fmsub and fnmsub instructions to x64. This allows sinking loads and negations, which needed<br>\nto be executed when only the fmadd and fnmadd instructions where available. This improves code generation in most cases.<br>\nHowever, in cases where a value is both a sinkable load and negated, the order of those matters in the current implementation.<br>\nIf the value is negated first then stored on the stack and loaded after, an fnmsub instruction could be generated, which would remove the need for explicit negation.</p>\n<h4>Feature</h4>\n<p>The fnmsub instruction should also be generated in cases where one of the multiplicands is negated first and then loaded.</p>\n<h4>Benefit</h4>\n<p>The generated code would be improved in this special case. By using the fnmsub instruction the multiplicand doesn't need to be negated first.</p>\n<h4>Implementation</h4>\n<p>There are test cases added in #8888 for adding both possible orders of negation and loading. Likely this can be achieved by adding additional rules to the lowering code. There would have to be rules for the special case, where negation happens first.</p>\n</blockquote>",
        "id": 451160649,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1720869543
    }
]