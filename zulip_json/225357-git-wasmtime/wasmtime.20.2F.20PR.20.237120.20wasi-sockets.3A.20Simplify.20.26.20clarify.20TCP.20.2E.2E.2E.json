[
    {
        "content": "<p>badeend opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a> from <code>badeend:tcp-error-checking</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<ul>\n<li>\n<p>Allow <code>accept()</code> to return transient errors.<br>\n  The original provision was added to align with preview3 streams that may only fail once. However, after discussing with Dan Gohman, we came to the conclusion that a <code>stream</code> of <code>result&lt;&gt;</code> could do the trick fine too.<br>\n    Fixes: <a href=\"https://github.com/WebAssembly/wasi-sockets/issues/22\">https://github.com/WebAssembly/wasi-sockets/issues/22</a></p>\n</li>\n<li>\n<p>Fold <code>ephemeral-ports-exhausted</code> into <code>address-in-use</code>. There is no cross-platform way to know the distinction between them.</p>\n</li>\n<li>\n<p>Remove <code>concurrency-conflict</code> clutter,<br>\n  and just document it to be always possible.</p>\n</li>\n<li>\n<p>Simplify \"not supported\", \"invalid argument\" and \"invalid state\" error cases.<br>\n  There is a myriad of reasons why an argument might be invalid or an operation might be not supported. But there is few cross platform consistency in which of those error cases result in which error codes. Many wasi-sockets codes were unnecessarily detailed and had no standardized equivalent in POSIX, so wasi-libc will probably just map them all back into a single EOPNOTSUPP or EINVAL or ...</p>\n</li>\n<li>\n<p>Remove create-tcp/udp-socket not supported errors.<br>\n  These stem from back when the entire wasi-sockets proposal was one big single thing. In this day and age, when an implementation doesn't want to support TCP and/or UDP, it can simply _not_ implement that interface, rather than returning an error at runtime.</p>\n</li>\n<li>\n<p>Document that <code>connect</code> may return ECONNABORTED</p>\n</li>\n<li>Clarify <code>connect</code> failure state:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>    POSIX mentions:\n<span class=\"k\">    &gt; </span><span class=\"ge\">If connect() fails, the state of the socket is unspecified. Conforming applications should</span>\n<span class=\"k\">    &gt; </span><span class=\"ge\">close the file descriptor and create a new socket before attempting to reconnect.</span>\n\n    WASI prescribes the following behavior:\n<span class=\"w\">    </span><span class=\"k\">-</span><span class=\"w\"> </span>If <span class=\"sb\">`connect`</span> fails because an input/state validation error, the socket should remain usable.\n<span class=\"w\">    </span><span class=\"k\">-</span><span class=\"w\"> </span>If a connection was actually attempted but failed, the socket should become unusable for further network communication.\n</code></pre></div>\n<ul>\n<li>Clarify <code>local-address</code> behavior on unbound socket:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>POSIX mentions:\n<span class=\"k\">&gt; </span><span class=\"ge\">If the socket has not been bound to a local name, the value</span>\n<span class=\"k\">&gt; </span><span class=\"ge\">stored in the object pointed to by `address` is unspecified.</span>\n\nWASI is stricter and requires <span class=\"sb\">`local-address`</span> to return <span class=\"sb\">`not-bound`</span> when the socket hasn't been bound yet.\n</code></pre></div>\n<h3>Additionally</h3>\n<ul>\n<li>Document the set of socket options that are inherited through <code>accept</code></li>\n<li>Added Linux &amp; Windows specific fixes.</li>\n<li>Added integration tests</li>\n<li>Move example_body out of <a href=\"http://lib.rs\">lib.rs</a> into <code>tcp_sample_application.rs</code> to make room for other tests.</li>\n<li>Keep track of the address family ourselves. This is used in various places to provide cross-platform behavior.</li>\n<li>Fix get/set_unicast_hop_limit. It didn't work for IPv4 sockets on Linux because Linux returns <code>OPNOTSUPP</code> instead of <code>NOPROTOOPT</code>.</li>\n<li>Use <code>Rustix::Errno</code> to base all error code checks on.  <br>\n</li>\n</ul>\n</blockquote>",
        "id": 394170465,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696147538
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394170466,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696147539
    },
    {
        "content": "<p><strong>badeend</strong> requested <a href=\"https://github.com/pchickey\">pchickey</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394170467,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696147539
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394170990,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696147867
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394489519,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696271044
    },
    {
        "content": "<p><strong>pchickey</strong> requested <a href=\"https://github.com/alexcrichton\">alexcrichton</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394524380,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696287342
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394872929,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696435496
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394874909,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696436175
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 394982773,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696491717
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395105492,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696533607
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395396365,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696671367
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395523568,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696759802
    },
    {
        "content": "<p>badeend edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p>Allow <code>accept()</code> to return transient errors.<br>\n  The original provision was added to align with preview3 streams that may only fail once. However, after discussing with Dan Gohman, we came to the conclusion that a <code>stream</code> of <code>result&lt;&gt;</code> could do the trick fine too.<br>\n    Fixes: <a href=\"https://github.com/WebAssembly/wasi-sockets/issues/22\">https://github.com/WebAssembly/wasi-sockets/issues/22</a></p>\n</li>\n<li>\n<p>Fold <code>ephemeral-ports-exhausted</code> into <code>address-in-use</code>. There is no cross-platform way to know the distinction between them.</p>\n</li>\n<li>\n<p>Remove <code>concurrency-conflict</code> clutter,<br>\n  and just document it to be always possible.</p>\n</li>\n<li>\n<p>Simplify \"not supported\", \"invalid argument\" and \"invalid state\" error cases.<br>\n  There is a myriad of reasons why an argument might be invalid or an operation might be not supported. But there is few cross platform consistency in which of those error cases result in which error codes. Many wasi-sockets codes were unnecessarily detailed and had no standardized equivalent in POSIX, so wasi-libc will probably just map them all back into a single EOPNOTSUPP or EINVAL or ...</p>\n</li>\n<li>\n<p>Remove create-tcp/udp-socket not supported errors.<br>\n  These stem from back when the entire wasi-sockets proposal was one big single thing. In this day and age, when an implementation doesn't want to support TCP and/or UDP, it can simply _not_ implement that interface, rather than returning an error at runtime.</p>\n</li>\n<li>\n<p>Document that <code>connect</code> may return ECONNABORTED</p>\n</li>\n<li>Clarify <code>connect</code> failure state:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>    POSIX mentions:\n<span class=\"k\">    &gt; </span><span class=\"ge\">If connect() fails, the state of the socket is unspecified. Conforming applications should</span>\n<span class=\"k\">    &gt; </span><span class=\"ge\">close the file descriptor and create a new socket before attempting to reconnect.</span>\n\n    WASI prescribes the following behavior:\n<span class=\"w\">    </span><span class=\"k\">-</span><span class=\"w\"> </span>If <span class=\"sb\">`connect`</span> fails because an input/state validation error, the socket should remain usable.\n<span class=\"w\">    </span><span class=\"k\">-</span><span class=\"w\"> </span>If a connection was actually attempted but failed, the socket should become unusable for further network communication.\n</code></pre></div>\n<ul>\n<li>Clarify <code>local-address</code> behavior on unbound socket:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>POSIX mentions:\n<span class=\"k\">&gt; </span><span class=\"ge\">If the socket has not been bound to a local name, the value</span>\n<span class=\"k\">&gt; </span><span class=\"ge\">stored in the object pointed to by `address` is unspecified.</span>\n\nWASI is stricter and requires <span class=\"sb\">`local-address`</span> to return <span class=\"sb\">`not-bound`</span> when the socket hasn't been bound yet.\n</code></pre></div>\n<h3>Additionally</h3>\n<ul>\n<li>Document the set of socket options that are inherited through <code>accept</code></li>\n<li>Added Linux &amp; Windows specific fixes.</li>\n<li>Added integration tests</li>\n<li>Move example_body out of <a href=\"http://lib.rs\">lib.rs</a> into <code>tcp_sample_application.rs</code> to make room for other tests.</li>\n<li>Keep track of the address family &amp; IPV6_V6ONLY ourselves. This is used in various places to provide cross-platform behavior.</li>\n<li>Fix get/set_unicast_hop_limit. It didn't work for IPv4 sockets on Linux because Linux returns <code>OPNOTSUPP</code> instead of <code>NOPROTOOPT</code>.</li>\n<li>Use <code>Rustix::Errno</code> to base all error code checks on.  <br>\n</li>\n</ul>\n</blockquote>",
        "id": 395523799,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696759883
    },
    {
        "content": "<p>badeend edited <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>:</p>\n<blockquote>\n<ul>\n<li>\n<p>Allow <code>accept()</code> to return transient errors.<br>\n  The original provision was added to align with preview3 streams that may only fail once. However, after discussing with Dan Gohman, we came to the conclusion that a <code>stream</code> of <code>result&lt;&gt;</code> could do the trick fine too.<br>\n    Fixes: <a href=\"https://github.com/WebAssembly/wasi-sockets/issues/22\">https://github.com/WebAssembly/wasi-sockets/issues/22</a></p>\n</li>\n<li>\n<p>Fold <code>ephemeral-ports-exhausted</code> into <code>address-in-use</code>. There is no cross-platform way to know the distinction between them.</p>\n</li>\n<li>\n<p>Remove <code>concurrency-conflict</code> clutter,<br>\n  and just document it to be always possible.</p>\n</li>\n<li>\n<p>Simplify \"not supported\", \"invalid argument\" and \"invalid state\" error cases.<br>\n  There is a myriad of reasons why an argument might be invalid or an operation might be not supported. But there is few cross platform consistency in which of those error cases result in which error codes. Many wasi-sockets codes were unnecessarily detailed and had no standardized equivalent in POSIX, so wasi-libc will probably just map them all back into a single EOPNOTSUPP or EINVAL or ...</p>\n</li>\n<li>\n<p>Remove create-tcp/udp-socket not supported errors.<br>\n  These stem from back when the entire wasi-sockets proposal was one big single thing. In this day and age, when an implementation doesn't want to support TCP and/or UDP, it can simply _not_ implement that interface, rather than returning an error at runtime.</p>\n</li>\n<li>\n<p>Document that <code>connect</code> may return ECONNABORTED</p>\n</li>\n<li>Clarify <code>connect</code> failure state:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>    POSIX mentions:\n<span class=\"k\">    &gt; </span><span class=\"ge\">If connect() fails, the state of the socket is unspecified. Conforming applications should</span>\n<span class=\"k\">    &gt; </span><span class=\"ge\">close the file descriptor and create a new socket before attempting to reconnect.</span>\n\n    WASI prescribes the following behavior:\n<span class=\"w\">    </span><span class=\"k\">-</span><span class=\"w\"> </span>If <span class=\"sb\">`connect`</span> fails because an input/state validation error, the socket should remain usable.\n<span class=\"w\">    </span><span class=\"k\">-</span><span class=\"w\"> </span>If a connection was actually attempted but failed, the socket should become unusable for further network communication.\n</code></pre></div>\n<ul>\n<li>Clarify <code>local-address</code> behavior on unbound socket:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Markdown\"><pre><span></span><code>POSIX mentions:\n<span class=\"k\">&gt; </span><span class=\"ge\">If the socket has not been bound to a local name, the value</span>\n<span class=\"k\">&gt; </span><span class=\"ge\">stored in the object pointed to by `address` is unspecified.</span>\n\nWASI is stricter and requires <span class=\"sb\">`local-address`</span> to return <span class=\"sb\">`not-bound`</span> when the socket hasn't been bound yet.\n</code></pre></div>\n<h3>Additionally</h3>\n<ul>\n<li>Document the set of socket options that are inherited through <code>accept</code></li>\n<li>Added Linux, MacOS &amp; Windows specific fixes.</li>\n<li>Added integration tests</li>\n<li>Move example_body out of <a href=\"http://lib.rs\">lib.rs</a> into <code>tcp_sample_application.rs</code> to make room for other tests.</li>\n<li>Keep track of the address family &amp; IPV6_V6ONLY ourselves. This is used in various places to provide cross-platform behavior.</li>\n<li>Fix get/set_unicast_hop_limit. It didn't work for IPv4 sockets on Linux because Linux returns <code>OPNOTSUPP</code> instead of <code>NOPROTOOPT</code>.</li>\n<li>Use <code>Rustix::Errno</code> to base all error code checks on.  <br>\n</li>\n</ul>\n</blockquote>",
        "id": 395524156,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696760014
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395529470,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696762254
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395538416,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696768872
    },
    {
        "content": "<p>badeend updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395541334,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696770925
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120#pullrequestreview-1663685397\">PR review</a>:</p>\n<blockquote>\n<p>Thanks!</p>\n</blockquote>",
        "id": 395606956,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696821751
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7120\">PR #7120</a>.</p>",
        "id": 395615636,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1696826328
    }
]