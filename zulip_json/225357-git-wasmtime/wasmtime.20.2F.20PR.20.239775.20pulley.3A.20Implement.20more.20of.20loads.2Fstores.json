[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a> from <code>alexcrichton:pulley-loads-and-stores</code> to <code>bytecodealliance:main</code>:</p>\n<blockquote>\n<p>This commit gets the <code>address.wast</code> spec test working by filling out more load/store infrastructure in Pulley. In doing so I've done a refactoring of the existing load/store methods. Changes here are:</p>\n<ul>\n<li>All load/stores are <code>*_offset32</code> now instead of optionally having no offset, a 8-bit offset, or a 64-bit offset.</li>\n<li>All x-register loads/stores are prefixed with <code>x</code> now.</li>\n<li>All loads/stores have \"le\" for little-endian in their name.</li>\n<li>Loads/stores are refactored to have 8 and 16-bit variants.</li>\n<li>Sign-extending loads now either extend to 32 or 64 depending on the opcode.</li>\n<li>Float loads/stores are added.</li>\n<li>Big-endian is handled with explicit big-endian loads/stores instead <code>bswap</code> to handle this transparently in the backend (e.g. for stores not ISLE-generated) and to handle floats.</li>\n</ul>\n<p>&lt;!--<br>\nPlease make sure you include the following information:</p>\n<ul>\n<li>\n<p>If this work has been discussed elsewhere, please include a link to that<br>\n  conversation. If it was discussed in an issue, just mention \"issue #...\".</p>\n</li>\n<li>\n<p>Explain why this change is needed. If the details are in an issue already,<br>\n  this can be brief.</p>\n</li>\n</ul>\n<p>Our development process is documented in the Wasmtime book:<br>\n<a href=\"https://docs.wasmtime.dev/contributing-development-process.html\">https://docs.wasmtime.dev/contributing-development-process.html</a></p>\n<p>Please ensure all communication follows the code of conduct:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md\">https://github.com/bytecodealliance/wasmtime/blob/main/CODE_OF_CONDUCT.md</a><br>\n--&gt;</p>\n</blockquote>",
        "id": 487290887,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847494
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487290889,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847495
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-compiler-reviewers\">wasmtime-compiler-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487290890,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847495
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-default-reviewers\">wasmtime-default-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487290892,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847495
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-core-reviewers\">wasmtime-core-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487290895,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847495
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2492850440\">PR review</a>.</p>",
        "id": 487291129,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847553
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878402607\">PR review comment</a>:</p>\n<blockquote>\n<p>Curious on your thoughts on this in particular @fitzgen.</p>\n<p>I'll note that we don't currently do this well, e.g. <code>xconst8</code> always writes the full 64-bits and <code>br_if</code> has no variant that only reads 32-bits. I think we'll want to change that over time though.</p>\n</blockquote>",
        "id": 487291133,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847554
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#issuecomment-2532197516\">commented</a> on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>:</p>\n<blockquote>\n<p>At a high level the <code>spec_testsuite/*.wast</code> still can't be executed, but that's the next PR after this to get that executing on CI (and a large number of tests already pass)</p>\n</blockquote>",
        "id": 487291401,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733847619
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487292772,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848002
    },
    {
        "content": "<p><strong>alexcrichton</strong> requested <a href=\"https://github.com/orgs/bytecodealliance/teams/wasmtime-fuzz-reviewers\">wasmtime-fuzz-reviewers</a> for a review on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487292775,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848003
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2492888607\">PR review</a>.</p>",
        "id": 487292915,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848038
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878423821\">PR review comment</a>:</p>\n<blockquote>\n<p>Also curious on your thoughts here @fitzgen of the deletion of this fuzzer. Personally I feel like it's a bit of a pain to maintain while not adding much more over the wasm-smith fuzzing we have already.</p>\n</blockquote>",
        "id": 487292916,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848038
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487294744,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733848488
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2492941504\">PR review</a>.</p>",
        "id": 487296839,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849053
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878452889\">PR review comment</a>:</p>\n<blockquote>\n<p>Also double-check me on this, is this right?</p>\n</blockquote>",
        "id": 487296841,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849053
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2492870323\">PR review</a>.</p>",
        "id": 487298382,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849475
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878412984\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we could remove the parenthetical here. They must be fast to decode <em>in software</em> (perhaps worth adding that qualifier) at runtime and various bit-packing schemes will either be fast enough or not. I don't think it necessarily makes sense to say we won't do any bit-packing at all, since (a) we already do a little, and (b) we need to balance the decoding with instruction density and cache usage.</p>\n</blockquote>",
        "id": 487298383,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849476
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878443485\">PR review comment</a>:</p>\n<blockquote>\n<p>We are (rightfully) burning a lot of opcode space for loads and stores, but I wonder if we can make an exception for the \"only write the bottom bits\" and always extend to the full register width? This would mean we wouldn't need both <code>xload8_s32_offset32</code> <em>and</em> <code>xload8_s64_offset32</code> and would effectively have only the latter. This would roughly cut in half the number of load/store instructions we have but wouldn't constrain the cranelift backend at all. The cost would be a couple extra extends on 32-bit platforms, which I don't think is too bad a trade off in this particular case.</p>\n<p>And FWIW, I still think the default position should be to only write the low bits of registers when doing 32-bit adds/ands/xors/etc, we are just running into all the edge cases now :)</p>\n</blockquote>",
        "id": 487298384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849476
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878432311\">PR review comment</a>:</p>\n<blockquote>\n<p>For <code>xconst*</code> I think filling the whole register is what we want regardless. They are a little different from, say, bitwise arithmetic since they aren't really an operation themselves and are more about getting data in place to perform actual operations.</p>\n<p>Although IIRC we are still zero-extending rather than sign-extending in <code>const*</code>. The latter is going to save us code size, since otherwise all negative immediates will need to be loaded in registers with <code>xconst64</code>s. But maybe we did fix this already at one point...</p>\n</blockquote>",
        "id": 487298385,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849476
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878423104\">PR review comment</a>:</p>\n<blockquote>\n<p>This actually _increases_ the number of opcodes, but _decreases_ the number of instructions in most programs. That is, with macro ops we are doing _more work per instruction_. And the reason we want to do more work per instruction is because one of the biggest costs of interpretation compared to compilation is the interpreter loop's per-instruction overhead.</p>\n</blockquote>",
        "id": 487298386,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849476
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878425601\">PR review comment</a>:</p>\n<blockquote>\n<p>Maybe also add a note about signed vs unsigned naming conventions</p>\n</blockquote>",
        "id": 487298387,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849476
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878462697\">PR review comment</a>:</p>\n<blockquote>\n<p>nitpick: Use the new helper here and elsewhere</p>\n</blockquote>",
        "id": 487298388,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849476
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2492969733\">PR review</a>.</p>",
        "id": 487298823,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849601
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878469669\">PR review comment</a>:</p>\n<blockquote>\n<p>I don't think so, since (unlike addition) subtraction lets high bits (which should be invisible) move down to the low bits (and become visible), right?</p>\n</blockquote>",
        "id": 487298824,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849601
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2492986168\">PR review</a>.</p>",
        "id": 487300069,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849966
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878480108\">PR review comment</a>:</p>\n<blockquote>\n<p>Good point, I'll add notes about the balance. I was mostly thinking here of things like RISC-V instructions where the registers are spread throughout the instruction in various locations to fit around encodings of other instructions. That's the \"super fancy\" part but I also don't think we're at risk of getting there any time soon.</p>\n</blockquote>",
        "id": 487300070,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733849966
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2493001806\">PR review</a>.</p>",
        "id": 487301381,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733850335
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878488934\">PR review comment</a>:</p>\n<blockquote>\n<p>actually I think this works correctly</p>\n</blockquote>",
        "id": 487301384,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733850335
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2493003047\">PR review</a>.</p>",
        "id": 487301517,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733850366
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878489663\">PR review comment</a>:</p>\n<blockquote>\n<p>let's merge this and get further in spec tests, and eventually differential fuzzing, which will definitely catch any issues here</p>\n</blockquote>",
        "id": 487301518,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733850366
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#pullrequestreview-2493049668\">PR review</a>.</p>",
        "id": 487305037,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733851545
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775#discussion_r1878518315\">PR review comment</a>:</p>\n<blockquote>\n<p>This I feel is a bit entangled with the question below of \"do we want <code>xload8_s32_offset32</code>\". I'm a bit worried about <code>xconst8</code> always filling the entire register mostly from the perspective of 32-bit platforms. If most constants in a program are actually 32-bits then we're in theory spending a lot of instructions to fill the upper half of the register that's never read. Cache-wise that's probably not too problematic but it's possibly problematic from an icache perspective of the implementation of <code>xconst8</code> itself.</p>\n<p>I definitely agree though that for 64-bit platforms it doesn't matter at all.</p>\n<p>For now I'm going to go ahead with this PR as-is (with <code>xload8_s32_offset32</code> for example) and these docs since we don't have a great answer one way or another and I think we're both on the fence. I'm going to add some notes to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9747\">https://github.com/bytecodealliance/wasmtime/issues/9747</a> to come back to reevaluate though.</p>\n</blockquote>",
        "id": 487305039,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733851545
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487305088,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733851562
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487305145,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733851568
    },
    {
        "content": "<p>alexcrichton updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487313739,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733854412
    },
    {
        "content": "<p>alexcrichton has enabled auto merge for <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487313760,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733854419
    },
    {
        "content": "<p>alexcrichton merged <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9775\">PR #9775</a>.</p>",
        "id": 487319662,
        "sender_full_name": "Wasmtime GitHub notifications bot",
        "timestamp": 1733856466
    }
]