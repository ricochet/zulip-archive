[
    {
        "content": "<p>jpmcb <a href=\"https://github.com/bytecodealliance/cranelift/issues/1257#issuecomment-572386869\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1257#issuecomment-572386869\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1257\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1257\">Issue #1257</a>:</p>\n<blockquote>\n<p>Howdy! I was wondering if this would be a good first issue to try out? I'm new to contributing but hoping to get involved. </p>\n<p>I've read <a href=\"https://cranelift.readthedocs.io/en/latest/testing.html\" target=\"_blank\" title=\"https://cranelift.readthedocs.io/en/latest/testing.html\">the testing cranelift</a> doc but I'm still not sure how one would go about creating a <code>*.clif</code> test. Any pointers would be great! </p>\n</blockquote>",
        "id": 185183609,
        "sender_full_name": "GitHub",
        "timestamp": 1578545835
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/1257#issuecomment-572963429\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1257#issuecomment-572963429\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1257\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1257\">Issue #1257</a>:</p>\n<blockquote>\n<p>Hi! Yes, you can start with the following test case:</p>\n<div class=\"codehilite\"><pre><span></span>test compile\ntarget x86_64\n\nfunction %test(r64) -&gt; r64 {\n    ebb0(v0: r64):\n        v1 = null.r64\n        v2 = is_null v0\n        brz v2, ebb2(v0)\n        jump ebb2(v1)\n    ebb2(v3: r64):\n        return v3\n}\n</pre></div>\n\n\n<p>When you run it with <code>cargo run test /tmp/a.clif</code>, it will complain that we're running into this error. You can start from there.</p>\n<p>Ideally, we'd have the verifier emit this error, when checking the function's body IR (in cranelift-codegen/src/verifier/mod.rs).</p>\n</blockquote>",
        "id": 185296450,
        "sender_full_name": "GitHub",
        "timestamp": 1578650760
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1257\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1257\">Issue #1257</a>:</p>\n<blockquote>\n<h1>What are the steps to reproduce the issue? Can you include a CLIF test case, ideally reduced with the <code>bugpoint</code> clif-util command?</h1>\n<p>Download <a href=\"https://github.com/bytecodealliance/cranelift/files/3886933/panic_ref_type_not_enabled.zip\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/files/3886933/panic_ref_type_not_enabled.zip\">panic_ref_type_not_enabled.zip</a></p>\n<div class=\"codehilite\"><pre><span></span>$ unzip panic_ref_type_not_enabled.zip\n$ ./target/release/clif-util wasm panic_ref_type_not_enabled.wasm --target x86_64\nthread <span class=\"s1\">&#39;main&#39;</span> panicked at <span class=\"s1\">&#39;reference types were found but safepoints were not enabled.&#39;</span>, cranelift-codegen/src/regalloc/context.rs:219:21\nnote: run with <span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span> environment variable to display a backtrace.\n</pre></div>\n\n\n<h1>What do you expect to happen? What does actually happen? Does it panic, and if so, with which assertion?</h1>\n<p>I would expect an error to be through instead of panicking. There is a call to the <code>panic!</code> macro here:<br>\n<a href=\"https://github.com/bytecodealliance/cranelift/blob/c54fc845c45b2929bdf36635c90a363e380cf805/cranelift-codegen/src/regalloc/context.rs#L215-L221\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c54fc845c45b2929bdf36635c90a363e380cf805/cranelift-codegen/src/regalloc/context.rs#L215-L221\">https://github.com/bytecodealliance/cranelift/blob/c54fc845c45b2929bdf36635c90a363e380cf805/cranelift-codegen/src/regalloc/context.rs#L215-L221</a></p>\n<h1>Which Cranelift version / commit hash / branch are you using?</h1>\n<p>Cranelift version : </p>\n<div class=\"codehilite\"><pre><span></span>$ ./target/release/clif-util --version\nCranelift code generator utility <span class=\"m\">0</span>.42.0\n</pre></div>\n\n\n<p>commit hash: c54fc845c45b2929bdf36635c90a363e380cf805<br>\nbranch: master</p>\n<h1>If relevant, can you include some extra information about your environment? (Rust version, operating system, architecture...)</h1>\n<div class=\"codehilite\"><pre><span></span>$ <span class=\"nb\">echo</span> <span class=\"s2\">&quot;`rustc -V` | `uname -ovm`&quot;</span>\nrustc <span class=\"m\">1</span>.38.0-nightly <span class=\"o\">(</span>2d1a551e1 <span class=\"m\">2019</span>-08-08<span class=\"o\">)</span> <span class=\"p\">|</span> <span class=\"c1\">#75-Ubuntu SMP Tue Oct 1 05:24:09 UTC 2019 x86_64 GNU/Linux</span>\n</pre></div>\n\n\n<h1>More details:</h1>\n<p>Execution with verbosity and print:</p>\n<div class=\"codehilite\"><pre><span></span>./target/release/clif-util wasm panic_ref_type_not_enabled.wasm --target x86_64 -v -p\nHandling: <span class=\"s2\">&quot;panic_ref_type_not_enabled.wasm&quot;</span>\nTranslating... ok\nCompiling...\n<span class=\"k\">function</span> u0:2<span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span>, i64 csr <span class=\"o\">[</span>%r15<span class=\"o\">])</span> -&gt; i32 <span class=\"o\">[</span>%rax<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span>, i64 csr <span class=\"o\">[</span>%r15<span class=\"o\">]</span> system_v <span class=\"o\">{</span>\n    <span class=\"nv\">ss0</span> <span class=\"o\">=</span> spill_slot <span class=\"m\">4</span>, offset -28\n    <span class=\"nv\">ss1</span> <span class=\"o\">=</span> incoming_arg <span class=\"m\">24</span>, offset -24\n    <span class=\"nv\">gv0</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">gv1</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">sig0</span> <span class=\"o\">=</span> <span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rsi<span class=\"o\">])</span> system_v\n    <span class=\"nv\">fn0</span> <span class=\"o\">=</span> u0:0 sig0\n\n                                ebb0<span class=\"o\">(</span>v0: i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, v1: i64 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, v28: i64 <span class=\"o\">[</span>%rbp<span class=\"o\">]</span>, v29: i64 <span class=\"o\">[</span>%r15<span class=\"o\">])</span>:\n                                    v4 -&gt; v1\n                                    v6 -&gt; v1\n                                    v9 -&gt; v1\n                                    v10 -&gt; v1\n                                    v16 -&gt; v1\n                                    v17 -&gt; v1\n                                    v19 -&gt; v1\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v28\n<span class=\"o\">[</span>RexOp1copysp#8089<span class=\"o\">]</span>                 copy_special %rsp -&gt; %rbp\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v29\n<span class=\"o\">[</span>RexOp1adjustsp_ib#d083<span class=\"o\">]</span>            adjust_sp_down_imm <span class=\"m\">8</span>\n@01ab <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v26</span> <span class=\"o\">=</span> load.i32 notrap aligned v1+88\n@01ab <span class=\"o\">[</span>RexOp1spillSib32#89,ss0<span class=\"o\">]</span>     <span class=\"nv\">v5</span> <span class=\"o\">=</span> spill v26\n                                    v23 -&gt; v5\n@01af <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v7</span> <span class=\"o\">=</span> load.i32 notrap aligned v1+88\n@01b3 <span class=\"o\">[</span>RexOp1rr#01,%rax<span class=\"o\">]</span>            <span class=\"nv\">v8</span> <span class=\"o\">=</span> iadd v7, v0\n@01b4 <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v8, v1+88\n@01b6 <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v11</span> <span class=\"o\">=</span> load.i32 notrap aligned v1+88\n@01ba <span class=\"o\">[</span>RexOp1r_ib#83,%rax<span class=\"o\">]</span>          <span class=\"nv\">v13</span> <span class=\"o\">=</span> iadd_imm v11, <span class=\"m\">15</span>\n@01bd <span class=\"o\">[</span>RexOp1r_ib#4083,%rax<span class=\"o\">]</span>        <span class=\"nv\">v15</span> <span class=\"o\">=</span> band_imm v13, -16\n@01be <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v15, v1+88\n@01c0 <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v18</span> <span class=\"o\">=</span> load.i32 notrap aligned v1+88\n@01c2 <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rcx<span class=\"o\">]</span>       <span class=\"nv\">v20</span> <span class=\"o\">=</span> load.i32 notrap aligned v1+96\n@01c4 <span class=\"o\">[</span>RexOp1rcmp#39,%rflags<span class=\"o\">]</span>       <span class=\"nv\">v25</span> <span class=\"o\">=</span> ifcmp v18, v20\n@01c5 <span class=\"o\">[</span>RexOp1brib#70<span class=\"o\">]</span>               brif slt v25, ebb2\n@01c9 <span class=\"o\">[</span>RexOp1fnaddr8#80b8,%rax<span class=\"o\">]</span>     <span class=\"nv\">v24</span> <span class=\"o\">=</span> func_addr.i64 fn0\n@01c9 <span class=\"o\">[</span>RexOp1call_r#20ff<span class=\"o\">]</span>           call_indirect sig0, v24<span class=\"o\">(</span>v0, v1<span class=\"o\">)</span>\n@01cb <span class=\"o\">[</span>-<span class=\"o\">]</span>                           fallthrough ebb2\n\n                                ebb2:\n@01ce <span class=\"o\">[</span>RexOp1fillSib32#8b,%r15<span class=\"o\">]</span>     <span class=\"nv\">v27</span> <span class=\"o\">=</span> fill.i32 v5\n@01ce <span class=\"o\">[</span>RexOp1rmov#89<span class=\"o\">]</span>               regmove v27, %r15 -&gt; %rax\n<span class=\"o\">[</span>RexOp1adjustsp_ib#8083<span class=\"o\">]</span>            adjust_sp_up_imm <span class=\"m\">8</span>\n<span class=\"o\">[</span>RexOp1popq#58,%r15<span class=\"o\">]</span>                <span class=\"nv\">v31</span> <span class=\"o\">=</span> x86_pop.i64\n<span class=\"o\">[</span>RexOp1popq#58,%rbp<span class=\"o\">]</span>                <span class=\"nv\">v30</span> <span class=\"o\">=</span> x86_pop.i64\n@01ce <span class=\"o\">[</span>Op1ret#c3<span class=\"o\">]</span>                   <span class=\"k\">return</span> v27, v30, v31\n<span class=\"o\">}</span>\n\n\n\n<span class=\"k\">function</span> u0:3<span class=\"o\">(</span>i64 vmctx <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">])</span> -&gt; i32 <span class=\"o\">[</span>%rax<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span> system_v <span class=\"o\">{</span>\n    <span class=\"nv\">ss0</span> <span class=\"o\">=</span> incoming_arg <span class=\"m\">16</span>, offset -16\n    <span class=\"nv\">gv0</span> <span class=\"o\">=</span> vmctx\n\n                                ebb0<span class=\"o\">(</span>v0: i64 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, v4: i64 <span class=\"o\">[</span>%rbp<span class=\"o\">])</span>:\n                                    v2 -&gt; v0\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v4\n<span class=\"o\">[</span>RexOp1copysp#8089<span class=\"o\">]</span>                 copy_special %rsp -&gt; %rbp\n@01d2 <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v3</span> <span class=\"o\">=</span> load.i32 notrap aligned v0+88\n<span class=\"o\">[</span>RexOp1popq#58,%rbp<span class=\"o\">]</span>                <span class=\"nv\">v5</span> <span class=\"o\">=</span> x86_pop.i64\n@01d4 <span class=\"o\">[</span>Op1ret#c3<span class=\"o\">]</span>                   <span class=\"k\">return</span> v3, v5\n<span class=\"o\">}</span>\n\n\n\n<span class=\"k\">function</span> u0:4<span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">])</span> -&gt; i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span> system_v <span class=\"o\">{</span>\n    <span class=\"nv\">ss0</span> <span class=\"o\">=</span> incoming_arg <span class=\"m\">16</span>, offset -16\n    <span class=\"nv\">gv0</span> <span class=\"o\">=</span> vmctx\n\n                                ebb0<span class=\"o\">(</span>v0: i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, v1: i64 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, v3: i64 <span class=\"o\">[</span>%rbp<span class=\"o\">])</span>:\n                                    v2 -&gt; v1\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v3\n<span class=\"o\">[</span>RexOp1copysp#8089<span class=\"o\">]</span>                 copy_special %rsp -&gt; %rbp\n@01da <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v0, v1+88\n@01dc <span class=\"o\">[</span>-<span class=\"o\">]</span>                           fallthrough ebb1\n\n                                ebb1:\n<span class=\"o\">[</span>RexOp1popq#58,%rbp<span class=\"o\">]</span>                <span class=\"nv\">v4</span> <span class=\"o\">=</span> x86_pop.i64\n@01dc <span class=\"o\">[</span>Op1ret#c3<span class=\"o\">]</span>                   <span class=\"k\">return</span> v4\n<span class=\"o\">}</span>\n\n\n\n<span class=\"k\">function</span> u0:5<span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i32 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rdx<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">])</span> -&gt; i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span> system_v <span class=\"o\">{</span>\n    <span class=\"nv\">ss0</span> <span class=\"o\">=</span> incoming_arg <span class=\"m\">16</span>, offset -16\n    <span class=\"nv\">gv0</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">gv1</span> <span class=\"o\">=</span> vmctx\n\n                                ebb0<span class=\"o\">(</span>v0: i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, v1: i32 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, v2: i64 <span class=\"o\">[</span>%rdx<span class=\"o\">]</span>, v5: i64 <span class=\"o\">[</span>%rbp<span class=\"o\">])</span>:\n                                    v3 -&gt; v2\n                                    v4 -&gt; v2\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v5\n<span class=\"o\">[</span>RexOp1copysp#8089<span class=\"o\">]</span>                 copy_special %rsp -&gt; %rbp\n@01e1 <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v0, v2+88\n@01e5 <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v1, v2+96\n@01e7 <span class=\"o\">[</span>-<span class=\"o\">]</span>                           fallthrough ebb1\n\n                                ebb1:\n<span class=\"o\">[</span>RexOp1popq#58,%rbp<span class=\"o\">]</span>                <span class=\"nv\">v6</span> <span class=\"o\">=</span> x86_pop.i64\n@01e7 <span class=\"o\">[</span>Op1ret#c3<span class=\"o\">]</span>                   <span class=\"k\">return</span> v6\n<span class=\"o\">}</span>\n\n\n\n<span class=\"k\">function</span> u0:6<span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i32 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rdx<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">])</span> -&gt; i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span> system_v <span class=\"o\">{</span>\n    <span class=\"nv\">ss0</span> <span class=\"o\">=</span> incoming_arg <span class=\"m\">16</span>, offset -16\n    <span class=\"nv\">gv0</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">gv1</span> <span class=\"o\">=</span> vmctx\n\n                                ebb0<span class=\"o\">(</span>v0: i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, v1: i32 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, v2: i64 <span class=\"o\">[</span>%rdx<span class=\"o\">]</span>, v10: i64 <span class=\"o\">[</span>%rbp<span class=\"o\">])</span>:\n                                    v3 -&gt; v2\n                                    v8 -&gt; v2\n                                    v9 -&gt; v2\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v10\n<span class=\"o\">[</span>RexOp1copysp#8089<span class=\"o\">]</span>                 copy_special %rsp -&gt; %rbp\n@01ea <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v4</span> <span class=\"o\">=</span> load.i32 notrap aligned v2+104\n@01ef <span class=\"o\">[</span>RexOp1tjccb#75<span class=\"o\">]</span>              brnz v4, ebb2\n@01f3 <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v0, v2+104\n@01f7 <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v1, v2+112\n@01f9 <span class=\"o\">[</span>-<span class=\"o\">]</span>                           fallthrough ebb2\n\n                                ebb2:\n@01fa <span class=\"o\">[</span>-<span class=\"o\">]</span>                           fallthrough ebb1\n\n                                ebb1:\n<span class=\"o\">[</span>RexOp1popq#58,%rbp<span class=\"o\">]</span>                <span class=\"nv\">v11</span> <span class=\"o\">=</span> x86_pop.i64\n@01fa <span class=\"o\">[</span>Op1ret#c3<span class=\"o\">]</span>                   <span class=\"k\">return</span> v11\n<span class=\"o\">}</span>\n\n\n\n<span class=\"p\">;</span> Exported as <span class=\"s2\">&quot;_main&quot;</span>\n<span class=\"k\">function</span> u0:7<span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i32 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rdx<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span>, i64 csr <span class=\"o\">[</span>%r15<span class=\"o\">])</span> -&gt; i32 <span class=\"o\">[</span>%rax<span class=\"o\">]</span>, i64 fp <span class=\"o\">[</span>%rbp<span class=\"o\">]</span>, i64 csr <span class=\"o\">[</span>%r15<span class=\"o\">]</span> system_v <span class=\"o\">{</span>\n    <span class=\"nv\">ss0</span> <span class=\"o\">=</span> spill_slot <span class=\"m\">8</span>, offset -32\n    <span class=\"nv\">ss1</span> <span class=\"o\">=</span> incoming_arg <span class=\"m\">24</span>, offset -24\n    <span class=\"nv\">gv0</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">gv1</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">gv2</span> <span class=\"o\">=</span> vmctx\n    <span class=\"nv\">gv3</span> <span class=\"o\">=</span> load.i64 notrap aligned <span class=\"nb\">readonly</span> gv2\n    <span class=\"nv\">heap0</span> <span class=\"o\">=</span> static gv3, min <span class=\"m\">0</span>, bound 0x0001_0000_0000, offset_guard 0x8000_0000, index_type i32\n    <span class=\"nv\">sig0</span> <span class=\"o\">=</span> <span class=\"o\">(</span>i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, i64 vmctx <span class=\"o\">[</span>%rsi<span class=\"o\">])</span> system_v\n    <span class=\"nv\">fn0</span> <span class=\"o\">=</span> u0:0 sig0\n\n                                ebb0<span class=\"o\">(</span>v0: i32 <span class=\"o\">[</span>%rdi<span class=\"o\">]</span>, v1: i32 <span class=\"o\">[</span>%rsi<span class=\"o\">]</span>, v33: i64 <span class=\"o\">[</span>%rdx<span class=\"o\">]</span>, v40: i64 <span class=\"o\">[</span>%rbp<span class=\"o\">]</span>, v41: i64 <span class=\"o\">[</span>%r15<span class=\"o\">])</span>:\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v40\n<span class=\"o\">[</span>RexOp1copysp#8089<span class=\"o\">]</span>                 copy_special %rsp -&gt; %rbp\n<span class=\"o\">[</span>RexOp1pushq#50<span class=\"o\">]</span>                    x86_push v41\n<span class=\"o\">[</span>RexOp1adjustsp_ib#d083<span class=\"o\">]</span>            adjust_sp_down_imm <span class=\"m\">8</span>\n<span class=\"o\">[</span>RexOp1spillSib32#8089,ss0<span class=\"o\">]</span>         <span class=\"nv\">v2</span> <span class=\"o\">=</span> spill v33\n                                    v5 -&gt; v2\n                                    v7 -&gt; v2\n                                    v11 -&gt; v2\n                                    v12 -&gt; v2\n                                    v14 -&gt; v2\n@0204 <span class=\"o\">[</span>RexOp1fillSib32#808b,%r15<span class=\"o\">]</span>   <span class=\"nv\">v34</span> <span class=\"o\">=</span> fill v2\n@0204 <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v8</span> <span class=\"o\">=</span> load.i32 notrap aligned v34+88\n@0208 <span class=\"o\">[</span>RexOp1r_ib#83,%rax<span class=\"o\">]</span>          <span class=\"nv\">v10</span> <span class=\"o\">=</span> iadd_imm v8, <span class=\"m\">48</span>\n@0209 <span class=\"o\">[</span>RexOp1fillSib32#808b,%r15<span class=\"o\">]</span>   <span class=\"nv\">v35</span> <span class=\"o\">=</span> fill v2\n@0209 <span class=\"o\">[</span>RexOp1stDisp8#89<span class=\"o\">]</span>            store notrap aligned v10, v35+88\n@020b <span class=\"o\">[</span>RexOp1fillSib32#808b,%r15<span class=\"o\">]</span>   <span class=\"nv\">v36</span> <span class=\"o\">=</span> fill v2\n@020b <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rax<span class=\"o\">]</span>       <span class=\"nv\">v13</span> <span class=\"o\">=</span> load.i32 notrap aligned v36+88\n@020d <span class=\"o\">[</span>RexOp1fillSib32#808b,%r15<span class=\"o\">]</span>   <span class=\"nv\">v37</span> <span class=\"o\">=</span> fill v2\n@020d <span class=\"o\">[</span>RexOp1ldDisp8#8b,%rcx<span class=\"o\">]</span>       <span class=\"nv\">v15</span> <span class=\"o\">=</span> load.i32 notrap aligned v37+96\n@020f <span class=\"o\">[</span>RexOp1rcmp#39,%rflags<span class=\"o\">]</span>       <span class=\"nv\">v32</span> <span class=\"o\">=</span> ifcmp v13, v15\n@0210 <span class=\"o\">[</span>RexOp1brib#70<span class=\"o\">]</span>               brif slt v32, ebb2\n@0212 <span class=\"o\">[</span>RexOp1pu_id#b8,%rax<span class=\"o\">]</span>         <span class=\"nv\">v18</span> <span class=\"o\">=</span> iconst.i32 <span class=\"m\">48</span>\n@0214 <span class=\"o\">[</span>RexOp1fnaddr8#80b8,%rcx<span class=\"o\">]</span>     <span class=\"nv\">v29</span> <span class=\"o\">=</span> func_addr.i64 fn0\n@0214 <span class=\"o\">[</span>RexOp1fillSib32#808b,%r15<span class=\"o\">]</span>   <span class=\"nv\">v38</span> <span class=\"o\">=</span> fill v2\n@0214 <span class=\"o\">[</span>RexOp1rmov#89<span class=\"o\">]</span>               regmove v18, %rax -&gt; %rdi\n@0214 <span class=\"o\">[</span>RexOp1rmov#8089<span class=\"o\">]</span>             regmove v38, %r15 -&gt; %rsi\n@0214 <span class=\"o\">[</span>RexOp1call_r#20ff<span class=\"o\">]</span>           call_indirect sig0, v29<span class=\"o\">(</span>v18, v38<span class=\"o\">)</span>\n@0216 <span class=\"o\">[</span>-<span class=\"o\">]</span>                           fallthrough ebb2\n\n                                ebb2:\n@0230 <span class=\"o\">[</span>RexOp1pu_id#b8,%rax<span class=\"o\">]</span>         <span class=\"nv\">v26</span> <span class=\"o\">=</span> iconst.i32 <span class=\"m\">0</span>\n@0232 <span class=\"o\">[</span>RexOp1umr#89,%rax<span class=\"o\">]</span>           <span class=\"nv\">v30</span> <span class=\"o\">=</span> uextend.i64 v26\n@0232 <span class=\"o\">[</span>RexOp1fillSib32#808b,%r15<span class=\"o\">]</span>   <span class=\"nv\">v39</span> <span class=\"o\">=</span> fill.i64 v2\n@0232 <span class=\"o\">[</span>RexOp1ld#808b,%rcx<span class=\"o\">]</span>          <span class=\"nv\">v31</span> <span class=\"o\">=</span> load.i64 notrap aligned <span class=\"nb\">readonly</span> v39\n\n<span class=\"o\">[</span>message truncated<span class=\"o\">]</span>\n</pre></div>\n\n\n</blockquote>",
        "id": 189361667,
        "sender_full_name": "GitHub",
        "timestamp": 1582932465
    }
]