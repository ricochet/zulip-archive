[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/455\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/455\">Issue #455</a>:</p>\n<blockquote>\n<p>Currently, cranelift <a href=\"https://github.com/CraneStation/cranelift/blob/master/lib/codegen/src/regalloc/spilling.rs#L264\" target=\"_blank\" title=\"https://github.com/CraneStation/cranelift/blob/master/lib/codegen/src/regalloc/spilling.rs#L264\">spills all registers across calls</a>, without regard to whether they're callee-saved.</p>\n<p>However the nice thing about callee-saved registers is that they're saved across calls ;-), and Cranelift indeed <a href=\"https://github.com/CraneStation/cranelift/blob/master/lib/codegen/src/isa/x86/abi.rs#L192\" target=\"_blank\" title=\"https://github.com/CraneStation/cranelift/blob/master/lib/codegen/src/isa/x86/abi.rs#L192\">supports the callee side of this</a>.</p>\n<p>At a high level, the steps here are:</p>\n<ul>\n<li>Generalize x86's <code>callee_saved_gprs</code> into <code>callee_saved_regs</code> and make it not specific to GPRs (this appears needed for saving XMM registers on windows_fastcall too). </li>\n<li>Refactor this <code>callee_saved_regs</code> from being a private function to being a function in the <code>TargetIsa</code> trait, so that we can access the <code>callee_saved_gprs</code> from other places in the code.</li>\n<li>Make the code mentioned above in <a href=\"http://spilling.rs\" target=\"_blank\" title=\"http://spilling.rs\">spilling.rs</a> consult the <code>TargetIsa</code>'s <code>callee_saved_regs</code> set and skip spilling registers in the callee-saved set.</li>\n</ul>\n</blockquote>",
        "id": 189361349,
        "sender_full_name": "GitHub",
        "timestamp": 1582932281
    }
]