[
    {
        "content": "<p>nalmt opened <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a> from <code>pathological_case_951</code> to <code>master</code>:</p>\n<blockquote>\n<p>To fix this case (#951) that may take forever to compile:</p>\n<div class=\"codehilite\"><pre><span></span>function %a(){\nebb477777777:\n}\n</pre></div>\n\n\n<p>We decide to define a maximum threshold for the number of blocks in functions.</p>\n<p>Based on a large WASM program (<a href=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\" target=\"_blank\" title=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\">https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm</a>),<br>\nits IR functions does not exceed 1414 blocks. A number 100 times greater (100,000 blocks) seems (currently) enough to define our maximum threshold.</p>\n<p>To make this quick benchmark the cranelift-wasm/src/func_translator.rs file has been modified like this:</p>\n<div class=\"codehilite\"><pre><span></span>static mut MAX: usize = 0;\n\npub fn translate_from_reader&lt;FE: FuncEnvironment + ?Sized&gt;(...) {\n\n    [...]\n\n    builder.finalize();\n\n    // the compiler is single threaded\n    unsafe {\n        if func.dfg.num_ebbs() &gt; MAX {\n            MAX = func.dfg.num_ebbs();\n            println!(&quot;MAX {}&quot;, MAX);\n        }\n    }\n\n    Ok(())\n}\n</pre></div>\n\n\n</blockquote>",
        "id": 188531629,
        "sender_full_name": "GitHub",
        "timestamp": 1582107864
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-360996940\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-360996940\">PR Review</a>.</p>",
        "id": 188531738,
        "sender_full_name": "GitHub",
        "timestamp": 1582107990
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-360996940\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-360996940\">PR Review</a>.</p>",
        "id": 188531739,
        "sender_full_name": "GitHub",
        "timestamp": 1582107990
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#discussion_r381203057\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#discussion_r381203057\">PR Review Comment</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span>const MAX_BLOCKS_IN_A_FUNCTION: u32 = 100_000;\n</pre></div>\n\n\n</blockquote>",
        "id": 188531740,
        "sender_full_name": "GitHub",
        "timestamp": 1582107990
    },
    {
        "content": "<p>nalmt updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a> from <code>pathological_case_951</code> to <code>master</code>:</p>\n<blockquote>\n<p>To fix this case (#951) that may take forever to compile:</p>\n<div class=\"codehilite\"><pre><span></span>function %a(){\nebb477777777:\n}\n</pre></div>\n\n\n<p>We decide to define a maximum threshold for the number of blocks in functions.</p>\n<p>Based on a large WASM program (<a href=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\" target=\"_blank\" title=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\">https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm</a>),<br>\nits IR functions does not exceed 1414 blocks. A number 100 times greater (100,000 blocks) seems (currently) enough to define our maximum threshold.</p>\n<p>To make this quick benchmark the cranelift-wasm/src/func_translator.rs file has been modified like this:</p>\n<div class=\"codehilite\"><pre><span></span>static mut MAX: usize = 0;\n\npub fn translate_from_reader&lt;FE: FuncEnvironment + ?Sized&gt;(...) {\n\n    [...]\n\n    builder.finalize();\n\n    // the compiler is single threaded\n    unsafe {\n        if func.dfg.num_ebbs() &gt; MAX {\n            MAX = func.dfg.num_ebbs();\n            println!(&quot;MAX {}&quot;, MAX);\n        }\n    }\n\n    Ok(())\n}\n</pre></div>\n\n\n</blockquote>",
        "id": 188534728,
        "sender_full_name": "GitHub",
        "timestamp": 1582110451
    },
    {
        "content": "<p>nalmt updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a> from <code>pathological_case_951</code> to <code>master</code>:</p>\n<blockquote>\n<p>To fix this case (#951) that may take forever to compile:</p>\n<div class=\"codehilite\"><pre><span></span>function %a(){\nebb477777777:\n}\n</pre></div>\n\n\n<p>We decide to define a maximum threshold for the number of blocks in functions.</p>\n<p>Based on a large WASM program (<a href=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\" target=\"_blank\" title=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\">https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm</a>),<br>\nits IR functions does not exceed 1414 blocks. A number 100 times greater (100,000 blocks) seems (currently) enough to define our maximum threshold.</p>\n<p>To make this quick benchmark the cranelift-wasm/src/func_translator.rs file has been modified like this:</p>\n<div class=\"codehilite\"><pre><span></span>static mut MAX: usize = 0;\n\npub fn translate_from_reader&lt;FE: FuncEnvironment + ?Sized&gt;(...) {\n\n    [...]\n\n    builder.finalize();\n\n    // the compiler is single threaded\n    unsafe {\n        if func.dfg.num_ebbs() &gt; MAX {\n            MAX = func.dfg.num_ebbs();\n            println!(&quot;MAX {}&quot;, MAX);\n        }\n    }\n\n    Ok(())\n}\n</pre></div>\n\n\n</blockquote>",
        "id": 188535713,
        "sender_full_name": "GitHub",
        "timestamp": 1582111489
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/bnjbvr\" target=\"_blank\" title=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a>.</p>",
        "id": 188727901,
        "sender_full_name": "GitHub",
        "timestamp": 1582289265
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-362610468\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-362610468\">PR Review</a>.</p>",
        "id": 188728568,
        "sender_full_name": "GitHub",
        "timestamp": 1582289912
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#discussion_r382567318\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#discussion_r382567318\">PR Review Comment</a>:</p>\n<blockquote>\n<p>nit: since block numbers start at 0, there's an off-by-one here, and it will accept 100,000 blocks, but not 100,001, which is why the test had to contain the latter number. Can you use \"&gt;=\" here instead, please?</p>\n</blockquote>",
        "id": 188728569,
        "sender_full_name": "GitHub",
        "timestamp": 1582289912
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-362610468\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-362610468\">PR Review</a>.</p>",
        "id": 188728570,
        "sender_full_name": "GitHub",
        "timestamp": 1582289912
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#discussion_r382567563\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#discussion_r382567563\">PR Review Comment</a>:</p>\n<blockquote>\n<p>(and then you can adjust this number to be 100000.)</p>\n</blockquote>",
        "id": 188728571,
        "sender_full_name": "GitHub",
        "timestamp": 1582289912
    },
    {
        "content": "<p>nalmt updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a> from <code>pathological_case_951</code> to <code>master</code>:</p>\n<blockquote>\n<p>To fix this case (#951) that may take forever to compile:</p>\n<div class=\"codehilite\"><pre><span></span>function %a(){\nebb477777777:\n}\n</pre></div>\n\n\n<p>We decide to define a maximum threshold for the number of blocks in functions.</p>\n<p>Based on a large WASM program (<a href=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\" target=\"_blank\" title=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\">https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm</a>),<br>\nits IR functions does not exceed 1414 blocks. A number 100 times greater (100,000 blocks) seems (currently) enough to define our maximum threshold.</p>\n<p>To make this quick benchmark the cranelift-wasm/src/func_translator.rs file has been modified like this:</p>\n<div class=\"codehilite\"><pre><span></span>static mut MAX: usize = 0;\n\npub fn translate_from_reader&lt;FE: FuncEnvironment + ?Sized&gt;(...) {\n\n    [...]\n\n    builder.finalize();\n\n    // the compiler is single threaded\n    unsafe {\n        if func.dfg.num_ebbs() &gt; MAX {\n            MAX = func.dfg.num_ebbs();\n            println!(&quot;MAX {}&quot;, MAX);\n        }\n    }\n\n    Ok(())\n}\n</pre></div>\n\n\n</blockquote>",
        "id": 188868994,
        "sender_full_name": "GitHub",
        "timestamp": 1582463826
    },
    {
        "content": "<p>nalmt updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a> from <code>pathological_case_951</code> to <code>master</code>:</p>\n<blockquote>\n<p>To fix this case (#951) that may take forever to compile:</p>\n<div class=\"codehilite\"><pre><span></span>function %a(){\nebb477777777:\n}\n</pre></div>\n\n\n<p>We decide to define a maximum threshold for the number of blocks in functions.</p>\n<p>Based on a large WASM program (<a href=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\" target=\"_blank\" title=\"https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm\">https://github.com/mozilla/perf-automation/blob/master/benchmarks/wasm-misc/AngryBots.wasm</a>),<br>\nits IR functions does not exceed 1414 blocks. A number 100 times greater (100,000 blocks) seems (currently) enough to define our maximum threshold.</p>\n<p>To make this quick benchmark the cranelift-wasm/src/func_translator.rs file has been modified like this:</p>\n<div class=\"codehilite\"><pre><span></span>static mut MAX: usize = 0;\n\npub fn translate_from_reader&lt;FE: FuncEnvironment + ?Sized&gt;(...) {\n\n    [...]\n\n    builder.finalize();\n\n    // the compiler is single threaded\n    unsafe {\n        if func.dfg.num_ebbs() &gt; MAX {\n            MAX = func.dfg.num_ebbs();\n            println!(&quot;MAX {}&quot;, MAX);\n        }\n    }\n\n    Ok(())\n}\n</pre></div>\n\n\n</blockquote>",
        "id": 188869244,
        "sender_full_name": "GitHub",
        "timestamp": 1582464366
    },
    {
        "content": "<p><strong>nalmt</strong> requested <a href=\"https://github.com/bnjbvr\" target=\"_blank\" title=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a>.</p>",
        "id": 188870289,
        "sender_full_name": "GitHub",
        "timestamp": 1582466363
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-363241866\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397#pullrequestreview-363241866\">PR Review</a>.</p>",
        "id": 188909658,
        "sender_full_name": "GitHub",
        "timestamp": 1582535430
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/cranelift/pull/1397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1397\">PR #1397</a>.</p>",
        "id": 188909667,
        "sender_full_name": "GitHub",
        "timestamp": 1582535440
    }
]