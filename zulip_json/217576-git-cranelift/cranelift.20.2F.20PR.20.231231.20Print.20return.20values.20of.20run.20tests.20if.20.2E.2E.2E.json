[
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-337126575\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-337126575\">PR Review</a>.</p>",
        "id": 184476426,
        "sender_full_name": "GitHub",
        "timestamp": 1577716898
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r362002892\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r362002892\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Makes sense</p>\n</blockquote>",
        "id": 184476428,
        "sender_full_name": "GitHub",
        "timestamp": 1577716898
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r362003938\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r362003938\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>ConstantData</code> is stored in little endian format. <code>ConstantDataU128</code> converts it to a native endian <code>u128</code>, so no swap should be necessary.</p>\n</blockquote>",
        "id": 184476668,
        "sender_full_name": "GitHub",
        "timestamp": 1577717154
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-337127925\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-337127925\">PR Review</a>.</p>",
        "id": 184476669,
        "sender_full_name": "GitHub",
        "timestamp": 1577717154
    },
    {
        "content": "<p><strong>bnjbvr</strong> requested <a href=\"https://github.com/fitzgen\" target=\"_blank\" title=\"https://github.com/fitzgen\">fitzgen</a>, and <a href=\"https://github.com/abrown\" target=\"_blank\" title=\"https://github.com/abrown\">abrown</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">PR #1231</a>.</p>",
        "id": 184928988,
        "sender_full_name": "GitHub",
        "timestamp": 1578333188
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-338881629\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-338881629\">PR Review</a>.</p>",
        "id": 184955745,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-338881629\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#pullrequestreview-338881629\">PR Review</a>.</p>",
        "id": 184955746,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363472649\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363472649\">PR Review Comment</a>:</p>\n<blockquote>\n<p>We shouldn't panic on parse errors, we should return a fallible <code>ParseResult</code> like other parsing functions do.</p>\n<p>Additionally, it seems a little strange that we have this parsing code in the <code>cranelift-filetests</code> crate, when AFAICT all the other parsing code is in the <code>cranelift-reader</code> crate. Unless there is a good reason not to, we should match existing conventions and keep the parsing code inside <code>cranelift-reader</code>.</p>\n</blockquote>",
        "id": 184955747,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363474115\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363474115\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It isn't clear to me what the resolution is here, if any.</p>\n</blockquote>",
        "id": 184955748,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363473979\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363473979\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Was this still going to happen?</p>\n</blockquote>",
        "id": 184955749,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363473229\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363473229\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I believe that moving that parsing code into this <code>cranelift-reader</code> crate would let us avoid making all these methods public as well.</p>\n</blockquote>",
        "id": 184955750,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363478060\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231#discussion_r363478060\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Instead of making an ad-hoc <code>try_into</code> method, we should follow convention and implement the <code>TryFrom</code> trait, which gives us a <code>try_into</code> via the blanket impl <code>TryInto&lt;T&gt; for U</code> where <code>U: TryFrom&lt;T&gt;</code>. For details, see: <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.TryInto.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/stable/std/convert/trait.TryInto.html\">https://doc.rust-lang.org/stable/std/convert/trait.TryInto.html</a> and <a href=\"https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html\">https://doc.rust-lang.org/stable/std/convert/trait.TryFrom.html</a></p>\n<p>If I'm reading this code right, it would be something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"cp\">$name</span><span class=\"p\">(</span><span class=\"n\">ConstantData</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">TryFrom</span><span class=\"o\">&lt;</span><span class=\"cp\">$name</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>But this also makes me wonder why we don't implement <code>TryFrom&lt;ConstantData&gt; for $type</code> directly instead of creating all these temporary <code>ConstantData$Type</code> types. Is that something that you explored at all? I think it would be the best course to take, unless it doesn't work for some reason or I am overlooking something else.</p>\n</blockquote>",
        "id": 184955752,
        "sender_full_name": "GitHub",
        "timestamp": 1578344357
    },
    {
        "content": "<p>krk closed without merge <a href=\"https://github.com/bytecodealliance/cranelift/pull/1231\" title=\"https://github.com/bytecodealliance/cranelift/pull/1231\">PR #1231</a>.</p>",
        "id": 192926685,
        "sender_full_name": "GitHub",
        "timestamp": 1586033803
    }
]