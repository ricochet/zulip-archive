[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/544\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/544\">Issue #544</a>:</p>\n<blockquote>\n<p>The verifier functions have an API that could probably be simplified. Functions which return <code>VerifierStepResult</code> must by convention also take an out-param <code>VerifierErrors</code> that will contain non-fatal errors.</p>\n<p>Moreover, the <code>T</code> in <code>VerifierStepResult&lt;T&gt;</code> seems to always be set to <code>()</code>, so it's unused.</p>\n<p>It seems the out param is redundant with the error that's present in the <code>Result</code> hidden <code>VerifierStepResult</code>. I think slightly modifying the interface of <code>VerifierStepResult</code> would avoid this out param:</p>\n<ul>\n<li>let the <code>Ok</code> type be <code>VerifierErrors</code>, in case we only have non-fatal errors (they could be called \"warnings\").</li>\n<li>let the <code>Err</code> type stay the same (<code>VerifierErrors</code> too), and contain non-fatal and fatal errors, if there was at least one fatal error.</li>\n</ul>\n<p>Then we wouldn't need the <code>errors</code> outparam anymore, which looks cleaner and \"more Rusty\". It might mean that a few users of the <code>fatal!</code> etc macros would need to have their own <code>errors</code> variable, but that seems OK.</p>\n<p>Thoughts?</p>\n</blockquote>",
        "id": 189361374,
        "sender_full_name": "GitHub",
        "timestamp": 1582932304
    }
]