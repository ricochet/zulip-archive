[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/350\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/350\">Issue #350</a>:</p>\n<blockquote>\n<p>DWARF line table support may be a good way to get started with the broader topic of producing debug info, as it's relatively straightforward, and quite valuable.</p>\n<p>Briefly surveying the landscape, the three main options appear to be:</p>\n<ul>\n<li>Add dwarf writing support to the <a href=\"https://crates.io/crates/gimli\" target=\"_blank\" title=\"https://crates.io/crates/gimli\">gimli crate</a>. The gimli crate doesn't have any support for writing DWARF, and I don't know whether the maintainers would be interested in accepting patches for that, but it's worth exploring.</li>\n<li>Write a new DWARF producer library.</li>\n<li>Create Rust bindings to an existing C/C++ dwarf producer library, such as <a href=\"https://github.com/tomhughes/libdwarf\" target=\"_blank\" title=\"https://github.com/tomhughes/libdwarf\">libdwarf</a>. It'd be fun to pursue a pure-Rust solution instead, however using a C/C++ library might be a quicker way to get something working without delving into the lowest level of DWARF encoding.</li>\n</ul>\n<p>(There is also the <a href=\"https://crates.io/crates/dwarf\" target=\"_blank\" title=\"https://crates.io/crates/dwarf\">dwarf crate</a> has rudimentary support for writing, though not yet writing .debug_line sections. Judging by <a href=\"https://github.com/philipc/rust-dwarf/issues/1#issuecomment-233265994\" target=\"_blank\" title=\"https://github.com/philipc/rust-dwarf/issues/1#issuecomment-233265994\">this comment</a>, it seems no longer maintained, in favor of gimli.)</p>\n<p>Regardless of how we implement it, the code for consuming cretonne IR and emitting DWARF should be in a new crate, as other users of the cretonne-codegen crate won't need it. It will need to emit the binary data for the section, plus relocation records telling the linker where to fix up program addresses.</p>\n<p>The first step is to write a minimal <code>.debug_info</code> section, containing a <code>DW_TAG_compile_unit</code>, and a <code>DW_TAG_subprogram</code> entry for each function. Chapter 2 \"General Description\" of the <a href=\"http://dwarfstd.org/doc/DWARF5.pdf\" target=\"_blank\" title=\"http://dwarfstd.org/doc/DWARF5.pdf\">dwarf spec</a> defines the overall structure of these. I also recommend either the dwarfdump utility and/or <code>readelf --debug-dump=info,lines</code> for examining DWARF output from other compilers to get a sense of what this needs to look like. Then, we can implement the line table. Section 6.2 \"Line Number Information\" defines the line table format. I'll flesh out these steps more when we're ready; right now I'm just sketching out the major areas that would be covered.</p>\n</blockquote>",
        "id": 189361338,
        "sender_full_name": "GitHub",
        "timestamp": 1582932270
    }
]