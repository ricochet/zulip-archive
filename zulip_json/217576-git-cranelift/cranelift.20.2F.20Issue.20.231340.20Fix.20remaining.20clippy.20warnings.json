[
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-573784694\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-573784694\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>@philipc, based on your comment <a href=\"https://github.com/bytecodealliance/cranelift/pull/1324#discussion_r365509394\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1324#discussion_r365509394\">https://github.com/bytecodealliance/cranelift/pull/1324#discussion_r365509394</a> I added 1195612 as well.</p>\n</blockquote>",
        "id": 185516745,
        "sender_full_name": "GitHub",
        "timestamp": 1578937518
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574327509\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574327509\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>@yurydelendik, the clippy error comes at line 255:</p>\n<div class=\"codehilite\"><pre><span></span>error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u32`) (1 &lt; 4 bytes)\n   --&gt; cranelift-codegen/src/isa/x86/fde.rs:255:48\n    |\n255 |     let fde_offset = unsafe { ptr::read::&lt;u32&gt;(bytes.as_ptr() as *const u32) } as usize + 4;\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[deny(clippy::cast_ptr_alignment)]` on by default\n    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment\n</pre></div>\n\n\n<p>How do you think this should be fixed? Do we know that <code>bytes</code> is aligned to a 4-byte boundary or can we get there?</p>\n</blockquote>",
        "id": 185629006,
        "sender_full_name": "GitHub",
        "timestamp": 1579029201
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574329053\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574329053\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>Or perhaps <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.align_to\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.align_to\">https://doc.rust-lang.org/std/vec/struct.Vec.html#method.align_to</a> and assert that the prefix has zero length?</p>\n</blockquote>",
        "id": 185629419,
        "sender_full_name": "GitHub",
        "timestamp": 1579029433
    },
    {
        "content": "<p>abrown edited a <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574329053\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574329053\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>Or perhaps <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.align_to\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.align_to\">https://doc.rust-lang.org/std/vec/struct.Vec.html#method.align_to</a> and assert that the prefix has zero length?</p>\n<p>[edit: 6eb09da does just that]</p>\n</blockquote>",
        "id": 185633737,
        "sender_full_name": "GitHub",
        "timestamp": 1579031826
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574961458\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-574961458\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<blockquote>\n<p>error: casting from <code>*const u8</code> to a more-strictly-aligned pointer (<code>*const u32</code>) (1 &lt; 4 bytes)<br>\n   --&gt; cranelift-codegen/src/isa/x86/fde.rs:255:48<br>\nHow do you think this should be fixed? Do we know that <code>bytes</code> is aligned to a 4-byte boundary or can we get there?</p>\n</blockquote>\n<p>There was a thread probably related to this: <a href=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366016546\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366016546\">https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366016546</a> -- <code>u32::from_le_bytes(bytes.as_slice()[..8].try_into()</code> may not need alignment?</p>\n</blockquote>",
        "id": 185781500,
        "sender_full_name": "GitHub",
        "timestamp": 1579144224
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575249956\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575249956\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>@yurydelendik, @iximeow: is 0252c77 what you meant? The tests will likely fail (they fail on my system) so I don't think I understood exactly what was intended here.</p>\n</blockquote>",
        "id": 185835936,
        "sender_full_name": "GitHub",
        "timestamp": 1579194406
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575264766\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575264766\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>@abrown my point was to remove the <code>unsafe ptr::read</code> entirely, and replace it with the <code>from_le_bytes</code> expression. mentally conflating the pointer size and <code>u32</code> size is why i wrote the wrong slice length <code>[..8]</code> instead of <code>[..4]</code> :)</p>\n<div class=\"codehilite\"><pre><span></span>let fde_offset = u32::from_le_bytes(bytes.as_slice()[..4]\n    .try_into()\n    .expect(&quot;4 bytes at the beginning of the allocated FDE&quot;) as usize + 4;\n</pre></div>\n\n\n<p>is what i was thinking should be a good substitute. i'm pretty sure we can actually be confident there will be a <code>u32</code> of bytes there, so the <code>expect</code> ought to never fail.</p>\n</blockquote>",
        "id": 185839577,
        "sender_full_name": "GitHub",
        "timestamp": 1579196501
    },
    {
        "content": "<p>iximeow edited a <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575264766\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575264766\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>@abrown my point was to remove the <code>unsafe ptr::read</code> entirely, and replace it with the <code>from_le_bytes</code> expression. mentally conflating the pointer size and <code>u32</code> size is why i wrote the wrong slice length <code>[..8]</code> instead of <code>[..4]</code> :)</p>\n<div class=\"codehilite\"><pre><span></span>let fde_offset = u32::from_le_bytes(bytes.as_slice()[..4]\n    .try_into()\n    .expect(&quot;4 bytes at the beginning of the allocated FDE&quot;) as usize + 4;\n</pre></div>\n\n\n<p>is what i was thinking should be a good substitute. i'm pretty sure we can actually be confident there will be a <code>u32</code> of bytes there, so the <code>expect</code> ought to never fail.</p>\n<p>edit: I see we raced and you _just_ pushed a commit with that change!</p>\n</blockquote>",
        "id": 185839713,
        "sender_full_name": "GitHub",
        "timestamp": 1579196568
    },
    {
        "content": "<p>yurydelendik <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575774972\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340#issuecomment-575774972\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1340\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1340\">Issue #1340</a>:</p>\n<blockquote>\n<p>Thank you for the patch</p>\n</blockquote>",
        "id": 185951291,
        "sender_full_name": "GitHub",
        "timestamp": 1579291424
    }
]