[
    {
        "content": "<p>jyn514 opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1357\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1357\">Issue #1357</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift?</li>\n</ul>\n<p>I would like <a href=\"https://docs.rs/cranelift-frontend/0.56.0/cranelift_frontend/struct.Switch.html\" target=\"_blank\" title=\"https://docs.rs/cranelift-frontend/0.56.0/cranelift_frontend/struct.Switch.html\"><code>Switch</code></a> to have a new method <code>entries()</code> added which returns an immutable list of the existing entries.</p>\n<ul>\n<li>What is the value of adding this in Cranelift?</li>\n</ul>\n<p>This would allow me to check in the codegen module whether a <code>case</code> expression has already been added, instead of having to frontload it in the parser (which for various reasons would be possible but annoying).</p>\n<ul>\n<li>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">entries</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">EntryIndex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ebb</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cases</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<ul>\n<li>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal?</li>\n</ul>\n<p>Alternatively, Cranelift could <code>impl Deref&lt;Target = HashMap&lt;...&gt;&gt;</code> for Switch. This would also provide more methods at the same time.</p>\n<p>Cranelift could also choose to do nothing at all.</p>\n</blockquote>",
        "id": 186052550,
        "sender_full_name": "GitHub",
        "timestamp": 1579463136
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1357#issuecomment-576523902\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1357#issuecomment-576523902\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1357\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1357\">Issue #1357</a>:</p>\n<blockquote>\n<p>Added in <a href=\"https://github.com/bytecodealliance/cranelift/pull/1358\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1358\">https://github.com/bytecodealliance/cranelift/pull/1358</a></p>\n</blockquote>",
        "id": 186154575,
        "sender_full_name": "GitHub",
        "timestamp": 1579584454
    },
    {
        "content": "<p>jyn514 closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1357\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1357\">Issue #1357</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift?</li>\n</ul>\n<p>I would like <a href=\"https://docs.rs/cranelift-frontend/0.56.0/cranelift_frontend/struct.Switch.html\" target=\"_blank\" title=\"https://docs.rs/cranelift-frontend/0.56.0/cranelift_frontend/struct.Switch.html\"><code>Switch</code></a> to have a new method <code>entries()</code> added which returns an immutable list of the existing entries.</p>\n<ul>\n<li>What is the value of adding this in Cranelift?</li>\n</ul>\n<p>This would allow me to check in the codegen module whether a <code>case</code> expression has already been added, instead of having to frontload it in the parser (which for various reasons would be possible but annoying).</p>\n<ul>\n<li>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">entries</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">EntryIndex</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ebb</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cases</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<ul>\n<li>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal?</li>\n</ul>\n<p>Alternatively, Cranelift could <code>impl Deref&lt;Target = HashMap&lt;...&gt;&gt;</code> for Switch. This would also provide more methods at the same time.</p>\n<p>Cranelift could also choose to do nothing at all.</p>\n</blockquote>",
        "id": 186154576,
        "sender_full_name": "GitHub",
        "timestamp": 1579584454
    }
]