[
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568119897\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568119897\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307\">Issue #1307</a>:</p>\n<blockquote>\n<p>We should probably not have only \"infallible\" constructors for entity indices, when you can give \"invalid\" inputs to them... That is, I think we should have</p>\n<ul>\n<li><code>FuncIndex::try_from_u32(u32) -&gt; Result&lt;Self, SomeErrorType&gt;</code></li>\n<li><code>FuncIndex::from_u32(u32) -&gt; Self</code> and panics if given <code>u32::MAX</code></li>\n<li><code>FuncIndex::from_u32_unchecked(u32) -&gt; Self</code> which only debug-asserts that it is not given <code>u32::MAX</code> (aka the current behavior of <code>from_u32</code>)</li>\n</ul>\n<p>But this is a bit more invasive and has implications across cranelift, so I've opted not to do it, for now at least.</p>\n</blockquote>",
        "id": 183982384,
        "sender_full_name": "GitHub",
        "timestamp": 1576883213
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568135942\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568135942\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307\">Issue #1307</a>:</p>\n<blockquote>\n<p>Also, fwiw, your suggestion about <code>try_from_u32</code> etc. makes sense to me.</p>\n</blockquote>",
        "id": 183987681,
        "sender_full_name": "GitHub",
        "timestamp": 1576889327
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568139836\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568139836\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307\">Issue #1307</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is it feasible to check in the test file in wat format, rather than wasm?</p>\n</blockquote>\n<p>Not that I know of (I could be wrong!) since this is something that requires semi-bogus custom section data. I don't know how to write WAT like that.</p>\n</blockquote>",
        "id": 183989245,
        "sender_full_name": "GitHub",
        "timestamp": 1576891655
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568140817\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307#issuecomment-568140817\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1307\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1307\">Issue #1307</a>:</p>\n<blockquote>\n<blockquote>\n<p>it's useful to give the test a descriptive name</p>\n</blockquote>\n<p>Updated the name to <code>issue-1306-name-section-with-u32-max-function-index.wasm</code>, let me know if you want it to be something else.</p>\n</blockquote>",
        "id": 183989734,
        "sender_full_name": "GitHub",
        "timestamp": 1576892353
    }
]