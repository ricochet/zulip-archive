[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/595\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/595\">Issue #595</a>:</p>\n<blockquote>\n<p>The <code>arguments</code> function for instructions returns a slice of the operands of an instruction, so it's called a lot. It's generated by <code>gen_arguments_method</code> here:</p>\n<p><a href=\"https://github.com/CraneStation/cranelift/blob/master/lib/codegen/meta-python/gen_instr.py#L60\" target=\"_blank\" title=\"https://github.com/CraneStation/cranelift/blob/master/lib/codegen/meta-python/gen_instr.py#L60\">https://github.com/CraneStation/cranelift/blob/master/lib/codegen/meta-python/gen_instr.py#L60</a></p>\n<p>Currently, there are several possible formats for instructions, so it does a <code>match</code> to determine how to retrieve the arguments slice. In practice, it's compiled to an indirect jump with a table.</p>\n<p>It would be interesting to experiment with making all instructions use a <code>ValueList</code>, rather than just using <code>ValueList</code> for variable-length argument lists. That might use a little more memory, but it might speed up <code>arguments</code> by making it avoid the jump table.</p>\n</blockquote>",
        "id": 189361386,
        "sender_full_name": "GitHub",
        "timestamp": 1582932314
    }
]