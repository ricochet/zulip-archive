[
    {
        "content": "<p>froydnj opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>While looking at rewriting <code>lucetc</code> to use <code>object</code> instead of <code>faerie</code> (primarily to get Windows support \"for free\" in <code>lucetc</code>), I think the only reason that \"raw\" <code>faerie</code> interfaces need to be used instead of going through <code>cranelift-module</code> is that the definition of the stack probe cannot be done as clif:</p>\n<p><a href=\"https://github.com/bytecodealliance/lucet/blob/cf53a3ba5d89174c26ba4ccdd5043628664da72f/lucetc/src/output.rs#L56-L62\" target=\"_blank\" title=\"https://github.com/bytecodealliance/lucet/blob/cf53a3ba5d89174c26ba4ccdd5043628664da72f/lucetc/src/output.rs#L56-L62\">https://github.com/bytecodealliance/lucet/blob/cf53a3ba5d89174c26ba4ccdd5043628664da72f/lucetc/src/output.rs#L56-L62</a></p>\n<p>as the stack probe must be defined as a certain sequence of instructions that other code needs to know the layout of.  And various later things after the above point need to know about the existence of the stack probe, so they can't be written in terms of the <code>cranelift-module</code> interface and need to be written with \"raw\" <code>faerie</code>.</p>\n<p>The straightforward way to rewrite this code (and other code using <code>faerie</code>) to use <code>object</code> is to make the appropriate translations between the two APIs.  But there's nothing about the non-stack probe code that <code>cranelift-module</code> can't already handle -- basically defining a bunch of tables with assorted relocations.  So I propose adding an interface to <code>cranelift-module::Backend</code> that enables you to define a function in terms of the raw bytes for that function, rather than going through cranelift's code generation.</p>\n<h4>Benefit</h4>\n<p>If you squint right, this interface is a primitive form of inline assembly, which has proven useful in other compilers for similar reasons (tightly controlled instruction sequences, as well as access to functionality not directly supported by the compiler or doing things that are Hard To Do in the original language).</p>\n<p>For the above example, this interface enables the stack probe to be defined in terms of <code>cranelift-module</code> interfaces, and subsequently all the remaining pieces to be defined in terms of <code>cranelift-module</code> interfaces as well, thus eliminating the need to drop down to a lower-level interface.  Switching between <code>faerie</code> and <code>object</code> would get a lot easier as well -- a handful of lines changed, rather than rewriting a bunch of object definitions.</p>\n<h4>Implementation</h4>\n<p>This functionality should be straightforward to add: all of the <code>cranelift-module</code> implementations already have to have a way of taking bytes and associating a function name with those bytes, inside <code>Backend::define_function</code>.  This interface would just sidestep the code generation parts.</p>\n<p>I don't know what the exact signature should look like.  Something like <code>define_function_bytes(&amp;mut self, id: FuncId, name: &amp;str, bytes: &amp;[u8], namespace: &amp;ModuleNamespace&lt;Self&gt;)</code> would work for the above use case.  Depending on how Right people think a first cut should be, maybe you'd want to include an argument specifying relocations so external functions could be called.  I'm inclined to do the simplest thing possible for now.</p>\n<h4>Alternatives</h4>\n<p>The alternative that I see is defining some sort of inline assembly bits for the cranelift code generator, which seems like an overwhelmingly large project (although maybe that would have to happen at some point, given potential inline assembly support in <code>rustc</code>?).  Maybe there are other alternatives that I haven't thought of.</p>\n</blockquote>",
        "id": 187922466,
        "sender_full_name": "GitHub",
        "timestamp": 1581435392
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-584878462\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-584878462\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<p><code>lucetc</code> needs to also define the trap sites in the stack probe function, so the proposed API doesn't seem to be enough to avoid the raw interface.</p>\n<blockquote>\n<p>But there's nothing about the non-stack probe code that cranelift-module can't already handle -- basically defining a bunch of tables with assorted relocations</p>\n</blockquote>\n<p>The problem is that the function manifest and trap table can't be generated until <code>Module::finish</code> is called because the information they require is in the product.</p>\n<p>You're probably aware of this, but I did convert <code>lucetc</code> to use <code>cranelift-object</code> 9 months ago (but it wasn't merged). Is the problem that <code>lucet</code> wants to be able to keep <code>faerie</code> and switch between backends, rather than remove <code>faerie</code> support completely?</p>\n</blockquote>",
        "id": 187961091,
        "sender_full_name": "GitHub",
        "timestamp": 1581458711
    },
    {
        "content": "<p>froydnj <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-585260066\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-585260066\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<blockquote>\n<p><code>lucetc</code> needs to also define the trap sites in the stack probe function, so the proposed API doesn't seem to be enough to avoid the raw interface.</p>\n</blockquote>\n<p>That's a good point; the interface would also need to specify trap information, which would require extending backends to expose some kind of portable way of expressing trap sites.  But that seems pretty straightforward, since <code>cranelift-object</code> and <code>cranelift-faerie</code> do trap collection in very similar ways already.  (<code>cranelift-simplejit</code> doesn't deal with traps, so maybe that complicates things a little bit.)</p>\n<blockquote>\n<blockquote>\n<p>But there's nothing about the non-stack probe code that cranelift-module can't already handle -- basically defining a bunch of tables with assorted relocations</p>\n</blockquote>\n<p>The problem is that the function manifest and trap table can't be generated until <code>Module::finish</code> is called because the information they require is in the product.</p>\n</blockquote>\n<p>The function manifest is defined prior to the conversion out of <code>cranelift-module</code>:</p>\n<p><a href=\"https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/compiler.rs#L181-L195\" target=\"_blank\" title=\"https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/compiler.rs#L181-L195\">https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/compiler.rs#L181-L195</a></p>\n<p>It does have to be fixed up to reflect the actual length of the stack probe:</p>\n<p><a href=\"https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/output.rs#L63-L78\" target=\"_blank\" title=\"https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/output.rs#L63-L78\">https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/output.rs#L63-L78</a></p>\n<p>but that bit would be unnecessary if <code>cranelift-module</code> were aware there was actual code associated with the stack probe.</p>\n<p>The actual trap tables lucet needs to define:</p>\n<p><a href=\"https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/traps.rs#L9-L42\" target=\"_blank\" title=\"https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/traps.rs#L9-L42\">https://github.com/bytecodealliance/lucet/blob/d4b7ffdb9d039e54593561092e487979691cdfdc/lucetc/src/traps.rs#L9-L42</a></p>\n<p>can be defined with information retrieved from <code>cranelift-module</code>, assuming that trap site information is exposed in some way.</p>\n<blockquote>\n<p>You're probably aware of this, but I did convert <code>lucetc</code> to use <code>cranelift-object</code> 9 months ago (but it wasn't merged). Is the problem that <code>lucet</code> wants to be able to keep <code>faerie</code> and switch between backends, rather than remove <code>faerie</code> support completely?</p>\n</blockquote>\n<p>My understanding is that it is desirable to keep <code>faerie</code> support since that is a known quantity, and in case problems show up with <code>object</code>.  The above proposal is intended to move enough functionality into <code>cranelift-module</code> such that switching between <code>faerie</code> and <code>object</code> is easier than rewriting <a href=\"https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/output.rs\" target=\"_blank\" title=\"https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/output.rs\">lucetc/lucetc/src/output.rs</a> and the associated other places that touch <code>faerie</code> internals to support <code>object</code> in parallel.</p>\n</blockquote>",
        "id": 188019877,
        "sender_full_name": "GitHub",
        "timestamp": 1581521276
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-585558345\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-585558345\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<p>That's all fine, I'm not opposed to the idea, but it sounded incomplete to me. I did something similar initially but didn't follow through because it wasn't enough benefit, but I didn't go the whole way to try to do the function manifest and trap tables via <code>cranelift-module</code>. For defining the stack probe, my approach was to add an API that accepted a function parameter with a signature similar to <a href=\"https://github.com/bytecodealliance/cranelift/blob/98c818c129979e98a3db150f8f9698f6451b7ef7/cranelift-codegen/src/context.rs#L184\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/98c818c129979e98a3db150f8f9698f6451b7ef7/cranelift-codegen/src/context.rs#L184\"><code>Context::emit_to_memory</code></a>, which lets the caller define relocs/traps/stackmap. The existing <code>Module::define_function</code> could then be implemented using the new API too.</p>\n</blockquote>",
        "id": 188079372,
        "sender_full_name": "GitHub",
        "timestamp": 1581571776
    },
    {
        "content": "<p>froydnj <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-589748620\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-589748620\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<p>I realized as I was writing #1400 and experimenting with how it would work with <code>lucet</code> that some sort of API to expose trap information from <code>cranelift-module</code> will also be required...or <code>lucet</code> can have some trait that <code>cranelift-object</code> and <code>cranelift-faerie</code> could implement.  Not sure yet which is better.</p>\n</blockquote>",
        "id": 188753074,
        "sender_full_name": "GitHub",
        "timestamp": 1582305411
    },
    {
        "content": "<p>froydnj <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-590473749\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386#issuecomment-590473749\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<p>I think this was taken care of by #1400.  I opened #1404 for exposing trap information in some way.</p>\n</blockquote>",
        "id": 188951101,
        "sender_full_name": "GitHub",
        "timestamp": 1582568124
    },
    {
        "content": "<p>froydnj closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1386\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1386\">Issue #1386</a>:</p>\n<blockquote>\n<h4>Feature</h4>\n<p>While looking at rewriting <code>lucetc</code> to use <code>object</code> instead of <code>faerie</code> (primarily to get Windows support \"for free\" in <code>lucetc</code>), I think the only reason that \"raw\" <code>faerie</code> interfaces need to be used instead of going through <code>cranelift-module</code> is that the definition of the stack probe cannot be done as clif:</p>\n<p><a href=\"https://github.com/bytecodealliance/lucet/blob/cf53a3ba5d89174c26ba4ccdd5043628664da72f/lucetc/src/output.rs#L56-L62\" target=\"_blank\" title=\"https://github.com/bytecodealliance/lucet/blob/cf53a3ba5d89174c26ba4ccdd5043628664da72f/lucetc/src/output.rs#L56-L62\">https://github.com/bytecodealliance/lucet/blob/cf53a3ba5d89174c26ba4ccdd5043628664da72f/lucetc/src/output.rs#L56-L62</a></p>\n<p>as the stack probe must be defined as a certain sequence of instructions that other code needs to know the layout of.  And various later things after the above point need to know about the existence of the stack probe, so they can't be written in terms of the <code>cranelift-module</code> interface and need to be written with \"raw\" <code>faerie</code>.</p>\n<p>The straightforward way to rewrite this code (and other code using <code>faerie</code>) to use <code>object</code> is to make the appropriate translations between the two APIs.  But there's nothing about the non-stack probe code that <code>cranelift-module</code> can't already handle -- basically defining a bunch of tables with assorted relocations.  So I propose adding an interface to <code>cranelift-module::Backend</code> that enables you to define a function in terms of the raw bytes for that function, rather than going through cranelift's code generation.</p>\n<h4>Benefit</h4>\n<p>If you squint right, this interface is a primitive form of inline assembly, which has proven useful in other compilers for similar reasons (tightly controlled instruction sequences, as well as access to functionality not directly supported by the compiler or doing things that are Hard To Do in the original language).</p>\n<p>For the above example, this interface enables the stack probe to be defined in terms of <code>cranelift-module</code> interfaces, and subsequently all the remaining pieces to be defined in terms of <code>cranelift-module</code> interfaces as well, thus eliminating the need to drop down to a lower-level interface.  Switching between <code>faerie</code> and <code>object</code> would get a lot easier as well -- a handful of lines changed, rather than rewriting a bunch of object definitions.</p>\n<h4>Implementation</h4>\n<p>This functionality should be straightforward to add: all of the <code>cranelift-module</code> implementations already have to have a way of taking bytes and associating a function name with those bytes, inside <code>Backend::define_function</code>.  This interface would just sidestep the code generation parts.</p>\n<p>I don't know what the exact signature should look like.  Something like <code>define_function_bytes(&amp;mut self, id: FuncId, name: &amp;str, bytes: &amp;[u8], namespace: &amp;ModuleNamespace&lt;Self&gt;)</code> would work for the above use case.  Depending on how Right people think a first cut should be, maybe you'd want to include an argument specifying relocations so external functions could be called.  I'm inclined to do the simplest thing possible for now.</p>\n<h4>Alternatives</h4>\n<p>The alternative that I see is defining some sort of inline assembly bits for the cranelift code generator, which seems like an overwhelmingly large project (although maybe that would have to happen at some point, given potential inline assembly support in <code>rustc</code>?).  Maybe there are other alternatives that I haven't thought of.</p>\n</blockquote>",
        "id": 188951102,
        "sender_full_name": "GitHub",
        "timestamp": 1582568125
    }
]