[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/163\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/163\">Issue #163</a>:</p>\n<blockquote>\n<p>There seems to be a problems with branch instructions that take register operands from a constrained register class. The problem is the global values live across the branch into the destination EBB. These values can't be temporarily moved because the destination EBB expects them in their global registers.</p>\n<p>Normally, the spiller will make sure that there are enough free registers for the branch instruction's own operands, but it can't guarantee that there are registers free in a constrained register class.</p>\n<p>An example is an Intel <code>brnz.b1</code> instruction whose controlling <code>b1</code> operand is constrained to the ABCD register class. We can't currently guarantee the live-ins for the destination EBB are not taking up the whole ABCD register class.</p>\n</blockquote>",
        "id": 189361011,
        "sender_full_name": "GitHub",
        "timestamp": 1582931977
    }
]