[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/527\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/527\">Issue #527</a>:</p>\n<blockquote>\n<p>librustc_target is a library in rustc for implementing a lot of native ABI and toolchain logic. It has some overlap with <a href=\"https://github.com/CraneStation/target-lexicon\" target=\"_blank\" title=\"https://github.com/CraneStation/target-lexicon\">target-lexicon</a>, however it provides much more extensive features, especially including knowledge of calling conventions. It's written in a way which is mostly independent from the rest of rustc, so it's an interesting candidate for factoring out into a standalone library that Cranelift users and others could use to more easily integrate with native C ABI/toolchain environments.</p>\n<p>This aligns fairly well with cranelift-codegen's rough design for calling conventions, in which it only does the lowest-level parts, and assumes that cranelift-frontend or other libraries will be the place for offering higher-level functionality such as handling struct types.</p>\n<p>See <a href=\"https://github.com/rust-lang/rust/issues/54527#issuecomment-424153860\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54527#issuecomment-424153860\">this comment</a> for some more details on librustc_target.</p>\n<p>This library isn't Cranelift-specific, as other projects could make use of such a library too. That said, it is particularly interesting for use with Cranelift, so I'm posting an issue here so we can track it.</p>\n</blockquote>",
        "id": 189361368,
        "sender_full_name": "GitHub",
        "timestamp": 1582932298
    }
]