[
    {
        "content": "<p>sstangl closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/976\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/976\">Issue #976</a>:</p>\n<blockquote>\n<p>Right now, methods on the settings builder are all taking strings as inputs, and maybe strings as values. This makes it very dynamic, and allows a range of runtime errors like a setting doesn't exist, or the provided value doesn't have the right type.</p>\n<p>Instead, we could generate methods on the settings builder for each setting:</p>\n<ul>\n<li>for bool values, they would take a bool parameter.</li>\n<li>for enum values, they would take a (Rust) enum parameter.</li>\n</ul>\n<p>Then, the entire range of errors described by the enum SetError would disappear, and all these errors would become compile-time errors, which I think is safer and less error-prone.</p>\n<p>This implies generating more code for these settings. We don't have thousands of them, so it shouldn't be a problem. It would be a breaking API change, too.</p>\n</blockquote>",
        "id": 185540943,
        "sender_full_name": "GitHub",
        "timestamp": 1578951772
    },
    {
        "content": "<p>bnjbvr reopened <a href=\"https://github.com/bytecodealliance/cranelift/issues/976\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/976\">Issue #976</a>:</p>\n<blockquote>\n<p>Right now, methods on the settings builder are all taking strings as inputs, and maybe strings as values. This makes it very dynamic, and allows a range of runtime errors like a setting doesn't exist, or the provided value doesn't have the right type.</p>\n<p>Instead, we could generate methods on the settings builder for each setting:</p>\n<ul>\n<li>for bool values, they would take a bool parameter.</li>\n<li>for enum values, they would take a (Rust) enum parameter.</li>\n</ul>\n<p>Then, the entire range of errors described by the enum SetError would disappear, and all these errors would become compile-time errors, which I think is safer and less error-prone.</p>\n<p>This implies generating more code for these settings. We don't have thousands of them, so it shouldn't be a problem. It would be a breaking API change, too.</p>\n</blockquote>",
        "id": 185575520,
        "sender_full_name": "GitHub",
        "timestamp": 1578992191
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/976#issuecomment-574070836\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/976#issuecomment-574070836\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/976\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/976\">Issue #976</a>:</p>\n<blockquote>\n<p>Oops, wrong commit number; it was supposed to close #1164. </p>\n</blockquote>",
        "id": 185575521,
        "sender_full_name": "GitHub",
        "timestamp": 1578992191
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/976\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/976\">Issue #976</a>:</p>\n<blockquote>\n<p>Right now, methods on the settings builder are all taking strings as inputs, and maybe strings as values. This makes it very dynamic, and allows a range of runtime errors like a setting doesn't exist, or the provided value doesn't have the right type.</p>\n<p>Instead, we could generate methods on the settings builder for each setting:</p>\n<ul>\n<li>for bool values, they would take a bool parameter.</li>\n<li>for enum values, they would take a (Rust) enum parameter.</li>\n</ul>\n<p>Then, the entire range of errors described by the enum SetError would disappear, and all these errors would become compile-time errors, which I think is safer and less error-prone.</p>\n<p>This implies generating more code for these settings. We don't have thousands of them, so it shouldn't be a problem. It would be a breaking API change, too.</p>\n</blockquote>",
        "id": 189361572,
        "sender_full_name": "GitHub",
        "timestamp": 1582932399
    }
]