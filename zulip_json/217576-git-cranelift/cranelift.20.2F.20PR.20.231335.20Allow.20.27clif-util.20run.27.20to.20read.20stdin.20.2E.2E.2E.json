[
    {
        "content": "<p>zummenix opened <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335\">PR #1335</a> from <code>clif-util-stdin</code> to <code>master</code>:</p>\n<blockquote>\n<p>This enables <code>clif-util run -</code> to work with stdin (seems it was intended initially).</p>\n<p>Now errors in <code>iterate_files</code> are propagated further.</p>\n<p>Closes #1004 </p>\n</blockquote>",
        "id": 185357916,
        "sender_full_name": "GitHub",
        "timestamp": 1578695460
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-341464442\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-341464442\">PR Review</a>.</p>",
        "id": 185359356,
        "sender_full_name": "GitHub",
        "timestamp": 1578696843
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365462352\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365462352\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I was a bit confused reading this but tell me if I understand this correctly: if we pass <code>\"-\"</code> inside <code>files</code> then <code>WalkDir</code> will give us an error; however, we _can_ turn <code>\"-\"</code> into a valid <code>PathBuf</code> by doing <code>e.path().into()</code>?</p>\n</blockquote>",
        "id": 185359358,
        "sender_full_name": "GitHub",
        "timestamp": 1578696843
    },
    {
        "content": "<p>zummenix submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-341504732\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-341504732\">PR Review</a>.</p>",
        "id": 185374659,
        "sender_full_name": "GitHub",
        "timestamp": 1578719023
    },
    {
        "content": "<p>zummenix created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365500243\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365500243\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, that's correct. We propagate all paths that <code>WalkDir</code> wasn't able to deal with to <code>read_single_file</code> function. I agree this is a bit clever and confusing but I wasn't able to find a better way.</p>\n</blockquote>",
        "id": 185374660,
        "sender_full_name": "GitHub",
        "timestamp": 1578719023
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-342072437\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-342072437\">PR Review</a>.</p>",
        "id": 185525937,
        "sender_full_name": "GitHub",
        "timestamp": 1578942609
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365976758\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365976758\">PR Review Comment</a>:</p>\n<blockquote>\n<p>What about the following approach: why don't we separate out any strings that we know to have special semantics and chain them on the end of the iterated files? E.g.:</p>\n<div class=\"codehilite\"><pre><span></span>let (normal_files, special_files) = drain_specials(files);\nfor file in iterate_files(normal_files).chain(special_files)\n</pre></div>\n\n\n<p>Where <code>drain_specials</code> could be something like (there's surely a better way):</p>\n<div class=\"codehilite\"><pre><span></span>/// This could use `drain_filter` instead but it is a nightly-only experimental API.\nfn drain_specials(mut files: Vec&lt;String&gt;) -&gt; (Vec&lt;String&gt;, Vec&lt;String&gt;) {\n    let mut normals = vec![];\n    let mut specials = vec![];\n    for s in files.drain(..) {\n        match s.as_str() {\n            &quot;-&quot; =&gt; specials.push(s),\n            _ =&gt; normals.push(s),\n        }\n    }\n    (normals, specials)\n}\n</pre></div>\n\n\n<p>The reason I propose something like this is to avoid the catch-and-then-use of <code>e.path().into()</code> which feels hard to debug (and to read too, as you mention).</p>\n</blockquote>",
        "id": 185525938,
        "sender_full_name": "GitHub",
        "timestamp": 1578942609
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365976758\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r365976758\">PR Review Comment</a>.</p>",
        "id": 185526040,
        "sender_full_name": "GitHub",
        "timestamp": 1578942666
    },
    {
        "content": "<p>zummenix created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r366965151\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r366965151\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Does it make sense to have multiple stdin inputs? For example with <code>clif-util run - -</code> user fills in first input and then second. If not, then we can check if stdin arg exist, filter out all the <code>-</code> from <code>files</code> and <code>chain</code> the <code>-</code> at the end as you have proposed.</p>\n</blockquote>",
        "id": 185712791,
        "sender_full_name": "GitHub",
        "timestamp": 1579104646
    },
    {
        "content": "<p>zummenix submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-343337291\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-343337291\">PR Review</a>.</p>",
        "id": 185712792,
        "sender_full_name": "GitHub",
        "timestamp": 1579104646
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-343364656\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-343364656\">PR Review</a>.</p>",
        "id": 185716681,
        "sender_full_name": "GitHub",
        "timestamp": 1579106816
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r366986117\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#discussion_r366986117\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yeah, to me deduplicating special things like <code>-</code> makes sense.</p>\n</blockquote>",
        "id": 185716682,
        "sender_full_name": "GitHub",
        "timestamp": 1579106816
    },
    {
        "content": "<p>zummenix updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335\">PR #1335</a> from <code>clif-util-stdin</code> to <code>master</code>:</p>\n<blockquote>\n<p>This enables <code>clif-util run -</code> to work with stdin (seems it was intended initially).</p>\n<p>Now errors in <code>iterate_files</code> are propagated further.</p>\n<p>Closes #1004 </p>\n</blockquote>",
        "id": 185887435,
        "sender_full_name": "GitHub",
        "timestamp": 1579235891
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-344734564\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335#pullrequestreview-344734564\">PR Review</a>.</p>",
        "id": 185938976,
        "sender_full_name": "GitHub",
        "timestamp": 1579282577
    },
    {
        "content": "<p>abrown merged <a href=\"https://github.com/bytecodealliance/cranelift/pull/1335\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1335\">PR #1335</a>.</p>",
        "id": 185939394,
        "sender_full_name": "GitHub",
        "timestamp": 1579282859
    }
]