[
    {
        "content": "<p>alexcrichton opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<p>Over in wasmtime I've been exploring the area of hooking up compile-time functions (those defined in Rust or C) directly with cranelift-generated functions. For example a wasm module like this:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;&quot; (func (param i32)))\n  (start (func 0)))\n</pre></div>\n\n\n<p>could get hooked up directly to a Rust function that looked like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">the_import</span><span class=\"p\">(</span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(more or less). When I say \"hooked up directly\" here I mean that zero cranelift-generated shim functions are required to have cranelift call out to the imported function. Today the <code>wasmtime::Func</code> type always uses cranelift to generate a fresh jit function which has an appropriate trampoline. </p>\n<p>The goal here is to basically make extraction of a function pointer and calling it or providing a function pointer as an import as cheap of an operation as possible.</p>\n<p>This all works well today with the default ABIs implemented in Cranelift and in general we don't have any issues. For example <a href=\"https://github.com/bytecodealliance/wasmtime/pull/839\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/839\">https://github.com/bytecodealliance/wasmtime/pull/839</a> is a start of how this might look in the <code>wasmtime</code> crate.</p>\n<p>A wrench is thrown into the works with multi-value wasm functions, however. The ABI of a multi-value return function is fundamentally incompatible with anything you can write in C/Rust/etc today. In talking with @sunfishcode it looks like the multi-value return ABI (when dealing with more than one return value) is modeled after the concept of a multi-value return in LLVM. This is, however, purely an aspect of LLVM IR where you can return a tuple, and you can't actually write stable Rust or C code to generate LLVM IR that has this form of a tuple return. This means that if you have a module like:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;&quot; (func (result i32 i32)))\n)\n</pre></div>\n\n\n<p>it's fundamentally impossible to provide a Rust/C function pointer as the import there. There's no way to get the compiler to generate a function that supports the ABI that cranelift expects, meaning that cranelift is <em>required</em> to generate a jit function shim to call between Rust and wasm.</p>\n<p>In some discussion, I think there's two possible ways to fix this:</p>\n<h2>Change Cranelift to behave as if it's returning a struct, not a tuple</h2>\n<p>Currently cranelift's multi-value return ABI is modeled after what the multi-return ABI looks like in LLVM/gcc. While there is not source-language-level equivalent to this it's all compiler-internal details and you can generate LLVM IR to match up with what cranelift generates today.</p>\n<p>An alternative, though, is to update Cranelift's interpretation of a multi-value return to \"behave as if an aggregate <code>struct</code> was returned with the multi-value fields\" if there is more than one return value. This feels a bit weird, but for example given:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;&quot; (func (result i32 i32)))\n)\n</pre></div>\n\n\n<p>you could hook that up natively to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Or perhaps instead of changing cranelift's default we could simply add a new ABI which matches a \"struct-like return\" ABI rather than the current tuple-like return ABI. </p>\n<p>In any case this seems like it would be a significant undertaking. The rules for how to return an aggregate are <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/call/x86_64.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/call/x86_64.rs\">really complicated</a> and at least to me make basically no sense. Trying to have Cranelift match exactly what the system ABI looks like is likely a very large undertaking which would take quite some time to get right (and likely a bunch of internal refactoring).</p>\n<p>This leads us to another alternative...</p>\n<h2>Change cranelift to always use an out-pointer for multi-value returns</h2>\n<p>Instead of trying to match exactly what the system ABI looks like for returning aggregates, we could change cranelift's system ABI (or add a new ABI, or just do this all at the wasm layer) to do something like follows:</p>\n<ul>\n<li>If a function returns 0 values or 1 value, do the normal thing you'd expect (match the system ABI)</li>\n<li>If a function returns 2 or more values, then always synthesize an out-pointer where the layout of the out-pointer is the same as a C struct with fields of the types of the return value.</li>\n</ul>\n<p>This way the above example could be hooked up to a function like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">outptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The downside of this approach is that it may be wasm-specific or a bit of a hack in cranelift, but the upside is that there's no mucking around with the system ABI and trying to do clever things like packing <code>(i32, i32)</code> into a 64-bit register.</p>\n<p>This feels like the better solution to me, but I'm curious to hear what others think as well! If others have questions I certainly don't mind answering them as well.</p>\n</blockquote>",
        "id": 186867004,
        "sender_full_name": "GitHub",
        "timestamp": 1580288941
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-579666152\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-579666152\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<blockquote>\n<p>If a function returns 2 or more values, then always synthesize an out-pointer where the layout of the out-pointer is the same as a C struct with fields of the types of the return value.</p>\n</blockquote>\n<p>For exactly two return values, cg_clif needs to pass both in registers to match the native abi. This is what is currently implemented for the SystemV abi.</p>\n</blockquote>",
        "id": 186867772,
        "sender_full_name": "GitHub",
        "timestamp": 1580289598
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589673507\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589673507\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<blockquote>\n<p>Change cranelift to always use an out-pointer for multi-value returns</p>\n</blockquote>\n<p>I like this approach because it would be nice and simple to do so. Cranelift has several use cases, though, and it would create a privilege for a given use case to only adopt one possible way of returning multiple values; other implementations would need thunks to adapt to this ABI, adding a performance penalty.</p>\n<p>So I'm all in favor of implementing this <em>in addition</em> to the current thing (that could be called \"systemv_multiple_results\"), if you want to simplify the way it's done in Wasmtime.</p>\n<p>Spidermonkey does its own thing, and this is subject to change in the future too: if it's a multiple results function, the first result goes into a register, and all the following will go onto the stack. So we will have this requirement of having several multiple-returns ABI specifications anyway.</p>\n</blockquote>",
        "id": 188735086,
        "sender_full_name": "GitHub",
        "timestamp": 1582294927
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589720176\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589720176\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<p>@bnjbvr oh right sorry I realize now how I was saying that things should outright change, but what I meant and a much better way to word it is how you put it, adding support for a different ABI. That'd definitely work well for wasmtime I think!</p>\n</blockquote>",
        "id": 188746336,
        "sender_full_name": "GitHub",
        "timestamp": 1582301389
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589730031\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589730031\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<p>@alexcrichton No worries! This plan sounds good.</p>\n</blockquote>",
        "id": 188748710,
        "sender_full_name": "GitHub",
        "timestamp": 1582302749
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589834821\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369#issuecomment-589834821\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<p>The other wrinkle is that by the time we allocate a struct return or not, we don't really know if the values we're returning are \"actually\" multi-value or simply got split during legalization into multiple values.</p>\n<p>A dedicated ABI for always using return pointers seems like a good plan, and should make dealing with the above easier.</p>\n</blockquote>",
        "id": 188774300,
        "sender_full_name": "GitHub",
        "timestamp": 1582319157
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1369\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1369\">Issue #1369</a>:</p>\n<blockquote>\n<p>Over in wasmtime I've been exploring the area of hooking up compile-time functions (those defined in Rust or C) directly with cranelift-generated functions. For example a wasm module like this:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;&quot; (func (param i32)))\n  (start (func 0)))\n</pre></div>\n\n\n<p>could get hooked up directly to a Rust function that looked like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">the_import</span><span class=\"p\">(</span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(more or less). When I say \"hooked up directly\" here I mean that zero cranelift-generated shim functions are required to have cranelift call out to the imported function. Today the <code>wasmtime::Func</code> type always uses cranelift to generate a fresh jit function which has an appropriate trampoline. </p>\n<p>The goal here is to basically make extraction of a function pointer and calling it or providing a function pointer as an import as cheap of an operation as possible.</p>\n<p>This all works well today with the default ABIs implemented in Cranelift and in general we don't have any issues. For example <a href=\"https://github.com/bytecodealliance/wasmtime/pull/839\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/839\">https://github.com/bytecodealliance/wasmtime/pull/839</a> is a start of how this might look in the <code>wasmtime</code> crate.</p>\n<p>A wrench is thrown into the works with multi-value wasm functions, however. The ABI of a multi-value return function is fundamentally incompatible with anything you can write in C/Rust/etc today. In talking with @sunfishcode it looks like the multi-value return ABI (when dealing with more than one return value) is modeled after the concept of a multi-value return in LLVM. This is, however, purely an aspect of LLVM IR where you can return a tuple, and you can't actually write stable Rust or C code to generate LLVM IR that has this form of a tuple return. This means that if you have a module like:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;&quot; (func (result i32 i32)))\n)\n</pre></div>\n\n\n<p>it's fundamentally impossible to provide a Rust/C function pointer as the import there. There's no way to get the compiler to generate a function that supports the ABI that cranelift expects, meaning that cranelift is <em>required</em> to generate a jit function shim to call between Rust and wasm.</p>\n<p>In some discussion, I think there's two possible ways to fix this:</p>\n<h2>Change Cranelift to behave as if it's returning a struct, not a tuple</h2>\n<p>Currently cranelift's multi-value return ABI is modeled after what the multi-return ABI looks like in LLVM/gcc. While there is not source-language-level equivalent to this it's all compiler-internal details and you can generate LLVM IR to match up with what cranelift generates today.</p>\n<p>An alternative, though, is to update Cranelift's interpretation of a multi-value return to \"behave as if an aggregate <code>struct</code> was returned with the multi-value fields\" if there is more than one return value. This feels a bit weird, but for example given:</p>\n<div class=\"codehilite\"><pre><span></span>(module\n  (import &quot;&quot; &quot;&quot; (func (result i32 i32)))\n)\n</pre></div>\n\n\n<p>you could hook that up natively to:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Or perhaps instead of changing cranelift's default we could simply add a new ABI which matches a \"struct-like return\" ABI rather than the current tuple-like return ABI. </p>\n<p>In any case this seems like it would be a significant undertaking. The rules for how to return an aggregate are <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/call/x86_64.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/abi/call/x86_64.rs\">really complicated</a> and at least to me make basically no sense. Trying to have Cranelift match exactly what the system ABI looks like is likely a very large undertaking which would take quite some time to get right (and likely a bunch of internal refactoring).</p>\n<p>This leads us to another alternative...</p>\n<h2>Change cranelift to always use an out-pointer for multi-value returns</h2>\n<p>Instead of trying to match exactly what the system ABI looks like for returning aggregates, we could change cranelift's system ABI (or add a new ABI, or just do this all at the wasm layer) to do something like follows:</p>\n<ul>\n<li>If a function returns 0 values or 1 value, do the normal thing you'd expect (match the system ABI)</li>\n<li>If a function returns 2 or more values, then always synthesize an out-pointer where the layout of the out-pointer is the same as a C struct with fields of the types of the return value.</li>\n</ul>\n<p>This way the above example could be hooked up to a function like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[repr(C)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">outptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vmctx</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">VMContext</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The downside of this approach is that it may be wasm-specific or a bit of a hack in cranelift, but the upside is that there's no mucking around with the system ABI and trying to do clever things like packing <code>(i32, i32)</code> into a 64-bit register.</p>\n<p>This feels like the better solution to me, but I'm curious to hear what others think as well! If others have questions I certainly don't mind answering them as well.</p>\n</blockquote>",
        "id": 189361776,
        "sender_full_name": "GitHub",
        "timestamp": 1582932529
    }
]