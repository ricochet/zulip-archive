[
    {
        "content": "<p>iximeow opened <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[ ] This has been discussed in issue #1366 </li>\n<li>[ ] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[ ] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187522738,
        "sender_full_name": "GitHub",
        "timestamp": 1580969447
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[ ] This has been discussed in issue #1366 </li>\n<li>[x] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[ ] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187522740,
        "sender_full_name": "GitHub",
        "timestamp": 1580969452
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[ ] This has been discussed in issue #1366 </li>\n<li>[x] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[x] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187522741,
        "sender_full_name": "GitHub",
        "timestamp": 1580969454
    },
    {
        "content": "<p>iximeow edited <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1366 </li>\n<li>[x] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[x] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187522744,
        "sender_full_name": "GitHub",
        "timestamp": 1580969457
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375655738\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375655738\">PR Review Comment</a>:</p>\n<blockquote>\n<p>assuming this was a typo, <code>RSB</code> doesn't make sense to me as an x86-ism and the other automatically-restored register would be <code>RBP</code>.</p>\n</blockquote>",
        "id": 187522755,
        "sender_full_name": "GitHub",
        "timestamp": 1580969500
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354218893\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354218893\">PR Review</a>.</p>",
        "id": 187522756,
        "sender_full_name": "GitHub",
        "timestamp": 1580969500
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354219425\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354219425\">PR Review</a>.</p>",
        "id": 187522827,
        "sender_full_name": "GitHub",
        "timestamp": 1580969614
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375656163\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375656163\">PR Review Comment</a>:</p>\n<blockquote>\n<p>not checking that <code>GPR</code> (and <code>FPR</code>) contain the regunit in question could introduce errors if these RegClasses had differing widths. So far as I can see, x86 <code>RegClass</code> all have the same width of 1, so this happens to work out okay, but I think is strictly speaking a bug independent of SIMD register preservation.</p>\n</blockquote>",
        "id": 187522828,
        "sender_full_name": "GitHub",
        "timestamp": 1580969614
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354219840\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354219840\">PR Review</a>.</p>",
        "id": 187522899,
        "sender_full_name": "GitHub",
        "timestamp": 1580969697
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375656490\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375656490\">PR Review Comment</a>:</p>\n<blockquote>\n<p><code>csrs.iter(FPR).len()</code> will be zero via the above assert, but I want the stack size to be the same expression in the three places we compute it here in <code>abi.rs</code>.</p>\n</blockquote>",
        "id": 187522900,
        "sender_full_name": "GitHub",
        "timestamp": 1580969698
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354220769\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354220769\">PR Review</a>.</p>",
        "id": 187523023,
        "sender_full_name": "GitHub",
        "timestamp": 1580969889
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375657183\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375657183\">PR Review Comment</a>:</p>\n<blockquote>\n<p>this is where I'd like input from someone who knows codegen APIs better than me (@sstangl?): SIMD registers can't be <code>x86_push</code>'d nor <code>x86_pop</code>'d (there is no push/pop encoding in the ISA for them, even), so my plan is to know there will be sufficient space reserved for them and simply <code>load</code>/<code>store</code> them. To do that, I would need to use <code>rsp</code> or <code>rbp</code> as a base, with an appropriate offset. Is there a nice way to get <code>function call frame base</code> as a value?</p>\n<p>I don't want to load <code>rbp</code> here (even if it were possible) because future frame pointer elision would break this, so either <code>rsp</code> or <code>function call frame base</code> seem like better choices. Computing the offset from here ought to be straightforward.</p>\n</blockquote>",
        "id": 187523024,
        "sender_full_name": "GitHub",
        "timestamp": 1580969890
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375657685\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375657685\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The <code>bin</code> expression here is wrong, but I've not gotten sufficiently far in this test to need to fix that yet. An earlier (more cumbersome) approach to preserving SIMD registers confirmed that this does get far enough to try generating stores to preserve values though, so that's a start.</p>\n</blockquote>",
        "id": 187523099,
        "sender_full_name": "GitHub",
        "timestamp": 1580970030
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354221402\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354221402\">PR Review</a>.</p>",
        "id": 187523100,
        "sender_full_name": "GitHub",
        "timestamp": 1580970031
    },
    {
        "content": "<p>sstangl submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354527113\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354527113\">PR Review</a>.</p>",
        "id": 187557670,
        "sender_full_name": "GitHub",
        "timestamp": 1581002905
    },
    {
        "content": "<p>sstangl submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354527113\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354527113\">PR Review</a>.</p>",
        "id": 187557672,
        "sender_full_name": "GitHub",
        "timestamp": 1581002906
    },
    {
        "content": "<p>sstangl created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375892668\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375892668\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://searchfox.org/mozilla-central/rev/cbd110d718bc89a499d3f996af24532abbf6f8ea/js/src/jit/x64/Trampoline-x64.cpp#72\" target=\"_blank\" title=\"https://searchfox.org/mozilla-central/rev/cbd110d718bc89a499d3f996af24532abbf6f8ea/js/src/jit/x64/Trampoline-x64.cpp#72\">the IonMonkey-style approach</a> works well: figure out how many registers to push, allocate stack by subtracting from <code>%rsp</code>, and <code>vmovdqa</code> into place in an arbitrary order of your choosing.</p>\n</blockquote>",
        "id": 187557673,
        "sender_full_name": "GitHub",
        "timestamp": 1581002906
    },
    {
        "content": "<p>sstangl created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375900790\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375900790\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think unfortunately that this isn't quite right -- in order to store the xmm registers, the destination must be 16-byte aligned. Since the number of GPRs pushed is non-constant, you might need padding bytes.</p>\n</blockquote>",
        "id": 187557674,
        "sender_full_name": "GitHub",
        "timestamp": 1581002906
    },
    {
        "content": "<p>sstangl created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375901559\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r375901559\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this comment out of date? It's using <code>types::F64X2.bytes() as usize</code> now which doesn't look like double-counting!</p>\n</blockquote>",
        "id": 187557675,
        "sender_full_name": "GitHub",
        "timestamp": 1581002906
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354676529\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354676529\">PR Review</a>.</p>",
        "id": 187575030,
        "sender_full_name": "GitHub",
        "timestamp": 1581013926
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376008296\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376008296\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Yes, I think that would work well here too. What I don't know is how to get the value of <code>rsp</code> as a value I can provide here! Is there a way to write \"give me an SSA value that is whatever is in <code>rsp</code> at this point\"? The other option I can imagine is another pair of <code>x86_*</code> special instructions that directly encode <code>rsp</code>, and take the offset as an argument.</p>\n<p>Sidenote: I see IonMonkey uses <code>vmovdqa</code> in favor of <code>movdqa</code> - is that actually what gets emitted? Is there a reason IonMonkey prefers the AVX form?</p>\n</blockquote>",
        "id": 187575031,
        "sender_full_name": "GitHub",
        "timestamp": 1581013926
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376012623\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376012623\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Would it be possible to use <code>stack_store</code>?</p>\n</blockquote>",
        "id": 187575804,
        "sender_full_name": "GitHub",
        "timestamp": 1581014449
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354682091\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354682091\">PR Review</a>.</p>",
        "id": 187575805,
        "sender_full_name": "GitHub",
        "timestamp": 1581014449
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354695285\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354695285\">PR Review</a>.</p>",
        "id": 187577633,
        "sender_full_name": "GitHub",
        "timestamp": 1581015679
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376022867\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376022867\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I'd hoped to store XMM registers before worrying about GPRs, so they would be a constant offset rather than conditionally requiring padding. I don't think that actually pans out though, and it's still variable on architecture width, so I'll adjust this to include some padding space if <code>csrs.iter(FPR).len() != 0</code>.</p>\n</blockquote>",
        "id": 187577634,
        "sender_full_name": "GitHub",
        "timestamp": 1581015679
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354695846\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354695846\">PR Review</a>.</p>",
        "id": 187577726,
        "sender_full_name": "GitHub",
        "timestamp": 1581015732
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376023294\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376023294\">PR Review Comment</a>:</p>\n<blockquote>\n<p>you are correct! I realized shortly after writing the comment that double-counting is wrong for 32-bit targets, but forgot to fix the comment too.</p>\n</blockquote>",
        "id": 187577727,
        "sender_full_name": "GitHub",
        "timestamp": 1581015732
    },
    {
        "content": "<p>iximeow updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1366 </li>\n<li>[x] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[x] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187578808,
        "sender_full_name": "GitHub",
        "timestamp": 1581016470
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376031480\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376031480\">PR Review Comment</a>:</p>\n<blockquote>\n<p>ah! yes, I think so. If not, <code>stack_addr</code> is the piece I was missing before, and should work too.</p>\n</blockquote>",
        "id": 187579235,
        "sender_full_name": "GitHub",
        "timestamp": 1581016745
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354706423\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354706423\">PR Review</a>.</p>",
        "id": 187579236,
        "sender_full_name": "GitHub",
        "timestamp": 1581016746
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354708320\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354708320\">PR Review</a>.</p>",
        "id": 187579546,
        "sender_full_name": "GitHub",
        "timestamp": 1581016928
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376032886\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376032886\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Unrelated, but because I noticed: do we know of anyone using <code>StackLimit</code>? <code>total_stack_size</code> here undercounts the real amount of space used in this function, as it doesn't include locals.</p>\n</blockquote>",
        "id": 187579547,
        "sender_full_name": "GitHub",
        "timestamp": 1581016928
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354748032\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354748032\">PR Review</a>.</p>",
        "id": 187585242,
        "sender_full_name": "GitHub",
        "timestamp": 1581020788
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376063544\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376063544\">PR Review Comment</a>:</p>\n<blockquote>\n<p>All usages of <code>ArgumentPurpose::StackLimit</code> on github are either from Cranelift itself, or a gecko vendoring of Cranelift.</p>\n</blockquote>",
        "id": 187585243,
        "sender_full_name": "GitHub",
        "timestamp": 1581020788
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354755864\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354755864\">PR Review</a>.</p>",
        "id": 187589973,
        "sender_full_name": "GitHub",
        "timestamp": 1581023991
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354755864\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354755864\">PR Review</a>.</p>",
        "id": 187589974,
        "sender_full_name": "GitHub",
        "timestamp": 1581023991
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376069480\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376069480\">PR Review Comment</a>:</p>\n<blockquote>\n<p>typo:</p>\n<div class=\"codehilite\"><pre><span></span>/// Get the set of callee-saved general-purpose registers.\n</pre></div>\n\n\n</blockquote>",
        "id": 187589975,
        "sender_full_name": "GitHub",
        "timestamp": 1581023991
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354779721\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354779721\">PR Review</a>.</p>",
        "id": 187590034,
        "sender_full_name": "GitHub",
        "timestamp": 1581024013
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376087920\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376087920\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Apologies for the drive by nitpick :)</p>\n</blockquote>",
        "id": 187590036,
        "sender_full_name": "GitHub",
        "timestamp": 1581024013
    },
    {
        "content": "<p>iximeow updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1366 </li>\n<li>[x] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[x] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187594456,
        "sender_full_name": "GitHub",
        "timestamp": 1581027434
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354812281\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354812281\">PR Review</a>.</p>",
        "id": 187594491,
        "sender_full_name": "GitHub",
        "timestamp": 1581027459
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376113644\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376113644\">PR Review Comment</a>:</p>\n<blockquote>\n<p>good eye, this function went through some revisions too :)</p>\n</blockquote>",
        "id": 187594492,
        "sender_full_name": "GitHub",
        "timestamp": 1581027459
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354814734\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354814734\">PR Review</a>.</p>",
        "id": 187594885,
        "sender_full_name": "GitHub",
        "timestamp": 1581027749
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376115482\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376115482\">PR Review Comment</a>:</p>\n<blockquote>\n<p>it turns out <code>stack_load</code> and <code>stack_store</code> won't do - there's no direct encoding for them in x86 (yet, I hope) and <code>prologue_epilogue</code> is well past <code>legalize</code>.</p>\n<p><code>stack_addr</code> was surprising too: we're also past <code>regalloc</code> so I have to assign a location myself. The error not doing this (that I violated constraints) was quite confusing, because .. what constraints would copying <code>rsp</code> have? :D </p>\n<p>A third consideration I didn't realize: we're also well past <code>postopt</code>, so opportunity to merge a <code>stack_addr/{load,store}</code> has passed. To this end, I added only one <code>stack_addr</code> in the prologue, and one in the epilogue, and only if we actually preserve any FPRs in the first place. With <code>stack_load</code>/<code>stack_store</code> encodings this can be cleaned up some more, but this already took longer than I'd anticipated.</p>\n<p>Anyway, it works now!</p>\n</blockquote>",
        "id": 187594886,
        "sender_full_name": "GitHub",
        "timestamp": 1581027749
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354815390\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354815390\">PR Review</a>.</p>",
        "id": 187594955,
        "sender_full_name": "GitHub",
        "timestamp": 1581027826
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376115983\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376115983\">PR Review Comment</a>:</p>\n<blockquote>\n<p>It appears that <code>filetests</code> doesn't actually test <code>bin</code> expressions (anymore?). This continued expressing the wrong bytes even while the test passed.</p>\n<p>I thought I saw an incorrect <code>bin</code> in a different filetest, but wrote it off at the time. I'll file a followup issue for this.</p>\n</blockquote>",
        "id": 187594956,
        "sender_full_name": "GitHub",
        "timestamp": 1581027827
    },
    {
        "content": "<p>iximeow updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378\">PR #1378</a> from <code>windows-fprs-preservation</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1366 </li>\n<li>[x] A short description: Windows appears to have extended ABI constraints to require callees to save XMM6-XMM15 (see #1366 for links to reference material). This PR adds preserve/restore behavior for those registers.</li>\n<li>[x] This PR contains test cases. Ish. There is an additional test that would test the right behavior if this was totally ready to go.</li>\n<li>[ ] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n<p>This is a draft PR as there are two points where I think I should just ask for help rather than spin my wheels figuring out the Right Thing, I'll add comments below.</p>\n<p>@sstangl if you get a chance, I think you might know the right things for the questions to follow!</p>\n</blockquote>",
        "id": 187595029,
        "sender_full_name": "GitHub",
        "timestamp": 1581027857
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354818662\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#pullrequestreview-354818662\">PR Review</a>.</p>",
        "id": 187595535,
        "sender_full_name": "GitHub",
        "timestamp": 1581028210
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376118471\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378#discussion_r376118471\">PR Review Comment</a>:</p>\n<blockquote>\n<p>mislead myself, <code>bin</code> directives are tested when the file is <code>test binemit</code>, but this is <code>test compile</code>.</p>\n</blockquote>",
        "id": 187595537,
        "sender_full_name": "GitHub",
        "timestamp": 1581028211
    }
]