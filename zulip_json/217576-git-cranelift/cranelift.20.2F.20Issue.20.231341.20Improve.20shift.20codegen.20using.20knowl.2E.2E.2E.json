[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>As described in <a href=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\">https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583</a>, Wasm shifts do extra runtime work to ensure the shift value is within a certain range. This is extra work that could be removed if we had knowledge that the shift value was constant and in the required range. This knowledge could also be used to lower the Wasm shifts to instructions using an immediate.</p>\n<h4>What is the value of adding this in Cranelift?</h4>\n<p>Emit faster code.</p>\n<h4>Do you have an implementation plan, and/or ideas for data structures or algorithms to use?</h4>\n<p>I think this type of optimization may apply to more than just Wasm shifts so I hope this approach works for those as well:</p>\n<ul>\n<li>add an <code>is_constant(v: Value)</code> function to <code>DataFlowGraph</code>; initially this could check if the value passed was created by one of the following instructions: <code>iconst</code>, <code>fconst</code>, <code>bconst</code>, <code>vconst</code>. This could get more complex later but I feel this simple implementation would be a good start.</li>\n<li>in <code>code_translator.rs</code>, check if the shift value <code>is_constant</code> and if it also inside the expected range (e.g. 0-31), lower the Wasm shift to <code>ish*_imm</code>; otherwise, lower to <code>ish*</code> as is done currently.</li>\n</ul>\n<h4>Have you considered alternative implementations? If so, how are they better or worse than your proposal?</h4>\n<p>No, open to suggestions.</p>\n</blockquote>",
        "id": 185518938,
        "sender_full_name": "GitHub",
        "timestamp": 1578938873
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573796223\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573796223\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/cranelift/blob/e6e67154c2cd4b68f1045930097df36783cc748c/cranelift-codegen/src/simple_preopt.rs#L560\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/e6e67154c2cd4b68f1045930097df36783cc748c/cranelift-codegen/src/simple_preopt.rs#L560\">https://github.com/bytecodealliance/cranelift/blob/e6e67154c2cd4b68f1045930097df36783cc748c/cranelift-codegen/src/simple_preopt.rs#L560</a> already performs <code>shl</code>/<code>shr</code> -&gt; <code>shl_imm</code>/<code>shr_imm</code> when possible if <code>opt_level=speed</code> is used.</p>\n</blockquote>",
        "id": 185519470,
        "sender_full_name": "GitHub",
        "timestamp": 1578939148
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573798603\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573798603\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<p>Good to know; hadn't seen that!</p>\n</blockquote>",
        "id": 185519973,
        "sender_full_name": "GitHub",
        "timestamp": 1578939461
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>As described in <a href=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\">https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583</a>, Wasm shifts do extra runtime work to ensure the shift value is within a certain range. This is extra work that could be removed if we had knowledge that the shift value was constant and in the required range. This knowledge could also be used to lower the Wasm shifts to instructions using an immediate.</p>\n<h4>What is the value of adding this in Cranelift?</h4>\n<p>Emit faster code.</p>\n<h4>Do you have an implementation plan, and/or ideas for data structures or algorithms to use?</h4>\n<p>I think this type of optimization may apply to more than just Wasm shifts so I hope this approach works for those as well:</p>\n<ul>\n<li>add an <code>is_constant(v: Value)</code> function to <code>DataFlowGraph</code>; initially this could check if the value passed was created by one of the following instructions: <code>iconst</code>, <code>fconst</code>, <code>bconst</code>, <code>vconst</code>. This could get more complex later but I feel this simple implementation would be a good start.</li>\n<li>in <code>code_translator.rs</code>, check if the shift value <code>is_constant</code> and if it also inside the expected range (e.g. 0-31), lower the Wasm shift to <code>ish*_imm</code>; otherwise, lower to <code>ish*</code> as is done currently.</li>\n</ul>\n<h4>Have you considered alternative implementations? If so, how are they better or worse than your proposal?</h4>\n<p>No, open to suggestions.</p>\n</blockquote>",
        "id": 185519974,
        "sender_full_name": "GitHub",
        "timestamp": 1578939461
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573799728\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573799728\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<p>...but not sure that works for SIMD (which I guess I should have mentioned above). </p>\n</blockquote>",
        "id": 185520256,
        "sender_full_name": "GitHub",
        "timestamp": 1578939612
    },
    {
        "content": "<p>abrown reopened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>As described in <a href=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\">https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583</a>, Wasm shifts do extra runtime work to ensure the shift value is within a certain range. This is extra work that could be removed if we had knowledge that the shift value was constant and in the required range. This knowledge could also be used to lower the Wasm shifts to instructions using an immediate.</p>\n<h4>What is the value of adding this in Cranelift?</h4>\n<p>Emit faster code.</p>\n<h4>Do you have an implementation plan, and/or ideas for data structures or algorithms to use?</h4>\n<p>I think this type of optimization may apply to more than just Wasm shifts so I hope this approach works for those as well:</p>\n<ul>\n<li>add an <code>is_constant(v: Value)</code> function to <code>DataFlowGraph</code>; initially this could check if the value passed was created by one of the following instructions: <code>iconst</code>, <code>fconst</code>, <code>bconst</code>, <code>vconst</code>. This could get more complex later but I feel this simple implementation would be a good start.</li>\n<li>in <code>code_translator.rs</code>, check if the shift value <code>is_constant</code> and if it also inside the expected range (e.g. 0-31), lower the Wasm shift to <code>ish*_imm</code>; otherwise, lower to <code>ish*</code> as is done currently.</li>\n</ul>\n<h4>Have you considered alternative implementations? If so, how are they better or worse than your proposal?</h4>\n<p>No, open to suggestions.</p>\n</blockquote>",
        "id": 185520257,
        "sender_full_name": "GitHub",
        "timestamp": 1578939613
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573800542\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573800542\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<p>That's probably the condition at <a href=\"https://github.com/bytecodealliance/cranelift/blob/e6e67154c2cd4b68f1045930097df36783cc748c/cranelift-codegen/src/simple_preopt.rs#L571\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/e6e67154c2cd4b68f1045930097df36783cc748c/cranelift-codegen/src/simple_preopt.rs#L571\">https://github.com/bytecodealliance/cranelift/blob/e6e67154c2cd4b68f1045930097df36783cc748c/cranelift-codegen/src/simple_preopt.rs#L571</a></p>\n</blockquote>",
        "id": 185520443,
        "sender_full_name": "GitHub",
        "timestamp": 1578939722
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573801079\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341#issuecomment-573801079\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<p>Yeah, I guess I could add some code to that function to handle vectors but attempt the same type of translations (instead of mucking around in <code>code_translator.rs</code>).</p>\n</blockquote>",
        "id": 185520579,
        "sender_full_name": "GitHub",
        "timestamp": 1578939790
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1341\">Issue #1341</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>As described in <a href=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583\">https://github.com/WebAssembly/simd/issues/117#issuecomment-573494583</a>, Wasm shifts do extra runtime work to ensure the shift value is within a certain range. This is extra work that could be removed if we had knowledge that the shift value was constant and in the required range. This knowledge could also be used to lower the Wasm shifts to instructions using an immediate.</p>\n<h4>What is the value of adding this in Cranelift?</h4>\n<p>Emit faster code.</p>\n<h4>Do you have an implementation plan, and/or ideas for data structures or algorithms to use?</h4>\n<p>I think this type of optimization may apply to more than just Wasm shifts so I hope this approach works for those as well:</p>\n<ul>\n<li>add an <code>is_constant(v: Value)</code> function to <code>DataFlowGraph</code>; initially this could check if the value passed was created by one of the following instructions: <code>iconst</code>, <code>fconst</code>, <code>bconst</code>, <code>vconst</code>. This could get more complex later but I feel this simple implementation would be a good start.</li>\n<li>in <code>code_translator.rs</code>, check if the shift value <code>is_constant</code> and if it also inside the expected range (e.g. 0-31), lower the Wasm shift to <code>ish*_imm</code>; otherwise, lower to <code>ish*</code> as is done currently.</li>\n</ul>\n<h4>Have you considered alternative implementations? If so, how are they better or worse than your proposal?</h4>\n<p>No, open to suggestions.</p>\n</blockquote>",
        "id": 189361762,
        "sender_full_name": "GitHub",
        "timestamp": 1582932519
    }
]