[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1344\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1344\">Issue #1344</a>:</p>\n<blockquote>\n<p>This issue will track progress on our new instruction selector / machine-code emission work, which has been ongoing (in design and initial implementation).</p>\n<p>The scope of the work is:</p>\n<ul>\n<li>Build a new instruction selector, to replace the recipes and meta-DSL system that adds encodings to existing Cranelift IR instructions.</li>\n<li>Develop a low-level encoding of machine instructions, with virtual registers prior to register allocation (an \"IR\" of sorts)</li>\n<li>Interface the above to a new register allocator infrastructure, <a href=\"https://github.com/bnjbvr/minira\" target=\"_blank\" title=\"https://github.com/bnjbvr/minira\"><code>minira</code></a></li>\n<li>Develop the binary-encoding pass that emits into a <code>CodeSink</code> from the above representation</li>\n</ul>\n<p>As discussed among @sunfishcode, @julian-seward1, @bnjbvr, and others, we want to do this work in order to clean up the story for a new machine backend, as recipes had become difficult to write and maintain.</p>\n<p>The system will be co-developed with an initial backend for ARM64 using the new interfaces.</p>\n</blockquote>",
        "id": 185618955,
        "sender_full_name": "GitHub",
        "timestamp": 1579023134
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1344\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1344\">Issue #1344</a>:</p>\n<blockquote>\n<p>This issue will track progress on our new instruction selector / machine-code emission work, which has been ongoing (in design and initial implementation).</p>\n<p>The scope of the work is:</p>\n<ul>\n<li>Build a new instruction selector, to replace the recipes and meta-DSL system that adds encodings to existing Cranelift IR instructions.</li>\n<li>Develop a low-level encoding of machine instructions, with virtual registers prior to register allocation (an \"IR\" of sorts)</li>\n<li>Interface the above to a new register allocator infrastructure, <a href=\"https://github.com/bnjbvr/minira\" target=\"_blank\" title=\"https://github.com/bnjbvr/minira\"><code>minira</code></a></li>\n<li>Develop the binary-encoding pass that emits into a <code>CodeSink</code> from the above representation</li>\n</ul>\n<p>As discussed among @sunfishcode, @julian-seward1, @bnjbvr, and others, we want to do this work in order to clean up the story for a new machine backend, as recipes had become difficult to write and maintain.</p>\n<p>The system will be co-developed with an initial backend for ARM64 using the new interfaces.</p>\n</blockquote>",
        "id": 189361768,
        "sender_full_name": "GitHub",
        "timestamp": 1582932522
    }
]