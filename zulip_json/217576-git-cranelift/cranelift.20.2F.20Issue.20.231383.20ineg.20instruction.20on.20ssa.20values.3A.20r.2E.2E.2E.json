[
    {
        "content": "<p>peterdelevoryas opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>My cranelift frontend is generating the following IL, and <code>module.define_function(...)</code> is failing with the \"ghost value used by real instruction\", which seems like maybe register allocation skipped over the <code>ineg</code> result??</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>function u0:0(i32, i64) -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64, i64, i64, i64) -&gt; i32 system_v\n    fn0 = u0:1 sig0\n\nblock0(v0: i32, v1: i64):\n    v2 = iconst.i32 1\n    v3 = ineg v2\n    return v3\n}\n\nerror defining function &quot;main&quot;: Compilation(\n    Verifier(\n        VerifierErrors(\n            [\n                VerifierError {\n                    location: inst2,\n                    context: None,\n                    message: &quot;v3 is a ghost value used by a real [Op1ret#c3] instruction&quot;,\n                },\n            ],\n        ),\n    ),\n)\n</pre></div>\n\n\n<ul>\n<li>I guess I thought ineg could be used on scalar registers, but I only see simd filetests using it?</li>\n<li><code>cranelift = \"0.58.0\"</code></li>\n<li>This is on Mac OS, using rust 1.41.0. I'm generating object files using the <code>cranelift-faerie</code> integration</li>\n</ul>\n</blockquote>",
        "id": 187736372,
        "sender_full_name": "GitHub",
        "timestamp": 1581205822
    },
    {
        "content": "<p>peterdelevoryas labeled <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>My cranelift frontend is generating the following IL, and <code>module.define_function(...)</code> is failing with the \"ghost value used by real instruction\", which seems like maybe register allocation skipped over the <code>ineg</code> result??</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>function u0:0(i32, i64) -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64, i64, i64, i64) -&gt; i32 system_v\n    fn0 = u0:1 sig0\n\nblock0(v0: i32, v1: i64):\n    v2 = iconst.i32 1\n    v3 = ineg v2\n    return v3\n}\n\nerror defining function &quot;main&quot;: Compilation(\n    Verifier(\n        VerifierErrors(\n            [\n                VerifierError {\n                    location: inst2,\n                    context: None,\n                    message: &quot;v3 is a ghost value used by a real [Op1ret#c3] instruction&quot;,\n                },\n            ],\n        ),\n    ),\n)\n</pre></div>\n\n\n<ul>\n<li>I guess I thought ineg could be used on scalar registers, but I only see simd filetests using it?</li>\n<li><code>cranelift = \"0.58.0\"</code></li>\n<li>This is on Mac OS, using rust 1.41.0. I'm generating object files using the <code>cranelift-faerie</code> integration</li>\n</ul>\n</blockquote>",
        "id": 187736373,
        "sender_full_name": "GitHub",
        "timestamp": 1581205822
    },
    {
        "content": "<p>peterdelevoryas <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-583788777\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-583788777\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Oh also, this isn't really a big deal, cause I guess you can always just construct an equivalent <code>isub 0, v2</code> instruction or something</p>\n</blockquote>",
        "id": 187736484,
        "sender_full_name": "GitHub",
        "timestamp": 1581206092
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-584207306\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-584207306\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Hi! Thanks for opening an issue. Indeed, that's what the legalization in cranelift-codegen/src/isa/x86/enc_tables.rs does in <code>convert_ineg</code>. It could and should be done for non-vector types too. This is a good bug to learn about manipulating Cranelift's IR, if somebody wants to chime in!</p>\n</blockquote>",
        "id": 187831351,
        "sender_full_name": "GitHub",
        "timestamp": 1581351951
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>My cranelift frontend is generating the following IL, and <code>module.define_function(...)</code> is failing with the \"ghost value used by real instruction\", which seems like maybe register allocation skipped over the <code>ineg</code> result??</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>function u0:0(i32, i64) -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64, i64, i64, i64) -&gt; i32 system_v\n    fn0 = u0:1 sig0\n\nblock0(v0: i32, v1: i64):\n    v2 = iconst.i32 1\n    v3 = ineg v2\n    return v3\n}\n\nerror defining function &quot;main&quot;: Compilation(\n    Verifier(\n        VerifierErrors(\n            [\n                VerifierError {\n                    location: inst2,\n                    context: None,\n                    message: &quot;v3 is a ghost value used by a real [Op1ret#c3] instruction&quot;,\n                },\n            ],\n        ),\n    ),\n)\n</pre></div>\n\n\n<ul>\n<li>I guess I thought ineg could be used on scalar registers, but I only see simd filetests using it?</li>\n<li><code>cranelift = \"0.58.0\"</code></li>\n<li>This is on Mac OS, using rust 1.41.0. I'm generating object files using the <code>cranelift-faerie</code> integration</li>\n</ul>\n</blockquote>",
        "id": 187831410,
        "sender_full_name": "GitHub",
        "timestamp": 1581351966
    },
    {
        "content": "<p>peterdelevoryas <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-584550635\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-584550635\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Hey I really appreciate the quick response! I looked into making the change: unfortunately, when I added a case in <code>convert_ineg</code> for scalar integer types, it doesn't seem to actually run. It seems like this legalization function is only applied to SIMD types: is there something somewhere that specifies that? I was unable to find it. I mean, something outside of <code>convert_ineg</code>. I am aware the the current implementation of <code>convert_ineg</code> only applies the transformation on int vector types. But I'm wondering if there's something _outside_ of <code>convert_ineg</code> that makes it only run on SIMD types.</p>\n</blockquote>",
        "id": 187896596,
        "sender_full_name": "GitHub",
        "timestamp": 1581414304
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-584555629\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383#issuecomment-584555629\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>convert_neg is called from <a href=\"https://github.com/bytecodealliance/cranelift/blob/98c818c129979e98a3db150f8f9698f6451b7ef7/cranelift-codegen/meta/src/isa/x86/legalize.rs#L612\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/98c818c129979e98a3db150f8f9698f6451b7ef7/cranelift-codegen/meta/src/isa/x86/legalize.rs#L612\">https://github.com/bytecodealliance/cranelift/blob/98c818c129979e98a3db150f8f9698f6451b7ef7/cranelift-codegen/meta/src/isa/x86/legalize.rs#L612</a>. Adding copies of that line with <code>widen</code> and <code>expand</code> instead of <code>narrow</code> may work. Please also add a test for both <code>i8</code>/<code>i16</code> (widen) and <code>i32</code>/<code>i64</code> (expand).</p>\n</blockquote>",
        "id": 187897448,
        "sender_full_name": "GitHub",
        "timestamp": 1581415052
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1383\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1383\">Issue #1383</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>My cranelift frontend is generating the following IL, and <code>module.define_function(...)</code> is failing with the \"ghost value used by real instruction\", which seems like maybe register allocation skipped over the <code>ineg</code> result??</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>function u0:0(i32, i64) -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64, i64, i64, i64) -&gt; i32 system_v\n    fn0 = u0:1 sig0\n\nblock0(v0: i32, v1: i64):\n    v2 = iconst.i32 1\n    v3 = ineg v2\n    return v3\n}\n\nerror defining function &quot;main&quot;: Compilation(\n    Verifier(\n        VerifierErrors(\n            [\n                VerifierError {\n                    location: inst2,\n                    context: None,\n                    message: &quot;v3 is a ghost value used by a real [Op1ret#c3] instruction&quot;,\n                },\n            ],\n        ),\n    ),\n)\n</pre></div>\n\n\n<ul>\n<li>I guess I thought ineg could be used on scalar registers, but I only see simd filetests using it?</li>\n<li><code>cranelift = \"0.58.0\"</code></li>\n<li>This is on Mac OS, using rust 1.41.0. I'm generating object files using the <code>cranelift-faerie</code> integration</li>\n</ul>\n</blockquote>",
        "id": 188247699,
        "sender_full_name": "GitHub",
        "timestamp": 1581714964
    }
]