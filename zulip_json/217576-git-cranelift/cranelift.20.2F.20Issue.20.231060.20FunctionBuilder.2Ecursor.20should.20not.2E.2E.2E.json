[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1060\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1060\">Issue #1060</a>:</p>\n<blockquote>\n<p>When <code>FunctionBuilder.cursor()</code> is called, it marks the current EBB as not pristine, even if it has no instructions. API users then have no way of distinguishing between an empty and non-empty block. This is compounded by API users not having any way to get the current block without using <code>cursor</code>.</p>\n<p>The call chain for <code>cursor</code> looks like this: <code>cursor</code> -&gt; <code>ensure_inserted_ebb_block</code> -&gt; <code>self.func_ctx.ebbs[ebb].pristine = false;</code></p>\n<p>This is a particular concern for me while generating C <code>case</code> statements, my code looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">case</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">switch</span>: <span class=\"nc\">Switch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constexpr</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">FunctionBuilder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">is_pristine</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">cursor</span><span class=\"p\">().</span><span class=\"n\">current_ebb</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">switch</span><span class=\"p\">.</span><span class=\"n\">set_entry</span><span class=\"p\">(</span><span class=\"n\">constexpr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_ebb</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">switch</span><span class=\"p\">.</span><span class=\"n\">set_entry</span><span class=\"p\">(</span><span class=\"n\">constexpr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>If I call case twice in a row, then I will make two different EBB blocks, even if the first was never filled.<br>\nAs far as I can tell, there's nothing I can do from a user perspective to avoid this.<br>\n(this is why I was generating empty EBBs in <a href=\"https://github.com/CraneStation/cranelift/issues/1059\" target=\"_blank\" title=\"https://github.com/CraneStation/cranelift/issues/1059\">https://github.com/CraneStation/cranelift/issues/1059</a>)</p>\n</blockquote>",
        "id": 189361590,
        "sender_full_name": "GitHub",
        "timestamp": 1582932411
    }
]