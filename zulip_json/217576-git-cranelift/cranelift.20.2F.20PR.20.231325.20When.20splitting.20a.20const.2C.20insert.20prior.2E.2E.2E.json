[
    {
        "content": "<p><strong>sstangl</strong> requested <a href=\"https://github.com/bnjbvr\" target=\"_blank\" title=\"https://github.com/bnjbvr\">bnjbvr</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325\">PR #1325</a>.</p>",
        "id": 185166691,
        "sender_full_name": "GitHub",
        "timestamp": 1578524150
    },
    {
        "content": "<p>sstangl opened <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325\">PR #1325</a> from <code>bb-isplit-1159</code> to <code>master</code>:</p>\n<blockquote>\n<p>Closes #1159 </p>\n<p>Given code like the following, on x86_64, which does not have i128 registers:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    brnz v2, ebb1\n    jump ebb2(v1)\n</pre></div>\n\n\n<p>It would be split to:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    brnz v2, ebb1\n    v3, v4 = isplit.i128 v1\n    jump ebb2(v3, v4)\n</pre></div>\n\n\n<p>But that fails basic-block invariants. This patch changes that to:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    v3, v4 = isplit.i128 v1\n    brnz v2, ebb1\n    jump ebb2(v3, v4)\n</pre></div>\n\n\n<ul>\n<li>[x] This has been discussed in issue #1159 .</li>\n</ul>\n<p>I decided to move the <code>isplit</code> before the terminal branch group to keep the invariants simple: in that issue it was suggested that we solve this by allowing <code>isplit</code> instructions within the branch group, but in prior patches it was common need to have to inspect multiple branches in the same terminal group. If we allowed <code>isplit</code> there, many places throughout the code would have to learn how to ignore those instructions. Moving the <code>isplit</code> prior to all branches is a lower cognitive burden.</p>\n<ul>\n<li>[x] A short description of what this does, why it is needed.</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n</ul>\n<p>The testcase fails on master (with basic-blocks disabled) because <code>iconst.i128</code> still cannot be legalized. This patch causes the same behavior with/without basic-blocks.</p>\n<ul>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n</blockquote>",
        "id": 185166692,
        "sender_full_name": "GitHub",
        "timestamp": 1578524150
    },
    {
        "content": "<p>sstangl updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325\">PR #1325</a> from <code>bb-isplit-1159</code> to <code>master</code>:</p>\n<blockquote>\n<p>Closes #1159 </p>\n<p>Given code like the following, on x86_64, which does not have i128 registers:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    brnz v2, ebb1\n    jump ebb2(v1)\n</pre></div>\n\n\n<p>It would be split to:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    brnz v2, ebb1\n    v3, v4 = isplit.i128 v1\n    jump ebb2(v3, v4)\n</pre></div>\n\n\n<p>But that fails basic-block invariants. This patch changes that to:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    v3, v4 = isplit.i128 v1\n    brnz v2, ebb1\n    jump ebb2(v3, v4)\n</pre></div>\n\n\n<ul>\n<li>[x] This has been discussed in issue #1159 .</li>\n</ul>\n<p>I decided to move the <code>isplit</code> before the terminal branch group to keep the invariants simple: in that issue it was suggested that we solve this by allowing <code>isplit</code> instructions within the branch group, but in prior patches it was common need to have to inspect multiple branches in the same terminal group. If we allowed <code>isplit</code> there, many places throughout the code would have to learn how to ignore those instructions. Moving the <code>isplit</code> prior to all branches is a lower cognitive burden.</p>\n<ul>\n<li>[x] A short description of what this does, why it is needed.</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n</ul>\n<p>The testcase fails on master (with basic-blocks disabled) because <code>iconst.i128</code> still cannot be legalized. This patch causes the same behavior with/without basic-blocks.</p>\n<ul>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n</blockquote>",
        "id": 185253944,
        "sender_full_name": "GitHub",
        "timestamp": 1578602897
    },
    {
        "content": "<p>sstangl edited <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325\">PR #1325</a> from <code>bb-isplit-1159</code> to <code>master</code>:</p>\n<blockquote>\n<p>Closes #1159 </p>\n<p>Given code like the following, on x86_64, which does not have i128 registers:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    brnz v2, ebb1\n    jump ebb2(v1)\n</pre></div>\n\n\n<p>It would be split to:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    brnz v2, ebb1\n    v3, v4 = isplit.i128 v1\n    jump ebb2(v3, v4)\n</pre></div>\n\n\n<p>But that fails basic-block invariants. This patch changes that to:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0(v0: i64):\n    v1 = iconst.i128 0\n    v2 = icmp_imm eq v0, 1\n    v3, v4 = isplit.i128 v1\n    brnz v2, ebb1\n    jump ebb2(v3, v4)\n</pre></div>\n\n\n<ul>\n<li>[x] This has been discussed in issue #1159 .</li>\n</ul>\n<p>I decided to move the <code>isplit</code> before the terminal branch group to keep the invariants simple: in that issue it was suggested that we solve this by allowing <code>isplit</code> instructions within the branch group, but in prior patches it was common need to have to inspect multiple branches in the same terminal group. If we allowed <code>isplit</code> there, many places throughout the code would have to learn how to ignore those instructions. Moving the <code>isplit</code> prior to all branches is a lower cognitive burden.</p>\n<ul>\n<li>[x] A short description of what this does, why it is needed.</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR.<br>\n  If you don't know who could review this, please indicate so and/or ping<br>\n<code>bnjbvr</code>. The list of suggested reviewers on the right can help you.</li>\n</ul>\n</blockquote>",
        "id": 185253981,
        "sender_full_name": "GitHub",
        "timestamp": 1578602922
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-341032140\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-341032140\">PR Review</a>.</p>",
        "id": 185293029,
        "sender_full_name": "GitHub",
        "timestamp": 1578647487
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-341072017\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-341072017\">PR Review</a>.</p>",
        "id": 185297735,
        "sender_full_name": "GitHub",
        "timestamp": 1578651794
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#discussion_r365165930\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#discussion_r365165930\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Can you add test annotations to check that the compiled form is what we expect, here, please?</p>\n</blockquote>",
        "id": 185297736,
        "sender_full_name": "GitHub",
        "timestamp": 1578651794
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#discussion_r365165739\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#discussion_r365165739\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Is this split into its own variable to avoid borrowing pos.func twice? If not, since it's used only once can we inline it at its use?</p>\n</blockquote>",
        "id": 185297737,
        "sender_full_name": "GitHub",
        "timestamp": 1578651794
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-341072017\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-341072017\">PR Review</a>.</p>",
        "id": 185297738,
        "sender_full_name": "GitHub",
        "timestamp": 1578651794
    },
    {
        "content": "<p>bnjbvr merged <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325\">PR #1325</a>.</p>",
        "id": 186301738,
        "sender_full_name": "GitHub",
        "timestamp": 1579709684
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-346762028\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#pullrequestreview-346762028\">PR Review</a>.</p>",
        "id": 186308619,
        "sender_full_name": "GitHub",
        "timestamp": 1579713451
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1325#discussion_r369693494\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1325#discussion_r369693494\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Actually we can't check for the split instruction being present in the output, because we can reuse a pair created by concat, it seems.</p>\n</blockquote>",
        "id": 186308620,
        "sender_full_name": "GitHub",
        "timestamp": 1579713451
    }
]