[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 186923209,
        "sender_full_name": "GitHub",
        "timestamp": 1580328149
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\" target=\"_blank\" title=\"https://github.com/bnjbvr\">bnjbvr</a>, <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a>, and <a href=\"https://github.com/julian-seward1\" target=\"_blank\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a>.</p>",
        "id": 186923210,
        "sender_full_name": "GitHub",
        "timestamp": 1580328149
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\" target=\"_blank\" title=\"https://github.com/bnjbvr\">bnjbvr</a>, <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a>, and <a href=\"https://github.com/julian-seward1\" target=\"_blank\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a>.</p>",
        "id": 186923212,
        "sender_full_name": "GitHub",
        "timestamp": 1580328149
    },
    {
        "content": "<p><strong>abrown</strong> requested <a href=\"https://github.com/bnjbvr\" target=\"_blank\" title=\"https://github.com/bnjbvr\">bnjbvr</a>, <a href=\"https://github.com/sunfishcode\" target=\"_blank\" title=\"https://github.com/sunfishcode\">sunfishcode</a>, and <a href=\"https://github.com/julian-seward1\" target=\"_blank\" title=\"https://github.com/julian-seward1\">julian-seward1</a> for a review on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a>.</p>",
        "id": 186923213,
        "sender_full_name": "GitHub",
        "timestamp": 1580328149
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r372603323\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r372603323\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I don't think I understand how <code>RegUnit</code> is being packed, I'm afraid. EVEX (and VEX) support larger numbers of registers so I attempted to extract the next bit to use in the bits that EVEX uses to extend the set of possible registers (e.g. <code>XRBR'V'</code>)--this seems to give the wrong answer. How would I tell Cranelift that EVEX has more registers available?</p>\n</blockquote>",
        "id": 186923520,
        "sender_full_name": "GitHub",
        "timestamp": 1580328331
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-350389398\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-350389398\">PR Review</a>.</p>",
        "id": 186923521,
        "sender_full_name": "GitHub",
        "timestamp": 1580328332
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-350390341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-350390341\">PR Review</a>.</p>",
        "id": 186923667,
        "sender_full_name": "GitHub",
        "timestamp": 1580328431
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r372604031\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r372604031\">PR Review Comment</a>:</p>\n<blockquote>\n<p>The [wikipedia article] is also helpful if you don't want to crack open the Intel manual; maybe I will link to it in the documentation.</p>\n<p>[wikipedia article]: <a href=\"https://en.wikipedia.org/wiki/EVEX_prefix\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/EVEX_prefix\">https://en.wikipedia.org/wiki/EVEX_prefix</a></p>\n</blockquote>",
        "id": 186923668,
        "sender_full_name": "GitHub",
        "timestamp": 1580328432
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 187476619,
        "sender_full_name": "GitHub",
        "timestamp": 1580924646
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188069772,
        "sender_full_name": "GitHub",
        "timestamp": 1581555945
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-357897136\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-357897136\">PR Review</a>.</p>",
        "id": 188070036,
        "sender_full_name": "GitHub",
        "timestamp": 1581556263
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r378601997\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r378601997\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@bnjbvr, this (and the <code>.units(32)</code> above) is causing test failures that I don't understand:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/cranelift/blob/21516e5e988e70d1ff453de7c0b22ad58fe464a0/cranelift-codegen/src/isa/x86/registers.rs#L27\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/21516e5e988e70d1ff453de7c0b22ad58fe464a0/cranelift-codegen/src/isa/x86/registers.rs#L27\"><code>isa::x86::registers::tests::unit_encodings</code></a> is failing because now the GPRs miraculously have more units so <code>%xmm0</code> starts at <code>Some(32)</code></li>\n<li>similarly the <a href=\"https://github.com/bytecodealliance/cranelift/blob/21516e5e988e70d1ff453de7c0b22ad58fe464a0/cranelift-codegen/src/isa/x86/registers.rs#L47\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/21516e5e988e70d1ff453de7c0b22ad58fe464a0/cranelift-codegen/src/isa/x86/registers.rs#L47\"><code>unit_names</code></a> test thinks the reg index <code>16</code> is invalid</li>\n</ul>\n<p>What is going on?</p>\n</blockquote>",
        "id": 188070038,
        "sender_full_name": "GitHub",
        "timestamp": 1581556264
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-357915401\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-357915401\">PR Review</a>.</p>",
        "id": 188072409,
        "sender_full_name": "GitHub",
        "timestamp": 1581560079
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r378617654\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r378617654\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think you're running afoul of <a href=\"https://github.com/bytecodealliance/cranelift/blob/5602d1564c4121e4703843f23cc083dfb29c5592/cranelift-codegen/meta/src/cdsl/regs.rs#L240-L247\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/5602d1564c4121e4703843f23cc083dfb29c5592/cranelift-codegen/meta/src/cdsl/regs.rs#L240-L247\">https://github.com/bytecodealliance/cranelift/blob/5602d1564c4121e4703843f23cc083dfb29c5592/cranelift-codegen/meta/src/cdsl/regs.rs#L240-L247</a> which bumps the start of <code>FPR</code> to be aligned with its size. In theory you could add the expanded FPR first, then GPR, and everything should be okay?</p>\n</blockquote>",
        "id": 188072410,
        "sender_full_name": "GitHub",
        "timestamp": 1581560079
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-357920053\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-357920053\">PR Review</a>.</p>",
        "id": 188072989,
        "sender_full_name": "GitHub",
        "timestamp": 1581561108
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r378621612\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r378621612\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Aha!</p>\n</blockquote>",
        "id": 188072990,
        "sender_full_name": "GitHub",
        "timestamp": 1581561109
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358441342\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358441342\">PR Review</a>.</p>",
        "id": 188133615,
        "sender_full_name": "GitHub",
        "timestamp": 1581617616
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379032571\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379032571\">PR Review Comment</a>:</p>\n<blockquote>\n<p>Hm, too quick to celebrate: I tried moving the <code>RegBankBuilder::new(\"FloatRegs\"...</code> with the newly-expanded 32 units up above the <code>RegBankBuilder::new(\"IntRegs\"...</code> but now the meta build crashes <a href=\"https://github.com/bytecodealliance/cranelift/blob/5602d1564c4121e4703843f23cc083dfb29c5592/cranelift-codegen/meta/src/isa/x86/recipes.rs#L430\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/5602d1564c4121e4703843f23cc083dfb29c5592/cranelift-codegen/meta/src/isa/x86/recipes.rs#L430\">due to r15</a> with a backtrace of:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;main&#39; panicked at &#39;attempt to subtract with overflow&#39;, cranelift-codegen/meta/src/cdsl/regs.rs:60:25\nstack backtrace:\n...\n  15: cranelift_codegen_meta::cdsl::regs::RegBank::unit_by_name\n             at cranelift-codegen/meta/src/cdsl/regs.rs:60\n  16: cranelift_codegen_meta::cdsl::regs::IsaRegs::regunit_by_name\n             at cranelift-codegen/meta/src/cdsl/regs.rs:410\n  17: cranelift_codegen_meta::isa::x86::recipes::define\n             at cranelift-codegen/meta/src/isa/x86/recipes.rs:430\n  18: cranelift_codegen_meta::isa::x86::define\n             at cranelift-codegen/meta/src/isa/x86/mod.rs:61\n  19: cranelift_codegen_meta::isa::define::{{closure}}\n             at cranelift-codegen/meta/src/isa/mod.rs:62\n...\n</pre></div>\n\n\n</blockquote>",
        "id": 188133616,
        "sender_full_name": "GitHub",
        "timestamp": 1581617617
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358459354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358459354\">PR Review</a>.</p>",
        "id": 188136237,
        "sender_full_name": "GitHub",
        "timestamp": 1581619246
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379046928\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379046928\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I think the failing assert is in error, f.ex <code>let reg_xmm1 = Register::new(fpr, regs.regunit_by_name(fpr, \"xmm1\"));</code> currently asserts for the same reason on master. It looks like <code>unit_by_name</code> shouldn't even trying to subtract from the register number (<code>15</code> in <code>r15</code>), and happens to work out so long as the specified reg class starts at 0 - subtract by 0 won't underflow.</p>\n<p>I think instead <code>unit_by_name</code> ought to be checking just that <code>as_num &lt; self.units</code>, and return <code>self.first_unit + as_num</code> like it would below?</p>\n</blockquote>",
        "id": 188136238,
        "sender_full_name": "GitHub",
        "timestamp": 1581619246
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188166519,
        "sender_full_name": "GitHub",
        "timestamp": 1581639144
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358642208\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358642208\">PR Review</a>.</p>",
        "id": 188166850,
        "sender_full_name": "GitHub",
        "timestamp": 1581639501
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379191482\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379191482\">PR Review Comment</a>:</p>\n<blockquote>\n<p>You're right. I pushed b0ee482 to fix that and b52fbdd to show what happens when I move the XMM registers first:</p>\n<ul>\n<li>failures in <code>unit_names</code> and <code>unit_encodings</code> because, e.g., rax is no longer the first register; these can be fixed and are not a real problem</li>\n<li>failures with unwinding (<code>test_*_alloc</code> and <code>windows_fastcall_x64_unwind.clif</code>): @peterhuene, it looks like the unwind info uses the register index directly; if I change a bunch of register indexes, does this completely break unwinding?</li>\n<li>a failure in <code>simd-arithmetic-binemit.clif</code> is expected; that's what I'm currently working on</li>\n<li>a failure in <code>pinned-reg.clif</code> like <code>panicked in worker #1: Couldn't clear fixed output interference for v1</code>; @bnjbvr, do you have any comment on this? Will changing the register indexes break regalloc?</li>\n</ul>\n</blockquote>",
        "id": 188166851,
        "sender_full_name": "GitHub",
        "timestamp": 1581639501
    },
    {
        "content": "<p>iximeow submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358661585\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358661585\">PR Review</a>.</p>",
        "id": 188170297,
        "sender_full_name": "GitHub",
        "timestamp": 1581643240
    },
    {
        "content": "<p>iximeow created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379208119\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379208119\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I was afraid there'd be some breakages like that :(</p>\n<p>I noticed Windows unwinding using the regunit as an integer directly when fixing XMM preservation. Changing indices around will break it, but straightforward to fix: something like <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378/files#diff-c720e722fabb16edd5e9ce3554ee7f5dR85\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378/files#diff-c720e722fabb16edd5e9ce3554ee7f5dR85\">this</a> but using <code>GPR.first</code>?</p>\n<p>To the regalloc point, <code>pinned_reg</code> also accidentally depends on GPRs being first: <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/src/isa/registers.rs#L204-L209\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/src/isa/registers.rs#L204-L209\"><code>is_pinned_reg</code></a> tests against <code>pinned_reg</code> directly, where the ISA builder stores the provided <code>pinned_reg</code> <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/cdsl/regs.rs#L216-L220\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/cdsl/regs.rs#L216-L220\">without translation</a> and when building the x86 ISA description it's passed <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/registers.rs#L10\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/registers.rs#L10\">the literal 15</a>. <code>pinned_reg</code> in the generated ISA should probably be offset from the start of its RegClass, so <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/gen_registers.rs#L60\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/gen_registers.rs#L60\"><code>reg_bank.pinned_reg</code></a> ought to be <code>reg_bank.pinned_reg + reg_bank.first_unit + reg_class.start</code>.</p>\n<p>I think fixing dependence on <code>GPR.first == 0</code> would be a good PR independent of EVEX encoding, though I dunno how much of this will be replaced with New Backend Plans. (this is where stop talking and wait for Benjamin :D)</p>\n</blockquote>",
        "id": 188170298,
        "sender_full_name": "GitHub",
        "timestamp": 1581643240
    },
    {
        "content": "<p>peterhuene created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379216301\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379216301\">PR Review Comment</a>:</p>\n<blockquote>\n<p>@iximeow I think your proposed fix for the GPRs in the Windows unwind information makes sense.</p>\n</blockquote>",
        "id": 188171882,
        "sender_full_name": "GitHub",
        "timestamp": 1581645348
    },
    {
        "content": "<p>peterhuene submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358671186\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-358671186\">PR Review</a>.</p>",
        "id": 188171883,
        "sender_full_name": "GitHub",
        "timestamp": 1581645348
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188239850,
        "sender_full_name": "GitHub",
        "timestamp": 1581709619
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188248363,
        "sender_full_name": "GitHub",
        "timestamp": 1581715442
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188248410,
        "sender_full_name": "GitHub",
        "timestamp": 1581715462
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-359227729\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#pullrequestreview-359227729\">PR Review</a>.</p>",
        "id": 188248504,
        "sender_full_name": "GitHub",
        "timestamp": 1581715536
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379651320\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370#discussion_r379651320\">PR Review Comment</a>:</p>\n<blockquote>\n<p>I've figured this out... finally <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>.</p>\n</blockquote>",
        "id": 188248505,
        "sender_full_name": "GitHub",
        "timestamp": 1581715536
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188249670,
        "sender_full_name": "GitHub",
        "timestamp": 1581716409
    },
    {
        "content": "<p>abrown updated <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a> from <code>evex</code> to <code>master</code>:</p>\n<blockquote>\n<ul>\n<li>[x] This has been discussed in issue #1244.</li>\n<li>[x] A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. <code>i64x2.mul</code>) that are optimally encoded in VEX/EVEX, it seems like we should support these encoding formats. For this PR, only EVEX was added (and not every addressing form) in order to implement i64x2 multiplication. I haven't yet test-run this on an AVX512DQ-compatible CPU but will soon; while implementing this, I discovered that there is no good way to indicate an encoding that is predicated on either of two settings flags (see TODO in <code>encodings.rs</code>).</li>\n<li>[x] This PR contains test cases, if meaningful.</li>\n<li>[x] A reviewer from the core maintainer team has been assigned for this PR (I'm tagging people that might be interested in this).</li>\n</ul>\n</blockquote>",
        "id": 188473082,
        "sender_full_name": "GitHub",
        "timestamp": 1582047663
    },
    {
        "content": "<p>bnjbvr closed without merge <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">PR #1370</a>.</p>",
        "id": 189800982,
        "sender_full_name": "GitHub",
        "timestamp": 1583421185
    }
]