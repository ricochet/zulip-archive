[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310\">Issue #1310</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift? <code>udiv_imm v0, 4</code> should be optimized to <code>shr_imm v0, 2</code>, while <code>urem_imm v0, 4</code> should be optimized to <code>band_imm v0, 0b11</code>.</li>\n<li>What is the value of adding this in Cranelift? This improves the runtime performance of the generated code. The modulo operator is for example used to test pointers for alignment in <a href=\"https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src/libcore/intrinsics.rs#L1417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src/libcore/intrinsics.rs#L1417\">libcore</a>.</li>\n<li>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use? N/A</p>\n</li>\n<li>\n<p>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal? I first considered to do this optimization while during codegen of the clif ir. Unfortunately the required alignment is stored in a variable, so <code>cranelift_frontend</code> makes it an ebb param until I finalize the <code>FunctionBuilder</code>.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 184166280,
        "sender_full_name": "GitHub",
        "timestamp": 1577190001
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310#issuecomment-571148969\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310#issuecomment-571148969\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310\">Issue #1310</a>:</p>\n<blockquote>\n<p>This optimization has been implemented already, and it's run if opt_level is not None (as part of simple_preopt). The following test case:</p>\n<div class=\"codehilite\"><pre><span></span>set opt_level=speed\ntarget x86_64\n\nfunction %f(i64) -&gt; i64 {\nebb0(v0: i64):\n    v1 = udiv_imm v0, 4\n    return v1\n}\n</pre></div>\n\n\n<p>Is compiled into this:</p>\n<div class=\"codehilite\"><pre><span></span>function %f(i64 [%rdi], i64 fp [%rbp]) -&gt; i64 [%rax], i64 fp [%rbp] fast {\n    ss0 = incoming_arg 16, offset -16\n\n                                ebb0(v0: i64 [%rdi], v2: i64 [%rbp]):\n[RexOp1pushq#50]                    x86_push v2\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n[DynRexOp1r_ib#d0c1,%rdi]           v1 = ushr_imm v0, 2\n[RexOp1rmov#8089]                   regmove v1, %rdi -&gt; %rax\n[RexOp1popq#58,%rbp]                v3 = x86_pop.i64\n[Op1ret#c3]                         return v1, v3\n}\n</pre></div>\n\n\n<p>Are you running into a case where it should kick in but it doesn't, while opt_level is set to speed or speed+size?</p>\n</blockquote>",
        "id": 184907998,
        "sender_full_name": "GitHub",
        "timestamp": 1578319378
    },
    {
        "content": "<p>bnjbvr labeled <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310\">Issue #1310</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift? <code>udiv_imm v0, 4</code> should be optimized to <code>shr_imm v0, 2</code>, while <code>urem_imm v0, 4</code> should be optimized to <code>band_imm v0, 0b11</code>.</li>\n<li>What is the value of adding this in Cranelift? This improves the runtime performance of the generated code. The modulo operator is for example used to test pointers for alignment in <a href=\"https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src/libcore/intrinsics.rs#L1417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src/libcore/intrinsics.rs#L1417\">libcore</a>.</li>\n<li>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use? N/A</p>\n</li>\n<li>\n<p>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal? I first considered to do this optimization while during codegen of the clif ir. Unfortunately the required alignment is stored in a variable, so <code>cranelift_frontend</code> makes it an ebb param until I finalize the <code>FunctionBuilder</code>.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 184908015,
        "sender_full_name": "GitHub",
        "timestamp": 1578319386
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310#issuecomment-571158626\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310#issuecomment-571158626\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310\">Issue #1310</a>:</p>\n<blockquote>\n<p>I can't use opt-level=speed as jump tables don't work with LICM. I searched for this optimization in cranelift_preopt, but I should have looked for this optimization in cranelift_codegen itself too.</p>\n</blockquote>",
        "id": 184910351,
        "sender_full_name": "GitHub",
        "timestamp": 1578321045
    },
    {
        "content": "<p>bjorn3 closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1310\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1310\">Issue #1310</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift? <code>udiv_imm v0, 4</code> should be optimized to <code>shr_imm v0, 2</code>, while <code>urem_imm v0, 4</code> should be optimized to <code>band_imm v0, 0b11</code>.</li>\n<li>What is the value of adding this in Cranelift? This improves the runtime performance of the generated code. The modulo operator is for example used to test pointers for alignment in <a href=\"https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src/libcore/intrinsics.rs#L1417\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/625375400cdd172877e81c3ce44ce68f2011af2d/src/libcore/intrinsics.rs#L1417\">libcore</a>.</li>\n<li>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use? N/A</p>\n</li>\n<li>\n<p>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal? I first considered to do this optimization while during codegen of the clif ir. Unfortunately the required alignment is stored in a variable, so <code>cranelift_frontend</code> makes it an ebb param until I finalize the <code>FunctionBuilder</code>.</p>\n</li>\n</ul>\n</blockquote>",
        "id": 184910352,
        "sender_full_name": "GitHub",
        "timestamp": 1578321045
    }
]