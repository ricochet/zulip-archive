[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/34\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/34\">Issue #34</a>:</p>\n<blockquote>\n<p>The <code>ir::layout</code> module keeps track of the ordering of instructions and extended basic blocks in a function. It is currently implemented with doubly linked lists of EBBs and instructions. All program points have a sequence number so the <code>ProgramOrder</code> trait can be implemented efficiently.</p>\n<p>This representation uses 20 bytes per EBB and 16 bytes per instruction. We should experiment with a more compact layout representation:</p>\n<ul>\n<li>Use entity maps to assign a sequence number to every EBB and every instruction.</li>\n<li>Keep a B+-tree of the EBBs in layout order.</li>\n<li>Keep a B+-tree of all the instructions in layout order.</li>\n</ul>\n<p>This compact representation uses 8 bytes per EBB and 8 bytes per instruction plus a minimal overhead for the non-leaf nodes in the B+-trees.</p>\n<p>The <code>Cursor</code> struct should probably contain a path to its position in both B+-trees which means that the standard library B-trees won't work.</p>\n</blockquote>",
        "id": 189361006,
        "sender_full_name": "GitHub",
        "timestamp": 1582931973
    }
]