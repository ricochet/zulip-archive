[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/553\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/553\">Issue #553</a>:</p>\n<blockquote>\n<p>From the paper \"Multi-return Function Call\" (<a href=\"http://www.ccs.neu.edu/home/shivers/papers/mrlc-jfp.pdf\" target=\"_blank\" title=\"http://www.ccs.neu.edu/home/shivers/papers/mrlc-jfp.pdf\">http://www.ccs.neu.edu/home/shivers/papers/mrlc-jfp.pdf</a>).<br>\nThe basic idea from the perspective of compiled code is to include multiple return pointers in a stack frame so functions can return to different places. </p>\n<h5>Compared to <code>Result&lt;T,E&gt;</code></h5>\n<p>This is denotationally the same as return a value of a Rust enum with 1 variant according to each of the return pointer slots, with fields according to the returned data associated with that slot (registers, spilled stack slots, etc). But with the naive enum calling convention of adding a tag field, the caller needs to branch on the tag field, even if the enum value was just created before the return so nothing is in principle unpredictable. In the common case of a function \"rethrowing\" a <code>Err</code>, (<code>Err(e0) =&gt; ... return Err(e1) ...</code> math arm), the native way results results on O(n) branches (one per stack frame) one each of the <code>Err</code> tags, while this way allows the error return pointer to point to disjoint control flow for the failure case, catching and rethrowing without additional branches, so the only 1 branch is the original failure condition.</p>\n<h5>Compared to unwinding</h5>\n<p>Success and failure control flow is implemented identically, avoiding significant effort on the part of compiler writers in maintaining a completely separate implementation concepts while optimizations can work with both, and don't get stuck on the success failure boundary. At run time, the lack of any DWARF-like interpreters reduces dependencies and simplifies things too.</p>\n<p>In short, we have the asymptotic efficiency of unwinding with the implementation (compiler and run-time) efficiency of enum return.</p>\n<hr>\n<p>I talked to @eddyb about this once and he said to talk to someone on <code>#cranelift</code>, but alas I am on IRC less these days and I forgot their nick. Opening this to make sure the idea isn't lost completely due to my negligence. Cheers.</p>\n</blockquote>",
        "id": 189361375,
        "sender_full_name": "GitHub",
        "timestamp": 1582932306
    }
]