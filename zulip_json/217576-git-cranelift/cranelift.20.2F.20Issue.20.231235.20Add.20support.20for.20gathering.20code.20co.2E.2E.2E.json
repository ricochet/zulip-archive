[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1235\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1235\">Issue #1235</a>:</p>\n<blockquote>\n<h3>Summary</h3>\n<p>Add the ability to insert instrumentation to track code coverage.</p>\n<h3>Motivation</h3>\n<p>Besides the usual benefits for users who are interested in the code coverage of their own tests or what have you, this could help greatly improve our own testing and fuzzing infrastructure for Cranelift itself.</p>\n<p>See <a href=\"https://web.cs.ucdavis.edu/~su/publications/oopsla15-compiler.pdf\" target=\"_blank\" title=\"https://web.cs.ucdavis.edu/~su/publications/oopsla15-compiler.pdf\">Finding Deep Compiler Bugs via Guided Stochastic Program Mutation by Le et al</a>, for example, where they:</p>\n<ul>\n<li>Find statically-reachable, but dynamically-unexecuted-for-some-inputs code</li>\n<li>Randomly mutate that code</li>\n<li>Re-compile and re-run the program over those same inputs</li>\n<li>Assert that the observable results are equivalent</li>\n</ul>\n<p>This should help us find weird, unique bugs that differential fuzzing between cranelift optimized vs cranelift un-optimized or cranelift vs baldrmonkey or cranelift vs lightbeam on random test cases are unlikely to discover.</p>\n</blockquote>",
        "id": 189361653,
        "sender_full_name": "GitHub",
        "timestamp": 1582932456
    }
]