[
    {
        "content": "<p>iximeow opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>I'd like <code>FrameUnwindSink</code> to allow collecting records for multiple functions into one sink. Currently, <code>TargetIsa::emit_unwind_info</code> is designed around emitting one full record (<a href=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L242-L248\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L242-L248\">a whole <code>.eh_frame</code></a> or the <code>UnwindInfo</code> part of a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-runtime_function\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-runtime_function\">RUNTIME_FUNCTION</a>) per function, which is awkward to use in the face of multiple functions. In squaring away this interface with #902, I've realized that to generate good unwind information through <code>cranelift-module</code>, we would have to do a lot of legwork already done by <code>gimli</code> to join all distinct <code>.eh_frame</code>, so I'd rather just build the right structures in the first place. As @philipc <a href=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366607644\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366607644\">commented</a> the existing interface isn't entirely how <code>gimli</code> is intended to be used, either.</p>\n<p>Functionally, I want <a href=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L172\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L172\"><code>isa::x86::fde::emit_fde</code></a> to be designed around adding to a <code>FrameTable</code> provided by <code>sink</code>, rather than constructing and writing an <code>.eh_frame</code> section for the function being described. Windows unwind info generation wouldn't have to change much, with implementors of <code>FrameUnwindSink</code> collecting an array of <code>UnwindInfo</code> rather than just one.</p>\n<p>I imagine this looking like <code>FrameUnwindSink</code> impls building a collection of records, either a <code>FrameTable</code> for <code>Libunwind</code> or a vec of <code>UnwindInfo</code> for <code>Fastcall</code>. To go along with this, I expect such impls would be added in <code>cranelift-module</code>. These may or may not be suitable for use from wasmtime, I'm optimistic that they could because in the worst case a <code>FrameUnwindSink</code> can be created, used for one function, and then discarded, preserving the current behavior.</p>\n<p>My expectation is that a trait like</p>\n<div class=\"codehilite\"><pre><span></span>trait FrameUnwindSink {\n    /// Create an instance of the implementor for the provided unwind style.\n    fn for_style(kind: FrameUnwindKind) -&gt; Self;\n\n    /// Add a function to the sink. May panic if the function&#39;s calling convention\n    /// is not compatible with the unwind style this sink was created with.\n    fn add_function(&amp;mut self, func: &amp;Function, isa: &amp;dyn TargetIsa);\n\n    /// Serialize this sink&#39;s contents in a manner appropriate for this sink&#39;s\n    /// unwind style.\n    fn serialize(&amp;self) -&gt; Vec&lt;u8&gt;;\n</pre></div>\n\n\n<p>should satisfy everyone's needs?</p>\n<p>The notable benefit of this is making it easy to generate a single <code>.eh_frame</code> section when using <code>cranelift-faerie</code> or <code>cranelift-object</code>, meaning <code>lucet</code> can unwind wasm, have backtraces, all that good stuff :) I imagine @bjorn3 might like this for having unwind information when using Cranelift as a <code>rustc</code> backend as well?</p>\n<p>This also seems like a good excuse to move <code>isa::x86::fde</code> and <code>isa::x86::unwind</code> to <code>isa::x86::unwind::windows</code> and <code>isa::x86::unwind::libunwind</code> respectively?</p>\n<p>cc @yurydelendik as I'd like your thoughts on this idea, and @peterhuene as I know you've also worked on unwind information here.</p>\n<p>Opening an issue to make sure this gets a design friendly to both lucet and wasmtime, rather than just tweaking #902 until something looks right :)</p>\n</blockquote>",
        "id": 187971661,
        "sender_full_name": "GitHub",
        "timestamp": 1581467672
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585029961\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585029961\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>So the current design of the trait is that something external to Cranelift (e.g. Wasmtime) would be the implementer of <code>FrameUnwindSink</code> so (ideally) it wouldn't need to know anything about the unwind implementation details itself.  Unfortunately, given the differences between Windows and the other platforms, the abstraction is quite a bit leaky (for example, the <code>reloc</code> and <code>set_entry_offset</code> methods are only used for FDEs).</p>\n<p>With the above revised trait definition, it seems to me like it is now the sink that is responsible for recording each function and serializing the unwind information somehow.  At first glance this seems to be the opposite of the current implementation and something we would like to avoid in Wasmtime so that it doesn't have to have knowledge of how to create the unwind info itself.</p>\n<p>That said, I am convinced that <code>FrameUnwindSink</code> is no longer a working abstraction for what we want here.</p>\n<p>Perhaps rather than having <code>TargetIsa::emit_unwind_info</code> being responsible for serializing opaque unwind data into a sink we could refactor this such that we can have a <code>TargetIsa::calculate_unwind</code> method that returns an <code>Unwind</code> enumeration with <code>Unwind::None</code>, <code>Unwind::Windows(UnwindInfo)</code>, and <code>Unwind::Dwarf(FrameDescriptionEntry)</code> (for now).  This would allow Cranelift users to collect these without having to only deal with the serialized data.</p>\n<p><code>UnwindInfo::emit</code> would change to take simpler \"writer\" trait.  This would potentially allow it to write directly to where the unwind information needs to be in memory rather than some intermediate <code>Vec</code> like it does now.</p>\n<p>For Dwarf, users would then be free to construct a single <code>FrameTable</code> and serialize all of the FDEs at once.</p>\n<p>I also think putting the unwind types into corresponding submodules of <code>isa::x86::unwind</code> makes sense.</p>\n<p>@iximeow @yurydelendik what are your thoughts on this approach?</p>\n</blockquote>",
        "id": 187981709,
        "sender_full_name": "GitHub",
        "timestamp": 1581483556
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585364187\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585364187\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<blockquote>\n<p>With the above revised trait definition, it seems to me like it is now the sink that is responsible for recording each function and serializing the unwind information somehow.</p>\n</blockquote>\n<p>This is true - my hope was that in fact implementors of <code>FrameUnwindSink</code> could live in <code>cranelift</code> and be reused. I realize now that relocations make that questionable, since there's no simple <code>Vec&lt;u8&gt;</code> representation for unwind info that includes them.</p>\n<p>I like the idea of a <code>calculate_unwind</code> with an <code>UnwindWriter</code> trait. I had a momentary concern about constructing <code>FrameDescriptionEntry</code> without their corresponding <code>CIE</code>, but that's all taken care of when the <code>FDE</code> are serialized!</p>\n</blockquote>",
        "id": 188042014,
        "sender_full_name": "GitHub",
        "timestamp": 1581533992
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585371092\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585371092\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>With regards to an <code>UnwindWriter</code> trait, I don't think we would need to abstract the writing across the different types of unwind information given a model above where we return <code>UnwindInfo</code> and <code>FrameDescriptionEntry</code> directly to Cranelift users; that enables the caller to collect these and decide how best to write them in bulk.</p>\n<p>Cranelift users will need to know how to build a <code>FrameTable</code> for handling DWARF, but gimli makes that pretty easy to do.  Wasmtime has a bunch of DWARF-specific handling for the unwind information <em>already</em>, so moving the construction of a <code>FrameTable</code> to there isn't a big deal imo.</p>\n<p>For <code>UnwindInfo::emit</code>, I think perhaps a writer trait wouldn't be necessary and it should just accept a <code>&amp;mut [u8]</code>. <code>UnwindInfo::emit</code> can simply wrap the slice internally with a \"writer\" and perhaps panic if the slice isn't big enough or returns a <code>Result</code>.</p>\n</blockquote>",
        "id": 188043824,
        "sender_full_name": "GitHub",
        "timestamp": 1581534976
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585384189\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-585384189\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>I see, because Windows <code>UnwindInfo</code> doesn't involve relocations it is serializable to a simple byte Vec. And <code>FrameDescriptionEntry</code> tracks addresses that might involve relocations via <code>gimli::Address</code>, so users can handle that as they see it. Cool!</p>\n</blockquote>",
        "id": 188046697,
        "sender_full_name": "GitHub",
        "timestamp": 1581536766
    },
    {
        "content": "<p>peterhuene assigned <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>I'd like <code>FrameUnwindSink</code> to allow collecting records for multiple functions into one sink. Currently, <code>TargetIsa::emit_unwind_info</code> is designed around emitting one full record (<a href=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L242-L248\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L242-L248\">a whole <code>.eh_frame</code></a> or the <code>UnwindInfo</code> part of a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-runtime_function\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-runtime_function\">RUNTIME_FUNCTION</a>) per function, which is awkward to use in the face of multiple functions. In squaring away this interface with #902, I've realized that to generate good unwind information through <code>cranelift-module</code>, we would have to do a lot of legwork already done by <code>gimli</code> to join all distinct <code>.eh_frame</code>, so I'd rather just build the right structures in the first place. As @philipc <a href=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366607644\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366607644\">commented</a> the existing interface isn't entirely how <code>gimli</code> is intended to be used, either.</p>\n<p>Functionally, I want <a href=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L172\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L172\"><code>isa::x86::fde::emit_fde</code></a> to be designed around adding to a <code>FrameTable</code> provided by <code>sink</code>, rather than constructing and writing an <code>.eh_frame</code> section for the function being described. Windows unwind info generation wouldn't have to change much, with implementors of <code>FrameUnwindSink</code> collecting an array of <code>UnwindInfo</code> rather than just one.</p>\n<p>I imagine this looking like <code>FrameUnwindSink</code> impls building a collection of records, either a <code>FrameTable</code> for <code>Libunwind</code> or a vec of <code>UnwindInfo</code> for <code>Fastcall</code>. To go along with this, I expect such impls would be added in <code>cranelift-module</code>. These may or may not be suitable for use from wasmtime, I'm optimistic that they could because in the worst case a <code>FrameUnwindSink</code> can be created, used for one function, and then discarded, preserving the current behavior.</p>\n<p>My expectation is that a trait like</p>\n<div class=\"codehilite\"><pre><span></span>trait FrameUnwindSink {\n    /// Create an instance of the implementor for the provided unwind style.\n    fn for_style(kind: FrameUnwindKind) -&gt; Self;\n\n    /// Add a function to the sink. May panic if the function&#39;s calling convention\n    /// is not compatible with the unwind style this sink was created with.\n    fn add_function(&amp;mut self, func: &amp;Function, isa: &amp;dyn TargetIsa);\n\n    /// Serialize this sink&#39;s contents in a manner appropriate for this sink&#39;s\n    /// unwind style.\n    fn serialize(&amp;self) -&gt; Vec&lt;u8&gt;;\n</pre></div>\n\n\n<p>should satisfy everyone's needs?</p>\n<p>The notable benefit of this is making it easy to generate a single <code>.eh_frame</code> section when using <code>cranelift-faerie</code> or <code>cranelift-object</code>, meaning <code>lucet</code> can unwind wasm, have backtraces, all that good stuff :) I imagine @bjorn3 might like this for having unwind information when using Cranelift as a <code>rustc</code> backend as well?</p>\n<p>This also seems like a good excuse to move <code>isa::x86::fde</code> and <code>isa::x86::unwind</code> to <code>isa::x86::unwind::windows</code> and <code>isa::x86::unwind::libunwind</code> respectively?</p>\n<p>cc @yurydelendik as I'd like your thoughts on this idea, and @peterhuene as I know you've also worked on unwind information here.</p>\n<p>Opening an issue to make sure this gets a design friendly to both lucet and wasmtime, rather than just tweaking #902 until something looks right :)</p>\n</blockquote>",
        "id": 188493989,
        "sender_full_name": "GitHub",
        "timestamp": 1582061858
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-589251690\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-589251690\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>I was going to put together a PR based on this conversation but I see you've assigned this to yourself so I'll take that as you working on this - thank you @peterhuene!</p>\n</blockquote>",
        "id": 188666565,
        "sender_full_name": "GitHub",
        "timestamp": 1582224945
    },
    {
        "content": "<p>peterhuene <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-589263202\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387#issuecomment-589263202\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a>:</p>\n<blockquote>\n<p>@iximeow I've indeed started on this and will get it done as soon as I get some other unrelated Wasmtime work up.</p>\n</blockquote>",
        "id": 188668851,
        "sender_full_name": "GitHub",
        "timestamp": 1582226492
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1387\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1387\">Issue #1387</a> (assigned to peterhuene):</p>\n<blockquote>\n<p>I'd like <code>FrameUnwindSink</code> to allow collecting records for multiple functions into one sink. Currently, <code>TargetIsa::emit_unwind_info</code> is designed around emitting one full record (<a href=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L242-L248\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L242-L248\">a whole <code>.eh_frame</code></a> or the <code>UnwindInfo</code> part of a <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-runtime_function\" target=\"_blank\" title=\"https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-runtime_function\">RUNTIME_FUNCTION</a>) per function, which is awkward to use in the face of multiple functions. In squaring away this interface with #902, I've realized that to generate good unwind information through <code>cranelift-module</code>, we would have to do a lot of legwork already done by <code>gimli</code> to join all distinct <code>.eh_frame</code>, so I'd rather just build the right structures in the first place. As @philipc <a href=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366607644\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1320#discussion_r366607644\">commented</a> the existing interface isn't entirely how <code>gimli</code> is intended to be used, either.</p>\n<p>Functionally, I want <a href=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L172\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/c0f82dbdeca0d18c5a829463c616cc768657de3a/cranelift-codegen/src/isa/x86/fde.rs#L172\"><code>isa::x86::fde::emit_fde</code></a> to be designed around adding to a <code>FrameTable</code> provided by <code>sink</code>, rather than constructing and writing an <code>.eh_frame</code> section for the function being described. Windows unwind info generation wouldn't have to change much, with implementors of <code>FrameUnwindSink</code> collecting an array of <code>UnwindInfo</code> rather than just one.</p>\n<p>I imagine this looking like <code>FrameUnwindSink</code> impls building a collection of records, either a <code>FrameTable</code> for <code>Libunwind</code> or a vec of <code>UnwindInfo</code> for <code>Fastcall</code>. To go along with this, I expect such impls would be added in <code>cranelift-module</code>. These may or may not be suitable for use from wasmtime, I'm optimistic that they could because in the worst case a <code>FrameUnwindSink</code> can be created, used for one function, and then discarded, preserving the current behavior.</p>\n<p>My expectation is that a trait like</p>\n<div class=\"codehilite\"><pre><span></span>trait FrameUnwindSink {\n    /// Create an instance of the implementor for the provided unwind style.\n    fn for_style(kind: FrameUnwindKind) -&gt; Self;\n\n    /// Add a function to the sink. May panic if the function&#39;s calling convention\n    /// is not compatible with the unwind style this sink was created with.\n    fn add_function(&amp;mut self, func: &amp;Function, isa: &amp;dyn TargetIsa);\n\n    /// Serialize this sink&#39;s contents in a manner appropriate for this sink&#39;s\n    /// unwind style.\n    fn serialize(&amp;self) -&gt; Vec&lt;u8&gt;;\n</pre></div>\n\n\n<p>should satisfy everyone's needs?</p>\n<p>The notable benefit of this is making it easy to generate a single <code>.eh_frame</code> section when using <code>cranelift-faerie</code> or <code>cranelift-object</code>, meaning <code>lucet</code> can unwind wasm, have backtraces, all that good stuff :) I imagine @bjorn3 might like this for having unwind information when using Cranelift as a <code>rustc</code> backend as well?</p>\n<p>This also seems like a good excuse to move <code>isa::x86::fde</code> and <code>isa::x86::unwind</code> to <code>isa::x86::unwind::windows</code> and <code>isa::x86::unwind::libunwind</code> respectively?</p>\n<p>cc @yurydelendik as I'd like your thoughts on this idea, and @peterhuene as I know you've also worked on unwind information here.</p>\n<p>Opening an issue to make sure this gets a design friendly to both lucet and wasmtime, rather than just tweaking #902 until something looks right :)</p>\n</blockquote>",
        "id": 189361782,
        "sender_full_name": "GitHub",
        "timestamp": 1582932533
    }
]