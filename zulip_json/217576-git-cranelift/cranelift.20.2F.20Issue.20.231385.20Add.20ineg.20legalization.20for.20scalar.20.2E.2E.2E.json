[
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-584566544\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-584566544\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<p>Please also add one test for <code>i8</code>. Integer types &lt;32bit often need extra legalizations.</p>\n</blockquote>",
        "id": 187899412,
        "sender_full_name": "GitHub",
        "timestamp": 1581416702
    },
    {
        "content": "<p>peterdelevoryas <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-584590025\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-584590025\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<blockquote>\n<p>Please also add one test for <code>i8</code>. Integer types &lt;32bit often need extra legalizations.</p>\n</blockquote>\n<p>Ya ok I have to admit defeat: I added an i8 test, and I tried debugging it, but it makes no sense: the ineg legalization of the i8 returns \"done\", not \"legalized\", presumably because it thinks that the ineg is already legal?? <a href=\"https://pastebin.com/0E1Bs06A\" target=\"_blank\" title=\"https://pastebin.com/0E1Bs06A\">https://pastebin.com/0E1Bs06A</a> I added print statements that trace the result of <code>legalize_inst</code>, and for the i32 case it returns \"legalized\" and then it legalizes an iconst and an isub, presumably the two instructions that get inserted by <code>convert_ineg</code>, but for the ineg of the i8 value it doesn't occur. This must have something to do with the ireduce, I just can't figure out what yet.</p>\n</blockquote>",
        "id": 187903371,
        "sender_full_name": "GitHub",
        "timestamp": 1581420251
    },
    {
        "content": "<p>peterdelevoryas <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-585012183\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-585012183\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<p>To summarize: everything is working except the i64 test I added, and I still have to remove the comments I added and add a better error message to the panic</p>\n</blockquote>",
        "id": 187979230,
        "sender_full_name": "GitHub",
        "timestamp": 1581478893
    },
    {
        "content": "<p>peterdelevoryas <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586357364\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586357364\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<p>Ok, so, I think the changes are finally done (<code>ineg</code> legalization tested on i686/x86_64 with all scalar integer types), one of my changes results in an unused import though</p>\n<div class=\"codehilite\"><pre><span></span>warning: unused import: `crate::ir::InstBuilder`\n    --&gt; /Users/peterd/src/peterd-cranelift/target/debug/build/cranelift-codegen-b0deee4e3070f0b5/out/legalize-x86.rs:1619:9\n     |\n1619 |     use crate::ir::InstBuilder;\n     |         ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `#[warn(unused_imports)]` on by default\n</pre></div>\n\n\n<p>This is the generated file:</p>\n<div class=\"codehilite\"><pre><span></span>/// Legalize instructions by narrowing.\n///\n/// Use x86-specific instructions if needed.\n#[allow(unused_variables,unused_assignments,non_snake_case)]\npub fn x86_widen(\n    inst: crate::ir::Inst,\n    func: &amp;mut crate::ir::Function,\n    cfg: &amp;mut crate::flowgraph::ControlFlowGraph,\n    isa: &amp;dyn crate::isa::TargetIsa,\n) -&gt; bool {\n    use crate::ir::InstBuilder;\n    use crate::cursor::{Cursor, FuncCursor};\n    let mut pos = FuncCursor::new(func).at_inst(inst);\n    pos.use_srcloc(inst);\n    {\n        match pos.func.dfg[inst].opcode() {\n            ir::Opcode::Ineg =&gt; {\n                convert_ineg(inst, func, cfg, isa);\n                return true;\n            }\n\n            _ =&gt; {},\n        }\n    }\n    crate::legalizer::widen(inst, func, cfg, isa)\n}\n</pre></div>\n\n\n<p>I'm not sure exactly how to fix this, is there a way I could just add the custom legalization to the existing <code>widen</code> group without making a new <code>x86_widen</code> group? Maybe that would prevent the unused import?</p>\n</blockquote>",
        "id": 188220619,
        "sender_full_name": "GitHub",
        "timestamp": 1581696873
    },
    {
        "content": "<p>peterdelevoryas edited a <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586357364\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586357364\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<p>Ok, so, I think the changes are finally done (<code>ineg</code> legalization tested on i686/x86_64 with all scalar integer types), one of my changes results in an unused import though</p>\n<div class=\"codehilite\"><pre><span></span>warning: unused import: `crate::ir::InstBuilder`\n    --&gt; /Users/peterd/src/peterd-cranelift/target/debug/build/cranelift-codegen-b0deee4e3070f0b5/out/legalize-x86.rs:1619:9\n     |\n1619 |     use crate::ir::InstBuilder;\n     |         ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `#[warn(unused_imports)]` on by default\n</pre></div>\n\n\n<p>This is the generated file:</p>\n<div class=\"codehilite\"><pre><span></span>/// Legalize instructions by narrowing. &lt;&lt;&lt; oops, noticed I forgot to fix this comment, fixed in the latest diff\n///\n/// Use x86-specific instructions if needed.\n#[allow(unused_variables,unused_assignments,non_snake_case)]\npub fn x86_widen(\n    inst: crate::ir::Inst,\n    func: &amp;mut crate::ir::Function,\n    cfg: &amp;mut crate::flowgraph::ControlFlowGraph,\n    isa: &amp;dyn crate::isa::TargetIsa,\n) -&gt; bool {\n    use crate::ir::InstBuilder;\n    use crate::cursor::{Cursor, FuncCursor};\n    let mut pos = FuncCursor::new(func).at_inst(inst);\n    pos.use_srcloc(inst);\n    {\n        match pos.func.dfg[inst].opcode() {\n            ir::Opcode::Ineg =&gt; {\n                convert_ineg(inst, func, cfg, isa);\n                return true;\n            }\n\n            _ =&gt; {},\n        }\n    }\n    crate::legalizer::widen(inst, func, cfg, isa)\n}\n</pre></div>\n\n\n<p>I'm not sure exactly how to fix this, is there a way I could just add the custom legalization to the existing <code>widen</code> group without making a new <code>x86_widen</code> group? Maybe that would prevent the unused import?</p>\n</blockquote>",
        "id": 188220795,
        "sender_full_name": "GitHub",
        "timestamp": 1581696979
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586475739\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586475739\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<p>@peterdelevoryas, thanks!</p>\n</blockquote>",
        "id": 188247727,
        "sender_full_name": "GitHub",
        "timestamp": 1581714979
    },
    {
        "content": "<p>peterdelevoryas <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586476450\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385#issuecomment-586476450\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1385\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1385\">Issue #1385</a>:</p>\n<blockquote>\n<p>Hey no thank you @abrown, and everyone else, for helping with this! I really got stuck on the whole transform group thing, but I think I get the idea now. I've really been enjoying using Cranelift, and it was fun making these changes!</p>\n</blockquote>",
        "id": 188247960,
        "sender_full_name": "GitHub",
        "timestamp": 1581715120
    }
]