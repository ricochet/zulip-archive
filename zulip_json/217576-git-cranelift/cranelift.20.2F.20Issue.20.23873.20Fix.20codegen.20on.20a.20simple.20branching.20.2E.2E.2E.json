[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/873\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/873\">Issue #873</a> (assigned to sstangl):</p>\n<blockquote>\n<p>I thought I'd look into codegen. Consider the following test of a simple branch, where compilers were asked to generate the best code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kt\">int</span> <span class=\"nf\">five</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span> <span class=\"o\">?</span> <span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n\n\n<p>LLVM generates:</p>\n<div class=\"codehilite\"><pre><span></span>0000000000000000 &lt;five&gt;:\n   0:   83 ff 06                cmp    $0x6,%edi\n   3:   b8 05 00 00 00          mov    $0x5,%eax\n   8:   0f 4c c7                cmovl  %edi,%eax\n   b:   c3                      retq\n</pre></div>\n\n\n<p>GCC generates:</p>\n<div class=\"codehilite\"><pre><span></span>0000000000000000 &lt;five&gt;:\n   0:   89 f8                   mov    %edi,%eax\n   2:   83 ff 06                cmp    $0x6,%edi\n   5:   ba 08 00 00 00          mov    $0x8,%edx\n   a:   0f 4d c2                cmovge %edx,%eax\n   d:   c3                      retq\n</pre></div>\n\n\n<p>And Cranelift generates (via clang-compiled wasm):</p>\n<div class=\"codehilite\"><pre><span></span>Disassembly of 22 bytes:\n   0:   55                      push    rbp\n   1:   48 89 e5                mov rbp, rsp\n   4:   b8 08 00 00 00          mov eax, 8\n   9:   83 ff 05                cmp edi, 5\n   c:   7f 04                   jg  0x12\n   e:   89 f8                   mov eax, edi\n  10:   eb 02                   jmp 0x14\n  12:   eb fc                   jmp 0x10\n  14:   5d                      pop rbp\n  15:   c3                      ret\n</pre></div>\n\n\n<p>There are some obvious things to fix up:</p>\n<ul>\n<li>[ ] Constructing/destructing stack frames can be skipped if the stack is unused.</li>\n<li>[x] <code>0xc</code> jumps conditionally to <code>0x12</code>, which is an unconditional jump to <code>0x10</code>, which is an unconditional jump to <code>0x14</code>, which is an unconditional jump to the end of the function.</li>\n<li>[ ] Simple branches can be folded into <code>cmov</code> on x86. In this case we have <code>cmp</code>..<code>jg</code>..<code>mov</code>..<code>jmp</code> which is exactly what a <code>cmov</code> does.</li>\n</ul>\n</blockquote>",
        "id": 189361538,
        "sender_full_name": "GitHub",
        "timestamp": 1582932378
    }
]