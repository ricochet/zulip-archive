[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/589\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/589\">Issue #589</a>:</p>\n<blockquote>\n<p>What if we added <code>heap_load</code> and <code>heap_store</code> instructions, which would roughly be legalized into <code>heap_addr</code>+<code>load</code> and <code>heap_addr</code>+<code>store</code>. That way, frontends could produce Cranelift IR without themselves dealing with plain <code>load</code> and <code>store</code>, which would eliminate the possibility of misusing them and facing undefined behavior.</p>\n<p>The next step would be to add a wasm-like indirect call instruction, possibly named <code>table_call</code>. This would be more complex because we don't yet have a builtin way to legalize this that includes signature checking, but it's doable.</p>\n<p>Then, it's plausible to imagine defining an IR subset which is completely safe, yet still reasonably complete. We could then clearly document unsafe constructs like <code>load</code> and <code>store</code> as such, possibly with an optional verifier pass that could enforce that no unsafe constructs are present, and make it easy for people to generate IR without having to worry about undefined behavior.</p>\n</blockquote>",
        "id": 189361383,
        "sender_full_name": "GitHub",
        "timestamp": 1582932313
    }
]