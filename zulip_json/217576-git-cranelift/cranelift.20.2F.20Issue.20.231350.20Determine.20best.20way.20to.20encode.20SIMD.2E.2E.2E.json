[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350\">Issue #1350</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>I would like to implement the <a href=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#load-and-extend\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#load-and-extend\">SIMD  <code>load_extend</code> instructions</a>. </p>\n<ul>\n<li>What is the value of adding this in Cranelift?</li>\n</ul>\n<p>This is necessary for Wasm SIMD spec compliance.</p>\n<ul>\n<li>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use?</li>\n</ul>\n<p>I see that currently <code>shared/instructions.rs</code> includes instructions such as <code>uload32</code> and <code>sload32</code>; one option is to add the additional instructions <code>[u/s]load8x8</code>, <code>[u/s]load16x4</code>, and <code>[u/s]load32x4</code>. Alternately, @bnjbvr and I had discussed using the IR-&gt;IR infrastructure of legalization to implement peephole optimizations; if this was in place and at the right level, I could translate the Wasm <code>load8x8_s</code>, e.g., to Cranelift's <code>load.i8x8</code> and <code>uextend</code> and then write a peephole optimization to generate the appropriate x86 <code>PMOVSXBW</code> to encode both of these instructions (perhaps with a new Cranelift <code>x86_pmovsxb</code> instruction). Which approach is better.</p>\n</blockquote>",
        "id": 185654243,
        "sender_full_name": "GitHub",
        "timestamp": 1579045847
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350#issuecomment-574428944\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350#issuecomment-574428944\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350\">Issue #1350</a>:</p>\n<blockquote>\n<p>cc: @bnjbvr, @sunfishcode </p>\n</blockquote>",
        "id": 185654263,
        "sender_full_name": "GitHub",
        "timestamp": 1579045864
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350\">Issue #1350</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>I would like to implement the <a href=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#load-and-extend\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#load-and-extend\">SIMD  <code>load_extend</code> instructions</a>. </p>\n<h4>What is the value of adding this in Cranelift?</h4>\n<p>This is necessary for Wasm SIMD spec compliance.</p>\n<h4>Do you have an implementation plan, and/or ideas for data structures or algorithms to use?</h4>\n<p>I see that currently <code>shared/instructions.rs</code> includes instructions such as <code>uload32</code> and <code>sload32</code>; one option is to add the additional instructions <code>[u/s]load8x8</code>, <code>[u/s]load16x4</code>, and <code>[u/s]load32x4</code>. Alternately, @bnjbvr and I had discussed using the IR-&gt;IR infrastructure of legalization to implement peephole optimizations; if this was in place and at the right level, I could translate the Wasm <code>load8x8_s</code>, e.g., to Cranelift's <code>load.i8x8</code> and <code>uextend</code> and then write a peephole optimization to generate the appropriate x86 <code>PMOVSXBW</code> to encode both of these instructions (perhaps with a new Cranelift <code>x86_pmovsxb</code> instruction). Which approach is better.</p>\n</blockquote>",
        "id": 185654272,
        "sender_full_name": "GitHub",
        "timestamp": 1579045878
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350#issuecomment-583074502\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350#issuecomment-583074502\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350\">Issue #1350</a>:</p>\n<blockquote>\n<p>Significant peephole-style optimization will be best done once <a href=\"https://github.com/bytecodealliance/cranelift/issues/1344\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1344\">https://github.com/bytecodealliance/cranelift/issues/1344</a> is in place and we can build up from there. So my suggestion here is to just add the additional instructions, <code>[u/s]load8x8</code>, and so on, for now, and then we can revisit them later once we're ready to do more general peephole optimizations.</p>\n</blockquote>",
        "id": 187581010,
        "sender_full_name": "GitHub",
        "timestamp": 1581017906
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1350\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1350\">Issue #1350</a>:</p>\n<blockquote>\n<h4>What is the feature or code improvement you would like to do in Cranelift?</h4>\n<p>I would like to implement the <a href=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#load-and-extend\" target=\"_blank\" title=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#load-and-extend\">SIMD  <code>load_extend</code> instructions</a>. </p>\n<h4>What is the value of adding this in Cranelift?</h4>\n<p>This is necessary for Wasm SIMD spec compliance.</p>\n<h4>Do you have an implementation plan, and/or ideas for data structures or algorithms to use?</h4>\n<p>I see that currently <code>shared/instructions.rs</code> includes instructions such as <code>uload32</code> and <code>sload32</code>; one option is to add the additional instructions <code>[u/s]load8x8</code>, <code>[u/s]load16x4</code>, and <code>[u/s]load32x4</code>. Alternately, @bnjbvr and I had discussed using the IR-&gt;IR infrastructure of legalization to implement peephole optimizations; if this was in place and at the right level, I could translate the Wasm <code>load8x8_s</code>, e.g., to Cranelift's <code>load.i8x8</code> and <code>uextend</code> and then write a peephole optimization to generate the appropriate x86 <code>PMOVSXBW</code> to encode both of these instructions (perhaps with a new Cranelift <code>x86_pmovsxb</code> instruction). Which approach is better.</p>\n</blockquote>",
        "id": 189361773,
        "sender_full_name": "GitHub",
        "timestamp": 1582932525
    }
]