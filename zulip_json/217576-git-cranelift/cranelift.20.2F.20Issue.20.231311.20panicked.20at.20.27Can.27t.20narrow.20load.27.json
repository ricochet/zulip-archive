[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311\">Issue #1311</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue? Can you include a CLIF test case,<br>\n  ideally reduced with the <code>bugpoint</code> clif-util command?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\ntarget x86_64-unknown-linux-gnu\n\nfunction u0:0(i64, i64, i64) system_v {\n; symbol _ZN4core9core_arch3x864sse212_mm_add_epi817h36feb8477a42339bE\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 16\n    ss3 = explicit_slot 16\n    ss4 = explicit_slot 16\n    sig0 = (i64, i64) system_v\n    sig1 = (i64, i64) system_v\n    fn0 = colocated u0:257 sig0\n    fn1 = colocated u0:257 sig1\n\n                                ebb0(v0: i64, v1: i64, v2: i64):\n                                    v3 = load.i64x2 v1\n                                    v5 -&gt; v3\n                                    v4 = load.i64x2 v2\n                                    v9 -&gt; v4\n                                    jump ebb1\n\n                                ebb1:\n@0001                               v6 = stack_addr.i64 ss3\n@0001                               store.i64x2 v5, v6\n@0001                               v7 = stack_addr.i64 ss3\n@0001                               v8 = stack_addr.i64 ss1\n@0001                               call fn0(v8, v7)\n@0001                               jump ebb2\n\n                                ebb2:\n@0004                               v10 = stack_addr.i64 ss4\n@0004                               store.i64x2 v9, v10\n@0004                               v11 = stack_addr.i64 ss4\n@0004                               v12 = stack_addr.i64 ss2\n@0004                               call fn1(v12, v11)\n@0004                               jump ebb3\n\n                                ebb3:\n@0000                               v13 = stack_addr.i64 ss1\n@0000                               v14 = load.i8x16 v13\n@0000                               v15 = stack_addr.i64 ss2\n@0000                               v16 = load.i8x16 v15\n@0000                               v17 = iadd v14, v16\n@0000                               v18 = stack_addr.i64 ss0\n@0000                               store v17, v18\n@0000                               jump ebb4\n\n                                ebb4:\n@0008                               v19 = stack_addr.i64 ss0\n@0008                               v20 = load.i64 aligned v19\n@0008                               store aligned v20, v0\n@0008                               v21 = load.i64 aligned v19+8\n@0008                               store aligned v21, v0+8\n@0008                               jump ebb5\n\n                                ebb5:\n@0008                               nop\n@000a                               return\n}\n</pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expected successful compilation. Got:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;Can&#39;t narrow load&#39;, src/libcore/option.rs:1188:5\nstack backtrace:\n[...]\n  14: core::option::expect_failed\n             at src/libcore/option.rs:1188\n  15: core::option::Option&lt;T&gt;::expect\n             at /rustc/9ae6cedb8d1e37469be1434642a3e403fce50a03/src/libcore/option.rs:348\n  16: cranelift_codegen::legalizer::narrow_load\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:604\n  17: cranelift_codegen::legalizer::narrow\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalizer.rs:2298\n  18: cranelift_codegen::legalizer::narrow_flags\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalizer.rs:2416\n  19: cranelift_codegen::isa::x86::enc_tables::x86_narrow\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalize-x86.rs:1514\n  20: cranelift_codegen::legalizer::legalize_inst\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:120\n  21: cranelift_codegen::legalizer::legalize_function\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:170\n  22: cranelift_codegen::context::Context::legalize\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/context.rs:277\n  23: cranelift_codegen::context::Context::compile\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/context.rs:144\n  24: cranelift_module::module::Module&lt;B&gt;::define_function\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-module/src/module.rs:552\n</pre></div>\n\n\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using?</li>\n</ul>\n<p>722a345ff6ee00ade5de87eef0a605711a88e8ec</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>x86_64. No SIMD related flags modified.</p>\n</blockquote>",
        "id": 184215080,
        "sender_full_name": "GitHub",
        "timestamp": 1577275061
    },
    {
        "content": "<p>bjorn3 labeled <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311\">Issue #1311</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue? Can you include a CLIF test case,<br>\n  ideally reduced with the <code>bugpoint</code> clif-util command?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\ntarget x86_64-unknown-linux-gnu\n\nfunction u0:0(i64, i64, i64) system_v {\n; symbol _ZN4core9core_arch3x864sse212_mm_add_epi817h36feb8477a42339bE\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 16\n    ss3 = explicit_slot 16\n    ss4 = explicit_slot 16\n    sig0 = (i64, i64) system_v\n    sig1 = (i64, i64) system_v\n    fn0 = colocated u0:257 sig0\n    fn1 = colocated u0:257 sig1\n\n                                ebb0(v0: i64, v1: i64, v2: i64):\n                                    v3 = load.i64x2 v1\n                                    v5 -&gt; v3\n                                    v4 = load.i64x2 v2\n                                    v9 -&gt; v4\n                                    jump ebb1\n\n                                ebb1:\n@0001                               v6 = stack_addr.i64 ss3\n@0001                               store.i64x2 v5, v6\n@0001                               v7 = stack_addr.i64 ss3\n@0001                               v8 = stack_addr.i64 ss1\n@0001                               call fn0(v8, v7)\n@0001                               jump ebb2\n\n                                ebb2:\n@0004                               v10 = stack_addr.i64 ss4\n@0004                               store.i64x2 v9, v10\n@0004                               v11 = stack_addr.i64 ss4\n@0004                               v12 = stack_addr.i64 ss2\n@0004                               call fn1(v12, v11)\n@0004                               jump ebb3\n\n                                ebb3:\n@0000                               v13 = stack_addr.i64 ss1\n@0000                               v14 = load.i8x16 v13\n@0000                               v15 = stack_addr.i64 ss2\n@0000                               v16 = load.i8x16 v15\n@0000                               v17 = iadd v14, v16\n@0000                               v18 = stack_addr.i64 ss0\n@0000                               store v17, v18\n@0000                               jump ebb4\n\n                                ebb4:\n@0008                               v19 = stack_addr.i64 ss0\n@0008                               v20 = load.i64 aligned v19\n@0008                               store aligned v20, v0\n@0008                               v21 = load.i64 aligned v19+8\n@0008                               store aligned v21, v0+8\n@0008                               jump ebb5\n\n                                ebb5:\n@0008                               nop\n@000a                               return\n}\n</pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expected successful compilation. Got:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;Can&#39;t narrow load&#39;, src/libcore/option.rs:1188:5\nstack backtrace:\n[...]\n  14: core::option::expect_failed\n             at src/libcore/option.rs:1188\n  15: core::option::Option&lt;T&gt;::expect\n             at /rustc/9ae6cedb8d1e37469be1434642a3e403fce50a03/src/libcore/option.rs:348\n  16: cranelift_codegen::legalizer::narrow_load\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:604\n  17: cranelift_codegen::legalizer::narrow\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalizer.rs:2298\n  18: cranelift_codegen::legalizer::narrow_flags\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalizer.rs:2416\n  19: cranelift_codegen::isa::x86::enc_tables::x86_narrow\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalize-x86.rs:1514\n  20: cranelift_codegen::legalizer::legalize_inst\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:120\n  21: cranelift_codegen::legalizer::legalize_function\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:170\n  22: cranelift_codegen::context::Context::legalize\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/context.rs:277\n  23: cranelift_codegen::context::Context::compile\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/context.rs:144\n  24: cranelift_module::module::Module&lt;B&gt;::define_function\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-module/src/module.rs:552\n</pre></div>\n\n\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using?</li>\n</ul>\n<p>722a345ff6ee00ade5de87eef0a605711a88e8ec</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>x86_64. No SIMD related flags modified.</p>\n</blockquote>",
        "id": 184215081,
        "sender_full_name": "GitHub",
        "timestamp": 1577275061
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311#issuecomment-568891568\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311#issuecomment-568891568\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311\">Issue #1311</a>:</p>\n<blockquote>\n<p>Same with <code>enable_simd</code> enabled.</p>\n</blockquote>",
        "id": 184215204,
        "sender_full_name": "GitHub",
        "timestamp": 1577275243
    },
    {
        "content": "<p>bjorn3 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311#issuecomment-568893397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311#issuecomment-568893397\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311\">Issue #1311</a>:</p>\n<blockquote>\n<p>The panic is at <a href=\"https://github.com/bytecodealliance/cranelift/blob/7a4957ca07b5c87548473a00cadc166021e6c9e1/cranelift-codegen/src/legalizer/mod.rs#L604\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/7a4957ca07b5c87548473a00cadc166021e6c9e1/cranelift-codegen/src/legalizer/mod.rs#L604\">https://github.com/bytecodealliance/cranelift/blob/7a4957ca07b5c87548473a00cadc166021e6c9e1/cranelift-codegen/src/legalizer/mod.rs#L604</a></p>\n</blockquote>",
        "id": 184215843,
        "sender_full_name": "GitHub",
        "timestamp": 1577276448
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1311\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1311\">Issue #1311</a>:</p>\n<blockquote>\n<p>Thanks for opening a bug report on Cranelift! Please answer the questions below<br>\nif they're relevant and delete this text before submitting.</p>\n<ul>\n<li>What are the steps to reproduce the issue? Can you include a CLIF test case,<br>\n  ideally reduced with the <code>bugpoint</code> clif-util command?</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span>test compile\nset is_pic\ntarget x86_64-unknown-linux-gnu\n\nfunction u0:0(i64, i64, i64) system_v {\n; symbol _ZN4core9core_arch3x864sse212_mm_add_epi817h36feb8477a42339bE\n\n    ss0 = explicit_slot 16\n    ss1 = explicit_slot 16\n    ss2 = explicit_slot 16\n    ss3 = explicit_slot 16\n    ss4 = explicit_slot 16\n    sig0 = (i64, i64) system_v\n    sig1 = (i64, i64) system_v\n    fn0 = colocated u0:257 sig0\n    fn1 = colocated u0:257 sig1\n\n                                ebb0(v0: i64, v1: i64, v2: i64):\n                                    v3 = load.i64x2 v1\n                                    v5 -&gt; v3\n                                    v4 = load.i64x2 v2\n                                    v9 -&gt; v4\n                                    jump ebb1\n\n                                ebb1:\n@0001                               v6 = stack_addr.i64 ss3\n@0001                               store.i64x2 v5, v6\n@0001                               v7 = stack_addr.i64 ss3\n@0001                               v8 = stack_addr.i64 ss1\n@0001                               call fn0(v8, v7)\n@0001                               jump ebb2\n\n                                ebb2:\n@0004                               v10 = stack_addr.i64 ss4\n@0004                               store.i64x2 v9, v10\n@0004                               v11 = stack_addr.i64 ss4\n@0004                               v12 = stack_addr.i64 ss2\n@0004                               call fn1(v12, v11)\n@0004                               jump ebb3\n\n                                ebb3:\n@0000                               v13 = stack_addr.i64 ss1\n@0000                               v14 = load.i8x16 v13\n@0000                               v15 = stack_addr.i64 ss2\n@0000                               v16 = load.i8x16 v15\n@0000                               v17 = iadd v14, v16\n@0000                               v18 = stack_addr.i64 ss0\n@0000                               store v17, v18\n@0000                               jump ebb4\n\n                                ebb4:\n@0008                               v19 = stack_addr.i64 ss0\n@0008                               v20 = load.i64 aligned v19\n@0008                               store aligned v20, v0\n@0008                               v21 = load.i64 aligned v19+8\n@0008                               store aligned v21, v0+8\n@0008                               jump ebb5\n\n                                ebb5:\n@0008                               nop\n@000a                               return\n}\n</pre></div>\n\n\n<ul>\n<li>What do you expect to happen? What does actually happen? Does it panic, and<br>\n  if so, with which assertion?</li>\n</ul>\n<p>Expected successful compilation. Got:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;Can&#39;t narrow load&#39;, src/libcore/option.rs:1188:5\nstack backtrace:\n[...]\n  14: core::option::expect_failed\n             at src/libcore/option.rs:1188\n  15: core::option::Option&lt;T&gt;::expect\n             at /rustc/9ae6cedb8d1e37469be1434642a3e403fce50a03/src/libcore/option.rs:348\n  16: cranelift_codegen::legalizer::narrow_load\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:604\n  17: cranelift_codegen::legalizer::narrow\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalizer.rs:2298\n  18: cranelift_codegen::legalizer::narrow_flags\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalizer.rs:2416\n  19: cranelift_codegen::isa::x86::enc_tables::x86_narrow\n             at ./target/debug/build/cranelift-codegen-a4c45f6e6e5e34c4/out/legalize-x86.rs:1514\n  20: cranelift_codegen::legalizer::legalize_inst\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:120\n  21: cranelift_codegen::legalizer::legalize_function\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/legalizer/mod.rs:170\n  22: cranelift_codegen::context::Context::legalize\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/context.rs:277\n  23: cranelift_codegen::context::Context::compile\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-codegen/src/context.rs:144\n  24: cranelift_module::module::Module&lt;B&gt;::define_function\n             at /home/bjorn/.cargo/git/checkouts/cranelift-e5a6a40e8f744a9d/722a345/cranelift-module/src/module.rs:552\n</pre></div>\n\n\n<ul>\n<li>Which Cranelift version / commit hash / branch are you using?</li>\n</ul>\n<p>722a345ff6ee00ade5de87eef0a605711a88e8ec</p>\n<ul>\n<li>If relevant, can you include some extra information about your environment?<br>\n  (Rust version, operating system, architecture...)</li>\n</ul>\n<p>x86_64. No SIMD related flags modified.</p>\n</blockquote>",
        "id": 189361751,
        "sender_full_name": "GitHub",
        "timestamp": 1582932511
    }
]