[
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/pull/1299#issuecomment-567413512\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1299#issuecomment-567413512\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1299\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1299\">Issue #1299</a>:</p>\n<blockquote>\n<p>And a supplementary question: this seems to redefine a new IR for templates, with call, if/then/else, etc. Wouldn't it be possible to reuse the same IR/layout notions that Cranelift already knows, to avoid a lot of concept (and i expect code) duplication? Otherwise, users would be limited to the template IR for their needs, and would need to add template IR nodes as they require, which wouldn't make a very pleasant developer experience.</p>\n</blockquote>",
        "id": 183829580,
        "sender_full_name": "GitHub",
        "timestamp": 1576748399
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/cranelift/pull/1299#issuecomment-567631907\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1299#issuecomment-567631907\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1299\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1299\">Issue #1299</a>:</p>\n<blockquote>\n<p>I believe that @sunfishcode was intending that this could be reused across lightbeam and cranelift so that we could use the same barrier implementations at whatever tier JIT we were on in Wasmtime.</p>\n<p>This is a trade off: we add a little complexity in the form of a new (or at least, expanding) IR language, and we sacrifice some control over the precise generated code for a barrier / global / table. What we gain is the portability. And this is much more limited in scope compared to the template strawperson I wrote up in #1176. The only precise control we really need for barriers are which side of an if/else should fallthrough, I think. This does address that with the <code>IfElse::else_is_cold</code> flag.</p>\n<p>A reasonable alternative would be to say that lightbeam, as a baseline-style JIT rather than an optimizing one, would always use out-of-line calls for barriers, and then we could have a proper subset of clif for the templates.</p>\n</blockquote>",
        "id": 183877577,
        "sender_full_name": "GitHub",
        "timestamp": 1576784130
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/cranelift/pull/1299#issuecomment-592778309\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1299#issuecomment-592778309\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/pull/1299\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1299\">Issue #1299</a>:</p>\n<blockquote>\n<p>Thanks for the PR again, and as a procedural note the Cranelift repository <a href=\"https://github.com/bytecodealliance/cranelift/issues/1408\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1408\">has now merged</a> into the <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/cranelift\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/tree/master/cranelift\">wasmtime repository</a>.</p>\n<p>PRs are no longer landing in this repository, and unfortunately there's no \"one button\" solution to move a PR to the wasmtime repository. A <a href=\"https://gist.github.com/alexcrichton/8cb3f4ef7c25317ba6824ee31e3e53aa\" target=\"_blank\" title=\"https://gist.github.com/alexcrichton/8cb3f4ef7c25317ba6824ee31e3e53aa\">script has been prepared</a>, however, to assist you in transferring this PR to the wasmtime repo. Feel free to reach out on Zulip with any questions!</p>\n</blockquote>",
        "id": 189362283,
        "sender_full_name": "GitHub",
        "timestamp": 1582932960
    }
]