[
    {
        "content": "<p>jyn514 opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>This code works fine on Ubuntu 18.04. Note that the segfault comes before main.</p>\n<p>I am using cranelift, cranelift-object, cranelift-module 0.54.</p>\n<div class=\"codehilite\"><pre><span></span>function u0:0() -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64) -&gt; i32 system_v\n    fn0 = u0:0 sig0\n\nebb0:\n    v0 = global_value.i64 gv0\n    v1 = load.i64 v0\n    v2 = call fn0(v1)\n    v3 = iconst.i32 0\n    return v3\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ target/debug/rcc\nint puts(const char *s);\nstatic const char *index_page = &quot;index.html&quot;;\nint main() {\n    puts(index_page);\n}\n$ ./a.out\nSegmentation fault\n$ gdb\n(gdb) break main\nBreakpoint 1 at 0x119a\n(gdb) run\nStarting program: /home/joshua/src/rcc/a.out\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00007ffff7fc408c in ?? () from /lib/ld-musl-x86_64.so.1\n(gdb) where\n#0  0x00007ffff7fc408c in ?? () from /lib/ld-musl-x86_64.so.1\n#1  0x0000000000000000 in ?? ()\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ target/debug/rcc -c -o a.o  # this means compile to object file but don&#39;t link\nint puts(const char *s);\nstatic const char *index_page = &quot;index.html&quot;;\nint main() {\n    puts(index_page);\n}\n$ objdump -rd a.o\n\na.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n   0:   40 55                   rex push %rbp\n   2:   48 89 e5                mov    %rsp,%rbp\n   5:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # c &lt;main+0xc&gt;\n            8: R_X86_64_PC32    index_page-0x4\n   c:   48 8b 00                mov    (%rax),%rax\n   f:   48 89 c7                mov    %rax,%rdi\n  12:   e8 00 00 00 00          callq  17 &lt;main+0x17&gt;\n            13: R_X86_64_PLT32  puts-0x4\n  17:   40 b8 00 00 00 00       rex mov $0x0,%eax\n  1d:   40 5d                   rex pop %rbp\n  1f:   c3                      retq\n</pre></div>\n\n\n<p>cc @philipc </p>\n</blockquote>",
        "id": 185886112,
        "sender_full_name": "GitHub",
        "timestamp": 1579233799
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575456479\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575456479\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Did this previously work with faerie?</p>\n</blockquote>",
        "id": 185886499,
        "sender_full_name": "GitHub",
        "timestamp": 1579234377
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575456645\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575456645\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>This has something to do with the Linkage, if I remove <code>static</code> it works. Let me double check but I think I use <code>Local</code> with static and <code>Export</code> otherwise.</p>\n</blockquote>",
        "id": 185886524,
        "sender_full_name": "GitHub",
        "timestamp": 1579234440
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575457218\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575457218\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>@philipc that would have been smart to check! This also does not work with faerie 0.51.</p>\n</blockquote>",
        "id": 185886653,
        "sender_full_name": "GitHub",
        "timestamp": 1579234627
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575457688\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575457688\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>I take it back, this is unrelated to the linkage, it's because of the <code>const</code> keyword. I mark data as read only if it has <code>const</code> set, could that have an impact?</p>\n</blockquote>",
        "id": 185886757,
        "sender_full_name": "GitHub",
        "timestamp": 1579234801
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575477633\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575477633\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>It might be that <code>index_page</code> is being put in a read only segment, but it is a pointer that needs a relocation, so processing the relocation needs to write to that memory.</p>\n<p>I haven't looked into this much, but gcc puts <code>index_page</code> in <code>.data.rel.local</code> and clang-8 puts it in <code>.data</code>.</p>\n</blockquote>",
        "id": 185890267,
        "sender_full_name": "GitHub",
        "timestamp": 1579240815
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575478933\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575478933\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>So this is probably a bug in <code>object</code>. For ELF, it selects <code>.rodata</code> for <code>StandardSection::ReadOnlyDataWithRel</code>. I think that should be <code>.data</code>. Not sure why it works on ubuntu though, something I need to look into more.</p>\n</blockquote>",
        "id": 185890520,
        "sender_full_name": "GitHub",
        "timestamp": 1579241170
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575578254\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575578254\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Sorry, I forgot to mention: rcc currently parses const qualifiers wrong, if you want to compare this to <code>gcc</code> or <code>clang</code> use <code>char *const index_page = \"index.html;</code> or you'll be comparing apples to oranges.</p>\n<p>const *p means a mutable pointer to const data, *const p means an immutable pointer to mutable data. I currently get it backwards but both should be valid.</p>\n<p>That said I think you are right, clang and GCC both put <code>*const</code> in <code>.data.rel.ro</code>.</p>\n</blockquote>",
        "id": 185905253,
        "sender_full_name": "GitHub",
        "timestamp": 1579258564
    },
    {
        "content": "<p>jyn514 edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575578254\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-575578254\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Sorry, I forgot to mention: rcc currently parses const qualifiers wrong, if you want to compare this to <code>gcc</code> or <code>clang</code> use <code>char *const index_page = \"index.html\";</code> or you'll be comparing apples to oranges.</p>\n<p>const *p means a mutable pointer to const data, *const p means an immutable pointer to mutable data. I currently get it backwards but both should be valid.</p>\n<p>That said I think you are right, clang and GCC both put <code>*const</code> in <code>.data.rel.ro</code>.</p>\n</blockquote>",
        "id": 185905273,
        "sender_full_name": "GitHub",
        "timestamp": 1579258588
    }
]