[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/21\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/21\">Issue #21</a>:</p>\n<blockquote>\n<p>Stack slots can be <a href=\"http://cretonne.readthedocs.io/en/latest/langref.html#inst-stack_slot\" target=\"_blank\" title=\"http://cretonne.readthedocs.io/en/latest/langref.html#inst-stack_slot\">defined with an explicit alignment</a>, but the alignment can also be left out, and Cretonne \"<em>will pick an appropriate alignment for the stack slot based on its size and access patterns</em>\".</p>\n<p>We should:</p>\n<ul>\n<li>Clarify exactly what this means in the documentation. In particular, make it clear that the alignment can depend on the target ISA and OS.</li>\n<li>Implement an optional alignment field on <code>StackSlotData</code>.</li>\n<li>Implement the alignment inference algorithm.</li>\n</ul>\n<p>The alignment inference algorithm needs to consider:</p>\n<ul>\n<li>The function's incoming stack pointer alignment guarantees. If any stack slots are more aligned than the incoming stack pointer, dynamic stack realignment is required. We want to avoid that.</li>\n<li>The <code>stack_load</code> and <code>stack_store</code> instructions accessing a stack slot will have a preferred alignment that depends on the target ISA.</li>\n<li>Explicitly aligned stack slots may force a dynamic stack realignment anyway. In that case, there's no reason to bound the inferred alignment.</li>\n</ul>\n<p>A <code>TargetISA</code> method that returns the preferred alignment for accessing a given type seems appropriate.</p>\n</blockquote>",
        "id": 189360938,
        "sender_full_name": "GitHub",
        "timestamp": 1582931892
    }
]