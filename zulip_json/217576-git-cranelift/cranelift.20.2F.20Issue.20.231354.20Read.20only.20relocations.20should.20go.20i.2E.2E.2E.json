[
    {
        "content": "<p>jyn514 edited <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>This code works fine on Ubuntu 18.04. Note that the segfault comes before main.</p>\n<p>I am using cranelift, cranelift-object, cranelift-module 0.54.</p>\n<div class=\"codehilite\"><pre><span></span>function u0:0() -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64) -&gt; i32 system_v\n    fn0 = u0:0 sig0\n\nebb0:\n    v0 = global_value.i64 gv0\n    v1 = load.i64 v0\n    v2 = call fn0(v1)\n    v3 = iconst.i32 0\n    return v3\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ target/debug/rcc\nint puts(const char *s);\nstatic const char *index_page = &quot;index.html&quot;;\nint main() {\n    puts(index_page);\n}\n$ ./a.out\nSegmentation fault\n$ gdb\n(gdb) break main\nBreakpoint 1 at 0x119a\n(gdb) run\nStarting program: /home/joshua/src/rcc/a.out\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00007ffff7fc408c in ?? () from /lib/ld-musl-x86_64.so.1\n(gdb) where\n#0  0x00007ffff7fc408c in ?? () from /lib/ld-musl-x86_64.so.1\n#1  0x0000000000000000 in ?? ()\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ target/debug/rcc -c -o a.o  # this means compile to object file but don&#39;t link\nint puts(const char *s);\nstatic const char *index_page = &quot;index.html&quot;;\nint main() {\n    puts(index_page);\n}\n$ objdump -rd a.o\n\na.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n   0:   40 55                   rex push %rbp\n   2:   48 89 e5                mov    %rsp,%rbp\n   5:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # c &lt;main+0xc&gt;\n            8: R_X86_64_PC32    index_page-0x4\n   c:   48 8b 00                mov    (%rax),%rax\n   f:   48 89 c7                mov    %rax,%rdi\n  12:   e8 00 00 00 00          callq  17 &lt;main+0x17&gt;\n            13: R_X86_64_PLT32  puts-0x4\n  17:   40 b8 00 00 00 00       rex mov $0x0,%eax\n  1d:   40 5d                   rex pop %rbp\n  1f:   c3                      retq\n</pre></div>\n\n\n<p>cc @philipc </p>\n</blockquote>",
        "id": 185937140,
        "sender_full_name": "GitHub",
        "timestamp": 1579281305
    },
    {
        "content": "<p>bnjbvr <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576273496\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576273496\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<blockquote>\n<p>So this is probably a bug in object. For ELF, it selects .rodata for StandardSection::ReadOnlyDataWithRel. I think that should be .data. Not sure why it works on ubuntu though, something I need to look into more.</p>\n</blockquote>\n<p>Considering this comment, can we close the issue here, and report one on the object crate instead?</p>\n</blockquote>",
        "id": 186101453,
        "sender_full_name": "GitHub",
        "timestamp": 1579526749
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576286938\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576286938\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Well, I'm worried the Cranelift API doesn't provide the backend enough information to know whether the data is a relocation or not. <code>declare_data()</code> only has a <code>writable</code> bool, which doesn't let the backend tell between read only data and read only data with relocations until you call <code>define_data()</code>.</p>\n<p>@philipc , @m4b you would know more than me here.</p>\n</blockquote>",
        "id": 186104045,
        "sender_full_name": "GitHub",
        "timestamp": 1579528844
    },
    {
        "content": "<p>m4b <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576429343\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576429343\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>@jyn514 you said <code>static</code> doesn't affect the miscompile/segfault, yes?</p>\n<p>I'm wondering because we specifically added tests for this in faerie a while back, as global pointer relocations were crashing @bjorn3 's work on rust backend for rustc.</p>\n<p>If I change the prototype <code>STATIC_REF</code> to no longer be writable <a href=\"https://github.com/m4b/faerie/blob/f74a4bdc2d05a4ec593dcfc39bad93fde751c882/examples/prototype.rs#L87\" target=\"_blank\" title=\"https://github.com/m4b/faerie/blob/f74a4bdc2d05a4ec593dcfc39bad93fde751c882/examples/prototype.rs#L87\">here</a>, it correctly places it in rodata, which you can see here:</p>\n<div class=\"codehilite\"><pre><span></span>2040    GLOBAL     OBJECT      STATIC_REF                               0x8     .rodata(15)             0x0\n</pre></div>\n\n\n<p>Can you share your code where you tested this in faerie?</p>\n<p>I'll play around with your rcc to look at it's output</p>\n</blockquote>",
        "id": 186132914,
        "sender_full_name": "GitHub",
        "timestamp": 1579554176
    },
    {
        "content": "<p>m4b <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Also can you provide your linkline? I can link on my machine, archlinux, it prints \"index_page\", and then segfaults (because it retqs itself into a non-existent libc <code>_start</code>)</p>\n</blockquote>",
        "id": 186133591,
        "sender_full_name": "GitHub",
        "timestamp": 1579554813
    },
    {
        "content": "<p>m4b edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Also can you provide your linkline? I can link on my machine archlinux:</p>\n<div class=\"codehilite\"><pre><span></span>m4b@efrit ::  [ ~/git/rcc ] ld -e _start -I/usr/lib/ld-linux-x86-64.so.2 -L/usr/lib/ -lc rodata.o -o rodata\nld: warning: cannot find entry symbol _start; defaulting to 0000000000401020\nm4b@efrit ::  [ ~/git/rcc ] ./rodata\nindex.html\nSegmentation fault (core dumped)\n</pre></div>\n\n\n<p>it prints \"index_page\", and then segfaults (because it retqs itself into a non-existent libc <code>_start</code>)</p>\n<p>This makes sense due to the warning; i didn't give it a proper crt start symbol afaik.</p>\n</blockquote>",
        "id": 186133689,
        "sender_full_name": "GitHub",
        "timestamp": 1579554913
    },
    {
        "content": "<p>m4b edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Also can you provide your linkline? I can link on my machine archlinux:</p>\n<div class=\"codehilite\"><pre><span></span>m4b@efrit ::  [ ~/git/rcc ] ld -e _start -I/usr/lib/ld-linux-x86-64.so.2 -L/usr/lib/ -lc rodata.o -o rodata\nld: warning: cannot find entry symbol _start; defaulting to 0000000000401020\nm4b@efrit ::  [ ~/git/rcc ] ./rodata\nindex.html\nSegmentation fault (core dumped)\n</pre></div>\n\n\n<p>it prints \"index.html\", and then segfaults (because it retqs itself into a non-existent libc <code>_start</code>)</p>\n<p>This makes sense due to the warning; i didn't give it a proper crt start symbol afaik.</p>\n</blockquote>",
        "id": 186133757,
        "sender_full_name": "GitHub",
        "timestamp": 1579554963
    },
    {
        "content": "<p>m4b <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576433061\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576433061\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>and as per @bnjbvr comment, this might not be appropriate issue tracker; iiuc, the question is whether cranelift api provides enough granularity to correctly emit relocations for read only pointers in the rodata section.</p>\n<p>I think the answer is yes? Though I don't really know the api of cranelift at all, so I'll defer to others (though I'd be surprised if not, since bjorn3 has gotten most tests passing at this point)</p>\n</blockquote>",
        "id": 186133907,
        "sender_full_name": "GitHub",
        "timestamp": 1579555126
    },
    {
        "content": "<p>m4b edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576431812\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Also can you provide your linkline? I can link on my machine archlinux:</p>\n<div class=\"codehilite\"><pre><span></span>m4b@efrit ::  [ ~/git/rcc ] ld -e _start -I/usr/lib/ld-linux-x86-64.so.2 -L/usr/lib/ -lc rodata.o -o rodata\nld: warning: cannot find entry symbol _start; defaulting to 0000000000401020\nm4b@efrit ::  [ ~/git/rcc ] ./rodata\nindex.html\nSegmentation fault (core dumped)\n</pre></div>\n\n\n<p>it prints \"index.html\", and then segfaults (because it retqs itself into a non-existent libc <code>_start</code>)</p>\n<p>This makes sense due to the warning; i didn't give it a proper crt start symbol afaik.</p>\n<p><strong>EDIT</strong></p>\n<p>Here is a linkline that works for me, resulting binary does not segfault:</p>\n<div class=\"codehilite\"><pre><span></span>m4b@efrit ::  [ ~/git/rcc ] ld -e _start -I/usr/lib/ld-linux-x86-64.so.2 -L/usr/lib/ /usr/lib/crti.o /usr/lib/Scrt1.o /usr/lib/crtn.o -lc rodata.o -o rodata\nm4b@efrit ::  [ ~/git/rcc ] ./rodata\nindex.html\nm4b@efrit ::  [ ~/git/rcc ] echo $?\n0\n</pre></div>\n\n\n</blockquote>",
        "id": 186134155,
        "sender_full_name": "GitHub",
        "timestamp": 1579555330
    },
    {
        "content": "<p>m4b edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576429343\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576429343\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>@jyn514 you said <code>static</code> doesn't affect the miscompile/segfault, yes?</p>\n<p>I'm wondering because we specifically added tests for this in faerie a while back, as global pointer relocations were crashing @bjorn3 's work on rust backend for rustc.</p>\n<p>If I change the prototype <code>STATIC_REF</code> to no longer be writable <a href=\"https://github.com/m4b/faerie/blob/f74a4bdc2d05a4ec593dcfc39bad93fde751c882/examples/prototype.rs#L87\" target=\"_blank\" title=\"https://github.com/m4b/faerie/blob/f74a4bdc2d05a4ec593dcfc39bad93fde751c882/examples/prototype.rs#L87\">here</a>, it correctly places it in rodata, which you can see here:</p>\n<div class=\"codehilite\"><pre><span></span>2040    GLOBAL     OBJECT      STATIC_REF                               0x8     .rodata(15)             0x0\n</pre></div>\n\n\n<p>Can you share your code where you tested this in faerie?</p>\n<p>I'll play around with your rcc to look at it's output</p>\n<p><strong>EDIT</strong></p>\n<p>Btw, your C program is technically undefined; you declare it returning a <code>int</code>, but you return nothing from main :)</p>\n</blockquote>",
        "id": 186134200,
        "sender_full_name": "GitHub",
        "timestamp": 1579555383
    },
    {
        "content": "<p>philipc <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576437481\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576437481\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'm worried the Cranelift API doesn't provide the backend enough information to know whether the data is a relocation or not.</p>\n</blockquote>\n<p>The API already provides this via <code>DataContext::write_function_addr/write_data_addr</code>, cranelift-object already <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-object/src/backend.rs#L285\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-object/src/backend.rs#L285\">uses that info</a>, and cranelift-faerie would probably let faerie handle this instead. So yes this should be moved to an <code>object</code> issue, and it's trivial enough that you could patch object and test it fixes it yourself (the problem doesn't occur on my system).</p>\n</blockquote>",
        "id": 186135014,
        "sender_full_name": "GitHub",
        "timestamp": 1579556247
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576458994\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576458994\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<blockquote>\n<p>Can you share your code where you tested this in faerie?</p>\n</blockquote>\n<p>Checkout the <code>faerie</code> branch on rcc: <a href=\"https://github.com/jyn514/rcc/tree/faerie\" target=\"_blank\" title=\"https://github.com/jyn514/rcc/tree/faerie\">https://github.com/jyn514/rcc/tree/faerie</a></p>\n<blockquote>\n<p>Also can you provide your linkline? I can link on my machine archlinux:</p>\n</blockquote>\n<p>Interesting - if I use a linkline similar to yours, it works fine, but if I use gcc to link it segfaults:</p>\n<div class=\"codehilite\"><pre><span></span>(-bash@build-server) ~/src/rcc ▶️ ld -e _start -L/usr/lib/ /usr/lib/crti.o /usr/lib/Scrt1.o /usr/lib/crtn.o -I/lib/ld-musl-x86_64.so.1 -lc faerie.o -o faerie\n(-bash@build-server) ~/src/rcc ▶️ ./faerie\n(-bash@build-server) ~/src/rcc ▶️ echo $?\n0\n(-bash@build-server) ~/src/rcc ▶️ gcc -v faerie.o -o faerie-gcc\n... truncated ...\nCOLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-o&#39; &#39;faerie-gcc&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39;\n /usr/libexec/gcc/x86_64-alpine-linux-musl/8.3.0/collect2 -plugin /usr/libexec/gcc/x86_64-alpine-linux-musl/8.3.0/liblto_plugin.so -plugin-opt=/usr/libexec/gcc/x86_64-alpine-linux-musl/8.3.0/lto-wrapper -plugin-opt=-fresolution=/tmp/ccNcloDj.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --eh-frame-hdr --hash-style=gnu -m elf_x86_64 --as-needed -dynamic-linker /lib/ld-musl-x86_64.so.1 -pie -z relro -z now -o faerie-gcc /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../../../lib/Scrt1.o /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../../../lib/crti.o /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtbeginS.o -L/usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0 -L/usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../../../x86_64-alpine-linux-musl/lib/../lib -L/usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../../../x86_64-alpine-linux-musl/lib -L/usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../.. faerie.o -lssp_nonshared -lgcc --as-needed -lgcc_s --no-as-needed -lc -lgcc --as-needed -lgcc_s --no-as-needed /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtendS.o /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/../../../../lib/crtn.o\nCOLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-o&#39; &#39;faerie-gcc&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39;\n(-bash@build-server) ~/src/rcc ▶️ ./faerie-gcc\nSegmentation fault\n</pre></div>\n\n\n<p>The same is true of <code>object</code>.</p>\n<blockquote>\n<p>Btw, your C program is technically undefined; you declare it returning a int, but you return nothing from main :)</p>\n</blockquote>\n<p>For main only, returning no value is the same as returning 0: <a href=\"http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.3\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.3\">http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.3</a>.</p>\n<blockquote>\n<p>(the problem doesn't occur on my system)</p>\n</blockquote>\n<p>Yes, as I mentioned this only happens on alpine (not sure why, something to do with musl?)</p>\n</blockquote>",
        "id": 186140580,
        "sender_full_name": "GitHub",
        "timestamp": 1579562691
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460234\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460234\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Minimized gcc linker flags:</p>\n<div class=\"codehilite\"><pre><span></span>(-bash@build-server) ~/src/rcc ▶️ /usr/libexec/gcc/x86_64-alpine-linux-musl/8.3.0/collect2 -m elf_x86_64 -dynamic-linker /lib/ld-musl-x86_64.so.1 -pie -o faerie-gcc /usr/lib/Scrt1.o /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtbeginS.o -L/lib/ -L/usr/lib faerie.o --no-as-needed -lc /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtendS.o\n</pre></div>\n\n\n</blockquote>",
        "id": 186140963,
        "sender_full_name": "GitHub",
        "timestamp": 1579563187
    },
    {
        "content": "<p>jyn514 edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460234\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460234\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Minimized gcc linker flags:</p>\n<div class=\"codehilite\"><pre><span></span>$ /usr/libexec/gcc/x86_64-alpine-linux-musl/8.3.0/collect2 -m elf_x86_64 -dynamic-linker /lib/ld-musl-x86_64.so.1 -pie -o faerie-gcc /usr/lib/Scrt1.o /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtbeginS.o -L/lib/ -L/usr/lib faerie.o --no-as-needed -lc /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtendS.o\n</pre></div>\n\n\n</blockquote>",
        "id": 186140968,
        "sender_full_name": "GitHub",
        "timestamp": 1579563195
    },
    {
        "content": "<p>jyn514 edited a <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460234\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460234\">comment</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Minimized gcc linker flags:</p>\n<div class=\"codehilite\"><pre><span></span>$ /usr/libexec/gcc/x86_64-alpine-linux-musl/8.3.0/collect2 -m elf_x86_64 -dynamic-linker /lib/ld-musl-x86_64.so.1 -pie -o faerie-gcc /usr/lib/Scrt1.o /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtbeginS.o faerie.o -lc /usr/lib/gcc/x86_64-alpine-linux-musl/8.3.0/crtendS.o\n</pre></div>\n\n\n</blockquote>",
        "id": 186141062,
        "sender_full_name": "GitHub",
        "timestamp": 1579563331
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460882\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576460882\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>Passing <code>-pie</code> is what makes it segfault:</p>\n<div class=\"codehilite\"><pre><span></span>(-bash@build-server) ~/src/rcc ▶️ ld -e _start -L/usr/lib/ /usr/lib/crti.o /usr/lib/Scrt1.o /usr/lib/crtn.o -I/lib/ld-musl-x86_64.so.1 -lc object.o -o object\n(-bash@build-server) ~/src/rcc ▶️ ./object ; echo $?\n0\n(-bash@build-server) ~/src/rcc ▶️ ld -pie -e _start -L/usr/lib/ /usr/lib/crti.o /usr/lib/Scrt1.o /usr/lib/crtn.o -I/lib/ld-musl-x86_64.so.1 -lc object.o -o object\n(-bash@build-server) ~/src/rcc ▶️ ./object ; echo $?\nSegmentation fault\n139\n(-bash@build-server) ~/src/rcc ▶️ ld -e _start -L/usr/lib/ /usr/lib/crti.o /usr/lib/Scrt1.o /usr/lib/crtn.o -I/lib/ld-musl-x86_64.so.1 -lc faerie.o -o faerie\n(-bash@build-server) ~/src/rcc ▶️ ./faerie ; echo $?\n0\n(-bash@build-server) ~/src/rcc ▶️ ld -pie -e _start -L/usr/lib/ /usr/lib/crti.o /usr/lib/Scrt1.o /usr/lib/crtn.o -I/lib/ld-musl-x86_64.so.1 -lc faerie.o -o faerie\n(-bash@build-server) ~/src/rcc ▶️ ./faerie ; echo $?\nSegmentation fault\n139\n</pre></div>\n\n\n</blockquote>",
        "id": 186141138,
        "sender_full_name": "GitHub",
        "timestamp": 1579563426
    },
    {
        "content": "<p>m4b <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576463997\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576463997\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<blockquote>\n<p>For main only, returning no value is the same as returning 0: <a href=\"http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.3\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.3\">http://port70.net/~nsz/c/c11/n1570.html#5.1.2.2.3</a>.</p>\n</blockquote>\n<p>Ah yes, thank you for correct, you're right :) i always mix this up with <code>return;</code> from <code>int main</code></p>\n</blockquote>",
        "id": 186141925,
        "sender_full_name": "GitHub",
        "timestamp": 1579564589
    },
    {
        "content": "<p>jyn514 closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>This code works fine on Ubuntu 18.04. Note that the segfault comes before main.</p>\n<p>I am using cranelift, cranelift-object, cranelift-module 0.54.</p>\n<div class=\"codehilite\"><pre><span></span>function u0:0() -&gt; i32 system_v {\n    gv0 = symbol colocated u1:0\n    sig0 = (i64) -&gt; i32 system_v\n    fn0 = u0:0 sig0\n\nebb0:\n    v0 = global_value.i64 gv0\n    v1 = load.i64 v0\n    v2 = call fn0(v1)\n    v3 = iconst.i32 0\n    return v3\n}\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ target/debug/rcc\nint puts(const char *s);\nstatic const char *index_page = &quot;index.html&quot;;\nint main() {\n    puts(index_page);\n}\n$ ./a.out\nSegmentation fault\n$ gdb\n(gdb) break main\nBreakpoint 1 at 0x119a\n(gdb) run\nStarting program: /home/joshua/src/rcc/a.out\n\nProgram received signal SIGSEGV, Segmentation fault.\n0x00007ffff7fc408c in ?? () from /lib/ld-musl-x86_64.so.1\n(gdb) where\n#0  0x00007ffff7fc408c in ?? () from /lib/ld-musl-x86_64.so.1\n#1  0x0000000000000000 in ?? ()\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ target/debug/rcc -c -o a.o  # this means compile to object file but don&#39;t link\nint puts(const char *s);\nstatic const char *index_page = &quot;index.html&quot;;\nint main() {\n    puts(index_page);\n}\n$ objdump -rd a.o\n\na.o:     file format elf64-x86-64\n\n\nDisassembly of section .text:\n\n0000000000000000 &lt;main&gt;:\n   0:   40 55                   rex push %rbp\n   2:   48 89 e5                mov    %rsp,%rbp\n   5:   48 8d 05 00 00 00 00    lea    0x0(%rip),%rax        # c &lt;main+0xc&gt;\n            8: R_X86_64_PC32    index_page-0x4\n   c:   48 8b 00                mov    (%rax),%rax\n   f:   48 89 c7                mov    %rax,%rdi\n  12:   e8 00 00 00 00          callq  17 &lt;main+0x17&gt;\n            13: R_X86_64_PLT32  puts-0x4\n  17:   40 b8 00 00 00 00       rex mov $0x0,%eax\n  1d:   40 5d                   rex pop %rbp\n  1f:   c3                      retq\n</pre></div>\n\n\n<p>cc @philipc </p>\n</blockquote>",
        "id": 186190290,
        "sender_full_name": "GitHub",
        "timestamp": 1579618481
    },
    {
        "content": "<p>jyn514 <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576717972\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354#issuecomment-576717972\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1354\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1354\">Issue #1354</a>:</p>\n<blockquote>\n<p>This was fixed in object, sorry for the badly placed issue. @m4b  feel free to open this in faerie if you are interested but otherwise this is fixed for me.</p>\n</blockquote>",
        "id": 186190291,
        "sender_full_name": "GitHub",
        "timestamp": 1579618481
    }
]