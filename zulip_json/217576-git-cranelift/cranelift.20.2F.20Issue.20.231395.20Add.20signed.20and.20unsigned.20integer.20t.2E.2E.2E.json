[
    {
        "content": "<p>abrown opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1395\">Issue #1395</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in Cranelift and/or<br>\nexpect from it. You can answer the questions below if they're relevant and<br>\ndelete this text before submitting. Thanks for opening an issue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in Cranelift? --&gt;</p>\n<p>Add unsigned integer types to the Cranelift type system.</p>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift? --&gt;</p>\n<p>Halve the number of cranelift instructions of the form <code>uload*</code>/<code>sload*</code>, <code>uadd_sat</code>/<code>sadd_sat</code>, etc.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or algorithms to use? --&gt;</p>\n<p>The real question would be whether the <code>Type</code> struct (<code>cranelift-codegen/src/ir/types.rs</code>) has enough index space to fit all of the new unsigned variants; if it does, the work could proceed along the lines of:</p>\n<ul>\n<li>Alter <code>cranelift-codegen/meta/src/shared/types.rs</code> to include <code>SignedInt</code> and <code>UnsignedInt</code> enums</li>\n<li>Add the new type to the CDSL, e.g. <code>LaneType</code> in <code>cranelift-codegen/meta/src/cdsl/types.rs</code></li>\n<li>Generate the new types in <code>cranelift-codegen/meta/src/gen_types.rs</code></li>\n<li>Add necessary helper functions in <code>cranelift-codegen/src/ir/types.rs</code></li>\n<li>Modify the CLIF parser to differentiate between types <code>u*</code> and <code>i*</code></li>\n<li>Finally, replace the extra instructions with simpler ones that use, e.g., the <code>u32</code> vs <code>i32</code> controlling type to determine the encoding</li>\n</ul>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they better or worse than your proposal? --&gt;</p>\n<p>This is more an RFC than a real proposal so the alternative is to leave things as they are.</p>\n</blockquote>",
        "id": 188483862,
        "sender_full_name": "GitHub",
        "timestamp": 1582054720
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/cranelift/issues/1395#issuecomment-587792600\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1395#issuecomment-587792600\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1395\">Issue #1395</a>:</p>\n<blockquote>\n<p>One downside of this is that it requires new instructions for signed&lt;-&gt;unsigned casts. These would need to exist in the IR, but they'd be effectively no-op instructions, so we'd likely end up teaching pattern-matching code, GVN, and other things to look past them, and to teach register allocation to coalesce them like copies.</p>\n<p>Also, since wasm doesn't have signed/unsigned types, wasm translation would be a little awkward, because at the point where we see eg. an <code>i32.load</code>, we wouldn't know whether to give it a signed or unsigned type until we see a user of the loaded value that cares about the signedness. So we'd either have to lookahead, or we'd have to guess and insert signed&lt;-&gt;unsigned casts to fix things up when we guess wrong.</p>\n</blockquote>",
        "id": 188487889,
        "sender_full_name": "GitHub",
        "timestamp": 1582057667
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/issues/1395#issuecomment-589790786\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1395#issuecomment-589790786\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1395\">Issue #1395</a>:</p>\n<blockquote>\n<blockquote>\n<p>since wasm doesn't have signed/unsigned types, wasm translation would be a little awkward</p>\n</blockquote>\n<p>Yup. Closing this; it would be nice to have to reduce the number of Cranelift instructions but I see what you mean by the added awkwardness.</p>\n</blockquote>",
        "id": 188763691,
        "sender_full_name": "GitHub",
        "timestamp": 1582311869
    },
    {
        "content": "<p>abrown closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/1395\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1395\">Issue #1395</a>:</p>\n<blockquote>\n<p>&lt;!-- Please try to describe precisely what you would like to do in Cranelift and/or<br>\nexpect from it. You can answer the questions below if they're relevant and<br>\ndelete this text before submitting. Thanks for opening an issue! --&gt;</p>\n<h4>Feature</h4>\n<p>&lt;!-- What is the feature or code improvement you would like to do in Cranelift? --&gt;</p>\n<p>Add unsigned integer types to the Cranelift type system.</p>\n<h4>Benefit</h4>\n<p>&lt;!-- What is the value of adding this in Cranelift? --&gt;</p>\n<p>Halve the number of cranelift instructions of the form <code>uload*</code>/<code>sload*</code>, <code>uadd_sat</code>/<code>sadd_sat</code>, etc.</p>\n<h4>Implementation</h4>\n<p>&lt;!-- Do you have an implementation plan, and/or ideas for data structures or algorithms to use? --&gt;</p>\n<p>The real question would be whether the <code>Type</code> struct (<code>cranelift-codegen/src/ir/types.rs</code>) has enough index space to fit all of the new unsigned variants; if it does, the work could proceed along the lines of:</p>\n<ul>\n<li>Alter <code>cranelift-codegen/meta/src/shared/types.rs</code> to include <code>SignedInt</code> and <code>UnsignedInt</code> enums</li>\n<li>Add the new type to the CDSL, e.g. <code>LaneType</code> in <code>cranelift-codegen/meta/src/cdsl/types.rs</code></li>\n<li>Generate the new types in <code>cranelift-codegen/meta/src/gen_types.rs</code></li>\n<li>Add necessary helper functions in <code>cranelift-codegen/src/ir/types.rs</code></li>\n<li>Modify the CLIF parser to differentiate between types <code>u*</code> and <code>i*</code></li>\n<li>Finally, replace the extra instructions with simpler ones that use, e.g., the <code>u32</code> vs <code>i32</code> controlling type to determine the encoding</li>\n</ul>\n<h4>Alternatives</h4>\n<p>&lt;!-- Have you considered alternative implementations? If so, how are they better or worse than your proposal? --&gt;</p>\n<p>This is more an RFC than a real proposal so the alternative is to leave things as they are.</p>\n</blockquote>",
        "id": 188763692,
        "sender_full_name": "GitHub",
        "timestamp": 1582311869
    }
]