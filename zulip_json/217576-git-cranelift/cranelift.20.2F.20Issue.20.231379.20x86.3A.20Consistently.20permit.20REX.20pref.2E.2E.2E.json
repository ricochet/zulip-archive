[
    {
        "content": "<p>iximeow opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1379\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1379\">Issue #1379</a>:</p>\n<blockquote>\n<p>It looks like our SIMD encodings waver between permitting and not permitting the REX prefix: compare uses of <code>enc_32_64</code> and <code>enc_both</code> in <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/encodings.rs#L1811-L2030\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/encodings.rs#L1811-L2030\">x86/encoding.rs</a>.</p>\n<p>As a result, vector operations using <code>r8</code>-<code>r15</code> as parts of a memory operand, or <code>xmm8</code>-<code>xmm15</code> as a register operand, get rejected when searching for encodings and, I believe, result in Cranelift not using those xmm registers entirely in some circumstances (we're missing a rex-friendly <code>MOVUPS</code> encoding so I don't think we can encode a spill of <code>xmm8</code>-<code>xmm15</code>).</p>\n<p>I ran across this trying to emit <code>movups xmm7, [r11]</code> when <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378/files/3d12b9d201b4c62079beea4f91d31344b86ecb94#diff-08ef6b0c3d44ab300b5158dab40ea830R1047\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378/files/3d12b9d201b4c62079beea4f91d31344b86ecb94#diff-08ef6b0c3d44ab300b5158dab40ea830R1047\">restoring SIMD registers in Windows prologues</a>. This currently results in a constraint violation panic when compiling. I believe this is because I specified the location after inserting the instruction, so Cranelift picked the <code>FPR8</code>/<code>GPR8</code>-constrained encoding, and I just gave it an impossible operand, whereas regalloc would have been unable to use <code>r11</code> as an operand and forced shuffling until a fitting register were available.</p>\n<p>I'm pretty sure we can make the blanket change from <code>enc_32_64</code> to <code>enc_both</code> for the region I linked above. However, I don't know the <code>maybe_isap</code> variants, and I figure it'd be better to confirm this before changing stuff around.</p>\n<p>cc @abrown and @bnjbvr as people who've recently touched these things, I think?</p>\n</blockquote>",
        "id": 187602154,
        "sender_full_name": "GitHub",
        "timestamp": 1581034177
    },
    {
        "content": "<p>abrown <a href=\"https://github.com/bytecodealliance/cranelift/issues/1379#issuecomment-583176283\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1379#issuecomment-583176283\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1379\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1379\">Issue #1379</a>:</p>\n<blockquote>\n<p>For some history, I opened #1090 to track this and then tried something in #1149 that I later abandoned. I think you're right about <code>enc_32_64 -&gt; enc_both</code> but I have this nagging feeling that some of the instructions might use a REX bit to distinguish between different instructions (e.g. an 64x2 vs a 32x4)--but I can't recall which have this behavior and which not. Then again, I could be wrong about that but it bears more investigation. I can take a look next week sometime unless you want to do it now?</p>\n</blockquote>",
        "id": 187602843,
        "sender_full_name": "GitHub",
        "timestamp": 1581034985
    },
    {
        "content": "<p>iximeow <a href=\"https://github.com/bytecodealliance/cranelift/issues/1379#issuecomment-583179397\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1379#issuecomment-583179397\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1379\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1379\">Issue #1379</a>:</p>\n<blockquote>\n<p>Oh! I tried looking for open issues and missed that one. I'd have bumped that instead if I saw it.</p>\n<p>You're right - I don't think any lane choices are made by REX prefix bits but at least <code>cvtsi2sd</code> does change operands:</p>\n<div class=\"codehilite\"><pre><span></span>f2 0f 2a c0:    cvtsi2sd xmm0, eax\nf2 4f 0f 2a c0: cvtsi2sd xmm0, r8\n</pre></div>\n\n\n<p>I entirely support being careful here :) I just wanted to note the issue lest I forget to mention, if you can take a look next week that's way ahead of when I can.</p>\n</blockquote>",
        "id": 187603575,
        "sender_full_name": "GitHub",
        "timestamp": 1581035757
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1379\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1379\">Issue #1379</a>:</p>\n<blockquote>\n<p>It looks like our SIMD encodings waver between permitting and not permitting the REX prefix: compare uses of <code>enc_32_64</code> and <code>enc_both</code> in <a href=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/encodings.rs#L1811-L2030\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/blob/master/cranelift-codegen/meta/src/isa/x86/encodings.rs#L1811-L2030\">x86/encoding.rs</a>.</p>\n<p>As a result, vector operations using <code>r8</code>-<code>r15</code> as parts of a memory operand, or <code>xmm8</code>-<code>xmm15</code> as a register operand, get rejected when searching for encodings and, I believe, result in Cranelift not using those xmm registers entirely in some circumstances (we're missing a rex-friendly <code>MOVUPS</code> encoding so I don't think we can encode a spill of <code>xmm8</code>-<code>xmm15</code>).</p>\n<p>I ran across this trying to emit <code>movups xmm7, [r11]</code> when <a href=\"https://github.com/bytecodealliance/cranelift/pull/1378/files/3d12b9d201b4c62079beea4f91d31344b86ecb94#diff-08ef6b0c3d44ab300b5158dab40ea830R1047\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1378/files/3d12b9d201b4c62079beea4f91d31344b86ecb94#diff-08ef6b0c3d44ab300b5158dab40ea830R1047\">restoring SIMD registers in Windows prologues</a>. This currently results in a constraint violation panic when compiling. I believe this is because I specified the location after inserting the instruction, so Cranelift picked the <code>FPR8</code>/<code>GPR8</code>-constrained encoding, and I just gave it an impossible operand, whereas regalloc would have been unable to use <code>r11</code> as an operand and forced shuffling until a fitting register were available.</p>\n<p>I'm pretty sure we can make the blanket change from <code>enc_32_64</code> to <code>enc_both</code> for the region I linked above. However, I don't know the <code>maybe_isap</code> variants, and I figure it'd be better to confirm this before changing stuff around.</p>\n<p>cc @abrown and @bnjbvr as people who've recently touched these things, I think?</p>\n</blockquote>",
        "id": 189361777,
        "sender_full_name": "GitHub",
        "timestamp": 1582932530
    }
]