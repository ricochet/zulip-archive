[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/513\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/513\">Issue #513</a>:</p>\n<blockquote>\n<p>Currently, cranelift IR is always printed with one instruction per line, eg.:</p>\n<div class=\"codehilite\"><pre><span></span>function %foo(i32, i32, i32) -&gt; i32 {\nebb0(v0: i32, v1: i32, v2:i32):\n    v3 = imul v0, v1\n    v4 = iadd v3, v2\n    return v4\n}\n</pre></div>\n\n\n<p>What if we introduced some simple syntax sugar for instructions with only one use? It'd be in addition to the existing syntax. We could then (optionally) print that same code like this:</p>\n<div class=\"codehilite\"><pre><span></span>function %foo(i32, i32, i32) -&gt; i32 {\nebb0(v0: i32, v1: i32, v2:i32):\n    return v0 * v1 + v2\n}\n</pre></div>\n\n\n<p>That would be much easier to read in many cases, which is of potential interest to cranelift developers, but also to cranelift users looking to understand how cranelift is compiling their code.</p>\n<p>This also might make it even more interesting to switch to <code>//</code> comments (#471).</p>\n<p>There's some ambiguity with syntax like <code>v0 + 1</code>, but I think we can resolve it by saying that we always use the <code>_imm</code> instruction when possible rather than emitting an iconst</p>\n<p>And there's the question if value numbers for the intermediate values. My rough idea is that they'd just always use the next available value number.</p>\n<p>There are other issues to consider too, such as printing srclocs and instruction encodings. But I think we could find reasonable ways to make these work. The main question is, is this idea worth pursuing?</p>\n</blockquote>",
        "id": 189361365,
        "sender_full_name": "GitHub",
        "timestamp": 1582932295
    }
]