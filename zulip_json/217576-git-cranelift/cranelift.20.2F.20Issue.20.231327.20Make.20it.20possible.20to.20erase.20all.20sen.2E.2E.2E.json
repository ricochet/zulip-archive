[
    {
        "content": "<p>bjorn3 opened <a href=\"https://github.com/bytecodealliance/cranelift/issues/1327\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1327\">Issue #1327</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift? All stack memory and all registers should be clearable when requested by the user of Cranelift.</li>\n<li>What is the value of adding this in Cranelift? This is very useful for cryptographic libraries, where any possible secret leak is one too much.</li>\n<li>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use? <a href=\"https://internals.rust-lang.org/t/annotations-for-zeroing-the-stack-of-sensitive-functions-which-deal-in-transient-secrets/11588/8\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/annotations-for-zeroing-the-stack-of-sensitive-functions-which-deal-in-transient-secrets/11588/8\">https://internals.rust-lang.org/t/annotations-for-zeroing-the-stack-of-sensitive-functions-which-deal-in-transient-secrets/11588/8</a></p>\n</li>\n<li>\n<p>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal?</p>\n</li>\n</ul>\n</blockquote>",
        "id": 185204931,
        "sender_full_name": "GitHub",
        "timestamp": 1578571190
    },
    {
        "content": "<p>sunfishcode <a href=\"https://github.com/bytecodealliance/cranelift/issues/1327#issuecomment-574938279\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1327#issuecomment-574938279\">commented</a> on <a href=\"https://github.com/bytecodealliance/cranelift/issues/1327\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1327\">Issue #1327</a>:</p>\n<blockquote>\n<p>This probably would be pretty straightforward to implement.</p>\n<p>That said, it's important to keep in mind the limitations of such a feature. This wouldn't prevent operating systems from paging out stack pages to persistent storage, or from saving register state during a context switch or a system suspend. It wouldn't prevent libcalls that Cranelift makes implicitly to runtime libraries or libc from leaving state in their stack frames. It wouldn't prevent a longjmp from jumping past a stack frame, or pthread_kill from killing a thread before its frames can be cleared. It wouldn't prevent hardware from keeping copies of the old values in physical registers, caches, or other microarchitectural state. And it wouldn't protect from many varieties of side-channel attacks. And there might be other limitations I haven't thought of.</p>\n</blockquote>",
        "id": 185762484,
        "sender_full_name": "GitHub",
        "timestamp": 1579138253
    },
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/1327\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/1327\">Issue #1327</a>:</p>\n<blockquote>\n<ul>\n<li>What is the feature or code improvement you would like to do in Cranelift? All stack memory and all registers should be clearable when requested by the user of Cranelift.</li>\n<li>What is the value of adding this in Cranelift? This is very useful for cryptographic libraries, where any possible secret leak is one too much.</li>\n<li>\n<p>Do you have an implementation plan, and/or ideas for data structures or<br>\n  algorithms to use? <a href=\"https://internals.rust-lang.org/t/annotations-for-zeroing-the-stack-of-sensitive-functions-which-deal-in-transient-secrets/11588/8\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/annotations-for-zeroing-the-stack-of-sensitive-functions-which-deal-in-transient-secrets/11588/8\">https://internals.rust-lang.org/t/annotations-for-zeroing-the-stack-of-sensitive-functions-which-deal-in-transient-secrets/11588/8</a></p>\n</li>\n<li>\n<p>Have you considered alternative implementations? If so, how are they better<br>\n  or worse than your proposal?</p>\n</li>\n</ul>\n</blockquote>",
        "id": 189361755,
        "sender_full_name": "GitHub",
        "timestamp": 1582932514
    }
]