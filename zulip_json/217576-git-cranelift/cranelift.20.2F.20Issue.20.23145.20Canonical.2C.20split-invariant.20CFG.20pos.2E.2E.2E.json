[
    {
        "content": "<p>bnjbvr closed <a href=\"https://github.com/bytecodealliance/cranelift/issues/145\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/145\">Issue #145</a>:</p>\n<blockquote>\n<p>In e0fd5252d5c9d0fb0eaae5f33a2d55b197c33ad4 we landed the function <code>DominatorTree::recompute_split_ebb()</code> which updates the dominator tree and its cached CFG post-order after an EBB split. It looks like the way we repair the post order is not correct. Consider this example:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0:\n    brnz v1, ebb1\n    brnz v2, ebb2\n    brnz v3, ebb3\n    brnz v4, ebb4\n    jump ebb5\n</pre></div>\n\n\n<p>If we assume that all of ebb0's successors are not visited before ebb0 in the DFS, we get the following post order: ebb5, ebb4, ebb3, ebb2, ebb1, ebb0.</p>\n<p>Now assume we split the EBB by inserting the ebb99 header:</p>\n<div class=\"codehilite\"><pre><span></span>ebb0:\n    brnz v1, ebb1\n    brnz v2, ebb2\n    jump ebb99\nebb99\n    brnz v3, ebb3\n    brnz v4, ebb4\n    jump ebb5\n</pre></div>\n\n\n<p>The post order is now: ebb5, ebb4, ebb3, <strong>ebb99</strong>, ebb2, ebb1, ebb0. Two claims:</p>\n<ol>\n<li>The current implementation of <code>recompute_split_ebb()</code> is not correct because it inserts the new EBB adjacent to ebb0. As the example shows, that is not always the right insertion spot.</li>\n<li>The post order currently computed by the dominator tree is <em>split invariant</em>. By this I mean that the effect on the post order of splitting an EBB is just to insert the new EBB header somewhere. The relative order of existing EBBs does not change. It would be good to prove this property more strictly.</li>\n</ol>\n<p>Some implementation notes for fixing this:</p>\n<ul>\n<li>Assuming the post order really is split invariant, the strategy in <code>recompute_split_ebb()</code> of inserting the new EBB somewhere in the existing post order is correct. It is only the insertion position that needs to be fixed.</li>\n<li>The new EBB will always appear before the old EBB header in the post order.</li>\n<li>The successors to the old EBB (ebb0 in the example) do not necessarily come before the old EBB in the post order. It is possible for any of the to be visited before ebb0 along another CFG path, which would cause them to appear <em>after</em> ebb0 in the post order.</li>\n<li>If one of the successors after the split appear before ebb0 in the post order, the correct insertion point is after the first such successor.</li>\n</ul>\n</blockquote>",
        "id": 183829135,
        "sender_full_name": "GitHub",
        "timestamp": 1576748002
    }
]