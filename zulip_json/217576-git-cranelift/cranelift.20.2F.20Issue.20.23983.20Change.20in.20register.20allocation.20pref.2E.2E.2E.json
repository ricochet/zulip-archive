[
    {
        "content": "<p>alexcrichton transferred <a href=\"https://github.com/bytecodealliance/cranelift/issues/983\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/issues/983\">Issue #983</a>:</p>\n<blockquote>\n<p>To start, some clif:</p>\n<div class=\"codehilite\"><pre><span></span>; guest_func_10\nfunction u0:10(i64 vmctx, i32, i32) -&gt; i32 system_v {\n    sig0 = (i64 vmctx, i32, i32) -&gt; i32 system_v\n    fn0 = colocated u0:10 sig0\n\n                                ebb0(v0: i64, v1: i32, v2: i32):\n@09ca                               v4 = iconst.i32 0\n@09d0                               v5 = icmp_imm eq v1, 0\n@09d0                               v6 = bint.i32 v5\n@09d1                               brnz v6, ebb2(v2)\n@09d3                               jump ebb3(v1, v2)\n\n                                ebb3(v7: i32, v10: i32):\n@09d7                               v8 = iconst.i32 -1\n@09d9                               v9 = iadd v7, v8\n@09de                               brz v10, ebb5\n@09e4                               v11 = iconst.i32 -1\n@09e6                               v12 = iadd v10, v11\n@09e7                               v13 = call fn0(v0, v7, v12)\n@09ef                               brnz v9, ebb3(v9, v13)\n@09f1                               jump ebb2(v13)\n\n                                ebb5:\n@09f4                               v14 = iconst.i32 1\n@09fc                               brnz.i32 v9, ebb3(v9, v14)\n@09fe                               jump ebb4\n\n                                ebb4:\n@09ff                               jump ebb2(v14)\n\n                                ebb2(v15: i32):\n@0a02                               v16 = iconst.i32 1\n@0a04                               v17 = iadd v15, v16\n@0a05                               jump ebb1(v17)\n\n                                ebb1(v3: i32):\n@0a05                               return v3\n</pre></div>\n\n\n<p>this had been producing</p>\n<div class=\"codehilite\"><pre><span></span>sym.guest_func_10 ();\n           0x00003ac0 push rbp\n           0x00003ac1 mov rbp, rsp\n           0x00003ac4 sub rsp, 0x10\n           0x00003ac8 mov qword [rsp], rdi\n           0x00003ad0 mov dword [local_ch], edx\n           0x00003ad7 test esi, esi\n       ,=&lt; 0x00003ad9 je 0x3b56\n       |   0x00003adb mov eax, 1\n       |   0x00003ae0 mov dword [local_ch], eax\n     ..--&gt; 0x00003ae7 mov eax, esi\n     ::|   0x00003ae9 add eax, -1\n     ::|   0x00003aec mov dword [local_8h], eax\n     ::|   0x00003af3 test edx, edx\n    ,====&lt; 0x00003af5 je 0x3b31\n    |::|   0x00003af7 add edx, -1\n    |::|   0x00003afa mov rax, qword [rsp]\n    |::|   0x00003b02 mov rdi, rax\n    |::|   0x00003b05 call sym.guest_func_10\n    |::|   0x00003b0a mov ecx, dword [local_8h]\n    |::|   0x00003b11 mov edx, dword [local_8h]\n    |::|   0x00003b18 mov esi, ecx\n    |::|   0x00003b1b mov ecx, edx\n    |::|   0x00003b1e mov edx, eax\n    |::|   0x00003b21 mov eax, ecx\n    |::|   0x00003b24 test eax, eax\n    |`===&lt; 0x00003b26 jne 0x3ae7\n    | :|   0x00003b28 mov dword [local_ch], edx\n    |,===&lt; 0x00003b2f jmp 0x3b56\n    `----&gt; 0x00003b31 mov eax, dword [local_ch]\n     |:|   0x00003b38 mov ecx, dword [local_8h]\n     |:|   0x00003b3f mov edx, dword [local_8h]\n     |:|   0x00003b46 mov esi, ecx\n     |:|   0x00003b49 mov ecx, edx\n     |:|   0x00003b4c mov edx, eax\n     |:|   0x00003b4f mov eax, ecx\n     |:|   0x00003b52 test eax, eax\n     |`==&lt; 0x00003b54 jne 0x3ae7\n     `-`-&gt; 0x00003b56 mov eax, dword [local_ch]\n           0x00003b5d add eax, 1\n           0x00003b60 add rsp, 0x10\n           0x00003b64 pop rbp\n           0x00003b65 ret\n</pre></div>\n\n\n<p>with redundant reloads</p>\n<p>in <a href=\"https://github.com/CraneStation/cranelift/commit/164f91a1f473e582e18e48d056c51787d9a1c24d\" target=\"_blank\" title=\"https://github.com/CraneStation/cranelift/commit/164f91a1f473e582e18e48d056c51787d9a1c24d\"><code>164f91a</code></a> the redundant reloads are removed (<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>) but ends up picking (on x86-64) callee-save registers to load into, then producing</p>\n<div class=\"codehilite\"><pre><span></span>sym.guest_func_10 ();\n           0x00003ac0 push rbp\n           0x00003ac1 mov rbp, rsp\n           0x00003ac4 push r12\n           0x00003ac6 push r13\n           0x00003ac8 push r14\n           0x00003aca sub rsp, 0x18\n           0x00003ace mov qword [local_8h], rdi\n           0x00003ad6 mov dword [local_14h], edx\n           0x00003add test esi, esi\n       ,=&lt; 0x00003adf je 0x3b48\n       |   0x00003ae1 mov eax, 1\n       |   0x00003ae6 mov dword [local_14h], eax\n     ..--&gt; 0x00003aed mov eax, esi\n     ::|   0x00003aef add eax, -1\n     ::|   0x00003af2 mov dword [local_10h], eax\n     ::|   0x00003af9 test edx, edx\n    ,====&lt; 0x00003afb je 0x3b2f\n    |::|   0x00003afd add edx, -1\n    |::|   0x00003b00 mov r14, qword [local_8h]\n    |::|   0x00003b08 mov rdi, r14\n    |::|   0x00003b0b call sym.guest_func_10\n    |::|   0x00003b10 mov r14d, dword [local_10h]\n    |::|   0x00003b18 mov r13d, r14d\n    |::|   0x00003b1b mov esi, r14d\n    |::|   0x00003b1e mov edx, eax\n    |::|   0x00003b21 test r13d, r13d\n    |`===&lt; 0x00003b24 jne 0x3aed\n    | :|   0x00003b26 mov dword [local_14h], edx\n    |,===&lt; 0x00003b2d jmp 0x3b48\n    `----&gt; 0x00003b2f mov r14d, dword [local_14h]\n     |:|   0x00003b37 mov r13d, eax\n     |:|   0x00003b3a mov r12d, eax\n     |:|   0x00003b3d mov esi, r13d\n     |:|   0x00003b40 mov edx, r14d\n     |:|   0x00003b43 test r12d, r12d\n     |`==&lt; 0x00003b46 jne 0x3aed\n     `-`-&gt; 0x00003b48 mov r14d, dword [local_14h]\n           0x00003b50 add r14d, 1\n           0x00003b54 mov eax, r14d\n           0x00003b57 add rsp, 0x18\n           0x00003b5b pop r14\n           0x00003b5d pop r13\n           0x00003b5f pop r12\n           0x00003b61 pop rbp\n           0x00003b62 ret\n</pre></div>\n\n\n<p>because of the callee-save use here we end up net +3 memory accesses from push/pops, even though three redundant loads were removed</p>\n<p>In a particularly contorted benchmark (Lucet's <code>ackermann</code> benchmark) this ends up dropping runtime by ~30%, though I think in most cases it's probably about the same before and after.</p>\n<p>ediit: didn't include addresses initially, which didn't read well</p>\n</blockquote>",
        "id": 189361575,
        "sender_full_name": "GitHub",
        "timestamp": 1582932402
    }
]