[
    {
        "content": "<p>I am using wasmtime in an embedded way.  Wasmtime is in a DLL, but when I close the DLL, it always crashes the host process.  On the other way, Wasmi is fine. So I wonder if wasmtime is multithreaded, it creates some threads when running?<br>\nIf this is true, is there any way to close all the threads before I close the DLL?</p>",
        "id": 453366905,
        "sender_full_name": "Hoping White",
        "timestamp": 1721726374
    },
    {
        "content": "<p>I already tried to only enable runtime and cranelift features, because parallel-compile uses rayon. But it does not work.</p>",
        "id": 453367465,
        "sender_full_name": "Hoping White",
        "timestamp": 1721726503
    },
    {
        "content": "<p>Can you share details of the crash? Wasmtime's only background threads are the ones used during compilation.</p>",
        "id": 453434460,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721746436
    },
    {
        "content": "<p>I am trying to write a unity game using Rust, in order to achieve hot<br>\nloading, and ultimately run with wasm. In order to be compatible with<br>\nAndroid and iOS, I chose wasmtime and wasmi, which have essentially the<br>\nsame interface, so the code is almost the same. In general, when Unity's<br>\neditor crashes, there will be crash information in the editor.log, but in<br>\nthis kind of crash, there is absolutely no crash log. Initially, in<br>\nwasmtime mode, as soon as the dll is closed, Unity crashes after a few<br>\nseconds, while wasmi mode has no problems at all. I always thought there<br>\nwas something wrong with my code until I found out that if I don't use wasm<br>\nand directly use Rust runtime in multi-thread mode, it will crash. So, I<br>\nsuspect that the crash may be caused by threads created in the dll<br>\naccessing certain global variables after the dll is closed. So I tried<br>\nturning off wasmtime's parallel compilation, only to find that it still<br>\ncrashes. So I wanted to know if there are any other threads running.<br>\n询问GPT-4o获得更好的回答</p>\n<p>Zulip notifications &lt;<a href=\"mailto:noreply@zulip.com\">noreply@zulip.com</a>&gt; 于2024年7月23日周二 22:55写道：</p>",
        "id": 453567198,
        "sender_full_name": "Hoping White",
        "timestamp": 1721785043
    },
    {
        "content": "<p>rust-std is not unload-safe, we don't know enough about wasmtime to tell if wasmtime is unload-safe (it would have to be entirely no-std at the very least, there may be other issues as well)</p>",
        "id": 453580229,
        "sender_full_name": "Soni L.",
        "timestamp": 1721790729
    },
    {
        "content": "<p>I tried dropping wasmtime and waiting for a few seconds before unloading,<br>\nand found that it didn't crash. But it still crashes in wasmtime threads<br>\nmode, so it looks like it's still a thread-related issue.</p>\n<p>Zulip notifications &lt;<a href=\"mailto:noreply@zulip.com\">noreply@zulip.com</a>&gt; 于2024年7月24日周三 11:14写道：</p>",
        "id": 453581793,
        "sender_full_name": "Hoping White",
        "timestamp": 1721791251
    },
    {
        "content": "<p>My test code is written incorrectly, did not actually close the dll, as before, as long as it is closed, it will crash.</p>",
        "id": 453643750,
        "sender_full_name": "Hoping White",
        "timestamp": 1721813345
    },
    {
        "content": "<p>Do you have a backtrace of the crash?</p>",
        "id": 453703132,
        "sender_full_name": "bjorn3",
        "timestamp": 1721829449
    },
    {
        "content": "<p>Are you using <code>wasmtime-wasi</code>? That might enable Tokio usage which might enable background threads as well. Otherwise though Wasmtime does not spawn background threads except for its <code>rayon</code> and <code>tokio</code> usage.</p>",
        "id": 453712154,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721831440
    },
    {
        "content": "<p>No, I don't have a backtrace. Actually, the Unity editor did not crash as the DLL closed immediately. I can get the debug log  right after dll closing.  But I don't see any crash log in the Unity Editor.log.</p>",
        "id": 453827656,
        "sender_full_name": "Hoping White",
        "timestamp": 1721871092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/How.20to.20safely.20drop.20wasmtime.3F/near/453712154\">said</a>:</p>\n<blockquote>\n<p>Are you using <code>wasmtime-wasi</code>? That might enable Tokio usage which might enable background threads as well. Otherwise though Wasmtime does not spawn background threads except for its <code>rayon</code> and <code>tokio</code> usage.</p>\n</blockquote>\n<p>The target wasm32-unknown-unknown will crash in wasmtime, but not in wasmi.</p>",
        "id": 453827785,
        "sender_full_name": "Hoping White",
        "timestamp": 1721871197
    },
    {
        "content": "<p>Oh you know it's probably <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/crates/wasmtime/src/runtime/vm/sys/windows/traphandlers.rs#L30\">our call to</a> <code>AddVectoredExceptionHandler</code>.  That is never unregistered meaning that if you unload the dll and some later exception happens then it'll execute unmapped code which might be what's happening</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/crates/wasmtime/src/runtime/vm/sys/windows/traphandlers.rs#L30\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d0da55ad8410c545fc84a9d28c9a708b54e9c5ac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363637656337323930666565303233313435386365663035653838383739376139663762623262663231383237363865346664386636363935363334363636332f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/crates/wasmtime/src/runtime/vm/sys/windows/traphandlers.rs#L30\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/sys/windows/traphandlers.rs at 5d0d61602f2dfa5478ef120a86a9009d74ac56bb · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/sys/windows/traphandlers.rs at 5d0d61602f2dfa5478ef120a86a9009d74ac56bb · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 453960611,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721916647
    },
    {
        "content": "<p>that might also explain the lack of crash report since it's dying while trying to generate a crash report</p>",
        "id": 453960686,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721916661
    },
    {
        "content": "<p>I think it'd be reasonable to refactor that to call <code>RemoveVectoredExceptionHandler</code> when engines were all dropped. It won't entirely be trivial due to the way things are structured right now but I don't think it'd be too bad either.</p>",
        "id": 453961565,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721916810
    },
    {
        "content": "<p>is that something you'd be interested in investigating?</p>",
        "id": 453961607,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721916820
    },
    {
        "content": "<p>(why do you write unload-safe code in rust when the language explicitly doesn't support that use-case?)</p>",
        "id": 453972898,
        "sender_full_name": "Soni L.",
        "timestamp": 1721919919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/How.20to.20safely.20drop.20wasmtime.3F/near/453961607\">said</a>:</p>\n<blockquote>\n<p>is that something you'd be interested in investigating?</p>\n</blockquote>\n<p>You're right. I add a handle in Engine, and RemoveVectoredExceptionHandler before drop, and it does not crash now.</p>",
        "id": 454145373,
        "sender_full_name": "Hoping White",
        "timestamp": 1721960184
    },
    {
        "content": "<p>Ok thanks for checking! I've submitted <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9022\">https://github.com/bytecodealliance/wasmtime/pull/9022</a> to be able to expose this at the engine level. Note though that it's a fundamentally <code>unsafe</code> method so we effectively can't guarantee it will continue to work in all situations. If you encounter issues though we can try fix them or at least document them.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9022\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9cbf06004e01fa69db76c23273f6a2864289ede7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373761376366323734666163393662393666636361636361336661376633653062663933373334373466363366303032636638393633396261616438633735362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39303232&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9022\" title=\"Add an unsafe API to unload process trap handlers by alexcrichton · Pull Request #9022 · bytecodealliance/wasmtime\">Add an unsafe API to unload process trap handlers by alexcrichton · Pull Request #9022 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit adds a new unsafe API Engine::unload_process_handlers which can be used to de-initialize trap-handling state in a process. In general this is an unsafe operation that we have no means o...</div></div></div>",
        "id": 454333646,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1722011430
    },
    {
        "content": "<p>This is great, thank you very much.</p>",
        "id": 454690418,
        "sender_full_name": "Hoping White",
        "timestamp": 1722215821
    }
]