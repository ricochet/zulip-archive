[
    {
        "content": "<p>After moving o the newest release(s), I get everything to work with my test suite, except a type using</p>\n<p><code>(list (tuple string (union bool u16)))</code>, which returns an error of <code>type not valid to be used as export (at offset 0x158</code> when using Component::new... </p>\n<p>This export is all handled with a similar foundation to the make_echo_component code used in the wasmtime codebase. Which change from 8 -&gt; 10 would change this behavior? It essentially does like the combo of list w/ union or tuple with union either. </p>\n<p>cc <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>.</p>",
        "id": 372392947,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1688496274
    },
    {
        "content": "<p>For example, <code>(list (tuple string string))</code> works no problem (we emulate this kinda type as a \"map\" variant)</p>",
        "id": 372396067,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1688497218
    },
    {
        "content": "<p>So, probably related to for to validations and the test suite on this?</p>",
        "id": 372396187,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1688497255
    },
    {
        "content": "<p>Though maybe my answer lies here: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/tests/local/component-model/type-export-restrictions.wast#L69\">https://github.com/bytecodealliance/wasm-tools/blob/main/tests/local/component-model/type-export-restrictions.wast#L69</a>, as they are incompatible, but wasn't being caught in 8.* versions?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/tests/local/component-model/type-export-restrictions.wast#L69\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/20ddc437af97b352d156b2654e13264bab93956e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303136396335306463653365656637343366316338306433336436646163646231353135353833656266616261666635346339653435616330383937356236372f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/tests/local/component-model/type-export-restrictions.wast#L69\" title=\"wasm-tools/tests/local/component-model/type-export-restrictions.wast at main · bytecodealliance/wasm-tools\">wasm-tools/tests/local/component-model/type-export-restrictions.wast at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 372457929,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1688529613
    },
    {
        "content": "<p>Pretty sure it's this: <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/966/commits/6fc54cd57487db05a3e85af969b6b040c9c4df0e\">https://github.com/bytecodealliance/wasm-tools/pull/966/commits/6fc54cd57487db05a3e85af969b6b040c9c4df0e</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/966/commits/6fc54cd57487db05a3e85af969b6b040c9c4df0e\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7203ed7b00d42dcfb19ebb9b603cc070fb2809ae\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f36343939363f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/966/commits/6fc54cd57487db05a3e85af969b6b040c9c4df0e\" title=\"Initial implementation of resource types by alexcrichton · Pull Request #966 · bytecodealliance/wasm-tools\">Initial implementation of resource types by alexcrichton · Pull Request #966 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This commit is an initial implementation of resource types for the component model. The support added in this commit encompasses:\n\nwasmparser - parsing and validation of resource types\nwasmprinter ...</div></div></div>",
        "id": 372592379,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688563835
    },
    {
        "content": "<p>Yes wasms which were previously accepted are not longer accepted after the change the Lann mentioned, and IIRC the <code>make_echo_component</code> has had updates which you may wish to mirror if you based code on that.</p>",
        "id": 372604869,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1688565984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/on.20move.20from.208.2E*.20-.3E.2010.2E*.2C/near/372604869\">said</a>:</p>\n<blockquote>\n<p>Yes wasms which were previously accepted are not longer accepted after the change the Lann mentioned, and IIRC the <code>make_echo_component</code> has had updates which you may wish to mirror if you based code on that.</p>\n</blockquote>\n<p>yep. Brought in these updates too. And, yes, thank you <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span>, this PR is what def makes sense toward the changes.</p>",
        "id": 372971995,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1688663997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587442\">Zeeshan Lakhani</span> has marked this topic as resolved.</p>",
        "id": 372989509,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688668398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> (or anyone), is there a good link or definitive source or two to find the reasoning(s) on why certain type-export restrictions were made? I'm particularly interested in lists of variants for example, but open to learning more.  Thanks!</p>",
        "id": 385815653,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1692332457
    },
    {
        "content": "<p>The component-model repo is as definitive as anything, though I don't know if it contains the answer to your question.</p>",
        "id": 385886281,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692356247
    },
    {
        "content": "<p>The main motivation for requiring names of exports was to facilitate bindings generation within guest/host languages where few languages have anonymous record or variant types, e.g. Rust requires named structs and named <code>enum</code> types. The requiring of names is also required for resources so this change was also made in anticipation of resources in the future.</p>\n<p>Is this change causing issues for you though? It is theoretically the case that if you're using WIT with up-to-date tooling it's basically a non-issue, so the main pain in theory should be updating everything as opposed to hitting active issues when the tooling is all updated</p>",
        "id": 385929254,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692368909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Oh things are generally working and we're updated to the newest version and tooling :). But, we're building this interpreter between WIT and <a href=\"https://ipld.io/\">https://ipld.io/</a> (the underlying data model for IPFS and similar things), and semantically, while IPLD is a recursive data model/structure and can't be modeled directly as is of course, it'd be nice to model some types as lists of a variant type or union type for example or express maps as records and/or lists of tuples, where then you want to expose unions or variants as types for \"values\" of a tuple (k,v) pair. Nonetheless, thanks for responses to even bring it up :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://ipld.io/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cbb946ecec113eceb78996a5eeb663a57b177444\\/68747470733a2f2f69706c642e696f2f696d672f69706c642d6c6f676f2e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://ipld.io/\" title=\"IPLD - The data model of the content-addressable web\">IPLD - The data model of the content-addressable web</a></div><div class=\"message_embed_description\">The data model of the content-addressable web. It allows us to treat all hash-linked data structures as subsets of a unified information space, unifying all data models that link data with hashes as instances of IPLD.</div></div></div>",
        "id": 386049903,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1692424602
    },
    {
        "content": "<p>Ah ok makes sense, and while <code>tuple&lt;...&gt;</code> does exist in WIT it sounds like you probably want a sort of <code>map&lt;K, V&gt;</code> which I think there's an issue for on the component model repo, but otherwise thanks for explaining <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 386399692,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692626813
    }
]