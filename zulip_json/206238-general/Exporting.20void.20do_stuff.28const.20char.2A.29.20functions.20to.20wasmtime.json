[
    {
        "content": "<p>For various _reasons_ I recently needed to link some host functions to a few wasm VMs. WASMTime to me seems to be the outlier here on how bindings work. (my experience is between wamr, wasm3, wasmtime). The other two engines allow to some degree exposing a function that takes a const char* or any pointer to some data as long as there's a size also involved (wamr enforces this).</p>\n<p>But, in wasmtime, I was looking at the arguments and found AnyRef (behind a flag - <code>wasmtime_config_wasm_reference_types_set</code>).<br>\nThe rest of accepted values are i32/i64,f32,f64 and func_ref. </p>\n<p>I couldn't find an example on how to correctly use anyref, and exporting a function as taking <code>anyref</code> as a <code>const char *</code> seems to trigger a link_error in <code>linker.compute_imports</code>. I almost wanted to give up and cast a pointer to i64 and pass that to the host vm, grab the memory from wasmtime and then re-create the memory location to that offset as a workaround, but that is semi-hard in the bindings as they don't depend on an engine context (like it's readily available wasm3/wamr) and just the params/results arrays. This makes for some really ugly solutions.</p>\n<p>What is the correct way to expose a method that takes a const char* to wasmtime?<br>\nMy question would be, is there an example that I could reuse for anyref?</p>",
        "id": 204793518,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595509383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> hm I'm not quite sure I understand what the functionality is that you're asking for, can you elaborate on what this <code>const char*</code> is in wamr/wasm3? Perhaps there's some example code I could poke around?</p>",
        "id": 204801123,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513068
    },
    {
        "content": "<p>So for example you can expose a host VM function that's basically: <code>void PrintMeThisStuff(const char* stuff) { printf(\"%s\\n\", stuff); }</code><br>\nIn WASM3 you need to export it by wrapping it as (it's basically a static function with these params: </p>\n<div class=\"codehilite\"><pre><span></span><code>const void* PrintMeThisStuffWrapper(IM3Runtime runtime, uint64_t* _sp, void* _mem) {\n   m3ApiGetArgMem(const char*, msg);\n   PrintMeThisStuff(msg); //real method called here\n}\n</code></pre></div>\n\n\n<p>Then you bind it like so:</p>\n<div class=\"codehilite\"><pre><span></span><code>m3_LinkRawFunction(io_module, i_moduleName, i_functionName, &quot;v(*)&quot;, &amp;PrintMeThisStuffWrapper);\n</code></pre></div>\n\n\n<p>WAMR has docs on how to do this: <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md</a></p>\n<p>But for wasmtime, i can't figure out what the equivalent of that would be</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 204801912,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595513422
    },
    {
        "content": "<p>FWIW those examples look extremely dangerous because they're not doing any validation of the arguments given from wasm</p>",
        "id": 204802041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513492
    },
    {
        "content": "<p>WAMR does some, as it forces the size parameter on the pointers</p>",
        "id": 204802091,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595513513
    },
    {
        "content": "<p>I believe the wasmtime equivalent is the last example here -- <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html#method.wrap\">https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html#method.wrap</a></p>",
        "id": 204802153,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513526
    },
    {
        "content": "<p>the wamr/wasm3 examples dont' look like they're actually validating the input provided by wasm</p>",
        "id": 204802194,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513543
    },
    {
        "content": "<p>or the length provided</p>",
        "id": 204802205,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513546
    },
    {
        "content": "<p>to make sure it's actually in-bounds in the wasm linear memory</p>",
        "id": 204802222,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513556
    },
    {
        "content": "<p>I think WAMR does some checks as they mandate the size to follow that pointer, but didn't dive super deep into their actual implementation.</p>",
        "id": 204802304,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595513595
    },
    {
        "content": "<p>hm ok, well in any case this isn't functionality built into wasmtime</p>",
        "id": 204802343,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513614
    },
    {
        "content": "<p>this is something you'll need to do in your <code>Func</code> closure</p>",
        "id": 204802377,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595513624
    },
    {
        "content": "<p>it is not what <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md#buffer-address-conversion-and-boundary-check\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md#buffer-address-conversion-and-boundary-check</a> describes</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md#buffer-address-conversion-and-boundary-check\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md#buffer-address-conversion-and-boundary-check\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 204803807,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595514274
    },
    {
        "content": "<p>\"When passing a pointer address from WASM to native, the address value must be converted to native address before the native function can access it.\"</p>",
        "id": 204803898,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595514320
    },
    {
        "content": "<p>hard to imagine that going from native to WASM will be different</p>",
        "id": 204804516,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595514594
    },
    {
        "content": "<p>Yes, so i want to pass exactly that, pass an address from WASM to native</p>",
        "id": 204807878,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595516036
    },
    {
        "content": "<p>do you have to call <code>wasm_runtime_addr_native_to_app</code> for that?</p>",
        "id": 204808498,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595516283
    },
    {
        "content": "<p>What makes this difficult in WASMtime, is that the function wrappers don't take the engine as a parameter, so there is no easy way to query the WASM memory base pointer. <br>\nThis makes it hard to send a char * (or any pointer to WASM memory) from WASM land into C++ land and access it's contents (as you'd need the base offset, to get to a memory address that works out of the box in C++)<br>\nAs my second idea was to just send an i32/i64 (the WASM address - basically the wasm memory offset), and together with the base pointer I could re-create a C++ accessible pointer.</p>",
        "id": 204808520,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595516290
    },
    {
        "content": "<p>it is hard to judge what WAMR is doing without complete example. Do you have working one?</p>",
        "id": 204808797,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595516404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> the <code>Caller</code> type is how wasmtime supports getting the memory's base pointer right now, does that work for you?</p>",
        "id": 204808940,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595516473
    },
    {
        "content": "<p>(or <code>wasmtime_caller_t</code> in the C API)</p>",
        "id": 204808962,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595516486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  Yes, if that allows me to get the base memory, I can reconstruct a host-vm accessible pointer from the WASMTIME pointer (offset). So this seems to solve my use-case.</p>",
        "id": 204816748,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595520107
    },
    {
        "content": "<p>I just need to figure out how exactly to set this up, but it sounds promissing. thanks</p>",
        "id": 204816821,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595520127
    },
    {
        "content": "<p>This is pretty cool. Would be interesting to see how this will evolve, as an user the WAMR approach seems sensible, as now everyone has to do the magical translation between address spaces themselves (with the associated risks)<br>\nBut it would be interesting to mandate a pointer + size like WAMR when passing VM pointers to HOST program</p>",
        "id": 204819567,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595521343
    },
    {
        "content": "<p>Maybe the interface proposal is something to deal with this</p>",
        "id": 204819622,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595521375
    },
    {
        "content": "<p>notice that from \"native\" side wasm pointers are not really \"pointer\" but just offsets</p>",
        "id": 204819733,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595521440
    },
    {
        "content": "<p>so basically I32 for wasm32</p>",
        "id": 204819821,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595521465
    },
    {
        "content": "<p>Yes, what would be interesting is to have these things more enforced (passing raw data over the boundary of VMs)<br>\nI am sure things like these are worked on (I'm quite new to WASM in general)<br>\nBasically started when I started writing stuff in here <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 204819987,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595521549
    },
    {
        "content": "<p>But stuff like forcing users to pass a pointer + size always, like WAMR tries to enforce is interesting. Of course you can just pass the offset directly and re-create the actual memory address on the host VM, but it's just easy to do it the \"safer\" way</p>",
        "id": 204820174,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595521628
    },
    {
        "content": "<p>you can choose to do what WASI is doing atm</p>",
        "id": 204820182,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595521633
    },
    {
        "content": "<p>What is that?</p>",
        "id": 204820206,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595521648
    },
    {
        "content": "<p>generate wrappers from witx?</p>",
        "id": 204820321,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595521694
    },
    {
        "content": "<p>but your do_stuff(const char*) signature may not be valid there</p>",
        "id": 204820390,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595521742
    },
    {
        "content": "<p>that's interesting, I will look into it</p>",
        "id": 204821012,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595522026
    },
    {
        "content": "<p>I just thought that WASI functions have basically a special module in WASM engines that exposes some methods just like the other host vm methods</p>",
        "id": 204821125,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595522066
    },
    {
        "content": "<p>I didn't realize that's generated</p>",
        "id": 204821139,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595522071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> this blog post might be helpful: <a href=\"https://radu-matei.com/blog/wasm-api-witx/\">https://radu-matei.com/blog/wasm-api-witx/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://radu-matei.com/blog/wasm-api-witx/\" style=\"background-image: url(https://www.gravatar.com/avatar/031fa2ff2832edcb6b30c8ffb61da4d4?s=256)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://radu-matei.com/blog/wasm-api-witx/\" title=\"Writing a simple WASM API layer using interface types and Wasmtime - radu's blog\">Writing a simple WASM API layer using interface types and Wasmtime - radu's blog</a></div><div class=\"message_embed_description\">In this short article we explore how to get started with WebAssembly interface types by defining a simple API layer, then implementing that using Wiggle and Wasmtime</div></div></div>",
        "id": 204824168,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1595523544
    },
    {
        "content": "<p>Thanks <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 204824768,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595523832
    },
    {
        "content": "<p>Oh gosh, so I went back into this after taking a break, so there's a <code>wasmtime_func_callback_t</code> and a <code>wasm_func_callback_t</code> and just the first one supports the caller parameter. I was so confused between these two for a while</p>",
        "id": 204850413,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595536469
    },
    {
        "content": "<p>Just an update on this, it works as advised, with a small correction: using <code>wasm_name_new_from_string()</code> with WASMTIME is not a good idea.<br>\nThe generated names from that function are adding a <code>'\\0'</code> to the name, making the rust str&amp; be<code> ['e', 'n', 'v', '\\0']</code>.<br>\nHowever, the imports from a WASM module are a str&amp; of just <code>\"env\"</code>, without a trailing <code>'\\0'</code>.</p>\n<p>Not sure where the change should be made so this interops nicer (maybe wasmtime can ignore trailing <code>\\0</code>s for names?</p>",
        "id": 204870681,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595553140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> would you mind filing an issue about this? It's possible that this is all by design, but in that case there might still be some documentation that could be improved. Or it's not working as intended and we should indeed fix it <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 205048181,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1595762891
    },
    {
        "content": "<p>It is correct I think, for C++ it makes sense to capture and copy the terminating <code>'\\0'</code>. But rust's str&amp; doesn't care about terminating zeros. It's most likely something that can be handled in the wasm_name_t rust wasmtime handling</p>",
        "id": 205048840,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595764081
    },
    {
        "content": "<p><code>wasm_name_new_from_string</code> is an inline function in the <code>wasm.h</code> header that specifically copies the null when calling <code>wasm_byte_vec_new</code>, so there's not much we can do in Wasmtime.  I'd simply just use <code>wasm_byte_vec_new</code> directly with only the length of the string if the null was undesirable.</p>",
        "id": 205073808,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595810095
    },
    {
        "content": "<p>i don't quite get the rationale of <code>wasm_name_new_from_string</code> copying the null; the only place in <code>wasm.h</code> that anything is null terminated is <code>wasm_message_t</code> used in traps.</p>",
        "id": 205073904,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595810239
    },
    {
        "content": "<p>there's also no way for Wasmtime to distinguish a <code>wasm_name_t</code> from a <code>wasm_byte_vec_t</code> as the header defines the <code>wasm_name_t</code> functions in terms of the byte vec functions; that is, of course, assuming <code>wasm_name_t</code> is supposed to be null terminated as there's zero documentation of that.</p>",
        "id": 205074119,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595810591
    },
    {
        "content": "<p>i'd argue this line: <code>typedef wasm_name_t wasm_message_t;  // null terminated</code> indicating <code>wasm_message_t</code> <em>being</em> null terminated as an indication of <code>wasm_name_t</code> not supposed to be null terminated.</p>",
        "id": 205074167,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595810671
    },
    {
        "content": "<p>at any rate, I'd first log an issue against the <code>webassembly/c-api</code> repo for some clarity around this since there aren't any actual <code>wasm_name_t</code>-related functions we can implement to distinguish names from byte vecs.  I mean, we <em>could</em> check for null on every function taking a <code>wasm_name_t</code> and trim the underlying slice before handing it to the Rust API, but that seems unnecessary if <code>wasm_name_t</code> isn't supposed to be null terminated (undoc'd APIs = <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>)</p>",
        "id": 205074198,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595810748
    },
    {
        "content": "<p>if i had to guess, I'd say the null being copied in <code>wasm_name_new_from_string</code> to be an upstream bug in <code>wasm.h</code>.</p>",
        "id": 205074700,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595811684
    },
    {
        "content": "<p>It looks like it <em>is</em> intentional (<a href=\"https://github.com/WebAssembly/wasm-c-api/pull/34\">https://github.com/WebAssembly/wasm-c-api/pull/34</a>) but the way this function is used in this PR it should be called <code>wasm_message_new_from_string</code> as it's only used to create a trap message <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api/pull/34\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api/pull/34\" title=\"Turn traps into their own class by rossberg · Pull Request #34 · WebAssembly/wasm-c-api\">Turn traps into their own class by rossberg · Pull Request #34 · WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Introduce a reference type wasm::Trap / wasm_trap_t to represent traps (backed by a JS Error instance -- enables them to maintain stack traces etc).\nChange Result / wasm_result_t to carry a trap in...</div></div></div>",
        "id": 205074766,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595811819
    },
    {
        "content": "<p>I opened this: <a href=\"https://github.com/WebAssembly/wasm-c-api/issues/149\">https://github.com/WebAssembly/wasm-c-api/issues/149</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api/issues/149\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api/issues/149\" title=\"wasm_name_t clarification · Issue #149 · WebAssembly/wasm-c-api\">wasm_name_t clarification · Issue #149 · WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Hello, I stumbled into this problem when using the C-API with WASMTIME. wasmname_t can be created with wasm_name_new_from_string. This function is implemented like so: static inline void wasm_name_...</div></div></div>",
        "id": 205097343,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1595842975
    }
]