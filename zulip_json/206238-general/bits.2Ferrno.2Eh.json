[
    {
        "content": "<p>I'm trying to use wasm-libc to compile the gnu coreutils for the web (with poyfills/shims where necessary). I noticed that bits/errno.h is not inside of the wasm-libc headers. I'm pretty new to systems programming, but is this because that header is specific to GNU libc? I thought this might be the case, but i see musl libc also includes bits/errno.h. Apologies if this is too much of a unix question, and not enough of a WASM question!</p>",
        "id": 210076440,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1600127260
    },
    {
        "content": "<p>Yes, \"bits/*\" is non-standard.</p>",
        "id": 210076880,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1600127660
    },
    {
        "content": "<p>For most purposes, the standard path <code>&lt;errno.h&gt;</code> should work.</p>",
        "id": 210076908,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1600127684
    },
    {
        "content": "<p>It's a little surprising GNU coreutils would use bits/*, as it's meant to be portable across Unix-type platforms</p>",
        "id": 210077161,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1600127972
    },
    {
        "content": "<p>I don't think GNU utils is using bits, rather,  I'm using the __wasilibc_unmodified_upstream option, which is causing bits/* headers to be included</p>",
        "id": 210077353,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1600128124
    },
    {
        "content": "<p>Thank you for the help -- I think what I'll do is not use the unmodified_upstream version. I need to know which unix functions are undefined in wasilibc anyways, so I can polyfill them with Javascript.</p>",
        "id": 210077545,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1600128314
    },
    {
        "content": "<p>thats not an option which is intended for use</p>",
        "id": 210077634,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1600128377
    },
    {
        "content": "<p>in the early days it was used to help us track differences from upstream so we could merge in changes from upstream musl</p>",
        "id": 210077654,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1600128396
    },
    {
        "content": "<p>we no longer use it for new changes, because the shape of many of the changes we've made has made it too noisy to mark them in this way, and at one point we discussed deleting it throughout leaving only the modified code left, but it was never a priority</p>",
        "id": 210077738,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1600128478
    },
    {
        "content": "<p>Yeah. In particular, <code>__wasilibc_unmodified_upstream</code> is guarding declarations that aren't supported by the actual libc code, so even if you do define it, you'll get link errors if you try to use those declarations.</p>",
        "id": 210078909,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1600129657
    },
    {
        "content": "<p>I knew as much -- the plan was to write C/JS polyfills for all the non-implemented functions (or at least the ones I needed to run coreutils). Specifically, I was using the <code>-Xlinker --allow-undefined</code> option to generate wasm imports for everything that was undefined.</p>",
        "id": 210079067,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1600129791
    },
    {
        "content": "<p>Ah, the current codebase doesn't anticipate being used like that, so you're in uncharted territory!</p>",
        "id": 210079462,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1600130118
    },
    {
        "content": "<p>oh well, that's where all the interesting stuff happens :)</p>",
        "id": 210079553,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1600130173
    }
]