[
    {
        "content": "<p>Hello! I'm experimenting with incorporating wasm into an established C-ffi system (specifically dart-lang). The use case is that C or binary files can not be distributed through the package system, but wasm potentially could. Then it would be up to the toolchain to recreate the intended native dynamic library locally.</p>\n<p>What I'm experimenting with is a simple exported C function:<br>\n<code>EXPORT int64_t add_five(int64_t input) { return input + 5; }</code></p>\n<p>Compile it to wasm dynamic:<br>\n<code>zig build-lib -dynamic shared.c -target wasm32-freestanding</code></p>\n<p>Make it a .so:<br>\n<code>wasmtime wasm2obj ../dart-wasm/zig/shared.wasm shared.o\nzig build-lib -dynamic shared.o</code></p>\n<p>And then expect to use <a href=\"http://shared.so\">shared.so</a> with the initially intended header and C-ffi.</p>\n<p>Of course this fails on multiple levels. Hence the question:</p>\n<ul>\n<li>Is the approach fundamentally wrong?</li>\n<li>Can it be made somehow so that the C ABI and the API can be preserved through C-&gt;wasm-&gt;native compilation? If yes, what kind of development/modification is needed?</li>\n</ul>",
        "id": 248223653,
        "sender_full_name": "Safa Sofuoglu",
        "timestamp": 1627998854
    },
    {
        "content": "<p>Hi Safa! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> That use case sounds at least extremely closely related to the goals of the <a href=\"https://plsyssec.github.io/rlbox_sandboxing_api/sphinx/\">RLBox project</a>. <span class=\"user-mention\" data-user-id=\"270639\">@Deian Stefan</span> and <span class=\"user-mention\" data-user-id=\"270657\">@Shravan Narayan</span> could say more about whether it might be  good fit, though</p>",
        "id": 248224415,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1627999195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> thanks for the swift response. The use case does not involve sandboxing or security at the moment. My current objective is to figure out how to recreate (or wrap&amp;expose) the C ABI/API surface after C-&gt;wasm-&gt;native compilation.</p>",
        "id": 248225751,
        "sender_full_name": "Safa Sofuoglu",
        "timestamp": 1627999760
    },
    {
        "content": "<p>ah, I see. This could potentially still give you a toolchain that does what you want-with improved security thrown in as a bonus <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 248225929,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1627999833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"430552\">@Safa Sofuoglu</span>  Yup, RLBox definitely does cover this as a part of what it does. While our focus is security and sandboxing, we had to cover ABI compatibility issue  as part of what we did.</p>\n<p>We had address multiple challenges in preserving details across the C-&gt;Wasm-&gt;native boundary, specifically </p>\n<ul>\n<li>ABI --- C's types are not consistent in each platform. <code>long</code> means different things on different platforms/compilers</li>\n<li>Pointer swizzling --- pointers in Wasm are 32-bit offsets and not 64-bit globals (or whatever the platform pointer size is)</li>\n<li>Calling convention --- function names and their possible mangling by Wasm toolchains and some calling convention aspects such as how do functions that return structs operate may not be identical in every platform</li>\n<li>Data marshaling --- any shared data or buffers in use by the host application needs to be copied over to the Wasm heap, as the Wasm code would otherwise be unable to access it</li>\n</ul>\n<p>For RLBox, we basically end up solving this through a combination of a C++ wrapper type system and template meta-programming to get things working transparently.</p>\n<p>I think I broadly see 3 ways to address this</p>\n<ul>\n<li>Write a code generator that takes the C header and generates the ABI fixing code as wrappers around the generated Wasm code</li>\n<li>Modify RLBox to use just the ABI compat layer without the sandboxing bits. It should be doable, and I'd be happy to upstream/help with the changes.</li>\n<li>Implement an ABI compat layer in a C++ template meta-programming layer (like RLBox) but without the sandboxing bits</li>\n</ul>\n<p>Hope this helps</p>",
        "id": 248268162,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1628018932
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270657\">@Shravan Narayan</span> your answer is immensely helpful, thanks! I'll start by inspecting RLBox source.</p>",
        "id": 248271726,
        "sender_full_name": "Safa Sofuoglu",
        "timestamp": 1628020567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"430552\">Safa Sofuoglu</span> has marked this topic as resolved.</p>",
        "id": 248271745,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628020576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"430552\">@Safa Sofuoglu</span>   Oh also re- a generator, if you want to use an existing generator you can also use witx (you have to manually write the witx interface file for libraries you care about). Then you can use witx bindgen tool<br>\n<a href=\"https://bytecodealliance.github.io/witx-bindgen/\">https://bytecodealliance.github.io/witx-bindgen/</a></p>",
        "id": 249767947,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1629228959
    }
]