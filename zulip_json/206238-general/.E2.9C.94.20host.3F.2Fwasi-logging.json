[
    {
        "content": "<p>Howdy all, I've been able to implement my own host functions and use <code>wit-deps</code> to import them for use in a set of wasm guest functions. However, I'm trying to understand how to use wasi:logging in our embedding of wasmtime. I'm getting the classic:</p>\n<div class=\"codehilite\" data-code-language=\"thread\"><pre><span></span><code>called `Result::unwrap()` on an `Err` value: WasmRuntime(import `wasi:logging/logging` has the wrong type\n\nCaused by:\n    0: instance export `log` has the wrong type\n    1: expected func found nothing\n</code></pre></div>\n<p>so I figured I'd need <code>with</code> on the wasmtime bindgen and point to bindings for logging in the preview, and then add to the linker? But, I'm not sure what that is for logging?  Any thoughts?</p>",
        "id": 412192590,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704909202
    },
    {
        "content": "<p>I also tried to impl it for my State/Context, but ran into lifetime errors (if that were the path). I've looked at Wasiclouds's impl, but figured that's more specific to their platform.  Seemingly, there's no impl of the logging interface in preview tho. Anyhow, any related examples would help.</p>",
        "id": 412194619,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704910013
    },
    {
        "content": "<p>there is no implementation of wasi:logging provided by wasmtime-wasi, you'd need to write one</p>",
        "id": 412195899,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910603
    },
    {
        "content": "<p>where are you getting the definition of wasi:logging?</p>",
        "id": 412195922,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> yep, seeing this too <a href=\"https://github.com/bytecodealliance/ComponentizeJS/issues/6\">https://github.com/bytecodealliance/ComponentizeJS/issues/6</a>, i figured ok. I was pulling via wit-deps like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">logging</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/WebAssembly/wasi-logging/archive/main.tar.gz\"</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/issues/6\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4b0f687862643f60d1e63cf9f29fb9806a3e9512\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663131373930323532396565343065666461343661323835353138663331643831333931653830666562303066633035643034306132653039393837646435332f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a532f6973737565732f36)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/issues/6\" title=\"Logging 路 Issue #6 路 bytecodealliance/ComponentizeJS\">Logging 路 Issue #6 路 bytecodealliance/ComponentizeJS</a></div><div class=\"message_embed_description\">console logging should be going through wasi-logging, either by default or as an option.</div></div></div>",
        "id": 412196174,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704910709
    },
    {
        "content": "<p>ah, that issue is pretty far out of date, before we had set aside wasi logging for stdout/stderr in favor of using a more posix-like stream representation defined in the wasi-cli package</p>",
        "id": 412196323,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910768
    },
    {
        "content": "<p>i'd advise not using wasi-logging if you can avoid it</p>",
        "id": 412196344,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> should i still use the interface to be \"compatible\" or just use my own variation anyhow?</p>",
        "id": 412196446,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704910807
    },
    {
        "content": "<p>since, afaik, there are no runtimes providing it, nor any client code thats using it</p>",
        "id": 412196449,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910807
    },
    {
        "content": "<p>ah interesting.</p>",
        "id": 412196501,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704910820
    },
    {
        "content": "<p>oh, so if you are looking for some logging solution, and you were just going to define something just like wasi-logging on your own and provide both the host and client side</p>",
        "id": 412196529,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910831
    },
    {
        "content": "<p>then sure, use wasi-logging as the definition of that interface if it suits your needs</p>",
        "id": 412196550,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910841
    },
    {
        "content": "<p>but be aware that is forging new ground, you'll be essentially the first person to do so (since very early prototypes which we since set aside to take other paths, anyway)</p>",
        "id": 412196622,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704910874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> yep. ok. yeah, i'll go that route. That was my first intention Let me try that again (that was my first route) and see if i don't run into issues. </p>\n<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> haha. yep. no worries. Thanks for at least re-affirming my thoughts/etc. Having you and <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> help out is awesome. thanks beyond thanks tbh.</p>",
        "id": 412196813,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704910936
    },
    {
        "content": "<p>sure thing, happy to help</p>",
        "id": 412197076,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704911058
    },
    {
        "content": "<p>ok, so the lifetime error I run into:</p>\n<div class=\"codehilite\" data-code-language=\"package\"><pre><span></span><code>/// Basic helpers interface.\ninterface helpers {\n    record time {\n        seconds: u64,\n        milliseconds: u32,\n        nanoseconds: u32,\n    }\n\n    /// Get current time in sub-seconds.\n    get-current-time: func() -&gt; time;\n    /// Basic `print` helper.\n    print: func(msg: string);\n}\n\nworld imports {\n    import wasi:logging/logging;\n    import helpers;\n}\n</code></pre></div>\n<p>is how i'm trying to bring in the current logging interface into my own embedding.</p>",
        "id": 412197435,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911212
    },
    {
        "content": "<p>then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">logging</span>::<span class=\"n\">logging</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Log a message.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">log</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">level</span>: <span class=\"nc\">wasi</span>::<span class=\"n\">logging</span>::<span class=\"n\">logging</span>::<span class=\"n\">Level</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">context</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">message</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{message}\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 412197518,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911245
    },
    {
        "content": "<p>throws me</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0195</span><span class=\"p\">]</span>: <span class=\"nc\">lifetime</span><span class=\"w\"> </span><span class=\"n\">parameters</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">log</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">homestar</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">32</span>:<span class=\"mi\">11</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"k\">fn</span> <span class=\"nf\">log</span><span class=\"p\">(</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">lifetimes</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">trait</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"w\">  </span>::: <span class=\"nc\">homestar</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">28</span>:<span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">world</span>: <span class=\"s\">\"imports\"</span><span class=\"p\">,</span>\n<span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">tracing</span>: <span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">async</span>: <span class=\"nc\">true</span>\n<span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">-</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">__lifetimes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">trait</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"err\">```</span>\n</code></pre></div>",
        "id": 412197581,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911270
    },
    {
        "content": "<p>so maybe how i'm using the import is wrong here?</p>",
        "id": 412197664,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911288
    },
    {
        "content": "<p>the other implements work fine.</p>",
        "id": 412197685,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911298
    },
    {
        "content": "<p>I would like to use the interface off deps this way without inlining it within my custom wit.</p>",
        "id": 412197723,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911322
    },
    {
        "content": "<p>i expect that the wasmtime::component::bindgen! impl you are using with wasi-logging has <code>async: true</code> turned on, and you need to decorate your impl with <code>#[async_trait]</code> at the top and make it an <code>async fn log</code></p>",
        "id": 412197726,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704911323
    },
    {
        "content": "<p>yeah, I think it errore'd w/ that as well, one sec.</p>",
        "id": 412197758,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911339
    },
    {
        "content": "<p>ah yeah, nvm, dum, dum, that does work. <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> :).Actually another issue crept up, but one for me to fix. Thank you.</p>",
        "id": 412197860,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587442\">Zeeshan Lakhani</span> has marked this topic as resolved.</p>",
        "id": 412197917,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704911406
    },
    {
        "content": "<p>got it all working. thanks again <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> (not sure what i missed adding async before tbh, but always updating code haha).</p>",
        "id": 412198397,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704911634
    },
    {
        "content": "<p>np that one is an uncharacteristic bad error message from rustc</p>",
        "id": 412202366,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704913339
    }
]