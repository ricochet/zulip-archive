[
    {
        "content": "<p>Hey peers, <br>\nI recently got into cranelift and feel stuck on a question:</p>\n<p>How does one compile and use a record type in cranelift?<br>\nsay I come across this and need to compile it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Planet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// just another struct</span>\n<span class=\"w\">   </span><span class=\"n\">x</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">y</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>How do I pass the structure as an argument to some function?</li>\n<li>How do I initialize a structure of type Planet?</li>\n<li>How do I access some field?</li>\n<li>How do I set some fields?</li>\n</ul>\n<p>Thanks a lot for reading through this!</p>",
        "id": 248873477,
        "sender_full_name": "Nils Martel",
        "timestamp": 1628527124
    },
    {
        "content": "<p>Cranelift doesn't have any types other than booleans, integers, floats and vectors. If you want to store more complex data you will need to decide on a memory layout for the data and manually store each piece in memory.</p>",
        "id": 248873711,
        "sender_full_name": "bjorn3",
        "timestamp": 1628527239
    },
    {
        "content": "<p>Cranelift ir is not a high level language. It is much closer to machine code executed by your cpu.</p>",
        "id": 248873800,
        "sender_full_name": "bjorn3",
        "timestamp": 1628527274
    },
    {
        "content": "<p>Well, I havent figured out how to create vectors either. would you help me a little by explaining?</p>\n<p>Also thank you for the insanely quick answer. This is breathtaking</p>",
        "id": 248876576,
        "sender_full_name": "Nils Martel",
        "timestamp": 1628528577
    },
    {
        "content": "<p>Vectors are similar. You can use <code>imul_imm</code> to calculate the offset of the element in the vector. Growing it will require calling <code>realloc</code> or something like that.</p>",
        "id": 248876784,
        "sender_full_name": "bjorn3",
        "timestamp": 1628528652
    },
    {
        "content": "<p>I see. So if I want to pass structs to functions, I need to use vectors? (a type like [u8; 64]) ?<br>\nOr do I just always use pointers?</p>",
        "id": 248877953,
        "sender_full_name": "Nils Martel",
        "timestamp": 1628529137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312249\">@Nils Martel</span> the usual way is just to use pointers</p>",
        "id": 248878349,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628529302
    },
    {
        "content": "<p>For temporary storage, if your compiler needs to build a struct in memory in order to pass it, you can add a stackslot to the function then <code>stack_addr</code> to get the address</p>",
        "id": 248878420,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628529334
    },
    {
        "content": "<p>and compute addresses from that base using offsets depending on how you choose to lay out the struct</p>",
        "id": 248878466,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628529353
    },
    {
        "content": "<p>Thank you for pointing me in this direction :)</p>\n<p>What is the usual way of requirering heap memory? Directly calling _malloc_?</p>",
        "id": 248878634,
        "sender_full_name": "Nils Martel",
        "timestamp": 1628529417
    },
    {
        "content": "<p>It depends on how you want to build the runtime for your system! Cranelift can generate a call to any library function you like, including <code>malloc</code>, or it can allocate space in the stack frame (the stackslot I mentioned above)</p>",
        "id": 248878726,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628529456
    },
    {
        "content": "<p>IMHO it's slightly unusual for a compiler to emit calls to <code>malloc</code> directly; some higher-level languages that are garbage-collected would allocate some heap for temporary objects then let the GC free it, but <code>malloc</code> is a lower level (in that it requires an explicit <code>free</code>)</p>",
        "id": 248878884,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628529507
    },
    {
        "content": "<p>But Cranelift proper doesn't care what you call; it will happily do the call then emit loads/stores as you generate them</p>",
        "id": 248878920,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628529524
    },
    {
        "content": "<p>This is great news!<br>\nFor now I'm mostly interested in native stuff, which would require libc.</p>\n<p>The more questions I ask, the more I realize all the stuff that I do not know.</p>\n<p>Doesn't rustc call <code>malloc</code> and <code>free</code> directly? (sure, the user can choose the implementation)</p>\n<p>Also: How do I call arbitrary C libraries during compilation?<br>\nI've seen an example aclling into libc by simply emmiting some <code>puts</code> function call. but I didn't found any reference about how it knew where to find the <code>puts</code> function. Does it work the same way for any other c- library (maybe GTK, etc.)?</p>",
        "id": 248879384,
        "sender_full_name": "Nils Martel",
        "timestamp": 1628529705
    },
    {
        "content": "<blockquote>\n<p>Doesn't rustc call malloc and free directly? (sure, the user can choose the implementation)</p>\n</blockquote>\n<p>The user code does. In addition rust is not a managed language like javascript, java or wasm.</p>\n<blockquote>\n<p>Also: How do I call arbitrary C libraries during compilation?</p>\n</blockquote>\n<p>You can use <code>module.declare_function(\"puts\", Linkage::Import, &amp;sig)</code> to get a reference to the <code>puts</code> function. If you don't define it anywhere, it will likely resolve to the puts from libc. This works the same for any other function and any other library you link to.</p>",
        "id": 248879848,
        "sender_full_name": "bjorn3",
        "timestamp": 1628529876
    },
    {
        "content": "<p>This is crazy helpful, thank you :)</p>",
        "id": 248880192,
        "sender_full_name": "Nils Martel",
        "timestamp": 1628530031
    }
]