[
    {
        "content": "<p>g:\\dev\\test&gt;lldb.exe -- z:\\dev\\wasm\\wasmtime\\target\\release\\wasmtime.exe -g .\\test.wasm<br>\n(lldb) target create \"z:\\\\dev\\\\wasm\\\\wasmtime\\\\target\\\\release\\\\wasmtime.exe\"<br>\nCurrent executable set to 'z:\\dev\\wasm\\wasmtime\\target\\release\\wasmtime.exe' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-g\" \".\\\\test.wasm\"<br>\n(lldb) b test.cpp:7<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 13668 launched: 'z:\\dev\\wasm\\wasmtime\\target\\release\\wasmtime.exe' (x86_64)<br>\n1 location added to breakpoint 1<br>\nProcess 13668 stopped</p>\n<ul>\n<li>thread #1, stop reason = breakpoint 1.1<br>\n    frame #0: 0x000001db729814a2 JIT(0x1db74680080)`Thing::Thing(this=(__ptr = 131088), i=5) at test.cpp:9:13<br>\n   6    public:<br>\n   7       Thing(int i)<br>\n   8       {<br>\n-&gt; 9          m_i = i;<br>\n   10         my_global = i;<br>\n   11   //      m_i ++;<br>\n   12      }<br>\n(lldb) fr v<br>\n(WasmtimeVMContext *) __vmctx = 0x000001db72a50080<br>\n(WebAssemblyPtrWrapper&lt;Thing&gt;) this = (__ptr = 131088)<br>\n(int) i = 5<br>\n(lldb) p my_global<br>\nerror: expression failed to parse:<br>\nerror: &lt;user expression 0&gt;:1:1: use of undeclared identifier 'my_global'<br>\nmy_global<br>\n^ <a href=\"/user_uploads/15107/9DnJKvUeXssIjal60QicCXjz/test.cpp\">test.cpp</a></li>\n</ul>",
        "id": 256974400,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633890224
    },
    {
        "content": "<p>when I query globals from the lldb API it seems I'm getting another copy of the locals. something's not quite right.</p>",
        "id": 256974567,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633890398
    },
    {
        "content": "<p>also tried </p>\n<p>fr v -g</p>\n<p>same result.</p>",
        "id": 256974606,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633890455
    },
    {
        "content": "<p>Tried native equivalent as sanity check. <br>\ncorrect lldb command : fr v -g</p>\n<p>(lldb) b test.cpp:7 <br>\nBreakpoint 1: where = test`Thing::Thing(int) + 15 at test.cpp:8:13, address = 0x00000000004011ef<br>\n(lldb) r<br>\nProcess 10008 launched: '/home/x/dev/test/test' (x86_64)<br>\nProcess 10008 stopped</p>\n<ul>\n<li>thread #1, name = 'test', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00000000004011ef test`Thing::Thing(this=0x0000000000416eb0, i=5) at test.cpp:8:13<br>\n   5    public:<br>\n   6       Thing(int i) <br>\n   7       { <br>\n-&gt; 8          m_i = i; <br>\n   9          my_global = m_i;<br>\n   10           //m_i++;<br>\n   11      }<br>\n(lldb) fr v<br>\n(Thing *) this = 0x0000000000416eb0<br>\n(int) i = 5<br>\n(lldb) fr v -g<br>\n(Thing *) this = 0x0000000000416eb0<br>\n(int) i = 5<br>\n(unsigned long) ::my_global = 0</li>\n</ul>",
        "id": 256975827,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633891663
    },
    {
        "content": "<p>Into the code :</p>\n<p><a href=\"http://utils.rs\">utils.rs</a> : append_vmctx_info generates DWARF DW_TAG_variable which should expose globals, if any.<br>\nThat calls build_with_locals in <a href=\"http://expression.rs\">expression.rs</a> to  form a list of things to add to the dwarf data.<br>\nAn inspect of build_with_locals in <a href=\"http://expression.rs\">expression.rs</a> seems to show locals only are built - no mention of globals.<br>\n... which is what we're seeing in the debugger.</p>\n<p>Hence initial conclusion is : wasmtime debug mode emits only locals. Global variable export implementation needs to be added.</p>\n<p>Disclaimer: rust noob, dwarf noob :)</p>\n<p>If I've missed anything, misunderstood, etc. correction welcome. First reading of the code.</p>",
        "id": 257029251,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633940431
    },
    {
        "content": "<p>Severity: High. Standard debugging pipeline not complete until this has been resolved.</p>",
        "id": 257031366,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633941547
    },
    {
        "content": "<p>we've got parse_global_section in wasmtime\\cranelift\\wasm\\src\\sections_translator.rs</p>\n<p>perhaps can work from that.</p>",
        "id": 257032458,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633942157
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3439\">https://github.com/bytecodealliance/wasmtime/issues/3439</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3439\" style=\"background-image: url(https://opengraph.githubassets.com/4714d10138da4335a5e2d105d90ef37e11a9bd1619da02c80936532d0ef623e9/bytecodealliance/wasmtime/issues/3439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3439\" title=\"Cranelift: Debugging JIT dwarf data is missing global variables. 路 Issue #3439 路 bytecodealliance/wasmtime\">Cranelift: Debugging JIT dwarf data is missing global variables. 路 Issue #3439 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">test.cpp int my_global = 4; class Thing { public: Thing(int i) { m_i = i + my_global; } int m_i; }; int main() { auto thing = new Thing(5); return thing-&gt;m_i == 9; } Steps to Reproduce Compile a...</div></div></div>",
        "id": 257037441,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633944872
    },
    {
        "content": "<p>(lldb) fr v -g -l </p>\n<p>to print globals only, apparently. (globals, no locals).</p>",
        "id": 257045068,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633949033
    },
    {
        "content": "<p>pushing my luck, but if I could get a little assistance from a senior dev on this, it'd be appreciated. I'll stumble through it eventually but someone already familiar with rust/dwarf/jit interface could likely close it faster with less chance of errors. not really a noob task. maybe that's a cop out.</p>\n<p>then we have a solid debug pipeline afaik. needs more testing but that's the last issue I'm aware of.</p>",
        "id": 257112614,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633983920
    },
    {
        "content": "<p>lldb issue - teemperor is reviewer. we get on ok, so maybe I have to throw my lldb is the test argument over there :)</p>",
        "id": 257115861,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633985896
    },
    {
        "content": "<p>lldb aside, continued. I guess they want something like this to test it.<br>\n<a href=\"https://llvm.org/docs/DebuggingJITedCode.html\">https://llvm.org/docs/DebuggingJITedCode.html</a><br>\nthen its all within their tech tree. on it when globals issue resolved. essentials first.</p>",
        "id": 257116669,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633986357
    },
    {
        "content": "<p>k, we get the rust noob version :)  failing at first fence :)  can't inspect with debugger coz stuff that's being injected is 2 debuggers deep (maybe lldb intercept can be disabled), so its logging. have log on screen with RUST_LOG=trace<br>\nfar too much I don't want to see &amp; doesn't seem to be a filter other than knowing specific module you want to monitor which I don't yet.</p>\n<p>put following in wasmtime\\crates\\cranelift\\src\\debug\\transform\\utils.rs</p>\n<p>warn!(\"TODO: inject_globals_here.\");</p>\n<p>// Build vmctx_die's DW_TAG_subprogram for <code>set</code> method</p>\n<p>Won't even compile :( How do I place logging there plz. Can implement custom file logger if I need to, but first step is to ask if there's a standard way I can log from there. Input welcome :)</p>",
        "id": 257188999,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634039196
    },
    {
        "content": "<p>seems a simple println works from there :) progress. if at glacial pace.</p>",
        "id": 257190278,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634039924
    },
    {
        "content": "<p>shouldn't be there. learning my way around.</p>",
        "id": 257194518,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634041969
    },
    {
        "content": "<p>generate_simulated_dwarf is entrypoint.</p>",
        "id": 257198631,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634043758
    },
    {
        "content": "<p>DebugInfoData doesn't seem to contain globals. only locals.</p>",
        "id": 257200008,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634044372
    },
    {
        "content": "<p>DebugPubNames/Types is globals ?</p>",
        "id": 257217348,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634050830
    },
    {
        "content": "<p>to answer my own q previously, dwarf 4 is generated. says so in transform_dwarf - irrelevant aside.</p>",
        "id": 257227188,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634054474
    },
    {
        "content": "<p>only a slight oversight :)</p>",
        "id": 257232428,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634056424
    },
    {
        "content": "<p>there's a GlobalVariable thing I've just come across in cranelift. <br>\nis that set incorrectly somehow &amp; hence responsible for behaviour we're observing ?</p>",
        "id": 257234920,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634057406
    },
    {
        "content": "<p>.</p>",
        "id": 257239090,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634059065
    },
    {
        "content": "<p>make_global in <a href=\"http://func_environ.rs\">func_environ.rs</a> is called a few times with apparently zero index each time.</p>",
        "id": 257249390,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634063082
    },
    {
        "content": "<p>but as that's passed a function, I don't see how it's globals. so <a href=\"http://confused.com\">confused.com</a></p>",
        "id": 257249521,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634063143
    },
    {
        "content": "<p>to cover statics maybe.</p>",
        "id": 257249950,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634063327
    },
    {
        "content": "<p>whatever it is, same index each time seems odd. disclaimer: don't understand the code yet, might be fine.</p>",
        "id": 257250180,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634063412
    },
    {
        "content": "<p>that's driven by Operator::GlobalSet which apparently is called thru set_global which doesn't show up in a source tree search so still confused.</p>",
        "id": 257251912,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064160
    },
    {
        "content": "<p>seems right place as there's Operator::LocalSet there too. zero index every time sounding fishy, but I don't know how that code is driven.</p>",
        "id": 257252193,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064268
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f7543d3d10fee255a2cd7cbb999191168f55b4aa/cranelift/wasm/src/code_translator.rs#L173\">https://github.com/bytecodealliance/wasmtime/blob/f7543d3d10fee255a2cd7cbb999191168f55b4aa/cranelift/wasm/src/code_translator.rs#L173</a></p>\n<p>Dropped in </p>\n<p>println!(\"Operator::GlobalSet {} \", global_index);</p>\n<p>0 each time.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/f7543d3d10fee255a2cd7cbb999191168f55b4aa/cranelift/wasm/src/code_translator.rs#L173\" style=\"background-image: url(https://opengraph.githubassets.com/f1c330f6943073356014ac4633bb937731a0c5bea4a9e574734535c77bc4c982/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f7543d3d10fee255a2cd7cbb999191168f55b4aa/cranelift/wasm/src/code_translator.rs#L173\" title=\"wasmtime/code_translator.rs at f7543d3d10fee255a2cd7cbb999191168f55b4aa 路 bytecodealliance/wasmtime\">wasmtime/code_translator.rs at f7543d3d10fee255a2cd7cbb999191168f55b4aa 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/code_translator.rs at f7543d3d10fee255a2cd7cbb999191168f55b4aa 路 bytecodealliance/wasmtime</div></div></div>",
        "id": 257252550,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064414
    },
    {
        "content": "<p>not called thru set_global, misread. that's some kind of built in I dont understand as rust noob.</p>",
        "id": 257252837,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064538
    },
    {
        "content": "<p>don't know what calls that stuff.</p>",
        "id": 257252854,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064546
    },
    {
        "content": "<p>does rust have an diagnostics magic I can drop in to say who called me, plz ? can't run debugger there without modding lldb for passthrough. will skip that if possible.</p>",
        "id": 257253035,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064612
    },
    {
        "content": "<p>actually, lldb might get me that on linux. native debug broken on windows bcoz pe/pdb code incomplete.</p>",
        "id": 257253115,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634064651
    },
    {
        "content": "<p>from my simple test.cpp program, I get : <a href=\"https://pastebin.com/rNE64Xa9\">https://pastebin.com/rNE64Xa9</a></p>\n<p>GlobalSet index always 0</p>\n<p>Q1: What's calling that ?<br>\nQ2: Should it always be 0 ?  Does that sound right ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/rNE64Xa9\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/rNE64Xa9\" title=\"Operator::LocalSet 0Operator::LocalSet 2Operator::LocalSet 0Operator::Glob - Pastebin.com\">Operator::LocalSet 0Operator::LocalSet 2Operator::LocalSet 0Operator::Glob - Pastebin.com</a></div><div class=\"message_embed_description\">Pastebin.com is the number one paste tool since 2002. Pastebin is a website where you can store text online for a set period of time.</div></div></div>",
        "id": 257254382,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634065175
    },
    {
        "content": "<p>Operator::LocalSet 0 <br>\nOperator::LocalSet 2 <br>\nOperator::LocalSet 1 <br>\nOperator::LocalSet 0 <br>\nOperator::LocalSet 0 <br>\nOperator::LocalSet 1 <br>\nOperator::LocalSet 2 <br>\nOperator::GlobalSet 0 <br>\nOperator::GlobalSet 0 <br>\nOperator::LocalSet 2 <br>\nProcess 16832 stopped</p>\n<ul>\n<li>thread #10, name = 'wasmtime', stop reason = signal SIGTRAP<br>\n    frame #0: 0x00005555561867d5 wasmtime<code>cranelift_wasm::code_translator::translate_operator::h8f0891072d4134db + 68245\nwasmtime</code>cranelift_wasm::code_translator::translate_operator::h8f0891072d4134db:<br>\n-&gt;  0x5555561867d5 &lt;+68245&gt;: movq   0x1f10(%rsp), %rsi<br>\n    0x5555561867dd &lt;+68253&gt;: movq   0x1f38(%rsp), %rax<br>\n    0x5555561867e5 &lt;+68261&gt;: movq   (%rax), %rdx<br>\n    0x5555561867e8 &lt;+68264&gt;: movq   0x21e0(%rsp), %rax<br>\n  thread #12, name = 'wasmtime', stop reason = signal SIGTRAP<br>\n    frame #0: 0x00005555561867d5 wasmtime<code>cranelift_wasm::code_translator::translate_operator::h8f0891072d4134db + 68245\nwasmtime</code>cranelift_wasm::code_translator::translate_operator::h8f0891072d4134db:<br>\n-&gt;  0x5555561867d5 &lt;+68245&gt;: movq   0x1f10(%rsp), %rsi<br>\n    0x5555561867dd &lt;+68253&gt;: movq   0x1f38(%rsp), %rax<br>\n    0x5555561867e5 &lt;+68261&gt;: movq   (%rax), %rdx<br>\n    0x5555561867e8 &lt;+68264&gt;: movq   0x21e0(%rsp), %rax</li>\n</ul>\n<p>with :</p>\n<p>Operator::GlobalSet { global_index } =&gt; {</p>\n<div class=\"codehilite\"><pre><span></span><code>        println!(&quot;Operator::GlobalSet {} &quot;, global_index);\n            unsafe { std::intrinsics::breakpoint(); }\n</code></pre></div>",
        "id": 257259564,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634067316
    },
    {
        "content": "<p>index always 0 sounds wrong to me, but still getting head around what's going on.</p>",
        "id": 257259871,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634067467
    },
    {
        "content": "<p>added second global to test program to cover case where that index should always be zero. with 2 globals it can't be. I think. <br>\nbut still always zero. so perhaps root cause.</p>",
        "id": 257262514,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634068613
    },
    {
        "content": "<p>&amp; even if we only get 1, we're not seeing it at the other end, so still confused.</p>",
        "id": 257262610,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634068653
    },
    {
        "content": "<p>behaviour explained by incomplete code. so maybe that's just how it is. global index bug, not noticed bcoz globals not translated.</p>",
        "id": 257263834,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634069104
    },
    {
        "content": "<p>Added some more debug.</p>\n<p>In GlobalSet</p>\n<div class=\"codehilite\"><pre><span></span><code>               + println!(&quot; builder.ins().store flags:{} val:{} addr:{} offset:{}&quot;, flags, val, addr, offset);\n                builder.ins().store(flags, val, addr, offset);\n</code></pre></div>\n\n<p>dunno if you can do that, but anyway. seems a little more variety so perhaps ok. unsure where that ends up yet.</p>\n<p>Operator::GlobalSet 0<br>\nOperator::GlobalSet 0<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v10 addr:v11 offset:+176<br>\n builder.ins().store flags: notrap aligned val:v10 addr:v11 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v10 addr:v11 offset:+176<br>\n builder.ins().store flags: notrap aligned val:v7 addr:v8 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v34 addr:v35 offset:+176<br>\nOperator::GlobalSet 0<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v26 addr:v27 offset:+176<br>\n builder.ins().store flags: notrap aligned val:v34 addr:v35 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v93 addr:v94 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v8 addr:v9 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v8 addr:v9 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v53 addr:v54 offset:+176<br>\nOperator::GlobalSet 0<br>\n builder.ins().store flags: notrap aligned val:v2316 addr:v2317 offset:+176</p>",
        "id": 257267163,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634070573
    },
    {
        "content": "<p>made one a float, everything still comes thru as i32. so not a clue what's going on yet.</p>",
        "id": 257268145,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634070971
    },
    {
        "content": "<p>silence is weird. don't some folks know how this stuff works ?</p>",
        "id": 257268202,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634071004
    },
    {
        "content": "<p>switched from cpp test to absolute basic c test.</p>\n<p>test.c</p>\n<p>float my_global_float = 2.5f;</p>\n<p>int main() {<br>\n   return (int)(my_global_float);<br>\n}</p>\n<p>nothing coming thru,  so the globals I was seeing were probably runtime built-in stuff.</p>",
        "id": 257318541,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634107363
    },
    {
        "content": "<p>&amp; dwarf-dump:</p>\n<p>.\\test.wasm:    file format WASM</p>\n<p>.debug_info contents:<br>\n0x00000000: Compile Unit: length = 0x0000005a, format = DWARF32, version = 0x0004, abbr_offset = 0x0000, addr_size = 0x04 (next unit at 0x0000005e)</p>\n<p>0x0000000b: DW_TAG_compile_unit<br>\n              DW_AT_producer    (\"clang version 11.0.0 (<a href=\"https://github.com/llvm/llvm-project\">https://github.com/llvm/llvm-project</a> 176249bd6732a8044d457092ed932768724a6f06)\")<br>\n              DW_AT_language    (DW_LANG_C99)<br>\n              DW_AT_name    (\"test.c\")<br>\n              DW_AT_stmt_list   (0x00000000)<br>\n              DW_AT_comp_dir    (\"g:\\\\dev\\\\test\")<br>\n              DW_AT_low_pc  (0x0000002f)<br>\n              DW_AT_high_pc (0x000000a4)</p>\n<p>0x00000026:   DW_TAG_variable<br>\n                DW_AT_name  (\"my_global_float\")<br>\n                DW_AT_type  (0x00000037 \"float\")<br>\n                DW_AT_external  (true)<br>\n                DW_AT_decl_file (\"g:\\dev\\test\\.\\test.c\")<br>\n                DW_AT_decl_line (1)<br>\n                DW_AT_location  (DW_OP_addr 0x400)</p>\n<p>0x00000037:   DW_TAG_base_type<br>\n                DW_AT_name  (\"float\")<br>\n                DW_AT_encoding  (DW_ATE_float)<br>\n                DW_AT_byte_size (0x04)</p>\n<p>0x0000003e:   DW_TAG_base_type<br>\n                DW_AT_name  (\"int\")<br>\n                DW_AT_encoding  (DW_ATE_signed)<br>\n                DW_AT_byte_size (0x04)</p>\n<p>0x00000045:   DW_TAG_subprogram<br>\n                DW_AT_low_pc    (0x0000002f)<br>\n                DW_AT_high_pc   (0x000000a4)<br>\n                DW_AT_frame_base    (DW_OP_WASM_location 0x0 0x2, DW_OP_stack_value)<br>\n                DW_AT_name  (\"main\")<br>\n                DW_AT_decl_file (\"g:\\dev\\test\\.\\test.c\")<br>\n                DW_AT_decl_line (3)<br>\n                DW_AT_type  (0x0000003e \"int\")<br>\n                DW_AT_external  (true)</p>\n<p>0x0000005d:   NULL</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project\" style=\"background-image: url(https://opengraph.githubassets.com/b4b1ab4e1f68f3758f83fdc1f47887249f635fafef1e30addf1eea262cc266ad/llvm/llvm-project)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project\" title=\"GitHub - llvm/llvm-project: The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at http://reviews.llvm.org.\">GitHub - llvm/llvm-project: The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at http://reviews.llvm.org.</a></div><div class=\"message_embed_description\">The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at...</div></div></div>",
        "id": 257318633,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634107443
    },
    {
        "content": "<p>that test too simple apparently, even with opts off its eliminated global somehow.</p>\n<p>so went with test.c :</p>\n<p>float my_global_float = 2.5f;</p>\n<p>float my_func()<br>\n{<br>\n    return my_global_float;<br>\n}</p>\n<p>int main() <br>\n{<br>\n   return (int) my_func();<br>\n}</p>\n<p>which generates this :</p>\n<p>GlobalVariable::Memory gv:gv3 ty:i32<br>\n builder.ins().store flags: notrap aligned val:v9 addr:v10 offset:+96<br>\nOperator::GlobalSet 0<br>\nGlobalVariable::Memory gv:gv3 ty:i32<br>\n builder.ins().store flags: notrap aligned val:v25 addr:v26 offset:+96</p>",
        "id": 257320846,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634109024
    },
    {
        "content": "<p>2 global references, both i32. can't see how that's right.</p>",
        "id": 257320919,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634109092
    },
    {
        "content": "<p>workaround: to inspect globals in debugger, load a reference into a local &amp; inspect that. compile works, debug currently has a gap.</p>",
        "id": 257325915,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634112074
    },
    {
        "content": "<p>yury - you're quiet :) any advice ?</p>",
        "id": 257353853,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634126995
    },
    {
        "content": "<p>@mozilla - can we get a tiny bit of yury time on this, please (if he's willing) ? its quite hard.</p>",
        "id": 257354270,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634127186
    },
    {
        "content": "<p>fixing this effectively unlocks wasmtime as far as I can see. aside from exceptions, which can wait (our use case anyway), we can go into production with this once debugging is solid. arguably now, though prefer it not to be wonky.</p>",
        "id": 257354456,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634127278
    },
    {
        "content": "<p>we run with wasmtime in production, hopefully prove it solid, then it drops into firefox later. everyone wins.</p>",
        "id": 257354575,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634127343
    },
    {
        "content": "<p>last thing stopping this being wasmtime 1.0 unless there are any other mvp gaps I'm unaware of.</p>",
        "id": 257355358,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634127696
    },
    {
        "content": "<p>&amp; if I'm understanding correctly, appears gap is all the way into cranelift which isn't parsing debug globals correctly.  perhaps requires multiple seniors to resolve.</p>",
        "id": 257356135,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634128004
    },
    {
        "content": "<p>even further into basics. can we run a standalone cranelift test to determine what its doing with debug parsing of globals. surprised this hasn't been tested, but its like that with all bugs - the thing you didn't think about.</p>",
        "id": 257357123,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634128454
    },
    {
        "content": "<p>to get a sane debug/devel environment for this, seems we need a test program that loads a wasm then calls build_artifacts on it.<br>\nthat should detect &amp; reference globals.</p>",
        "id": 257360338,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634129898
    },
    {
        "content": "<p>all this : <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Global.html\">https://docs.wasmtime.dev/api/wasmtime/struct.Global.html</a></p>\n<p>so perhaps gap is smaller than feared. we'll see :)</p>\n<p>can step thru a rust test app now have decoupled from lldb so can see what's going on.</p>",
        "id": 257390724,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634140786
    },
    {
        "content": "<p>A little progress.<br>\nPut following wasmtime/rust API test program together, based on introductory sample.</p>\n<p><a href=\"https://pastebin.com/VLqtSedR\">https://pastebin.com/VLqtSedR</a></p>\n<p>test.c</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"n\">my_global</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">mytest</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">my_global</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_global</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The global is located :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/VLqtSedR\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/VLqtSedR\" title=\"use anyhow::Result;use wasmtime::*;fn main() -&gt; Result&lt;()&gt; {    let - Pastebin.com\">use anyhow::Result;use wasmtime::*;fn main() -&gt; Result&lt;()&gt; {    let - Pastebin.com</a></div><div class=\"message_embed_description\">Pastebin.com is the number one paste tool since 2002. Pastebin is a website where you can store text online for a set period of time.</div></div></div>",
        "id": 257392478,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634141389
    },
    {
        "content": "<p>so ... ummm ... cranelift exposes, so dwarf conversion issue. if only we had an expert on that we could borrow for an hour or two with many beers owed :)</p>",
        "id": 257407736,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634147183
    },
    {
        "content": "<p>could be an export issue. had to export-all for this test app,  haven't done so previously so will check if the issue.</p>",
        "id": 257408491,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634147468
    },
    {
        "content": "<p>is that the issue ? is cranelift only passing on exported globals ? </p>\n<p>that's valid for standard runtime but not for debug mode. debug mode should get everything.</p>",
        "id": 257409298,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634147775
    },
    {
        "content": "<p>my test app has debug mode set.</p>",
        "id": 257409865,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634147981
    },
    {
        "content": "<p>early in testing but cranelift seems to propagate all with clang -Wl,--export-all <br>\nwithout it, not getting even the function.<br>\nso export-all appears to be cranelift workaround. whether it goes anywhere from there, don't yet know.</p>",
        "id": 257412253,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634148916
    },
    {
        "content": "<p>this needs verifying. to avoid us going off on wrong tangents.</p>",
        "id": 257412405,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634148977
    },
    {
        "content": "<p>bit early as still not 100% sure but anyhow, here's test files : <a href=\"http://advance-software.com/misc/wasmtime_test.zip\">http://advance-software.com/misc/wasmtime_test.zip</a></p>\n<p>wasm shell scipts a bit off as resolving on windows, but is simple stuff. a hardwired path to fix up.</p>",
        "id": 257413957,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634149577
    },
    {
        "content": "<p>extract same level as wasmtime, not inside that tree.</p>",
        "id": 257413999,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634149598
    },
    {
        "content": "<p>path is Module::from_file in <a href=\"http://main.rs\">main.rs</a> to where your test wasm is.</p>",
        "id": 257414552,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634149811
    },
    {
        "content": "<p>weird. if I export anything, can't get lldb to hit a breakpoint. so workaround won't work, so gotta figure out why its doing that.</p>",
        "id": 257516553,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634209533
    },
    {
        "content": "<p>looking at wasmtime\\crates\\environ\\src\\module_environ.rs</p>\n<p>Payload::ExportSection(exports) - noticing my global ends up in there.</p>\n<p>next up, see if I can follow it into Payload::GlobalSection(globals) </p>\n<p>&amp; then figure out how we hook into that so we don't have export constraint.</p>",
        "id": 257540575,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634220283
    },
    {
        "content": "<p>still no fan of rust. looking forwards to getting back to c++ :)</p>",
        "id": 257541550,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634220643
    },
    {
        "content": "<p>any fixes for variable is optimized away (visual studio, rust debugging), following \"cargo build\" which is debug config, plz.</p>\n<p>the friction to new amazing system is bits are still wonky.</p>",
        "id": 257549926,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634223635
    },
    {
        "content": "<p><a href=\"https://www.reddit.com/r/rust/comments/fr7s7f/whats_the_latest_on_overoptimization_in_debug/\">https://www.reddit.com/r/rust/comments/fr7s7f/whats_the_latest_on_overoptimization_in_debug/</a></p>\n<p>seems a known issue. an aside. can work around it. will use my own debugger gui soon :)</p>",
        "id": 257551411,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634224176
    },
    {
        "content": "<p>in build_artifacts , engine.config().tunables</p>\n<p>parse_wasm_debuginfo is false. that seems wrong.</p>",
        "id": 257559745,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634227208
    },
    {
        "content": "<p>experimental - might not be this, we'll see.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">debug_info</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">enable</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tunables</span><span class=\"p\">.</span><span class=\"n\">generate_native_debuginfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// ADV_SW_PATCH[experimental]:</span>\n<span class=\"w\">        </span><span class=\"c1\">// Required so we are able to emit globals - have to parse them so we know what to emit :)</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tunables</span><span class=\"p\">.</span><span class=\"n\">parse_wasm_debuginfo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 257561012,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634227675
    },
    {
        "content": "<p>not seeing test app global float getting parsed even with that. think there's implementation missing but don't fully comprehend the parser yet.</p>",
        "id": 257565308,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634229355
    },
    {
        "content": "<p>we've got this thing :</p>\n<p>use wasmparser::{<br>\n    self, Data, DataKind, DataSectionReader, Element, ElementItem, ElementItems, ElementKind,<br>\n    ElementSectionReader, Export, ExportSectionReader, ExternalKind, FunctionSectionReader,<br>\n    GlobalSectionReader, GlobalType, ImportSectionEntryType, ImportSectionReader,<br>\n    MemorySectionReader, MemoryType, NameSectionReader, Naming, Operator, TableSectionReader,<br>\n    TableType, TagSectionReader, TagType, TypeDef, TypeSectionReader,<br>\n};</p>",
        "id": 257565738,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634229527
    },
    {
        "content": "<p>&amp; this which we want registering in .debug_info section.</p>\n<p>0x00000026:   DW_TAG_variable [2]  <br>\n                DW_AT_name [DW_FORM_strp]   ( .debug_str[0x00000078] = \"my_global\")<br>\n                DW_AT_type [DW_FORM_ref4]   (cu + 0x0037 =&gt; {0x00000037} \"float\")<br>\n                DW_AT_external [DW_FORM_flag_present]   (true)<br>\n                DW_AT_decl_file [DW_FORM_data1] (\"g:\\dev\\test\\.\\test.c\")<br>\n                DW_AT_decl_line [DW_FORM_data1] (1)<br>\n                DW_AT_location [DW_FORM_exprloc]    (DW_OP_addr 0x400)</p>",
        "id": 257565885,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634229600
    },
    {
        "content": "<p>I'm not clear if that should run through GlobalSectionReader or TagSectionReader.</p>",
        "id": 257566034,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634229657
    },
    {
        "content": "<p>or some other.</p>",
        "id": 257566096,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634229684
    },
    {
        "content": "<p>slow, but I think we're making progress. not so scary now, just working thru it.</p>",
        "id": 257566934,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634230015
    },
    {
        "content": "<p>debug_info section containing the variable we want is handled via register_dwarf_section, via Payload::CustomSection.</p>",
        "id": 257578128,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634234357
    },
    {
        "content": "<p>that ends up in ModuleEnvironment : self.results[0].debuginfo.dwarf.debug_info.debug_info_section</p>\n<p>&amp; isn't parsed - just reference to the section location &amp; length  - at that point anyway.</p>\n<p>I guess we follow that up to the emit. unsure how we morph from wasm dwarf to target dwarf but it must be in there somewhere as the rest does it.</p>",
        "id": 257579685,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634234944
    },
    {
        "content": "<p>has_unparsed_debuginfo flag is badly named. the debuginfo section isn't parsed, its just registered.</p>",
        "id": 257580322,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634235214
    },
    {
        "content": "<p>so ... we can parse the debug info section, even if it means writing that code from scratch, we can somehow map from wasm addresses to target addresses &amp; we can emit dwarf. so we can do this :)</p>",
        "id": 257582359,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634236082
    },
    {
        "content": "<p>&amp; we've got this thing in use already : <a href=\"https://github.com/gimli-rs/gimli\">https://github.com/gimli-rs/gimli</a></p>\n<p>Loc is terrible abbreviation in that as initially thought it meant local when it in fact means location. code doesn't run faster with shorter variable names :) just write out the whole word.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/gimli-rs/gimli\" style=\"background-image: url(https://opengraph.githubassets.com/465da2dae2e4eb6b382959b2537db2831776ee67df9d545a178d10903793e75c/gimli-rs/gimli)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/gimli-rs/gimli\" title=\"GitHub - gimli-rs/gimli: A blazing fast library for consuming the DWARF debugging format\">GitHub - gimli-rs/gimli: A blazing fast library for consuming the DWARF debugging format</a></div><div class=\"message_embed_description\">A blazing fast library for consuming the DWARF debugging format - GitHub - gimli-rs/gimli: A blazing fast library for consuming the DWARF debugging format</div></div></div>",
        "id": 257584060,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634236740
    },
    {
        "content": "<p>can gimli decode debuginfo section to extract global DW_TAG_variable entities ?<br>\nif not, we can implement as necessary.</p>",
        "id": 257589811,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634239063
    },
    {
        "content": "<p><a href=\"https://github.com/gimli-rs/gimli\">https://github.com/gimli-rs/gimli</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/gimli-rs/gimli\" style=\"background-image: url(https://opengraph.githubassets.com/465da2dae2e4eb6b382959b2537db2831776ee67df9d545a178d10903793e75c/gimli-rs/gimli)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/gimli-rs/gimli\" title=\"GitHub - gimli-rs/gimli: A blazing fast library for consuming the DWARF debugging format\">GitHub - gimli-rs/gimli: A blazing fast library for consuming the DWARF debugging format</a></div><div class=\"message_embed_description\">A blazing fast library for consuming the DWARF debugging format - GitHub - gimli-rs/gimli: A blazing fast library for consuming the DWARF debugging format</div></div></div>",
        "id": 257589851,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634239079
    },
    {
        "content": "<p>:)</p>\n<p><a href=\"https://github.com/gimli-rs/gimli/blob/master/examples/simple_line.rs\">https://github.com/gimli-rs/gimli/blob/master/examples/simple_line.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/gimli-rs/gimli/blob/master/examples/simple_line.rs\" style=\"background-image: url(https://opengraph.githubassets.com/465da2dae2e4eb6b382959b2537db2831776ee67df9d545a178d10903793e75c/gimli-rs/gimli)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/gimli-rs/gimli/blob/master/examples/simple_line.rs\" title=\"gimli/simple_line.rs at master 路 gimli-rs/gimli\">gimli/simple_line.rs at master 路 gimli-rs/gimli</a></div><div class=\"message_embed_description\">A blazing fast library for consuming the DWARF debugging format - gimli/simple_line.rs at master 路 gimli-rs/gimli</div></div></div>",
        "id": 257590061,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634239150
    },
    {
        "content": "<p>that's me on hold until next week with this as real life calls, but feel free to carry on if the mood takes anyone :)</p>",
        "id": 257590366,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634239248
    },
    {
        "content": "<p>looks like you need to load &amp; parse each top level DW_TAG_variable yourself, but that's not so hard.</p>",
        "id": 257591904,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634239843
    },
    {
        "content": "<p>function statics are also technically globals but assuming function locals deliver those. should verify.</p>",
        "id": 257592180,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634239974
    },
    {
        "content": "<p>&amp; that load/parse should probably end up in gimli so its there for the next guy.</p>",
        "id": 257592411,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634240064
    },
    {
        "content": "<p>back to it, weekend off cancelled. this needs nailing anyway.</p>",
        "id": 257680556,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634296258
    },
    {
        "content": "<p>if a global is at some memory location in input wasm, is it at same location in emitted wasm ? that'd make it easy &amp; can't think why it'd need to be different unless there are different alignment constraints.</p>",
        "id": 257686373,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634299335
    },
    {
        "content": "<p>emit_dwarf takes a debug_info so if I can figure out where the globals section is going, it feeds into that &amp; almost done.</p>",
        "id": 257688227,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634300315
    },
    {
        "content": "<p>have no idea what GlobalSection stuff is all about. our global doesn't end up there. seems to be used for some kind of built ins only.</p>",
        "id": 257690273,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634301356
    },
    {
        "content": "<p>this code is really light on comments. too much so imo.</p>",
        "id": 257690366,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634301397
    }
]