[
    {
        "content": "<p>Hello, I am curious if wasmtime would allow me to use WebAssembly instead of LLVM or another bytecode for a programming language I am working on. Is it possible to use wasmtime with 64-bit WebAssembly, so 64-bit memory addresses? <a href=\"https://github.com/WebAssembly/memory64\">https://github.com/WebAssembly/memory64</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/memory64\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/830a68c28261344c7ea344040aa47236926aa048/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336532633637663534613635386139346236383532326264313661376366323862303432613436333862323438393933343365393030353830653765383335312f576562417373656d626c792f6d656d6f72793634&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/memory64\" title=\"GitHub - WebAssembly/memory64: Memory with 64-bit indexes\">GitHub - WebAssembly/memory64: Memory with 64-bit indexes</a></div><div class=\"message_embed_description\">Memory with 64-bit indexes. Contribute to WebAssembly/memory64 development by creating an account on GitHub.</div></div></div>",
        "id": 439282375,
        "sender_full_name": "Aaron Franke",
        "timestamp": 1715974966
    },
    {
        "content": "<p>Short answer: yes memory64 works, it's off-by-default but you can turn it on with <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_memory64\">this knob</a></p>\n<p>Longer answer: you're probably going to have a tough time writing applications here. WASI for example does not work with memory64 at this time (with Wasmtime at least), so you'd have to \"start from nothing\" in terms of what Wasmtime provides out-of-the-box. If you were planning on implementing your own host runtime hooks and such then that won't be an issue, but if you were planning on using WASI that might be a bit of a speed bump.</p>\n<p>It's also worth nothing that the C/Rust toolchains don't have precompiled versions of 64-bit wasm (at least not that I know of). Both should have basic support at least but it's not super widely used so you might run into speed bumps along the way</p>",
        "id": 439287565,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715977700
    },
    {
        "content": "<p>Host runtime hooks as in providing an API for the language to call into the system, like interacting with files? I intend for this to be a language embedded into things, so it would have manual bindings.</p>",
        "id": 439295666,
        "sender_full_name": "Aaron Franke",
        "timestamp": 1715982270
    },
    {
        "content": "<p>It's worth understanding the tradeoffs here too: 64-bit addressing implies manual bounds-checks as well (which are slow, 30-50% penalty), while the default configuration for wasm32 uses virtual-memory tricks (a reserved 4GiB section of address space in the host 64-bit process) to make Wasm memory accesses almost as fast as native. (\"almost\" because the address-mode selection is a little less rich: one has to add in the heap base as well.)</p>\n<p>I've seen several times folks reach for wasm64 by analogy to native platforms, where the 32-&gt;64 bit upgrade was a clear win: 64-bit-wide registers and basic operations, and on some platforms more registers too (x86-64 upgraded 8-&gt;16 GPRs, ARM32 to aarch64 upgraded 16-&gt;32 GPRs). It's worth noting that wasm32 already has builtin 64-bit datatypes and 64-bit operators; and when compiled by a Wasm engine on a 64-bit host can make use of all the host registers; the only difference is the address width, hence the addressable range. In some cases wasm32 benchmarks can actually be slightly <em>faster</em> than native on 64-bit hosts because of less cache pressure / memory bandwidth: 32-bit addresses are more compact.</p>\n<p>Finally it's worth noting that interactions with the host will require moving memory into/out of the Wasm heap anyway (i.e. passing host pointers directly is not really a thing) so the host address size shouldn't figure into the tradeoff.</p>\n<p>So all that said: is the reason for wasm64 here that you expect the size of the Wasm guest heap to exceed 4GiB (or want to support that case)? Or some other reason?</p>",
        "id": 439392782,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1716078047
    },
    {
        "content": "<p>There is not a specific reason like a need for a specific application to use lots of memory. The problem is that I want this to be general-purpose and do not want to be artificially limited, to allow users to make any app with this language. Actually, I am attempting to rewrite an existing programming language which already supports 64-bit addresses, so it would be an unacceptable downgrade to use 32-bit addresses, I want this to serve as a drop-in replacement for the original language.</p>",
        "id": 439409962,
        "sender_full_name": "Aaron Franke",
        "timestamp": 1716095959
    },
    {
        "content": "<p>I expect future processors will probably gain special instructions to support wasm bounds-checked load/store/call-indirect without the slow-down.</p>",
        "id": 439421473,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1716107902
    },
    {
        "content": "<p>Another idea, what about something like 48-bit? That might allow skipping the check while also being a higher limit than is required for all modern systems. It could be stored in a 64-bit integer for alignment and then bitwise-AND'd to 48 bits.</p>",
        "id": 439425921,
        "sender_full_name": "Aaron Franke",
        "timestamp": 1716112543
    },
    {
        "content": "<p>well, x86_64 <a href=\"https://en.wikipedia.org/wiki/Intel_5-level_paging\">currently supports 57-bit addresses</a>, and it seems very plausible for new supercomputers to need &gt;=64-bit addresses in the next few decades. This is part of why RISC-V already defined a (not yet stable) 128-bit pointer size ISA.</p>",
        "id": 439427328,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1716113927
    },
    {
        "content": "<p>I see; I would only point out then that to avoid “artificial limits” it’s probably best to avoid wasm64, which will cause issues with runtimes (not yet supported everywhere), Wasm tooling (same), and interop with 99% of existing ecosystem. The pragmatic approach today if you’re looking for adoption is to use wasm32; the ecosystem hasn’t transitioned yet.</p>\n<p>Anyway that’s all I can provide so all the best to you!</p>",
        "id": 439444960,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1716131264
    },
    {
        "content": "<p>Chris, what if I really did want the &gt;4GiB guest heap, and only really that?</p>",
        "id": 439611959,
        "sender_full_name": "Ralph",
        "timestamp": 1716223577
    },
    {
        "content": "<p>Then in that exact case, wasm64 is the answer!</p>",
        "id": 439615897,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1716224915
    },
    {
        "content": "<p>I suspect that 64-bit addressing would be much more useful in conjunction with non-contiguous memory (i.e. free-form page mapping)</p>",
        "id": 439620026,
        "sender_full_name": "David Lloyd",
        "timestamp": 1716226356
    },
    {
        "content": "<p>multi-memory with contiguous-only allocation is strongly reminiscent of 80286 protected mode</p>",
        "id": 439620104,
        "sender_full_name": "David Lloyd",
        "timestamp": 1716226386
    }
]