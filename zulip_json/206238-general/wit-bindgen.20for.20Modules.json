[
    {
        "content": "<p>Is it possible to use wit-bindgen to generate host and guest bindings for use with non-component WASM (i.e.: plain old modules)?</p>",
        "id": 311901640,
        "sender_full_name": "Amit Prasad",
        "timestamp": 1669234627
    },
    {
        "content": "<p>For the guest bindings, all tookchains presently emit core Wasm modules, plus a custom section that contains the component type information. Wit-component can translate those modules to a component</p>",
        "id": 311936675,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1669260025
    },
    {
        "content": "<p>For host bindings, the answer is more complicated. Wasmtime has a component runtime, so the host bindings generated simply use that. But JavaScript does not have a component runtime, so wit-bindgen emits the JavaScript code that implements one for the given component type</p>",
        "id": 311936769,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1669260099
    },
    {
        "content": "<p>If you want to target another host wasm runtime that doesn’t have a component runtime, you can follow the general way the js host binding generation works to generate host code that uses the Wasm runtime to implement a runtime for that particular component type.</p>",
        "id": 311936895,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1669260201
    },
    {
        "content": "<p>Also just fyi the host generators are moving to new homes, for software engineering reasons. They will still work the same way, they just won’t be used through the wit-bindgen cli <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/395\">https://github.com/bytecodealliance/wit-bindgen/issues/395</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/395\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/36683618112d03c6c5ea2809a15b80afc2b3ef80\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613664346561393061336261356132666263316431313938653566356634363562356631383632633034363637386161306164653237303931313865306138652f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f333935)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/395\" title=\"Spin out host generators into their own repositories · Issue #395 · bytecodealliance/wit-bindgen\">Spin out host generators into their own repositories · Issue #395 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This was discussed at the wit-bindgen meeting last Friday, and after some futher discussion with @pchickey I&#39;ve come up with a proposal which I personally feel is the direction that wit-bindgen...</div></div></div>",
        "id": 311937040,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1669260312
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>. To clarify -- I want to use wit-bindgen with the non-component runtime in Wasmtime, so that I can use WASI (since component WASI is still very WIP). I suppose this isn't straightforward?</p>",
        "id": 311957417,
        "sender_full_name": "Amit Prasad",
        "timestamp": 1669275255
    },
    {
        "content": "<p>Nope this isn’t possible. Sit tight and we will land wasi support as soon as we can</p>",
        "id": 312053094,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1669308373
    }
]