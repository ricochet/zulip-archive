[
    {
        "content": "<p>Hi there, I am doing some research into the possibility of lifting x86 semantics to cranelift IR. I see that there is a lack of intrinsics, however I do see that the IR has x86 specific instructions (x86_pmaddubsw, x86_pmulhrsw, etc..).</p>\n<p>My question is, how difficult would it be to implement a new opcode/Ir operation such as \"CPUID\", \"RDTSC\", or reads/writes to control registers? Is there post already explaining the process of creating new IR operations? I assume ill need to make a new rule for lowering the IR to the native instruction...</p>\n<p>Also i already decided against mcsema, qemu ir, llvm ir, and angr ir. Thanks for your time :)</p>",
        "id": 373595990,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688868999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631007\">@ZwSwapCert</span> could you say a bit more about the overall goal -- do you want to lift x86 to CLIF, maybe do some transforms, then recompile to x86 only (dynamic binary instrumentation-style)? Or do you want to maybe recompile to other targets too (qemu-style)?</p>\n<p>In any case, yes, one can add new opcodes for sure; if the goal is to take x86 semantics from x86 source to x86-only target that may be the lowest-friction approach for you, while if the goal is to work on any target then it may be better to work with existing opcodes. It might be interesting to look at how qemu's tcg or Valgrind's VEX model processor state: something like CPUID is lowered into loads from a \"processor context\" struct that your runtime provides. Anyway, happy to brainstorm more depending on use-case :-)</p>",
        "id": 373728609,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1688916370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/206238-general/topic/.28question.29.20lifting.20x86.20semantics.20to.20cranelift/near/373728609\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"631007\">ZwSwapCert</span> could you say a bit more about the overall goal -- do you want to lift x86 to CLIF, maybe do some transforms, then recompile to x86 only (dynamic binary instrumentation-style)? Or do you want to maybe recompile to other targets too (qemu-style)?</p>\n<p>In any case, yes, one can add new opcodes for sure; if the goal is to take x86 semantics from x86 source to x86-only target that may be the lowest-friction approach for you, while if the goal is to work on any target then it may be better to work with existing opcodes. It might be interesting to look at how qemu's tcg or Valgrind's VEX model processor state: something like CPUID is lowered into loads from a \"processor context\" struct that your runtime provides. Anyway, happy to brainstorm more depending on use-case :-)</p>\n</blockquote>\n<p>hi there! me and my teams goal is to just focus on x86 for now. </p>\n<p>The reason for this project is: we are building a binary deobfuscation/obfuscation framework. We would like to have a semantic representation of x86 in an IR format which we can then run simplification (or obfuscation passes).  We really really like cranelift IR and its egraph pass system. To us this is perfect because we are going to do mixed boolean arithmetic obfuscation and the pass system is really nice for this. Additionally in our recursive decent disassembler we could lift to cranelift IR then when we cant understand where control flow is going (Say a jmp reg) we can use the lifted IR to compute the possible destinations (useful for deobfuscating virtual  machine based obfuscation like vmprotect and themida).</p>\n<p>We have spent months researching existing projects and decided that nothing public fit our need. the reason why most public projects dont fit our need is they are attempting to do too much (retarget recompilation). We are just focused on x86 --&gt; ir --&gt; x86.</p>\n<p>Also as a side note: we want to avoid LLVM at all costs because its IR is too abstract... for example its a very big mess in McSema to handle calling external code. (bridge between IR and native). There is a group called <a href=\"http://rev.ng\">rev.ng</a> that is using qemu tcg to llvm ir. They are attempting to make a retargetable recompiler. This is a huge task, as a team we decided we should just focus on x86.</p>\n<p>Heres a list of some of the things are plan to  do:</p>\n<ul>\n<li>lift x86 to cranelift IR</li>\n<li>deobfuscate/obfuscate </li>\n<li>lower IR to x86 and insert it back into the same ELF/PE binary (cranelift seems to have good support for referencing external symbols)</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://rev.ng\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4892cf95dd70e1254c714018f39cb514447a8a32\\/68747470733a2f2f7265762e6e672f696d616765732f7265766e672d762e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://rev.ng\" title=\"rev.ng\">rev.ng</a></div></div></div>",
        "id": 373761483,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688928190
    },
    {
        "content": "<p>Now there are some dilemmas me and my team are thinking about.</p>\n<ul>\n<li>\n<p>intrinsics (CPUID, RDTSC, READMSR/WRITEMSR, reads/writes to cr3/cr4/cr8, xgetbv, etc). My team is willing to contribute by creating the lowering code required for each of these IR instructions.</p>\n</li>\n<li>\n<p>function parameters... how to preserve these when lifting and lowering...? For example we could assume rcx, rdx, r8, and r9 are free to  use after every function call, but how do we handle stack parameters? tough question.</p>\n</li>\n<li>\n<p>cpu flags! other IR's get around this by creating a variable for rflags and after each instruction updating the individual bits in the flag register. This gets extremely messy though because each instruction creates a bunch of flags computation. Maybe my team can extend cranelift to have some sort of \"rflags\" IR representation. Not sure.</p>\n</li>\n</ul>",
        "id": 373764933,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688929455
    },
    {
        "content": "<p>Cranelift used to have instructions which produced or consumed flags, but we removed them in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5406\">https://github.com/bytecodealliance/wasmtime/pull/5406</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5406\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3a7de8fe4f9e22cba1054b4d0cf74a5daf14f586\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636135383136363636616666313264323631663666373936383563356534326236323964333837363939643036393965373462363938316531376132666437312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35343036)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5406\" title=\"Remove IFLAGS/FFLAGS types by uweigand 路 Pull Request #5406 路 bytecodealliance/wasmtime\">Remove IFLAGS/FFLAGS types by uweigand 路 Pull Request #5406 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">All instructions using the CPU flags types (IFLAGS/FFLAGS) were already removed.  This patch completes the cleanup by removing all remaining instructions that define values of CPU flags types, as w...</div></div></div>",
        "id": 373778847,
        "sender_full_name": "bjorn3",
        "timestamp": 1688935584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631007\">@ZwSwapCert</span> sounds really interesting!</p>\n<blockquote>\n<p>We would like to have a semantic representation of x86 in an IR format which we can then run simplification (or obfuscation passes).</p>\n</blockquote>\n<p>I think Cranelift could be made to work for this purpose, partially, but one high-level distinction I'd want to make is that the IR is not \"total\" in the sense that it can represent all possible code. You brought up ABI details and I think this is a good concrete example: Cranelift handles the ABI for you, and the semantics of the IR are that of functions with args and returns. There's no concept of \"whatever was in rdi on entry\" because CLIF doesn't have a representation of rdi, or the machine stack at the word level either, for that matter.</p>\n<p>The way that I've seen ISA-to-IR-to-ISA work in the context of qemu and Valgrind is that a level of indirection is inserted: the translated code doesn't refer to first-class values that are lowered back to machine registers, but rather refers to a \"CPU context\" and does loads and stores of fields on that CPU context that represent registers. At that level,  you <em>can</em> fully represent any possible x86 instruction semantics, because loads and stores to memory offsets are something you can do in CLIF. Likewise for flags -- this is \"just another field\".</p>\n<p>So actually to be totally honest I think that trying to <em>directly</em> represent x86 in CLIF in a way that it can be roundtripped, for arbitrary code, is going to run into too many impedance mismatches to be a reasonable approach: Cranelift manages the ABI, does register allocation, has its own ideas about flags, etc., such that one can't really write CLIF to produce exactly the original x86 for any x86 code. For that one would really want an IR that is explicitly a list of x86 instructions...</p>",
        "id": 373793756,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1688945696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/206238-general/topic/.28question.29.20lifting.20x86.20semantics.20to.20cranelift/near/373793756\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"631007\">ZwSwapCert</span> sounds really interesting!</p>\n<blockquote>\n<p>We would like to have a semantic representation of x86 in an IR format which we can then run simplification (or obfuscation passes).</p>\n</blockquote>\n<p>I think Cranelift could be made to work for this purpose, partially, but one high-level distinction I'd want to make is that the IR is not \"total\" in the sense that it can represent all possible code. You brought up ABI details and I think this is a good concrete example: Cranelift handles the ABI for you, and the semantics of the IR are that of functions with args and returns. There's no concept of \"whatever was in rdi on entry\" because CLIF doesn't have a representation of rdi, or the machine stack at the word level either, for that matter.</p>\n<p>The way that I've seen ISA-to-IR-to-ISA work in the context of qemu and Valgrind is that a level of indirection is inserted: the translated code doesn't refer to first-class values that are lowered back to machine registers, but rather refers to a \"CPU context\" and does loads and stores of fields on that CPU context that represent registers. At that level,  you <em>can</em> fully represent any possible x86 instruction semantics, because loads and stores to memory offsets are something you can do in CLIF. Likewise for flags -- this is \"just another field\".</p>\n<p>So actually to be totally honest I think that trying to <em>directly</em> represent x86 in CLIF in a way that it can be roundtripped, for arbitrary code, is going to run into too many impedance mismatches to be a reasonable approach: Cranelift manages the ABI, does register allocation, has its own ideas about flags, etc., such that one can't really write CLIF to produce exactly the original x86 for any x86 code. For that one would really want an IR that is explicitly a list of x86 instructions...</p>\n</blockquote>\n<p>My only concern with using a cpu context is the amount of bloat/unreadable code that will be generated. Its something ive done before when devirtualizing vmprotect binaries. the result is a mess and nothing near the original x86.  McSema uses this concept of a cpu context and they emulate x86 semantics with LLVM IR operations (including flags). However if you compile this code and look at it in a disassembler its a mess. </p>\n<p>There exists private tooling which can do this lifting, optimizing, and recompiling and the output is near identical to the original code (deobfucation/removal of vmprotect for example). Im assuming these private tools do not use a 'cpu context' structure in IR. This private tooling is also being used for obfuscation. My team wants to create something like it if not better without having to create an entire compiler framework. The private tools ive seen do not use LLVM IR, i think they either made their own entire compiler, ir, and optimization pass system or are using cranelift already. </p>\n<p>As for the ABI, i think we are not too concerned with register usage until it is lowered back to x86. I think i read either yours or someone elses blog post on how you use specific registers for instructions (like div, shr, etc). We could do this same thing for cpuid, rdtsc, etc. As for function parameters... Maybe during the lift (from x86 --&gt; ir) we could do some analysis on the decoded x86 instructions to determine the number of parameters a function call uses? For example if we see rcx,rdx,r8, and r9 written too prior to a CALL instruction we can assume 4 registers are used. If there is a store to RSP+0x28, RSP+0x20 then we know there are 2 stack params. We only care to support windows ABI(s) for now. </p>\n<p>So again, we want to avoid cpu context at all cost, we want to be able to  lift and recompile x86 and have near original instructions. I know its possible and ive seen it with my own eyes.</p>",
        "id": 373808553,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688953540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/.28question.29.20lifting.20x86.20semantics.20to.20cranelift/near/373778847\">said</a>:</p>\n<blockquote>\n<p>Cranelift used to have instructions which produced or consumed flags, but we removed them in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5406\">https://github.com/bytecodealliance/wasmtime/pull/5406</a></p>\n</blockquote>\n<p>Very interesting, ill take a look at this commit/branch to see what was once there. Maybe as a team we can add this back or keep a seperate branch for it.</p>",
        "id": 373808811,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688953672
    },
    {
        "content": "<p>i really like these cpu flags, maybe i will base my project off cranelift when it used to have these cpu flags! :) ^^</p>",
        "id": 373816938,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688957932
    },
    {
        "content": "<p>an issue we might run into however is semantics like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pushfq</span>\n<span class=\"n\">and</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rsp</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">set_some_bit</span>\n<span class=\"n\">popfq</span>\n</code></pre></div>\n<p>Lifting this to IR might be complex... We could do some analysis on the x86 instructions prior to see if this sets a specific flag and then translate that to an IR instruction which sets a flag.</p>",
        "id": 373818003,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688958538
    },
    {
        "content": "<blockquote>\n<p>So again, we want to avoid cpu context at all cost, we want to be able to lift and recompile x86 and have near original instructions. I know its possible and ive seen it with my own eyes.</p>\n</blockquote>\n<p>That's fair, I guess I'm just noting that I strongly suspect you'll run into a bunch of impedance mismatches of the form like your last example. CLIF <em>doesn't have access</em> to notions like the processor stack; fundamentally there is just no encoding for a \"push\" unless you virtualize state into a CPU context and a separate stack. Both Cranelift and the user code you're translating can't both own the stack. (E.g., what do you do with code that stores the stack pointer and restores it? How would you translate an user-thread context-switch routine?) Register constraints will run into serious problems as well because you'll have, e.g., a known value in each of the 16 GPRs in the original code, but you can't constraint values into all 16 on a call instruction. Constraints also can't be put in CLIF -- again, it's a different abstraction level.</p>\n<p>Imagine it like the following problem: \"generate C code that, when compiled by gcc, produces exactly these x86 instructions\". For an arbitrary x86 sequence, it can't be done. CLIF's abstraction level is closer to C (it has functions, it has arbitrary values that are regalloc'd, it manages the stack for you, it has two-way branches, it has no indirect jump only br_table) than the underlying machine.</p>\n<p>I think you could push this to a point where you pattern-match some forms of \"well-behaved\" x86 back up to CLIF, just as you could write a decompiler from x86 to C; but in full generality, code with arbitrary jumps and register and stack manipulations simply can't be expressed in a way that will compile back to the original. I wish you all the best if you want to try though!</p>",
        "id": 373820920,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1688960150
    },
    {
        "content": "<p>Thanks for your time :)</p>\n<p>I think if we choose to use cranelift we will rework lots of it to help us solve these issues... Im really trying to avoid creating my own entire compiler framework because its a hell of a lot of work.</p>",
        "id": 373823302,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688961336
    },
    {
        "content": "<p>For what it's worth, it sounds like what you need is a 1-to-1 mapping from x86 to an IR -- that shouldn't be <em>too</em> complex, insofar at least as it doesn't require instruction selection / lowering or regalloc or ABI code, which are three of the gnarliest areas of Cranelift</p>",
        "id": 373825183,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1688962364
    },
    {
        "content": "<p>And it may be possible to reuse parts of cranelift for this ir like cranelift_codegen::egraph (not currently exported from cranelift_codegen) for egraph optimizations and cranelift-isle for pattern matching in the uplifting, lowering and optimization passes.</p>",
        "id": 373853057,
        "sender_full_name": "bjorn3",
        "timestamp": 1688973620
    },
    {
        "content": "<p>we will continue to research into cranelift. I think we could rework some specific parts of it to achieve our goal. Maybe we just fully commit, lift all semantics and have it messy... then use rewrite passes to simplify known patterns (like flag usage) into the CLIR equal. Additionally use passes to uncover function parameters, remove lifted x86 prolog/epilogs. Essentially lift --&gt; reduce..</p>",
        "id": 373868378,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688977523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/.28question.29.20lifting.20x86.20semantics.20to.20cranelift/near/373853057\">said</a>:</p>\n<blockquote>\n<p>And it may be possible to reuse parts of cranelift for this ir like cranelift_codegen::egraph (not currently exported from cranelift_codegen) for egraph optimizations and cranelift-isle for pattern matching in the uplifting, lowering and optimization passes.</p>\n</blockquote>\n<p>also quick question, is the ISLE used for lowering or also generating CLIR?</p>",
        "id": 373868692,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688977588
    },
    {
        "content": "<p>ISLE is used for lowering cranelift ir to the target specific ir on which regalloc runs. It is also used for the optimization rules of cranelift_codegen::egraph. ISLE isn't used for producing cranelift ir. For that you have to use the <code>FuncBuilder</code> api.</p>",
        "id": 373880816,
        "sender_full_name": "bjorn3",
        "timestamp": 1688980107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/.28question.29.20lifting.20x86.20semantics.20to.20cranelift/near/373880816\">said</a>:</p>\n<blockquote>\n<p>ISLE is used for lowering cranelift ir to the target specific ir on which regalloc runs. It is also used for the optimization rules of cranelift_codegen::egraph. ISLE isn't used for producing cranelift ir. For that you have to use the <code>FuncBuilder</code> api.</p>\n</blockquote>\n<p>oh ok thanks for the clarification.</p>",
        "id": 373883440,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688980632
    },
    {
        "content": "<p>after further consulting my team, we have decided that we really like cranelift and we are going to use a cpu context structure to represent cpu registers and flags. We think that getting our hands dirty will also further educate us on the framework itself too.</p>\n<p>Our focus now is using cranelift ir for its pass system to obfuscate code. Once we learn more about the framework we can attempt to change it.</p>",
        "id": 373884145,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688980778
    },
    {
        "content": "<p>our plan is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">declare</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cpu</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">stubs</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">push</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">registers</span><span class=\"w\"> </span><span class=\"n\">onto</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">then</span>:\n\n<span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rsp</span>\n<span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">generated_function</span>\n</code></pre></div>",
        "id": 373884976,
        "sender_full_name": "ZwSwapCert",
        "timestamp": 1688980927
    }
]