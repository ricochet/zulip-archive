[
    {
        "content": "<p>Is there a plan to implement 64-bit table in wasmtime?</p>\n<p><a href=\"https://github.com/WebAssembly/memory64/issues/51\">table64</a> was added to the memory64 proposal.</p>\n<p>The tracking issue doesn't have an entry for wasmtime implementation.</p>\n<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>\n<p>I saw your <a href=\"https://github.com/WebAssembly/memory64/issues/51#issuecomment-2093956963\">comment</a> about wasmtime. </p>\n<p>And in wasmtime source code, I noticed you recently committed <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3c8bb26441b5e48fc20106d20c435a4f47fcfba4/crates/types/src/lib.rs#L1614\">this</a> which add an error for unsupported 64-bit table type.</p>\n<p>I would like to help if it is needed.</p>\n<p>P.S. The Wasm CG F2F meeting is going to poll for memory64 phase 4. I'm wondering if this effort to support table64 in wasmtime will help.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/memory64/issues/51\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8dd2b098c0abf3e1f05fd62827faf9dd1184d54b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393830366164343838363038343831343661313366326232653966373836393566396439393137356465376666343861336238316161386136343238343664392f576562417373656d626c792f6d656d6f727936342f6973737565732f3531&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/memory64/issues/51\" title=\"Implement table64 extension  · Issue #51 · WebAssembly/memory64\">Implement table64 extension  · Issue #51 · WebAssembly/memory64</a></div><div class=\"message_embed_description\">Now that #46 is decided we need get this extension implemented in various places: Overview Spec interpreter #53 Spec text Resolve #55 External places: wabt (WebAssembly/wabt#2418) binaryen (WebAsse...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/memory64/issues/51#issuecomment-2093956963\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8dd2b098c0abf3e1f05fd62827faf9dd1184d54b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393830366164343838363038343831343661313366326232653966373836393566396439393137356465376666343861336238316161386136343238343664392f576562417373656d626c792f6d656d6f727936342f6973737565732f3531&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/memory64/issues/51#issuecomment-2093956963\" title=\"Implement table64 extension  · Issue #51 · WebAssembly/memory64\">Implement table64 extension  · Issue #51 · WebAssembly/memory64</a></div><div class=\"message_embed_description\">Now that #46 is decided we need get this extension implemented in various places: Overview Spec interpreter #53 Spec text Resolve #55 External places: wabt (WebAssembly/wabt#2418) binaryen (WebAsse...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3c8bb26441b5e48fc20106d20c435a4f47fcfba4/crates/types/src/lib.rs#L1614\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/92f80ec60850ecdacaa0049d4414e3629633b038/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373335663466623238323263616238373535303465663462633439396265353034303932373364653836336437323265643033626562626565383866636465362f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3c8bb26441b5e48fc20106d20c435a4f47fcfba4/crates/types/src/lib.rs#L1614\" title=\"wasmtime/crates/types/src/lib.rs at 3c8bb26441b5e48fc20106d20c435a4f47fcfba4 · bytecodealliance/wasmtime\">wasmtime/crates/types/src/lib.rs at 3c8bb26441b5e48fc20106d20c435a4f47fcfba4 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 439866695,
        "sender_full_name": "Linwei Shang",
        "timestamp": 1716312624
    },
    {
        "content": "<p>Hello! I don't believe there's a plan at the moment but I also don't think that anyone would have any objections. It's probably not a whole lot of work but it is a little bit of work to get done though. If you're interested to help out I'd be happy to help point out places I think might need to get updated!</p>\n<p>Wasmtime will want to implement the proposal as it standardizes, we're definitely not intentionally leaving it out! I added an error to explicitly say that table64 isn't supported but that's just because the parsing tooling has support for table64 and I didn't want to block updating the parsing tooling on implementing table64, so the error you linked is just transitionary.</p>\n<p>As for phase 4 advancing, whether or not a Wasmtime implementation will help that is something I'm not sure about. The CG has a strict requirement at the moment that two web engines implement a feature before it reaches phase 4, with emphasis on \"web\" in the \"web engine\". There's never been a time historically where there was, for example, one web engine and Wasmtime's implementation used as a justification to advance a proposal, it's always been two web engines. Given this while I'm sure an implementation in Wasmtime wouldn't hurt advancement to phase 4 it would require consenus on whether to relax the web engine requirement to include an engine like Wasmtime, and I'm at least certain that's not a step that will be taken lightly and would require a good deal of discussion.</p>",
        "id": 439867779,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716312973
    },
    {
        "content": "<blockquote>\n<p>If you're interested to help out I'd be happy to help point out places I think might need to get updated!</p>\n</blockquote>\n<p>Definitely yes. I'm willing to contribute to the wasmtime codebase.</p>",
        "id": 439868788,
        "sender_full_name": "Linwei Shang",
        "timestamp": 1716313317
    },
    {
        "content": "<p>Ok great! I'll write up an issue and post it here today</p>",
        "id": 439868876,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716313339
    },
    {
        "content": "<p>Ok I've jotted some notes on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\">https://github.com/bytecodealliance/wasmtime/issues/8674</a> with some general thoughts too. Let me know if you have any questions though, happy to answer here or there</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/22780fbe397af1cae10ec705d027184d9d6b9196/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343161636537303832623539666532393938346432363736643966356533643065613534623334356230663839303263633536313030306163633632386432612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38363734&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8674\" title=\"Implement the table64 extension to the memory64 proposal · Issue #8674 · bytecodealliance/wasmtime\">Implement the table64 extension to the memory64 proposal · Issue #8674 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">The memory64 proposal was recently updated to include 64-bit tables in addition to 64-bit memories. Support for this extension has been implemented in wasm-tools and the main branch of Wasmtime is ...</div></div></div>",
        "id": 439881697,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716317650
    }
]