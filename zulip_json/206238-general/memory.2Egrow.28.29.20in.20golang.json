[
    {
        "content": "<p>Im having issues getting memory.grow to work in golang api:</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">writeStringToMemory</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">wasmtime</span><span class=\"p\">.</span><span class=\"nx\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">mem</span><span class=\"w\"> </span><span class=\"nx\">wasmtime</span><span class=\"p\">.</span><span class=\"nx\">Memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">s</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">error</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">bytes</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"nb\">byte</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">buf</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"nx\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">// Null-terminate the string</span>\n<span class=\"w\">    </span><span class=\"nx\">allocSize</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nx\">buf</span><span class=\"p\">))</span>\n\n<span class=\"w\">    </span><span class=\"nx\">frame</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">mem</span><span class=\"p\">.</span><span class=\"nx\">UnsafeData</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Calculate required memory in bytes</span>\n<span class=\"w\">    </span><span class=\"nx\">required</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">nextFreeOffset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nx\">allocSize</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Current memory size in bytes (1 page = 64KB = 65536 bytes)</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">PageSize</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">65536</span>\n<span class=\"w\">    </span><span class=\"nx\">currentMemSize</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"nx\">mem</span><span class=\"p\">.</span><span class=\"nx\">Size</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PageSize</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">required</span><span class=\"w\"> </span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">currentMemSize</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// Calculate how many bytes we need to add</span>\n<span class=\"w\">        </span><span class=\"c1\">//bytesNeeded := required - currentMemSize</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Calculate the number of pages needed, rounding up</span>\n<span class=\"w\">        </span><span class=\"c1\">//pagesNeeded := uint64((bytesNeeded + PageSize - 1) / PageSize)</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Grow the memory by the required number of pages</span>\n<span class=\"w\">        </span><span class=\"nx\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">mem</span><span class=\"p\">.</span><span class=\"nx\">Grow</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Errorf</span><span class=\"p\">(</span><span class=\"s\">\"failed to grow memory: %v\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Refresh the frame after growing</span>\n<span class=\"w\">        </span><span class=\"nx\">frame</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">mem</span><span class=\"p\">.</span><span class=\"nx\">UnsafeData</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">)</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Verify the growth was successful</span>\n<span class=\"w\">        </span><span class=\"nx\">newSize</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nb\">int32</span><span class=\"p\">(</span><span class=\"nx\">mem</span><span class=\"p\">.</span><span class=\"nx\">Size</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"nx\">PageSize</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">required</span><span class=\"w\"> </span><span class=\"p\">&gt;</span><span class=\"w\"> </span><span class=\"nx\">newSize</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">fmt</span><span class=\"p\">.</span><span class=\"nx\">Errorf</span><span class=\"p\">(</span><span class=\"s\">\"memory growth unsuccessful: required %d, available %d\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">required</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">newSize</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Write the string bytes into memory at the current offset</span>\n<span class=\"w\">    </span><span class=\"nb\">copy</span><span class=\"p\">(</span><span class=\"nx\">frame</span><span class=\"p\">[</span><span class=\"nx\">nextFreeOffset</span><span class=\"p\">:],</span><span class=\"w\"> </span><span class=\"nx\">buf</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Store the current offset to return</span>\n<span class=\"w\">    </span><span class=\"nx\">currentOffset</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">nextFreeOffset</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Update the allocation pointer</span>\n<span class=\"w\">    </span><span class=\"nx\">nextFreeOffset</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"nx\">allocSize</span>\n\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">currentOffset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">nil</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>the above code compiles etc however it crashes at runtime on <code> mem.Grow(store, 1)</code> for debugging, the issue seems no matter how i do it the mem.grow fails its not clear to me how i assign string arguments as input into a function...can someone explain the correct way i would take a string and be able to pass it to a store. My current way seems wrong somehow:</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nx\">strOffset2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">writeStringToMemory</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">mem</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"second_argument\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"failed to write second string to memory: %v\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create arguments to pass in the call (e.g., argc, argv pointer)</span>\n<span class=\"w\">    </span><span class=\"nx\">args</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"nx\">wasmtime</span><span class=\"p\">.</span><span class=\"nx\">Val</span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">wasmtime</span><span class=\"p\">.</span><span class=\"nx\">ValI32</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span><span class=\"w\">          </span><span class=\"c1\">// argc</span>\n<span class=\"w\">        </span><span class=\"nx\">wasmtime</span><span class=\"p\">.</span><span class=\"nx\">ValI32</span><span class=\"p\">(</span><span class=\"nx\">strOffset1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// argv1 pointer</span>\n<span class=\"w\">        </span><span class=\"nx\">wasmtime</span><span class=\"p\">.</span><span class=\"nx\">ValI32</span><span class=\"p\">(</span><span class=\"nx\">strOffset2</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// argv2 pointer</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nx\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nx\">startFunc</span><span class=\"p\">.</span><span class=\"nx\">Call</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">args</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"kc\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">log</span><span class=\"p\">.</span><span class=\"nx\">Fatalf</span><span class=\"p\">(</span><span class=\"s\">\"failed to call '__main_argc_argv': %v\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 490667666,
        "sender_full_name": "Dean Hunter",
        "timestamp": 1735041120
    },
    {
        "content": "<p>I solved this and posted a minimal sample of how to fix it here : <a href=\"https://github.com/DeanHnter/Wasmtime-HelloWorld/blob/main/main.go\">sample</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/DeanHnter/Wasmtime-HelloWorld/blob/main/main.go\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2f9a2b30cab1973a5bb91bdcc9a1fa6058b686b5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373235333563643030303366656261376638623837376330626463313733303438626130306230626665343566653063623636343231623939643337383433302f4465616e486e7465722f5761736d74696d652d48656c6c6f576f726c64&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/DeanHnter/Wasmtime-HelloWorld/blob/main/main.go\" title=\"Wasmtime-HelloWorld/main.go at main · DeanHnter/Wasmtime-HelloWorld\">Wasmtime-HelloWorld/main.go at main · DeanHnter/Wasmtime-HelloWorld</a></div><div class=\"message_embed_description\">hello world application for wasmtime demonstrating how to run a simple application from WAT - DeanHnter/Wasmtime-HelloWorld</div></div></div>",
        "id": 490709339,
        "sender_full_name": "Dean Hunter",
        "timestamp": 1735069845
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"814907\">@Dean Hunter</span> thanks for this (and posting your fix!) would you mind contributing the working code as an example?</p>\n<p>I'm a bit at a loss on <em>where</em> exactly this should go, but maybe in <code>wasmtime-go</code>? <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> what do you think about that?</p>\n<p>(and Merry Christmas/Happy Holidays to all!)</p>",
        "id": 490733048,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1735092976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> <a href=\"#narrow/channel/206238-general/topic/memory.2Egrow.28.29.20in.20golang/near/490733048\">said</a>:</p>\n<blockquote>\n<p>Hey <span class=\"user-mention silent\" data-user-id=\"814907\">Dean Hunter</span> thanks for this (and posting your fix!) would you mind contributing the working code as an example?</p>\n<p>I'm a bit at a loss on <em>where</em> exactly this should go, but maybe in <code>wasmtime-go</code>? <span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> what do you think about that?</p>\n<p>(and Merry Christmas/Happy Holidays to all!)</p>\n</blockquote>\n<p>Merry Christmas all! Just so i understand you want me to contribute the example on the wasmtime github right? Im happy to do so. Feel free to move this chat to any other channel instead also for others to find.</p>",
        "id": 490787523,
        "sender_full_name": "Dean Hunter",
        "timestamp": 1735140309
    },
    {
        "content": "<p>Yeah I was hoping for some feedback regarding where it should go! There's currently not an <code>examples</code> folder in <code>wasmtime-go</code>, but IMO it'd make a reasonable fit there :) maybe this could go in <a class=\"stream\" data-stream-id=\"217126\" href=\"/#narrow/channel/217126-wasmtime\">#wasmtime</a> ?</p>\n<p>[EDIT] Ah, maybe this can't be moved anymore</p>",
        "id": 490894048,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1735230238
    },
    {
        "content": "<p>For passing strings to guests it's typically recommended that the guest exports a \"malloc style\" function so the host knows where to write the string. As for why Grow itself is failing here I'm not sure, can you paste the error message?</p>",
        "id": 490896139,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1735231813
    }
]