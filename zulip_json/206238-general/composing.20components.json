[
    {
        "content": "<p>For those of you that are experimenting with building  wasm components, there's the <code>wasm-tools compose</code> command for stitching components together into a new component based off what's on your local file system. I've also put up <a href=\"https://wasmbuilder.app\">https://wasmbuilder.app</a> as a simple GUI for wiring up component instances explicitly using a graph representation (see the linked repo for instructions) . Hopefully they'll prove useful for someone</p>",
        "id": 310525429,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668644218
    },
    {
        "content": "<p>The cool thing about the GUI is that itself is implemented using a wasm component (via wit-bindgen's js host bindings); <span aria-label=\"turtle\" class=\"emoji emoji-1f422\" role=\"img\" title=\"turtle\">:turtle:</span> s all the way down</p>",
        "id": 310525758,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668644446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>  Do you expect any difficulties when generating Python bindings of a composed component?<br>\nI ask because when creating Python bindings for a simple (not composed) component, I do not face any problems. When I compose two components to one and do</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>python<span class=\"w\"> </span>-m<span class=\"w\"> </span>wasmtime.bindgen<span class=\"w\"> </span>composed.wasm<span class=\"w\"> </span>--out-dir<span class=\"w\"> </span>python\n</code></pre></div>\n<p>I get an </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>..<span class=\"o\">]</span>\n<span class=\"w\"> </span>wasm<span class=\"w\"> </span>trap:<span class=\"w\"> </span>wasm<span class=\"w\"> </span><span class=\"sb\">`</span>unreachable<span class=\"sb\">`</span><span class=\"w\"> </span>instruction<span class=\"w\"> </span>executed\n<span class=\"o\">[</span>..<span class=\"o\">]</span>\n</code></pre></div>\n<p>I tried to break it down to a minimal example but still I am not completely sure if I have a mistake in the way I use <code>wasm-tools compose</code> (or sth. else)</p>",
        "id": 347508321,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1680811535
    },
    {
        "content": "<p>i'm not familiar with the wasmtime python host bindings, so i  can't say where the problem might lie from just this information</p>",
        "id": 347512152,
        "sender_full_name": "Peter Huene",
        "timestamp": 1680812969
    },
    {
        "content": "<p>i'd test first on a single component that exports a single simple function, maybe returning an easily verifiable string value; then I would compose that component (as the import) with a component that imports an interface with the same simple function and exports the same function, implementing the export in terms of calling the import; to the host, it should return the same expected value</p>",
        "id": 347512620,
        "sender_full_name": "Peter Huene",
        "timestamp": 1680813130
    },
    {
        "content": "<p>the bindings should actually be the same in both cases since the world would just contain the same exported function and no imports</p>",
        "id": 347512749,
        "sender_full_name": "Peter Huene",
        "timestamp": 1680813192
    },
    {
        "content": "<p>so if it doesn't work, i'd expect a bug in wasmtime</p>",
        "id": 347512785,
        "sender_full_name": "Peter Huene",
        "timestamp": 1680813208
    },
    {
        "content": "<p>if that simple case doesn't reproduce, then it's something specific to your component and we'd need to figure out what that trap represents</p>",
        "id": 347513134,
        "sender_full_name": "Peter Huene",
        "timestamp": 1680813326
    },
    {
        "content": "<p>Agreed, I will do so.</p>",
        "id": 347513305,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1680813378
    },
    {
        "content": "<p>I tried to follow your description. The result I get is the same as in my 'real world' project. I assembled this minimal example in <a href=\"https://github.com/Finfalter/wasm-compositions\">this respository</a>. Can you recommend any next steps? Should I open an issue at wasmtime?<br>\nBefore I do so: in case you or anyone recognizes any mistakes in the example, please do not hesitate to leave me a note.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Finfalter/wasm-compositions\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e05e568a74c347e5034d5573c168ae9d4a6a60ca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336637636139353535336539303831373637356634363764613236616465373035363466633836336437353038356262623365383234333331316335663333322f46696e66616c7465722f7761736d2d636f6d706f736974696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Finfalter/wasm-compositions\" title=\"GitHub - Finfalter/wasm-compositions\">GitHub - Finfalter/wasm-compositions</a></div><div class=\"message_embed_description\">Contribute to Finfalter/wasm-compositions development by creating an account on GitHub.</div></div></div>",
        "id": 347751365,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1680904567
    },
    {
        "content": "<p>The issue probably belongs on the wasmtime-py repo; I can take a look on Monday to see what's going on</p>",
        "id": 347757394,
        "sender_full_name": "Peter Huene",
        "timestamp": 1680907808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"595146\">@Christoph Brewing</span>  so the trap is coming from <a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/main/rust/bindgen/src/bindgen.rs#L452\">this line</a>, which indicates that wasmtime-py doesn't yet support handing a composed component that exchanges strings. <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> will likely have more context than I regarding implementation status of wasmtime-py</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py/blob/main/rust/bindgen/src/bindgen.rs#L452\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f62b581fd5ef2b2aa75cdef3b5cfc239bed0647b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633162376435666637363833373137383736643235613662383262353934376333646433393666616666383730663736653439666133366637663861356331392f62797465636f6465616c6c69616e63652f7761736d74696d652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/main/rust/bindgen/src/bindgen.rs#L452\" title=\"wasmtime-py/bindgen.rs at main · bytecodealliance/wasmtime-py\">wasmtime-py/bindgen.rs at main · bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 348281319,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681151951
    },
    {
        "content": "<p>Probably the best bet is to file an issue on the wasmtime-py repo linking to your repro repo</p>",
        "id": 348281492,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681152006
    },
    {
        "content": "<p>oh wow I didn't expect that <code>unimplemented!</code> to get hit for a much longer time!</p>\n<p>That shouldn't be the hardest thing in the world to implement but also not trivial. An issue would be much appreciated!</p>",
        "id": 348281649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681152056
    },
    {
        "content": "<p>also if you're only getting <code>unreachable</code> and no actual error message printed out then that's also a bug I need to fix</p>",
        "id": 348281795,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681152107
    },
    {
        "content": "<p>debug backtrace: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">_trap</span><span class=\"p\">.</span><span class=\"n\">Trap</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x713c7d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">panic_abort</span>::<span class=\"n\">__rust_start_panic</span>::<span class=\"n\">abort</span>::<span class=\"n\">hce48e00841fe5fb9</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">panic_abort</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">83</span>:<span class=\"mi\">17</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">__rust_start_panic</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">panic_abort</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">37</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x7139bb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rust_panic</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">740</span>:<span class=\"mi\">9</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x713982</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">rust_panic_with_hook</span>::<span class=\"n\">h582baf536187e93d</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">710</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x7129fa</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic_handler</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h10886906d9416d04</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">577</span>:<span class=\"mi\">13</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x71295c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_end_short_backtrace</span>::<span class=\"n\">hd12587e8e9c19331</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">sys_common</span><span class=\"o\">/</span><span class=\"n\">backtrace</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">137</span>:<span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>: <span class=\"mh\">0x712ff0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">rust_begin_unwind</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">575</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0x71939c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic_fmt</span>::<span class=\"n\">hb0157e5eb5d13797</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">64</span>:<span class=\"mi\">14</span>\n<span class=\"w\">    </span><span class=\"mi\">7</span>: <span class=\"mh\">0x719905</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span>::<span class=\"n\">hd3974465c50a40c4</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">8460</span><span class=\"n\">ca823e8367a30dda430efda790588b8c84d3</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">114</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">8</span>: <span class=\"mh\">0xbfa99</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">bindgen</span>::<span class=\"n\">bindgen</span>::<span class=\"n\">Instantiator</span>::<span class=\"n\">global_initializer</span>::<span class=\"n\">ha042365cb24e1e89</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">peterhuene</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">452</span>:<span class=\"mi\">49</span>\n<span class=\"w\">    </span><span class=\"mi\">9</span>: <span class=\"mh\">0xbd94d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">bindgen</span>::<span class=\"n\">bindgen</span>::<span class=\"n\">WasmtimePy</span>::<span class=\"n\">instantiate</span>::<span class=\"n\">h9843581d0d938b8c</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">peterhuene</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">232</span>:<span class=\"mi\">13</span>\n<span class=\"w\">   </span><span class=\"mi\">10</span>: <span class=\"mh\">0xbbdc2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">bindgen</span>::<span class=\"n\">bindgen</span>::<span class=\"n\">WasmtimePy</span>::<span class=\"n\">generate</span>::<span class=\"n\">h18c37b18ad175b4f</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">peterhuene</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">150</span>:<span class=\"mi\">9</span>\n<span class=\"w\">   </span><span class=\"mi\">11</span>: <span class=\"mh\">0x5bcc5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">bindgen</span>::<span class=\"n\">bindings</span>::<span class=\"n\">PythonBindings</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">bindgen</span>::<span class=\"n\">bindings</span>::<span class=\"n\">WasmtimePy</span><span class=\"o\">&gt;</span>::<span class=\"n\">generate</span>::<span class=\"n\">h741c41ef729d8851</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">peterhuene</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">48</span>:<span class=\"mi\">13</span>\n<span class=\"w\">   </span><span class=\"mi\">12</span>: <span class=\"mh\">0x6673b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">bindgen</span>::<span class=\"n\">bindings</span>::<span class=\"n\">call_generate</span>::<span class=\"n\">h1e265052a1f06de3</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">peterhuene</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">38</span>:<span class=\"mi\">5</span>\n<span class=\"w\">   </span><span class=\"mi\">13</span>: <span class=\"mh\">0x5bf94</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">generate</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">peterhuene</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bytecodealliance</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">bindgen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">38</span>:<span class=\"mi\">5</span>\n<span class=\"w\">   </span><span class=\"mi\">14</span>: <span class=\"mh\">0x7261ec</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">generate</span><span class=\"p\">.</span><span class=\"n\">command_export</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>",
        "id": 348281867,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681152125
    },
    {
        "content": "<p>in theory the standard Rust <code>unimplemented!()</code> panic message should be printed somewhere, but I may have forgotten to wire that up</p>",
        "id": 348282001,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681152191
    },
    {
        "content": "<p>it does: <code>thread '&lt;unnamed&gt;' panicked at 'not implemented', bindgen/src/bindgen.rs:452:49</code></p>",
        "id": 348282100,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681152226
    },
    {
        "content": "<p>ah ok phew just making sure!</p>",
        "id": 348282892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681152502
    },
    {
        "content": "<p>not that that's an \"official\" error mesage of course, just wanted to make sure that was printed</p>",
        "id": 348282931,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681152517
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> Thank you very much for your investigations! I created <a href=\"https://github.com/bytecodealliance/wasmtime-py/issues/143\">issue no. 143</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py/issues/143\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8b96e0196b16d3602dc2df02a818403f82bb9c62\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303565356332636636663835326239323065663634353065316131613666646532636165366630353866653463303863616166363231393839633736353736302f62797465636f6465616c6c69616e63652f7761736d74696d652d70792f6973737565732f313433)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py/issues/143\" title=\"Handling a composed component that exchanges strings · Issue #143 · bytecodealliance/wasmtime-py\">Handling a composed component that exchanges strings · Issue #143 · bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">As discussed in Zulip &gt; general &gt; composing components, wasmtime-py doesn't yet support handling a composed component that exchanges strings. Since I really would like to use this feature in one of...</div></div></div>",
        "id": 348459607,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1681219090
    },
    {
        "content": "<p>Thanks! I'll write up some more notes on the issue of what to do</p>",
        "id": 348478826,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681223403
    },
    {
        "content": "<p>I am about to compose an application comprising two components but the <strong>dependencies are not found</strong>.</p>\n<p>The <em>lower layer</em>, called <strong>exporter</strong>, provides functionality in terms of <strong>multiple exported interfaces</strong>. The <em>upper layer</em>, called <strong>importer</strong>, is supposed to import lower layer's interfaces, do sth. with them and export another interface. I think of it as a facade like pattern. However, I do not arrive to compose the importer and exporter components:</p>\n<p><strong>[exporter component]</strong></p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>$ wasm-tools component wit exporter_component.wasm\ninterface ione {\n  greet: func(s: string) -&gt; string\n}\n\ninterface itwo {\n  greet: func(s: string) -&gt; string\n}\n\ndefault world exporter {\n  export first: self.ione\n  export second: self.itwo\n}\n</code></pre></div>\n<p><strong>[importer component]</strong></p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>$ wasm-tools component wit importer_component.wasm\ninterface ione {\n  greet: func(s: string) -&gt; string\n}\n\ninterface itwo {\n  greet: func(s: string) -&gt; string\n}\n\ndefault world importer {\n  import first: self.ione\n  import second: self.itwo\n  export something_else\n}\n</code></pre></div>\n<p>When I try to compose</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>compose<span class=\"w\"> </span>-o<span class=\"w\"> </span>composed.wasm<span class=\"w\"> </span>importer_component.wasm<span class=\"w\"> </span>-p<span class=\"w\"> </span>.\ninstance<span class=\"w\"> </span><span class=\"sb\">`</span>first<span class=\"sb\">`</span><span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>imported<span class=\"w\"> </span>because<span class=\"w\"> </span>a<span class=\"w\"> </span>dependency<span class=\"w\"> </span>named<span class=\"w\"> </span><span class=\"sb\">`</span>first<span class=\"sb\">`</span><span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>be<span class=\"w\"> </span>found\ninstance<span class=\"w\"> </span><span class=\"sb\">`</span>second<span class=\"sb\">`</span><span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>imported<span class=\"w\"> </span>because<span class=\"w\"> </span>a<span class=\"w\"> </span>dependency<span class=\"w\"> </span>named<span class=\"w\"> </span><span class=\"sb\">`</span>second<span class=\"sb\">`</span><span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>be<span class=\"w\"> </span>found\nError:<span class=\"w\"> </span>no<span class=\"w\"> </span>dependencies<span class=\"w\"> </span>of<span class=\"w\"> </span>component<span class=\"w\"> </span><span class=\"sb\">`</span>importer_component.wasm<span class=\"sb\">`</span><span class=\"w\"> </span>were<span class=\"w\"> </span>found\n</code></pre></div>\n<p>In the past, I only had a single interface to be imported. I got around the <code>no dependencies .. where found</code> error by naming the exporter according to the exported artefact, e.g. <code>first</code>.</p>\n<p>What do I have to do that the command <code>wasm-tools compose</code> recognizes <strong>multiple</strong> exports?</p>",
        "id": 349334463,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1681469477
    },
    {
        "content": "<p>By default, <code>wasm-compose</code> looks for components with a filename matching the import name to satisfy an individual import; with this more complicated linking, you'll need to author a config file to feed the tool, which explicitly wires up the <code>first</code> and <code>second</code> exports from <code>exporter_component</code> to the instantiation arguments of <code>importer_component</code>. The config file syntax is documented <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-compose/CONFIG.md\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-compose/CONFIG.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4ed259d3d03d6ed0f623b46485bd72dc20b610c4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643930353830366634326665613961663864376530373330393434663263313436356564373063393331653062316365653863323061363933643835643134352f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-compose/CONFIG.md\" title=\"wasm-tools/CONFIG.md at main · bytecodealliance/wasm-tools\">wasm-tools/CONFIG.md at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 350015835,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681495128
    },
    {
        "content": "<p>you can also use <a href=\"https://wasmbuilder.app\">https://wasmbuilder.app</a> to quickly wire these things up manually in a composition</p>",
        "id": 350015945,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681495161
    },
    {
        "content": "<p>Excellent, that works! The following config file seems to do the trick:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">importer_component.wasm</span>\n<span class=\"w\">  </span><span class=\"nt\">first</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">exporter_component.wasm</span>\n<span class=\"w\">  </span><span class=\"nt\">second</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">exporter_component.wasm</span>\n</code></pre></div>\n<p>Right, I have tried your super convenient service .. was just thinking about an integration pipeline and so I am pretty glad to have checked this path as well.</p>",
        "id": 350036912,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1681502607
    },
    {
        "content": "<p>I believe that config will create two different instances of the exporter component, though. there's a way to create a single instance of it and explicitly tell the composer to use an export from that instance as an instantiation argument for the root instance</p>",
        "id": 350048050,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681506986
    },
    {
        "content": "<p>Something  like:</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code><span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">exporter</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">exporter_component.wasm</span>\n\n<span class=\"nt\">instantiations</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nt\">$input</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nt\">arguments</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"nt\">first</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">exporter</span>\n<span class=\"w\">        </span><span class=\"nt\">export</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">first</span>\n<span class=\"w\">      </span><span class=\"nt\">second</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nt\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">exporter</span>\n<span class=\"w\">        </span><span class=\"nt\">export</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">second</span>\n</code></pre></div>",
        "id": 350048321,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681507121
    },
    {
        "content": "<p>i believe that will create a single instance of the exporter component, if that's desired</p>",
        "id": 350048389,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681507154
    }
]