[
    {
        "content": "<p>Hi community, I have a question. If my C project contains assembly code (i.e, .S files), can I using Clang to compile my C project into WASM? Any help will be appreciated!</p>\n<p>Best,</p>",
        "id": 435463022,
        "sender_full_name": "Dennis Zhang",
        "timestamp": 1714077125
    },
    {
        "content": "<p>you can link <code>.S</code> files into Wasm binaries with <code>lld</code> (and therefore I assume with clang) but the <code>.S</code> file needs to be using the wasm text format, not e.g. x86 assembly</p>",
        "id": 435471241,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714080786
    },
    {
        "content": "<p>You first have to convert the <code>.S</code> file to a wasm object file using an assembler. Lld doesn't directly accept assembly code.</p>",
        "id": 435550089,
        "sender_full_name": "bjorn3",
        "timestamp": 1714123909
    },
    {
        "content": "<p>Thanks so much for the responds! I am really appreciated. BTW, could you guys provide some links that I can take a look of the wasm assembly text format?</p>",
        "id": 435598814,
        "sender_full_name": "Dennis Zhang",
        "timestamp": 1714142036
    },
    {
        "content": "<p><a href=\"https://webassembly.github.io/spec/core/text/index.html\">https://webassembly.github.io/spec/core/text/index.html</a> is the specification of the text format</p>\n<p>you can use <code>wasm-tools print</code> and <code>wasm-tools parse</code> to assemble and disassemble: <a href=\"http://github.com/bytecodealliance/wasm-tools\">github.com/bytecodealliance/wasm-tools</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/506420abf8237bfe09ec027c867815694b741ec0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616533383139356433353139363562663634663133633535656238313331313062356535626362313566383161366235636364376138663133393464343963362f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules\">GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules</div></div></div>",
        "id": 435619970,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714148823
    },
    {
        "content": "<p>the official test suite has more examples of the text format (although it is in the extended <code>.wast</code> format rather than <code>.wat</code>, which allows defining multiple modules and assertions and such): <a href=\"https://github.com/WebAssembly/testsuite/\">https://github.com/WebAssembly/testsuite/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/testsuite/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4bc464751c03aa165ab70a3a9ef035695cb280b3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323661356433343834303466613231643731353639633263336232643137626335303335653433333563623339323362303338356136326136306233393866622f576562417373656d626c792f746573747375697465&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/testsuite/\" title=\"GitHub - WebAssembly/testsuite: Mirror of the spec testsuite\">GitHub - WebAssembly/testsuite: Mirror of the spec testsuite</a></div><div class=\"message_embed_description\">Mirror of the spec testsuite. Contribute to WebAssembly/testsuite development by creating an account on GitHub.</div></div></div>",
        "id": 435620177,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714148896
    },
    {
        "content": "<p>Hi guys, I'm also a newbee to WASM libcs, and I'm kind of confused by the assembly code in wasi-libc. For example, longjmp.s, I thought WASM is a architecture agnostic format, but in this part of wasi-libc, the assembly file</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"n\">_longjmp</span>\n<span class=\"p\">.</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"n\">longjmp</span>\n<span class=\"p\">.</span><span class=\"k\">type</span> <span class=\"nc\">_longjmp</span><span class=\"p\">,</span><span class=\"o\">@</span><span class=\"n\">function</span>\n<span class=\"p\">.</span><span class=\"k\">type</span> <span class=\"nc\">longjmp</span><span class=\"p\">,</span><span class=\"o\">@</span><span class=\"n\">function</span>\n<span class=\"n\">_longjmp</span>:\n<span class=\"nc\">longjmp</span>:\n    <span class=\"nc\">mov</span><span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">esp</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">edx</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">esp</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">    </span><span class=\"n\">cmp</span><span class=\"w\">       </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">    </span><span class=\"n\">adc</span><span class=\"w\">       </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">al</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">ebx</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">esi</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\">  </span><span class=\"mi\">8</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">edi</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">ebp</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">esp</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"mi\">20</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>is included as a part of musl. Then how is this being compiled as a part of the wasm sysroot? I'm kind of interested in this compilation.</p>",
        "id": 435649219,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1714160909
    },
    {
        "content": "<p>It shouldn't be; probably that's general code in musl in an architecture-specific part (for x86) that is not included in the wasm build</p>",
        "id": 435649579,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1714161080
    },
    {
        "content": "<p>(it's common for programs that require assembly bits, either for performance or for implementing low-level things, to have separate implementations per architecture and select only one during build)</p>",
        "id": 435649647,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1714161114
    },
    {
        "content": "<p>If you look at the <code>wasi-libc</code> Makefile, you'll see that not all the files in the source tree are included as part of the build, and I'd expect that longjmp.s is not included.</p>",
        "id": 435651617,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714161915
    },
    {
        "content": "<p>I believe the approach of importing all of musl but only using part of it is motivated by a desire to make upgrading to later musl versions easier.</p>",
        "id": 435651844,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714162000
    },
    {
        "content": "<p>Ohoh I see, so the actual source for wasi-libc shouldn't include stuff like x86 asm, or at least not necessarily needed. Yeah, their approach definitely makes upgrading for future musl versions easier, thanks!</p>",
        "id": 435652108,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1714162124
    }
]