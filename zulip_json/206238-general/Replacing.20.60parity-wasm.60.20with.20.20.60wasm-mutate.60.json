[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>,<br>\nHere at Dfinity we were using the <code>parity-wasm</code> crate to instrument wasm modules, but it's now been deprecated. We started building a replacement using <code>wasmparser</code> and <code>wasm-encode</code>, but then realized we were essentially re-implementing code that you already have in the <code>wasm-mutate</code> crate (mainly the <code>info</code> and <code>translate</code> modules). </p>\n<p>Would you be open to PR's that expose those modules so that they can be used as a replacement for <code>parity-wasm</code>?</p>",
        "id": 305774612,
        "sender_full_name": "Adam Bratschi-Kaye",
        "timestamp": 1666602072
    },
    {
        "content": "<p><code>wasm-mutate</code> isn't really designed for general purpose Wasm rewrites, it is focused specifically on random mutations for fuzzing</p>\n<p>I wouldn't really want to grow its use cases larger than that from a scope and maintainability perspective</p>",
        "id": 305842918,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1666624482
    },
    {
        "content": "<p>I agree that <code>wasm-mutate</code> probably isn't the best place to expose this, but at the same time I've also found myself frequently translating between wasmparser and wasm-encoder for small passes. I wouldn't be opposed to trying to extract out these bits of <code>wasm-mutate</code> into a crate somewhere, probably <code>wasm-encoder</code> for now.</p>\n<p>I've historically been hesitant to make <code>wasmparser</code> a \"public dependency\" of <code>wasm-encoder</code> but I think it's reasonable enough to add in the long run</p>",
        "id": 305846592,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1666625481
    },
    {
        "content": "<p>I do think there's possible interesting design work to be had here though, the problem of \"I'd like to apply this simple transformation to a wasm module\" I don't think is really all that well of a solved problem. Using <code>parity-wasm</code> was a historical option, <code>wasm-bindgen</code> uses the largely-unmaintained <code>walrus</code> crate (which Nick and I originally authored), and nowadays it's not the worst thing in the world to fuse <code>wasmparser</code> and <code>wasm-encoder</code> with some macros.</p>",
        "id": 305846941,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1666625555
    },
    {
        "content": "<p>All that to say that I'd love to see a better library and tooling exist here for this purpose. I at least personally have never found a solution that \"felt right\"</p>",
        "id": 305847095,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1666625588
    },
    {
        "content": "<p>That makes sense. But even if it wasn't perfect, it seems like a lot of projects were using <code>parity-wasm</code>. So I suspect a crate that combines <code>wasmparser</code> and <code>wasm-encoder</code> (or adding a translator to <code>wasm-encoder</code>) would get a lot of use.</p>",
        "id": 305885329,
        "sender_full_name": "Adam Bratschi-Kaye",
        "timestamp": 1666634797
    }
]