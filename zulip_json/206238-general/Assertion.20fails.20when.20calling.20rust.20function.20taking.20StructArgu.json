[
    {
        "content": "<p>I am trying to call a Rust function that takes in a struct from within cranelift, but after I finish generating the IR and setting everything up calling <code>finalize_definitions</code> my program panics with the message <code>assertion failed: (diff &gt;&gt; 26 == -1) || (diff &gt;&gt; 26 == 0</code></p>\n<p>The program only panics when running on my M1 Mac Laptop, when I run it on my x86_64 linux machine everything is as I expect it to be.</p>\n<p>The struct</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">MyS</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">z</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">w</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here is the rust function </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">pass_struct</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">MyS</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Called from cranelift: {x:?}\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here is the cranelift function signature</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig_pass_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span>\n\n<span class=\"n\">sig_pass_struct</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">special</span><span class=\"p\">(</span>\n<span class=\"w\">   </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">target_config</span><span class=\"p\">().</span><span class=\"n\">pointer_type</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"n\">ArgumentPurpose</span>::<span class=\"n\">StructArgument</span><span class=\"p\">(</span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyS</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">),</span>\n<span class=\"w\"> </span><span class=\"p\">));</span>\n\n<span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_pass_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">     </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"pass_struct\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig_pass_struct</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>And the code used to generate cranelift IR</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// i64</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"c1\">// i64</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">param_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_1</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">isub</span><span class=\"p\">(</span><span class=\"n\">param_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_1</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">product</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">imul</span><span class=\"p\">(</span><span class=\"n\">param_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_1</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">square</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">imul</span><span class=\"p\">(</span><span class=\"n\">param_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_0</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stack_slot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">create_sized_stack_slot</span><span class=\"p\">(</span><span class=\"n\">StackSlotData</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">StackSlotKind</span>::<span class=\"n\">ExplicitSlot</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyS</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span>\n<span class=\"p\">));</span>\n\n<span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_store</span><span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stack_slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_store</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stack_slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span>\n<span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_store</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stack_slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">);</span>\n<span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_store</span><span class=\"p\">(</span><span class=\"n\">square</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stack_slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_addr</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stack_slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">func_pass_struct</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"n\">bcx</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">addr</span><span class=\"p\">]);</span>\n</code></pre></div>\n<p>When I change the cranelift signature for the Rust function from taking in an <code>AbiParam::special(ArgumentPurpose::StructArgument(...))</code> to taking in a <code>AbiParam::new(types::I64)</code> it doesn't panic and runs exactly as I expect.</p>",
        "id": 437518680,
        "sender_full_name": "SapphireAmoeba5",
        "timestamp": 1715110908
    },
    {
        "content": "<p>The assertion is almost certainly something to do with aarch64's 26-bit limit on various kinds of offsets. I don't remember exactly how <code>StructArgument</code> lowers but IIRC it was for a special kind of compiler-managed memcpy; if you're allocating structs and managing pointers to them in your compiled code, you might as well pass a raw pointer (an <code>I64</code>, as you switched to) as well. Specifically, <code>StructArgument</code> <em>doesn't</em> mean \"this is a struct\" or something like that; Cranelift doesn't care what is behind the <code>I64</code>, or even that it's a pointer.</p>",
        "id": 437519131,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715111088
    },
    {
        "content": "<p>StructArgument is passed at a fixed position on the stack to the callee. It is only required for compatibility with existing C code. If you write your own code I suggest that you explicitly pass your structs as pointers on both the caller and callee side. So <code>extern \"C\" fn pass_struct(x: &amp;MyS)</code> in your case.</p>",
        "id": 437635924,
        "sender_full_name": "bjorn3",
        "timestamp": 1715169897
    }
]