[
    {
        "content": "<p>Hi,</p>\n<p>I'd like to understand if I should be investing time creating .wit or .witx definitions for my host functions for broad support. It seems like .witx is being deprecated in favour of .wit or is it the other way round? </p>\n<p>I notice the snapshots of wasi function definitions in the official wasi repo use .witx for their definitions, are there any .wit definitions online I can use?</p>\n<p>Additionally, where can I find code generation tools for both host &amp; guest functions for the above formats? Is wit-bindgen best for .wit? I can't see any recommended .witx generators. </p>\n<p>Thanks for the help in advance.</p>",
        "id": 319995477,
        "sender_full_name": "Daniel Blignaut",
        "timestamp": 1673117141
    },
    {
        "content": "<p>I also have the same question.</p>",
        "id": 319996048,
        "sender_full_name": "Wilson Wang",
        "timestamp": 1673117514
    },
    {
        "content": "<p>Witx is being deprecated, in favor of wit. The transition is in progress, and not everything is ready yet.</p>",
        "id": 320005592,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1673124862
    },
    {
        "content": "<p>A wit-based version of WASI is in development; a prototype is here: <a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/main/wit/wasi.wit\">https://github.com/bytecodealliance/preview2-prototyping/blob/main/wit/wasi.wit</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/main/wit/wasi.wit\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2b2c5fcdee063590238d3047a7c18c644870c732\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363861663933333033316464643932353330303131333134646164643565636365326265616234333333393834653234343833626138633634616537643636352f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/main/wit/wasi.wit\" title=\"preview2-prototyping/wasi.wit at main · bytecodealliance/preview2-prototyping\">preview2-prototyping/wasi.wit at main · bytecodealliance/preview2-prototyping</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - preview2-prototyping/wasi.wit at main · bytecodealliance/preview2-prototyping</div></div></div>",
        "id": 320005662,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1673124953
    },
    {
        "content": "<p>wit-bindgen is the main tool family for working with wit files today, for both host and guest. It's usable, but under active development and not everything is stable yet.</p>",
        "id": 320005872,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1673125101
    },
    {
        "content": "<p>Thanks for the feedback. In the wit specification ( <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md</a> ) I don't see reference to \"memory pointer\" types (e.g. *mut [u8]). I assume we should use direct primitives to reference a pointer in the shared memory and that in the rust generator, we lose the pointer syntatic sugar. Is that correct? If so, what's an appropriate type for this? u32?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0c73b6ec5ae6f0aed184d7b938fac42f83ea6006\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303539626363646332643833623032386639656531336230613731303438643762396235366162663561643633343736616433396663363936623863313435352f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\" title=\"component-model/WIT.md at main · WebAssembly/component-model\">component-model/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/WIT.md at main · WebAssembly/component-model</div></div></div>",
        "id": 320099350,
        "sender_full_name": "Daniel Blignaut",
        "timestamp": 1673197901
    },
    {
        "content": "<p>In wit interfaces, there is no shared linear memory. There are a few different alternatives, depending on your use case. Can you say more about what you'd do with an <code>&amp;mut [u8]</code>?</p>",
        "id": 320100979,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1673199029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>  well for instance I'm trying to document some of wasmedge's host API's through WIT.  Reviewing their guest Rust Sockets API, I can see what the expected types look like and try map those back to a wit definition. For example, how would I represent this WasmAddress struct in .wit might answer the question above? ( <a href=\"https://github.com/second-state/wasmedge_wasi_socket/blob/main/src/socket.rs#L52\">https://github.com/second-state/wasmedge_wasi_socket/blob/main/src/socket.rs#L52</a> )</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/second-state/wasmedge_wasi_socket/blob/main/src/socket.rs#L52\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c1f4d89252f04008f7df9c8130dd90154cb97365\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346137623064383265613739636631613765313261363534323566346366393364396534323635373436623132646164393033636161333265313937323638642f7365636f6e642d73746174652f7761736d656467655f776173695f736f636b6574)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/second-state/wasmedge_wasi_socket/blob/main/src/socket.rs#L52\" title=\"wasmedge_wasi_socket/socket.rs at main · second-state/wasmedge_wasi_socket\">wasmedge_wasi_socket/socket.rs at main · second-state/wasmedge_wasi_socket</a></div><div class=\"message_embed_description\">A Rust lib for socket on WasmEdge. Contribute to second-state/wasmedge_wasi_socket development by creating an account on GitHub.</div></div></div>",
        "id": 320101681,
        "sender_full_name": "Daniel Blignaut",
        "timestamp": 1673199572
    },
    {
        "content": "<p>wit isn't aiming to be able to describe existing APIs literally. It will be necessary to change how some things are done, when migrating to wit. For example, the wasi-sockets proposal passes socket addresses by value instead of by pointer: <a href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wasi-socket-ip.wit#L5\">https://github.com/WebAssembly/wasi-sockets/blob/main/wasi-socket-ip.wit#L5</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wasi-socket-ip.wit#L5\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6153ecfb3ea887ec25c0ef89813b234b127521b7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643139623834363935636134366532303961346465363430613337633864346438626136623531383535343062613733653236666361353731366533656235652f576562417373656d626c792f776173692d736f636b657473)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sockets/blob/main/wasi-socket-ip.wit#L5\" title=\"wasi-sockets/wasi-socket-ip.wit at main · WebAssembly/wasi-sockets\">wasi-sockets/wasi-socket-ip.wit at main · WebAssembly/wasi-sockets</a></div><div class=\"message_embed_description\">WASI API proposal for managing sockets. Contribute to WebAssembly/wasi-sockets development by creating an account on GitHub.</div></div></div>",
        "id": 320102323,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1673200041
    },
    {
        "content": "<p>This has the advantage of avoiding the lifetime hazards of sharing pointers across interfaces.</p>",
        "id": 320102543,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1673200197
    }
]