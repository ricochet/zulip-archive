[
    {
        "content": "<p>Seems like a lot of wasi proposals are struggling with how to do shared buffers, since wasm doesn't allow for easy mounting and unmounting of memory.</p>\n<p>E.g. wasi-webgpu needs to provide access to a gpu-buffer when it's mapped to the cpu, but not when it's mapped to the gpu. And the gpu-buffers constantly change where they're mapped to.</p>\n<p>Another example is wasi-frame-buffer. The buffer that's writable changes at every frame, and there's no way to mount and unmount buffers like this in wasm.</p>\n<p>I believe that wasi-nn and the embedded SIG have been dealing with the same issue. So I think it might make sense to solve it together.</p>\n<p>So I was thinking, can we just use a wit resource with get/set methods? This will allow for easy mounting/unmounting, and can be done with the current tooling already.</p>\n<p>Something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource remote-buffer {\n    get8: func(i: u32) -&gt; u8;\n    set8: func(i: u32, val: u8);\n    get-range8(from: u32, to: u32) -&gt; list&lt;u8&gt;;\n    set-range8(from: u32, vals: list&lt;u8&gt;);\n    get32: func(i: u32) -&gt; u32;\n    set32: func(i: u32, val: u32);\n    get-range32(from: u32, to: u32) -&gt; list&lt;u32&gt;;\n    set-range32(from: u32, vals: list&lt;u32&gt;);\n    length: func() -&gt; u32;\n}\n</code></pre></div>\n<p>Thoughts anyone?</p>\n<p>(cc'ing some people I've had discussions about this or related topics <span class=\"user-mention\" data-user-id=\"569660\">@Sean Isom</span> <span class=\"user-mention\" data-user-id=\"693461\">@Atanas Atanasov</span> <span class=\"user-mention\" data-user-id=\"435699\">@Chris Woods</span> <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> <span class=\"user-mention\" data-user-id=\"258954\">@Mingqiu Sun</span> <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span>)</p>",
        "id": 436573890,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1714598000
    },
    {
        "content": "<p>This makes sense to me - from the graphics perspective, this will solve the problem of giving ephemeral access to mapped GPU buffers to Wasm guests and let the host take ownership when unmapped. <span class=\"user-mention\" data-user-id=\"435699\">@Chris Woods</span> curious if this will work for some of your embedded use cases</p>",
        "id": 436778725,
        "sender_full_name": "Sean Isom",
        "timestamp": 1714684877
    }
]