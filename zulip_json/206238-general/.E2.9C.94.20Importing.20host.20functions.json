[
    {
        "content": "<p>I see that I can provide a list of Externs generated from Funcs, but how do I specify the name of each function? Otherwise, how will the wasm module know what to call? I'm looking for the equivalent of this <a href=\"https://docs.wasmer.io/integrations/examples/host-functions#declaring-functions-and-imports\">https://docs.wasmer.io/integrations/examples/host-functions#declaring-functions-and-imports</a></p>",
        "id": 286841912,
        "sender_full_name": "JMS",
        "timestamp": 1655762034
    },
    {
        "content": "<p>If you're using an API like <code>Instance::new</code> which takes the externs as <code>&amp;[Extern]</code>, they're linked to the module's imports in the order that they appear in the module.</p>",
        "id": 286842089,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655762166
    },
    {
        "content": "<p>Oh. I don't think I can control that - the module is generated from Rust, which has a bunch of scattered extern \"C\" functions all over the place.</p>",
        "id": 286842198,
        "sender_full_name": "JMS",
        "timestamp": 1655762297
    },
    {
        "content": "<p>For a higher-level API that links things by name see the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html\"><code>Linker</code></a> API</p>",
        "id": 286842201,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655762302
    },
    {
        "content": "<p>Oh nice, ty!</p>",
        "id": 286842239,
        "sender_full_name": "JMS",
        "timestamp": 1655762355
    },
    {
        "content": "<p><a href=\"https://docs.wasmtime.dev/examples-rust-linking.html\">https://docs.wasmtime.dev/examples-rust-linking.html</a> has an example using that API, in case it helps.</p>",
        "id": 286842398,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655762485
    },
    {
        "content": "<p>Yep, figured it out, ty!</p>",
        "id": 286842610,
        "sender_full_name": "JMS",
        "timestamp": 1655762690
    },
    {
        "content": "<p>Do you know how I can wrap this function? I don't think it likes that it borrows Bay.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">setup_linker</span><span class=\"p\">(</span><span class=\"n\">engine</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bay</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Bay</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">StoreData</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"host\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"s\">\"__move_towards\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreData</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">bot_action</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">action_result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bay</span><span class=\"p\">.</span><span class=\"n\">can_move_towards</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">bot_action</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">BotAction</span>::<span class=\"n\">MoveTowards</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">action_result</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">ActionError</span>::<span class=\"n\">AlreadyActed</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 286844046,
        "sender_full_name": "JMS",
        "timestamp": 1655763971
    },
    {
        "content": "<p>Trying to store &amp;'a Bay in my StoreData didn't work either :/</p>",
        "id": 286844215,
        "sender_full_name": "JMS",
        "timestamp": 1655764166
    },
    {
        "content": "<p>Nvm, was an issue with my return type</p>",
        "id": 286845737,
        "sender_full_name": "JMS",
        "timestamp": 1655765610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509382\">JMS</span> has marked this topic as resolved.</p>",
        "id": 286852159,
        "sender_full_name": "Notification Bot",
        "timestamp": 1655772697
    }
]