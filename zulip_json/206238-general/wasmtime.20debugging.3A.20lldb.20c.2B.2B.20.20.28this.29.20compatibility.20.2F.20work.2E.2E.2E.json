[
    {
        "content": "<p>rust side: there's a resolve_vmctx_memory_ptr that seems to do what I want, its just not exported. </p>\n<p>as that's not messing about with string tables, I might even be able to get that running. </p>\n<p>copy set export template, figure out how to add the integer parameter &amp; done, maybe.</p>\n<p>at least to get something working.</p>",
        "id": 256782395,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633716993
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs\" style=\"background-image: url(https://opengraph.githubassets.com/33cda18d621ad13dda943ad1a10f5d971ef76e74374c32b9b19ca0c819cef483/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs\" title=\"wasmtime/debug_builtins.rs at main · bytecodealliance/wasmtime\">wasmtime/debug_builtins.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/debug_builtins.rs at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 256782549,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633717064
    },
    {
        "content": "<p>oops, wrong thread, sorry.</p>",
        "id": 256802394,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633725510
    },
    {
        "content": "<p>If you chose edit for the first commit in the wrong topic, you can change the topic title to match the topic you actually wanted to post it in. Zulip will then ask you if you want to move all later messages too.</p>",
        "id": 256806845,
        "sender_full_name": "bjorn3",
        "timestamp": 1633727592
    },
    {
        "content": "<p>I would do this for you if not for the fact that the mobile app doesn't support this.</p>",
        "id": 256807017,
        "sender_full_name": "bjorn3",
        "timestamp": 1633727650
    },
    {
        "content": "<p>issue summary: lldb expects c++ \"this\" to be a standard system memory pointer. when its not as is the case with current wasmtime wrapped pointer delvered via  jit debug connection, we run into difficulties. we are  prevented from being able to access 'this' as we would other variables because the evaluate fails because lldb is hardwired to expect \"this\" to be a standard pointer.</p>\n<p>(continued from detail in lldbg post - its not an lldbg issue, its core)</p>\n<p><a href=\"#narrow/stream/206238-general/topic/debugging.20wasm.20with.20lldbg\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/debugging.20wasm.20with.20lldbg</a></p>",
        "id": 256856738,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633772879
    },
    {
        "content": "<p>I've got some kind of regression or config error on windows. switching to linux where things appear more sane right now.</p>\n<p>running wasmtime trunk, lldb 12.0.1</p>\n<p>(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-g\" \"./test.wasm\"<br>\n(lldb) b test.cpp:7<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 21261 launched: '/home/x/dev/tools/wasmtime' (x86_64)<br>\n1 location added to breakpoint 1<br>\nProcess 21261 stopped</p>\n<ul>\n<li>thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff7fa732c JIT(0x555556045210)<code>Thing::Thing(this=(__ptr = 67216), i=5) at test.cpp:8:13\n   5    public:\n   6       Thing(int i) \n   7       { \n-&gt; 8          m_i = i; \n   9       }\n   10      \n   11      int m_i;\n(lldb) p __vmctx-&gt;set()\nwarning: </code>this' is not accessible (substituting 0)<br>\n(lldb) p (Thing*) resolve_vmctx_memory_ptr(67216)<br>\nwarning: `this' is not accessible (substituting 0)<br>\nerror: Execution was interrupted, reason: signal SIGSEGV: invalid address (fault address: 0x1a0).</li>\n</ul>",
        "id": 256872036,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633787712
    },
    {
        "content": "<p>resolve_vmctx_memory_ptr seems to want address of sandbox pointer, not its direct value, so that's probably why it's faulting.</p>",
        "id": 256872760,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633788393
    },
    {
        "content": "<p>tried :</p>\n<p>#[no_mangle]<br>\npub unsafe extern \"C\" fn resolve_vmctx_memory(ptr: usize) -&gt; *const u8 {<br>\n    let handle = InstanceHandle::from_vmctx(VMCTX_AND_MEMORY.0);<br>\n    assert!(<br>\n        VMCTX_AND_MEMORY.1 &lt; handle.module().memory_plans.len(),<br>\n        \"memory index for debugger is out of bounds\"<br>\n    );<br>\n    let index = MemoryIndex::new(VMCTX_AND_MEMORY.1);<br>\n    let mem = handle.instance().get_memory(index);    <br>\n    mem.base.add(ptr)<br>\n}</p>\n<p>but not found so there's something else I need to tweak somewhere to add a new reserved function.</p>",
        "id": 256873724,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633789358
    },
    {
        "content": "<p>ahh, ensure_exported section :)</p>",
        "id": 256874329,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633789953
    },
    {
        "content": "<p>Looks promising:</p>\n<p>(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-g\" \"./test.wasm\"<br>\n(lldb) b test.cpp:7<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 29127 launched: '/home/x/dev/tools/wasmtime' (x86_64)<br>\n1 location added to breakpoint 1<br>\nProcess 29127 stopped</p>\n<ul>\n<li>\n<p>thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff7fa732c JIT(0x555556045210)<code>Thing::Thing(this=(__ptr = 67216), i=5) at test.cpp:8:13\n   5    public:\n   6       Thing(int i) \n   7       { \n-&gt; 8          m_i = i; \n   9       }\n   10      \n   11      int m_i;\n(lldb) p __vmctx-&gt;set\nwarning: </code>this' is not accessible (substituting 0)<br>\n  Fix-it applied, fixed expression was: <br>\n    __vmctx-&gt;set()<br>\n(lldb) p (Thing*) resolve_vmctx_memory(67216)                                   <br>\nwarning: <code>this' is not accessible (substituting 0)\n(Thing *) $0 = 0x00007ffe40010690\n(lldb) p $0-&gt;m_i\nwarning: </code>this' is not accessible (substituting 0)<br>\n(int) $1 = 0<br>\n(lldb) n<br>\nProcess 29127 stopped</p>\n</li>\n<li>\n<p>thread #1, name = 'wasmtime', stop reason = step over<br>\n    frame #0: 0x00007ffff7fa7336 JIT(0x555556045210)<code>Thing::Thing(this=(__ptr = 0), i=0) at test.cpp:9:4\n   6       Thing(int i) \n   7       { \n   8          m_i = i; \n-&gt; 9       }\n   10      \n   11      int m_i;\n   12   };\n(lldb) p $0-&gt;m_i \nwarning: </code>this' is not accessible (substituting 0)<br>\n(int) $2 = 5</p>\n</li>\n</ul>",
        "id": 256875297,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633790917
    },
    {
        "content": "<p>Is there an actual need for the resolve in here to be a pointer to a sandbox pointer rather than the pointer itself ?<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs</a><br>\nif we can mod the one that's there, there's no need to add another method. usize rather than u32 though ideally so we have 64 bit covered too.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs\" style=\"background-image: url(https://opengraph.githubassets.com/33cda18d621ad13dda943ad1a10f5d971ef76e74374c32b9b19ca0c819cef483/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/debug_builtins.rs\" title=\"wasmtime/debug_builtins.rs at main · bytecodealliance/wasmtime\">wasmtime/debug_builtins.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/debug_builtins.rs at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 256875459,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633791090
    },
    {
        "content": "<p>if can perform above from lldbg seems I've got a solution. lldb doesn't 'like' the invalid this pointer but it seems to let us pass.</p>",
        "id": 256875553,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633791180
    },
    {
        "content": "<p>&amp; we shouldn't be sending that as const as debuggers will sometimes mess with it &amp; that's valid.</p>",
        "id": 256876026,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633791621
    },
    {
        "content": "<p>done, I think but won't know for sure until I have it fixed up in the GUI &amp; there's a more elegant solution in there with a valid this pointer to keep lldb happier.</p>",
        "id": 256876104,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633791689
    },
    {
        "content": "<p>updated : <a href=\"https://github.com/adv-sw/lldbg\">https://github.com/adv-sw/lldbg</a></p>\n<p>includes 'this' workaround with all detail hidden in gui so it behaves as expected.<br>\nrequires minor wasmtime tweak to add resolve_vmctx_memory function - ready to push that.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/lldbg\" style=\"background-image: url(https://opengraph.githubassets.com/3596bafd8ac0028bcfdeb920561cfbd274be2d2837460de35cdc19d8a5c30dab/adv-sw/lldbg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/lldbg\" title=\"GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.\">GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.</a></div><div class=\"message_embed_description\">A lightweight native GUI for LLDB. Contribute to adv-sw/lldbg development by creating an account on GitHub.</div></div></div>",
        "id": 256961486,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633878007
    },
    {
        "content": "<p>resolves \"this\" pointer cannot be evaluated by lldb issue.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851\">https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/issues/3419\">https://github.com/bytecodealliance/wasmtime/issues/3419</a></p>\n<p>plz review/merge.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851\" style=\"background-image: url(https://opengraph.githubassets.com/fb9a32903a8b719152724cfae8ee0f696c388321c121dfb1d96234bf6221131e/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851\" title=\"Added resolve_vmctx_memory function to enable debuggers to resolve sa… · bytecodealliance/wasmtime@92a10d1\">Added resolve_vmctx_memory function to enable debuggers to resolve sa… · bytecodealliance/wasmtime@92a10d1</a></div><div class=\"message_embed_description\">…ndbox pointers - required because sandbox &#39;this&#39; pointer cannot be resolved by lldb any other way as lldb expects &quot;this&quot; and &quot;self&quot; to be standard pointers, not sandbox...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3419\" style=\"background-image: url(https://opengraph.githubassets.com/cd3c454b0ac2152dd443f92cdc30f084caddbada0096391c31a89e423c5f9cf7/bytecodealliance/wasmtime/issues/3419)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3419\" title=\"Cranelift: &quot;this&quot; not populated correctly during debug session. · Issue #3419 · bytecodealliance/wasmtime\">Cranelift: \"this\" not populated correctly during debug session. · Issue #3419 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Unzip test case. On Linux : Run make_wasm.sh to build Optional lldbg debugging front end - tested linux &amp; windows : https://github.com/adv-sw/lldbg Modify dbg_wasm.sh to run under lldb direct i...</div></div></div>",
        "id": 257034856,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633943439
    },
    {
        "content": "<p>more specifically, could I have a reviewer for this, please. </p>\n<p>no huge rush but then it's done. mod is trivial, doesn't affect anything else.</p>",
        "id": 257093538,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633972854
    },
    {
        "content": "<p>security: only invoked under debugger which legitimately can access/modify anything in the sandbox.</p>",
        "id": 257093703,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633972936
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span></p>",
        "id": 257093958,
        "sender_full_name": "bjorn3",
        "timestamp": 1633973046
    },
    {
        "content": "<p>could factor resolve_ptr into resolve if you'd like.</p>",
        "id": 257094099,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633973132
    },
    {
        "content": "<p>to answer my own q: resolve_ptr is required for * operators injected by wasmtime. so yes, we do need both unless that code is to be modified (unnecessary imo - lets keep this simple for now)</p>",
        "id": 257094334,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633973236
    },
    {
        "content": "<p>cfallon : Would you mind creating a PR for the review and merging of your commit? </p>\n<p>ummm sure ... how ? </p>\n<p>:)</p>\n<p>The usual flow is that one will create this PR with the text \"Fixes #ISSUE-NUMBER\" in the commit message, which links it back to this issue and closes it when merged)</p>",
        "id": 257095888,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633974060
    },
    {
        "content": "<p>PR = pull request. thought I did. that's what this is, isn't it ?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851\">https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851</a></p>\n<p>git collab noob also :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851\" style=\"background-image: url(https://opengraph.githubassets.com/fb9a32903a8b719152724cfae8ee0f696c388321c121dfb1d96234bf6221131e/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/92a10d1ace70fe75c3e2c646ea613168fc417851\" title=\"Added resolve_vmctx_memory function to enable debuggers to resolve sa… · bytecodealliance/wasmtime@92a10d1\">Added resolve_vmctx_memory function to enable debuggers to resolve sa… · bytecodealliance/wasmtime@92a10d1</a></div><div class=\"message_embed_description\">…ndbox pointers - required because sandbox &#39;this&#39; pointer cannot be resolved by lldb any other way as lldb expects &quot;this&quot; and &quot;self&quot; to be standard pointers, not sandbox...</div></div></div>",
        "id": 257096043,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633974147
    },
    {
        "content": "<p>On your fork there is a button \"contribute\" that you can click on.</p>\n<p><a href=\"/user_uploads/15107/s5JcrQMkCk2qTVSj77GrjfR_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/s5JcrQMkCk2qTVSj77GrjfR_/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/s5JcrQMkCk2qTVSj77GrjfR_/image.png\"></a></div>",
        "id": 257096138,
        "sender_full_name": "bjorn3",
        "timestamp": 1633974202
    },
    {
        "content": "<p>Normally you would create a branch and push the changes there though instead of push to the main branch.</p>",
        "id": 257096236,
        "sender_full_name": "bjorn3",
        "timestamp": 1633974244
    },
    {
        "content": "<p>This allows you to have multiple PR's at the same time.</p>",
        "id": 257096249,
        "sender_full_name": "bjorn3",
        "timestamp": 1633974255
    },
    {
        "content": "<p>Also I think you will want to remove the merge commit by rebasing on top of the bytecodealliance/wasmtime main branch.</p>",
        "id": 257096321,
        "sender_full_name": "bjorn3",
        "timestamp": 1633974307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  - right ... thought that's what I did, though via pull requests, create pull request.<br>\ndidn't label anything with issue # happy to do so, going forwards.</p>",
        "id": 257096376,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633974343
    },
    {
        "content": "<p>unsure what else you want other than \"fixes (indirectly) #3419 by providing debugger with ability to resolve sandbox pointers\"</p>",
        "id": 257096976,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633974659
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297332\">@Steve Williams</span> that is just a git commit, not a PR; a PR is a separate entity on GitHub that creates a discussion thread, a space for code review, and asks the maintainers to merge your commit into the mainline. You can click on \"Pull Requests\" in the main bytecodealliance/wasmtime repo and then the \"New Pull Request\" button (green, upper right), and select your repo fork and branch with the commit(s) you want to contribute</p>",
        "id": 257097596,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1633975013
    },
    {
        "content": "<p>Thanks, Chris. Will see if I can present patch as requested.</p>",
        "id": 257098360,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633975450
    },
    {
        "content": "<p>Like this ?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3443\">https://github.com/bytecodealliance/wasmtime/pull/3443</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3443\" style=\"background-image: url(https://opengraph.githubassets.com/34c9e1313041dc0fb5a053feb2e19c4e1ee96e11e62e778d240f52f1eff16b8a/bytecodealliance/wasmtime/pull/3443)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3443\" title=\"Fixes (indirectly) #3419 by providing debugger with ability to resolve sandbox pointers by adv-sw · Pull Request #3443 · bytecodealliance/wasmtime\">Fixes (indirectly) #3419 by providing debugger with ability to resolve sandbox pointers by adv-sw · Pull Request #3443 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">\nHave a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.\n  </div></div></div>",
        "id": 257098704,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633975682
    },
    {
        "content": "<p>The direct fix is lldbg which provides high level this access - appears to be working nicely with minimal testing. Equivalent could be presented as macro for lldb direct, but haven't done that as don't currently need it. Quite liking the new front end. Could be a bytecode alliance project if desired, though as its largely generic lldb front end, perhaps better over there. Dunno, don't care. Just pleased we have it.</p>\n<p>Looking forwards to being able to present my globals :)</p>\n<p><a href=\"https://github.com/adv-sw/lldbg\">https://github.com/adv-sw/lldbg</a></p>\n<p>Direct fix requires indirect fix in PR 3443 &amp; also lldb patch on windows to fix their JIT interface. </p>\n<p>Other platforms should work out of the box.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/lldbg\" style=\"background-image: url(https://opengraph.githubassets.com/3596bafd8ac0028bcfdeb920561cfbd274be2d2837460de35cdc19d8a5c30dab/adv-sw/lldbg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/lldbg\" title=\"GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.\">GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.</a></div><div class=\"message_embed_description\">A lightweight native GUI for LLDB. Contribute to adv-sw/lldbg development by creating an account on GitHub.</div></div></div>",
        "id": 257100981,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633977014
    },
    {
        "content": "<p>Got it, will review -- thanks!</p>",
        "id": 257101531,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1633977300
    },
    {
        "content": "<p>LLDB/Windows JIT patch fix here : <a href=\"https://reviews.llvm.org/D110066\">https://reviews.llvm.org/D110066</a></p>\n<p>Other platforms should interoperate with above out of the box.</p>",
        "id": 257101997,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633977570
    },
    {
        "content": "<p>Dan - do you have commit over there ? Can it go in plz. LLDB is currently broken on Windows, that's not clever wrt wide spread adoption which is surely part of the goal here.  Test can wait, it works.  -my 2c.</p>",
        "id": 257102253,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633977714
    },
    {
        "content": "<p>Test is lldb or lldbg :) Without patch - JIT debugging fails. With patch, JIT debugging connects.</p>",
        "id": 257102715,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633977939
    },
    {
        "content": "<p>That comes out sounding like a demand. Sorry. I humbly request LLVM D110066 is accepted as is following confirmation it functions as stated.  Can maintain out of tree, but I think its better for all that it goes in. Eliminate the wonky.</p>",
        "id": 257103141,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633978189
    },
    {
        "content": "<p>or anyone else with commit - not trying to put anyone on the spot with my nonsense :)</p>",
        "id": 257103652,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633978521
    },
    {
        "content": "<p>also, sooner its in, sooner its into a standard release regular folks have access to.</p>",
        "id": 257104224,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633978838
    },
    {
        "content": "<p>Thanks Chris - think that's done as requested now. Assistance appreciated.</p>\n<p>LLDB aside, perhaps the wrong place, certainly the wrong thread :)</p>",
        "id": 257110337,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633982498
    }
]