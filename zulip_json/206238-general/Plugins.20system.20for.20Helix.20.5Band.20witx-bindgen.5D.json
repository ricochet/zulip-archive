[
    {
        "content": "<p>Hello!</p>\n<p>I'm coming from the Helix plugins system proposal issue (<a href=\"https://github.com/helix-editor/helix/issues/122\">https://github.com/helix-editor/helix/issues/122</a>).<br>\nTo put it into context, I want to build a MVP of this, but I'm mostly hesitating on which runtime should be embedded.</p>\n<p>Here are a few constraints:</p>\n<ul>\n<li>\n<p>We'll be using WASI.</p>\n</li>\n<li>\n<p>We should be able to perform tasks in parallel.<br>\n    - Plugins should be able to spawn threads and call host functions later.<br>\n        E.g.: a ripgrep plugin should spawn a thread to execute ripgrep and collect the results back into the UI without causing the editor to freeze.<br>\n    - Plugins should be able to run in parallel while sharing some states.<br>\n        E.g.: a keybinds manager plugin must provide some way to add new bindings, and the manager itself need to be able to call functions from other plugins.</p>\n</li>\n<li>\n<p>Not absolutely necessary, but I would like to support a Ahead-of-Time workflow as an optional optimization. For this <code>Lucet</code> looks promising.<br>\n    E.g.: as a plugin developer, I want my plugin to be usable without recompiling Helix binary. However, as a Helix developer I might want to embed most useful plugins out of the box. Additionally, as an end user, I might want to recompile Helix binary myself with additional plugins I'm commonly using.</p>\n</li>\n</ul>\n<p>As far as I know (note that I don't know much yet haha), both Wasmtime (+ Lucet) and Wasmer allows me to do this right now, but I can't decide which one is best suited.</p>\n<p>I'm also interested in using <code>witx-bindgen</code> to generate API in various languages. README says to reach out here to get more information first, so I'm interested in that too.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/helix-editor/helix/issues/122\" style=\"background-image: url(https://opengraph.githubassets.com/5c7e3652c63a9de9f2e6eb25b1f98ece0e2453d2fdf601ab10a49289c24e2182/helix-editor/helix/issues/122)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/helix-editor/helix/issues/122\" title=\"WebAssembly plugins system · Issue #122 · helix-editor/helix\">WebAssembly plugins system · Issue #122 · helix-editor/helix</a></div><div class=\"message_embed_description\">Basically load .wasm files. Capabilities: provide new commands, hook on events, call helix commands, access UI stuff…? At first we could use a basic toml config file or CLI to feed .wasm files to t...</div></div></div>",
        "id": 244035139,
        "sender_full_name": "Benoît C.",
        "timestamp": 1624742630
    },
    {
        "content": "<p>Hi Benoît!</p>\n<p>I think Wasmtime would be well suited for what you're describing. As I mentioned on the issue thread, our recently overhauled embedding API makes it very robust for use in multi-threaded, async runtime environments, which IIUC is a key requirement for you.</p>\n<blockquote>\n<p>Here are a few constraints:</p>\n<div class=\"codehilite\"><pre><span></span><code>We&#39;ll be using WASI.\n</code></pre></div>\n\n</blockquote>\n<p>Obviously that's something we support <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>I assume you'll want to also expose other APIs though, for which <a href=\"https://github.com/bytecodealliance/witx-bindgen\">witx-bindgen</a> might come in very handy. You can describe the APIs using a simple IDL, and then generate high-level bindings for both the host and content. Currently this works for Rust on both sides (using Wasmtime as the host), and JS on the host side (for use in browsers and Node/Deno), but we're working on adding bindings for other languages, so your plugins could have a nice toolchain even when written in languages other than Rust.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>We should be able to perform tasks in parallel.\n</code></pre></div>\n\n</blockquote>\n<p>I assume you'll want to use an async runtime for that, which Wasmtime supports very well—see above.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>- Plugins should be able to spawn threads and call host functions later.\nE.g.: a ripgrep plugin should spawn a thread to execute ripgrep and collect the results back into the UI without causing the editor to freeze.\n</code></pre></div>\n\n</blockquote>\n<p>As long as these function calls can happen asynchronously, that shouldn't be a problem. Everything else is less straightforward: there's not yet a standard for doing shared-memory multi-threading outside the browser.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>- Plugins should be able to run in parallel while sharing some states.\n</code></pre></div>\n\n</blockquote>\n<p>Do you need fully shared state for this, or the ability to propagate state changes? The latter should be readily doable today, but the former would require some kind of shared-memory multi-threading, see above.</p>\n<p>This is true for all runtimes, I should note, and not some limitation of Wasmtime.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>E.g.: a keybinds manager plugin must provide some way to add new bindings, and the manager itself need to be able to call functions from other plugins.\n\nNot absolutely necessary, but I would like to support a Ahead-of-Time workflow as an optional optimization. For this Lucet looks promising.\n</code></pre></div>\n\n</blockquote>\n<p>Wasmtime has a <code>wasmtime compile</code> subcommand for the same purpose. We've by now integrated all functionality from Lucet that Wasmtime didn't used to have, and are fully focusing on Wasmtime going forward.</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>E.g.: as a plugin developer, I want my plugin to be usable without recompiling Helix binary. However, as a Helix developer I might want to embed most useful plugins out of the box. Additionally, as an end user, I might want to recompile Helix binary myself with additional plugins I&#39;m commonly using.\n</code></pre></div>\n\n</blockquote>\n<p>That should be easy to support, yes.</p>\n<blockquote>\n<p>As far as I know (note that I don't know much yet haha), both Wasmtime (+ Lucet) and Wasmer allows me to do this right now, but I can't decide which one is best suited.</p>\n</blockquote>\n<p>Ultimately that's a choice you'll have to make, of course, but we're happy to answer any questions you might have, and help you understand what Wasmtime does or doesn't offer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/witx-bindgen\" style=\"background-image: url(https://opengraph.githubassets.com/1569879644b51d9f6351f57abcb5bd8b234dbccce2dbfdca5f0dbc093a5b50d5/bytecodealliance/witx-bindgen)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/witx-bindgen\" title=\"bytecodealliance/witx-bindgen\">bytecodealliance/witx-bindgen</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/witx-bindgen development by creating an account on GitHub.</div></div></div>",
        "id": 244158038,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1624892511
    },
    {
        "content": "<p>Hi Till!</p>\n<p>Thank you for the detailed answer!</p>\n<blockquote>\n<p>As I mentioned on the issue thread, our recently overhauled embedding API makes it very robust for use in multi-threaded, async runtime environments, which IIUC is a key requirement for you.</p>\n</blockquote>\n<p>I've been looking a bit deeper at the API, and it indeed looks very good! That's definitely a winning point. I couldn't yet find the equivalent in wasmer doc.</p>\n<blockquote>\n<p>Do you need fully shared state for this, or the ability to propagate state changes?</p>\n</blockquote>\n<p>Good point. It's not required to support _fully_ shared state, we mostly need the ability to propagate state changes at some point.</p>\n<blockquote>\n<p>The latter should be readily doable today, but the former would require some kind of shared-memory multi-threading, see above.</p>\n</blockquote>\n<p>For the latter, do you refer to the custom struct provided as second argument of <code>Store::new</code>?<br>\nI was considering using this to give a try.</p>\n<blockquote>\n<p>I assume you'll want to also expose other APIs though, for which witx-bindgen might come in very handy. You can describe the APIs using a simple IDL, and then generate high-level bindings for both the host and content.</p>\n</blockquote>\n<p>Yes, this looks very promising!<br>\nI understand in the current state of witx-bindgen, we could have a workflow using it for both our editor (host) and plugins (content) written in Rust. Our intention is indeed to make sure that, at term, users are not locked with a single extension language, and it doesn't have to be perfect from the beginning. As such, we're perfectly fine with starting by officially supporting Rust only at first and make that list grow at the same pace as witx-bindgen.<br>\nI suppose you already plan on generating interfaces for languages such as C/C++ and Go, but I also noticed AssemblyScript mentioned in wasmtime documentation. Can I assume AssemblyScript interface generation is also planned at some point?<br>\nWe were considering multiple languages including AssemblyScript to embed a wasm scripting language at some point in the future and witx-bindgen support will be a big factor in the decision process.</p>\n<blockquote>\n<p>Wasmtime has a <code>wasmtime compile</code> subcommand for the same purpose. We've by now integrated all functionality from Lucet that Wasmtime didn't used to have, and are fully focusing on Wasmtime going forward.</p>\n</blockquote>\n<p>Oh! I missed that. This is just perfect.</p>",
        "id": 244197210,
        "sender_full_name": "Benoît C.",
        "timestamp": 1624910549
    },
    {
        "content": "<p>I'm glad to hear this is helpful, and that things look promising!</p>\n<blockquote>\n<p>For the latter, do you refer to the custom struct provided as second argument of Store::new?<br>\nI was considering using this to give a try.</p>\n</blockquote>\n<p>Oh, I meant in-content shared memory, but you're right: for many uses being able to access mutable state in the host bindings would probably work just fine. And yes, that's definitely something you can do with the embedding API and the right synchronization primitives.</p>\n<blockquote>\n<p>I suppose you already plan on generating interfaces for languages such as C/C++ and Go, but I also noticed AssemblyScript mentioned in wasmtime documentation. Can I assume AssemblyScript interface generation is also planned at some point?</p>\n</blockquote>\n<p>We don't have any firm plans for it, but it seems highly plausible that there will be AssemblyScript bindings for witx-bindgen <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 244198155,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1624911022
    },
    {
        "content": "<blockquote>\n<p>Oh, I meant in-content shared memory, but you're right: for many uses being able to access mutable state in the host bindings would probably work just fine.</p>\n</blockquote>\n<p>You probably know a better way then haha<br>\nI was thinking about providing host functions to get access to various states across plugins here (in-content shared memory / states); and that's probably a pattern I'll use at some point, but for my own information, what did you have in mind?</p>\n<blockquote>\n<p>We don't have any firm plans for it, but it seems highly plausible that there will be AssemblyScript bindings for witx-bindgen <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>Glad to hear that <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span><br>\nI'll be following the progresses!</p>",
        "id": 244200528,
        "sender_full_name": "Benoît C.",
        "timestamp": 1624912236
    },
    {
        "content": "<blockquote>\n<p>You probably know a better way then haha I was thinking about providing host functions to get access to various states across plugins here (in-content shared memory / states); and that's probably a pattern I'll use at some point, but for my own information, what did you have in mind?</p>\n</blockquote>\n<p>I think where possible it'd be easiest to have this state live host-side, and have the host functions provide access to it for all plugins. That way you also don't run the risk of a plugin corrupting this state, and then others (perhaps silently) breaking because of it</p>",
        "id": 244207484,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1624915992
    },
    {
        "content": "<p>On the wasm-content side, witx-bindgen and the general scheme around interface types and the canonical ABI is all being designed explicitly to support multiple languages on all sides, meaning that a wasm module using interface types can be written in any language and the runtime consuming the wasm module can also be any supporting runtime (e.g. wasmtime, a browser, node, ...). Currently I've implemented host support in the form of Rust wasmtime bindings and JS web/node/deno bindings. For the compiled-to-wasm side I've only implemented Rust so far, but I hope to implement at least C in the near future as at least a proof-of-concept. The intention is that writing a language binding generator isn't the hardest thing in the world (but also not a trivial task), so other languages can be done as they come up as well.</p>",
        "id": 244208244,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1624916476
    },
    {
        "content": "<p>Thank you both for the answers so far! I'm looking forward to the future of witx-bindgen. Until there is an official way to integrate the tool in our toolchain (probably similar to cbindgen with <a href=\"http://build.rs\">build.rs</a>?), I think we'll generate and commit the files generated by the CLI tool to our VCS <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 244884319,
        "sender_full_name": "Benoît C.",
        "timestamp": 1625444529
    }
]