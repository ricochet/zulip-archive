[
    {
        "content": "<p>Hello everyone!</p>\n<p>I'd like to contribute to <code>rsix</code> and would like some guidance as to things I could implement or issues I could solve</p>",
        "id": 251915616,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1630690158
    },
    {
        "content": "<p>Hello and welcome! cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> for this -- he might have some thoughts on good starter issues</p>",
        "id": 251916033,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1630690349
    },
    {
        "content": "<p>Hello! Are there specific features you're interested in working on, or are you looking for ideas? :-)</p>",
        "id": 251923421,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630693680
    },
    {
        "content": "<p>Hello Dan and Chris! :D</p>\n<p>Nothing in specific right now (although making bindings for <code>mlock</code> and <code>mlockall</code> would be nice), I'd be happy helping in any way possible</p>",
        "id": 251927165,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1630695536
    },
    {
        "content": "<p>As it happens, I implemented <code>mlock</code> just yesterday :-)</p>",
        "id": 251929289,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630696599
    },
    {
        "content": "<p>But not <code>mlockall</code>, so that's something you could start with</p>",
        "id": 251929419,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630696676
    },
    {
        "content": "<p>And along those lines, <code>mincore</code>, <code>msync</code>, <code>mremap</code></p>",
        "id": 251930536,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630697285
    },
    {
        "content": "<p>Right on!!</p>\n<p>I've faced the same  <code>MCL_ONFAULT</code> issue before and resorted to FFI in order to get it (<a href=\"https://github.com/vrmiguel/bustd/blob/master/cc/helper.c\">https://github.com/vrmiguel/bustd/blob/master/cc/helper.c</a>)</p>\n<p>Would that be suitable for <code>rsix</code> or should we just ignore this constant for now?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/vrmiguel/bustd/blob/master/cc/helper.c\" style=\"background-image: url(https://opengraph.githubassets.com/f80b8fdae8cd3b97f42b85b2bae983a0ca440e56bbd79aa49249fa867da7490f/vrmiguel/bustd)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/vrmiguel/bustd/blob/master/cc/helper.c\" title=\"bustd/helper.c at master · vrmiguel/bustd\">bustd/helper.c at master · vrmiguel/bustd</a></div><div class=\"message_embed_description\">Process killer daemon for out-of-memory scenarios. Contribute to vrmiguel/bustd development by creating an account on GitHub.</div></div></div>",
        "id": 251931600,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1630697756
    },
    {
        "content": "<p>In general, it's fine to ignore stuff. In effect, we're currently ignoring <em>all</em> the <code>MCL_*</code> flags, so just implementing some of them is progress :-)</p>",
        "id": 251932003,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630697977
    },
    {
        "content": "<p>Also, yeah, in general we want to stay away from emulating things, or providing our own definitions. If someone really wants <code>MCL_ONFAULT</code>, the linux_raw backend should get it from linux-raw-sys (which already has a definition of <code>MCL_ONFAULT</code>), and the libc backend should get it from libc (which doesn't yet, so the first step would be to add it upstream)</p>",
        "id": 251932569,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630698261
    },
    {
        "content": "<p>No problem :D</p>\n<p>I've open a PR for mlockall and munlockall although it's still a WIP (no linux_raw support yet)</p>",
        "id": 251935277,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1630699687
    },
    {
        "content": "<p>I've previously done a conversion for mlockall's errnos into proper Rust error enums</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">errno</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Some or all of the memory identified by the operation could not be locked when the call was made.</span>\n<span class=\"w\">        </span><span class=\"n\">EAGAIN</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">CouldNotLockMemoryError</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// The flags argument is zero, or includes unimplemented flags.</span>\n<span class=\"w\">        </span><span class=\"n\">EINVAL</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">InvalidFlagsError</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Locking all of the pages currently mapped into the address space of the process</span>\n<span class=\"w\">        </span><span class=\"c1\">// would exceed an implementation-defined limit on the amount of memory</span>\n<span class=\"w\">        </span><span class=\"c1\">// that the process may lock.</span>\n<span class=\"w\">        </span><span class=\"n\">ENOMEM</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">TooMuchMemoryToLockError</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// The calling process does not have appropriate privileges to perform the requested operation</span>\n<span class=\"w\">        </span><span class=\"n\">EPERM</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">NoPermission</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Should not happen</span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Error</span>::<span class=\"n\">UnknownMlockallError</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 251935360,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1630699749
    },
    {
        "content": "<p>are higher-level error enums like that out of place for rsix?</p>",
        "id": 251935409,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1630699785
    },
    {
        "content": "<p>That's a good question. rsix doesn't yet provide any enums like that, but that doesn't mean it shouldn't.</p>",
        "id": 251936477,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630700372
    },
    {
        "content": "<p>For the more portable system calls, enums like that would sometimes get tricky, becuase there are a lot of subtle errno differences between eg. Linux and FreeBSD and other things.</p>",
        "id": 251936630,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630700449
    },
    {
        "content": "<p>I think my gut feeling is that rsix shouldn't define enums like that; that can be done in higher-level APIs that wrap rsix. But it's just a feeling, and I could be convinced otherwise.</p>",
        "id": 251938243,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1630701187
    },
    {
        "content": "<p>Makes sense!</p>",
        "id": 252465914,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1631110126
    },
    {
        "content": "<p>Hey there, Dan! </p>\n<p>I plan on finishing the PR soon(-ish), I just haven't had great availability :-P</p>",
        "id": 252466055,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1631110180
    },
    {
        "content": "<p>Hi! No worries :-)</p>",
        "id": 252466809,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1631110431
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> !</p>\n<p>so sorry for the delay</p>",
        "id": 257420213,
        "sender_full_name": "Vinícius Miguel",
        "timestamp": 1634152025
    },
    {
        "content": "<p>Hello!</p>",
        "id": 257428471,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1634155358
    },
    {
        "content": "<p>Is there anything you're blocked on, or that's confusing?</p>",
        "id": 258060366,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1634575566
    }
]