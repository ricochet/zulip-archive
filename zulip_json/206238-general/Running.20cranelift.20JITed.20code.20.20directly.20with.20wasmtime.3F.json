[
    {
        "content": "<p>Hi, looking at the jit example with cranelift, it does an unsafe jump into the pointer returned by <code>get_finalized_function</code> but I want to return to the launching code (host?) and would like to use wasmtime to run, what's the recommended way to do so?</p>",
        "id": 399206640,
        "sender_full_name": "John Barker",
        "timestamp": 1698630349
    },
    {
        "content": "<blockquote>\n<p>it does an unsafe jump into the pointer returned by get_finalized_function</p>\n</blockquote>\n<p>It does a regular call from which you can return: <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/bin/toy.rs#L53\">https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/bin/toy.rs#L53</a></p>\n<blockquote>\n<p>and would like to use wasmtime to run</p>\n</blockquote>\n<p>Wasmtime can only run wasm modules it compiled itself. What do you want to achieve with adding Wasmtime in the mix?</p>",
        "id": 399321990,
        "sender_full_name": "bjorn3",
        "timestamp": 1698678609
    },
    {
        "content": "<p>wasmtime has a lot of control over constraints and run time which i'd like to leverage, like running with limited fuel or epoch interruption</p>",
        "id": 399391439,
        "sender_full_name": "John Barker",
        "timestamp": 1698708084
    },
    {
        "content": "<p>Unfortunately you can't really have one and not the other: wasmtime's codegen works by plugging in runtime-specific behavior to Cranelift's Wasm frontend; there's no way out of the requirement to run Wasm.</p>\n<p>Another way of looking at this is: what is the platform you wish to have? Native code but with ...? If e.g. epoch interruption or memory sandboxing, that only is possible because Wasmtime compiles Wasm down to machine code, and so has the opportunity to inject its own instrumentation, interruption points, sandboxing, etc. If you already have native code, produced on your own, then wasmtime's runtime jumping to that code doesn't add anything</p>",
        "id": 399392277,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698708600
    },
    {
        "content": "<p>oh I think I miscommunicated, I'd like to use cranelift's JIT to generate the wasm, and have wasmtime run it, not one but not the other</p>",
        "id": 399392885,
        "sender_full_name": "John Barker",
        "timestamp": 1698709067
    },
    {
        "content": "<p>i.e. I want to generate cranelift IR, and have wasmtime run it</p>",
        "id": 399392987,
        "sender_full_name": "John Barker",
        "timestamp": 1698709119
    },
    {
        "content": "<p>ah, unfortunately Cranelift cannot generate Wasm</p>",
        "id": 399393004,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698709138
    },
    {
        "content": "<p>however there are a number of other Wasm compiler backends you could use if you want to generate it in-process</p>",
        "id": 399393041,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698709171
    },
    {
        "content": "<p>e.g. the <code>wasm-encoder</code> crate lets you emit it manually instruction-by-instruction; or there are a few higher-level IRs, like the <code>walrus</code> crate (mostly 1-to-1 with Wasm's structured control flow) or my <code>waffle</code> crate (an SSA IR in a CFG)</p>",
        "id": 399393118,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698709215
    },
    {
        "content": "<p>walrus looks like what I need, presumably it doesn't do any optimization?</p>",
        "id": 399393360,
        "sender_full_name": "John Barker",
        "timestamp": 1698709414
    },
    {
        "content": "<p>no, I don't think so; <code>waffle</code> does, but it could still use some work :-)</p>",
        "id": 399393474,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698709484
    },
    {
        "content": "<p>interesting, is waffle/walrus considered a backend even tho it generates wasm which is not host native?</p>",
        "id": 399393984,
        "sender_full_name": "John Barker",
        "timestamp": 1698709843
    },
    {
        "content": "<p>oh and waffle is SSA IR, perfect</p>",
        "id": 399394150,
        "sender_full_name": "John Barker",
        "timestamp": 1698709971
    },
    {
        "content": "<p>yep, both are \"backends\" in the sense that they lower an IR to some target</p>",
        "id": 399400468,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698713693
    },
    {
        "content": "<p>Wasm is a virtual ISA but still an ISA</p>",
        "id": 399400486,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698713706
    },
    {
        "content": "<p>(and e.g. LLVM considers Wasm an ordinary target architecture and uses its usual backend framework for it, too)</p>",
        "id": 399400519,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698713730
    },
    {
        "content": "<p>thanks, is there any chance you could make a link to the github repo in the <a href=\"http://crates.io\">crates.io</a> listing? i.e. <a href=\"https://github.com/cfallin/waffle\">https://github.com/cfallin/waffle</a> and is there an example anywhere? a simple hello world?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cfallin/waffle\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f862821707e5127e6a66dde5b009b75ffe66424b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643636313136313961643633386165313531636635323562356563356333663862353265363933396139653165393066613266383738633864363937343130642f6366616c6c696e2f776166666c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cfallin/waffle\" title=\"GitHub - cfallin/waffle\">GitHub - cfallin/waffle</a></div><div class=\"message_embed_description\">Contribute to cfallin/waffle development by creating an account on GitHub.</div></div></div>",
        "id": 399400922,
        "sender_full_name": "John Barker",
        "timestamp": 1698713959
    },
    {
        "content": "<p>unfortunately there aren't too many examples of its use beyond <a href=\"http://github.com/cfallin/weval\">github.com/cfallin/weval</a>, which is the use-case that drove its design/implementation</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://github.com/cfallin/weval\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/25258b03d5a75dedec837ab32a420fdc8157eee4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346362353761383039333864666432386564326362393862333430313663316363623664626234613038356465326333623964353839656439663831613664372f6366616c6c696e2f776576616c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://github.com/cfallin/weval\" title=\"GitHub - cfallin/weval\">GitHub - cfallin/weval</a></div><div class=\"message_embed_description\">Contribute to cfallin/weval development by creating an account on GitHub.</div></div></div>",
        "id": 399415855,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698721175
    },
    {
        "content": "<p>i.e. it's more or less in a \"wrote it for myself, others are free to use and contribute\" state of early-open-source-project lifecycle -- PRs welcome :-)</p>",
        "id": 399415905,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698721203
    },
    {
        "content": "<p>it's not obvious how you'd generate IR by hand like say the example in here: <a href=\"https://crates.io/crates/wasm-encoder\">https://crates.io/crates/wasm-encoder</a> , is that intended?</p>",
        "id": 399431337,
        "sender_full_name": "John Barker",
        "timestamp": 1698730126
    },
    {
        "content": "<p>no, it's not intended to be unobvious -- it's just a minimal API put together for the use of another project; improvements welcome :-)</p>",
        "id": 399553848,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698767992
    },
    {
        "content": "<p>not quite sure where I'd start tbqh, thanks anyway</p>",
        "id": 399624863,
        "sender_full_name": "John Barker",
        "timestamp": 1698798163
    }
]