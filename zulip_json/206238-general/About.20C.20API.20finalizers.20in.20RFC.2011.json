[
    {
        "content": "<p>After <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\">https://github.com/bytecodealliance/wasmtime/pull/2897</a> is merged, in the C API, the only finalizers that need to be called are finalizers for engine/store, right? I checked the examples and there are still calls to other finalizers present (e.g. linker) though</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\" style=\"background-image: url(https://opengraph.githubassets.com/55c771a6975cde739b7bdb77c91379257904f07ff39082d96ea5e522d0849db7/bytecodealliance/wasmtime/pull/2897)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2897\" title=\"Implement RFC 11: Redesigning Wasmtime's APIs by alexcrichton 路 Pull Request #2897 路 bytecodealliance/wasmtime\">Implement RFC 11: Redesigning Wasmtime's APIs by alexcrichton 路 Pull Request #2897 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR is an implementation of RFC 11 which is a redesign of Wasmtime&#39;s APIs.\n\nNote: The RFC is not merged at this time, so this PR is purely meant for informational purposes and review. This ...</div></div></div>",
        "id": 238626584,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1620915265
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 238627879,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1620915801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408159\">@Cheng Shao</span> mostly, yeah. Finalizers for func/table/instance/memory/global are all being removed since they no longer need to be finalized</p>",
        "id": 238627974,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620915841
    },
    {
        "content": "<p>modules/config/linker all still need finalization though</p>",
        "id": 238628031,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620915848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Thanks for answering! Also, is there still constraint that the finalizers must be run on the same system thread where they are created?</p>",
        "id": 238628445,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1620916032
    },
    {
        "content": "<p>that constraint has been lifted! (one of the major goals of the RFC) -- all finalizers can be run concurrently on any thread</p>",
        "id": 238628482,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916058
    },
    {
        "content": "<p>the main reason for that is that finalizers never finalize aliasing data, everything is entirely separately owned (e.g. a linker is entirely disconnected from a store)</p>",
        "id": 238628553,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916084
    },
    {
        "content": "<p>(my intention is to cover all this in the documentation, which is yet-to-be-written at this point still)</p>",
        "id": 238628602,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916106
    },
    {
        "content": "<p>Excellent news to hear! Thanks for all the hard work. Not before looking at the PR did I realize that there used to be such a constraint</p>",
        "id": 238628694,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1620916158
    },
    {
        "content": "<p>It's not technically so restrictive that it has to be run from the original thread, only that store-related objects (e.g. stores, funcs, globals, memories, etc) must all be dropped on the same thread. They can all migrate somewhere else but it has to be all at once. This is such a fine point though that it's basically technically infeasible</p>",
        "id": 238628998,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916282
    },
    {
        "content": "<p>So wasmtime doesn't actually use thread local storage, and as long as there are no concurrent usages from different threads, it doesn't matter where the methods are called?</p>",
        "id": 238629692,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1620916558
    },
    {
        "content": "<p>more-or-less</p>",
        "id": 238629964,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916659
    },
    {
        "content": "<p>nonatomic reference counting is used for Store objects today, which is basically the constraint</p>",
        "id": 238629980,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916670
    },
    {
        "content": "<p>(but with the new API there's no reference counting at all, everything is separately owned, including the Store)</p>",
        "id": 238630043,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620916686
    }
]