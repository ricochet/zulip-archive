[
    {
        "content": "<p>Given a wasm file that has been stripped of debug symbols with <code>wasm-opt</code>, the original wasm file (with debug symbols) and a stack trace from WAMR:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\">#00 $f117</span>\n<span class=\"c1\">#01 $f109</span>\n<span class=\"c1\">#02 $f108</span>\n<span class=\"c1\">#03 $f97</span>\n<span class=\"c1\">#04 $f96</span>\n<span class=\"c1\">#05 $f103</span>\n<span class=\"c1\">#06 $f176</span>\n<span class=\"c1\">#07 $f14</span>\n<span class=\"c1\">#08 $f15</span>\n<span class=\"c1\">#09 $f16</span>\n<span class=\"c1\">#10 $f17</span>\n<span class=\"c1\">#11 $f12</span>\n<span class=\"c1\">#12 $f21</span>\n<span class=\"c1\">#13 $f20</span>\n<span class=\"c1\">#14 $f64</span>\n<span class=\"c1\">#15 $f19</span>\n<span class=\"c1\">#16 __main_void</span>\n<span class=\"c1\">#17 _start</span>\n</code></pre></div>\n<p>or Wasmtime:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">0</span>:<span class=\"w\"> </span>0x4590<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">117</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">1</span>:<span class=\"w\"> </span>0x4433<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">109</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">2</span>:<span class=\"w\"> </span>0x43d4<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">108</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">3</span>:<span class=\"w\"> </span>0x3791<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">97</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">4</span>:<span class=\"w\"> </span>0x370a<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">96</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">5</span>:<span class=\"w\"> </span>0x3e08<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">103</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">6</span>:<span class=\"w\"> </span>0x8a1a<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">176</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">7</span>:<span class=\"w\">  </span>0x5dc<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">14</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">8</span>:<span class=\"w\">  </span>0x5e3<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">15</span>&gt;\n<span class=\"w\">           </span><span class=\"m\">9</span>:<span class=\"w\">  </span>0x5e9<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">16</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">10</span>:<span class=\"w\">  </span>0x5ef<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">17</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">11</span>:<span class=\"w\">  </span>0x559<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">12</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">12</span>:<span class=\"w\">  </span>0x721<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">21</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">13</span>:<span class=\"w\">  </span>0x6c1<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">20</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">14</span>:<span class=\"w\"> </span>0x1c43<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">64</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">15</span>:<span class=\"w\">  </span>0x66e<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">19</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">16</span>:<span class=\"w\">  </span>0x60b<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">18</span>&gt;\n<span class=\"w\">          </span><span class=\"m\">17</span>:<span class=\"w\">  </span>0x390<span class=\"w\"> </span>-<span class=\"w\"> </span>&lt;unknown&gt;!&lt;wasm<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"m\">7</span>&gt;\n</code></pre></div>\n<p>What's the best tool/library to symbolicate the stack trace and get the function names? Even better, getting file names and line numbers. </p>\n<p>I could use something like <a href=\"https://github.com/getsentry/symbolic\">https://github.com/getsentry/symbolic</a>, but I was wondering if there are other tools/libraries.<br>\n<span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/getsentry/symbolic\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c668d2aea4f2cbc753b299c8406af8355ba311e6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653339353831313937656431333138313963326336376261356339353061666135393132366565336563653961666135396430336137303735373264663363312f67657473656e7472792f73796d626f6c6963)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/getsentry/symbolic\" title=\"GitHub - getsentry/symbolic: Stack trace symbolication library written in Rust\">GitHub - getsentry/symbolic: Stack trace symbolication library written in Rust</a></div><div class=\"message_embed_description\">Stack trace symbolication library written in Rust. Contribute to getsentry/symbolic development by creating an account on GitHub.</div></div></div>",
        "id": 407434461,
        "sender_full_name": "Enrico Loparco",
        "timestamp": 1702374070
    },
    {
        "content": "<p>I wrote up <code>wasm-tools addr2line</code> as a subcommand which takes a WebAssembly offset and maps it to a filename/line number which might help here. The short answer though is the only real way to do this today is DWARF information, so that DWARF would need to be preserved through <code>wasm-opt</code>.</p>",
        "id": 407499750,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1702394067
    },
    {
        "content": "<p>I don't know much about that symbolic crate myself, but I would naively assume that it probably doesn't have wasm support and it probably wouldn't be too too hard to port it given that all the primitives are roughly the same</p>",
        "id": 407499896,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1702394113
    },
    {
        "content": "<p>Thanks, I tried <code>wasm-tools addr2line</code>.  Is there anything similar, but starting from the function index instead of the address? In the example above, I would pass <code>14</code> instead of <code>0x5dc</code>. </p>\n<p>Because, after running <code>wasm-opt --strip-debug --strip-dwarf --strip-producers --strip-target-features</code>, the addresses of the stripped wasm file are different from the ones of the original wasm file. The function indexes are the same though. <br>\nI guess I would have to do it myself, through some parsing to get the addresses starting from the indexes.</p>",
        "id": 407614559,
        "sender_full_name": "Enrico Loparco",
        "timestamp": 1702434486
    }
]