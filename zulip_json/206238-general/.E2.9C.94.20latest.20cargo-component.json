[
    {
        "content": "<p>Hi! I'm trying to use the latest <code>cargo-component</code> (and everything else), including the new WIT syntax with packages etc. I used to have some example components built with <code>cargo-component</code> for testing some WASI preview2 host implementations, which I did by just putting the relevant WIT files in the <code>deps</code> directory. This worked as expected but no longer because the latest <code>cargo-component</code> no longer calls <code>wit-parser</code>'s <code>Resolve.push_dir</code>: <a href=\"https://github.com/bytecodealliance/cargo-component/pull/83/files#diff-c030113407a164cbd1ad3500c613f59abd4346ba13ee5b653c56f393c937b0a8L373-R363\">https://github.com/bytecodealliance/cargo-component/pull/83/files#diff-c030113407a164cbd1ad3500c613f59abd4346ba13ee5b653c56f393c937b0a8L373-R363</a> Because of this change the <code>deps</code> subdirectory of the component's wit dir never gets parsed and the only way to add dependencies is to depend on _components_ either using a registry or a local path but not just by providing WITs. My question is whether this is intentional or not?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/pull/83/files#diff-c030113407a164cbd1ad3500c613f59abd4346ba13ee5b653c56f393c937b0a8L373-R363\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5da39f1e5e1102e7735a58e4a214faf57636a855\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3530393636363f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/pull/83/files#diff-c030113407a164cbd1ad3500c613f59abd4346ba13ee5b653c56f393c937b0a8L373-R363\" title=\"Update dependencies to latest. by peterhuene · Pull Request #83 · bytecodealliance/cargo-component\">Update dependencies to latest. by peterhuene · Pull Request #83 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">This PR updates the dependencies of cargo-component to the latest.\nIt includes support for the latest component model binary AST and WIT.\nAdditionally, the WASI preview1 adapters have been updated ...</div></div></div>",
        "id": 364023980,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686062528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> is the best person to answer this. He wrote a document describing this design. The way I interpret it and the last example at the end, is that a registry is not necessarily required and a wit directory can be passed in directly: <a href=\"https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md#exporting-only-functions-from-a-component\">https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md#exporting-only-functions-from-a-component</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md#exporting-only-functions-from-a-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0579b22acc5d7a9ea622b961e8cc4e79e47f24c7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323364303830613362343862363033663737306162633439646339333633376566343662353731346135376632353266343534343233636665336466663164652f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md#exporting-only-functions-from-a-component\" title=\"cargo-component/registries.md at main · bytecodealliance/cargo-component\">cargo-component/registries.md at main · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - cargo-component/registries.md at main · bytecodealliance/cargo-component</div></div></div>",
        "id": 364033716,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1686064480
    },
    {
        "content": "<p>Yes I read this. The <code>wit</code> directory can be passed directly and it parses it as a wit package, but it no longer reads the <code>deps</code> subdir (because that is implemented in <code>wit-parser</code> and only happens if a _directory_ is pushed to the resolver, but after the latest change this is no longer the case - instead <code>UnresolvedPackage::parse_dir</code> get called which is not doing this recursive loading of dependencies. It feels like a bug to me but of course it is fully possible I'm missing something about the direction. If it is a bug though, I'm happy to try and submit a fix</p>",
        "id": 364035824,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686064861
    },
    {
        "content": "<p>This wasn't an intentional break, I forgot that deps is only checked that way.</p>\n<p>I have a fix in mind that I'll try to get up today.</p>",
        "id": 364044106,
        "sender_full_name": "Peter Huene",
        "timestamp": 1686066558
    },
    {
        "content": "<p>Oh nice thank you!</p>",
        "id": 364044197,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686066582
    },
    {
        "content": "<p>So unfortunately my fix may require a little bit of change on your end to make work, but with my fix it should be possible to replicate the same <code>deps/</code> behavior.</p>\n<p>With the fix, you should be able to point <code>cargo-component</code> to WIT packages on disk as the dependencies to your WIT. The WIT packages themselves can have <code>deps/</code> directories in them, but your top-level dependencies in the WITs you are authoring need entries in <code>Cargo.toml</code>:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package.metadata.component.target]</span>\n<span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wit\"</span>\n\n<span class=\"k\">[package.metadata.component.target.dependencies]</span>\n<span class=\"s\">\"foo:bar\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wit/deps/foo-bar\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"s\">\"baz:jam\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wit/deps/baz-jam\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">...</span>\n</code></pre></div>\n<p>This is an unfortunate consequence of supporting both dependencies from a registry and local; <code>wit-parser</code> doesn't know anything about resolving foreign dependencies other than an explicit <code>Resolve::push_dir</code> which will _only_ resolve dependencies from <code>deps/</code>, which prevents <code>cargo-component</code> to also support the registry.</p>\n<p>I hope this isn't too big of a hurdle for you.</p>",
        "id": 364082572,
        "sender_full_name": "Peter Huene",
        "timestamp": 1686075919
    },
    {
        "content": "<p>I actually tried exactly doing this in <code>Cargo.toml</code> before digging into the code and understanding how it (does not) works :) So I think it is a good compromise</p>",
        "id": 364181368,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686121348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> I tried the fix and I think we have one more problem - the listed dependencies are resolved in isolation so they cannot refer to each other. For example if I the wasi WITs from the wasmtime repo in the deps and try to depend on <code>wasi:http</code>, it referes to <code>wasi:io</code> and <code>wasi:poll</code> in the http module, and adding those to <code>Cargo.toml</code> does not help. A workaround would be to duplicate all these cross-references in <code>deps</code> within<code>http</code> etc but I think it should work by adding all these listed dependencies to a shared world.</p>",
        "id": 364343206,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686157270
    },
    {
        "content": "<p>Good point, yeah, let's see if we can improve this; otherwise I'll just do what Dan suggested in the PR and use <code>push_dir</code> if there's a <code>deps</code> directory detected and just do what we did prior (can't mix-and-match registry dependencies with local dependencies)</p>",
        "id": 364343869,
        "sender_full_name": "Peter Huene",
        "timestamp": 1686157420
    },
    {
        "content": "<p>I think the plan of attack here is to duplicate what <code>push_dir</code> is doing internally, namely the topological sort and visiting of the dependencies (thus, the ordering in <code>Cargo.toml</code> doesn't matter), and merge them into a singular shared resolve.</p>\n<p>The chief difference between the two is that <code>cargo-component</code> won't scan the file system.</p>",
        "id": 364347010,
        "sender_full_name": "Peter Huene",
        "timestamp": 1686158166
    },
    {
        "content": "<p>I put up <a href=\"https://github.com/bytecodealliance/cargo-component/pull/86\">https://github.com/bytecodealliance/cargo-component/pull/86</a> with that fix; let me know if that improves things</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/pull/86\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5ed844ccbb78fa6250e0733f067c526a9afd5186\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343731376333633136343532313639393861626164656631343930366363336530376434396363626333373937346334633366383434306231646236306235332f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f70756c6c2f3836)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/pull/86\" title=\"Allow WIT package dependencies to be shared. by peterhuene · Pull Request #86 · bytecodealliance/cargo-component\">Allow WIT package dependencies to be shared. by peterhuene · Pull Request #86 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">This PR removes calls to Resolve::push_dir when processing target dependencies.\nAs a result, no WIT files will be parsed from a deps directory automatically, so each dependency must be specified in...</div></div></div>",
        "id": 364425822,
        "sender_full_name": "Peter Huene",
        "timestamp": 1686189227
    },
    {
        "content": "<p>Looks good, I will try it out today!</p>",
        "id": 364440888,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686199830
    },
    {
        "content": "<p>Tried it out, it works well in my examples! Thank you!</p>",
        "id": 364466809,
        "sender_full_name": "Daniel Vigovszky",
        "timestamp": 1686209357
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"620014\">Daniel Vigovszky</span> has marked this topic as resolved.</p>",
        "id": 364481412,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686213167
    }
]