[
    {
        "content": "<p>I've been looking through some WASM code generated by compiling a Rust program using <code>wasm32-wasip1</code> target and I've noticed that it contains a lot of blocks that are used as ifs. As far as I understand instead of an if like:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">i32.eqz</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">then</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$bar</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Some of the generated code used <code>br_if</code>:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">block</span> <span class=\"nv\">$b1</span>\n  <span class=\"c1\">;; if $foo is *not* equal zero, we skip to the end of the block,</span>\n  <span class=\"c1\">;; otherwise we handle the if case</span>\n  <span class=\"p\">(</span><span class=\"nb\">br_if</span> <span class=\"nv\">$b1</span> <span class=\"p\">(</span><span class=\"nb\">i32.ne</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\">local.get</span> <span class=\"nv\">$foo</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$bar</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I've create a simple benchmark doing the following for ifs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">then</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">eqz</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">then</span>\n<span class=\"w\">      </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"mi\">248</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">ifs</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">    </span><span class=\"p\">))))</span>\n<span class=\"w\"> </span><span class=\"err\">```</span>\n\n<span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">benchmark</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">if_br</span><span class=\"err\">`</span><span class=\"p\">:</span>\n\n<span class=\"err\">```</span><span class=\"n\">wat</span>\n<span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"cp\">$foo1</span>\n<span class=\"p\">(</span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"cp\">$foo2</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"mi\">248</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">blocks</span>\n<span class=\"p\">(</span><span class=\"n\">br_if</span><span class=\"w\"> </span><span class=\"cp\">$foo2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">br_if</span><span class=\"w\"> </span><span class=\"cp\">$foo1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n</code></pre></div>\n<p>Then I looped both pieces of code and I measured the runtime. When executing the files in Wasmtime I consistently see the block version being faster then the if version. full runtime is ~300ms for blocks vs ~540ms for ifs. I've also checked on node.js and it's ~1s vs ~1.5s, so it seems like it's not only a detail of Wasmtime implementation.</p>\n<p>Is it something that's expected? Anyone more familiar with the VM implementation knows why it would be the case?</p>",
        "id": 483015059,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731934665
    },
    {
        "content": "<p>Definitely not expected. One thing I notice is that the conditions aren't the same -- though both should be constant-folded away. Could you dump the CLIF and/or machine code from this? (For the latter, <code>wasmtime compile</code> then <code>objdump</code>)</p>",
        "id": 483104927,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731957578
    },
    {
        "content": "<p>Yeah, in order to go through all of the <code>br_if</code> statements the statement has to be reversed.</p>\n<p>I added the source and binaries here: <a href=\"https://gist.github.com/drogus/019496b172bd33c8b936cbbd168254c2\">https://gist.github.com/drogus/019496b172bd33c8b936cbbd168254c2</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/drogus/019496b172bd33c8b936cbbd168254c2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/drogus/019496b172bd33c8b936cbbd168254c2\" title=\"blocks-objdump\">blocks-objdump</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 483123772,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731964137
    },
    {
        "content": "<p>oh sorry, I meant an objdump of the .cwasm file, showing native assembly</p>",
        "id": 483127195,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731965447
    },
    {
        "content": "<p>How do I do that? I tried <code>wasm-objdump</code>, but it works only with .wasm files. Wasmtime doesn't seem to have <code>objdump</code> as a subcommand and when I try <code>wasm-tools objdump</code> it says:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">blocks</span><span class=\"p\">.</span><span class=\"n\">cwasm</span><span class=\"err\">`</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">input</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">aren</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span>\n</code></pre></div>",
        "id": 483131127,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731966886
    },
    {
        "content": "<p>I think he means the <code>objdump</code> from e.g. GNU Binutils or similar, i.e. one meant for native binaries, not Wasm.</p>",
        "id": 483131410,
        "sender_full_name": "Joel Dice",
        "timestamp": 1731966993
    },
    {
        "content": "<p>Oh, ok, I thought it needs to be a WASM specific tool <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I updated the gist</p>",
        "id": 483133615,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731967871
    },
    {
        "content": "<p>woah, fascinating -- in the first (<code>blocks</code>) case all the branches are elided, while in the second case they're still there. We don't do any branch-folding in the mid-end, so probably something is different in the Wasm translation itself</p>",
        "id": 483135412,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731968555
    },
    {
        "content": "<p>I don't have a ton of time to dig into this right now but if you could file an issue so we can track this, that'd be very useful!</p>",
        "id": 483135479,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731968585
    }
]