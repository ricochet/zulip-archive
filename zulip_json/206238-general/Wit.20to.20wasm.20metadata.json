[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">add</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">anotheradder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I have the following .wit file, now when I compile the <code>adder</code> component with <code>cargo component</code> why isn't the wit metadata (the world and package name) included in the component?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">add</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I think it should instead be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">add</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">add</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 420027675,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707219225
    },
    {
        "content": "<p>This would make it easier to verify if a component targets a world, because right now I have to.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>It would be a lot easier to just be able to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Maybe <code>wasm-tools</code> could even be helpful and output that the component targets the <code>adder</code> world.</p>",
        "id": 420028461,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707219516
    },
    {
        "content": "<p>Also maybe comments of the wit file can be retained in the component for documentation</p>",
        "id": 420043175,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707224772
    },
    {
        "content": "<p>the name of a <code>world</code> and the origin of its package is lost when you create a component, only the provenance of <code>interface</code> items is retained. The <code>wasm-tools component wit</code> subcommand effectively synthesizes the strings \"root\" and \"component\" there in <code>package root:component;</code> and <code>world root</code>. In that sense you won't be able to retain <code>world adder</code> or <code>world anotheradder</code>. There's various reasons for this I can expand on if you're interested as well.</p>\n<p>As for documentation, that'd be nice to have! The WIT-to-wasm-encoded-WIT preserves comments, but we currently don't preserve comments when a component itself is created. That seems like a good idea though! If you're up for it mind opening an issue?</p>",
        "id": 420075508,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707234148
    },
    {
        "content": "<p>The issue would need to be opened for cargo component right?</p>",
        "id": 420085661,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707236915
    },
    {
        "content": "<p>If those synthetic names are needed for some implementation/ specification reason, can the original world and package maybe be included as metadata in the binary which is then used by tools like \"targets\".</p>",
        "id": 420086262,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707237076
    },
    {
        "content": "<p>Something like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">rootFromWorld</span><span class=\"o\">=</span><span class=\"n\">adder</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">rootFromPackage</span><span class=\"o\">=</span><span class=\"n\">example</span>:<span class=\"nc\">add</span>\n</code></pre></div>",
        "id": 420089447,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707237939
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/cargo-component/issues/229\">https://github.com/bytecodealliance/cargo-component/issues/229</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/issues/229\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2016a111539f0ab53ee051b628944f02bbc11d32\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313030393936653664353263346233313336346464633935343030336465373065636234623639636463366662333733313462613230653530303230623464392f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f6973737565732f323239)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/issues/229\" title=\"Preserve comments from wit file in the binary 路 Issue #229 路 bytecodealliance/cargo-component\">Preserve comments from wit file in the binary 路 Issue #229 路 bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">Comments from the wit file are already, copied to the bindings.rs file. These should also be contained in the final component, so that wasm-tools component wit can provide some useful documentation...</div></div></div>",
        "id": 420094101,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707239198
    },
    {
        "content": "<p>Oh sorry this'd probably be an issue for the <code>wasm-tools</code> repo, but we can take it from here! Thanks!</p>",
        "id": 420120503,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707248059
    },
    {
        "content": "<p>(busy day for me)</p>",
        "id": 420120542,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707248067
    },
    {
        "content": "<p>i caught this on github before zulip but <a href=\"https://github.com/WebAssembly/component-model/issues/213\">https://github.com/WebAssembly/component-model/issues/213</a> is the CM spec issue about this</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/213\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f3c2d82e6955b81a6429fc2f8e3fe6544b1f46b0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306165336530323134303539626631656232373066623238636162613838326337663538666338316530366664663032366163646634653462383330633537372f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323133)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/213\" title=\"Wit text format comments encoded in the binary Wasm binary 路 Issue #213 路 WebAssembly/component-model\">Wit text format comments encoded in the binary Wasm binary 路 Issue #213 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">This has been discussed. Formally, creating an issue for it. Currently, we lose comments / docs from Wit text formats when compiling to the binary Wasm component file format. This is especially an ...</div></div></div>",
        "id": 420121501,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707248428
    },
    {
        "content": "<p>agree that an issue for implementing it would need to be on <code>BytecodeAlliance/wasm-tools</code></p>",
        "id": 420121612,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707248475
    }
]