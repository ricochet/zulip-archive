[
    {
        "content": "<p>Hi guys, grabbed repo, created a CMakefiles.txt. <br>\nGet this : <a href=\"https://pastebin.com/t80r554J\" title=\"https://pastebin.com/t80r554J\">https://pastebin.com/t80r554J</a><br>\nStuck as there appears to be no  wasm-micro-runtime\\core\\shared\\platform windows subdir with the file its looking for.</p>\n<p>noob to the system. help :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/t80r554J\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/t80r554J\" title=\"Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.18363.  The C  - Pastebin.com\">Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.18363.  The C  - Pastebin.com</a></div></div></div>",
        "id": 195530242,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588060912
    },
    {
        "content": "<p>unsure where I should set WAMR_RUNTIME_LIB_SOURCE to</p>",
        "id": 195530398,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588060995
    },
    {
        "content": "<p>looks like I need to set WAMR_BUILD_PLATFORM to something but to build on windows, what ? as stated, the file its looking for isn't in the tree as far as I can see.</p>",
        "id": 195530858,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588061283
    },
    {
        "content": "<p>you build this on windows normally or I'm doing something new ?</p>",
        "id": 195530900,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588061321
    },
    {
        "content": "<p>It indeed seems that there is no windows support yet. <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/port_wamr.md\" title=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/port_wamr.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/port_wamr.md</a> describes how to port WAMR though if you want to try it yourself.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/port_wamr.md\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/port_wamr.md\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 195531145,
        "sender_full_name": "bjorn3",
        "timestamp": 1588061487
    },
    {
        "content": "<p>mmmmkay :) thanks bjorn3.  as wasm is in browsers &amp; browsers run on windows that's surprising. suppose firefox &amp; chrome use different runtimes.<br>\ncan you offer any insight ? I'm wanting a wasm runtime to add to our 3D web browser to replace .net runtime &amp; mono. thought maybe this was a good choice. then again maybe its not. unsure.</p>",
        "id": 195531321,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588061629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297332\">@Steve Williams</span> you could look into another one of our projects, <a href=\"https://github.com/bytecodealliance/wasmtime\" title=\"https://github.com/bytecodealliance/wasmtime\">Wasmtime</a>, which works on Windows (and macOS, Linux, and some other systems) and is optimized for embedding.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195533865,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588063314
    },
    {
        "content": "<p>hi till, I spotted wasmtime but wasn't sure what it was. does it also have an embedding API. wanting something close to mono's native interface binding. spotted this for micro-runtime. does wasmtime have similar ? thanks for your assistance.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/embed_wamr.md\" title=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/embed_wamr.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/embed_wamr.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/embed_wamr.md\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/master/doc/embed_wamr.md\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 195534756,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588063879
    },
    {
        "content": "<p>It does, yes. See the documentation for a few existing embeddings, and the C embedding API here: <a href=\"https://github.com/bytecodealliance/wasmtime#language-support\" title=\"https://github.com/bytecodealliance/wasmtime#language-support\">https://github.com/bytecodealliance/wasmtime#language-support</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime#language-support\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime#language-support\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195534988,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588064009
    },
    {
        "content": "<p>think we have a winner - cheers :)</p>\n<p>time to experiment. update when I have something.</p>",
        "id": 195535105,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588064070
    },
    {
        "content": "<p>We also have support for debugging of the Wasm code with gdb/lldb, which often helps a lot with figuring out what's going wrong in embedding scenarios. Sadly no Visual Studio debugger, because that requires a completely different debug info format, but Visual Studio Code works, for example</p>",
        "id": 195535177,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588064123
    },
    {
        "content": "<p>yeah, spotted the lldb stuff. looking forwards to having that running in vr :) so you can debug your 3d stuff right alongside it. not sure if gimmick or genuinely useful at this point - guess we'll see :)</p>",
        "id": 195535326,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588064208
    },
    {
        "content": "<p>interesting we can use visual studio code for more traditional debugging. visual studio proper has got too big &amp; bulky anyway. for all use cases. asking webdevs to install gigabytes to debug a basic script is one of the reasons for junking our .net assembly approach.</p>\n<p>input appreciated &amp; project sounds great. time to dive in :)</p>",
        "id": 195535530,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588064343
    },
    {
        "content": "<p>Great! I'd love to hear how things are going, whether you run into issues or everything goes smoothly <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 195535778,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588064497
    },
    {
        "content": "<p>back with questions if I get stuck :)</p>",
        "id": 195535925,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588064591
    },
    {
        "content": "<p>k, installed wasmtime windows installer. it installs wasmtime.exe . no library to build against for embedding applications such as ours. having binary library &amp; header files in that install would eliminate a pain point. so installer no use at this point, guess its back to git repo &amp; figure out how to build what I need. ideally that would have come later. experiment first, build from scratch later is my prefered development path.</p>",
        "id": 195540420,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588067470
    },
    {
        "content": "<p>For embedding wasmtime, you might wanna check out these two crates:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api\" title=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api\">api</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\" title=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\">c-api</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/api\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195541214,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588067923
    },
    {
        "content": "<p>I don't do crates :) can I not get a zip with .lib &amp; .h in it :) suppose I have to figure out this weird system.</p>",
        "id": 195541353,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588068014
    },
    {
        "content": "<p>ewwww rust. this stuff has to go fast. not sold its the way.</p>",
        "id": 195541483,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588068086
    },
    {
        "content": "<p>don't much care what you do under the hood. if you can get it fast in rust, fine. but I'm a straight c++ guy. I want a library and header files. the end.</p>\n<p>hate rust syntax so not going there myself.</p>",
        "id": 195541659,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588068189
    },
    {
        "content": "<p>Oh, right. So I reckon you should checkout the repo (with the submodule) and specifically look into <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\" title=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\">c-api</a>, <a href=\"https://github.com/WebAssembly/wasm-c-api\" title=\"https://github.com/WebAssembly/wasm-c-api\">wasm-c-api</a>, and wasmtime C-headers <a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api/include\" title=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api/include\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api\" title=\"WebAssembly/wasm-c-api\">WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Wasm C API prototype. Contribute to WebAssembly/wasm-c-api development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api/include\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/master/crates/c-api/include\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195541713,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588068237
    },
    {
        "content": "<p>hahaha, I'm exactly the opposite, used to code a lot in C++ and now can't look at it. Rust is so much more readable for me :D</p>",
        "id": 195541825,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588068290
    },
    {
        "content": "<p>Anyhow, I'll try to help out here but I'm not an expert in embedding Wasmtime in other languages but Rust</p>",
        "id": 195541887,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588068314
    },
    {
        "content": "<p>thanks. the bit I don't currently understand is where the library my c/c++ program links against is.  a .lib file on windows.</p>\n<p>happy to build myself. ideally from a script or cmake in the root so I don't have to learn a new system.</p>\n<p>or ideally, the binary library would be in the windows installer, along with a simple embedding example I can build &amp; run to verify all is ok before proceeding with development.</p>",
        "id": 195541994,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588068392
    },
    {
        "content": "<p>do I use rust build thingies to get me a library I can link to from C/C++ ? </p>\n<p>confused. not seeing an on ramp here.</p>",
        "id": 195542718,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588068899
    },
    {
        "content": "<p>thus far I've got build v8 as that defines wasm-c-api, but that's not wasmtime, its the v8 runtime with all its javascript stuff too.<br>\nmozilla also have an implementation. am happy to try yours. if there's a piece of the puzzle I need that isn't ready yet, I can shelf this for a while.</p>",
        "id": 195543713,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588069476
    },
    {
        "content": "<p>I think this is what you're looking for then: <a href=\"https://github.com/bytecodealliance/wasmtime/releases/download/v0.15.0/wasmtime-v0.15.0-x86_64-windows-c-api.zip\" title=\"https://github.com/bytecodealliance/wasmtime/releases/download/v0.15.0/wasmtime-v0.15.0-x86_64-windows-c-api.zip\">wasmtime-v0.15.0-x86_64-windows-c-api.zip</a> :-)</p>",
        "id": 195545319,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588070462
    },
    {
        "content": "<p>This archive contains both headers and static/dynamic libs</p>",
        "id": 195545371,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588070483
    },
    {
        "content": "<p>I think it comes with both <code>.lib</code> and <code>.dll</code> but you might want to verify me here :-)</p>",
        "id": 195545395,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588070502
    },
    {
        "content": "<p>oh you rock, Jakub :) thanks so much :)</p>",
        "id": 195545402,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588070505
    },
    {
        "content": "<p>anytime!</p>",
        "id": 195545410,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588070512
    },
    {
        "content": "<p>lemme know how you're getting on! I'll do my best to help out the best I can!</p>",
        "id": 195545458,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588070530
    },
    {
        "content": "<p>looks to be both static &amp; dynamic linked versions there - perfect. is there also a 32 bit equivalent ? thinking of dropping our 32 bit support but I'd like that to be optional rather than forced.</p>",
        "id": 195545693,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588070707
    },
    {
        "content": "<p>Hmm, I don't think we have 32bit versions. For that, I think you'd need to build it yourself, although I wonder if it'd build just fine.</p>",
        "id": 195545936,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588070882
    },
    {
        "content": "<p>looks to be 64 bit only prebuilt for now. guess we're running 64 bit :) </p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.15.0\" title=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.15.0\">https://github.com/bytecodealliance/wasmtime/releases/tag/v0.15.0</a></p>\n<p>32 bit has its advantages as pointers are half the size so caching better, but whatever. lets get something running.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.15.0\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/v0.15.0\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195546096,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588070971
    },
    {
        "content": "<p>cheers :)</p>",
        "id": 195546108,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588070979
    },
    {
        "content": "<p>will work with what you have pre-built for now. if I like it, I can put the effort into how to build as I need. your 64 bit only distribution is fine for now.</p>\n<p>many thanks.</p>",
        "id": 195546228,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588071046
    },
    {
        "content": "<p>No probs! I don't have Windows handy ATM, but if you were able to build <code>wasmtime</code> from sources,  I could supply you with build commands to specifically build the embedding libs</p>",
        "id": 195546402,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588071171
    },
    {
        "content": "<p>happy to work from pre-built for now. that lets me figure out how cool you are :)</p>",
        "id": 195546773,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588071441
    },
    {
        "content": "<p>32bit support in Cranelift is a bit lacking. @whitequark did open a few PRs to improve this though.</p>",
        "id": 195548708,
        "sender_full_name": "bjorn3",
        "timestamp": 1588072638
    },
    {
        "content": "<p>this seems out of date. </p>\n<p><a href=\"https://bytecodealliance.github.io/wasmtime/examples-c-hello-world.html\" title=\"https://bytecodealliance.github.io/wasmtime/examples-c-hello-world.html\">https://bytecodealliance.github.io/wasmtime/examples-c-hello-world.html</a></p>\n<p>wasmtime_error_t * seems to have changed to bool</p>",
        "id": 195557006,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588077630
    },
    {
        "content": "<p>fixing up as I go. comments here in case I anticipate incorrectly. feel free to bash me with the stupid stick :)</p>",
        "id": 195557086,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588077667
    },
    {
        "content": "<p>not just minor, that sample's out of date. will see if I can figure it out but should be fixed up as this is for us noobs who are confused enough as it is :)</p>",
        "id": 195557414,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588077834
    },
    {
        "content": "<p>or wasmtime-v0.15.0-x86_64-windows-c-api is out of date &amp; we need a package update. don't know which as new to the code :)</p>",
        "id": 195557593,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588077923
    },
    {
        "content": "<p>bjorn3: 32 bit support not critical right now. for now looking to compile embedding example. 64 bit is fine.</p>",
        "id": 195557765,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588077993
    },
    {
        "content": "<p>changed too much to use right now. I need windows h/libs as provided and sample code at the same revision of the api that compiles &amp; runs as expected to continue.</p>",
        "id": 195558814,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588078535
    },
    {
        "content": "<p>thanks - being clear. almost there :)</p>",
        "id": 195558907,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588078568
    },
    {
        "content": "<p>going with this instead as apparently the embed API is vendor neutral.</p>\n<p><a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/hello.c\" title=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/hello.c\">https://github.com/WebAssembly/wasm-c-api/blob/master/example/hello.c</a></p>\n<p>compiles.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/hello.c\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/hello.c\" title=\"WebAssembly/wasm-c-api\">WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Wasm C API prototype. Contribute to WebAssembly/wasm-c-api development by creating an account on GitHub.</div></div></div>",
        "id": 195559981,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079008
    },
    {
        "content": "<p>link against your lib has following unresolved. </p>\n<p><a href=\"https://pastebin.com/JjXLCNA8\" title=\"https://pastebin.com/JjXLCNA8\">https://pastebin.com/JjXLCNA8</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/JjXLCNA8\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/JjXLCNA8\" title=\"1&gt;Z:\\dev\\infinity\\plugins\\object\\action_wasm\\inf_action_wasm.cpp(35,16): warning - Pastebin.com\">1&gt;Z:\\dev\\infinity\\plugins\\object\\action_wasm\\inf_action_wasm.cpp(35,16): warning - Pastebin.com</a></div></div></div>",
        "id": 195560222,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079117
    },
    {
        "content": "<p>My source file is .cpp. Put an extern \"C\" around wasm headers.</p>",
        "id": 195560291,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079152
    },
    {
        "content": "<p>ahhhh - linked to the dll rather than the static lib, contact :)</p>",
        "id": 195561222,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079579
    },
    {
        "content": "<p>don't care. dll will do. so lets see if I can do something. wasm api direct rather than your extensions is better anyhow as want to try various engines in due course &amp; that being the point :) </p>\n<p>the unresolved above linking to your static lib, no idea, don't care :) but fyi.</p>",
        "id": 195561449,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079672
    },
    {
        "content": "<p>Are you sure that wasmtime supports wasm-c-api? The official C api for wasmtime is at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/c-api/include/wasmtime.h\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/c-api/include/wasmtime.h\">https://github.com/bytecodealliance/wasmtime/blob/master/crates/c-api/include/wasmtime.h</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/c-api/include/wasmtime.h\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/c-api/include/wasmtime.h\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195561632,
        "sender_full_name": "bjorn3",
        "timestamp": 1588079749
    },
    {
        "content": "<p>I'm not sure of anything. I hit this code about half an hour ago :)</p>",
        "id": 195562183,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079962
    },
    {
        "content": "<p>but it compiles &amp; links, so lets see.</p>",
        "id": 195562244,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588079987
    },
    {
        "content": "<p>bjorn3 : wasmtime_error_t  is used in the wasmtime.h you just referenced (assuming that's trunk) but its not defined in wasmtime-v0.15.0-x86_64-windows-c-api.zip  headers, which is why I pivoted to wasm-c-api</p>",
        "id": 195562927,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588080251
    },
    {
        "content": "<p>wasmtime supports the wasm-c api, not a custom one</p>",
        "id": 195563104,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1588080326
    },
    {
        "content": "<p>wasm_engine_new gets me an instance so I assume its working.  have no clue what I'm going yet, but we continue. guessing that sample wants to load a wasm binary that I don't currently have. so need to find that :)</p>",
        "id": 195563128,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588080334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"297332\">Steve Williams</span> <a href=\"#narrow/stream/206238-general/topic/Building.20WMRT.20on.20Windows/near/195562927\" title=\"#narrow/stream/206238-general/topic/Building.20WMRT.20on.20Windows/near/195562927\">said</a>:</p>\n<blockquote>\n<p>bjorn3 : wasmtime_error_t  is used in the wasmtime.h you just referenced (assuming that's trunk) but its not defined in wasmtime-v0.15.0-x86_64-windows-c-api.zip  headers, which is why I pivoted to wasm-c-api</p>\n</blockquote>\n<p>It should be defined at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4d2670afa3d28e17b185b7292ddbfd5e9e4f02ba/crates/c-api/include/wasmtime.h#L15-L20\" title=\"https://github.com/bytecodealliance/wasmtime/blob/4d2670afa3d28e17b185b7292ddbfd5e9e4f02ba/crates/c-api/include/wasmtime.h#L15-L20\">https://github.com/bytecodealliance/wasmtime/blob/4d2670afa3d28e17b185b7292ddbfd5e9e4f02ba/crates/c-api/include/wasmtime.h#L15-L20</a> using a macro</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/4d2670afa3d28e17b185b7292ddbfd5e9e4f02ba/crates/c-api/include/wasmtime.h#L15-L20\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/4d2670afa3d28e17b185b7292ddbfd5e9e4f02ba/crates/c-api/include/wasmtime.h#L15-L20\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 195563308,
        "sender_full_name": "bjorn3",
        "timestamp": 1588080388
    }
]