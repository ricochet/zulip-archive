[
    {
        "content": "<p>I was having problems running some legacy C code with function pointer casting and it seems like this is a known issue. I read this article to get me up to speed a bit <a href=\"https://blog.pyodide.org/posts/function-pointer-cast-handling/\">https://blog.pyodide.org/posts/function-pointer-cast-handling/</a></p>\n<p>It seems like emscripten has compilation options to fix this, albeit extremely inefficiently. I'm wondering if there's anything that handles this better with wasmtime.</p>\n<p>Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://blog.pyodide.org/posts/function-pointer-cast-handling/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2193b402c09adcf05fb0fca0ed4a186bd3f5ca46/68747470733a2f2f626c6f672e70796f646964652e6f72672f253343696d616765253230706174682f75726c253345&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://blog.pyodide.org/posts/function-pointer-cast-handling/\" title=\"Function Pointer Cast Handling in Pyodide\">Function Pointer Cast Handling in Pyodide</a></div><div class=\"message_embed_description\">Why previous versions of Pyodide had a low recursion limit and how the upcoming version 0.19 supports a much higher one.</div></div></div>",
        "id": 492175685,
        "sender_full_name": "Nicholas Renner",
        "timestamp": 1736194121
    },
    {
        "content": "<p>Clang has some builtin logic where, if it sees a function address being directly casted, it'll insert a shim to make it work. But if the place where the address is taken is different from the place where the address is casted, it doesn't work.</p>",
        "id": 492185858,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1736197871
    },
    {
        "content": "<p>That's all I'm aware of.</p>",
        "id": 492185887,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1736197883
    },
    {
        "content": "<p>According to that blog post, <code>EMULATE_FUNCTION_POINTER_CASTS</code> is a Binaryen pass. It appears to be <code>wasm-opt --fpcast-emu</code>. I haven't used that myself, but it's something one could try.</p>",
        "id": 492187306,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1736198412
    },
    {
        "content": "<p>It's worth noting that nowadays with the wasm-gc instructions you can actually test if a functions pointer has a given type with: <code>table.get $func_table ref.test $type</code>. Using this, you can make a helper function that calls a function pointer, dropping or adding arguments as needed to fix up the signature. Of course you can only handle a fixed list of signatures this way but presumably your codebase only has a fixed set of types you need to handle.</p>",
        "id": 492409381,
        "sender_full_name": "Hood Chatham",
        "timestamp": 1736294271
    },
    {
        "content": "<p>After saying this, I realized that doing this would be an improvement for Pyodide since the JS trampoline approach doesn't work with JSPI / stack switching. So if you want to see a full example, I made one here:<br>\n<a href=\"https://github.com/pyodide/pyodide/blob/32a99ccba3d08d601d2925140c61f50756d5b240/cpython/patches/0005-Use-wasm-gc-based-call-adaptor-if-available.patch#L114\">https://github.com/pyodide/pyodide/blob/32a99ccba3d08d601d2925140c61f50756d5b240/cpython/patches/0005-Use-wasm-gc-based-call-adaptor-if-available.patch#L114</a></p>\n<p>There is quite limited toolchain support for wasm-gc instructions, so it is a bit of an adventure to use <code>ref.test</code> at all.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/pyodide/pyodide/blob/32a99ccba3d08d601d2925140c61f50756d5b240/cpython/patches/0005-Use-wasm-gc-based-call-adaptor-if-available.patch#L114\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a8f36af31d21f02e29e70196d5ebafc1045855b6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623731333331383139353135393064613435366630656563613766333932373832333161376462643666313330636163313737336438383734333130633561612f70796f646964652f70796f64696465&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/pyodide/pyodide/blob/32a99ccba3d08d601d2925140c61f50756d5b240/cpython/patches/0005-Use-wasm-gc-based-call-adaptor-if-available.patch#L114\" title=\"pyodide/cpython/patches/0005-Use-wasm-gc-based-call-adaptor-if-available.patch at 32a99ccba3d08d601d2925140c61f50756d5b240 · pyodide/pyodide\">pyodide/cpython/patches/0005-Use-wasm-gc-based-call-adaptor-if-available.patch at 32a99ccba3d08d601d2925140c61f50756d5b240 · pyodide/pyodide</a></div><div class=\"message_embed_description\">Pyodide is a Python distribution for the browser and Node.js based on WebAssembly - pyodide/pyodide</div></div></div>",
        "id": 492487969,
        "sender_full_name": "Hood Chatham",
        "timestamp": 1736337079
    }
]