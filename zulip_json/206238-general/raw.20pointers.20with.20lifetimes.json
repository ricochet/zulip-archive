[
    {
        "content": "<p>does wasmtime use raw pointers with lifetimes? (e.g. <a href=\"https://chaos.social/@SoniEx2/113611229674401347\">https://chaos.social/@SoniEx2/113611229674401347</a> ) if not why not? if so why's it not upstream? (there's no way we're the first to come up with this idea. we're probably not even the first to publish it. and yet, we never hear of it from anyone else. if it isn't useful, then why was it so useful for our needs? granted retrofitting this on an existing codebase is a pain and a half...)</p>",
        "id": 486661505,
        "sender_full_name": "Soni L.",
        "timestamp": 1733571237
    },
    {
        "content": "<p>The actual lifetime of most values that are behind raw pointers is equal to the lifetime of the Store, however as the pointers are stored in the Store themself (which can be freely moved), Rust doesn't allow producing a <code>'store</code>. That is the main reason why raw pointers are used AFAIK. Raw pointers with lifetimes are only useful when the reason you are using raw pointers is because of aliasing or the type behind the pointer not being known at compile time. It is not useful when the reason is that there is no way to express the runtime lifetime in a way that the compiler understands at compiletime.</p>",
        "id": 486706873,
        "sender_full_name": "bjorn3",
        "timestamp": 1733607593
    },
    {
        "content": "<p>well, in that case may we introduce you to <code>selfref</code>? safe representation of the <code>Store</code> (and <code>'store</code>) is exactly the intended use-case of <code>selfref</code></p>",
        "id": 486708097,
        "sender_full_name": "Soni L.",
        "timestamp": 1733608663
    },
    {
        "content": "<p>which we're also trying to get rid of <a href=\"https://chaos.social/@SoniEx2/113577841740469472\">https://chaos.social/@SoniEx2/113577841740469472</a></p>",
        "id": 486708156,
        "sender_full_name": "Soni L.",
        "timestamp": 1733608689
    },
    {
        "content": "<p>(as it turns out we ran into these limitations of rust pretty quickly with hexchat plugins. everyone told us it was unsolvable so we solved it ourselves.)</p>",
        "id": 486708380,
        "sender_full_name": "Soni L.",
        "timestamp": 1733608887
    },
    {
        "content": "<p>this is how we just described selfref to someone:</p>\n<blockquote>\n<p>rust is generally thought to have no support for self references, but in truth the language has limited support for some forms of self references. it is possible to borrow a struct for the same lifetime as contained in said struct, creating a self-reference. this comes with some limitations however, and selfref attempts to address those limitations, namely the ability to move the struct's container (obviously you can't move the actual struct that has self-references because that would invalidate the references, but you can move e.g. the <code>Box&lt;Struct&gt;</code>)</p>\n<p><em>unlike</em> similar crates, selfref tries to take advantage of rust's limited support for self-references.</p>\n<p>we've never seen anyone else do this</p>\n<p>(they just use raw pointers lmao)</p>\n<p>(literally, that's what e.g. wasmtime does)</p>\n</blockquote>",
        "id": 486721914,
        "sender_full_name": "Soni L.",
        "timestamp": 1733621173
    },
    {
        "content": "<p>Does selfref allow modifying the thing the reference points to? If not, wasmtime can't use it as we need to be able to add new things to the Store. If however it allows arbitrary modifications, then it is unsound as you could remove and drop something that still has a reference to it. Wasmtime's use of self-references works only because Store is append-only. I don't see anything in the selfref api that allows enforcing that.</p>",
        "id": 486754633,
        "sender_full_name": "bjorn3",
        "timestamp": 1733651748
    },
    {
        "content": "<p>yes, to the extent that you have to use the usual safe rust cells (or qcell's extension of them).</p>",
        "id": 486756214,
        "sender_full_name": "Soni L.",
        "timestamp": 1733653124
    },
    {
        "content": "<p>like, we can't stop you from using cells, and that is kinda <em>the point</em></p>\n<p>hexchat-unsafe-plugin 2.4.0-pre1 (which is probably an ABI break so it should be 3.0.0-pre1 but anyway) uses selfref with various cells, look for PluginEnvironment in src/mock</p>",
        "id": 486756346,
        "sender_full_name": "Soni L.",
        "timestamp": 1733653225
    },
    {
        "content": "<p>(ngl the main reason we stopped working on hexchat-unsafe-plugin was the varargs. and burning out of rust at some point.)</p>",
        "id": 486756549,
        "sender_full_name": "Soni L.",
        "timestamp": 1733653343
    },
    {
        "content": "<p>in theory it should be possible to grow a Vec of self-references \"in-place\" but we don't think that's possible in safe Rust today. but you can still copy everything to a new Vec and set up the correct references that way.</p>",
        "id": 486758786,
        "sender_full_name": "Soni L.",
        "timestamp": 1733655058
    }
]