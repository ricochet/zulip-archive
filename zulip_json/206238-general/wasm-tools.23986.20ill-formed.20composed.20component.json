[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> re: <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/986#issuecomment-1513679423\">your request for a reproduction of the wasm component issue</a>: <br>\n<a href=\"/user_uploads/15107/7z_3sj-CIYyTc6IKTY2jI136/broken-composed.wasm\">broken-composed.wasm</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/986#issuecomment-1513679423\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fe1ead4f83d6a45b61c8451b1ed543211591a08f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383365376536323038626332643838623866656230626636363365656664396333353961666136653264313031626238666332366334306164333765653933312f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f393836)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/986#issuecomment-1513679423\" title=\"`wasm-compose` creating an ill formed wasm component · Issue #986 · bytecodealliance/wasm-tools\">`wasm-compose` creating an ill formed wasm component · Issue #986 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">I'm still seeing issues after #977 has been fixed. This is what I'm seeing: $ wasm-tools component wit broken-composed.wasm Error: failed to decode WIT document Caused by: 0: failed to decode WIT f...</div></div></div>",
        "id": 351138144,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681932795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590805\">@Ryan Levick (rylev)</span> do you have the source modules here that I could play with? Either the source code or the input <code>*.wasm</code> core wasm as input to <code>wit-component</code></p>",
        "id": 351141304,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681934003
    },
    {
        "content": "<p>hm ok I think I see the issue, and it looks like this is unrelated to <code>wasm-tools compose</code> but is instead a bug in <code>wit-component</code> which requires nested components to expose, which only <code>wasm-tools compose</code> builds</p>",
        "id": 351145354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681935446
    },
    {
        "content": "<p>I think I have an idea of how to fix, but it'll have to wait until the resources PR is merged since it'll build on that.</p>",
        "id": 351146555,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681935933
    },
    {
        "content": "<p>this raw binary component will become invalid with that PR, however, but when made vaild (by re-running <code>wit-component</code>) the new binary should work with the future PR I have in mind</p>",
        "id": 351146604,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681935964
    },
    {
        "content": "<p>Sounds good to me. If you have the energy to write up a sentence or two with more detail on the issue I'd love to hear it (trying to solidify my understanding of the binary format), but no worries if you don't get around to it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 351152480,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681938240
    },
    {
        "content": "<p>oh sure!</p>\n<p>The way that wit-component works is that it walks the type information as produced by <code>wasmparser</code>'s validation phase, notably it doesn't walk the component manually itself (that's what <code>wasmparser</code> does during validation). The problem with nested components, however, is that the final exported item from the outer component in your example is referring to an imported type of an inner component. This means that during wit-component's walk over the type of the component itself it never actually encountered the inner types, meaning it never registered anything for them.</p>\n<p>The solution I have in mind is that these types are supplied when the outer component is instantiating the inner component. During this process type-substitution is already happening for resource types and I figure it can be updated to happen for normal types as well. For example if you satisfy a type import with a type, then that type you provided should be used to substitute the final type of the component.</p>\n<p>Given this when wit-component walks over the type information it'll find that <code>http-types</code>, which is imported by the outer component, is the exact same type IDs that's exported by the result, meaning that it shouldn't \"miss\" anything due to it being internal to a component.</p>\n<p>Or at least that's the theory! The type substitution support isn't there today in wasmparser but it's available with the resources PR, which I think should be relatively easy to piggy-back onto.</p>",
        "id": 351153607,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681938673
    },
    {
        "content": "<p>Nice. The explanation of the problem matches my mental model (which I'm very happy about). I'll check out the resources PR to see if I can grok what's happening there. The proposed solution sounds clear to me</p>",
        "id": 351154206,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681938924
    },
    {
        "content": "<p>Thanks for the explainer!</p>",
        "id": 351154219,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681938932
    },
    {
        "content": "<p>If you've got the original source or core wasm modules I can test out a solution too</p>",
        "id": 351154692,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681939105
    },
    {
        "content": "<p>I was thinking to test out my idea but it requires a new component due to the new validation rules which make the existing one invalid</p>",
        "id": 351154746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681939132
    },
    {
        "content": "<p>but re-running <code>wit-component</code> should be all that's necessary</p>",
        "id": 351154752,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681939140
    },
    {
        "content": "<p>i'm currently reviewing the resource types PR so hopefully we can get that merged in soon to help with a basis for a fix</p>",
        "id": 351154861,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681939186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> here are the wasm components I'm trying to compose:</p>\n<p><a href=\"/user_uploads/15107/oHprOuUxR6zb9oKIt-uWKhcF/base.wasm\">base.wasm</a><br>\n<a href=\"/user_uploads/15107/3AJMxNqCRVzFikg0ofH0L9Mr/adapter.wasm\">adapter.wasm</a><br>\n<a href=\"/user_uploads/15107/dSZfXmzETa57jLiCJMG7v5oF/config.yml\">config.yml</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">compose</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">broken</span><span class=\"o\">-</span><span class=\"n\">composed</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">yml</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>",
        "id": 351158310,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681940772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590805\">@Ryan Levick (rylev)</span> do you have the pre-wit-component core wasm outputs?</p>",
        "id": 351159706,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681941392
    },
    {
        "content": "<p>those look like they're both already components</p>",
        "id": 351159735,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681941407
    },
    {
        "content": "<p>If you're using <code>cargo-component</code>, there's no good way to tell it to not componentize the core module in-place (if you're on macOS, however, a quirk of how cargo copies rather than hardlinks the deps to the target directory will keep the module in the deps directory)</p>",
        "id": 351160121,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681941592
    },
    {
        "content": "<p>ah ok, in that case I'll keep poking, I'm trying to handwrite a minimal test case but am running into a few issues</p>",
        "id": 351160285,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681941643
    },
    {
        "content": "<p>a hack would be to manually depend your project on the bindings crate and do a <code>cargo build --target wasm32...</code></p>",
        "id": 351160298,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681941648
    },
    {
        "content": "<p>if we might find it helpful for the future, can add a <code>--keep-module</code> option or something so that it preserves the core module (perhaps copies it to <code>foo.core.wasm</code>)</p>",
        "id": 351160489,
        "sender_full_name": "Peter Huene",
        "timestamp": 1681941726
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/_f43bQaueiNis01xDDwSaDwf/bloom_filter.wasm\">base.wasm</a></p>\n<p>Luckily I'm using macOS so the core module was in the deps folder</p>",
        "id": 351161131,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681942031
    },
    {
        "content": "<p>I don't have easy access to the adapter core module but I can get that too if it makes life easier</p>",
        "id": 351161158,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1681942049
    },
    {
        "content": "<p>ok thanks! I've discovered a fuzz bug (probably should have run this sooner with this branch) which I need to bottom out and may require larger changes to fix</p>",
        "id": 351173666,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681950307
    },
    {
        "content": "<p>Ok all the fuzz issues I think are now fixed and the output of <code>wit-component</code> has changed even more. This additionally necessitated adding a test case which showcases the type-substitution behavior so now the type-substitution logic I was alluding to is now included in the PR.</p>\n<p>I believe the basic tl;dr; is that your issue will be fixed with the PR as-is. I haven't fully tested though. Are you able to check out the PR and see that toolchain works for you?</p>",
        "id": 351398614,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682014623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I can give it a try, but I think I'll need to update Cargo component to use your latest changes. I will try that out and let you know if everything works.</p>",
        "id": 351656686,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682089446
    },
    {
        "content": "<p>Unfortunately, I'm getting an error, but I'm unsure if it's a mistake on my end (to reproduce the set up of my original issue, I have to update wasm-tools and wit-bindgen dependencies in many places).</p>",
        "id": 351669499,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092180
    },
    {
        "content": "<p>I'm getting this error: <code>func not valid to be used as import (at offset 0x24ae86)</code></p>",
        "id": 351669594,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092203
    },
    {
        "content": "<p>Here's the component in question: <a href=\"/user_uploads/15107/hcL0lweuxDzeOh1lqTbp7Zh2/component.wasm\">component.wasm</a></p>",
        "id": 351669686,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092225
    },
    {
        "content": "<p>(note this is before any composition - it's just during \"componentization\" - when we are taking core modules and making them components)</p>",
        "id": 351669773,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092250
    },
    {
        "content": "<p>It would probably help if we could make <code>validate_and_register_named_types</code> return what is not valid instead of returning just a bool</p>",
        "id": 351670070,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092328
    },
    {
        "content": "<p>hm ok that may be a further bug, I'll try to dig in in a bit</p>",
        "id": 351670504,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682092456
    },
    {
        "content": "<p>Looks like there is a record definition for a \"request\" type that might not be exported?</p>",
        "id": 351671162,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092625
    },
    {
        "content": "<p>At some point <a href=\"https://github.com/alexcrichton/wasm-tools/blob/e675aff4c56755f866c89cb8ab7d4259605ac983/crates/wasmparser/src/validator/types.rs#L1913\">this check</a> returns false.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasm-tools/blob/e675aff4c56755f866c89cb8ab7d4259605ac983/crates/wasmparser/src/validator/types.rs#L1913\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bfe6c616aa8b0795a1f323663262762923feddc8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303038326632646564366262636531333166373162303462356638663132313236343964653265366361376430653136333333353434353539323132376363332f616c65786372696368746f6e2f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasm-tools/blob/e675aff4c56755f866c89cb8ab7d4259605ac983/crates/wasmparser/src/validator/types.rs#L1913\" title=\"wasm-tools/types.rs at e675aff4c56755f866c89cb8ab7d4259605ac983 · alexcrichton/wasm-tools\">wasm-tools/types.rs at e675aff4c56755f866c89cb8ab7d4259605ac983 · alexcrichton/wasm-tools</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly . Contribute to alexcrichton/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 351671749,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682092777
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 351672713,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682093007
    },
    {
        "content": "<p>Unfortunately it's going to take some time to update the tooling on my end to test all of this (we're on an old version of wit-bindgen and upgrading is not trivial).</p>",
        "id": 351825752,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682155449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I think I'm still seeing the same issue with everything upgrade to the latest version of wasm-tools including your recently merged resources PR and including transitive wasm-tools dependencies of wit-bindgen:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>  (type (;28;) (record (field \"status\" 26) (field \"headers\" 27) (field \"body\" 24)))\n  (type (;29;) (func (param \"req\" 25) (result 28)))\n  (alias core export 3 \"inbound-http#handle-request\" (core func (;54;)))\n  (alias core export 3 \"cabi_post_inbound-http#handle-request\" (core func (;55;)))\n  (func (;25;) (type 29) (canon lift (core func 54) (memory 0) (realloc 10) string-encoding=utf8 (post-return 55)))\n  (component (;0;)\n    (alias outer 1 29 (type (;0;)))\n    (import \"import-handle-request\" (func (;0;) (type 0)))\n</code></pre></div>\n<p>The \"import-handle-request\" has an aliased type to a non-exported type (the record type \"28\"). Would you expect this to be fixed already? Perhaps I'm missing some transitive dependency on wasm-tools somewhere?</p>",
        "id": 353209171,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682590678
    },
    {
        "content": "<p>Hmm... So it does indeed look like I was missing a transitive dependency on wasm-tools somewhere. I've updated that, and now I'm running into a different issue...</p>",
        "id": 353244854,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682595736
    },
    {
        "content": "<p>Investigating...</p>",
        "id": 353244874,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682595741
    },
    {
        "content": "<p>I'm now getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">instantiation</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"k\">type</span><span class=\"o\">-</span><span class=\"n\">method</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x247c7f</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>But it seems fine to me when inspecting the  wat</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;18;)</span> <span class=\"p\">(</span><span class=\"err\">enum</span> <span class=\"s2\">\"get\"</span> <span class=\"s2\">\"post\"</span> <span class=\"s2\">\"put\"</span> <span class=\"s2\">\"delete\"</span> <span class=\"s2\">\"patch\"</span> <span class=\"s2\">\"head\"</span> <span class=\"s2\">\"options\"</span><span class=\"p\">))</span>\n  <span class=\"c1\">;; ....</span>\n  <span class=\"p\">(</span><span class=\"err\">instance</span> <span class=\"cm\">(;10;)</span> <span class=\"p\">(</span><span class=\"err\">instantiate</span> <span class=\"mi\">0</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-func-handle-request\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">25</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-method\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">18</span><span class=\"p\">))</span> <span class=\"c1\">;; It seems to think this is missing</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-uri\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">19</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-headers\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">21</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-params\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">22</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-body\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">23</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-request\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">25</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-http-status\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">26</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"err\">with</span> <span class=\"s2\">\"import-type-response\"</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">28</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n</code></pre></div>",
        "id": 353247396,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682596053
    },
    {
        "content": "<p>(as a side note, this seems to only be happening when programmatically instantiating a component not when running <code>wasm-tools validate</code>)</p>",
        "id": 353248492,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682596195
    },
    {
        "content": "<p>I think this too is a dangling dependency that has an old wasm-tools version <span aria-label=\"weary\" class=\"emoji emoji-1f629\" role=\"img\" title=\"weary\">:weary:</span></p>",
        "id": 353256574,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682597185
    },
    {
        "content": "<p>Please ignore everything above. I finally was able to update <em>everything</em> to the latest version of wasm-tools (including wit-bindgen, wasmtime, etc.), and it works!</p>",
        "id": 353271163,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682599124
    },
    {
        "content": "<p>Closed <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/986\">https://github.com/bytecodealliance/wasm-tools/issues/986</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/986\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/de26a2307ae2c93b5419c926b9d4496293a82431\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666331383164383665643936313134373439623336653961326532613334363662353531353439643735656231383434333766313762326134303436656166352f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f393836)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/986\" title=\"`wasm-compose` creating an ill formed wasm component · Issue #986 · bytecodealliance/wasm-tools\">`wasm-compose` creating an ill formed wasm component · Issue #986 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">I'm still seeing issues after #977 has been fixed. This is what I'm seeing: $ wasm-tools component wit broken-composed.wasm Error: failed to decode WIT document Caused by: 0: failed to decode WIT f...</div></div></div>",
        "id": 353271539,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682599178
    },
    {
        "content": "<p>This may have uncovered an issue with wasm-compose though...</p>",
        "id": 353272203,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682599271
    },
    {
        "content": "<p>Nevermind. So many moving parts, but I got it working.</p>",
        "id": 353280472,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682600335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> sorry for the ping again. This exercise has shown me that the full stack of tools seems to be working with the latest version of wasm-tools. Do we have a timeline for cutting a new release? I'd be happy to help update the world when the new version lands.</p>",
        "id": 353283201,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682600684
    },
    {
        "content": "<p>Heh well I'm glad at least everything's working! I'll do a release today for all the various crates</p>",
        "id": 353313458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682604410
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1002\">https://github.com/bytecodealliance/wasm-tools/pull/1002</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1002\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3531a48afbfa53fef4c18f7c3da2a17fb5a4e6cc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303838623638363237616431613635396634666230386631356131663732656534366365633338393063643630643163613662353565373338653734346163352f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31303032)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1002\" title=\"Bump crate versions by alexcrichton · Pull Request #1002 · bytecodealliance/wasm-tools\">Bump crate versions by alexcrichton · Pull Request #1002 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">I think I got all the major/minor bumps right here this time around, but\nI think soon we'll need to move to an \"always bump major\" strategy since\notherwise these are becoming pretty inter-dependent...</div></div></div>",
        "id": 353317677,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682604872
    },
    {
        "content": "<p>I can send PRs to cargo-component, wit-bindgen, etc. once this lands if that would be helpful</p>",
        "id": 353329122,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682606293
    },
    {
        "content": "<p>it would indeed!</p>",
        "id": 353329475,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682606339
    },
    {
        "content": "<p>ok published!</p>",
        "id": 353404929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682615937
    },
    {
        "content": "<p>First bump: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/562\">https://github.com/bytecodealliance/wit-bindgen/pull/562</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/562\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/30d060b2f606428407da1e211a044512215bdbbb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336263383636653464383636393234376130653361323535323566373731316665363938613730633864343039613265623563343562393365616436653662352f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f353632)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/562\" title=\"Update wasm-tools dependencies by rylev · Pull Request #562 · bytecodealliance/wit-bindgen\">Update wasm-tools dependencies by rylev · Pull Request #562 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Updates to latest version bumped in bytecodealliance/wasm-tools#1002</div></div></div>",
        "id": 353416226,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682617489
    },
    {
        "content": "<p>Tests are failing. I’ll update them in a bit</p>",
        "id": 353430245,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682619510
    },
    {
        "content": "<p>Pushed a fix. Hopefully that's enough to get the tests passing.</p>",
        "id": 353446466,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682621895
    },
    {
        "content": "<p>Tests pass <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 353458561,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682623876
    },
    {
        "content": "<p>Once you caught a new release for wit-bindgen I’ll update cargo-component.</p>",
        "id": 353468059,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682625470
    },
    {
        "content": "<p>ok publishing now</p>",
        "id": 353476197,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682626807
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"590805\">@Ryan Levick (rylev)</span> for sharing and contributing. That's awesome and tons of useful info.</p>",
        "id": 354068323,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1682720792
    },
    {
        "content": "<p>Hello everyone i have a question about wasi-nn i'm reading the code done by <span class=\"user-mention\" data-user-id=\"487764\">@Mossaka (Joe)</span> <span class=\"user-mention\" data-user-id=\"269505\">@Radu Matei</span>  and i found that under crates/wasi-nn/rust/src/ you will find a <a href=\"http://generated.rs\">generated.rs</a> and it says inside this file : \"DO NOT EDIT ,  To regenerate this file run the <code>crates/witx-bindgen</code> command\"<br>\nmy question is how to generate this file again ? because i want to add a new backend like onnxruntime to wasi-nn and i don't know how to generate this file from witx specification can anyone help what cmd line i should write any resources anything ?</p>",
        "id": 374075930,
        "sender_full_name": "Khelifa Saif eddine",
        "timestamp": 1689020364
    }
]