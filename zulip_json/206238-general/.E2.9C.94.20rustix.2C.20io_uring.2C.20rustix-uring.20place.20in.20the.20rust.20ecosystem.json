[
    {
        "content": "<p>Would someone shed some light on how rustix's io_uring module, and the <a href=\"https://github.com/jordanisaacs/rustix-uring\">rustix-uring</a> crate its docs refer to for a higher level io_uring interface, are meant to sit in the Rust ecosystem?</p>\n<p>I'm familiar with the kernel's io_uring API, and the Linux liburing library API and how they evolve. And pretty familiar with the <code>tokio/io-uring</code> crate although not so clear about the tradeoffs about the ramifications of its <code>direct-syscall</code> feature that uses the <a href=\"https://docs.rs/sc/latest/sc/\">sc</a> crate.</p>\n<p>It looks like <code>rustix-uring</code> was forked from <code>tokio/io-uring</code> nine weeks ago but the latest commits to <code>rustix-uring</code> have me confused because they are dated from 2023, not 2024.</p>\n<p>I'm unclear whether the <code>rustix/io_uring</code> module is meant to be better supporting WASM or WASM components in the long run as it is a BytecodeAlliance project.</p>\n<p>Is it intended that Rust async crates that want to build on the sync <code>tokio/io-uring</code> (which really doesn't depend on <code>tokio</code>), can use a feature flag to use <code>rustix-uring</code> instead or is the API likely to diverge over time?</p>\n<p><code>tokio/io-uring</code> already has a feature flag for using the <code>sc</code> crate for its syscalls. Was it not possible to propose a <code>rustix/linux_raw</code> alternative?</p>\n<p>Is there a plan for one day allowing the kernel's io_uring shared mmap requirements to be directly accessible from a WASM guest? The kernel's submission and completion queues have to be in mmap regions, and some fancier features that pre-populate pools of buffers also use mmaps in the <code>liburing</code> example code.</p>\n<p>Thanks for your patience with my questions. Everyone here has much more experience thinking about WASM and async in WASM than I  do.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jordanisaacs/rustix-uring\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1d285d281cff1002ae2bc3b85524af0f02f6123d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396264303131393533343730343732383239363863306132393464356363396237393665303062356637303733616333353231353538383130366437363035322f6a6f7264616e6973616163732f7275737469782d7572696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jordanisaacs/rustix-uring\" title=\"GitHub - jordanisaacs/rustix-uring: The `io_uring` library for Rust (with Rustix)\">GitHub - jordanisaacs/rustix-uring: The `io_uring` library for Rust (with Rustix)</a></div><div class=\"message_embed_description\"> The `io_uring` library for Rust (with Rustix). Contribute to jordanisaacs/rustix-uring development by creating an account on GitHub.</div></div></div>",
        "id": 431559902,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1712333466
    },
    {
        "content": "<p>I don't think that would fit the WASM sandbox requirements: The kernel knows only the process and has no concept of linear memory, so the WASM guest could easily read and write outside it's linear memory with direct access to the io_uring shared queues. Pre-processing isn't possible because the kernel could in principle use the shared queues any time. It's more likely a WASM engine will support async IO with io_uring as a possible backend, not giving the guest direct access.</p>",
        "id": 431561042,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1712333838
    },
    {
        "content": "<p>I wondered if a host could give a guest a second linear memory that it had mmap'ed so the guest and the kernel could share that area. I thought the guest would have to be told the actual offset of the area from the host's perspective so what it read and wrote into that memory would have values that the kernel could relate to. That didn't seem any more dangerous than what the kernel's io_uring API already exposes to user space.</p>",
        "id": 431562581,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1712334337
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704709\">Frank Rehwinkel</span> <a href=\"#narrow/stream/206238-general/topic/rustix.2C.20io_uring.2C.20rustix-uring.20place.20in.20the.20rust.20ecosystem/near/431562581\">said</a>:</p>\n<blockquote>\n<p>I wondered if a host could give a guest a second linear memory that it had mmap'ed so the guest and the kernel could share that area. I thought the guest would have to be told the actual offset of the area from the host's perspective so what it read and wrote into that memory would have values that the kernel could relate to. That didn't seem any more dangerous than what the kernel's io_uring API already exposes to user space.</p>\n</blockquote>\n<p>That's only true if you regard the process as a whole. WASM doesn't work that way, the WebAssembly instances and the host runtime are logically separated, which is enforced in all parts of WASM. The kernel doesn't allow to protect memory regions from io_uring scatter/gather AFAIK, so your \"tell the guest its memory offset\" idea violates the memory separation between guest and host. It's essentially a \"trust me bro, I won't overwrite or read outside my own memory\" guarantee from the guest, which is not enough.</p>",
        "id": 431568369,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1712336209
    },
    {
        "content": "<p>Maybe I understand your point. It would be foolish for a host to give the guest such access to the kernel's io_uring submission queue directly because the scatter/gather commands of the io_uring API would allow the guest access to all of the host's address space, regardless of the mmap base address in question. If the host were willing to implicitly trust a single guest component with that kind of power (maybe they come from the same repo), the host might as well build the io_uring facing side of the component into its own support and not run it as WASM code at all.</p>\n<p>I still have the other general questions about <code>rustix/io_uring</code> and <code>rustix-uring</code>. Thank you.</p>",
        "id": 431571273,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1712337245
    },
    {
        "content": "<p>Indeed, there are no specific plans right now to use <code>rustix::io_uring</code> or <code>rustix_uring</code> for anything wasm-related.</p>",
        "id": 431689848,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1712423828
    },
    {
        "content": "<p>And yes, the timestamps on the commits for rustix-uring are misleading because the repo has been rebased on top of upstream tokio/io-uring. It is fairly up to date.</p>",
        "id": 431689940,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1712423896
    },
    {
        "content": "<p>I agree, exposing the raw host submission and completion queues to guest Wasm would have several hazards and awkwardnesses. But an interesting thing about Wasm is that host calls are much cheaper than actual host syscalls, so we could in theory get away with having functions for \"push sqe\" and \"pop cqe\" instead of exposing the raw queues.</p>",
        "id": 431690061,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1712424015
    },
    {
        "content": "<p>That said, another thing that's happening is that WASIp3's async is being designed to be completion-oriented, similar to io_uring, and in theory it should be possible to implement on top of io_uring. See <a href=\"https://www.youtube.com/watch?v=y3x4-nQeXxc&amp;list=PLP3xGl7Eb-4Nmj4CJ5WLQZx5UAYvhH920&amp;index=3\">here</a> for a recent talk about it, and <a href=\"https://github.com/dicej/isyswasfa\">here</a> where prototyping is happening (though not with io_uring specifically).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"y3x4-nQeXxc\" href=\"https://www.youtube.com/watch?v=y3x4-nQeXxc&amp;list=PLP3xGl7Eb-4Nmj4CJ5WLQZx5UAYvhH920&amp;index=3\"><img src=\"https://uploads.zulipusercontent.net/fa271afed70af4e4e72d46494a06afe170b460d0/68747470733a2f2f692e7974696d672e636f6d2f76692f793378342d6e51655878632f64656661756c742e6a7067\"></a></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/isyswasfa\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a76d071c36a3847b6de796b39de9afbff909958b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663731623961663134333465656165356363356139396562393732663337663335386534656166663162363335633861666466343565363531623861643038312f646963656a2f697379737761736661)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/isyswasfa\" title=\"GitHub - dicej/isyswasfa: I sync, you sync, we all sync for async!\">GitHub - dicej/isyswasfa: I sync, you sync, we all sync for async!</a></div><div class=\"message_embed_description\">I sync, you sync, we all sync for async! Contribute to dicej/isyswasfa development by creating an account on GitHub.</div></div></div>",
        "id": 431690586,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1712424452
    },
    {
        "content": "<p>Thank you for these answers. I'm still trying to figure out what one can assume when one sees a Bytecode Alliance project. And my interest in either contributing to the tokio/tokio-uring project further or forking it to pursue my own ideas made me wonder about the ability to support just the tokio/io-uring dependency or whether it could be possible to provide a feature that selected it or the rustix_uring as a dependency.</p>\n<p>Maybe rustix_uring is meant to be a fork of tokio/io-uring that uses the rustix library as a dep, with rebases from time to time. I guess it's easy enough to change code down the road if that is found to be possible.</p>\n<p>I do like the idea of creating a WIT definition allowing the guest to access a host's io_uring file descriptor. Still haven't read enough about WIT, the component model, or resources, to ask intelligent questions and I didn't mean to do so here. Your posts and others have pointed to plenty of reading material I'm slowly getting through. I hope to be able answer the question of whether such a resource could be passed from a higher level component to a lower one.</p>\n<p>I had come to understand that the explanations of WASIp3 being like io_uring in  that it would be completion based rather than readiness based was actually orthogonal to when the kernel's io_uring interface could be used. I'm used to the tokio/tokio-uring providing io_uring access to file descriptors in the context of the tokio readiness-based runtime. The io_uring file descriptor is watched through epoll by tokio and the tokio-uring library creates the completion-model for tasks that want to await an operation's completion. </p>\n<p>Yes, the <code>isyswasfa</code> ecosystem is very interesting because it lets such a library continue to use Rust await syntax and not deal with <code>Pollables</code> itself.</p>\n<p>And probably coming full circle in my plans, I guess I will code to the WASIp3 ideas that let Components be fully async parts of composed wasm binary. I definitely appreciate the idea that individual components don't have to have their own async runtimes.</p>\n<p>Thanks again.</p>",
        "id": 431694230,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1712427782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704709\">Frank Rehwinkel</span> has marked this topic as resolved.</p>",
        "id": 431695067,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712428374
    }
]