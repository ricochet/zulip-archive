[
    {
        "content": "<p>I have been left triage comments on a dozen issues which I think should be closed. Can someone take a look? And is it ok if I continue triaging the rest of the issues that I think should be closed?<br>\nEdit: seems like <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> is already taking a look.</p>",
        "id": 225049657,
        "sender_full_name": "bjorn3",
        "timestamp": 1612373257
    },
    {
        "content": "<blockquote>\n<p>And is it ok if I continue triaging the rest of the issues that I think should be closed?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>?</p>",
        "id": 225051612,
        "sender_full_name": "bjorn3",
        "timestamp": 1612374004
    },
    {
        "content": "<p>I got another 22 issues that can be closed in addition to the few that haven't yet been closed. Should I comment on them or list them here?</p>",
        "id": 225053450,
        "sender_full_name": "bjorn3",
        "timestamp": 1612374827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> please feel free to keep commenting, indeed</p>",
        "id": 225057289,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1612376289
    },
    {
        "content": "<p>or you can close directly if it's clearly addressed -- we can always reopen if we disagree :-)</p>",
        "id": 225057351,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1612376322
    },
    {
        "content": "<p>I don't have permission to close any issues that are not my own.</p>",
        "id": 225058989,
        "sender_full_name": "bjorn3",
        "timestamp": 1612376939
    },
    {
        "content": "<p>I am done with triage of the most obvious issues.</p>",
        "id": 225059054,
        "sender_full_name": "bjorn3",
        "timestamp": 1612376967
    },
    {
        "content": "<p>Ah, sorry, didn't realize; in that case I'll keep following up (thanks again for this cleanup effort!)</p>",
        "id": 225059072,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1612376973
    },
    {
        "content": "<p>no problem</p>",
        "id": 225059144,
        "sender_full_name": "bjorn3",
        "timestamp": 1612377000
    },
    {
        "content": "<p>I noticed that there are 114 issues without label indicating if it is about cranelift, wasmtime, lightbeam, peepmatic, ...: <a href=\"https://github.com/bytecodealliance/wasmtime/issues?page=1&amp;q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+-label%3Acranelift+-label%3Awasi%3Aapi+-label%3Alightbeam+-label%3Awasi%3Aimpl+-label%3Acranelift%3Aarea%3Amachinst+-label%3Awasi%3Atests+-label%3Awasmtime%3Ac-api+-label%3Awasmtime+-label%3Awasmtime%3Aapi+-label%3Afuzzing+-label%3Acranelift%3Adiscussion+-label%3Awasm-proposal%3Areference-types+-label%3Acranelift%3Aarea%3Apeepmatic+-label%3Awasmtime%3Adebugging\">https://github.com/bytecodealliance/wasmtime/issues?page=1&amp;q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+-label%3Acranelift+-label%3Awasi%3Aapi+-label%3Alightbeam+-label%3Awasi%3Aimpl+-label%3Acranelift%3Aarea%3Amachinst+-label%3Awasi%3Atests+-label%3Awasmtime%3Ac-api+-label%3Awasmtime+-label%3Awasmtime%3Aapi+-label%3Afuzzing+-label%3Acranelift%3Adiscussion+-label%3Awasm-proposal%3Areference-types+-label%3Acranelift%3Aarea%3Apeepmatic+-label%3Awasmtime%3Adebugging</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues?page=1&amp;q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+-label%3Acranelift+-label%3Awasi%3Aapi+-label%3Alightbeam+-label%3Awasi%3Aimpl+-label%3Acranelift%3Aarea%3Amachinst+-label%3Awasi%3Atests+-label%3Awasmtime%3Ac-api+-label%3Awasmtime+-label%3Awasmtime%3Aapi+-label%3Afuzzing+-label%3Acranelift%3Adiscussion+-label%3Awasm-proposal%3Areference-types+-label%3Acranelift%3Aarea%3Apeepmatic+-label%3Awasmtime%3Adebugging\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues?page=1&amp;q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+-label%3Acranelift+-label%3Awasi%3Aapi+-label%3Alightbeam+-label%3Awasi%3Aimpl+-label%3Acranelift%3Aarea%3Amachinst+-label%3Awasi%3Atests+-label%3Awasmtime%3Ac-api+-label%3Awasmtime+-label%3Awasmtime%3Aapi+-label%3Afuzzing+-label%3Acranelift%3Adiscussion+-label%3Awasm-proposal%3Areference-types+-label%3Acranelift%3Aarea%3Apeepmatic+-label%3Awasmtime%3Adebugging\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 225060869,
        "sender_full_name": "bjorn3",
        "timestamp": 1612377654
    },
    {
        "content": "<p>glancing at that, I think we might want to expand our label set: benchmarking, ci, optimization...</p>",
        "id": 225070555,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1612381456
    },
    {
        "content": "<p>but, yeah, we should start labeling some of those</p>",
        "id": 225070739,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1612381540
    },
    {
        "content": "<p>What is the status of wasm2obj? There are several issues about it open, but I don't know if it is still supported.</p>",
        "id": 225075367,
        "sender_full_name": "bjorn3",
        "timestamp": 1612383570
    },
    {
        "content": "<p>Also the browser wasi polyfill is pretty much unsupported and doesn't support the latest wasi, right?</p>",
        "id": 225075591,
        "sender_full_name": "bjorn3",
        "timestamp": 1612383672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>?</p>",
        "id": 225077380,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1612384554
    },
    {
        "content": "<p>48 issues closed. 333 left.</p>",
        "id": 225081544,
        "sender_full_name": "bjorn3",
        "timestamp": 1612386268
    },
    {
        "content": "<p>/me calls it a day</p>",
        "id": 225081563,
        "sender_full_name": "bjorn3",
        "timestamp": 1612386276
    },
    {
        "content": "<p>I don't actually know the current status of wasm2obj. <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span>; do you know?</p>",
        "id": 225083382,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1612386986
    },
    {
        "content": "<p>I did not look into that for 3-4 months, no. It produced valid obj files with DWARF info when needed</p>",
        "id": 225083677,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1612387102
    },
    {
        "content": "<p>/me used wasm2obj only to troubleshot DWARF issues</p>",
        "id": 225086326,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1612388253
    },
    {
        "content": "<p>Also, yes, the wasi browser polyfill in the wasmtime tree is unsupported right now</p>",
        "id": 225204387,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1612464582
    },
    {
        "content": "<p>In theory we could build a new polyfill in a similar way, however one of the things we learned since building that was that hand-writtenJS polyfills that various people have end up being much simpler and smaller</p>",
        "id": 225204552,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1612464650
    },
    {
        "content": "<p>Did another pass and opened a few PR's for easy to fix issues.</p>",
        "id": 231162288,
        "sender_full_name": "bjorn3",
        "timestamp": 1616264335
    },
    {
        "content": "<p>Another pass. The following can be closed I think:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1035\">https://github.com/bytecodealliance/wasmtime/issues/1035</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1042\">https://github.com/bytecodealliance/wasmtime/issues/1042</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\">https://github.com/bytecodealliance/wasmtime/issues/1082</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/143\">https://github.com/bytecodealliance/wasmtime/issues/143</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/189\">https://github.com/bytecodealliance/wasmtime/issues/189</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/273\">https://github.com/bytecodealliance/wasmtime/issues/273</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/937\">https://github.com/bytecodealliance/wasmtime/issues/937</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1035\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0a093b4bf1a33b35ff66764750b9de36920071ac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663166366362666130646435346362363739323834316535306164346164643331323361386633373466616561623765353333383761646635336232333831382f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31303335&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1035\" title=\"Consider alternative methods for writing binary data 路 Issue #1035 路 bytecodealliance/wasmtime\">Consider alternative methods for writing binary data 路 Issue #1035 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, binemit has its own CodeSink trait for writing binary data. It isn't entirely satisfying, in part because it's an unsafe interface -- it doesn't perform bounds checking on the underlying...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1042\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/112c33a23b29909bc158c1e2ca0b37abe85ffe98/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303036393065623333643765616665663831393161613731363565633730323861643534393463643265383664383566383065633134656135666232343163652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31303432&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1042\" title=\"Example combining wasm + simplejit 路 Issue #1042 路 bytecodealliance/wasmtime\">Example combining wasm + simplejit 路 Issue #1042 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I'd like to use CraneLift as a JIT backend for a standalone WebAssembly embedding. However, from browsing the documentation I'm not sure how to do this, or even if it's fully possible yet. An examp...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5584e0585e66f402e68363bcdc261aaa18c63b4d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633438663838356238623831356638303139646666313663366362333132626531666231343034363535363964333431326232623731346233633264323334372f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31303832&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1082\" title=\"Add support for a HeapBase argument 路 Issue #1082 路 bytecodealliance/wasmtime\">Add support for a HeapBase argument 路 Issue #1082 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is the continuation of the closed PR bytecodealliance/cranelift#624. Spidermonkey uses a pinned register to contain the HeapBase on x64. It is supposed to be callee preserved, so we need a way...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/143\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/695fdcd71f4e7313ff171f34534df69125edf30b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616663633365326335366339313631306134393365366535616463336461353066396233633436306536653266323262633133316237323264353161323432362f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f313433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/143\" title=\"__WASI_RIGHT_PATH_OPEN when calling __wasi_path_open 路 Issue #143 路 bytecodealliance/wasmtime\">__WASI_RIGHT_PATH_OPEN when calling __wasi_path_open 路 Issue #143 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I'm confused, if calling __wasi_path_open, should you always pass this flag? Where do you get the initial permission to open a file?</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/189\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/24c8af9fee2a9323461b3fddc3598cd713d1cf01/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613533643633643332626439623530323134623664313561336365343435303762653061663961386662616139363134616630343939366132636139646234302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f313839&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/189\" title=\"Unable to disable default features in Wasmtime dependencies 路 Issue #189 路 bytecodealliance/wasmtime\">Unable to disable default features in Wasmtime dependencies 路 Issue #189 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I am interested in building Wasmtime against a Cranelift with all architectures disabled except for the target architecture. From my research, it seems that the way to accomplish this would be to r...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/273\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ca40b746706024cf2261c24573da15baeba7e491/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366533663039373161353461313830636666313630383631323039316330363432646662626438326332643834356339613361356263323264326537363764612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f323733&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/273\" title=\"Why is there no path_filestat_set_size in the WASI API? 路 Issue #273 路 bytecodealliance/wasmtime\">Why is there no path_filestat_set_size in the WASI API? 路 Issue #273 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">To quote the spec: __WASI_RIGHT_PATH_FILESTAT_SET_SIZE The right to change a file's size (there is no __wasi_path_filestat_set_size()). If __WASI_RIGHT_PATH_OPEN is set, includes the right to invok...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/937\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6f325349c8943ae7dce7db1dfdaec88606a2e1ee/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383530376435306135303139323938353135326633363938653763376335303531383634383538653034383865303366396330653239363564333139626434342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f393337&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/937\" title=\"Broken link to JS polyfill source in intro 路 Issue #937 路 bytecodealliance/wasmtime\">Broken link to JS polyfill source in intro 路 Issue #937 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">The link to the Javascripte polyfill source code in https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-intro.md#the-browser-polyfill seems to be broken. I got to the document via wa...</div></div></div>",
        "id": 446314643,
        "sender_full_name": "bjorn3",
        "timestamp": 1719084949
    },
    {
        "content": "<p>If someone with appropriate permissions could take a look, that did be appreciated.</p>",
        "id": 446314779,
        "sender_full_name": "bjorn3",
        "timestamp": 1719085031
    },
    {
        "content": "<p>Awesome, thanks for making the pass! I closed four of them; the two WASI ones (143, 273) I'll delegate to someone else (<span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> ? <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ?) for final evaluation</p>",
        "id": 446341615,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1719098111
    }
]