[
    {
        "content": "<p>Hi all, I am trying to implement a brainfuck jit in cranelift. I cannot figure out how to implement the tape. I have basic compiler knowledge (implemented a few toy interpreted languages). This is my first time attempting jit. Any help is appreciated.</p>",
        "id": 295573689,
        "sender_full_name": "Mensch272",
        "timestamp": 1661595151
    },
    {
        "content": "<p>Brainfuck clasically works with a 30_000 cell tape and 1 byte cells. As such you could allocate a 30_000 byte buffer and pass a pointer to this to the jitted code as argument. Next you can have the current tape location as argument and return value. Then you can then use iadd to add the buffer address and tape location to get the cell address and finally load.i8 and store.i8 to load and store the current cell.</p>",
        "id": 295621938,
        "sender_full_name": "bjorn3",
        "timestamp": 1661620791
    },
    {
        "content": "<p>You will probably want to do bound checking to ensure that the brainfuck code doesn't go out out of the 30_000 cell bound.</p>",
        "id": 295622027,
        "sender_full_name": "bjorn3",
        "timestamp": 1661620826
    },
    {
        "content": "<p>Would it be possible to allocate the buffer inside cranelift? I also want to compile it using cranelift-object.</p>",
        "id": 295627346,
        "sender_full_name": "Mensch272",
        "timestamp": 1661624502
    },
    {
        "content": "<p>From what I can currently tell, I would have to use DataContent to declare data in the module. I'm not sure how i would use it afterward though.</p>",
        "id": 295628412,
        "sender_full_name": "Mensch272",
        "timestamp": 1661625153
    },
    {
        "content": "<p>Yes, on unix you can call malloc and on windows I believe it is VirtualAlloc or something like that.</p>",
        "id": 295641184,
        "sender_full_name": "bjorn3",
        "timestamp": 1661634724
    },
    {
        "content": "<p>For dynamic allocation that is.</p>",
        "id": 295641203,
        "sender_full_name": "bjorn3",
        "timestamp": 1661634745
    },
    {
        "content": "<p>If you want a single static tape, you can use module.declare_data + module.define_data to define the tape and then module.declare_data_in_func followed by builder.ins().symbol_value(global) to get the address of the tape.</p>",
        "id": 295641331,
        "sender_full_name": "bjorn3",
        "timestamp": 1661634857
    },
    {
        "content": "<p>Trying to load from the tape address gives an error.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tape_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">symbol_value</span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tape</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tape_addr</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Offset32</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 295651955,
        "sender_full_name": "Mensch272",
        "timestamp": 1661646546
    },
    {
        "content": "<p>terminated by signal SIGSEGV (Address boundary error)</p>",
        "id": 295652032,
        "sender_full_name": "Mensch272",
        "timestamp": 1661646624
    },
    {
        "content": "<p>How did you define the tape?</p>",
        "id": 295691281,
        "sender_full_name": "bjorn3",
        "timestamp": 1661682015
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tape_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_ctx</span><span class=\"p\">.</span><span class=\"n\">define_zeroinit</span><span class=\"p\">(</span><span class=\"mi\">30_000</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">declare_data</span><span class=\"p\">(</span><span class=\"s\">\"tape\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">define_data</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_ctx</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data_ctx</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">id</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tape</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_data_in_func</span><span class=\"p\">(</span><span class=\"n\">tape_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 295799719,
        "sender_full_name": "Mensch272",
        "timestamp": 1661760906
    },
    {
        "content": "<p>Did you call module.finalize_definitions() before calling the jitted function?</p>",
        "id": 295825626,
        "sender_full_name": "bjorn3",
        "timestamp": 1661772709
    },
    {
        "content": "<p>aye</p>",
        "id": 296030602,
        "sender_full_name": "Mensch272",
        "timestamp": 1661830323
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"main\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">define_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">clear_context</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">finalize_definitions</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">get_finalized_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 296030627,
        "sender_full_name": "Mensch272",
        "timestamp": 1661830331
    },
    {
        "content": "<p>Weird. No idea what is going on. Sorry.</p>",
        "id": 296052496,
        "sender_full_name": "bjorn3",
        "timestamp": 1661846106
    },
    {
        "content": "<p>Could it be <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\"><code>is_pic</code> on a Mac M1 (aarch64)</a>? Do we have a specific error for that, or do we just crash?</p>\n<p><span class=\"user-mention\" data-user-id=\"528711\">@Mensch272</span> Is there a small sharable snippet that we could test locally?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b26c26cdc06334af6e7643e0633d690e564b5cc5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363137313039396664616233303535396337313730346363613839373533373666656564396537343365326135323363373961323236306161623462333934642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f32393037)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2907\" title=\"Cranelift: implement PIC relocations on AArch64 · Issue #2907 · bytecodealliance/wasmtime\">Cranelift: implement PIC relocations on AArch64 · Issue #2907 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Cranelift emits AbsoluteRelocation Reloc::Abs8 when is_pic setting is enabled in architecture aarch64 Steps to Reproduce (module ;; Recursive factorial (func (export &quot;fac-rec&quot;) (param i64...</div></div></div>",
        "id": 296053110,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661846410
    },
    {
        "content": "<p>I think we crash with a descriptive message (\"PLT is currently only supported on x86_64\"), so its probably not that.</p>",
        "id": 296053387,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661846540
    },
    {
        "content": "<p>I'm running fedora 36 with selinux-fix. I'll create a new project and share it here.</p>",
        "id": 296055073,
        "sender_full_name": "Mensch272",
        "timestamp": 1661847429
    },
    {
        "content": "<p>Thanks! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 296055108,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661847445
    },
    {
        "content": "<p>I created a new rust project using cargo, and copied the code from my previous project. The new project builds and runs correctly. The old project still throws the same error even after running <code>cargo clean</code>. Suffice it to say I am extremely confused. I will try to see if I can replicate the error.</p>",
        "id": 296164419,
        "sender_full_name": "Mensch272",
        "timestamp": 1661876969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"528711\">Mensch272</span> has marked this topic as resolved.</p>",
        "id": 296301392,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661944035
    }
]