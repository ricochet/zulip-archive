[
    {
        "content": "<p>Hey all,</p>\n<p>I'm interested in surfacing an API from a Rust host to a given Wasm guest program.  <a href=\"https://wasmtime.dev/\">Wasmtime</a> looks like a good fit for my host engine.   For the API encoding/schema, I've been trying to catch up on the last few years of discussion/progress on WebAssembly Interface Types, WebAssembly Components, Canonical ABI, etc. and am a touch confused as to the \"recommended\" path forward _today_.  I understand that everything is still in flux, so I figured I'd ask directly and see if anyone has a \"current\" answer:</p>\n<p>1) Is <a href=\"https://github.com/bytecodealliance/wit-bindgen\">wit-bindgen</a> + <code>*.wit</code> files the currently recommended tooling for \"encoding\" an API between a Wasmtime host and guest and providing the language-specific generated code?</p>\n<p>2) If <code>*.wit</code> is the format of record for encoding this API, is there a good IDL explainer  (akin to <a href=\"https://google.github.io/flatbuffers/flatbuffers_guide_writing_schema.html\">this one for flatbuffers</a> or <a href=\"https://developers.google.com/protocol-buffers/docs/proto3\">this one for protobuf</a>?) as to how to write a schema file?</p>\n<p>I've looked at the <a href=\"https://github.com/WebAssembly/interface-types/blob/main/proposals/interface-types/Explainer.md\">WebAssembly Interface Types explainer</a> but everything there is written in S-expressions and framed in terms of low level semantics instead of being a high-level introduction to the schema that I see <a href=\"https://bytecodealliance.github.io/wit-bindgen/\">wit-bindgen accepting</a>.</p>\n<p>I'm hopeful that I've just overlooked something obvious.  My apologies if my Google-fu was weak.</p>\n<p>Any help would be greatly appreciated.  Thank you.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4897a0df2441de6ef0857610570ec98e239602bd\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306365353963386139306436656163316162663036376534646230343535613131306164633363376439616166376531393136666266363439386439326665302f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developers.google.com/protocol-buffers/docs/proto3\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e2b6928a4414c3f253f9b0128f98497c164389d1\\/68747470733a2f2f7777772e677374617469632e636f6d2f64657672656c2d646576736974652f70726f642f76306530663538396564643835353032613430643738643764303832356462386561356566336239396162343037303338316565383639373763393136383733302f646576656c6f706572732f696d616765732f6f70656e67726170682f676f6f676c652d626c75652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developers.google.com/protocol-buffers/docs/proto3\" title=\"Language Guide (proto3)  |  Protocol Buffers  |  Google Developers\">Language Guide (proto3)  |  Protocol Buffers  |  Google Developers</a></div><div class=\"message_embed_description\">This guide describes how to use the protocol buffer language to structure your protocol buffer data, including .proto file syntax and how to generate data access classes from your .proto files. It covers the proto3 version of the protocol buffers language: for information on the proto2 syntax, see the Proto2 Language Guide.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/interface-types/blob/main/proposals/interface-types/Explainer.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6fd366454f9a5f8807505ba5d1ec881c5cc98dbd\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336430663836363065653161653935656533323131313064373266373636343066633537303166373630313165616132623230356165373531366139386363632f576562417373656d626c792f696e746572666163652d7479706573)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/interface-types/blob/main/proposals/interface-types/Explainer.md\" title=\"interface-types/Explainer.md at main · WebAssembly/interface-types\">interface-types/Explainer.md at main · WebAssembly/interface-types</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/interface-types development by creating an account on GitHub.</div></div></div>",
        "id": 277656564,
        "sender_full_name": "akesling",
        "timestamp": 1649014037
    },
    {
        "content": "<p>1) Yes. 2) <a href=\"https://radu-matei.com/blog/intro-wasm-components/\">This</a> is a pretty good intro, though note that some parts of the system are still evolving, so please ask here, or file an issue, if something doesn't work. There are also some examples in the wit-bindgen tree, <a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md\">wasi-filesystem</a> is another.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://radu-matei.com/blog/intro-wasm-components/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6f0c2ead659ee08ec96c35ff663c6b763083a131\\/68747470733a2f2f7777772e67726176617461722e636f6d2f6176617461722f30333166613266663238333265646362366233306338666662363164613464343f733d323536)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://radu-matei.com/blog/intro-wasm-components/\" title=\"Introduction to WebAssembly components - radu's blog\">Introduction to WebAssembly components - radu's blog</a></div><div class=\"message_embed_description\">WebAssembly and WASI show great promise for the future of computing outside the browser, and the WebAssembly component model aims to improve the portability, cross-language, and composition story for Wasm. This article explains the goals of the component model, and showcases how to use tooling from the Bytecode Alliance to build and consume such components.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/795d657584c92b9c42e8a91cab59ae57b39a43a7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396363353464376631326466346462383465333938336232613533303439333066303262303261353064373437313534396239363334623764626465633565662f576562417373656d626c792f776173692d66696c6573797374656d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md\" title=\"wasi-filesystem/wasi-filesystem.wit.md at main · WebAssembly/wasi-filesystem\">wasi-filesystem/wasi-filesystem.wit.md at main · WebAssembly/wasi-filesystem</a></div><div class=\"message_embed_description\">Filesystem API for WASI. Contribute to WebAssembly/wasi-filesystem development by creating an account on GitHub.</div></div></div>",
        "id": 277818312,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1649123597
    },
    {
        "content": "<p>Amazing, I had exactly the same set of questions and this answers it, lots of confusing/outdated/contradicting information floating around <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 281045576,
        "sender_full_name": "Albert Cervin",
        "timestamp": 1651597818
    }
]