[
    {
        "content": "<p>I have a WIT component/package called <code>lyra:api</code>, it has an interface named <code>ecs</code>. I want to include a resource inside the <code>ecs</code> interface and use it in another component.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">lyra</span><span class=\"p\">:</span><span class=\"nc\">api</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// ecs.wit is adjacent to this .wit file</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// defines resource ecs-world</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">ecs</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then I have this component:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">witguest</span><span class=\"p\">;</span>\n\n<span class=\"sd\">/// An example world for the component to target.</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">math</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">lyra</span><span class=\"p\">:</span><span class=\"nc\">api</span><span class=\"o\">/</span><span class=\"n\">ecs</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ecs</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I run <code>cargo component build</code>, I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">witguest</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">media</span><span class=\"o\">/</span><span class=\"n\">data_drive</span><span class=\"o\">/</span><span class=\"n\">Development</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">lyra</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">scripting</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">witguest</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"p\">)</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">media</span><span class=\"o\">/</span><span class=\"n\">data_drive</span><span class=\"o\">/</span><span class=\"n\">Development</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">lyra</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">scripting</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">witguest</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ecs</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">defined</span>\n<span class=\"w\">            </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">media</span><span class=\"o\">/</span><span class=\"n\">data_drive</span><span class=\"o\">/</span><span class=\"n\">Development</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">lyra</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">scripting</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">witguest</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"p\">:</span><span class=\"mi\">21</span><span class=\"p\">:</span><span class=\"mi\">40</span>\n<span class=\"w\">             </span><span class=\"o\">|</span>\n<span class=\"w\">          </span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ecs</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"p\">;</span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\">                                        </span><span class=\"o\">^--------</span>\n</code></pre></div>\n<p>If you're wondering more about what my project structure is, <a href=\"https://git.seanomik.net/SeanOMik/lyra-wasm-scripting-test\">here's the git repo</a> but it doesn't have these changes in it (I can push them to another branch).</p>",
        "id": 454069239,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721949732
    },
    {
        "content": "<p>i think you need a <code>use lyra:api/imports.{ecs-world};</code></p>",
        "id": 454069800,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721950134
    },
    {
        "content": "<p>in your <code>world example</code>.</p>",
        "id": 454069810,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721950142
    },
    {
        "content": "<p>the <code>include</code> keyword means that all of the imports and exports in the <code>lyre:api/ecs</code> world will be imported/exported in your example world, but it doesnt bring those names into scope - only <code>use</code> does that.</p>",
        "id": 454069937,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721950227
    },
    {
        "content": "<p>Yup that was it! I spent way too long on this and it was so simple lol, thanks!</p>",
        "id": 454070119,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950366
    },
    {
        "content": "<p>happy to help. this is a situation where, if we had amazing error messages like rustc, it would just tell you what to do here</p>",
        "id": 454070178,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721950423
    },
    {
        "content": "<p>oh yeah, better errors would be amazing</p>",
        "id": 454070238,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950450
    },
    {
        "content": "<p>I think better docs and examples would be great as well</p>",
        "id": 454070256,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950469
    },
    {
        "content": "<p>which docs and examples did you use so far?</p>",
        "id": 454070268,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721950481
    },
    {
        "content": "<p>I was looking at the docs here: <a href=\"https://component-model.bytecodealliance.org/design/wit.html\">https://component-model.bytecodealliance.org/design/wit.html</a></p>",
        "id": 454070300,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950507
    },
    {
        "content": "<p>I see where <code>use</code> is explained, but it doesn't show that you also use that to use things from other packages</p>",
        "id": 454070343,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950547
    },
    {
        "content": "<p>Other than the examples there, I've also been looking at the examples on the <a href=\"https://github.com/bytecodealliance/wit-bindgen\">wit-bindgen readme</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0d4812a87f866994bb5d82932b78c81d99d91e2b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386437393437323437626234653037633030343537376131343463666235323864393031626536363038396137356165336566366330383130613531636464392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 454070411,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950570
    },
    {
        "content": "<p>yeah i think the whole section on packages on that doc could be expanded to show a bunch more</p>",
        "id": 454070483,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721950623
    },
    {
        "content": "<p>Okay, so now I'm actually running into a more complicated issue...</p>",
        "id": 454070612,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950705
    },
    {
        "content": "<p>So my plan for this project is to integrate WASM as a scripting language in a game engine. Currently I'm just starting with exposing the ECS (Entity Component System) to WASM. That requires exposing some kind of low level interfaces that include passing a <code>vec&lt;u8&gt;</code> of byte serialized components to and from the host alongside information detailing what those bytes are.</p>\n<p>Because I don't want to always deal with manually (de)serializing those bytes to and from the host every time I want to get something from the ECS world, I planned on making a higher level crate that makes it nicer.</p>",
        "id": 454071090,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950869
    },
    {
        "content": "<p>In the git repo I sent above, the higher level crate is a wasm component and called <code>common-api</code>. This crate is a dependency of the <code>witguest</code> wasm component</p>",
        "id": 454071323,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721950949
    },
    {
        "content": "<p>This is the <code>witguest</code> component world:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">math</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">lyra</span><span class=\"p\">:</span><span class=\"nc\">api</span><span class=\"o\">/</span><span class=\"n\">ecs</span><span class=\"p\">.{</span><span class=\"n\">ecs</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"o\">-</span><span class=\"n\">init</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"o\">-</span><span class=\"n\">update</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">game</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ecs</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p><code>ecs-world</code> is <code>imported</code> in the common-api crate (lyra:api component) but cargo-component through bindings are generating separate structs of the same name of <code>EcsWorld</code>, causing that <code>witguest</code> component not able to use the abstractions of common-api</p>",
        "id": 454071669,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951070
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">on_update</span><span class=\"p\">(</span><span class=\"n\">game_world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">EcsWorld</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">game_world</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Guest update\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">World</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">lyra</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">ecs</span><span class=\"p\">::</span><span class=\"n\">EcsWorld</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">witguest</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">:</span><span class=\"mi\">21</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">World</span><span class=\"p\">::</span><span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">game_world</span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">lyra</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">ecs</span><span class=\"p\">::</span><span class=\"n\">EcsWorld</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">World</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"n\">common_api</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">lyra</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">ecs</span><span class=\"p\">::</span><span class=\"n\">EcsWorld</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">World</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">common_api</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">lyra</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">ecs</span><span class=\"p\">::</span><span class=\"n\">EcsWorld</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">lyra</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">ecs</span><span class=\"p\">::</span><span class=\"n\">EcsWorld</span><span class=\"err\">`</span>\n</code></pre></div>",
        "id": 454071731,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951090
    },
    {
        "content": "<p>have you taken a look at the way that <code>wasmtime-wasi-http</code> reuses interfaces from the <code>wasmtime-wasi</code> crate?</p>",
        "id": 454071908,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721951143
    },
    {
        "content": "<p>Ohh, no I have not. I'll take a look at that</p>",
        "id": 454072070,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951185
    },
    {
        "content": "<p>oh, wait, you re talking about on the guest side.</p>",
        "id": 454072103,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721951192
    },
    {
        "content": "<p>Yeah</p>",
        "id": 454072128,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951203
    },
    {
        "content": "<p>I'm basically trying to create a high-level crate for making it easier to use imported interfaces that the host defines. But then the guest still needs to export some functions for the host to call which also passes those low level interfaces that need to be \"raised\" to the higher-level ones</p>",
        "id": 454072541,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951344
    },
    {
        "content": "<p>i dont usually use cargo-component, which invokes wit-bindgen on the users behalf, but the mechanism wit-bindgen exposes for this is the <code>with:</code> clause in the generate macro: <a href=\"https://docs.rs/wit-bindgen/latest/wit_bindgen/macro.generate.html\">https://docs.rs/wit-bindgen/latest/wit_bindgen/macro.generate.html</a></p>",
        "id": 454072597,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721951361
    },
    {
        "content": "<p>i cant link to the right section in the docs, there, you have to scroll down to the comments on <code>with:</code></p>",
        "id": 454072638,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721951376
    },
    {
        "content": "<p>in the final section</p>",
        "id": 454072671,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721951394
    },
    {
        "content": "<p>Ohhh I see it</p>",
        "id": 454072710,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951402
    },
    {
        "content": "<blockquote>\n<p>When generating bindings for interfaces that are not defined in the same package as <code>world</code>, <strong>this option can be used to either generate those bindings or point to already generated bindings.</strong></p>\n</blockquote>",
        "id": 454072823,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951431
    },
    {
        "content": "<p>Okay that seems like that is actually perfect since I also have the common-api crate as a dependency in cargo</p>",
        "id": 454072892,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951456
    },
    {
        "content": "<p>I'll try that rq</p>",
        "id": 454072926,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721951465
    },
    {
        "content": "<p>yeah its designed for this use case</p>",
        "id": 454072934,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1721951467
    },
    {
        "content": "<p>Okay I'm doing something wrong, but I'm not sure what as the docs don't explain the examples they give. This is what I'm trying in the <code>witguest</code> component:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"example\"</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"lyra:api/ecs\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">common_api</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">lyra</span><span class=\"p\">::</span><span class=\"n\">api</span><span class=\"p\">::</span><span class=\"n\">ecs</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>But when trying to compile, its not able to find the <code>lyra:api/ecs</code> package:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">         </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n<span class=\"w\">            </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">media</span><span class=\"o\">/</span><span class=\"n\">data_drive</span><span class=\"o\">/</span><span class=\"n\">Development</span><span class=\"o\">/</span><span class=\"n\">Rust</span><span class=\"o\">/</span><span class=\"n\">lyra</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">scripting</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">witguest</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"p\">:</span><span class=\"mi\">15</span><span class=\"p\">:</span><span class=\"mi\">9</span>\n<span class=\"w\">             </span><span class=\"o\">|</span>\n<span class=\"w\">          </span><span class=\"mi\">15</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">lyra</span><span class=\"p\">:</span><span class=\"nc\">api</span><span class=\"o\">/</span><span class=\"n\">ecs</span><span class=\"p\">.{</span><span class=\"n\">ecs</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">};</span>\n<span class=\"w\">             </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">^-------</span>\n</code></pre></div>",
        "id": 454074577,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721952153
    },
    {
        "content": "<p>I tried to change that with to <code>\"lyra:api\": common_api::bindings::lyra::api</code> but that didn't work either, it gave the same error</p>",
        "id": 454074653,
        "sender_full_name": "SeanOMik",
        "timestamp": 1721952213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/stream/206238-general/topic/Including.20types.20from.20other.20components.2Fpackages/near/454070483\">said</a>:</p>\n<blockquote>\n<p>yeah i think the whole section on packages on that doc could be expanded to show a bunch more</p>\n</blockquote>\n<p>Generally, in all past versions of such \"component [object] models\" shall we say, there arose <em>instantly</em> the question of creating shared versions of types that each side used such that each side of an interaction did not need to think of differently named but identical types.</p>",
        "id": 454283136,
        "sender_full_name": "Ralph",
        "timestamp": 1721995087
    },
    {
        "content": "<p>We need to take that as a standalone subject in the docs; tons and tons of threads on the zulip are quitely literally about why is the type different? how do I reuse the same type? and so on...</p>",
        "id": 454283225,
        "sender_full_name": "Ralph",
        "timestamp": 1721995135
    }
]