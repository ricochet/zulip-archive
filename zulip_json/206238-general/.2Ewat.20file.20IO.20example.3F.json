[
    {
        "content": "<p>This file (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\">https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md</a>) gives a very simple hello world example in the .WAT format. Is there a similar example that does file IO (e.g. write a string to \"output.txt\") that uses a file descriptor that is passed in from the runtime itself (instead of one that uses \"open\"/libpreopen)?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 194253146,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1587005701
    },
    {
        "content": "<p>The simplest way to do that would be to pass in the file descriptor as index 0 and have the program read from stdin</p>",
        "id": 194255679,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1587009391
    },
    {
        "content": "<p>Or, for output, pass it in as index 1 and have the program write to stdout</p>",
        "id": 194255812,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1587009594
    },
    {
        "content": "<p>In the future we plan to add more ways to pass in handles, but for now, stdin/stdout/stderr and directories are what can be passed in, so the simplest thing is to just use those.</p>",
        "id": 194255880,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1587009650
    },
    {
        "content": "<p>Tangential question - how do we know the file descriptors of pre-opened directories in Wasm (besides the normal stdin/stdout/stderr descriptors)? I see in the wasi libc source code,  that \"__wasilibc_find_relpath\" returns dirfd (<a href=\"https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/libpreopen/libpreopen.c\" title=\"https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/libpreopen/libpreopen.c\">https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/libpreopen/libpreopen.c</a>). But I cannot find its implementation and it does not seem to be described as a WASI system call in the spec. I assume this function must have access to the file descriptors of the pre-opened directories passed to the program.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/libpreopen/libpreopen.c\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/master/libc-bottom-half/libpreopen/libpreopen.c\" title=\"WebAssembly/wasi-libc\">WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 194257921,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1587012665
    },
    {
        "content": "<p>As <a href=\"https://github.com/WebAssembly/wasi-libc/blob/7b92f334e69c60a1d1c5d3e289790d790b9a185b/libc-bottom-half/libpreopen/libpreopen.c#L548\" title=\"https://github.com/WebAssembly/wasi-libc/blob/7b92f334e69c60a1d1c5d3e289790d790b9a185b/libc-bottom-half/libpreopen/libpreopen.c#L548\"><code>__wasilibc_populate_libpreopen</code></a> (which is called by a WASI executable when it initializes), enumerating FD from 3 until <code>__wasi_fd_prestat_dir_name</code> returns non-success could help you.<br>\nActually this is not documented. But I guess there's no documented way.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/7b92f334e69c60a1d1c5d3e289790d790b9a185b/libc-bottom-half/libpreopen/libpreopen.c#L548\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/7b92f334e69c60a1d1c5d3e289790d790b9a185b/libc-bottom-half/libpreopen/libpreopen.c#L548\" title=\"WebAssembly/wasi-libc\">WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 194258390,
        "sender_full_name": "YAMAMOTO Yuji",
        "timestamp": 1587013380
    },
    {
        "content": "<p>So this might not be entirely relevant, but I did a PoC where you can assign an fd to a resource in Wasmtime directly from the CLI and then read and/or write on it (call <code>fd_read</code> and <code>fd_write</code> only, plus <code>fd_fdstat_get</code> which is always available). Here's the sources: <a href=\"https://github.com/kubkon/wasi-compute\" title=\"https://github.com/kubkon/wasi-compute\">https://github.com/kubkon/wasi-compute</a> The example is in Rust though and not wat.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kubkon/wasi-compute\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1519747?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kubkon/wasi-compute\" title=\"kubkon/wasi-compute\">kubkon/wasi-compute</a></div><div class=\"message_embed_description\">Experimental minimal example of deterministic compute functions in WASI - kubkon/wasi-compute</div></div></div>",
        "id": 194277034,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1587028976
    },
    {
        "content": "<p>The example I pasted in required certain customisations that I added to Wasmtime and which are only available in my fork, but hopefully the README should explain it relatively OK</p>",
        "id": 194277243,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1587029108
    }
]