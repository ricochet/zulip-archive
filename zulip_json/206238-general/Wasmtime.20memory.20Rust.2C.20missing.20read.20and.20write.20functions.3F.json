[
    {
        "content": "<p>I was working with wasmtime (rust) until the point where I had to interact with the memory of my WebAssembly module. In the doc there is written about these <code>read</code> and <code>write</code> functions (<a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#method.read\">https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#method.read</a>), but I don't seem to have them, does anybody know if you have to export the memory in a specific way to have access to those functions? </p>\n<p>This is the way I exported the memory:</p>\n<p><code> let mem = instance.get_memory(\"memory\").expect(\"memory export failed\");</code></p>\n<p>And this is the error I get whenever I try to use <code>read</code> or <code>write</code> (stuff like <code>mem.write()</code> ):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\">  </span><span class=\"err\">`</span><span class=\"n\">write</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">struct</span>  <span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Memory</span><span class=\"err\">`</span><span class=\"w\">  </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n\n<span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\">  </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Memory</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">help</span>: <span class=\"nc\">items</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">traits</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">scoperustc</span><span class=\"p\">(</span><span class=\"n\">E0599</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">(</span><span class=\"mi\">163</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">)</span>: <span class=\"nc\">method</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\">  </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Memory</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226373831,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613389652
    },
    {
        "content": "<p>What version of <code>wasmtime</code> do you depend on? <code>Memory::write</code> was introduced in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\">#2528</a>, which was merged 22 days ago. Wasmtime 0.22.1 was released 27 days ago, do it doesn't include it.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2528\" title=\"Add safe Memory::read and Memory::write methods by theduke 路 Pull Request #2528 路 bytecodealliance/wasmtime\">Add safe Memory::read and Memory::write methods by theduke 路 Pull Request #2528 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Introduce Memory::read and Memory::write methods for accessing memory contents safely.\nAlso adds a test and mentions the  the new methods in the Memory docs.\nFixes #2484.\nCurrently most fallible me...</div></div></div>",
        "id": 226375858,
        "sender_full_name": "bjorn3",
        "timestamp": 1613390870
    },
    {
        "content": "<p>Oh I see, I see,  it is something very new, I am using wasmtime = \"0.22.0\"</p>",
        "id": 226376208,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613391089
    },
    {
        "content": "<p>How do I get to use the version with read and write? <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>, like what do I have to write in cargo.toml (because in <a href=\"http://crea.io\">crea.io</a> the latest version is 0.22.0)</p>",
        "id": 226376242,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613391119
    },
    {
        "content": "<p>You can use <code>wasmtime = { git = \"https://github.com/bytecodealliance/wasmtime.git\", rev = \"09b976e1d53a05150c7b8acd36a82b34cec787b3\" }</code>. This will add a dependency on the (as of now) latest commit in the wasmtime repo.</p>",
        "id": 226376575,
        "sender_full_name": "bjorn3",
        "timestamp": 1613391357
    },
    {
        "content": "<p>I see, thank you <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span></p>",
        "id": 226376846,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613391552
    },
    {
        "content": "<p>Is it the same thing for wasmtime-wasi? <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> , like, do I use the same rev number?</p>",
        "id": 226378734,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613392718
    },
    {
        "content": "<p>Yes, you have to use the same rev for everything.</p>",
        "id": 226378768,
        "sender_full_name": "bjorn3",
        "timestamp": 1613392742
    },
    {
        "content": "<p>FWIW, we'll do a new release this week, which will include that change</p>",
        "id": 226382215,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1613394933
    },
    {
        "content": "<p>Oh I see that is great to hear!, have you guys changed how WasiCtxBuilder works (at least in the not master branch)? </p>\n<p><code>let mut cx1 = WasiCtxBuilder::new();\n        cx1.preopened_dir(dir, \".\");\n        let cx1 = cx1.build().expect(\"Problem with wasctx\");\n</code></p>\n<p><code>wasictxBuilder</code>used to be part of wasmtime-wasi but it is now part of wasi-cap-std-sync.  <br>\nI get this error now:  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">moved</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"err\">`</span><span class=\"n\">cx1</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">moverustc</span><span class=\"p\">(</span><span class=\"n\">E0382</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">(</span><span class=\"mi\">121</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">)</span>: <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cx1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"n\">wasi_cap_std_sync</span>::<span class=\"n\">WasiCtxBuilder</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Copy</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"></span>\n<span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">(</span><span class=\"mi\">122</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">)</span>: <span class=\"err\">`</span><span class=\"n\">cx1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">moved</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"></span>\n<span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">19</span><span class=\"p\">)</span>: <span class=\"nc\">value</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This worked fine before when <code>opened_dir</code> was taking a file instead of a Dir</p>",
        "id": 226385788,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613396895
    },
    {
        "content": "<p>Never mind, it is because preopened_dir returns result now.</p>",
        "id": 226387186,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613397578
    }
]