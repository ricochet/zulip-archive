[
    {
        "content": "<p>Hi! How do wasip1 adapters allocate memory via <code>cabi_realloc</code> and <code>memory.grow</code>?</p>\n<p>Context:<br>\nI'm trying to adapt wasip1 Kotlin libraries to wasip2, using the </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">adapt</span><span class=\"w\"> </span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">.</span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Kotlin uses WasmGC for its own memory. It allocates linear memory only for the scope of import/export calls, and immediately copies the data to/from GC memory and deallocates the linear memory when it goes out of scope. This stack-based allocator owns the whole single linear memory. It works fine for both wasip1 and C-M, but I'm having trouble making adapters between the two work.</p>\n<p>I see that by default wasip1 adapters piggyback on <code>cabi_realloc</code> to allocate memory for itself, like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">kotlin</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"k\">unsafe</span><span class=\"p\">.</span><span class=\"n\">cabi_realloc</span>\n<span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">adapter</span><span class=\"p\">:</span><span class=\"nc\">wasi_snapshot_preview1</span><span class=\"p\">.</span><span class=\"n\">allocate_stack</span>\n<span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">adapter</span><span class=\"p\">:</span><span class=\"nc\">wasi_snapshot_preview1</span><span class=\"p\">.</span><span class=\"n\">fd_write</span>\n<span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">shim</span><span class=\"p\">.</span><span class=\"n\">adapt</span><span class=\"o\">-</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"o\">-</span><span class=\"n\">fd_write</span>\n<span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">kotlin</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">.</span><span class=\"n\">println</span>\n</code></pre></div>\n<p>Current Kotlin's cabi_realloc expects to be called only from canonical ABI, and crashes.</p>\n<p>Do adapters expect <code>cabi_realloc</code> to behave like a full libc <code>realloc</code>? Or is there a simpler contract?</p>\n<p>I also see the <code>--realloc-via-memory-grow</code>, which seems to work. Does it use the grown page temporarily, or could the main core module corrupt the adapter state when allocating its own memory.</p>",
        "id": 448881257,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1720020327
    },
    {
        "content": "<p>Hi Slava.  I helped implement this part of the adapter, so I'll share what I know:</p>\n<ul>\n<li>The adapter needs a full page (i.e. 64KB) of memory for its exclusive use for as long as the component is instantiated (i.e. it's not a temporary allocation)</li>\n<li>If the module being adapted exports <code>cabi_realloc</code>, it will use that by default (as you noted).  Otherwise, it will use <code>memory.grow</code> to allocate a single page and assume the module will not try to use it.  Modules built using a reasonably recent version of <code>wasi-libc</code> should work fine -- it's allocator knows to only use pages it has allocated itself.</li>\n</ul>\n<p>Is it possible to either make Kotlin's <code>cabi_realloc</code> work when the adapter calls it or make it use only linear memory it allocated itself via <code>memory.grow</code>?  The other option would be to use WASIp2 directly, in which case you won't need the adapter at all.  That's the approach the TinyGo folks took.</p>",
        "id": 448883277,
        "sender_full_name": "Joel Dice",
        "timestamp": 1720020750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587245\">Slava Kuzmich</span> has marked this topic as resolved.</p>",
        "id": 448891096,
        "sender_full_name": "Notification Bot",
        "timestamp": 1720022511
    }
]