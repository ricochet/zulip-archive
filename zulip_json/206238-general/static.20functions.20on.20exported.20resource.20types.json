[
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md#canon-resourcenew\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md#canon-resourcenew</a> what happens if <code>resource.new</code> is called on a resource rep a second time?</p>\n<p>For example, let’s say you have a resource <code>number</code> has a static func <code>max(a: number, b: number) -&gt; number</code> that returns one of its arguments.</p>\n<p>The component that implements <code>max</code> will export a lifted function that accepts a rep (pointer) to <code>a</code> and <code>b</code> and returns a <em>handle</em>. At least this is what <code>wit-bindgen c</code> generates.</p>\n<p>What’s the best (or right) way for an implementation to return one of its arguments? e.g. get the preexisting handle for a given rep?</p>",
        "id": 425789160,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710091188
    },
    {
        "content": "<p>Calling <code>resource.new</code> with the same rep is valid, and it makes a new own handle. In the case you're describing the a/b arguments are passed as handles, not as a rep, so you can return one of them back out to the caller. If <code>wit-bindgen c</code> generates pointers there then that's a bug to fix in the bindings generator.</p>",
        "id": 425804376,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710103536
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"example:resources/simple#[static]number.merge\"</span><span class=\"p\">)))</span>\n<span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">__wasm_export_exports_example_resources_simple_static_number_merge</span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">exports_example_resources_simple_own_number_t</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exports_example_resources_simple_static_number_merge</span><span class=\"p\">(((</span><span class=\"n\">exports_example_resources_simple_number_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">exports_example_resources_simple_number_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">));</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">).</span><span class=\"n\">__handle</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 425805919,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710104893
    },
    {
        "content": "<p>From WIT: <code>merge: static func(a: borrow&lt;number&gt;, b: borrow&lt;number&gt;) -&gt; number;</code></p>",
        "id": 425805931,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710104909
    },
    {
        "content": "<p>Is there any instance where an exported function or method would take a rep (pointer) as an argument, instead of a handle?</p>",
        "id": 425806069,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710105023
    },
    {
        "content": "<p>It makes sense to me that the exports API is consistent with the imports API, e.g. that <code>self</code> or resource values are always handles, and that the component can call resource.rep to get the concrete representation of the resource.</p>",
        "id": 425806499,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710105397
    },
    {
        "content": "<p>ah yes if the signature uses <code>borrow&lt;T&gt;</code> arguments then you get a pointer instead of a handle, so that's expected. When you receive a <code>borrow&lt;T&gt;</code> you can't return it, so to return a resource you'd have to return a newly created one</p>",
        "id": 425916872,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710166124
    },
    {
        "content": "<p>There's a special case for borrows to <code>own</code> resources where you get the rep, not the handle, because there's not actually anything you can do with the handle other than get the rep</p>",
        "id": 425916979,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710166160
    },
    {
        "content": "<p>Dang ok.</p>",
        "id": 425917228,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710166227
    },
    {
        "content": "<p>Guess I’ll special case the mapping of lifter borrows to Go types</p>",
        "id": 425917784,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710166385
    },
    {
        "content": "<p>Lifted*</p>",
        "id": 425917813,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710166394
    },
    {
        "content": "<p>I’m trying to wrap my head around the case where you have a component that exports a function with a <code>borrow&lt;t&gt;</code> argument that might be a resource from another component.</p>\n<p>e.g. Component A exports a <code>pollable</code> resource, and Component B <em>also</em> exports a <code>pollable</code> resource.</p>\n<p>It’s straightforward to have a Component C or interface C that exports a function that accepts a <code>borrow&lt;pollable&gt;</code> defined in either component A or component B, since the arguments will be handles.</p>",
        "id": 426016656,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710194819
    },
    {
        "content": "<p>But I can’t see how Component A could have a exported function that accepts a borrowed resource from Component B as an argument, since the argument will be represented as a <code>rep</code> and not a handle.</p>",
        "id": 426016750,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710194869
    },
    {
        "content": "<p>Or is it the intention that one and only one component can export (and therefore implement) a given <code>resource</code> type?</p>",
        "id": 426016966,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710194977
    },
    {
        "content": "<p>I think the answer to your question is that C isn't possible in your scenario, which is why this isn't a problem.</p>\n<p>The longer form answer is that each component is sort of an \"island\" in terms of type information, this means that if C imports A&amp;B it doesn't actually have A&amp;B and it needs to actually define what A&amp;B are. In such a situation C declares the type of A and the type of B, and when doing so it'll declare that each of them exports as <code>pollable</code> and C will understand that the two are different. This means that it's a type error to pass B's <code>pollable</code> to a function in A since that wouldn't type-check. (or would be caught at runtime by indexing tables today)</p>",
        "id": 426017147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710195072
    },
    {
        "content": "<p>Put another way there's no global <code>pollable</code> resource, everyone has their own view of what <code>pollable</code> is, so anyone can implement that and it's up to whomever is stitching everything together to wire it all up right</p>",
        "id": 426017195,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710195105
    },
    {
        "content": "<p>Can a component both import and export the same interface, which includes a resource type?</p>",
        "id": 426017350,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710195179
    },
    {
        "content": "<p>yes</p>",
        "id": 426017596,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710195280
    },
    {
        "content": "<p>when doing so, however, if you're exporting an interface you're exporting a new definition of a resource, so the import and the export will have different types</p>",
        "id": 426017656,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710195304
    },
    {
        "content": "<p>Right.</p>",
        "id": 426017692,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710195320
    },
    {
        "content": "<p>As far as I can tell, this only matters for resource types, since other types are value types or primitives, and can be taken from an export call and passed into an import call.</p>",
        "id": 426018126,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710195482
    },
    {
        "content": "<p>correct, the way I think about it resources are nominal types and everything else is structural</p>",
        "id": 426018293,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710195532
    },
    {
        "content": "<p>OK, thanks. I think my working mental model was that resources were duck-typed and could be freely passed between import and export boundaries, as long as they had the requisite methods.</p>",
        "id": 426018724,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710195695
    },
    {
        "content": "<p>e.g. the provenance of a resource was irrelevant to functions that operated on them, maybe aside from methods, which would need access to the underlying <code>rep</code>.</p>",
        "id": 426018875,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710195744
    },
    {
        "content": "<p>I think I found a bug in the C generator for exported resources.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"example:resources/simple#[static]number.merge\"</span><span class=\"p\">)))</span>\n<span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">__wasm_export_exports_example_resources_simple_static_number_merge</span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">exports_example_resources_simple_own_number_t</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exports_example_resources_simple_static_number_merge</span><span class=\"p\">((</span><span class=\"n\">exports_example_resources_simple_own_number_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exports_example_resources_simple_own_number_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"w\"> </span><span class=\"p\">});</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">).</span><span class=\"n\">__handle</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"example:resources/simple#[static]number.choose\"</span><span class=\"p\">)))</span>\n<span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">__wasm_export_exports_example_resources_simple_static_number_choose</span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">exports_example_resources_simple_borrow_number_t</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exports_example_resources_simple_static_number_choose</span><span class=\"p\">(((</span><span class=\"n\">exports_example_resources_simple_number_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">exports_example_resources_simple_number_t</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">));</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">).</span><span class=\"n\">__handle</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 426822496,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710536996
    },
    {
        "content": "<p>The WIT for these two static functions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">merge</span>: <span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">number</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">number</span><span class=\"p\">;</span>\n<span class=\"n\">choose</span>: <span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">borrow</span><span class=\"o\">&lt;</span><span class=\"n\">number</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">borrow</span><span class=\"o\">&lt;</span><span class=\"n\">number</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">borrow</span><span class=\"o\">&lt;</span><span class=\"n\">number</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 426822578,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710537023
    },
    {
        "content": "<p><code>exports_example_resources_simple_borrow_number_t</code> is defined as such:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">typedef</span><span class=\"w\"> </span><span class=\"n\">exports_example_resources_simple_number_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">exports_example_resources_simple_borrow_number_t</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>It’s a pointer, not a struct, so it can’t have a <code>__handle</code>.</p>",
        "id": 426822716,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710537086
    },
    {
        "content": "<p>One thing there is that there's less validation in <code>wit-parser</code> than there is for components in general. For example in the component model you can't return a borrow, but wit-parser doesn't disallow that</p>",
        "id": 426823092,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710537257
    },
    {
        "content": "<p>Aha. So C generator generates invalid code.</p>",
        "id": 426823144,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710537287
    },
    {
        "content": "<p>I noticed this when I tried to generate Rust bindings, and it blew up</p>",
        "id": 426823162,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710537298
    },
    {
        "content": "<p>yeah it'd be best for you to get a WIT-level error there saying that you can't return a type with a borrow</p>",
        "id": 426823226,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710537328
    },
    {
        "content": "<p>so that way each code generator wouldn't have to handle this case</p>",
        "id": 426823243,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710537335
    },
    {
        "content": "<p>Seems reasonable.</p>",
        "id": 426823253,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710537339
    },
    {
        "content": "<p>one way you can test this today is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">validate</span>\n</code></pre></div>",
        "id": 426823286,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710537357
    },
    {
        "content": "<p>if that doesn't print anything then it's valid</p>",
        "id": 426823298,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710537362
    },
    {
        "content": "<p>Should the WIT spec specify that, or enforce it?</p>",
        "id": 426823421,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710537417
    },
    {
        "content": "<p>I think so yeah, it's not too useful to end developers to let things through parsing and validation that are always errors later on</p>",
        "id": 426826468,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710538906
    }
]