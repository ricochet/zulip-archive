[
    {
        "content": "<p>Apologies if I'm using the zulip wrong, it's my first time.</p>\n<p>Hello, me and my friend <span class=\"user-mention\" data-user-id=\"566667\">@Jack W</span>  saw your keynote (<a href=\"https://www.youtube.com/watch?v=phodPLY8zNE\">YouTube - Keynote: The Path to Components - Luke Wagner, Distinguished Engineer, Fastly</a>). We're both really excited about it, because we'd been discussing something similar for the past few months. It would have a very similar WASM component-based, language-agnostic execution model, except we'd specifically use it to make a new kind of browser for web-like applications. We thought the problems we could solve with the web were:</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"phodPLY8zNE\" href=\"https://www.youtube.com/watch?v=phodPLY8zNE\"><img src=\"https://uploads.zulipusercontent.net/399c133304eccc744f5b2694aec97848822ed218/68747470733a2f2f692e7974696d672e636f6d2f76692f70686f64504c59387a4e452f64656661756c742e6a7067\"></a></div><ul>\n<li>Caching</li>\n<li>Being forced to layer on top of HTML/CSS/JS even as needs change a long way from the original WWW</li>\n<li>Browser bloat</li>\n</ul>\n<p>The way we intended to solve it was with a highly generic WASM-based execution model that still split things into components, similar to what you've laid out. We'd combine that with a \"caching\" system that would communicate hashes and semvers with the origin server and specialised closer caching servers so that only what needed to be downloaded was downloaded (both different versions of existing components and new components). Finally, we'd only expose low-level APIs, particularly in the area of graphics. It'd be something similar to WebGPU, possibly simply WebGPU. </p>\n<p>Applications would use community-built rendering frameworks that'd go anywhere from HTML-like DOMs to game engines. The actual browser wouldn't have to worry about that, and so could stick to being <em>relatively</em> lightweight, particularly compared to modern web browsers. Of course, this reliance on frameworks would mean large download sizes, but the intelligent caching system would handle that.</p>\n<p>Now we've discovered this project, we've been considering implementing a browser that uses it and adding in the necessary tech to make it its own standalone webapp-like system, without needing core spec changes, using the ideas we'd had previously.</p>",
        "id": 311189370,
        "sender_full_name": "Alex CJ",
        "timestamp": 1668981620
    },
    {
        "content": "<p>Just to clarify, we were hoping to contribute to WASI and the component model to get it to a stage where a web browser and caching system could be built, how can we contribute to help achieve this?</p>",
        "id": 311190883,
        "sender_full_name": "Jack W",
        "timestamp": 1668982841
    },
    {
        "content": "<p>Nice! I've thought a re-imagining of the web browser is overdue, especially along the lines of exactly what you've outlined: expose only low-level APIs from the host, and let people build abstractions in untrusted third-party libraries. I think WebAssembly components are a great foundation for that, especially because the security model keeps components isolated from each other except through their explicit public interfaces.<br>\nI'm not following this closely, but if you're interested in using the Wasmtime runtime, I know we have an open tracking issue for ongoing component model work: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\">https://github.com/bytecodealliance/wasmtime/issues/4185</a><br>\nBy the way, I might suggest pure content-addressed storage (looking up a component by its hash) instead of making semver and dependency resolution part of your architecture. That would mean you can delegate caching to either existing HTTP implementations or systems like IPFS.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/113dd67cd412a13af342cdd5d9deaea39f103426\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373135343832343937333762363265623630353439333865363863633136366631303062396639666362653037666535373031343533613933333663383865342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34313835)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\" title=\"Tracking issue for implementing the component model 路 Issue #4185 路 bytecodealliance/wasmtime\">Tracking issue for implementing the component model 路 Issue #4185 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is intended to be a tracking issue for the implementation of the component model proposal of WebAssembly. I&#39;m in the progress of implementing this with work in Wasmtime starting at #4005 a...</div></div></div>",
        "id": 311474214,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1669064448
    },
    {
        "content": "<p>This is indeed really interesting; one thing I've thought about for a while (and talked about with others) is whether it might eventually make sense for the JavaScript implementation in a browser to become a Wasm module (as an interpreter), or for JS to compile to Wasm. We've got the former with the SpiderMonkey.wasm port, and the latter is something we're actively thinking about. It's far from the hardest part of what you describe here but it would be an integral part of it. Happy to see where this goes!</p>",
        "id": 311474704,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1669064653
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> for some related discussions around the above</p>",
        "id": 311474734,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1669064667
    },
    {
        "content": "<p>In addition to experimenting with the component model, an interesting project would be converting Web GPU's Web IDL-based interface into a Wit-based interface (which probably wants handles/resources to be implemented first...), binding to wgpu-rs and, in general, trying to reuse all the browser's work hardening WebGPU against untrusted content.</p>\n<p>While I think it's valuable to let 1000 flowers bloom in this space of new ways of using wasm outside the browser, one word of caution from having seen many discussions of this sort of idea over time at Mozilla is that, despite all its flaws and warts, the DOM/CSS approach has a lot of pretty useful properties that aren't obvious on first glance.  Fully capturing these properties with all the requisite nuance would take an essay and more time to write, but they span: accessibility, content-blocking, consistency, battery life, size, advanced text handling, progressive enhancement, responsiveness and layerization.  A challenge question is: how would a new wasm + low-level-UI platform produce a significantly better UX than what we all experienced 15 years ago with fully-Flash UIs.  I don't want to say it's not possible to avoid this outcome, but it's certainly something you want to have a well-thought-out answer for.</p>",
        "id": 311479419,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1669066785
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253998\">Luke Wagner</span> <a href=\"#narrow/stream/206238-general/topic/WASI.20Web.20Browser.20and.20Component.20Caching/near/311479419\">said</a>:</p>\n<blockquote>\n<p>despite all its flaws and warts, the DOM/CSS approach has a lot of pretty useful properties that aren't obvious on first glance... how would a new wasm + low-level-UI platform produce a significantly better UX than what we all experienced 15 years ago with fully-Flash UIs</p>\n</blockquote>\n<p>Point taken.<br>\nThe closest thing I can point to is the <a href=\"https://raphlinus.github.io/rust/gui/2022/05/07/ui-architecture.html\">xilem architecture</a>, which, raph mentioned has accessibility covered already, and the render cycle seems pretty efficient. (though personally I don't see a good reason for not having a <code>setState</code> thing)</p>\n<p>Should we get Raph in here?</p>",
        "id": 312387447,
        "sender_full_name": "mako yass",
        "timestamp": 1669490066
    },
    {
        "content": "<p>I've been thinking the same thing. It seems like components is on the right path for this.</p>\n<p>I don't think \"Caching\" is the whole solution to dependency bloat. It's a congestion problem, and congestion doesn't have obvious elegant solutions. Congestion is painless until it has gone too far, and once it goes too far, it's not obvious who's most responsible for it.<br>\nSome packages will be larger than others, but sometimes they simply need to be, they will always have excuses.</p>",
        "id": 312403347,
        "sender_full_name": "mako yass",
        "timestamp": 1669502829
    }
]