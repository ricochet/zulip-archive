[
    {
        "content": "<p>I'm sure some here have seen this <a href=\"https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann\">paper</a> or <a href=\"https://www.youtube.com/watch?v=glL__xjviro\">presentation</a> <code>Everything Old is New Again: Binary Security of WebAssembly</code>. <br>\nIt shows how memory unsafe languages can be exploited with vulnerabilities that are usually mitigated by OS protections.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"glL__xjviro\" href=\"https://www.youtube.com/watch?v=glL__xjviro\"><img src=\"https://i.ytimg.com/vi/glL__xjviro/default.jpg\"></a></div><p>I haven't really seen any public responses to this, so I'm curious what the opionions here are.</p>\n<p>Should/does it have to be the responsibility of WASM runtimes to implement/enforce protections like stack canaries and ASLR?</p>",
        "id": 234060543,
        "sender_full_name": "theduke",
        "timestamp": 1618160561
    },
    {
        "content": "<p>Stack canaries can't be implemented by the WASM runtime as it doesn't have any knowledge about the stack LLVM generates. It only knows about the WASM stack which is already completely isolated from arbitrary reads and writes. ASLR also isn't possible as it is the WASM module that defines the location where data is written to and doesn't leave any relocations to allow the WASM runtime to move the data. It also defines the order of entries in the table used for indirect calls, which needs to be dense (first element is at zero and no holes) as far as I know.</p>",
        "id": 234067032,
        "sender_full_name": "bjorn3",
        "timestamp": 1618167047
    },
    {
        "content": "<p>most mitigations should be in the toolchain, and some should additionally be in the runtime.  stack canaries for example are a toolchain-only concern.  read-only memory would involve both</p>",
        "id": 234120153,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1618215312
    }
]