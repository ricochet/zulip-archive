[
    {
        "content": "<p>I'm playing around with the Rust wasmtime API, and I'm trying to pass a pointer to a struct defined in a crate that both the runtime crate and the compiled wasm depend on when I compile the wasm crate to wasm32-wasi, the pointer becomes a u32 parameter, but I'm not sure what to do in the caller to pass a pointer that can be used properly. I tried copying the struct value into the exported memory and passing the address to that, but that still resulted in an out of bounds trap being thrown.</p>",
        "id": 195080660,
        "sender_full_name": "Kaitlyn Kenwell",
        "timestamp": 1587656854
    },
    {
        "content": "<p>Copying the struct into exported memory is right move, did compiled wasm allocated memory for this structure or you just selected the offset randomly?</p>",
        "id": 195083298,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587657934
    },
    {
        "content": "<p>I just started at 0, the crate that I'm trying to run<br>\n is very minimal. Here's the code <a href=\"https://hasteb.in/jufodijo.swift\" title=\"https://hasteb.in/jufodijo.swift\">https://hasteb.in/jufodijo.swift</a></p>",
        "id": 195087611,
        "sender_full_name": "Kaitlyn Kenwell",
        "timestamp": 1587659921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284857\">@Kaitlyn Kenwell</span>  0 is not right. Ask wasm to allocate memory for you, e.g. Vec::with_capacity + mem::forget perhaps</p>",
        "id": 195089928,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587660962
    },
    {
        "content": "<p>I don't understand how that ties in to sending a struct from the host into the wasm application</p>",
        "id": 195100147,
        "sender_full_name": "Kaitlyn Kenwell",
        "timestamp": 1587666028
    },
    {
        "content": "<p>Based on your example your structure contains other pointers: the <code>s</code></p>",
        "id": 195100393,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587666194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284857\">@Kaitlyn Kenwell</span>  Do you set 5 i32's in the wasm exported memory for the <code>CommonStruct</code>? Which values are these initialized to?</p>",
        "id": 195100765,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587666416
    },
    {
        "content": "<p>if buffer of the <code>String</code> points to some weird location, you might be getting out of bounds.</p>",
        "id": 195101090,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587666563
    },
    {
        "content": "<p><a href=\"https://hasteb.in/inarumol.js\" title=\"https://hasteb.in/inarumol.js\">https://hasteb.in/inarumol.js</a> here's what I have in the host, ignore the &amp;str parameter, I cut that out to make sure that extra pointers weren't a factor</p>",
        "id": 195101295,
        "sender_full_name": "Kaitlyn Kenwell",
        "timestamp": 1587666655
    },
    {
        "content": "<p>I think main issue here is that you are mixing wasm pointer and native pointer, e.g. <code>let ptr = &amp;buf[0] as *const _ as i32;</code></p>",
        "id": 195101549,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587666798
    },
    {
        "content": "<p>it shall be <code>let ptr = 0;</code> -- you cannot cast 64 bit pointer to i32, it needs to be offset in wasm memory (from host point of view)</p>",
        "id": 195101670,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587666863
    },
    {
        "content": "<p>ok</p>",
        "id": 195101681,
        "sender_full_name": "Kaitlyn Kenwell",
        "timestamp": 1587666870
    },
    {
        "content": "<p>also <code>std::ptr::copy</code> definitely wrong, since it copied all pointers as is (not i32 offsets as mentioned above)</p>",
        "id": 195101760,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1587666917
    },
    {
        "content": "<p>for what its worth: this sort of translation between guest memory and host is complicated and easy to get wrong in ways that may cause security problems (e.g. letting the guest modify a host pointer). the crates/wiggle crate is designed for automatically generating host interfaces from <code>.witx</code> descriptions. it is currently used in crates/wasi-common.</p>",
        "id": 195102116,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587667106
    },
    {
        "content": "<p>we're also using it over in lucet. unfortunately i'm not the authority on how to integrate it with wasmtime, but hopefully you can follow how its use in wasi-common works?</p>",
        "id": 195102222,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587667154
    },
    {
        "content": "<p>For more info on how to use these, <span class=\"user-mention\" data-user-id=\"269505\">@Radu M</span>  recently wrote a blog post describing how to add syscalls using wasi-common: <a href=\"https://radu-matei.com/blog/adding-wasi-syscall/\" title=\"https://radu-matei.com/blog/adding-wasi-syscall/\">https://radu-matei.com/blog/adding-wasi-syscall/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://radu-matei.com/blog/adding-wasi-syscall/\" style=\"background-image: url(https://www.gravatar.com/avatar/031fa2ff2832edcb6b30c8ffb61da4d4?s=256)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://radu-matei.com/blog/adding-wasi-syscall/\" title=\"A beginner's guide to adding a new WASI syscall in Wasmtime - radu's blog\">A beginner's guide to adding a new WASI syscall in Wasmtime - radu's blog</a></div><div class=\"message_embed_description\">In this article, we explore how to add a new system call to WASI, the WebAssembly System Interface, and implement it in Wasmtime</div></div></div>",
        "id": 195104549,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1587668205
    },
    {
        "content": "<p>oh wow, i was not aware of that!</p>",
        "id": 195104680,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587668272
    },
    {
        "content": "<p>great blog post <span class=\"user-mention\" data-user-id=\"269505\">@Radu M</span></p>",
        "id": 195105110,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587668456
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 195127568,
        "sender_full_name": "Johnnie Birch",
        "timestamp": 1587681053
    },
    {
        "content": "<p>Sort of related to this, I've decided to just try passing data with marshalling and to use a proc macro to make it easier to use on the plugin end. in general, how can a host know where is a safe region in the memory to copy to? I didn't run into any problems with a fairly simple program with just copying into an early index in the memory, but when I printed it out I did see more stuff near the bottom. Not sure how I can be sure if I won't ruin anything accidentally by just choosing some arbitrary location near the start to inject values</p>",
        "id": 195265617,
        "sender_full_name": "Kaitlyn Kenwell",
        "timestamp": 1587785519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284857\">@Kaitlyn Kenwell</span> the general principle is that the wasm program itself owns and manages its memory -- e.g., the copy of the standard library that you link with inside the wasm environment will be keeping its own malloc data structures. So the best way to allow for a caller to pass data in would be to invoke an entry point first to ask for a block of memory, then fill that memory with your data, then invoke the main function call. E.g., export both a <code>alloc_buffer(len: usize) -&gt; *mut u8</code> function along with your <code>test_fun(...)</code></p>",
        "id": 195266021,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587786342
    },
    {
        "content": "<p>In Rust, you can alloc a Vec and then <code>forget</code> it, as Yury hints at above, or for a struct, you can use <code>Box::into_raw</code></p>",
        "id": 195266074,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587786442
    },
    {
        "content": "<p>There is <code>Vec::into_raw_parts</code>, which returns a ptr, len and capacity.</p>",
        "id": 195273733,
        "sender_full_name": "bjorn3",
        "timestamp": 1587801709
    }
]