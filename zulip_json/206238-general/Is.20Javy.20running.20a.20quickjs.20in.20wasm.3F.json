[
    {
        "content": "<p>I am curious how Javy is implemented and the performance compared with rust wasm.</p>",
        "id": 465145293,
        "sender_full_name": "Hoping White",
        "timestamp": 1724669088
    },
    {
        "content": "<p>yes javy is just rust wasm + rquickjs + wizer, I don't know of any direct comparisons of performance when comparing a pure rust implementation with a js implementation with javy, and that would also highly depend on the code you are benchmarking</p>",
        "id": 465147212,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1724669929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"739233\">@Hoping White</span>  Whenever anyone asks about QuickJS performance (or the performance of JS interpreters in general), I point them to <a href=\"https://bellard.org/quickjs/bench.html\">https://bellard.org/quickjs/bench.html</a>.  It doesn't address your question specifically, and none of the results listed there use Wasm as the target, but it will give you a general idea of what to expect.</p>\n<p>Specifically, I would expect numbers in the <code>V8 (JIT)</code> column to be comparable to Rust-on-Wasm.  So, for CPU-bound workloads, you could expect a roughly 50x performance difference between QuickJS and Rust -- sometimes more, sometimes less.  It varies a lot, though, so you'll want to do your own benchmarking with your specific workload(s) if you need a precise answer.</p>",
        "id": 465188369,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724679417
    },
    {
        "content": "<p>Porffor is an experimental AoT JS compiler that's targeting the order of AoT/JIT perf. Still very nascent and not production ready but a cool idea: <a href=\"https://porffor.dev/\">https://porffor.dev/</a></p>",
        "id": 465276559,
        "sender_full_name": "Milan",
        "timestamp": 1724708977
    },
    {
        "content": "<p>There is also AOT compilation using SpiderMonkey that I've developed over the past 1.5 years -- available in StarlingMonkey now but please treat as experimental; going to make some blog posts about it soon too</p>",
        "id": 465277077,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724709245
    },
    {
        "content": "<p>(porffor is a really admirable project; they're at just under 40% language compat; JS-AOT / weval on SpiderMonkey passes the whole language test suite, with the tradeoff that its results are a bit slower than a from-scratch AOT compiler could achieve)</p>",
        "id": 465277155,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724709299
    },
    {
        "content": "<p>I am using wasmtime on android and wasmi on ios as a script engine in Unity game development. I am trying to find some way to execute JavaScript as webassembly. Then I found Javy, but if Javy is simulated using quickjs,  I don't think it can be used in production. Porffor is interesting, I will keep an eye on it now. Thanks for all the replys</p>",
        "id": 465282662,
        "sender_full_name": "Hoping White",
        "timestamp": 1724712307
    },
    {
        "content": "<p>StarlingMonkey is definitely going to be used in production.</p>",
        "id": 465933848,
        "sender_full_name": "Ralph",
        "timestamp": 1724917617
    },
    {
        "content": "<p>The performance difference for Javy vs Rust vs alternative approaches for running JavaScript on Wasm are going to depend on your workload and I would encourage you to take benchmarks with your workloads. FWIW, we use Javy in production.</p>",
        "id": 466040043,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1724943452
    },
    {
        "content": "<blockquote>\n<p>StarlingMonkey is definitely going to be used in production.</p>\n</blockquote>\n<p>Is already, in fact!</p>",
        "id": 466052591,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724946698
    },
    {
        "content": "<p>in more than one professional corporation servicing many customers and users</p>",
        "id": 466057809,
        "sender_full_name": "Ralph",
        "timestamp": 1724948052
    },
    {
        "content": "<p>:-P</p>",
        "id": 466057818,
        "sender_full_name": "Ralph",
        "timestamp": 1724948055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477345\">Jeff Charles</span> <a href=\"#narrow/stream/206238-general/topic/Is.20Javy.20running.20a.20quickjs.20in.20wasm.3F/near/466040043\">said</a>:</p>\n<blockquote>\n<p>The performance difference for Javy vs Rust vs alternative approaches for running JavaScript on Wasm are going to depend on your workload and I would encourage you to take benchmarks with your workloads. FWIW, we use Javy in production.</p>\n</blockquote>\n<p>THIS MANY TIMES THIS. These are both great tools and you should choose the one you want. My comment is meant only as a way of answering the \"I don't think it can be used in production\" question. Jeff is also correct: Javy is used in production now in several places as well. StarlingMonkey also is and will be.</p>",
        "id": 466059207,
        "sender_full_name": "Ralph",
        "timestamp": 1724948502
    },
    {
        "content": "<p>We've been using both Javy and StarlingMonkey with great success.  Performance has not been an issue in practice except in very specific cases.</p>",
        "id": 466059416,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724948536
    },
    {
        "content": "<p>And thanks to component composition, you can always use both JS and Rust if desired, potentially favoring the latter for number crunching.</p>",
        "id": 466059973,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724948618
    },
    {
        "content": "<p>nice touch, that, Joel</p>",
        "id": 466060303,
        "sender_full_name": "Ralph",
        "timestamp": 1724948663
    }
]