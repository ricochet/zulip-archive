[
    {
        "content": "<p>Anyone here using wasmtime-go?</p>",
        "id": 196809411,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588874986
    },
    {
        "content": "<p>Getting an interesting issue where, having done nothing but create a store, module, and wasi instance and then starting an http server, I reliably get a segfault in 2 minutes. I'm guessing the 2 minutes is a GC pause. If I actually use an instance of the module every so often I don't get the segfault.</p>",
        "id": 196971264,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588995252
    },
    {
        "content": "<p>Ok yeah, so the runtime forces a GC cycle every 2 minutes.</p>",
        "id": 196971417,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588995576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> oh dear, do you have code I could peek at? I see CI for the repo still segfaults on macOS, but I unfortunately haven't been able to track down as to why</p>",
        "id": 196971878,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588996340
    },
    {
        "content": "<p>Also, have you tried the master branch of the git repo?</p>",
        "id": 196971884,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588996352
    },
    {
        "content": "<p>I haven't. I'm running 0.16.0 atm. I'll see if I can get a minimal reproduction.</p>",
        "id": 196971895,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588996398
    },
    {
        "content": "<p>Interesting...v0.16.0 isn't on the master timeline at all?</p>",
        "id": 196971948,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588996499
    },
    {
        "content": "<p>Oh, but it's ahead of master anyway</p>",
        "id": 196971978,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588996536
    },
    {
        "content": "<p>ah yeah it's a separate commit b/c it has binaries</p>",
        "id": 196972043,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588996653
    },
    {
        "content": "<p>roger. let me see if i can reproduce without all my bullshit</p>",
        "id": 196972087,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588996707
    },
    {
        "content": "<p>really annoying to iterate on this when it takes 2 minutes each time you want to reduce your test case</p>",
        "id": 196972284,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997091
    },
    {
        "content": "<p>ah yeah there it goes</p>",
        "id": 196972362,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997190
    },
    {
        "content": "<p>about to upload a gist, going to see if i can repro with an inline wat</p>",
        "id": 196972417,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <a href=\"https://gist.github.com/avidal/4710a963fbc8a80feae84663473ea971\" title=\"https://gist.github.com/avidal/4710a963fbc8a80feae84663473ea971\">https://gist.github.com/avidal/4710a963fbc8a80feae84663473ea971</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/avidal/4710a963fbc8a80feae84663473ea971\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/avidal/4710a963fbc8a80feae84663473ea971\" title=\"wasi_gc_crash.go\">wasi_gc_crash.go</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 196972604,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997739
    },
    {
        "content": "<p>Running another test without the wasi instance to see if it makes a difference. Wondering if a runtime.KeepAlive is missing in one of the wasi funcs?</p>",
        "id": 196972668,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997805
    },
    {
        "content": "<p>Remove the wasi bits and it doesn't crash</p>",
        "id": 196972718,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997931
    },
    {
        "content": "<p>oh I think I see what's wrong</p>",
        "id": 196972722,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588997944
    },
    {
        "content": "<p>ok, i can upload a segfault if you want it</p>",
        "id": 196972749,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588997976
    },
    {
        "content": "<p>nah that's ok</p>",
        "id": 196972753,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588997998
    },
    {
        "content": "<p>this is an ownership issue I forgot about</p>",
        "id": 196972791,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588998004
    },
    {
        "content": "<p>and didn't see it b/c I didn't write wasi tests :(</p>",
        "id": 196972793,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588998009
    },
    {
        "content": "<p>I noticed :)</p>",
        "id": 196972794,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588998016
    },
    {
        "content": "<p>But it follows the rust api very well so it wasn't difficult to figure out</p>",
        "id": 196972800,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588998033
    },
    {
        "content": "<p>Is it the wasi instance that needs a keep alive? I see that if you link the wasi instance in a linker, the linker calls keepalive on the wasi instance, but constructing the instance via <code>NewWasiInstance</code> doesn't</p>",
        "id": 196972868,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588998196
    },
    {
        "content": "<p>(I know very little about cgo or generally about ffi stuff so this part is a bit over my head)</p>",
        "id": 196972890,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588998242
    },
    {
        "content": "<p>ok should be fixed in <a href=\"https://github.com/bytecodealliance/wasmtime-go/commit/e23af2e4825f3d9c67bddc329e16c954f75620e9\" title=\"https://github.com/bytecodealliance/wasmtime-go/commit/e23af2e4825f3d9c67bddc329e16c954f75620e9\">https://github.com/bytecodealliance/wasmtime-go/commit/e23af2e4825f3d9c67bddc329e16c954f75620e9</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-go/commit/e23af2e4825f3d9c67bddc329e16c954f75620e9\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-go/commit/e23af2e4825f3d9c67bddc329e16c954f75620e9\" title=\"Clear finalizer for config when creating wasi instances · bytecodealliance/wasmtime-go@e23af2e\">Clear finalizer for config when creating wasi instances · bytecodealliance/wasmtime-go@e23af2e</a></div><div class=\"message_embed_description\">The `wasi_instance_new` API takes ownership of the config passed into\nit, so no need to manually free it later!</div></div></div>",
        "id": 196972928,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588998252
    },
    {
        "content": "<p>Very nice, will test it out right now</p>",
        "id": 196972939,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588998298
    },
    {
        "content": "<p>Oh, I'll wait for the tag and then get it instead of futzing with the compile step</p>",
        "id": 196973002,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1588998369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> when you get a chance could you push a v0.17.0 tag?</p>",
        "id": 197026354,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589075643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> I've published 0.16.1 now!</p>",
        "id": 197151514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589206659
    },
    {
        "content": "<p>sweet, thanks!</p>",
        "id": 197156689,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589208829
    },
    {
        "content": "<p>Left my program running for 5ish hours and no segfaults :) Thanks again Alex</p>",
        "id": 197232009,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589256138
    },
    {
        "content": "<p>Nice, thanks again for the report!</p>",
        "id": 197233253,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589257924
    },
    {
        "content": "<p>Submitted a PR to fix a segfault in wasi...but I also realized I need to figure out how to make this work reliably on macOS since I'll be using it at work. I personally don't have a macbook, but my coworkers do..</p>",
        "id": 197430932,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589384352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> yeah I've been trying to investigate it on and off as to what's going wrong, but I can't figure anything out yet :(</p>",
        "id": 197440275,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589388002
    },
    {
        "content": "<p>I can reliably reproduce the issue on macos and can't reproduce at all on linux</p>",
        "id": 197440346,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589388014
    },
    {
        "content": "<p>just have no idea where to start with debugging</p>",
        "id": 197440353,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589388019
    },
    {
        "content": "<p>does it reproduce in a docker container with a macos host?</p>",
        "id": 197440443,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589388075
    },
    {
        "content": "<p>otherwise yeah i guess you have a non-zero chance of hitting it on every gc cycle which is a minimum of 2 minutes</p>",
        "id": 197440610,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589388154
    },
    {
        "content": "<p>you can probably reproduce faster with <code>-tags debug</code> which forces a gc trigger way more often</p>",
        "id": 197440766,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589388237
    },
    {
        "content": "<p>(that's how I'm reproducing in tests)</p>",
        "id": 197440777,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589388241
    },
    {
        "content": "<p>and I'm not sure if docker would work b/c I don't think you virtualize macos, right?</p>",
        "id": 197440832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589388254
    },
    {
        "content": "<p>yep, i ended up changing the actions file on my fork to run three passes with debug enabled to get it to repro more often</p>",
        "id": 197442780,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589389027
    },
    {
        "content": "<p>also, i'm not positive how docker for mac works. i know docker runs in a lightweight vm but past that...<span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 197442909,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589389074
    },
    {
        "content": "<p>considering renting a mac from <a href=\"http://macincloud.com\">macincloud.com</a> to try this out</p>",
        "id": 197454112,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589393638
    },
    {
        "content": "<p>I adjusted the workflow to only run mac, skip the download steps (inlined the dependencies), and run the debug test build a bunch of times to see if i can find a pattern in the failures...but nothing so far. <a href=\"https://github.com/avidal/wasmtime-go/pull/1\">https://github.com/avidal/wasmtime-go/pull/1</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avidal/wasmtime-go/pull/1\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/191975?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avidal/wasmtime-go/pull/1\" title=\"testing workflow by avidal · Pull Request #1 · avidal/wasmtime-go\">testing workflow by avidal · Pull Request #1 · avidal/wasmtime-go</a></div><div class=\"message_embed_description\">GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.</div></div></div>",
        "id": 197456507,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589394807
    },
    {
        "content": "<p>Can you run it in lldb? <code>lldb -o run -o bt --batch -- executable arg1 arg2</code> should run it and show a backtrace when it crashes.</p>",
        "id": 197457445,
        "sender_full_name": "bjorn3",
        "timestamp": 1589395153
    },
    {
        "content": "<p>I would but no mac on my end. Not sure what Alex has tried</p>",
        "id": 197457494,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589395179
    },
    {
        "content": "<p>oh maybe i can do that in the action though</p>",
        "id": 197457530,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589395193
    },
    {
        "content": "<p>yes, that was what I meant.</p>",
        "id": 197457676,
        "sender_full_name": "bjorn3",
        "timestamp": 1589395245
    },
    {
        "content": "<p>FWIW I'm working to minimize this, so far I've got this program which will segfault:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">package</span> <span class=\"nx\">main</span>\n\n<span class=\"c1\">// #cgo CFLAGS:-I${SRCDIR}/build/include</span>\n<span class=\"c1\">// #cgo LDFLAGS:-lwasmtime -lm -ldl -L${SRCDIR}/build/macos-x86_64</span>\n<span class=\"c1\">// #include &lt;shims.h&gt;</span>\n<span class=\"kn\">import</span> <span class=\"s\">&quot;C&quot;</span>\n<span class=\"kn\">import</span> <span class=\"s\">&quot;runtime&quot;</span>\n\n<span class=\"kd\">func</span> <span class=\"nx\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">engine</span> <span class=\"o\">:=</span> <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">wasm_engine_new</span><span class=\"p\">()</span>\n        <span class=\"nx\">store</span> <span class=\"o\">:=</span> <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">wasm_store_new</span><span class=\"p\">(</span><span class=\"nx\">engine</span><span class=\"p\">)</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">tys</span> <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">wasm_valtype_vec_t</span>\n        <span class=\"nx\">ty</span> <span class=\"o\">:=</span> <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">wasm_functype_new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nx\">tys</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"nx\">tys</span><span class=\"p\">)</span>\n        <span class=\"nx\">f</span> <span class=\"o\">:=</span> <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">c_func_new_with_env</span><span class=\"p\">(</span><span class=\"nx\">store</span><span class=\"p\">,</span> <span class=\"nx\">ty</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"nx\">C</span><span class=\"p\">.</span><span class=\"nx\">wasmtime_func_call</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n        <span class=\"nx\">runtime</span><span class=\"p\">.</span><span class=\"nx\">GC</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 197458552,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589395662
    },
    {
        "content": "<p>oh very nice</p>",
        "id": 197458688,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589395706
    },
    {
        "content": "<p>fwiw, that minimal example segfaults for me on <code>C.wasmtime_func_call</code></p>",
        "id": 197464289,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589398206
    },
    {
        "content": "<p>(on linux though)</p>",
        "id": 197464293,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589398211
    },
    {
        "content": "<p>well kind of, i didn't make it exactly the same so i should just shut up</p>",
        "id": 197464313,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589398227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> I opened up <a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/10\">https://github.com/bytecodealliance/wasmtime-go/issues/10</a> as a dedicated issue for this</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-go/issues/10\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-go/issues/10\" title=\"Segfault on macOS · Issue #10 · bytecodealliance/wasmtime-go\">Segfault on macOS · Issue #10 · bytecodealliance/wasmtime-go</a></div><div class=\"message_embed_description\">CI has been segfaulting for some time on macOS and I&#39;ve recently tried to reduce this. I can pretty reliably reproduce this locally as well. So far I&#39;ve managed to shrink this to: package m...</div></div></div>",
        "id": 197464951,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589398532
    },
    {
        "content": "<p>very nice, thanks. hopefully we can get some help!</p>",
        "id": 197465837,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589398925
    },
    {
        "content": "<p>I'm going to try to run the minimal example in your ticket on MacOS but building and executing it in a docker container. I'm going to be shipping a wasmtime-go based local development proxy to my team in the next couple of weeks and it'd be nice to know I have a MacOS workaround..</p>",
        "id": 197577367,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589472181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> looks like it was a regression in Go 1.14. I can't reproduce in 1.13.10. I setup a matrix of Go versions in my fork of wasmtime-go to confirm: <a href=\"https://github.com/avidal/wasmtime-go/pull/2\">https://github.com/avidal/wasmtime-go/pull/2</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avidal/wasmtime-go/pull/2\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/191975?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avidal/wasmtime-go/pull/2\" title=\"test against go 1.13.10 by avidal · Pull Request #2 · avidal/wasmtime-go\">test against go 1.13.10 by avidal · Pull Request #2 · avidal/wasmtime-go</a></div><div class=\"message_embed_description\">GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.</div></div></div>",
        "id": 197589973,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589477398
    },
    {
        "content": "<p>nice find!</p>",
        "id": 197590203,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589477486
    },
    {
        "content": "<p>I had a coworker run the test suite on MacOS Catalina (with the debug tag to trigger the GC often) using Go 1.13.10 about a hundred times and he never saw a segfault.</p>",
        "id": 197590209,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589477488
    },
    {
        "content": "<p>Perhaps we could update wasmtime-go CI and also add a note to the README?</p>",
        "id": 197590225,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589477499
    },
    {
        "content": "<p>I can open a PR for that. Add go 1.13.10 to CI yeah?</p>",
        "id": 197590335,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589477536
    },
    {
        "content": "<p>sounds good to me yeah</p>",
        "id": 197590365,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589477552
    },
    {
        "content": "<p>opened. not sure how much detail you want in the README</p>",
        "id": 197591566,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589478172
    },
    {
        "content": "<p>your comment in the README is a lot better :)</p>",
        "id": 197597576,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589480767
    },
    {
        "content": "<p>oh no worries just tweaking things :)</p>",
        "id": 197598771,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589481262
    },
    {
        "content": "<p>This is (probably) unrelated, but if you run the test suite using go 1.14 with <code>-race</code>, it'll enable the <code>checkptr</code> feature which says that func.go#319 has unsafe pointer arithmetic (reproducible on linux)</p>",
        "id": 197604295,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589483625
    },
    {
        "content": "<p>just wanted to say thanks to you <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and the rest of the wasmtime team. My local proxy can trivially handle over 100 rps sustained. It takes the incoming http request, executes a wasm program which modifies the request and calls back to Go, which sends the request to another service and returns the response back into wasm which then sends it back into Go and back to the user.</p>",
        "id": 197721551,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589562058
    },
    {
        "content": "<p>Effectively the Go proxy is a runtime for middleware implemented (currently) in Rust, compiled to wasm.</p>",
        "id": 197721596,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589562075
    },
    {
        "content": "<p>100 rps with a 90th percentile latency of 11ms</p>",
        "id": 197721654,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589562107
    },
    {
        "content": "<p>(once I put a mutex around instantiating the module that is)</p>",
        "id": 197721725,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589562124
    },
    {
        "content": "<p>oh and that's with creating a new instance of the module for every single request which is how the middleware api is designed</p>",
        "id": 197721790,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589562150
    },
    {
        "content": "<p>If I have Rust code that imports a function whose \"extern C\" decl has an arg for a <code>u32</code>, and I link that function via <code>wasmtime-go</code>, I have to provide a function that accepts an <code>int32</code>. What if, on the Rust side, I call that function with the max u32? That won't fit into the int32 on the Go side.</p>",
        "id": 197828299,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589686693
    },
    {
        "content": "<p>Ok. I messed with this a bit more. Looks like I can just cast the param to uint32 in Go, which makes sense.</p>",
        "id": 197828891,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1589687847
    },
    {
        "content": "<p>Can you summarize the impact of the 0.17.0 change <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>? The wasmtime change indicates module can be sent across threads. Do you still need to lock the store to a single thread at a time?</p>",
        "id": 199813812,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591307928
    },
    {
        "content": "<p>It <em>looks</em> like it's a change that could <em>eventually</em> unlock multiple instances on multiple threads, but we're not there yet, correct?</p>",
        "id": 199813888,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591307987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> that's been fixed now! The API hasn't been updated yet but a <code>Module</code> is tied to an <code>Engine</code> now, not a <code>Store</code></p>",
        "id": 199813897,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591307996
    },
    {
        "content": "<p>and <code>Engine</code> is thread-safe (as before)</p>",
        "id": 199813954,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308005
    },
    {
        "content": "<p><code>Module</code> is now thread safe as well</p>",
        "id": 199813962,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308009
    },
    {
        "content": "<p>(I probably need to update the free code too...)</p>",
        "id": 199813969,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308014
    },
    {
        "content": "<p>modules can be shared across threads, but instances cannot</p>",
        "id": 199813990,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308030
    },
    {
        "content": "<p>instances will likely always be locked to one thread</p>",
        "id": 199814003,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308040
    },
    {
        "content": "<p>Ok, so given a triple (module, store, engine) I can create (and use) N instances on N threads?</p>",
        "id": 199814105,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308110
    },
    {
        "content": "<p>(and yeah, i don't mean to move an instance across threads)</p>",
        "id": 199814154,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308122
    },
    {
        "content": "<p>I ended up rearchitecting to having a pool of instances that each have their own context (module, store, linker) and go back into the pool once they're done. But it sounds like I could instead go back to my original design where I have a <em>single</em> (module, store, linker) and create as many new instances as I want that are used on different threads?</p>",
        "id": 199814279,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308208
    },
    {
        "content": "<p>you can have a single engine/module, but you still need a store-per-thread</p>",
        "id": 199814307,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308230
    },
    {
        "content": "<p>and store represents the lifetime of an instance as well (in terms of memory allocations), so you likely want a store to be relatively short-lived</p>",
        "id": 199814368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308249
    },
    {
        "content": "<p>Ah, I didn't know that. I wasn't disposing the store.</p>",
        "id": 199814392,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308267
    },
    {
        "content": "<p>note that this could all use better documentation as well</p>",
        "id": 199814458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308329
    },
    {
        "content": "<p>which is something I would like to get to!</p>",
        "id": 199814464,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591308335
    },
    {
        "content": "<p>Ok so. I can construct a module given an engine. And hold onto that module (I don't need to keep the engine around). And then I can construct a store, wasi instance, linker, and then an actual wasm instance on each request, using the same module</p>",
        "id": 199814522,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308365
    },
    {
        "content": "<p>(didn't realize that about the store, probably because the module depended on it when i started, so i thought it was more of a general wasmtime context)</p>",
        "id": 199814583,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308418
    },
    {
        "content": "<p>Just looked a bit more. I didn't realize your \"That's been fixed!\" comment referred to something <em>past</em> 0.17.0.</p>",
        "id": 199814779,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591308537
    },
    {
        "content": "<p>You may need to keep engine around to create stores though</p>",
        "id": 199815119,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1591308777
    },
    {
        "content": "<p>it is uncharted territory when two modules from different engines with different settings are used (might work though <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> )</p>",
        "id": 199815317,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1591308887
    },
    {
        "content": "<p>Yeah. It's just a bit confusing because the c-api change from your PR didn't change the signature for <code>wasm_module_new</code>, it still takes a store, it just grabs the engine from the store and uses that instead. So I suppose that PR was internal (from the module c-api perspective).</p>",
        "id": 199815770,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591309162
    },
    {
        "content": "<p>But I suppose, for my purposes, the store that I supply isn't actually important? I can just create one to use to compile the module and then throw it away after?</p>",
        "id": 199815882,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591309228
    },
    {
        "content": "<p><code>wasm_module_new</code> will not change we are just API implementors, we can change <code>wasmtime_module_new</code> and I did, but last minute HostRef refactoring changed it back</p>",
        "id": 199815905,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1591309248
    },
    {
        "content": "<p>wasm-c-api requires usage of wasm_module_share wasm_module_obtain when transferred between stores (hence threads)</p>",
        "id": 199816034,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1591309338
    },
    {
        "content": "<p>see e.g. <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/threads.c#L32\">https://github.com/WebAssembly/wasm-c-api/blob/master/example/threads.c#L32</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/threads.c#L32\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/threads.c#L32\" title=\"WebAssembly/wasm-c-api\">WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Wasm C API prototype. Contribute to WebAssembly/wasm-c-api development by creating an account on GitHub.</div></div></div>",
        "id": 199816121,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1591309408
    },
    {
        "content": "<p>but we can do whatever we want with rust api :)</p>",
        "id": 199816211,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1591309444
    },
    {
        "content": "<p>Roger. Getting pretty far out of my domain but let me know if there's something I can help with in the Go library <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 199816216,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591309446
    },
    {
        "content": "<p>Thanks for the example, that makes it a bit more clear!</p>",
        "id": 199816299,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1591309522
    },
    {
        "content": "<p>nice work on reducing the macos bug report <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> !</p>",
        "id": 200746621,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1592018606
    }
]