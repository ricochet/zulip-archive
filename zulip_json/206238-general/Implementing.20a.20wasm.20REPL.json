[
    {
        "content": "<p>So I understand how to instantiate a wasm module in JS. But let's say I wanted to implement a WAT REPL, what would my options be to interactively execute the user provided wat code? And output the result of that execution.</p>",
        "id": 410654475,
        "sender_full_name": "Philippe Vaillancourt",
        "timestamp": 1704050418
    },
    {
        "content": "<p>I've been doing a bit of research into how other \"compiled to IL\" languages do it and this led me to the .NET Roslyn Scripting API. <a href=\"https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#roslyn-scripting-apis\">https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#roslyn-scripting-apis</a></p>\n<p>It looks more complicated than I had hoped, compared with doing it with a simple interpreter. From what I understand, every snippet of code is basically wrapped in an assembly and that assembly is dynamically linked into the \"main\" REPL assembly. I haven't gone as far as trying to tease out how it's implemented in code but that seems like the gist of it.</p>\n<p>How would this mechanism translate to WebAssembly? I guess you would somehow need to create a new module instance for each new snippet of code that is typed in the repl. But the mechanism for making all these modules behave like they are all one big happy family eludes me. I know you can import and export functions from modules, which would allow the host to pipe one function from one module into another module. But that is done at compile time, isn't it? You need to know the function names.</p>\n<p>How would one achieve this at runtime, dynamically. Sharing Memory?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#roslyn-scripting-apis\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e534538272af1224dc17916e93f708138799c451\\/68747470733a2f2f7765626c6f672e776573742d77696e642e636f6d2f696d616765732f323032322f4d6f76696e672d6f6c642d44796e616d69632d436f6d70696c6174696f6e2d436f64652d746f2d7573652d526f736c796e2f4c69627261727942616e6e65722e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://weblog.west-wind.com/posts/2022/Jun/07/Runtime-CSharp-Code-Compilation-Revisited-for-Roslyn#roslyn-scripting-apis\" title=\"Runtime C# Code Compilation Revisited for Roslyn\">Runtime C# Code Compilation Revisited for Roslyn</a></div><div class=\"message_embed_description\">Recently I needed to update my scripting tools that are integrated into Markdown Monster, in order to support .NET Core. The old CodeDom compiler APIs I'd been using as part of my `Westwind.Scripting` library aren't supported in Core and so I ended up updating to the newer Roslyn CodeAnalysis APIs. In this post I discuss how the Roslyn compilation APIs work, and how I built and updated the Westwind.Scripting library to provide an easy to use wrapper around these tools.</div></div></div>",
        "id": 410717041,
        "sender_full_name": "Philippe Vaillancourt",
        "timestamp": 1704109991
    },
    {
        "content": "<p>The <a href=\"https://docs.rs/wat/latest/wat/\">Rust wat crate</a> can translate WAT into a WebAssembly binary bytes. You can (relatively easily) expose this function to JS code with <a href=\"https://github.com/rustwasm/wasm-bindgen\">wasm-bindgen</a> and then you can give the bytes to the browser as usual.</p>\n<p>This could work well if you \"just\" wanted to call an exported method where the user implements the method, provides the arguments for it and gets the result. If you have more complicated code (for example an entire game where the user-provided functionality is called like a plugin), then you would probably need to add a WASM runtime to your code that would load and run the user-provided code. I can elaborate if that's what you want.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/wasm-bindgen\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/55e07ba6ee1c3063c8765397e04970d692ff9919\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343230383364653865353037623439633433353136313266346634613864333464653132616162636263613937363937613838633564623335613535383234652f727573747761736d2f7761736d2d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/wasm-bindgen\" title=\"GitHub - rustwasm/wasm-bindgen: Facilitating high-level interactions between Wasm modules and JavaScript\">GitHub - rustwasm/wasm-bindgen: Facilitating high-level interactions between Wasm modules and JavaScript</a></div><div class=\"message_embed_description\">Facilitating high-level interactions between Wasm modules and JavaScript - GitHub - rustwasm/wasm-bindgen: Facilitating high-level interactions between Wasm modules and JavaScript</div></div></div>",
        "id": 410823555,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1704190416
    },
    {
        "content": "<p>There is also something called <a href=\"#narrow/stream/206238-general/topic/wepl.20.28The.20WebAssembly.20REPL.29\">wepl</a> (WebAssembly REPL), but that seems to be a command line application.</p>",
        "id": 410835354,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1704196723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> yeah, I would want more than that. For context, what I want to do is build a compiler/interpreter pipeline that takes Tiny-BASIC source code, compiles it to wasm and runs it using wasmtime. As part of that project, I wanted to provide a Tiny-BASIC REPL that plugs-in to this pipeline. </p>\n<p>Having done a bit more research into it, I think that what languages like C# and Java, which have an AOT compilation step to IL before handing the IL over to their VM, do in order to provide a REPL is basically create a new assembly that wraps every input from the REPL. They use some sort of context to keep track of the state of the REPL session (mainly, the global and local variables declared and assigned to) and inject that into each new assembly.</p>\n<p>So, if I'm thinking about emulating such a mechanism for my Tiny-BASIC compiler REPL, I would basically have the REPL host compile and instantiate a new wasm module for each input coming in from the terminal, somehow injecting the global and local variables held in the REPL context, along with the public API (exported function, shared memory etc.) of the already loaded wasm modules, and then executing that module.</p>\n<p>At least, that's kind of how I'm conceptualizing this in my head at the moment.</p>",
        "id": 410844473,
        "sender_full_name": "Philippe Vaillancourt",
        "timestamp": 1704201451
    },
    {
        "content": "<p>You may be interested in my Project WEPL which is intended as a Wasm Component repl: <a href=\"https://github.com/rylev/wepl\">https://github.com/rylev/wepl</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/wepl\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/24303363513ef8fc8109bdf943b5e67f6588e5cc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643165343835643039326534613262646665376632613065393631356164306163356238653735313133353030653239623736646431653862636164613063612f72796c65762f7765706c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/wepl\" title=\"GitHub - rylev/wepl: A repl for WebAssembly Components\">GitHub - rylev/wepl: A repl for WebAssembly Components</a></div><div class=\"message_embed_description\">A repl for WebAssembly Components. Contribute to rylev/wepl development by creating an account on GitHub.</div></div></div>",
        "id": 410845150,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1704201789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590805\">Ryan Levick (rylev)</span> <a href=\"#narrow/stream/206238-general/topic/Implementing.20a.20wasm.20REPL/near/410845150\">said</a>:</p>\n<blockquote>\n<p>You may be interested in my Project WEPL which is intended as a Wasm Component repl: <a href=\"https://github.com/rylev/wepl\">https://github.com/rylev/wepl</a></p>\n</blockquote>\n<p>Looks interesting. I'll take it for a spin. Is it a JS REPL?</p>",
        "id": 410847484,
        "sender_full_name": "Philippe Vaillancourt",
        "timestamp": 1704202959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"677356\">@Philippe Vaillancourt</span> Ok, can you explain what would I, an user of the finished project that you are thinking of, actually do? Would I open a website with text area where I would write my in Tiny-BASIC, then hit \"Run\" and it would run the code? Would it be entirely on client-side, or is compilation on a server an option? Or would it be a console application?</p>\n<p>I am not sure how you would want it to work, so I cannot help you make it unless I understand what you want to make. Explain it to me like you would explain it to someone who has never seen it before and wants to use it.</p>",
        "id": 410849136,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1704203838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> I was planning to make it a console application.</p>\n<p>The same way you can just type <code>node</code> from the command line and it starts a REPL. That's the kind of experience I want for the user.<br>\n<a href=\"/user_uploads/15107/NL3JS1Y45m4dvFUtTz2xBhgZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/NL3JS1Y45m4dvFUtTz2xBhgZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/NL3JS1Y45m4dvFUtTz2xBhgZ/image.png\"></a></div>",
        "id": 412992005,
        "sender_full_name": "Philippe Vaillancourt",
        "timestamp": 1705335788
    },
    {
        "content": "<p>In that case, you probably want to read from and write to the terminal with WASI. I would recommend to write some minimal example in rust and see what it compiles to and then go from there. There is a lot of \"background\" knowledge to get first - how to crate a wasi component, how to convert the wasm binary format to the wat text format, how the wasm instructions work, how to convert the wat text format back to binary and then how to actually run that wasi component, and I don't have all the links to tutorials on how to do these things on hand unfortunately.</p>",
        "id": 418425637,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1706369239
    }
]