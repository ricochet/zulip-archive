[
    {
        "content": "<p>Hi,</p>\n<p>I am attempting to run the Wizer benchmarks, specifically the <a href=\"https://github.com/bytecodealliance/wizer/tree/main/benches/uap-bench\">UAP</a> one. But I am seeing an increase in execution time instead of a decrease.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>% <span class=\"nb\">time</span> wasmtime uap_bench.control.wasm\nwasmtime uap_bench.control.wasm  <span class=\"m\">0</span>.03s user <span class=\"m\">0</span>.01s system <span class=\"m\">90</span>% cpu <span class=\"m\">0</span>.038 total\n% <span class=\"nb\">time</span> wasmtime uap_bench.wizer.wasm\nwasmtime uap_bench.wizer.wasm  <span class=\"m\">0</span>.15s user <span class=\"m\">0</span>.03s system <span class=\"m\">98</span>% cpu <span class=\"m\">0</span>.182 total\n</code></pre></div>\n<p>It seems like the optimized module is 5 times slower than the unoptimized one. I am benchmarking the modules that are checked in to the repository without rebuilding them, but I have also tried to rebuild the modules using <code>build.sh</code>without any noticible effect on the execution time. (Except for some reason the first time I run the modules they are slower) Another thing that confuses me is that I was able to run both modules without initializing the <code>uap-core</code> submodule, I thought the unoptimized module, at leaast, would need access to the <code>regexes.yaml</code>file inside it. (I am new to Rust, so I might just be misunderstanding something) Initializing the submodule had no visible effect on the execution time.</p>\n<p><code>wasmtime -V</code> shows <code>wasmtime-cli 4.0.0</code>, <code>cargo -V</code> shows <code>cargo 1.66.1 (ad779e08b 2023-01-10)</code>, and I am using MacOS Ventura 13.1 arm64. Is there something I am missing?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wizer/tree/main/benches/uap-bench\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e718a3834579c2309535c7fa61558bb381930dd8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613831643962386562343261363564646562333765383166393366663032616534316336633365626463616438613932373338663734343963613536333735302f62797465636f6465616c6c69616e63652f77697a6572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wizer/tree/main/benches/uap-bench\" title=\"wizer/benches/uap-bench at main 路 bytecodealliance/wizer\">wizer/benches/uap-bench at main 路 bytecodealliance/wizer</a></div><div class=\"message_embed_description\">The WebAssembly Pre-Initializer. Contribute to bytecodealliance/wizer development by creating an account on GitHub.</div></div></div>",
        "id": 322545268,
        "sender_full_name": "wsta",
        "timestamp": 1674229583
    },
    {
        "content": "<p>Note that by timing the wasmtime cli you're also including the time it takes to compile the module or load a cached compilation from disk which means it may not be reflective of the runtime execution speed</p>",
        "id": 322565146,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674234787
    },
    {
        "content": "<p>Alex is correct. That is why the benchmarks measure instantiation and execution time separately from compilation time and process init time and all of that: <a href=\"https://github.com/bytecodealliance/wizer/blob/main/benches/uap.rs\">https://github.com/bytecodealliance/wizer/blob/main/benches/uap.rs</a></p>\n<p>You should be able to repro via <code>cargo bench</code> in the Wizer repo.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wizer/blob/main/benches/uap.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e718a3834579c2309535c7fa61558bb381930dd8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613831643962386562343261363564646562333765383166393366663032616534316336633365626463616438613932373338663734343963613536333735302f62797465636f6465616c6c69616e63652f77697a6572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wizer/blob/main/benches/uap.rs\" title=\"wizer/uap.rs at main 路 bytecodealliance/wizer\">wizer/uap.rs at main 路 bytecodealliance/wizer</a></div><div class=\"message_embed_description\">The WebAssembly Pre-Initializer. Contribute to bytecodealliance/wizer development by creating an account on GitHub.</div></div></div>",
        "id": 322593187,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1674241146
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/Wizer.20benchmarks.20do.20not.20show.20execution.20time.20improvement/near/322565146\">said</a>:</p>\n<blockquote>\n<p>Note that by timing the wasmtime cli you're also including the time it takes to compile the module or load a cached compilation from disk which means it may not be reflective of the runtime execution speed</p>\n</blockquote>\n<p>Thank you for the clarification! I am new to WASM, so sorry if I ask any obvious questions. I thought that <code>.wasm</code> files were already precompiled, so why does <code>wasmtime</code>need to compile it again? Is there any way to run the WASM module without compiling it? Or rather, what would I need to do to reproduce the execution time results listed in the wizer README?</p>",
        "id": 322961689,
        "sender_full_name": "wsta",
        "timestamp": 1674462258
    },
    {
        "content": "<p>there is no CPU that understands wasm bytecode natively, so you always have to translate the wasm bytecode into your architecture machine code in some way, that step can't be left out entirely. These benchmarks assume that you load a wasm module once and then run it a lot of times with different data</p>",
        "id": 322973809,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1674466644
    },
    {
        "content": "<p>in that scenario it is realistic to ignore the initial startup</p>",
        "id": 322973888,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1674466676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"550770\">Ramon Klass</span> <a href=\"#narrow/stream/206238-general/topic/Wizer.20benchmarks.20do.20not.20show.20execution.20time.20improvement/near/322973888\">said</a>:</p>\n<blockquote>\n<p>in that scenario it is realistic to ignore the initial startup</p>\n</blockquote>\n<p>OK, but I thought the initial startup was exactly what Wizer was meant to optimize? Wouldn't I be able to, without Wizer, invoke my initialization code only once and then run the rest of the module lots of times? For example, say I have an export called \"init\" and an export called \"run\", wouldn't I be able to call only \"run\" lots of times after I have called \"init\"? In this case it seems to me like the initial setup, like downloading the module, compiling it, and running the initialization function, is an important part to take into consideration. Basically, if I should ignore the time spent compiling, why should I not also ignore the time that the initialization function takes?</p>",
        "id": 323238691,
        "sender_full_name": "wsta",
        "timestamp": 1674563468
    },
    {
        "content": "<p>to be honest I lack the insight to answer that question, and I'd also like to know the answer if anyone can chime in</p>",
        "id": 323239569,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1674563724
    },
    {
        "content": "<p>Wizer is meant to reduce the time it takes to recreate a wasm instance many times.</p>",
        "id": 323246132,
        "sender_full_name": "bjorn3",
        "timestamp": 1674565578
    },
    {
        "content": "<p>The reason not to reuse a wasm instance many times is isolation. Say you have a web server which handles requests through a wasm module. By recreating the instance on every request you can ensure that any corruption due to bugs (or maliciously) doesn't affect any other request.</p>",
        "id": 323246582,
        "sender_full_name": "bjorn3",
        "timestamp": 1674565700
    },
    {
        "content": "<p>You could also for example have the web server check that the wasm module only accesses things the logged in user is allowed to access. If you do this reusing wasm instances between requests may allow an attacker to leak information from prior requests of another user or to setup the instance such that it stores data of another user and on the next request by the attacker present it.</p>",
        "id": 323246979,
        "sender_full_name": "bjorn3",
        "timestamp": 1674565838
    },
    {
        "content": "<p>That makes sense, thank you for your answer. In the Wizer README it is stated that it could negitively impact network transfer times. But if I understand you correctly then this is not really related to the problem that Wizer intends to solve, since the use case that Wizer targets is when both network transfer and compiling are only done once, but initializing (and maybe instantiating) the module is done multiple times?</p>",
        "id": 323253314,
        "sender_full_name": "wsta",
        "timestamp": 1674567557
    },
    {
        "content": "<p>yes, you download the module once, you compile it once, you instantiate and run it often, and wizer speeds up the run it part, as far as I understand</p>",
        "id": 323254168,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1674567792
    }
]