[
    {
        "content": "<p>Hi!  I’m hoping to understand a little bit about the design choices around memory deallocation in the bindings that <em>wit-bindgen</em> creates.</p>\n<p>For background, I’m working on a WASM UDF implementation for a database.  To enable this, I’ve implemented host-side support for the Canonical ABI in C++.  The idea is that the user supplies the WIT and WASM files in their <code>CREATE</code> statement, and the database then knows how to communicate with the exports contained therein.</p>\n<p>In general, it all works as expected, except when passing lists through the ABI.  When the user wants to call a WASM UDF that accepts a list, I use the <code>canonical_abi_realloc</code> export to allocate some of the module’s linear memory to hold the list contents, and store the pointer in the appropriate location expected by the ABI.  The WASM code is able to receive the array correctly, but it looks like (sometimes) that the act of passing this memory through the ABI may cause it to be deallocated before it returns back.</p>\n<p>Looking at the wit-bindgen code <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/parser/src/abi.rs#L1981\">here</a>, I see that there are rules that govern whether or not incoming lists are deallocated.  It looks like the decision differs for each binding implementation.  In my case (<em>gen-rust-wasm</em>), the decision lies with <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/gen-rust-wasm/src/lib.rs#L937\"><code>is_list_canonical</code></a>, which uses <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/parser/src/lib.rs#L440\"><code>all_bits_valid</code></a> to make the determination.  Ultimately, it looks like it depends on the list’s element type.</p>\n<p>In my host code, I need to know whether I should free the memory after the call has been made.  I can certainly code to these specific rules, but it seems awkward – and I don’t know whether the WASM module’s ABI was generated for a language that never deallocates (C, for example).  Is there some way that I can guarantee that the memory I allocate prior to the function call remains allocated when the call exits (barring any uncontrollable action taken by the WASM code itself)?</p>\n<p>Thanks!<br>\nPete</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/parser/src/abi.rs#L1981\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75b6ea29fb35dcf6d93c75a80a1daff361f41346\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313839626365376564643134393530313164623064383434393137386333386638316539633838373965353430353133626464356634343134376134363133342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/parser/src/abi.rs#L1981\" title=\"wit-bindgen/abi.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen\">wit-bindgen/abi.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/abi.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/gen-rust-wasm/src/lib.rs#L937\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75b6ea29fb35dcf6d93c75a80a1daff361f41346\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313839626365376564643134393530313164623064383434393137386333386638316539633838373965353430353133626464356634343134376134363133342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/gen-rust-wasm/src/lib.rs#L937\" title=\"wit-bindgen/lib.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen\">wit-bindgen/lib.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/lib.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/parser/src/lib.rs#L440\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75b6ea29fb35dcf6d93c75a80a1daff361f41346\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313839626365376564643134393530313164623064383434393137386333386638316539633838373965353430353133626464356634343134376134363133342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/24c102fe374b4c5698cfd4b7980f70ac2cf228fe/crates/parser/src/lib.rs#L440\" title=\"wit-bindgen/lib.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen\">wit-bindgen/lib.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/lib.rs at 24c102fe374b4c5698cfd4b7980f70ac2cf228fe · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 265623566,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640039428
    },
    {
        "content": "<p>Hm <span class=\"user-mention\" data-user-id=\"465662\">@Peter Vetere</span> ownership shouldn't depend on the type of the list being sent, it should always be uniform. This may indicate a bug? Can you share the <code>*.wit</code> file that you're using?</p>",
        "id": 265624595,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640040218
    },
    {
        "content": "<p>Hi Alex.  I've attached two wit files, and the .rs bindings generated from them.  The command I used was like this:</p>\n<p><code>wit-bindgen rust-wasm --export ./dealloc-list.wit</code></p>\n<p>In particular, notice how, in <em>dealloc-list.rs</em>, a <code>dealloc</code> call is added to the <code>test</code> export that frees the memory pointed to by the first argument.  I believe this is because the list contains a record with a string type, which fails the <code>all_bits_valid</code> check.  Conversely, there is no <code>dealloc</code> generated in <em>no-dealloc-list.rs</em>, even though a list is also at play.  In this case, however, the list contains a record with only i32 fields.</p>\n<p><a href=\"/user_uploads/15107/2FFG2vyS0E7fhkeF8SDsK9KF/dealloc-list.rs\">dealloc-list.rs</a> <br>\n<a href=\"/user_uploads/15107/nvG_7zz5dJ1Fx_YCOBFu_1nH/dealloc-list.wit\">dealloc-list.wit</a><br>\n<a href=\"/user_uploads/15107/U2dk_Kzy8VDFJV6hAW4RuUyd/no-dealloc-list.rs\">no-dealloc-list.rs</a><br>\n<a href=\"/user_uploads/15107/BiUCyB3bZ3V4CppDAEjg-mZj/no-dealloc-list.wit\">no-dealloc-list.wit</a></p>",
        "id": 265629539,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640043843
    },
    {
        "content": "<p>What a good idea.  Which database is it?</p>",
        "id": 265629783,
        "sender_full_name": "Scott Waye",
        "timestamp": 1640044077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465662\">@Peter Vetere</span> cool thanks! sorry ran out of time today but I'll poke at this tomorrow</p>",
        "id": 265630547,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640044787
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> The company I work for is called SingleStore.  We’re adding WASM support to the database engine.  I agree — it’s a neat idea!</p>",
        "id": 265630909,
        "sender_full_name": "Pete Vetere",
        "timestamp": 1640045039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"440835\">@Pete Vetere</span> oh the behavior you're seeing here is the API in Rust itself, it's not actually affecting the canonical abi itself</p>",
        "id": 265697119,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640100254
    },
    {
        "content": "<p>the API in Rust is generated differently depending on the types, but the canonical abi has one notion of ownership</p>",
        "id": 265697148,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640100269
    },
    {
        "content": "<p>Thanks for taking a look.  It sounds I was conflating the ABI with the API a bit -- sorry about that.  However, the rules for generating the API code this way are still a bit confusing to me.  I'd ideally like to tell the user \"build your WASM module using the bindings that wit-bindgen creates and we'll be able to consume it as a UDF.\"  </p>\n<p>With the current approach, I'm not sure how to tell whether lists that I pass into a WASM function will be deallocated by the generated binding code.  For example, the \"rust-wasm\" generator seems like it will deallocate incoming lists automatically if the elements are of certain types, whereas the generated C bindings look like they will never attempt to dealloc the incoming memory.  Am I misunderstanding, or approaching this from the wrong angle?</p>",
        "id": 265700629,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640102016
    },
    {
        "content": "<p>From a wasm-boundary perspective the asnwer is always fixed</p>",
        "id": 265701260,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640102285
    },
    {
        "content": "<p>from an API-of-the-language-bindings it's variable based on the type, due to how the natural representation of the type in the language differs from the canonical ABI</p>",
        "id": 265701302,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640102304
    },
    {
        "content": "<p>but as an interface between the db and the wasm module there is a fixed answer of \"lists always allocated\"  or not, depending on whether the wasm is exporting a function or importing a function</p>",
        "id": 265701344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640102330
    },
    {
        "content": "<p>allocation is irrespective of the type of the list</p>",
        "id": 265701355,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640102335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> <a href=\"#narrow/stream/206238-general/topic/wit-bindgen.20-.20rules.20for.20deallocating.20lists.3F/near/265629783\">said</a>:</p>\n<blockquote>\n<p>What a good idea.  Which database is it?</p>\n</blockquote>\n<p>(shameless plug <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ) Checkout our Wasm day talk: <a href=\"https://www.youtube.com/watch?v=TqZsbrvhD54&amp;t=1294s\">YouTube - Distributed Computation with WASM and WASI - Bailey Hayes &amp; Carl Sverre, SingleStore</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"TqZsbrvhD54\" href=\"https://www.youtube.com/watch?v=TqZsbrvhD54&amp;t=1294s\"><img src=\"https://uploads.zulipusercontent.net/040e5645e2e228fb3ba8624c8736c8a5984ce0ca/68747470733a2f2f692e7974696d672e636f6d2f76692f54715a73627276684435342f64656661756c742e6a7067\"></a></div>",
        "id": 265721614,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1640112858
    },
    {
        "content": "<p>This seems like a bug in the bindings generated for c vs rust. From what <span class=\"user-mention\" data-user-id=\"465662\">@Peter Vetere</span> is seeing, wasm modules created with the canonical ABI behave differently across the wasm module boundary depending on if it was generated with rust or c.</p>\n<p>Wasm modules created from rust (with wit-bindgen) deallocs a string list. If the host attempts to free the list, it will receive an exception.<br>\nc wasm modules do not dealloc a string list. The host must free this list or there is a leak. The host shouldn't need to know how a wasm module was created only match the canonical ABI.</p>",
        "id": 265723697,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1640114066
    },
    {
        "content": "<p>The Rust/C APIs generated are indeed different, but that's because the native type representations are different (in C everything matches the canonical ABI). For Rust when an allocation is performed in the generated code it should also be deallocated in the generated code (or in C the API given expects everything to be allocated)</p>",
        "id": 265724544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640114584
    },
    {
        "content": "<p>In the wit gisted here so far I don't think there's a bug but I can try to answer more specific questions about specific code if that would help</p>",
        "id": 265724597,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640114616
    },
    {
        "content": "<p>This might not be clear, the issue is with API's that are generated and compiled into the wasm module and not the ones generated for the host. So if we're sent a random wasm module and wit file, we don't know when to dealloc because we need to know whether the original program was written in rust or C.</p>",
        "id": 265725515,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1640115123
    },
    {
        "content": "<p>right yeah if that were the case that's bad, but that should not be the case. The ownership semantics are driven by the canonical ABI, no the language-of-wasm</p>",
        "id": 265726174,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640115508
    },
    {
        "content": "<p>The source of truth of what to deallocate on the host and such and what's owned by wasm is the canonical abi itself</p>",
        "id": 265726197,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640115526
    },
    {
        "content": "<p>there's not a formal spec right now though so it's mostly \"what the code does\", but the code should do something that I think is in a PR to the interface-types repo at least</p>",
        "id": 265726219,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640115545
    },
    {
        "content": "<p>I think what I'm trying to say is that ownership semantics are driven by the <code>*.wit</code> file independent of the language the wasm was written in (or the language of the host). I believe that's true today for all <code>wit-bindgen</code>-generated things, but if you think that it's not I can dig in more</p>",
        "id": 265726344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640115621
    },
    {
        "content": "<p>In order for me (as the host) to pass a list into a WASM function, I allocate memory in the guest space (using canonical_abi_realloc), write to it, and pass the guest-relative address in.  I can do this consistently regardless of whether the guest is implemented in C or Rust because the canonical_abi_realloc is exported by the bindgen regardless.  The problem occurs when the function returns back to the host -- I don't know whether or not to deallocate the memory I passed in (using canonical_abi_free).  To help illustrate, I've attached a wit file and both the generated Rust and C bindings.  Notice how the C code does not generate a free() call for the \"test\" routine right now, but the Rust code does.</p>\n<p><a href=\"/user_uploads/15107/c3HYEn2bmimfb3wO15lzszgQ/foo.c\">foo.c</a> <br>\n<a href=\"/user_uploads/15107/LQNfffJ_Qh-c6siP4k-7w6Yc/foo.rs\">foo.rs</a> <br>\n<a href=\"/user_uploads/15107/fe64OuHjsLiWMWNNtEhmg5tu/foo.wit\">foo.wit</a></p>",
        "id": 265726380,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640115654
    },
    {
        "content": "<p>it needs deallocation in both cases</p>",
        "id": 265727093,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640116147
    },
    {
        "content": "<p>it's just implicit in C that you must do that</p>",
        "id": 265727100,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640116153
    },
    {
        "content": "<p>and it's automatically done for you in Rust</p>",
        "id": 265727102,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640116156
    },
    {
        "content": "<p>if C doesn't free it then it's a memory leak</p>",
        "id": 265727116,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640116162
    },
    {
        "content": "<p>Ok, so just to verify:  Authors wanting to create WASM modules compatible with the canonical ABI must free any and all lists they receive from the host before returning from their function.  Is that correct?</p>",
        "id": 265729124,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640117487
    },
    {
        "content": "<p>(or ensure that they are freed)</p>",
        "id": 265729159,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640117516
    },
    {
        "content": "<p>correct yeah</p>",
        "id": 265729241,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640117551
    },
    {
        "content": "<p>Ok.  That's very helpful.  The rule limits the amount of optimization the host can do around memory allocation (i.e. the host wouldn't be able to allocate one large block that is the sum total of all lists and then sub-divide it as separate pointers), but on the other hand it implies that if the guest wants faster memory allocation, it can provide its own optimizations to this effect.</p>",
        "id": 265729785,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640117916
    },
    {
        "content": "<p>indeed yeah, this is also part of the canonical abi itself where in the far future wasm modules can customize it all they want</p>",
        "id": 265730136,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1640118125
    },
    {
        "content": "<p>Thank you so much for helping me understand, Alex.  Appreciate it.</p>",
        "id": 265730175,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1640118156
    },
    {
        "content": "<p>hello folks!<br>\ni was wondering if it's possible to return arbitrarily sized opaque types from within wasm, to store and be able to pass back into wasm functions.</p>",
        "id": 265860808,
        "sender_full_name": "noonien",
        "timestamp": 1640211765
    },
    {
        "content": "<p>i'd have a WASM function that returns a value of that type, with an initial state, i'd probably need to store that function as a Vec&lt;u8&gt; (can't be an array since i don't know it's value beforehand), and i'd pass it back as a &amp;mut [u8]</p>",
        "id": 265861012,
        "sender_full_name": "noonien",
        "timestamp": 1640211886
    },
    {
        "content": "<p>i'd prefer to not do sizeof in wasm, but that's completely ok if there's no other option available</p>",
        "id": 265861112,
        "sender_full_name": "noonien",
        "timestamp": 1640211957
    },
    {
        "content": "<p>When you say \"opaque\", do mean opaque to the outside world?</p>",
        "id": 265861162,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640211970
    },
    {
        "content": "<p>yes, i don't care what's in it, i just need to be able to clone it</p>",
        "id": 265861193,
        "sender_full_name": "noonien",
        "timestamp": 1640211996
    },
    {
        "content": "<p>The outside world needs to be able to clone it?</p>",
        "id": 265861253,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212029
    },
    {
        "content": "<p>yes</p>",
        "id": 265861268,
        "sender_full_name": "noonien",
        "timestamp": 1640212042
    },
    {
        "content": "<p>One option would be to keep the bytes inside the wasm, and return a handle representing those bytes. To clone them, you could export a <code>clone</code> function which takes a handle and returns a new handle.</p>",
        "id": 265861378,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212089
    },
    {
        "content": "<p>Another option would be to simply return a <code>list&lt;u8&gt;</code>, which can have a dynamic size.</p>",
        "id": 265861412,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212108
    },
    {
        "content": "<p>Though you can't get a <code>list&lt;u8&gt;</code> passed back in as a <code>&amp;mut [u8]</code>, so if you want updates like that, the handle approach tends to be better</p>",
        "id": 265861473,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212146
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Script</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">State</span>: <span class=\"nb\">Clone</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"n\">State</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">tick</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">State</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">candle</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Candle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">history</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">History</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">State</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>i'm basically trying to implement this trait using WASM</p>",
        "id": 265861475,
        "sender_full_name": "noonien",
        "timestamp": 1640212149
    },
    {
        "content": "<p>i'm talking about the state parameter</p>",
        "id": 265861545,
        "sender_full_name": "noonien",
        "timestamp": 1640212198
    },
    {
        "content": "<p>My first idea would be to use a resource, and return and pass handles.</p>",
        "id": 265861643,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212234
    },
    {
        "content": "<p>a resource? so basically a memory region that WASM controlls, and gives me access to?</p>",
        "id": 265861788,
        "sender_full_name": "noonien",
        "timestamp": 1640212330
    },
    {
        "content": "<p>thing is, i'd also need to be able to store it, and provide its previous values through the History parameters</p>",
        "id": 265861854,
        "sender_full_name": "noonien",
        "timestamp": 1640212379
    },
    {
        "content": "<p>that's why i'd need to clone it</p>",
        "id": 265861863,
        "sender_full_name": "noonien",
        "timestamp": 1640212384
    },
    {
        "content": "<p>Cloning can be done with a <code>clone</code> function</p>",
        "id": 265861928,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212418
    },
    {
        "content": "<p>and that would mean all cloned values would need to be stored in WASM?</p>",
        "id": 265862047,
        "sender_full_name": "noonien",
        "timestamp": 1640212469
    },
    {
        "content": "<p>It depends on which way the API goes. The outside world is the one calling <code>tick</code>?</p>",
        "id": 265862093,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212495
    },
    {
        "content": "<p>yes</p>",
        "id": 265862119,
        "sender_full_name": "noonien",
        "timestamp": 1640212508
    },
    {
        "content": "<p>Then I think what you'd really want here is for the outside world to define the resource.</p>",
        "id": 265862180,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212555
    },
    {
        "content": "<p>But I expect that will hit a present limitation: <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/120\">https://github.com/bytecodealliance/wit-bindgen/issues/120</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/120\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/db41416699a78ec108b747785f1290bb6c30fd35\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653365643364303532643033303936623566383533613034346361393838653436333964343135653732363635393730633035616433336633643533653437332f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f313230)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/120\" title=\"rust-wasm export cannot find imported handle types · Issue #120 · bytecodealliance/wit-bindgen\">rust-wasm export cannot find imported handle types · Issue #120 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This repository: https://github.com/sunfishcode/import-export-demo contains a wit-bindgen project which imports provider.wit: resource thing { frob: function() } and exports runner.wit: use { thing...</div></div></div>",
        "id": 265862225,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212564
    },
    {
        "content": "<p>i would prefer not to require access to the WASM file during compile time</p>",
        "id": 265862634,
        "sender_full_name": "noonien",
        "timestamp": 1640212851
    },
    {
        "content": "<p>it appears that's necessary for what you linked</p>",
        "id": 265862661,
        "sender_full_name": "noonien",
        "timestamp": 1640212881
    },
    {
        "content": "<p>I'm not sure what you mean by access to the wasm</p>",
        "id": 265862743,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640212927
    },
    {
        "content": "<p>i load the WASM at my programs runtime, not during compile time</p>",
        "id": 265862842,
        "sender_full_name": "noonien",
        "timestamp": 1640213036
    },
    {
        "content": "<p>so, i'm not sure wit_bindgen_rust is usable in this case</p>",
        "id": 265862901,
        "sender_full_name": "noonien",
        "timestamp": 1640213058
    },
    {
        "content": "<p>I'm still not clear on what you're referring to. wit_bindgen_rust is fine with modules being loaded at runtime</p>",
        "id": 265862962,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213121
    },
    {
        "content": "<p>sorry, i'm new to WASM and wasmtime, i'm not sure I understand everything just yet</p>",
        "id": 265862971,
        "sender_full_name": "noonien",
        "timestamp": 1640213132
    },
    {
        "content": "<p>The main thing going on in #120 is that there are two wit files, rather than one</p>",
        "id": 265863038,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/206238-general/topic/wit-bindgen.20-.20rules.20for.20deallocating.20lists.3F/near/265862962\">said</a>:</p>\n<blockquote>\n<p>I'm still not clear on what you're referring to. wit_bindgen_rust is fine with modules being loaded at runtime</p>\n</blockquote>\n<p>yes, but does that not require access to the wasm file during my programs compilation?</p>",
        "id": 265863050,
        "sender_full_name": "noonien",
        "timestamp": 1640213173
    },
    {
        "content": "<p>Ah, no, that's what the wit IDL does. Your program gets everything it needs to know from wit file; it doesn't need to see the actual wasm</p>",
        "id": 265863088,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213221
    },
    {
        "content": "<p>ah, ok, still, each WASM script has a different state type</p>",
        "id": 265863139,
        "sender_full_name": "noonien",
        "timestamp": 1640213279
    },
    {
        "content": "<p>there is no commonality there</p>",
        "id": 265863189,
        "sender_full_name": "noonien",
        "timestamp": 1640213287
    },
    {
        "content": "<p>and, from what i can understand, wit files are like an interface to define common things (?), in this case, probably a resource for my type, or the type itself</p>",
        "id": 265863244,
        "sender_full_name": "noonien",
        "timestamp": 1640213337
    },
    {
        "content": "<p>Interface types isn't really built to represent this kind of polymorphism directly.</p>",
        "id": 265863575,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213618
    },
    {
        "content": "<p>So there are no variable-size types that would be needed to model this directly.</p>",
        "id": 265863663,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213679
    },
    {
        "content": "<p>My suggestion to use a handle would involve adding a layer of indirection. Instead of literally returning the <code>State</code> value, there'd be a way to create state values, and you could use handles to reference them in opaque ways.</p>",
        "id": 265863708,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213727
    },
    {
        "content": "<p>Handles would also allow the state to be mutated.</p>",
        "id": 265863918,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640213897
    },
    {
        "content": "<p>if i'd implement this in C, id would probably be something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">InitState</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">uint8_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">data</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">InitState</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">struct</span> <span class=\"nc\">InitState</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"k\">sizeof</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">memcpy</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Candle</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">History</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">states</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">tick</span><span class=\"p\">(</span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Candle</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">candle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">History</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">history</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265864205,
        "sender_full_name": "noonien",
        "timestamp": 1640214098
    },
    {
        "content": "<p>that C is probably broken, it's just there as an example</p>",
        "id": 265864220,
        "sender_full_name": "noonien",
        "timestamp": 1640214111
    },
    {
        "content": "<p>i also don't mind receiving State as an *uint8_t in tick</p>",
        "id": 265864509,
        "sender_full_name": "noonien",
        "timestamp": 1640214351
    },
    {
        "content": "<p>or, maybe this:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"nf\">state_size</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">sizeof</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">state</span><span class=\"o\">-&gt;</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Candle</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">History</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">state_bufs</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">tick</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">state_buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Candle</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">candle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">History</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">history</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">state_buf</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">state</span><span class=\"o\">-&gt;</span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265864775,
        "sender_full_name": "noonien",
        "timestamp": 1640214571
    },
    {
        "content": "<p>compiling on <a href=\"https://webassembly.studio/\">https://webassembly.studio/</a>: that code seems to generate the following .wat:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t0</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$state_size</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"state_size\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"init\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$p0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">get_local</span><span class=\"w\"> </span><span class=\"cp\">$p0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$tick</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"tick\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$t3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$p0</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$p1</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"cp\">$p2</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">get_local</span><span class=\"w\"> </span><span class=\"cp\">$p0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">get_local</span><span class=\"w\"> </span><span class=\"cp\">$p0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"cp\">$T0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">anyfunc</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"cp\">$memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$g0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">66560</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$__heap_base</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"__heap_base\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">66560</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$__data_end</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"__data_end\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265865034,
        "sender_full_name": "noonien",
        "timestamp": 1640214806
    },
    {
        "content": "<p>If the outside world is calling <code>tick</code> here, then this looks like the <code>State</code> resource should be defined on the wasm side.</p>",
        "id": 265865226,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640214930
    },
    {
        "content": "<p>yes</p>",
        "id": 265865239,
        "sender_full_name": "noonien",
        "timestamp": 1640214942
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>\n</code></pre></div>",
        "id": 265865243,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640214947
    },
    {
        "content": "<p>the problem is that History also contains a history of previous States from each tick</p>",
        "id": 265865253,
        "sender_full_name": "noonien",
        "timestamp": 1640214953
    },
    {
        "content": "<p>oops</p>",
        "id": 265865255,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640214956
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>\n</code></pre></div>",
        "id": 265865310,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640214970
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">init</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tick</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">candle</span>: <span class=\"nc\">candle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">history</span>: <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">clone</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265865536,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215148
    },
    {
        "content": "<p>since history should be a list of previous states, should it not be list&lt;handle&lt;state&gt;&gt;?</p>",
        "id": 265865691,
        "sender_full_name": "noonien",
        "timestamp": 1640215275
    },
    {
        "content": "<p>yeah</p>",
        "id": 265865732,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215300
    },
    {
        "content": "<p>i see. that sounds good enough. however, in case i'd need to store/restore the states, is there a way of doing that?</p>",
        "id": 265865995,
        "sender_full_name": "noonien",
        "timestamp": 1640215505
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">serialize</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\">  </span><span class=\"n\">deserialize</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">bytes</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>would be one approach.</p>",
        "id": 265866096,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215593
    },
    {
        "content": "<p>awesome!</p>",
        "id": 265866115,
        "sender_full_name": "noonien",
        "timestamp": 1640215609
    },
    {
        "content": "<p>what's a resource? i'm trying to find more documentation, but searching for \"wasm resource\" doesn't yield very good results</p>",
        "id": 265866143,
        "sender_full_name": "noonien",
        "timestamp": 1640215648
    },
    {
        "content": "<p>There's unfortunately not a lot of docs right now. This will eventually be answered by the interface-types docs. But for now:</p>",
        "id": 265866225,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215698
    },
    {
        "content": "<p>A resource is just a type for opaque objects that can be pointed to by handle types.</p>",
        "id": 265866260,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215726
    },
    {
        "content": "<p>are there code examples that  use resources with wasmtime (preferably with rust)?</p>",
        "id": 265866313,
        "sender_full_name": "noonien",
        "timestamp": 1640215782
    },
    {
        "content": "<p>The wasi-filesystem API rewritten into wit has a resource: <a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md\">https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bf78931f0309360bf15e8993dfe846c6628d58ad\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613833333863303332313633376134646535323132646632646261393233623537383432666264663861663535623365623232666332313731373638353462362f576562417373656d626c792f776173692d66696c6573797374656d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-filesystem/blob/main/wasi-filesystem.wit.md\" title=\"wasi-filesystem/wasi-filesystem.wit.md at main · WebAssembly/wasi-filesystem\">wasi-filesystem/wasi-filesystem.wit.md at main · WebAssembly/wasi-filesystem</a></div><div class=\"message_embed_description\">Filesystem API for WASI. Contribute to WebAssembly/wasi-filesystem development by creating an account on GitHub.</div></div></div>",
        "id": 265866390,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215818
    },
    {
        "content": "<p><code>descriptor</code> is a resource which one can think of as \"the thing referenced by a file descriptor\", with handles being the actual file descriptors</p>",
        "id": 265866447,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640215873
    },
    {
        "content": "<p>hmm, is there actual code?</p>",
        "id": 265866891,
        "sender_full_name": "noonien",
        "timestamp": 1640216207
    },
    {
        "content": "<p>The rust-wasm side is in-progress here: <a href=\"https://github.com/bytecodealliance/rustix/tree/wasi/src/imp/wasi\">https://github.com/bytecodealliance/rustix/tree/wasi/src/imp/wasi</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rustix/tree/wasi/src/imp/wasi\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/49285f34b43cba104b390cc5c29bdc6bba356603\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343365313830323430353366616161333235313332303265623736343833386532653965663731303437616362333438336335636464653161373133363765652f62797465636f6465616c6c69616e63652f727573746978)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rustix/tree/wasi/src/imp/wasi\" title=\"rustix/src/imp/wasi at wasi · bytecodealliance/rustix\">rustix/src/imp/wasi at wasi · bytecodealliance/rustix</a></div><div class=\"message_embed_description\">Safe Rust bindings to POSIX-ish APIs. Contribute to bytecodealliance/rustix development by creating an account on GitHub.</div></div></div>",
        "id": 265867037,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640216348
    },
    {
        "content": "<p>hmm, from what i can tell, resources are basically just something that one can get a handle&lt;T&gt; to, and handle&lt;T&gt; is basically a pointer to T</p>",
        "id": 265867206,
        "sender_full_name": "noonien",
        "timestamp": 1640216509
    },
    {
        "content": "<p>That's the gist of it. <code>handle</code> is a smart pointer, so it won't dangle, and it promptly deallocates the resource when dropped.</p>",
        "id": 265867343,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640216622
    },
    {
        "content": "<p>i think i understand now why i'd need the WASM code to do its own allocation</p>",
        "id": 265867872,
        "sender_full_name": "noonien",
        "timestamp": 1640217117
    },
    {
        "content": "<p>from what i can tell, if i don't do this, i'd have to make sure that if i allocate memory outside of the wasm code, it doesn't interfere with what WASM does with the memory (since it doesn't know there is anything allocated)</p>",
        "id": 265867992,
        "sender_full_name": "noonien",
        "timestamp": 1640217216
    },
    {
        "content": "<p>Yeah. With wit-bindgen and interface-types in general, code on the outside of a wasm component doesn't have access to the linear-memory address space on the inside.</p>",
        "id": 265868604,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640217715
    },
    {
        "content": "<p>so, from what I can tell, i basically need</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// create an initial state</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">init</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// clone a state, so we can provide tick with a previous state</span>\n<span class=\"w\">    </span><span class=\"n\">clone</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// serialize state for storage</span>\n<span class=\"w\">    </span><span class=\"n\">serialize</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">deserialize</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">bytes</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// tick has access to a mutable state (usually a clone of the last state in history)</span>\n<span class=\"w\">    </span><span class=\"c1\">// after the tick is done, the modified state might get stored in the history</span>\n<span class=\"w\">    </span><span class=\"n\">tick</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">candle</span>: <span class=\"nc\">candle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">history</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265869511,
        "sender_full_name": "noonien",
        "timestamp": 1640218396
    },
    {
        "content": "<p>then, i use wit-bindgen in my rust-&gt;wasm program to provide those functions</p>",
        "id": 265869533,
        "sender_full_name": "noonien",
        "timestamp": 1640218422
    },
    {
        "content": "<p>however, in my host rust program, where wasmtime is run, i'm guessing handle&lt;state&gt; is just an i32</p>",
        "id": 265869595,
        "sender_full_name": "noonien",
        "timestamp": 1640218446
    },
    {
        "content": "<p>Yeah. The canonical ABI manages tables of handles, and provides Rust code with <code>i32</code> indices into those tables.</p>",
        "id": 265869662,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640218516
    },
    {
        "content": "<p>awesome</p>",
        "id": 265869686,
        "sender_full_name": "noonien",
        "timestamp": 1640218549
    },
    {
        "content": "<p>also, i'm guessing since i don't have multiple wit modules, i won't hit the issue you linked</p>",
        "id": 265869735,
        "sender_full_name": "noonien",
        "timestamp": 1640218566
    },
    {
        "content": "<p>Yeah, with the wasm module defining the resource, you should be good</p>",
        "id": 265869827,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640218649
    },
    {
        "content": "<p>will this work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// clone a state, so we can provide tick with a previous state</span>\n<span class=\"w\">    </span><span class=\"n\">clone</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// serialize state for storage</span>\n<span class=\"w\">    </span><span class=\"n\">serialize</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">deserialize</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">bytes</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// create an initial state</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">init</span>: <span class=\"nc\">function</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// tick has access to a mutable state (usually a clone of the last state in history)</span>\n<span class=\"c1\">// after the tick is done, the modified state might get stored in the history</span>\n<span class=\"n\">tick</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"nc\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">candle</span>: <span class=\"nc\">candle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">history</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">handle</span><span class=\"o\">&lt;</span><span class=\"n\">state</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265869960,
        "sender_full_name": "noonien",
        "timestamp": 1640218762
    },
    {
        "content": "<p>also, i can't seem to be able to use <a href=\"https://bytecodealliance.github.io/wit-bindgen/\">https://bytecodealliance.github.io/wit-bindgen/</a> with handle&lt;state&gt;</p>",
        "id": 265870034,
        "sender_full_name": "noonien",
        "timestamp": 1640218819
    },
    {
        "content": "<p>ah, i'm probably misusing that page</p>",
        "id": 265870085,
        "sender_full_name": "noonien",
        "timestamp": 1640218898
    },
    {
        "content": "<p>hmm, or not? i'm not exactly sure</p>",
        "id": 265870192,
        "sender_full_name": "noonien",
        "timestamp": 1640219014
    },
    {
        "content": "<p>I'm not sure offhand how up to date that page is. wit-bindgen has been changing pretty rapidly</p>",
        "id": 265870215,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640219042
    },
    {
        "content": "<p>Hmm, I was mistaken. It looks like it's current.</p>",
        "id": 265870352,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640219155
    },
    {
        "content": "<p>Ah, right. It's <code>handle state</code> rather than <code>handle&lt;state&gt;</code></p>",
        "id": 265870762,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640219381
    },
    {
        "content": "<p>Also, the <code>static init</code> function needs to be declared inside the resource</p>",
        "id": 265870794,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640219401
    },
    {
        "content": "<p>can I ask why that is?</p>",
        "id": 265870874,
        "sender_full_name": "noonien",
        "timestamp": 1640219423
    },
    {
        "content": "<p>I think you could define it outside too, but then you'd omit the <code>static</code> keyword</p>",
        "id": 265870975,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640219481
    },
    {
        "content": "<p><code>static</code> means \"don't add a self parameter\"</p>",
        "id": 265870987,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640219496
    },
    {
        "content": "<p>ah, i see, that makes sense!</p>",
        "id": 265870999,
        "sender_full_name": "noonien",
        "timestamp": 1640219511
    },
    {
        "content": "<p>can *.wit files have parameterized types (generics)?</p>",
        "id": 265871803,
        "sender_full_name": "noonien",
        "timestamp": 1640220327
    },
    {
        "content": "<p>no</p>",
        "id": 265872094,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640220637
    },
    {
        "content": "<p>Some builtin types are parameterized, like <code>list&lt;T&gt;</code>, but no user-defined types are.</p>",
        "id": 265872113,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640220666
    },
    {
        "content": "<p>i see. are there methods?</p>",
        "id": 265872114,
        "sender_full_name": "noonien",
        "timestamp": 1640220666
    },
    {
        "content": "<p>Functions defined in resources are effectively methods</p>",
        "id": 265872126,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640220679
    },
    {
        "content": "<p>other than that, \"methods\" are just prefixed functions i'm guessing</p>",
        "id": 265872196,
        "sender_full_name": "noonien",
        "timestamp": 1640220735
    },
    {
        "content": "<p>where the first parameter is the receiver</p>",
        "id": 265872234,
        "sender_full_name": "noonien",
        "timestamp": 1640220797
    },
    {
        "content": "<p>Yeah. In some langauge bindings, such as JS, having the concept of a receiver is useful to make the code more ergonomic.</p>",
        "id": 265872300,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640220852
    },
    {
        "content": "<p>thanks for the help <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>! i would have been aimlessly lost without it! i really appreciate it</p>",
        "id": 265872722,
        "sender_full_name": "noonien",
        "timestamp": 1640221288
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 265872790,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1640221325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"465662\">Peter Vetere</span> <a href=\"#narrow/stream/206238-general/topic/wit-bindgen.20-.20rules.20for.20deallocating.20lists.3F/near/265729124\">said</a>:</p>\n<blockquote>\n<p>Ok, so just to verify:  Authors wanting to create WASM modules compatible with the canonical ABI must free any and all lists they receive from the host before returning from their function.  Is that correct?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  Just a quick follow-up on this:   when a Wasm function returns a list result to the host, is the host then responsible for calling <code>canonical_abi_free</code> on the linear memory offset it receives?  Or is that memory lifetime also assumed to be managed by the guest?</p>",
        "id": 267208022,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1641572259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465662\">@Peter Vetere</span> correct yeah, the host takes \"ownership\" of the memory and must free it</p>",
        "id": 267209244,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1641572802
    },
    {
        "content": "<p>Excellent.  Thank you!</p>",
        "id": 267209260,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1641572812
    },
    {
        "content": "<p>(this is where we need to more thoroughly document the canonical ABI)</p>",
        "id": 267209261,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1641572813
    }
]