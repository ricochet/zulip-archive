[
    {
        "content": "<p>The docs for Store state: \"No form of GC is implemented at this time so once an instance is created within a Store it will not be deallocated until the Store itself is dropped.\"<br>\nI need to reuse a memory over several sequential Wasm instances. Currently it appears I'm forced to copy the memory in and out since it's not recommended to reuse a Store. Are there any workarounds or plans to support this? Anything I can do to help allow this use case?</p>",
        "id": 307638661,
        "sender_full_name": "Daniel Salvadori",
        "timestamp": 1667434395
    },
    {
        "content": "<p>Would the pooling allocation strategy work for this? <a href=\"https://docs.rs/wasmtime/latest/wasmtime/enum.InstanceAllocationStrategy.html#method.pooling\">https://docs.rs/wasmtime/latest/wasmtime/enum.InstanceAllocationStrategy.html#method.pooling</a></p>",
        "id": 307638830,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667434513
    },
    {
        "content": "<p>Probably! I'll give it a shot and let you know! Thanks!!</p>",
        "id": 307641768,
        "sender_full_name": "Daniel Salvadori",
        "timestamp": 1667436834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> As far as I can tell the pooling allocation strategy doesn't resolve my problem because a store owns the memory, and to return resources to a pool I need to drop a store (and thus memory). So I would still need to copy data out of a memory, drop the store, create a new store+memory, and copy data in, which is incredibly inefficient.</p>\n<p>The alternative is to reuse the same store across an unbounded number of sequential instances but Wasmtime explicitly states not to do that because of no garbage-collection \"at this time\". Does anyone know if GC will be implemented at some point? Meanwhile, what would be recommended - to reuse a Store with hopes that GC will be implemented in the future  or copy data in/out?</p>",
        "id": 307743683,
        "sender_full_name": "Daniel Salvadori",
        "timestamp": 1667486194
    },
    {
        "content": "<p>Another option might be to implement your own <a href=\"https://docs.rs/wasmtime/2.0.1/wasmtime/trait.MemoryCreator.html\">MemoryCreator</a> and return to a pool on <code>drop</code></p>",
        "id": 307746506,
        "sender_full_name": "Lann Martin",
        "timestamp": 1667486922
    },
    {
        "content": "<p>Interesting, that could work! Will try it, thanks!!</p>",
        "id": 307747564,
        "sender_full_name": "Daniel Salvadori",
        "timestamp": 1667487230
    }
]