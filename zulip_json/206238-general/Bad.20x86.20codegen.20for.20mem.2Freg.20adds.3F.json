[
    {
        "content": "<p>Hi guys,<br>\nI'm writing a little toy brainf*ck compiler but I'm having some trouble with x86 codegen</p>\n<p>Since brainf*ck primarily uses a big u8 array for storage, I'm emitting lots of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">old_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">I8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mem_flags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">real_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">static_offset_accum</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">old_val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">insn_val</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span>\n<span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">mem_flags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">real_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">static_offset_accum</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>unfortunately these seem to get turned into manual loads and stores:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">movzx</span><span class=\"w\">  </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"n\">BYTE</span><span class=\"w\"> </span><span class=\"n\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rcx</span><span class=\"o\">+</span><span class=\"mh\">0x8000</span><span class=\"p\">]</span>\n<span class=\"n\">add</span><span class=\"w\">    </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"mh\">0x1</span>\n<span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"n\">BYTE</span><span class=\"w\"> </span><span class=\"n\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rcx</span><span class=\"o\">+</span><span class=\"mh\">0x8000</span><span class=\"p\">],</span><span class=\"n\">al</span>\n</code></pre></div>\n<p>I would have expected these to get turned into <code>ADD r/m8, r8</code>, i.e. something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">BYTE</span><span class=\"w\"> </span><span class=\"n\">PTR</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">rcx</span><span class=\"o\">+</span><span class=\"mh\">0x8000</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"mh\">0x1</span>\n</code></pre></div>\n<p>Does somebody have some insight into this? Seems odd to me that the x86 backend wouldn't clean that up</p>",
        "id": 462597239,
        "sender_full_name": "Jan Katzer",
        "timestamp": 1723742183
    },
    {
        "content": "<p>we have lowering rules for the 32 and 64 bit cases: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7756bd2654fe1ac795f9dd9d13de41a31cafbac/cranelift/codegen/src/isa/x64/lower.isle#L3154-L3278\">https://github.com/bytecodealliance/wasmtime/blob/c7756bd2654fe1ac795f9dd9d13de41a31cafbac/cranelift/codegen/src/isa/x64/lower.isle#L3154-L3278</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c7756bd2654fe1ac795f9dd9d13de41a31cafbac/cranelift/codegen/src/isa/x64/lower.isle#L3154-L3278\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d682d530b611e6d8901200c7251345cb7d5302df/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363338393536616333613236323834383437356663636335316530636236613838643733306134383737343562306532613564316461313331366663313664302f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c7756bd2654fe1ac795f9dd9d13de41a31cafbac/cranelift/codegen/src/isa/x64/lower.isle#L3154-L3278\" title=\"wasmtime/cranelift/codegen/src/isa/x64/lower.isle at c7756bd2654fe1ac795f9dd9d13de41a31cafbac · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/x64/lower.isle at c7756bd2654fe1ac795f9dd9d13de41a31cafbac · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 462598219,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723742492
    },
    {
        "content": "<p>it seems someone just needs to add this for the narrower cases; no reason why not other than \"someone needs to do it\" :-)</p>",
        "id": 462598260,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723742509
    },
    {
        "content": "<p>Ah, thanks for the pointer :D</p>\n<p>Seems like a good opportunity to learn how ISLE works</p>",
        "id": 462600935,
        "sender_full_name": "Jan Katzer",
        "timestamp": 1723743338
    },
    {
        "content": "<p>This seems to be a bit of a bigger challenge than I hoped, since mem/imm instructions are not supported AT ALL by the x86 backend AFAICT</p>",
        "id": 462627094,
        "sender_full_name": "Jan Katzer",
        "timestamp": 1723751539
    },
    {
        "content": "<p>Ah, yes, we've added encodings as we've needed them, so that's a bit of work to fill that out</p>",
        "id": 462628264,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723751874
    },
    {
        "content": "<p>No worries, makes me do something and actually learn how it works :D</p>",
        "id": 462628364,
        "sender_full_name": "Jan Katzer",
        "timestamp": 1723751901
    },
    {
        "content": "<p>Quick question, what would be the best type for immediates in ISLE? I've seen i32 be used as a \"general type\" but I can't figure out how to get one from an iconst or whatever the second operand should be</p>",
        "id": 462628742,
        "sender_full_name": "Jan Katzer",
        "timestamp": 1723751981
    },
    {
        "content": "<p>we've tended to use <code>u64</code>s and should have an extractor that converts from <code>iconst</code>'s parameter (<code>u64_from_imm64</code> or somesuch? can't look at the moment)</p>",
        "id": 462629556,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723752118
    }
]