[
    {
        "content": "<p>It seems that a module I test with imports <code>env::__stack_pointer</code>. How do I obtain this value? It seems that none of the modules I have export it or define the value in custom sections.</p>",
        "id": 206584638,
        "sender_full_name": "Risto",
        "timestamp": 1597157464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270484\">@Risto</span> <code>env::__stack_pointer</code> is created by the linker. It only exists in the final linked wasm module.</p>",
        "id": 206661455,
        "sender_full_name": "bjorn3",
        "timestamp": 1597210554
    },
    {
        "content": "<p>It seems that if I define a stack for a program it will be compiled with a stack.<br>\nHowever, the stack size isn't exported by llvm/clang even if one is defined.<br>\nThe command I used to compile the module that should define the stack is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">$CC</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">entry</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">undefined</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"n\">zstack</span><span class=\"o\">-</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">1600</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">stack</span><span class=\"o\">-</span><span class=\"n\">first</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Using wasi-sdk, so the compile target should be set to wasm-wasi automatically.</p>",
        "id": 206676334,
        "sender_full_name": "Risto",
        "timestamp": 1597225992
    },
    {
        "content": "<p>Even if <code>--export-all</code> is passed to the linker, there is no exported value that signals the position or size of the stack. Many other variables are exported though, for example <code>__memory_base</code>. Unsure if I am missing something from the linking step. Hmm.</p>",
        "id": 206682512,
        "sender_full_name": "Risto",
        "timestamp": 1597231346
    },
    {
        "content": "<p>does any of the compiled \"example.wasm\" functions needs __stack_pointer ?</p>",
        "id": 206695602,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597240120
    },
    {
        "content": "<p>/me tried locally -- the global is not exported indeed</p>",
        "id": 206696760,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597240668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> No, it is not used I would say as far as I see.<br>\nI tried <code>--export,__stack_pointer,--export,__stack_base</code>, but they do nothing - no error or export. The export switch works for all other values, such as <code>__memory_base</code> or unused functions.<br>\nThere is also no way to calculate/get the initial value for it either as far as I see, as there is no information on the location or size of the stack even if it is created to the module as stack-size and stack-first options dictate.</p>",
        "id": 206699092,
        "sender_full_name": "Risto",
        "timestamp": 1597241548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270484\">@Risto</span> I suspect that lld cannot do mutable globals by looking at <a href=\"https://github.com/llvm/llvm-project/blob/master/lld/wasm/Writer.cpp#L566\">https://github.com/llvm/llvm-project/blob/master/lld/wasm/Writer.cpp#L566</a></p>",
        "id": 206709217,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597246022
    },
    {
        "content": "<p>/me suggests to add function/accessors and export these</p>",
        "id": 206709435,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597246128
    },
    {
        "content": "<p>For now I will build the codes with emscripten, which doesn't seem to have the same issue.</p>\n<p>I also found some posts around the web that claimed the stack pointer being at position 4 in memory as a convention or something, but I will rather try emscripten at this time than try guess if that is a valid assumption at all.<br>\nMaking the getter for the stack position seems like a potential workaround, I think I found a stackoverflow post mentioning the same.</p>",
        "id": 206819642,
        "sender_full_name": "Risto",
        "timestamp": 1597328064
    },
    {
        "content": "<p>\"position 4\" true for old emscripten, I wonder if it is still true, since new emscripten is more inline with what new clang/llvm produces</p>",
        "id": 206820236,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597328374
    }
]