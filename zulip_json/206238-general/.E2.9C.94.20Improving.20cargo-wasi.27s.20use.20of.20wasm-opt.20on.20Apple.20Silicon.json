[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  I'm interested in making a code contribution to <a href=\"https://github.com/bytecodealliance/cargo-wasi\">cargo-wasi</a> to address <code>wasm-opt</code> not working out-of-the-box on Apple Silicon. We've had a few devs on Apple silicon express some frustration with the current workflow of downloading <code>wasm-opt</code> separately and needing to use the <code>WASM_OPT</code> environment variable. I can see a couple approaches that could address the issue:</p>\n<ol>\n<li>Use binaryen's Rust bindings to run the appropriate optimization passes. We use this approach in <a href=\"https://github.com/Shopify/javy/blob/c2f63188c784e40582d48d679d7a5a3c274c3f90/crates/cli/src/opt.rs#L30-L44\">Javy</a>. This enables running the optimization passes on any platform that cargo-wasi supports and avoids needing to handle missing dylibs when downloading the <code>wasm-opt</code> binary.</li>\n<li>Adjust how <code>wasm-opt</code> is downloaded such that the missing <code>dylib</code> is available on the path that <code>wasm-opt</code> is expecting it on, download a newer version of <code>wasm-opt</code>, and then adjust the logic that checks if <code>wasm-opt</code> can be downloaded to include Apple silicon. This would be split into separate PRs.</li>\n</ol>\n<p>I'd prefer (1) but am open to (2). I'm also open to other suggestions!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-wasi\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/975475fc7822c6a99ead8ae5cb3eee0b4f8ac571\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666430333234363836613932373739303130343435373461636361653865613434343763663131333661643731376235643330333734326331653764393138612f62797465636f6465616c6c69616e63652f636172676f2d77617369)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-wasi\" title=\"GitHub - bytecodealliance/cargo-wasi: A lightweight Cargo subcommand to build Rust code for the `wasm32-wasi` target\">GitHub - bytecodealliance/cargo-wasi: A lightweight Cargo subcommand to build Rust code for the `wasm32-wasi` target</a></div><div class=\"message_embed_description\">A lightweight Cargo subcommand to build Rust code for the `wasm32-wasi` target - GitHub - bytecodealliance/cargo-wasi: A lightweight Cargo subcommand to build Rust code for the `wasm32-wasi` target</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Shopify/javy/blob/c2f63188c784e40582d48d679d7a5a3c274c3f90/crates/cli/src/opt.rs#L30-L44\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/dfb66688df8e5c3fedad98274d76cd31f76bfc81\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643062646530626330333133313763343335646636346139333230393436323839633164346662643563316335376237646237393331666461666632353166322f53686f706966792f6a617679)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Shopify/javy/blob/c2f63188c784e40582d48d679d7a5a3c274c3f90/crates/cli/src/opt.rs#L30-L44\" title=\"javy/opt.rs at c2f63188c784e40582d48d679d7a5a3c274c3f90 · Shopify/javy\">javy/opt.rs at c2f63188c784e40582d48d679d7a5a3c274c3f90 · Shopify/javy</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to Shopify/javy development by creating an account on GitHub.</div></div></div>",
        "id": 287348328,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1656085582
    },
    {
        "content": "<p>Hello! Personally I'd prefer to stick to using the CLI if possible, it's pretty hairy linking with C++ code and distributing that so stick to precompiled artifacts from elsewhere is my preerred route.</p>",
        "id": 287362122,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656092621
    },
    {
        "content": "<p>To clarify for approach (1), we'd be using the <a href=\"https://crates.io/crates/binaryen\">binaryen crate</a> which handles the linking rather than implementing the linking in <code>cargo-wasi</code> itself. That crate has the same license as <code>cargo-wasi</code>. We've been using it in Javy to run <code>wasm-opt</code> optimizations and have not noticed any pain or hairiness around linking or distribution. You can see how we interact with it in the code section I linked.</p>",
        "id": 287364048,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1656093592
    },
    {
        "content": "<p>I've historically used the binaryen crate actually but I would still prefer to use precompiled binaries from binaryen itself. Shipping C++ is nontrivial all the complexity still has to go somewhere even if it's all encapsulated in a different crate (and I'm not sure if that crate encapsulates everything)</p>",
        "id": 287364990,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656094067
    },
    {
        "content": "<p>Alright, I'll get started on approach (2). Thank you for providing your feedback on the approaches <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>! Thinking more about this, I'll probably start by opening a dedicated PR to have <code>cargo-wasi</code> download a newer version of <code>wasm-opt</code> that includes a release with Apple silicon support, and then do the other work for approach (2) separately, as I'm working on a computer with a Apple silicon processor.</p>",
        "id": 287366802,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1656095011
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 287367681,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656095474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477345\">Jeff Charles</span> has marked this topic as resolved.</p>",
        "id": 287367860,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656095554
    }
]