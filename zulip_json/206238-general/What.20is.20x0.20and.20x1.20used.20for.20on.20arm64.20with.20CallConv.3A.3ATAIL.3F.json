[
    {
        "content": "<p>Compiling <code>bar(x: i64) { x + 1 }</code> yields the following assembly code on ARM64 with tail call convention. It looks like first argument is passed via register <code>x2</code> and return value is also <code>x2</code>.  So I am curious what is <code>x0</code> and <code>x1</code> used for in this case?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">_bar</span><span class=\"o\">&gt;</span>:\n       <span class=\"mi\">0</span>: <span class=\"nc\">d503235f</span><span class=\"w\">      </span><span class=\"n\">pacibz</span>\n<span class=\"w\">       </span><span class=\"mi\">4</span>: <span class=\"nc\">a9bf7bfd</span><span class=\"w\">      </span><span class=\"n\">stp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">!</span>\n<span class=\"w\">       </span><span class=\"mi\">8</span>: <span class=\"mi\">910003</span><span class=\"n\">fd</span><span class=\"w\">      </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span>\n<span class=\"w\">       </span><span class=\"n\">c</span>: <span class=\"mi\">91000442</span><span class=\"w\">      </span><span class=\"n\">add</span><span class=\"w\">     </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x2</span><span class=\"p\">,</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>\n<span class=\"w\">      </span><span class=\"mi\">10</span>: <span class=\"nc\">a8c17bfd</span><span class=\"w\">      </span><span class=\"n\">ldp</span><span class=\"w\">     </span><span class=\"n\">x29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">sp</span><span class=\"p\">],</span><span class=\"w\"> </span>#<span class=\"mi\">16</span>\n<span class=\"w\">      </span><span class=\"mi\">14</span>: <span class=\"nc\">d50323df</span><span class=\"w\">      </span><span class=\"n\">autibz</span>\n<span class=\"w\">      </span><span class=\"mi\">18</span>: <span class=\"nc\">d65f03c0</span><span class=\"w\">      </span><span class=\"n\">ret</span>\n</code></pre></div>",
        "id": 409754715,
        "sender_full_name": "Tianyu Geng",
        "timestamp": 1703370878
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b583c54fda13b53dea362861125dd1e2ced1381d/cranelift/codegen/src/isa/aarch64/abi.rs#L1305-L1313\">this comment</a> answers your question, I think!</p>",
        "id": 409757100,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703372812
    },
    {
        "content": "<p>Thank you! What is return area pointer? Also, why does indirect call need a devoted register like so? Can't the callee address be stored in a scratch register like x16?</p>",
        "id": 409757439,
        "sender_full_name": "Tianyu Geng",
        "timestamp": 1703373209
    },
    {
        "content": "<p>The \"return area pointer\" is used in some ABIs when a value larger than can fit in a register is returned</p>",
        "id": 409767991,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703379889
    },
    {
        "content": "<p>Re: scratch, I'm not sure exactly, but it might have to do with the fact that x16 is already reserved for lowering address/offset-generation sequences, and so is required at a \"lower level\" (to implement spills/reloads that may fill in registers for the tail call)</p>",
        "id": 409768073,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703379946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> could probably say more about the implementation as he drove the effort</p>",
        "id": 409768146,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703379971
    },
    {
        "content": "<p>Thanks! For my purpose I am just trying to implement exception handler to resume operation after handling an exception. So it sounds like I do not care about values in these registers when restoring execution states.</p>",
        "id": 409768458,
        "sender_full_name": "Tianyu Geng",
        "timestamp": 1703380145
    }
]