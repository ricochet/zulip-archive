[
    {
        "content": "<p>I've been playing around with wasmtime and wit-bindgen a bit, trying to get into some more \"advanced\" usecases of wasm with memory and async.</p>\n<p>From what I was able to tell, using .wit files is currently the recommended way to pass things like <code>Vec</code> between host and wasm, which works fine for me so far.</p>\n<p>However it seems like exporting an async function from <code>wasm</code> doesn't work by default. I've enabled <code>async_support</code> in my wasmtime config, but I still get <code>canonical_abi::async_export_done has not been defined</code> as an error when trying to execute it.</p>\n<p>Is <code>wit_bindgen_rust::export!(\"../_.wit\");</code> and then <code>#[wit_bindgen_rust::async_trait(?Send)]</code> on the trait the recommended way to export async functions from WASM? If so, do I have to manually export the <code>async_export_done</code> function or should <code>wasmtime</code> do that for me if I configure it correctly?</p>\n<p>Edit: I'm using Rust both sides.</p>",
        "id": 281006322,
        "sender_full_name": "Christian Dürr",
        "timestamp": 1651581472
    },
    {
        "content": "<p>The async story of wit-bindgen is in general very underbaked and as you're finding buggy. It's got various ideas but none of them were ever 100% fleshed out and finished, so I don't think it's in a workable state where it can be used off-the-shelf</p>",
        "id": 281019745,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651587491
    },
    {
        "content": "<p>Is there any reasonable way to make it work at all? Or would I just be wasting my time trying to look into that?</p>\n<p>Not being able to export async functions in wasm modules at all seems like an unfortunate restriction, especially because it looks like it should (almost) work?</p>",
        "id": 281029586,
        "sender_full_name": "Christian Dürr",
        "timestamp": 1651591384
    },
    {
        "content": "<p>Sorry aside from diving into the code I don't have much to offer. The implemented version of async is pretty far off from what it's expected the component model will land on, so the support already in there may be able to be easily tweaked to get to a workable state but it's not going to the final state of async (and will eventually be removed in favor of something else)</p>",
        "id": 281030204,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651591603
    },
    {
        "content": "<p>Thanks for the advice. I'd assume you're not aware of any existing projects making use of async functions exported by wasm? Otherwise I'd love to dive into their code a bit.</p>\n<p>I'll probably have to tinker around with it a bit anyway, getting async to work would probably be really nice but I might be able to live without.</p>",
        "id": 281031805,
        "sender_full_name": "Christian Dürr",
        "timestamp": 1651592296
    },
    {
        "content": "<p>I know of projects using Wasmtime's async support, but that's distinct from the async support this is building. The async support in wit-bindgen for wasm itself I'm not aware of anyone using</p>",
        "id": 281032937,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651592749
    },
    {
        "content": "<p>Does wasmtime's async support make it possible to call functions that are defined as <code>async</code> in the wasm module itself? I've defined async host functions to be called as async from wasm, and I know there's a bunch of <code>call_async</code> functions which should allow it. But I'm not sure it's actually possible?</p>\n<p>Like if it's possible to do it just with wasmtime itself, I don't <strong>need</strong> to use wit-bindgen?</p>",
        "id": 281034050,
        "sender_full_name": "Christian Dürr",
        "timestamp": 1651593164
    },
    {
        "content": "<p>no wasmtime's async support allows the wasm module to pretend the world is blocking, so wasm itself gets no access to <code>async</code> features (e.g. call two imports concurrently). To Wasmtime, though, host functions can be <code>async</code> and while the function hasn't finished the wasm module is suspended, meaning the host can do other things.</p>\n<p>Basically it's a model that allows the host to be async when the host functions are async, but to wasm everything still appears blocking</p>",
        "id": 281035788,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651593818
    },
    {
        "content": "<p>Oh, thanks for the explanation. That actually sheds some light on how my previous usages of the wasmtime async feature actually worked.</p>\n<p>That said, this might still be useful for defining async API calls in the host and just using them as blocking functions in wasm, which is my main usecase anyway.</p>",
        "id": 281036614,
        "sender_full_name": "Christian Dürr",
        "timestamp": 1651594130
    },
    {
        "content": "<p>Ah yes if your use case is simply making the host's async functions work in the guest (and the guest thinks they're all blocking), then I'd recommend the async support in Wasmtime over what wit-bindgen has</p>",
        "id": 281037745,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651594598
    },
    {
        "content": "<p>wit-bindgen also has support for this flavor of async where content has no support to async features (it's all blocking) but the host does async stuff, I think the flags are probably pretty confusing</p>",
        "id": 281037786,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651594621
    },
    {
        "content": "<p>I believe this is the <code>async</code> flag to the Wasmtime code generator</p>",
        "id": 281037828,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1651594642
    },
    {
        "content": "<p>Yeah, I just figured this out after reading through the proc macro myself. So for anyone wondering, this will allow you to use async in your host functions in functions generated as blocking in the *.wit file (same works for imports):</p>\n<p><code>wit_bindgen_wasmtime::export!({ paths: [\"../interface.wit\"], async: * });</code></p>",
        "id": 281050438,
        "sender_full_name": "Christian Dürr",
        "timestamp": 1651599872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"498187\">Christian Dürr</span> has marked this topic as resolved.</p>",
        "id": 281050578,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651599932
    }
]