[
    {
        "content": "<p>Hi, I don't know if this is the right place to ask questions, but here it goes</p>\n<p>I am currently interested in the bound checking of linear memory access of Wasm. Because I am a hardware engineer, I would love to see what architectural aid Wasm can get. So I am looking for the exact code where the bound checking occurs. Any advice where to start? It would be a great help.</p>",
        "id": 223090859,
        "sender_full_name": "Minyeong Jeong",
        "timestamp": 1610957455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"381260\">@Minyeong Jeong</span> You can take a look at the expansion of <code>heap_addr</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/legalizer/heap.rs\">https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/legalizer/heap.rs</a></p>\n<p>There are two kinds of heaps: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/ir/heap.rs#L27-L42\">https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/ir/heap.rs#L27-L42</a></p>\n<p>Static heaps have a known size. In many cases for wasm it is possible on 64bit systems to simply add the heap address and access offset as the used address without any bound checks. This is because wasm uses 32bit pointers, so reserving a 4GB chunk of memory works. If the wasm heap size is less than 4GB, the rest of this chunk can be explicitly mapped as unreachable, thus causing a catchable SIGSEGV on out of bounds accesses. Static heaps smaller than 4GB and dynamic heaps do need bound checks though.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/legalizer/heap.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/legalizer/heap.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/ir/heap.rs#L27-L42\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5c1d728e3ae8ee7aa329e294999a2c3086b21676/cranelift/codegen/src/ir/heap.rs#L27-L42\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 223096842,
        "sender_full_name": "bjorn3",
        "timestamp": 1610962105
    },
    {
        "content": "<p>Thank you so much. It was a tremendous help!</p>",
        "id": 223113565,
        "sender_full_name": "Minyeong Jeong",
        "timestamp": 1610972950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> May I ask another question?</p>\n<p>So I get that there are two kinds of heap. Static heap that has a fixed base and some not-yet-allocated pages, and dynamic heap that the base can change. Can you explain when and why you get to use static/dynamic over the other? Is it specific to some usecases? It may be a stupid question, but trying to figure it out!!!</p>",
        "id": 223116326,
        "sender_full_name": "Minyeong Jeong",
        "timestamp": 1610974736
    },
    {
        "content": "<p>Static heap is more performant, but requires you to reserve a memory region that has the same size as the maximum heap size. On 32bit systems, this would be a problem as the address space is only 4GB (of which 2GB usable for user programs in most cases) If you don't know in advance exactly how much memory is necessary by the WASM program, you will have to reserve more than the program needs. This memory can then no longer be used by the host or other WASM programs within the same address space. For 64bit systems this is not a problem as 4GB is only a fraction of the address space and only the actually used part of the heap will actually count towards the RAM usage.</p>",
        "id": 223116844,
        "sender_full_name": "bjorn3",
        "timestamp": 1610975024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> Thanks agian, got it!!! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 223192383,
        "sender_full_name": "Minyeong Jeong",
        "timestamp": 1611039032
    },
    {
        "content": "<p>Hi, I have a question about converting a pointer that I get from a wasm module to the real address inside of wasmtime. <br>\nI am trying to add threading support to wasmtime. I posted the relevant part of the code below together with a gdb error I get trying to execute it. I am getting <code>Cannot access memory at address</code> which I assume is because the pointer I get from the wasm module is inside of the linear memory and not relative to the real heap which <code>libc::pthread_create</code> expects. So my question is how can I calculate the relative position of the pointer on the heap? I would also appreciate any other feedback. Thanks in advance!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// wasmtime/crates/wasi-common/src/snapshots/wasi_snapshot_preview1.rs</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">pthread_create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">function</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">backptr</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">backptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"p: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// -&gt; 0x103a00</span>\n<span class=\"w\">            </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">libc</span>::<span class=\"n\">pthread_create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">native</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">attr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">thread_start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// rust/library/std/src/sys/wasi/thread.rs</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">_stack</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Thread</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">p</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"k\">box</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u64ptr</span>: <span class=\"kt\">u64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"ptr: {:#x}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">u64ptr</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// -&gt; 0x103a00</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">thread</span>: <span class=\"kt\">u64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">pthread_create</span><span class=\"p\">(</span><span class=\"n\">u64ptr</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// gdb output</span>\n<span class=\"mh\">0x0000555556f06993</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">alloc</span>::<span class=\"n\">boxed</span>::<span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"o\">=&lt;</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">reading</span><span class=\"w\"> </span><span class=\"n\">variable</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"mh\">0x7ffff55fa780</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">7</span><span class=\"n\">eac88abb2e57e752f3302f02be5f3ce3d7adfb4</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">alloc</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1042</span><span class=\"w\"></span>\n<span class=\"mi\">1042</span><span class=\"w\">    </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">7</span><span class=\"n\">eac88abb2e57e752f3302f02be5f3ce3d7adfb4</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">alloc</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">boxed</span><span class=\"p\">.</span><span class=\"n\">rs</span>: <span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">such</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223363244,
        "sender_full_name": "Arne Vogel",
        "timestamp": 1611143573
    }
]