[
    {
        "content": "<p>I've been working on some changes for runwasi and I've noticed that modules get passed the program name in the wasmtime cli as the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/src/commands/run.rs#L417-L428\">first argument</a>.  In my <a href=\"https://github.com/containerd/runwasi/pull/146/files\">PR to runwasi</a>, I found that I didn't need to pass the module name and everything worked properly.  It feels strange to me to have applications that skip the <a href=\"https://github.com/containerd/runwasi/blob/aeb48cd053f0b1049ae59f8ce4de8a8505fde85d/crates/wasi-demo-app/src/main.rs#L4-L8\">first argument</a> to do work.</p>\n<p>What is the reason for the first argument being the module name? Is the approach I took valid?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/src/commands/run.rs#L417-L428\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e3f7712bc890d3d5afdbc7a7f5cfd8308b552474\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616230333836323834313339656330616436656261343664623262316139393861313365336266646562336664333635376166633937386661396432313266352f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/9a67597cae9199864ae17b4f3bf18a84863de2b0/src/commands/run.rs#L417-L428\" title=\"wasmtime/src/commands/run.rs at 9a67597cae9199864ae17b4f3bf18a84863de2b0 · bytecodealliance/wasmtime\">wasmtime/src/commands/run.rs at 9a67597cae9199864ae17b4f3bf18a84863de2b0 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/containerd/runwasi/pull/146/files\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/465ec30a08d052828f12f5a36d44a3014816bd35\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3634383337323f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/containerd/runwasi/pull/146/files\" title=\"Handle args for modules with out extra first argument in prep for oci articfacts by jsturtevant · Pull Request #146 · containerd/runwasi\">Handle args for modules with out extra first argument in prep for oci articfacts by jsturtevant · Pull Request #146 · containerd/runwasi</a></div><div class=\"message_embed_description\">When working on adding OCI artifact support, I found two bugs:\n\nthe args to the program wasm program included the module.wasm artifact. This means the demo app was parsing the second arguement even...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/containerd/runwasi/blob/aeb48cd053f0b1049ae59f8ce4de8a8505fde85d/crates/wasi-demo-app/src/main.rs#L4-L8\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b877b245bcf325bb1fa10ecd25a65a4a6bdef828\\/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3435323738303731392f63393236353935392d366564332d346535322d393766372d623934633262633638303830)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/containerd/runwasi/blob/aeb48cd053f0b1049ae59f8ce4de8a8505fde85d/crates/wasi-demo-app/src/main.rs#L4-L8\" title=\"runwasi/crates/wasi-demo-app/src/main.rs at aeb48cd053f0b1049ae59f8ce4de8a8505fde85d · containerd/runwasi\">runwasi/crates/wasi-demo-app/src/main.rs at aeb48cd053f0b1049ae59f8ce4de8a8505fde85d · containerd/runwasi</a></div><div class=\"message_embed_description\">Facilitates running Wasm / WASI workloads managed by containerd - runwasi/crates/wasi-demo-app/src/main.rs at aeb48cd053f0b1049ae59f8ce4de8a8505fde85d · containerd/runwasi</div></div></div>",
        "id": 366944907,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1686948987
    },
    {
        "content": "<p>This matches unix and windows where thw first arg is also what the user wrote as program to run. This for example allow customizing help messages based on the actual executable name or to have an executable which contains multiple programs and dispatches based on the name used to execute it. For example busybox is a single executable with all coreutils. If you create a symlink or hardlink from ls to the busybox executable, running ls will make busybox list all files in a directory, but if say the symlink or hardlink is called echo it would echo it's arguments back.</p>",
        "id": 366948444,
        "sender_full_name": "bjorn3",
        "timestamp": 1686950397
    },
    {
        "content": "<p>oh gosh, I feel like I should have known that <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span> thank you (my c# background is showing up where <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/main-command-line#overview\">args  to the main entry point</a> don't include the program name thought you can get it elsewhere)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/main-command-line#overview\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9cf814e2e2af0388dc30d623029e425db1ec6fd9\\/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f646f746e65742f6d656469612f6c6f676f5f6373686172702e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/program-structure/main-command-line#overview\" title=\"Main() and command-line arguments\">Main() and command-line arguments</a></div><div class=\"message_embed_description\">Learn about Main() and command-line arguments. The 'Main' method is the entry point of an executable program.</div></div></div>",
        "id": 366951246,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1686951374
    }
]