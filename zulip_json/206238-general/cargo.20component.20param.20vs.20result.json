[
    {
        "content": "<p>When using cargo component, if there are two functions imported, and the return type of one import  corresponds to the param type of the other, is there by chance a nice way to convert a value from the wit return type to the wit param type so that you can feed the output of one import into the other?</p>",
        "id": 342360176,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678982942
    },
    {
        "content": "<p>Or I guess what I'm really wondering is if it would be useful for the generated result types and param types in the bindings to implement <code>From</code> traits</p>",
        "id": 342362081,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678983415
    },
    {
        "content": "<p>Right now, no, as the generated bindings don't know they're the same type (I assume we're not talking primitives)</p>",
        "id": 342373816,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678985988
    },
    {
        "content": "<p>This will be solved in the future with improved id / version information in the extern descriptions plus registry support</p>",
        "id": 342374229,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678986064
    },
    {
        "content": "<p>Oh unless I misread the question and this is all from the same wit package</p>",
        "id": 342374416,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678986108
    },
    {
        "content": "<p>Then that's a wit-bindgen issue where the types aren't being shared correctly</p>",
        "id": 342374709,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678986179
    },
    {
        "content": "<p>Perhaps a concrete example might clear up my confusion</p>",
        "id": 342375308,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678986342
    },
    {
        "content": "<p>It is all from one wit package</p>",
        "id": 342381984,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988117
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">checkpoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bindings</span>::<span class=\"n\">storage</span>::<span class=\"n\">imp_get_checkpoint</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bindings</span>::<span class=\"n\">storage</span>::<span class=\"n\">hash_checkpoint</span><span class=\"p\">(</span><span class=\"n\">checkpoint</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 342382027,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988131
    },
    {
        "content": "<p>Both functions are wit imports in the same package, but get_checkpoint returns a <code>CheckpointReturn</code> type and <code>hash_checkpoint</code> receives a <code>CheckpointParam</code> type</p>",
        "id": 342382222,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988174
    },
    {
        "content": "<p>so the two lines I have won't work, but if I could do <code>hash_checkpoint(CheckpointParam::from(checkpoint))</code> then this would work</p>",
        "id": 342382411,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">checkpoint</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bindings</span>::<span class=\"n\">storage</span>::<span class=\"n\">imp_get_checkpoint</span><span class=\"p\">();</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bindings</span>::<span class=\"n\">storage</span>::<span class=\"n\">hash_checkpoint</span><span class=\"p\">(</span><span class=\"n\">bindings</span>::<span class=\"n\">storage</span>::<span class=\"n\">CheckpointParam</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">contents</span>: <span class=\"nc\">bindings</span>::<span class=\"n\">storage</span>::<span class=\"n\">ContentParam</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"n\">log_root</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">checkpoint</span><span class=\"p\">.</span><span class=\"n\">contents</span><span class=\"p\">.</span><span class=\"n\">log_root</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"n\">log_length</span>: <span class=\"nc\">checkpoint</span><span class=\"p\">.</span><span class=\"n\">contents</span><span class=\"p\">.</span><span class=\"n\">log_length</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"n\">map_root</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">checkpoint</span><span class=\"p\">.</span><span class=\"n\">contents</span><span class=\"p\">.</span><span class=\"n\">map_root</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"n\">key_id</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">checkpoint</span><span class=\"p\">.</span><span class=\"n\">key_id</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">signature</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">checkpoint</span><span class=\"p\">.</span><span class=\"n\">signature</span>\n<span class=\"w\">      </span><span class=\"p\">});</span>\n</code></pre></div>",
        "id": 342384567,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988814
    },
    {
        "content": "<p>In this example, as a dev, I can do this, where I create a <code>CheckpointParam</code> myself based on the <code>CheckpointResult</code> that I have, but in general folks might have more complicated structs, and a desire to convert between the two types using a trait implemented in the bindings themselves...</p>",
        "id": 342384994,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988924
    },
    {
        "content": "<p>Essentially a <code>From</code> implementation that does what I just did above being included in the bindings</p>",
        "id": 342385190,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678988985
    },
    {
        "content": "<p>In retrospect I see that this would have made more sense in the <code>wit-bindgen</code> stream</p>",
        "id": 342385754,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678989139
    },
    {
        "content": "<p>Oh I see, the difference between generated param / result types for borrowing purposes, yeah</p>",
        "id": 342390874,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678990631
    },
    {
        "content": "<p>Indeed, some conversions for those make sense</p>",
        "id": 342390926,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678990652
    },
    {
        "content": "<p>and wit-bindgen would be the place</p>",
        "id": 342390951,
        "sender_full_name": "Peter Huene",
        "timestamp": 1678990664
    },
    {
        "content": "<p>Would it make sense to use a single type with <code>Cow</code>s?</p>",
        "id": 342399898,
        "sender_full_name": "Lann Martin",
        "timestamp": 1678993345
    },
    {
        "content": "<p>Posted a link to this topic over in <code>wit-bindgen</code></p>",
        "id": 342401532,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678993803
    }
]