[
    {
        "content": "<p>What is the usual idiom for error handling in the wizer initialization function in go?  panic() isn't supported, nor is os.Exit(1).</p>",
        "id": 246603746,
        "sender_full_name": "Dan Kegel",
        "timestamp": 1626793565
    },
    {
        "content": "<p>I did assume a wasm trap would work. I can't find how to directly emit one in go. In rust it would be <code>std::process::abort</code>. You could try to read/write from the address 0xffff_ffff. Assuming that the go compiler doesn't exploit ub and you don't allocate 2^32-1 bytes of memory this will cause a trap due to accessing unmapped memory.</p>",
        "id": 246613202,
        "sender_full_name": "bjorn3",
        "timestamp": 1626797540
    },
    {
        "content": "<p>aha, compiling the go with tinygo --panic=trap should do it, thanks (though if we used panic for anything else, that might be annoying)</p>",
        "id": 246620631,
        "sender_full_name": "Dan Kegel",
        "timestamp": 1626800972
    },
    {
        "content": "<p>In general, I would do something like (apologies for the pseudocode, I don't know go) this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">wizer_initialize</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">try_init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">stderr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"error: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">abort</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">try_init</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247943690,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1627924134
    },
    {
        "content": "<p>using explicit fallibility with <code>try_init</code> should hopefully avoid configuring the build to do anything different with panics than you otherwise would, so it is hopefully minimally invasive</p>",
        "id": 247943891,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1627924222
    },
    {
        "content": "<p>I believe the problem was getting the <code>abort()</code> in go. I don't think go has any such function, so panic=trap is the only possible option I think.</p>",
        "id": 247965337,
        "sender_full_name": "bjorn3",
        "timestamp": 1627935113
    },
    {
        "content": "<p>ah okay, that's a bummer. seems like it and/or a wasm <code>trap</code> intrinsic should really be added to go</p>",
        "id": 247979658,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1627943740
    }
]