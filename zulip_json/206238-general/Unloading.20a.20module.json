[
    {
        "content": "<p>It seems that there is a way to load multiple wasms to modules and then instantiate them and let them work together.<br>\nHowever, is there a way to unload one of the modules afterward in some way? I cannot seem to be able to find an API to unload a module. I am not quite sure what unloading would entail. I would expect unloading would at least remove the module's code from being accessible to other modules (through a table for example).</p>",
        "id": 202590936,
        "sender_full_name": "Risto",
        "timestamp": 1593620950
    },
    {
        "content": "<p>I guess the docs added here just 5 minutes ago answer my question: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1955\">https://github.com/bytecodealliance/wasmtime/pull/1955</a><br>\nAnd the answer is that there is no unloading of a single module at this time. The only way to unload data is to drop the store, which drops all the instances.<br>\n\"once and instance is created within a <code>Store</code> it will not be deallocated until all references to the <code>Store</code> have gone away\".</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1955\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1955\" title=\"Expand top-level `wasmtime` crate docs by alexcrichton 路 Pull Request #1955 路 bytecodealliance/wasmtime\">Expand top-level `wasmtime` crate docs by alexcrichton 路 Pull Request #1955 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is something I meant to do a long time ago but forgot to get around\nto it! This commit updates the top-level documentation of the wasmtime\ncrate to have examples, more words, and generall be a...</div></div></div>",
        "id": 202595654,
        "sender_full_name": "Risto",
        "timestamp": 1593623106
    },
    {
        "content": "<p>Heh glad I could preemptively answer your question :)</p>\n<p>But yes, there's no way to preemptively drop instances/modules because wasmtime does not have a garbage collector for instances/modules</p>",
        "id": 202595959,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593623277
    },
    {
        "content": "<p>and once something is instantiated into a <code>Store</code> the <code>Store</code>holds onto it until the end of its lifetime</p>",
        "id": 202596030,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593623296
    },
    {
        "content": "<p>I started thinking about recreating all instances, but that seems a bit difficult as callstacks would be a problem and table references and similar might also be problematic. Maybe a good workaround, at least for the time being, is just to try minimize the impact of an \"unloaded\" module. This could be done at least by removing all references to it so other modules can use those table slots for their references and freeing the memory related to the module (if possible).</p>",
        "id": 202598606,
        "sender_full_name": "Risto",
        "timestamp": 1593624652
    },
    {
        "content": "<p>there is memory consumed by the modules (it is mostly code) and instances (mostly rest of it). Question is what needs to be unloaded: code or instance resources?</p>",
        "id": 202599086,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1593624873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270484\">@Risto</span>  notice that solution to unloading of one module maybe is just to keep some <code>Module</code> alive, but recreate store and all instances (since they are part of the entire program graph).</p>",
        "id": 202599818,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1593625239
    },
    {
        "content": "<p>Preferably everything related to a module and its instance would be unloaded.</p>\n<p>The allocated memory is tricky since you can basically allocate some memory and pass a pointer to it to another module. In practice, unloading the allocated memory would be a concern for the developer of the module and the creator of the environment where the module runs. Unloading of memory is not something the runtime would try to solve as a general case in my view. Similarly, an issue is the table, which can contain references to the functions. One concern is the exports of a module that may be imported by another module. I would maybe expect such a case to cause some kind of trap if unload is attempted. Apart from the shared resources, I would guess/hope the unloading of other parts should be relatively straight forward.<br>\nIt seems that emscripten is providing some kind of convention of cleanup function in a module, which could allow a module execute some deallocation code before being unloaded.<br>\nThese are just some thoughts I have from the top of my head regarding your question about what would need to be unloaded.</p>",
        "id": 202600917,
        "sender_full_name": "Risto",
        "timestamp": 1593625766
    },
    {
        "content": "<p>It's possible that we could implement other schemes, but we do not have it implemented right now the ability to track down where a module is being referenced</p>",
        "id": 202601277,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593625940
    },
    {
        "content": "<p>that'd basically amount to a GC which hasn't currently been implemented</p>",
        "id": 202601286,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593625947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span>  Hmm, what is the use in keeping a <code>Module</code> alive? In my understanding, a module does not hold any data regarding the state of a program. Keeping a module alive would only speed up the recreation of instances maybe.<br>\nThink there is too much of the word \"module\" in these posts :D</p>",
        "id": 202601288,
        "sender_full_name": "Risto",
        "timestamp": 1593625948
    }
]