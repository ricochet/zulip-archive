[
    {
        "content": "<p>Hey there <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  I'm wondering, what is the proper way of building a \"reactor\"-style wasm module with <code>cargo wasi</code>? I found some discussions around <code>-Zwasi-exec-model</code>, but from my understanding, that seems to require cargo Nightly to work... Is there a \"sanctioned\" way of enabling that that doesn't require nightly or is this still a somewhat new area that is still in flux?</p>",
        "id": 255262681,
        "sender_full_name": "Marco Buono",
        "timestamp": 1632850003
    },
    {
        "content": "<p>I'm not sure what the current status is; the big picture is that the \"reactor\" concept has been folded into the interfaces types and module linking proposals, so the whole space is in flux while those proposals advance.</p>",
        "id": 255263288,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1632850207
    },
    {
        "content": "<p>you can use a cdylib crate-type and then export individual functions, for now</p>",
        "id": 255266163,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1632851189
    },
    {
        "content": "<p>see <a href=\"https://doc.rust-lang.org/cargo/reference/cargo-targets.html#library\">https://doc.rust-lang.org/cargo/reference/cargo-targets.html#library</a></p>",
        "id": 255266287,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1632851241
    },
    {
        "content": "<p>Oh. Interesting, thanks! Good thing I asked before trying out some kludge to make it work <span aria-label=\"relieved\" class=\"emoji emoji-1f60c\" role=\"img\" title=\"relieved\">:relieved:</span> I'll try the cdylib approach, does that still allow for an initializer? Or do I need to implement it manually?</p>",
        "id": 255269997,
        "sender_full_name": "Marco Buono",
        "timestamp": 1632852430
    },
    {
        "content": "<p>Also, the reason why I wanted a reactor in the first place was to allow each instance to handle incoming events in a (host) async task in an executor... I guess other option would maybe be using the async feature to make the WASM instance \"own\" it's own event loop, but be suspended/await on its message queue every time it calls the parent to receive new messages?</p>",
        "id": 255270524,
        "sender_full_name": "Marco Buono",
        "timestamp": 1632852613
    },
    {
        "content": "<p>You can implement it manually</p>",
        "id": 255270539,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1632852616
    }
]