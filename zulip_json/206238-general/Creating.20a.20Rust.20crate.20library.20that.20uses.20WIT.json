[
    {
        "content": "<p>Hello,</p>\n<p>I've been looking for an example of this behavior, and if one exists, consider this question answered.</p>\n<p>I have a custom Rust runtime using wasmtime to run component model apps/plugins, all of which are so far written in Rust as well and use the same WIT file by running <code>cargo_component_bindings::generate!()</code>. What I'd like to do next is create a Rust library crate for all of these apps/plugins to deduplicate the boilerplate code that comes along with various serialization steps and trait implementations for the types defined in my WIT file.</p>\n<p>When I try to do this by creating a component and <code>use</code>-ing it in another one, I run into all kinds of issues such as the target/bindings/&lt;package&gt;/target.wasm file being in the wrong place for the 'library' and the component doing the import being seemingly unable to reach code in the other component.</p>\n<p>It seems like this might be the wrong strategy to do what I want to do -- is there an idiomatic way to do this kind of thing?</p>",
        "id": 398967706,
        "sender_full_name": "Ben McCormick",
        "timestamp": 1698440486
    },
    {
        "content": "<p>If you want to create a Rust crate that effectively is a wrapper around your bindings (either to provide a higher-level abstraction or extending the functionality of the binding types themselves), you'll probably want to use <code>wit-bindgen</code> directly from that crate to do so, and then in the component crate, you have it target an empty world and have a normal crate dependency to the bindings crate from your component itself (in theory that should work, but it doesn't have any test coverage)</p>",
        "id": 398972058,
        "sender_full_name": "Peter Huene",
        "timestamp": 1698442961
    },
    {
        "content": "<p>Thank you, but could you clarify how to use <code>wit-bindgen</code> to access the functions that my WIT file exposes as \"imports\"? I can access the types in my interface, but can't find the functions I want to wrap around.</p>",
        "id": 398976205,
        "sender_full_name": "Ben McCormick",
        "timestamp": 1698445714
    },
    {
        "content": "<p>it depends on the imports, but generally they'll generate something like <code>ns::name::iface::func</code>when the world imports an interface <code>ns:name/iface</code> and something like <code>world::func</code> when the world imports a function. i forget the exact paths off the top of my head</p>",
        "id": 398976561,
        "sender_full_name": "Peter Huene",
        "timestamp": 1698446000
    },
    {
        "content": "<p>i also find using <code>cargo-expand</code> to see exactly what the generated bindings were helps a little</p>",
        "id": 398976571,
        "sender_full_name": "Peter Huene",
        "timestamp": 1698446013
    },
    {
        "content": "<p>i have to run and will be back online later</p>",
        "id": 398976592,
        "sender_full_name": "Peter Huene",
        "timestamp": 1698446027
    },
    {
        "content": "<p>Okay, thanks! I'll try cargo expand</p>",
        "id": 398976842,
        "sender_full_name": "Ben McCormick",
        "timestamp": 1698446223
    },
    {
        "content": "<p>Okay, I've been able to do this strategy successfully now for importing the wrapper and using it in a component. I think it's very close to working, I just have one last problem: Since my wrapper runs <code>wit_bindgen::generate!</code>, it won't compile unless I handle the exports and <code>impl Guest for Component</code>.</p>\n<p>Then, even though I can impl Guest again in my component that uses the \"wrapper\", the impl in the wrapper gets used when I use the compiled app in my runtime. Can I set the wrapper up such that it doesn't have to create the Guest, or set up the component so that its Guest gets used in the final thing?</p>",
        "id": 398981597,
        "sender_full_name": "Ben McCormick",
        "timestamp": 1698450103
    },
    {
        "content": "<p>I should clarify that I'm using wasmtime as the runtime for these WASM plugins -- so the runtime is using the <code>generate!</code> macro in wasmtime::component, but the \"library\" is using <code>wit_bindgen::generate!</code>. This seems to be fine in the sense that I can get the library to execute just fine inside the runtime. I think I just need a way to overwrite the impl inside the \"library\" when I import it into a plugin.</p>",
        "id": 399806533,
        "sender_full_name": "Ben McCormick",
        "timestamp": 1698874306
    },
    {
        "content": "<p>I have a similar (but I think slightly different) use case: I'd like to generate code just for my common WIT types into a shared Rust crate so that I can attach behaviour to them. I'd then want to have several component crates, all with their own worlds, using that shared crate.</p>\n<p>Am I right in thinking that wit-bindgen would need to learn some new tricks for this to work? Namely: filter what wit namespaces to generate code for, and also tell it where to find pre-generated code for a given namespace?</p>\n<p>Is this something that is already on anyone's radar? If I wanted to have a think about what this might look like, should I open an issue on the wit-bindgen repo with some examples, or better to post it to zulip?</p>",
        "id": 399826099,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1698884952
    },
    {
        "content": "<p>yes, this feature for wit-bindgen landed recently by roman and brian <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/699\">https://github.com/bytecodealliance/wit-bindgen/pull/699</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/699\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8414bbbdf0b38e95d6cd696179932f01884e476a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303337313163303332363062623961356639326566613263333736346438633732623363393932656239656237343339633566613964316336616630666435662f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363939)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/699\" title=\"feat(rust): implement `with` macro argument by rvolosatovs 路 Pull Request #699 路 bytecodealliance/wit-bindgen\">feat(rust): implement `with` macro argument by rvolosatovs 路 Pull Request #699 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Closes #694\nIntroduce with Rust macro argument supported by Wasmtime bindgen.\nBig part of this is adapted from Wasmtime source code.\nThe implementation is very simple and has minimal changes to exi...</div></div></div>",
        "id": 399826513,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1698885158
    },
    {
        "content": "<p>Oh, cool! I'll definitely give this a go. Thanks! <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 399827701,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1698885851
    },
    {
        "content": "<p>A late response, but I have solved this exact issue by making a rust library that \"wraps\" the native wit bindgen generated types, adding useful functions, deriving more traits, etc. The individual plugins can then depend on this library and have a much nicer API to work with than if they used the wit bindings directly.</p>\n<p>The library I created for this in one of my projects is <a href=\"https://github.com/kajacx/LiquiSlimeBevy/tree/master/liquislime-rust-api\">here</a>, although the code is a bit outdated and would require some changes to update it to the newest version of wit bindgen.</p>",
        "id": 410833336,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1704195481
    }
]