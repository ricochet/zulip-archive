[
    {
        "content": "<p>Somebody just told me memory is per store rather than per instance. I'm assuming that's incorrect as it defeats the purpose of an instance.</p>\n<p>However, it got me thinking. If retargeted assembler is per store, with seperate data per instance (as expected), is the appropriate protection in place to stop any self modifying code cleverness from occuring that would affect one instance from another.</p>\n<p>Secondary: What if we want self modifying code cleverness.</p>",
        "id": 196761856,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588854043
    },
    {
        "content": "<p>I assume answer to latter is self modifying code isn't a necessity. Find another way of doing the same thing.</p>",
        "id": 196762061,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588854170
    },
    {
        "content": "<p>I get it. memory <em>can</em> be shared between instances &amp; there are rare occasions you'd want to do that for inter-process communications.<br>\nall the same, each instance has a memory configuration that I'd like to be able to access in a performant manner in a callback as you almost have but andreas is objecting to for some reason I can't quite fathom.</p>",
        "id": 196769075,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588857917
    },
    {
        "content": "<p>how about :</p>\n<p>if wasm_instance_set_host_info has been set, embedder wants instance specific information.<br>\nin this situation, the void* supplied to wasm_func_new_with_env  could be the calling wasm_instance_t with anything embedder specific required hung of the pointer supplied to wasm_instance_set_host_info which I assume is retrieved using wasm_instance_get_host_info </p>\n<p>that way the API doesn't need modifying. its just used in a way that might currently be undocumented.</p>",
        "id": 196776819,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588861088
    },
    {
        "content": "<p>what's wrong with just plain wasm_func_new_with_env ? (Sorry, I still cannot get the problem described above)</p>",
        "id": 196777614,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588861415
    },
    {
        "content": "<p>I want the instance that called the callback accessible in the callback. throwing it into that void* is how I propose doing so without reving the API.</p>",
        "id": 196777919,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588861530
    },
    {
        "content": "<p>for every instance you create wasm_func_t with unique env  for wasm_func_new_with_env, connect env with instance. The function can be provided via imports or table. boom!</p>",
        "id": 196777925,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588861534
    },
    {
        "content": "<blockquote>\n<p>without reving the API</p>\n</blockquote>\n<p>Reviving host data to host itself? I'm confused</p>",
        "id": 196778098,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588861613
    },
    {
        "content": "<p>Can you explain what's wrong with <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/callback.c\" title=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/callback.c\">https://github.com/WebAssembly/wasm-c-api/blob/master/example/callback.c</a> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/callback.c\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api/blob/master/example/callback.c\" title=\"WebAssembly/wasm-c-api\">WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Wasm C API prototype. Contribute to WebAssembly/wasm-c-api development by creating an account on GitHub.</div></div></div>",
        "id": 196778187,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588861668
    },
    {
        "content": "<p>You're suggesting passing the instance pointer as the void * to wasm_func_new_with_env.<br>\nThat'd be neat, except you have to pass the wasm_func_t pointers into the function that creates the instance. you're wanting to pass as void * what we don't have yet :)</p>",
        "id": 196778670,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588861853
    },
    {
        "content": "<p>I've currently got this : <a href=\"https://pastebin.com/AX8Lqt34\" title=\"https://pastebin.com/AX8Lqt34\">https://pastebin.com/AX8Lqt34</a></p>\n<p>Note how m_instance only becomes available <em>after</em> the wasm_func_t  's that define its imports have been defined.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/AX8Lqt34\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/AX8Lqt34\" title=\"  bool Assembly_Instance::Instantiate()  {     // Bind native callback functions - Pastebin.com\">  bool Assembly_Instance::Instantiate()  {     // Bind native callback functions - Pastebin.com</a></div></div></div>",
        "id": 196778981,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588861998
    },
    {
        "content": "<p>Making a circular data structure is really hard task, yes. Will the following  pseudo code work? <code>struct Env { wasm_instance_t *ins }; Env env = {nullptr}; func = wasm_func_new_with_env(..., &amp;env, ...); env.ins = wasm_instance_new(..., [..func..]);</code></p>",
        "id": 196779539,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588862239
    },
    {
        "content": "<p>you're right. also, that's what I've already got. wasm_func_new_with_env takes a store pointer but it is instance specific as you pass it to the instance constructor &amp; can have one of those per instance. so, turns out I'm wrong &amp; so should apologize for taking everyone on a wild goose chase.</p>\n<p>its fine. we can identify instances in callbacks, as yury correctly points out.</p>\n<p>sorry everyone.</p>",
        "id": 196780090,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588862490
    },
    {
        "content": "<p>Stipulation here is that the wasm module start function shall not call the callback. Which prevents it to do nicely in Command style modules. Reactor style of modules is a better fit here (<a href=\"https://github.com/WebAssembly/WASI/issues/13\" title=\"https://github.com/WebAssembly/WASI/issues/13\">https://github.com/WebAssembly/WASI/issues/13</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/issues/13\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/issues/13\" title=\"Commands and Reactors 路 Issue #13 路 WebAssembly/WASI\">Commands and Reactors 路 Issue #13 路 WebAssembly/WASI</a></div><div class=\"message_embed_description\">There seem to be two distinct modes of program execution that applications broadly fit into: Commands and Reactors. A Command has a &quot;main&quot; function, and when this function returns the pro...</div></div></div>",
        "id": 196780949,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588862849
    },
    {
        "content": "<p>Not sure if that's relevant to my issue which I thought was closed. We have an init function which sets up a 3D scene, followed by a tick function every frame &amp; a terminate function to tear it all down. wasm runtime stays live though all functions &amp; is terminated after the last. thus far its acting as I'd expect. once again, guidance appreciated. almost got stuff happening on screen. a spinning cube by the end of the day maybe.</p>",
        "id": 196781589,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588863087
    }
]