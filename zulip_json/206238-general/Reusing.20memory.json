[
    {
        "content": "<p>I have quite a complex use-case. I'm using wasmtime for a video game that's like screeps. Each player uploads a wasm script (written in Rust), and I create an Instance for each of their units each tick. </p>\n<p>I want to somehow provide a way to persist memory between instances. I have a basic implementation working like this:</p>\n<ol>\n<li>Create a 1mb chunk of memory on the host</li>\n<li>Create an Instance</li>\n<li>Call a function exported from the instance to allocate 1mb of memory</li>\n<li>Copy the 1mb chunk into the instance-provided chunk (1)</li>\n<li>Deserialize the  1mb chunk with bincode into a T within the VM (2).</li>\n<li>Use that data</li>\n<li>Serialize the data back into the 1mb chunk using bincode (3)</li>\n<li>Host then copies the 1mb chunk in the instance back to the 1mb chunk stored on the host (4)</li>\n</ol>\n<p>This involves 4 different copies and/or serializations. That's pretty sucky, and adds a lot of overhead. I've considered various schemes to avoid 2-3 by using mem::transmute() and building an allocator that allocates entirely within the byte slice. That would avoid needing to use bincode to convert to and from bytes within the instance. However, I still would need to copy the data in and out of the instance each time.</p>\n<p>I think a better way would be to limit the memory to 1mb for the instance, and reuse it between instances. The questions are then:</p>\n<ol>\n<li>How do I reuse the memory?</li>\n<li>How can I provide a new instance the same memory, and have it pick up from where it left off on the rust side? Like, if I declare a static mut T or whatever, how can I have the script get that in another instance later on?</li>\n</ol>\n<p>Ideally, if the wasm script panics, then all changes to the persistent memory would be rolled back. So I kinda want copies 1+4, but I want to avoid the overhead of bincode is the bigger issue.</p>",
        "id": 287519769,
        "sender_full_name": "JMS",
        "timestamp": 1656286323
    },
    {
        "content": "<p>Currently linear memories cannot be reused across stores, and you probably want to retain one-instance-per-store since otherwise instances never get deallocated (they're owned by the store). Linear memories can technically be shared between instances within the same store but it would mean you have to persist the store for a long time which may not be what you want.</p>\n<p>Otherwise what you can do is if the modules import the memory you can manage the memory yourself. For example you could create the linear memory on the host and then when the wasm module is done with it you do what's necessary to serialize that to disk and such. Using the <code>MemoryCreator</code> trait you may be able to create custom schemes for memory allocation perhaps as well?</p>",
        "id": 287601273,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656346574
    },
    {
        "content": "<p>How exactly do I provide memory to the guest? Right now I'm calling a function to allocate memory from within the guest, and give the pointer back to the host to write to. Is there a way to just provide memory directly to the guest?</p>",
        "id": 287666111,
        "sender_full_name": "JMS",
        "timestamp": 1656386400
    },
    {
        "content": "<blockquote>\n<p>Is there a way to just provide memory directly to the guest?</p>\n</blockquote>\n<p>You can use the <code>grow</code> method on the <code>Memory</code> and then write to the newly grown pages. It will depend on whichever memory allocator the wasm module uses if it will handle this fine, or corrupts it internal state. In any case you probably won't be able to deallocate the memory again without corrupting the allocator state. You also can't map existing pages with data into the wasm linear memory. You must copy it one way or another.</p>",
        "id": 287709447,
        "sender_full_name": "bjorn3",
        "timestamp": 1656419974
    }
]