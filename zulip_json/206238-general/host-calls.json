[
    {
        "content": "<p>With WASI, some calls from wasm will end up running non-wasm code, right? Is it possible to know from the cranelift side, which of the calls those will be? I guess that the RelocationSink might be able to give that info? I think I'd also need to know the signature of the function too.</p>",
        "id": 190375516,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584009638
    },
    {
        "content": "<p>While it's theoretically possible to specialize calls to known imports like WASI, right now we don't, so all calls to wasm imports look the same from Cranelift's perspective.</p>",
        "id": 190387786,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584019021
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/206238-general/topic/host-calls/near/190387786\" title=\"#narrow/stream/206238-general/topic/host-calls/near/190387786\">said</a>:</p>\n<blockquote>\n<p>While it's theoretically possible to specialize calls to known imports like WASI, right now we don't, so all calls to wasm imports look the same from Cranelift's perspective.</p>\n</blockquote>\n<p>Do you know what kind of steps it would take? Would there need to be changes in cranelift? Or just in wasmtime?</p>",
        "id": 190388629,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584019611
    },
    {
        "content": "<p>I don't think I'd need to change codegen, just get the information on the side</p>",
        "id": 190388724,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584019679
    },
    {
        "content": "<p>The tricky part is that import resolution isn't normally performed until instantiation time, which is after Cranelift has run.</p>",
        "id": 190388928,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584019782
    },
    {
        "content": "<p>And while the end-user side of this is still being worked on, at the engine level, imports to functions with WASI names could be interoposed by other wasm modules.</p>",
        "id": 190389125,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584019877
    },
    {
        "content": "<p>So, we could have a mode where we tell Cranelift it can assume that some APIs won't be interoposed if we needed to.</p>",
        "id": 190389416,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584020041
    },
    {
        "content": "<p>The goal would be a list of function addresses and signatures that are not wasm compiled code, I don't really care if it's a wasi function or not</p>",
        "id": 190389490,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584020071
    },
    {
        "content": "<p>Those addresses aren't computed until instantiation time.</p>",
        "id": 190389537,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584020101
    },
    {
        "content": "<p>that's fine, would just want them before the code is run</p>",
        "id": 190389583,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584020131
    },
    {
        "content": "<p>Ah, ok. See <code>resolve_imports</code> in crates/jit/src/imports.rs</p>",
        "id": 190389798,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584020252
    },
    {
        "content": "<p>Oh, looks like it has the address and signature there, nice!</p>",
        "id": 190390102,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584020422
    },
    {
        "content": "<p>Oh wait, these imports could be from other wasm modules, right?</p>",
        "id": 190390199,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584020491
    },
    {
        "content": "<p>Yes</p>",
        "id": 190390207,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584020499
    },
    {
        "content": "<p>I guess I could collect all the addresses and try work out the address of all wasm functions, and remove them from that set</p>",
        "id": 190390346,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584020572
    },
    {
        "content": "<p>Can you say more about your use case?</p>",
        "id": 190390473,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584020651
    },
    {
        "content": "<p>I'll PM you</p>",
        "id": 190390506,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584020676
    },
    {
        "content": "<p>Hi there, would anybody check issue#2578?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\">https://github.com/bytecodealliance/wasmtime/issues/2578</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2578\" title=\"How to define extern func with referenced mutable arguments? 路 Issue #2578 路 bytecodealliance/wasmtime\">How to define extern func with referenced mutable arguments? 路 Issue #2578 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Desc Here I&#39;m trying to define the HostFuncType&lt;T&gt; below as extern functions in wasmtime, but I don&#39;t know how to handle the &amp;mut T pub type HostFuncType&lt;T&gt; = fn(&amp;mut T,...</div></div></div>",
        "id": 222588861,
        "sender_full_name": "clearloop",
        "timestamp": 1610548860
    },
    {
        "content": "<p>Is there any example of converting a <code>fn</code> with <code>&amp;[Val]</code> as parameters into a <code>Func</code>?</p>",
        "id": 222678349,
        "sender_full_name": "clearloop",
        "timestamp": 1610597433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"379745\">@clearloop</span> <a href=\"https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Func.html#method.new\">https://docs.rs/wasmtime/0.21.0/wasmtime/struct.Func.html#method.new</a> should do the trick</p>",
        "id": 223274719,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1611082543
    }
]