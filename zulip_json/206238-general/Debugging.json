[
    {
        "content": "<p>I saw this from Mozilla about WASMTtime debugging outside the browser <a href=\"https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/\" title=\"https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/\">https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/</a> and I am interested in a bit more details on it. <br>\nIs the debugging support specified anywhere?<br>\nI can't figure out at the moment what would it take to make WAMR or WASM3 support that type of lldb debugging (or maybe they support it and i can't find the documentation). Where can I start reading about the internals that make this possible?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/\" style=\"background-image: url(https://hacks.mozilla.org/files/2019/09/wasmtime-lldb.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hacks.mozilla.org/2019/09/debugging-webassembly-outside-of-the-browser/\" title=\"Debugging WebAssembly Outside of the Browser\">Debugging WebAssembly Outside of the Browser</a></div><div class=\"message_embed_description\">WebAssembly has begun to establish itself outside of the browser via dedicated runtimes like Mozilla’s Wasmtime and Fastly’s Lucet. While the promise of a new, universal format for programs is ...</div></div></div>",
        "id": 196058941,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588436394
    },
    {
        "content": "<p>also interested in this.</p>",
        "id": 196059111,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588436613
    },
    {
        "content": "<p>If you are using the <code>wasmtime</code> binary, you need to pass <code>-g</code>. If you use the C api, you need to call <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/examples/fib-debug/main.c#L18\" title=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/examples/fib-debug/main.c#L18\"><code>wasmtime_config_debug_info_set(config, true);</code></a>. If the wasm file was built with debuginfo, you can then just launch the embedder in lldb and it should work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/examples/fib-debug/main.c#L18\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/examples/fib-debug/main.c#L18\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 196059569,
        "sender_full_name": "bjorn3",
        "timestamp": 1588437340
    },
    {
        "content": "<p>so lldb runs as a seperate process &amp; if you config like that you hook up a pipe between yourself &amp; it or something like that ?</p>\n<p>cool. this is going to be less work than I thought.</p>",
        "id": 196059650,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588437416
    },
    {
        "content": "<p>You use lldb like you would normally debug a native process, except that you need to debug the embedder (the user of wasmtime) and not the wasm binary itself. Wasmtime will then generate the necessary debuginfo and pass it to lldb.</p>",
        "id": 196059713,
        "sender_full_name": "bjorn3",
        "timestamp": 1588437496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ lldb /path/to/embedder\n</code></pre></div>",
        "id": 196059720,
        "sender_full_name": "bjorn3",
        "timestamp": 1588437520
    },
    {
        "content": "<p>that's not going to work for us. lldb can't start our process. its got to hook into something already running.</p>",
        "id": 196059732,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588437565
    },
    {
        "content": "<p>Can I debug both like this? set breakpoints in the program that linked with wasmtime (or another vm) and the WASM code in the same session?</p>",
        "id": 196059735,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588437576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> Yes</p>",
        "id": 196059741,
        "sender_full_name": "bjorn3",
        "timestamp": 1588437592
    },
    {
        "content": "<p>So I assume if this works, attach to process also works, LLDB doesn't necessarely have to start it?</p>",
        "id": 196059786,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588437622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297332\">@Steve Williams</span> You can attach to a running process, but if the wasm instance was created before you attached lldb, the debuginfo will probably not be registered to lldb.</p>",
        "id": 196059797,
        "sender_full_name": "bjorn3",
        "timestamp": 1588437653
    },
    {
        "content": "<p>think we both have the same question/config.</p>",
        "id": 196059802,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588437678
    },
    {
        "content": "<p>To register the debuginfo, wasmtime calls a specially named function. That function does nothing when normally running, but lldb intercepts the call.</p>",
        "id": 196059808,
        "sender_full_name": "bjorn3",
        "timestamp": 1588437692
    },
    {
        "content": "<p>we can start our stuff with whatever configuration is required - start in developer mode, but the point is we'll be running before the debugger hooks in.</p>",
        "id": 196059860,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588437738
    },
    {
        "content": "<p>That's ok, I assume I can do this by waiting for a debugger to attach kind of setup (similarly to how you debug a JS VM outside the browser for ex)</p>",
        "id": 196059861,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588437740
    },
    {
        "content": "<p>lldb could potentially kick off our entire process tree &amp; as your stuff is in our root process right now that'd work.  looking forward to experimenting, but framework first. thanks all for your continued assistance.</p>",
        "id": 196059956,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588437941
    },
    {
        "content": "<p>This is extremly cool. is this debug support tested as part of a sort of wasm compliance test suite for VMs? Or is it a new feature that isn't yet implemented everywhere? Also for a more detailed thing, what's the lldb method called? or where does the call happen? Searching for debug in the repo is a bit hard to follow :D</p>",
        "id": 196060036,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588438041
    },
    {
        "content": "<p>Debug support is not necessary for wasm compliance. The spec is <a href=\"https://yurydelendik.github.io/webassembly-dwarf/\" title=\"https://yurydelendik.github.io/webassembly-dwarf/\">https://yurydelendik.github.io/webassembly-dwarf/</a>. The lldb intercepted function is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/crates/runtime/src/jit_int.rs#L38\" title=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/crates/runtime/src/jit_int.rs#L38\"><code>__jit_debug_register_code</code></a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/crates/runtime/src/jit_int.rs#L38\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c284ffe6c036b8058228d576c46688968629b48c/crates/runtime/src/jit_int.rs#L38\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 196060269,
        "sender_full_name": "bjorn3",
        "timestamp": 1588438397
    },
    {
        "content": "<p>This is super helpful. In addition to this is extra work needed to provide support for breakpoints/variable inspection/etc in the wasm code?</p>",
        "id": 196060496,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588438746
    },
    {
        "content": "<p>When the wasm file has debuginfo, breakpoints and variable inspection should already work.</p>",
        "id": 196060567,
        "sender_full_name": "bjorn3",
        "timestamp": 1588438838
    },
    {
        "content": "<p>Actually this is already addressed in the doc you linked. That's why it needs to be generated. Thanks a lot this is super cool</p>",
        "id": 196060620,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588438907
    },
    {
        "content": "<p>no problem</p>",
        "id": 196060682,
        "sender_full_name": "bjorn3",
        "timestamp": 1588438943
    },
    {
        "content": "<p>Ahh, so basically it relies on the generated JIT for debugging, that's why the only thing that's needed is the fixed-up debug info.</p>",
        "id": 196061058,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588439473
    },
    {
        "content": "<p>Yes</p>",
        "id": 196061203,
        "sender_full_name": "bjorn3",
        "timestamp": 1588439651
    },
    {
        "content": "<p>would love to see wasmtime communicate (optionally) with lldb in a seperate process via a pipe if we ask it to connect at some point.</p>\n<p>on a per instance basis. one or more things will be debugged. anything else we'd like to run as normal.</p>\n<p>that way we can kick off debug sessions as needed from within our environment rather than have to run our entire system under a debugger for web dev debugging.</p>\n<p>I think it'll run more efficiently that way. far too early for this. don't need it yet, got plenty to be getting on with &amp; there appears to be a solution that works, which is effectively the same as we have to do under visual studio to debug .net stuff.</p>\n<p>... but visual studio .net parity is not the aim here, excellence is.</p>\n<p>metioned now so we can think about it a little &amp; how it might work. no rush.</p>",
        "id": 196090045,
        "sender_full_name": "Steve Williams",
        "timestamp": 1588492047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> give it a try, though friction-free running is happening on Linux atm. MacOS need additional option for LLDB be provided to enable JIT'ed code. Not tested on Windows</p>",
        "id": 196191247,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588603998
    },
    {
        "content": "<p>/me is actively working on it, so appreciate any bugs or feedback</p>",
        "id": 196191314,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588604034
    },
    {
        "content": "<p>there is test for LLDB at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/tests/all/debug/lldb.rs\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/tests/all/debug/lldb.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/tests/all/debug/lldb.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/tests/all/debug/lldb.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/tests/all/debug/lldb.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 196191522,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588604116
    },
    {
        "content": "<p>Hi, yes, I did give it a try and it just work (tm) :D<br>\nI am super happy to be honest. It is wokring out of the box on windows with CodeLLDB</p>",
        "id": 196191978,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588604297
    },
    {
        "content": "<p>In general I think the support WASMTime has for debugging is awesome, I wish this was a standard for all VMs, as it's unclear at the moment how much work would it be to include this in WAMR for ex.</p>",
        "id": 196192164,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588604380
    },
    {
        "content": "<p>There is one slight downside of this for people who run WASM outside their browser and on funky devices, debugging becomes more tricky, as for ex there's no equivalent like you have in the JS world where the debugger can remotely connect to the VM<br>\nBut this means it's on par with C++ native experience on those devices so I guess it's fine from my point of view</p>",
        "id": 196192355,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588604450
    },
    {
        "content": "<p>There seems to be issues with visualizing values captured by closures on LLDB, so not sure why that happens. That being said, i can't inspect values captured by clojures if I build as a native rust app either, so likely not an issue of wasmtime's dwarf handling</p>",
        "id": 196239536,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1588626034
    },
    {
        "content": "<p>there will be issue for variables that are locations in memory/pointer/references</p>",
        "id": 196239701,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588626123
    },
    {
        "content": "<p>there is a hack as documented at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"Utility methods for artificial debug types in the generated DWARF by yurydelendik · Pull Request #1482 · bytecodealliance/wasmtime\">Utility methods for artificial debug types in the generated DWARF by yurydelendik · Pull Request #1482 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, artificial &quot;wrapper&quot; types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function&#39;s vmctx is needed. T...</div></div></div>",
        "id": 196239867,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588626220
    }
]