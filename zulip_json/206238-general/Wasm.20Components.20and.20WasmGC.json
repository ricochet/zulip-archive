[
    {
        "content": "<p>Do you know if there is a runtime or mechanism to test Components that use Wasm GC? I'm building a toy compiler that targets both and I'd like to test the output.<br>\nLatest Firefox and Chrome support WasmGC, but no components.<br>\nThe reference interpreter <a href=\"https://github.com/WebAssembly/gc/tree/main/interpreter\">https://github.com/WebAssembly/gc/tree/main/interpreter</a> supports GC but no components.<br>\n<a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a> and wasmtime lacks support for GC.</p>\n<p>I know there is work in progress to support WasmGC on wasm-tools and wasmtime, but I'm asking here because you might know an alternative for the short term.</p>\n<p>Thanks in advance :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7a02a6d78963ab501c2e536ff644b941718d8b14\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363439636334353433616134623962653061623566356266353535613235373330343439366139646532363066356664313537303264313735323765376630392f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 400154526,
        "sender_full_name": "Lucas √Åvila",
        "timestamp": 1699024895
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/jco\">jco</a> supports components in web browsers (including Firefox and Chrome).  I haven't tried using WasmGC in a component myself, though -- I'll be interested to hear how it goes.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9d6eac95be6fdbf6a16f2fc218a2360288f37713\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333261306663666338363666323062636565643534613366623134373963343836393633306665616537383434333831373337653466643237313037623230312f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</div></div></div>",
        "id": 400155340,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699025137
    },
    {
        "content": "<p>But yeah, if <code>wasm-tools</code> won't be able to help you create such a component, you may be stuck.</p>",
        "id": 400155601,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699025205
    },
    {
        "content": "<p>I'm also not aware of anything for in the short term unfortunately. The component-related tooling I know of all goes through <code>wasm-tools</code> so that's required to get updated first.</p>",
        "id": 400162704,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1699027352
    },
    {
        "content": "<p>I would love to try <code>wasm-tools</code> with Wasm GC modules produced by Kotlin toolchain. I'm seeing some progress in GC support and wondering if there is a place to track its readiness?</p>",
        "id": 403047080,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1700423141
    },
    {
        "content": "<p>currently we don't have a tracking issue or location for all the various bits of work, fitzgen (currently on vacation) is doing most of the work at the moment and would know best</p>",
        "id": 403082877,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700449305
    },
    {
        "content": "<p>The main branch of wasm-tools is now able to parse some of the WasmGC modules produced by Kotlin toolchain <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> . Thanks fitzgen!</p>\n<p>I'm trying to set up a full pipeline for experimenting with Components and WASI Preview2, while using some library code that currently uses  Preview1 reactor ABI, and without built-in Component support in compiler. Does the following sequence make sense?</p>\n<ol>\n<li>(optional) <code>wit-bindgen</code>:  <code>world.wit</code> -&gt; <code>bindings.kt</code></li>\n<li>Compiler: <code>*.kt</code> -&gt; <code>core.wasm</code></li>\n<li>(optional) <code>wasm-tools component embed --encoding=utf16 world.wit core.wasm -o core.wasm</code></li>\n<li><code>wasm-tools component new  --adapt wasi_snapshot_preview1.reactor.wasm core.wasm -o component.wasm</code></li>\n<li><code>jco transpile component.wasm -o out-dir</code></li>\n<li>Run out-dir in Node.js</li>\n</ol>\n<p>At the step 4 I had troubles with <code>wasm-tools component new</code> not validating modules with wasm exceptions and GC.  I hacked <code>WasmFeatures::default()</code> to return <code>WasmFeatures::all()</code> to unblock myself locally and it worked! Would it make sense to add an CLI flag to skip validation or enable non-default features?</p>\n<p>I also tried to hack GC support into <code>jco transpile</code> and got bumped by <code>assertion failed: ty.is_final</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/523bc959f5264bdf94f569bfeb447632c9d1e830/crates/environ/src/module_environ.rs#L799\">wasmtime-environ</a>. I didn't know jco used wasmtime under the hood.</p>",
        "id": 411052293,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1704303319
    },
    {
        "content": "<p>yes, jco uses wasmtime-environ as the implementation of the algorithm that parses components into modules and a description of how to instantiate them</p>",
        "id": 411057481,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704305335
    },
    {
        "content": "<p>theres no wasmtime present at runtime, its just used for code generation</p>",
        "id": 411057536,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704305363
    },
    {
        "content": "<blockquote>\n<p>Would it make sense to add an CLI flag to skip validation or enable non-default features?</p>\n</blockquote>\n<p>Good find! I think it makes sense to use <code>::all()</code> there</p>",
        "id": 411060716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704306754
    },
    {
        "content": "<p>We use a trick to test components with WasmGC and jco. First, to make jco happy, we give <code>jco transpile</code> a component with a \"stub\" of the core wasm module, using Wasm 1.0 imports and unreachable-bodied exports, but no GC. Then, we swap out this transpiled stub with a real WasmGC core module and run it in Node.js. You can find the setup here:  <a href=\"https://github.com/skuzmich/kotlin-wasm-cm-experiments\">https://github.com/skuzmich/kotlin-wasm-cm-experiments</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/skuzmich/kotlin-wasm-cm-experiments\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d6723269ed97b142dc81b5b43bfecbc38e626fda\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623362333634633235376662643532613634316561663932653037393834303131366265633234613334386130313961333039366166326664633238303438622f736b757a6d6963682f6b6f746c696e2d7761736d2d636d2d6578706572696d656e7473)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/skuzmich/kotlin-wasm-cm-experiments\" title=\"GitHub - skuzmich/kotlin-wasm-cm-experiments: Experiments with running Kotlin/Wasm with Component Model\">GitHub - skuzmich/kotlin-wasm-cm-experiments: Experiments with running Kotlin/Wasm with Component Model</a></div><div class=\"message_embed_description\">Experiments with running Kotlin/Wasm with Component Model - skuzmich/kotlin-wasm-cm-experiments</div></div></div>",
        "id": 434023417,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1713439080
    }
]