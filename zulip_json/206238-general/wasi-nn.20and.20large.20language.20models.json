[
    {
        "content": "<p>Hiya! So I know next to nothing about how AI tech works, but I'm expected to understand the intersection between WASI and AI well enough to be able to explain it at a high level to my fellow colleagues.</p>\n<p>Something I'm not really clear about is the limits of the WASI-NN interface. I know right now it's mostly intended for (smaller?) inference-based workloads. But I'm wondering what the theoretical limits there are. If you had a powerful enough backend, could you use it to for large language models too? Or is that a different kind of workload that would require a different kind of interface?</p>",
        "id": 405345766,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701431687
    },
    {
        "content": "<p>(I might be confusing terms here, I'm very sorry if I have. Like I said: I don't know much about this space, and how different things relate to each other.)</p>",
        "id": 405345915,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701431759
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> </p>\n<p>(also I'll point out there's <a class=\"stream\" data-stream-id=\"266558\" href=\"/#narrow/stream/266558-wasi-nn\">#wasi-nn</a> which I can't move there myself but others might be able to)</p>",
        "id": 405381770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701443146
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"344849\">@Yoshua Wuyts</span> wasi-nn is great for \"utility inferencing\" because you pass the model into the function but that's a caching/memory size issue, clearly. There's a \"named model\" proposal that enables you to consume a handle to the larger models to enable both caching and guest modules can still be \"simple.\" ish. Andrew can provide pointers to it</p>",
        "id": 405396460,
        "sender_full_name": "Ralph",
        "timestamp": 1701447978
    },
    {
        "content": "<p>Ohh, I see</p>",
        "id": 405396904,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448151
    },
    {
        "content": "<p>So to try and explain it back to you (to make sure I understand): large models are so big that you can't just pass them as arguments into functions - you need some other way to target them (like by using a name). wasi-nn currently requires that you pass the model into the function as well, so that's why it's best served for smaller models right now</p>",
        "id": 405397084,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448215
    },
    {
        "content": "<p>Is that... roughly right?</p>",
        "id": 405397100,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448220
    },
    {
        "content": "<p>at a high level, yeah -- no one is going to re-pass substantial bytes <em>each call</em>. It's engineering insanity. So the named models thing is the way to have the models in a local cache but used from the module.</p>",
        "id": 405397714,
        "sender_full_name": "Ralph",
        "timestamp": 1701448423
    },
    {
        "content": "<p>Okay yeah that makes sense! Thank you!</p>",
        "id": 405397826,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448453
    },
    {
        "content": "<p>only other thing I'll say is that as wasi-nn sorta does both now means no one's totes happy with it -- so this area will likely as not still go through some evolution, but this works \"for now\". We need to pound on it a bit.</p>",
        "id": 405397924,
        "sender_full_name": "Ralph",
        "timestamp": 1701448483
    },
    {
        "content": "<p>Yeah that makes sense. This all sounds like <code>wasi-nn</code> has a forward path to supporting more complex / intensive models in the future as well (via \"named models\"). Rather than that being completely out of scope or being categorically different in some way.</p>",
        "id": 405398543,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448677
    },
    {
        "content": "<p>It feels like the answer is: \"we'll figure out a way to support that eventually\", and already have a sense for what it would take.</p>",
        "id": 405398620,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448691
    },
    {
        "content": "<p>With inference models being the niche we're initially starting off with (which makes sense to me!)</p>",
        "id": 405398687,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448716
    },
    {
        "content": "<p>named models will support that today (I think that has been merged, but Andrew will know). The larger forward motion is whether we should revamp and/or separate wasi-nn into different capabilities. So it'll work for both cases for now; evolution is another issue.</p>",
        "id": 405398995,
        "sender_full_name": "Ralph",
        "timestamp": 1701448808
    },
    {
        "content": "<p>Ahhh, okay! I see!</p>",
        "id": 405399066,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448830
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 405399099,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1701448841
    },
    {
        "content": "<p>Hi Yoshua, did not see this thread earlier. In theory, the current spec of wasi-nn supports all neural network models including LLM, as eventaully the inputs to those models are in the tensor form of [batch, sequence, features]. However, usability may be an issue depending on your use cases. Some implementations of wasi-nn provide additional SDK utilites for helping with data preprocessing, such as converting images, natural languages into tensors. As for the size of models, this needs to be done only once, either by caching or named models on the server.</p>",
        "id": 407602813,
        "sender_full_name": "Mingqiu Sun",
        "timestamp": 1702430080
    }
]