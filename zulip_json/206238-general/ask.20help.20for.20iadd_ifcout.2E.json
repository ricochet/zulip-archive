[
    {
        "content": "<p><a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.iadd_ifcout\">https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.iadd_ifcout</a></p>\n<p>I thinking iadd_ifcout should be implment as \"overflowing_add\".<br>\n<a href=\"https://godbolt.org/z/7Mx5Mq4Y7\">https://godbolt.org/z/7Mx5Mq4Y7</a><br>\nis this right?</p>\n<p>my second question is how come c_out can be test with intcc.<br>\nc_out be a bool value only have two value,true and false.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/7Mx5Mq4Y7\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bf336f7597f851df0732b12f8d4b7b383508ec8\\/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/7Mx5Mq4Y7\" title=\"Compiler Explorer - Rust (rustc 1.62.0)\">Compiler Explorer - Rust (rustc 1.62.0)</a></div><div class=\"message_embed_description\">pub fn add(a: i8, b: i8) -&gt; (i8, bool) {\n    a.overflowing_add(b)\n}</div></div></div>",
        "id": 289264376,
        "sender_full_name": "yang yu",
        "timestamp": 1657583964
    },
    {
        "content": "<p>the output <code>a</code> is the overflowed value and the output <code>cout</code> is whether overflow happened or not</p>",
        "id": 289265787,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1657585387
    },
    {
        "content": "<p>where is the intcc used?? <br>\ndo you mean in this case intcc can only be overflow or nof, no other intcc value is valid.</p>",
        "id": 289266410,
        "sender_full_name": "yang yu",
        "timestamp": 1657586111
    },
    {
        "content": "<blockquote>\n<p>my second question is how come c_out can be test with intcc.<br>\nc_out be a bool value only have two value,true and false.</p>\n</blockquote>\n<p>We have 2 variations of this instruction <code>iadd_cout</code> and <code>iadd_ifcout</code>. </p>\n<p><code>iadd_cout</code> works exactly as you describe, by returning the integer and a bool representing whether overflowed has occured or not.</p>\n<p><code>iadd_ifcout</code> is slightly different in that it returns a cpuflags type. which must be tested with intcc or used in one of the flags branching instructions. </p>\n<p>This second instruction relies on some mechanisms from cranelift that guarantee that the flags register won't be changed between this <code>iadd_ifcout</code> and the following <code>brif</code> / <code>intcc</code> / etc.. </p>\n<p>However given that RISCV doesn't have a integer flags register, I'm not sure we can implement this without for example pattern matching both a <code>brif</code> + <code>iadd_ifcout</code> or something similar. (And I'm not sure that is the best way to go about this.)</p>",
        "id": 289445070,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1657712138
    },
    {
        "content": "<p>There was some discussion about removing flags values a while ago. See:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/issues/3249\">https://github.com/bytecodealliance/wasmtime/issues/3249</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3249\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/db8c6cd5c7097f5c7a95d30c2e6090989de07cf2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363732373162343435363435623635376137343536353036643336623039336166333236356466623136653361356234336631373137333436323535343362622f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33323439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3249\" title=\"Cranelift: simplify opcode set by removing &quot;flags&quot; values and producers/consumers · Issue #3249 · bytecodealliance/wasmtime\">Cranelift: simplify opcode set by removing \"flags\" values and producers/consumers · Issue #3249 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In #3233 we discussed various simplifications we could perform to reduce the number of CLIF opcodes that exist. In general, we should strive for simplicity -- fewer opcodes mean less cost for every...</div></div></div>",
        "id": 289445253,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1657712274
    },
    {
        "content": "<p>ok,thanks.</p>",
        "id": 289536523,
        "sender_full_name": "yang yu",
        "timestamp": 1657757195
    },
    {
        "content": "<p>riscv64 can't lower iadd_ifcout right now , because riscv has no iflags register.<br>\n<a href=\"https://docs.rs/cranelift/latest/cranelift/prelude/types/constant.IFLAGS.html\">https://docs.rs/cranelift/latest/cranelift/prelude/types/constant.IFLAGS.html</a><br>\nI can lower where it's used like this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">trapif</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd_ifcout_parameters</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">trap_code</span><span class=\"w\"> </span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"n\">InstOutput</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower_iadd_overflow</span><span class=\"w\">  </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">inst_output_get</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">side_effect</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SideEffectNoResult</span><span class=\"p\">.</span><span class=\"n\">Inst</span><span class=\"p\">(</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"n\">TrapIf</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">trap_code</span><span class=\"w\"> </span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but I can't sink the inst as it's lowered.  I tried to call sink_inst but rightnow we can't sink a inst that have side effect.</p>",
        "id": 293648283,
        "sender_full_name": "yang yu",
        "timestamp": 1660616258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466261\">@yang yu</span> it might be helpful to look at what other backends do for iadd_ifcount. For example, in the x64 backend <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/lower.isle#L149\">here</a>, we return the add result, and an <code>invalid_reg</code>. This is because flags are not represented at the virtual-register level in VCode. Instead, instructions that consume flags have patterns that match the combination directly: for example, <code>trapif</code> using the flags result of <code>iadd_ifcout</code> has a pattern for <code>(trapif (iadd_ifcout ...))</code>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/lower.isle#L1437\">here</a> for x64.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/lower.isle#L149\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c3c14befb04e26c6785adaeb36022e0183f14272\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363536656334393236663235316630303234303730633232303937633336343032336336393832303839643435646536353965366162303034613539323965332f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/lower.isle#L149\" title=\"wasmtime/lower.isle at 0f944937c0c3d90946eaa6199f0baa5ed991c80d · bytecodealliance/wasmtime\">wasmtime/lower.isle at 0f944937c0c3d90946eaa6199f0baa5ed991c80d · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/lower.isle#L1437\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c3c14befb04e26c6785adaeb36022e0183f14272\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363536656334393236663235316630303234303730633232303937633336343032336336393832303839643435646536353965366162303034613539323965332f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/lower.isle#L1437\" title=\"wasmtime/lower.isle at 0f944937c0c3d90946eaa6199f0baa5ed991c80d · bytecodealliance/wasmtime\">wasmtime/lower.isle at 0f944937c0c3d90946eaa6199f0baa5ed991c80d · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 293658871,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660629076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> but riscv have no iflags register , I think I still need compute overflow at trapif lowering point.<br>\nI can lowering <code>iadd_ifcout</code> just like other platforms.</p>",
        "id": 293835718,
        "sender_full_name": "yang yu",
        "timestamp": 1660712363
    },
    {
        "content": "<p>yes, exactly, you'll need to compute overflow somehow; that's needed to implement the semantics of trap-on-overflow</p>",
        "id": 293927243,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660752325
    },
    {
        "content": "<p>probably a compare instruction would do it?</p>",
        "id": 293927267,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660752333
    },
    {
        "content": "<p>according to the book \"Hacker's Delight\" by Henry S. Warren, Jr, I think <code>not(x) &lt; y</code> (with unsigned comparison) is the simplest way.</p>",
        "id": 293932655,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1660754068
    },
    {
        "content": "<p>actually maybe it's better to reuse the result of the addition: <code>x + y &lt; x</code></p>",
        "id": 293933187,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1660754226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> it seems a little hard to reuse the result.</p>",
        "id": 293995708,
        "sender_full_name": "yang yu",
        "timestamp": 1660780026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>   is it true that a trap_if  take an 'iadd_ifcout' as input , then intcc is not used?<br>\nand the add is a unsigned add??</p>",
        "id": 295162057,
        "sender_full_name": "yang yu",
        "timestamp": 1661403692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466261\">@yang yu</span> the flags are still used; the <code>cout</code> (\"carry out\") is a bit of an incorrect name, really it should just produce flags from the addition in general</p>",
        "id": 295162438,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661403990
    },
    {
        "content": "<p>see here where x64 pattern-matches on <code>(trapif (iadd_ifcout ...))</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/x64/lower.isle#L1420\">https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/x64/lower.isle#L1420</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/x64/lower.isle#L1420\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/318d1f3c47b1f60df4bfca4032ff1c444e615421\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666237663630306437323730376264653061393438353766336534613161333738306462326162313536393639343036323037393030353961353133353162362f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/x64/lower.isle#L1420\" title=\"wasmtime/lower.isle at d3c463aac05e9ee3fd19450b3f035c47b9e55616 · bytecodealliance/wasmtime\">wasmtime/lower.isle at d3c463aac05e9ee3fd19450b3f035c47b9e55616 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 295162469,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661404003
    },
    {
        "content": "<p>in practice the opcode is used to test for overflow on addition, and this condition code, which is returned by an ISA-specific function, is used to test for overflow from the add: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/mod.rs#L249\">https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/mod.rs#L249</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/mod.rs#L249\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/318d1f3c47b1f60df4bfca4032ff1c444e615421\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666237663630306437323730376264653061393438353766336534613161333738306462326162313536393639343036323037393030353961353133353162362f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d3c463aac05e9ee3fd19450b3f035c47b9e55616/cranelift/codegen/src/isa/mod.rs#L249\" title=\"wasmtime/mod.rs at d3c463aac05e9ee3fd19450b3f035c47b9e55616 · bytecodealliance/wasmtime\">wasmtime/mod.rs at d3c463aac05e9ee3fd19450b3f035c47b9e55616 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 295162560,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661404076
    },
    {
        "content": "<p>so to summarize: <code>(trapif cc (iadd_ifcout a b))</code>, where <code>cc</code> is the condition code returned by the trait method above, should trap if the <code>iadd</code> does an unsigned add overflow</p>",
        "id": 295162619,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661404117
    },
    {
        "content": "<p>hope that helps!</p>",
        "id": 295162626,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661404126
    },
    {
        "content": "<p>I thinks I kind of understand it now.<br>\n<a href=\"/user_uploads/15107/tqh2Jo-0ikZY3Jk7w5746FIB/image.png\">image.png</a> <br>\nthis is from s390x backend ,  I think s390x and risc-v in the same situation.<br>\ncan't use intcc to express overflow.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/tqh2Jo-0ikZY3Jk7w5746FIB/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/tqh2Jo-0ikZY3Jk7w5746FIB/image.png\"></a></div>",
        "id": 295163632,
        "sender_full_name": "yang yu",
        "timestamp": 1661404943
    },
    {
        "content": "<p>yup, exactly, s390x is the same here</p>",
        "id": 295167689,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661407790
    }
]