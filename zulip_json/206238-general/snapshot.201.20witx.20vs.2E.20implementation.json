[
    {
        "content": "<p>The <a href=\"https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/witx/wasi_snapshot_preview1.witx\" title=\"https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/witx/wasi_snapshot_preview1.witx\">snapshot 1 spec</a> says <code>fd_write</code> has 2 parameters: <code>(fd $fd, iovs $ciovec_array)</code> and 2 results: <code>($error $errno, $nwritten, $size)</code>. However, when looking at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\" title=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\">this tutorial</a>, the <code>fd_write</code> is called with 4 parameters and has 1 return value (the number of bytes written). I'm a bit confused by what is going on. Does someone have some insight?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/witx/wasi_snapshot_preview1.witx\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/witx/wasi_snapshot_preview1.witx\" title=\"WebAssembly/WASI\">WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/docs/WASI-tutorial.md\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 194459708,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1587138052
    },
    {
        "content": "<p>The tutorial uses <code>wasi_unstable</code>, not <code>wasi_snapshot_preview1</code>.</p>",
        "id": 194459969,
        "sender_full_name": "bjorn3",
        "timestamp": 1587138169
    },
    {
        "content": "<p>I changed the import value to <code>wasi_snapshot_preview1</code> and the tutorial code still worked.</p>",
        "id": 194460354,
        "sender_full_name": "Vedant Roy",
        "timestamp": 1587138351
    },
    {
        "content": "<p>The witx description has multiple results. Since MVP-level wasm doesn't support multiple return values, when witx is translated into Rust or C bindings, result values after the first one are translated into pointer parameters to store the output in.</p>",
        "id": 194460863,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1587138570
    },
    {
        "content": "<p>And, the signature for <code>fd_write</code> includes an array (the iovec array). When translated into a C interface, this is exposed as two parameters, a pointer and a length.</p>",
        "id": 194461108,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1587138651
    },
    {
        "content": "<p>At the wasm level, arrays appear as two parameters as well.</p>",
        "id": 194461299,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1587138731
    }
]