[
    {
        "content": "<p>Hello,</p>\n<p>I have a project where I integrated both WASMTime and now working on adding WAMR as well. I need both for ... reasons <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>. <br>\nThat being said, it seems that WAMR has a similar but not identical API with WASMTIME.<br>\nMore specifically, adding import functions to WAMR is not really supported in the same way. I can create a <code>wasm_func_t</code> from the imports of a module that's bound to my native function, but then it's unclear how to link this to a WAMR module.</p>\n<p>Is <code>wasm_register_natives</code> the only way we can register imports after instantiation?</p>\n<p>I tried adding the fucntions as externs to: <code>wasm_instance_new</code>, but this is expecting that the module imports list is identical with the <code>imports</code> parameter. For a module that's using WASI as well as custom methods this is impossible <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 240165221,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1621936884
    },
    {
        "content": "<p>For reference, I will add some information here about linking in WAMR as it is different than in other VMs:<br>\n1) WAMR allows missing imports in a wasm module (this is actually a nice feature).<br>\n2) <code>wasm_runtime_register_natives_raw</code> or without the <code>raw</code> is the way to add functions that are searched at link time. <strong>Be sure to call this before module initialization</strong>.  This method doesn't need <code>wasm_extern_t*</code> so that's nice.</p>",
        "id": 240259448,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1621982596
    },
    {
        "content": "<p>WAMR supports <em>two kinds</em> of linkage. The <em>WASM-C-API</em> way and a WAMR private <em>runtime linking</em>. It is better not to use them mixed.</p>\n<p>WAMR renames the header of <em>WASM-C-API</em> as <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/include/wasm_c_api.h\">wasm_c_api.h</a>. What WARM did in Envoy is a reference for that: <a href=\"https://github.com/proxy-wasm/proxy-wasm-cpp-host/blob/21af4d73b529ce5cee6c5a4b5e83db3f54b518f4/src/wamr/wamr.cc#L208\">Wamr::link</a>.</p>\n<p>If we called the <em>WASM-C-API</em> linkage manually, <em>WARM private runtime linking</em> is automatic. <em>WARM</em> will search all imports in the user-provided <em>search path</em> with module names and imported item names. There is an example <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/multi-module\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/include/wasm_c_api.h\" style=\"background-image: url(https://opengraph.githubassets.com/3c245137b70b94a0184f9009da33b398e24655b300a5c52f67e59e451b7b3add/bytecodealliance/wasm-micro-runtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/include/wasm_c_api.h\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/proxy-wasm/proxy-wasm-cpp-host/blob/21af4d73b529ce5cee6c5a4b5e83db3f54b518f4/src/wamr/wamr.cc#L208\" style=\"background-image: url(https://opengraph.githubassets.com/18d790f67f7311c39edeb29d4234a5157ad6d0435cf04f116975edbcf3524b76/proxy-wasm/proxy-wasm-cpp-host)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/proxy-wasm/proxy-wasm-cpp-host/blob/21af4d73b529ce5cee6c5a4b5e83db3f54b518f4/src/wamr/wamr.cc#L208\" title=\"proxy-wasm/proxy-wasm-cpp-host\">proxy-wasm/proxy-wasm-cpp-host</a></div><div class=\"message_embed_description\">WebAssembly for Proxies (C++ host implementation). Contribute to proxy-wasm/proxy-wasm-cpp-host development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/multi-module\" style=\"background-image: url(https://opengraph.githubassets.com/3c245137b70b94a0184f9009da33b398e24655b300a5c52f67e59e451b7b3add/bytecodealliance/wasm-micro-runtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/multi-module\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 240271048,
        "sender_full_name": "lum1n0us",
        "timestamp": 1621993828
    },
    {
        "content": "<p>Thank you, i ended up getting what. i want from it eventually. The thing that confused me is that this <code>wasm_c_api</code> and <code>wasm_export.h</code> look so close to what wasmtime has, that it has confused me. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 240299089,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1622021877
    }
]