[
    {
        "content": "<p>Is there any way we can use the wasmtime profiler together with <a href=\"https://github.com/tikv/pprof-rs\">https://github.com/tikv/pprof-rs</a> ? The problem is that I am using the Rust API and directly calling <code>perf</code> cannot only profile some parts of the code. pprof-rs has that function but it seems we cannot use them together.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tikv/pprof-rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b934e44fab9e1ecda52505232812b0d65e34fbfc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383931343063643830633035393036376238343965373930636535623365353265623438316262353861376339393061353533373930353133393734343830392f74696b762f7070726f662d7273&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tikv/pprof-rs\" title=\"GitHub - tikv/pprof-rs: A Rust CPU profiler implemented with the help of backtrace-rs\">GitHub - tikv/pprof-rs: A Rust CPU profiler implemented with the help of backtrace-rs</a></div><div class=\"message_embed_description\">A Rust CPU profiler implemented with the help of backtrace-rs - tikv/pprof-rs</div></div></div>",
        "id": 471938354,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1726923636
    },
    {
        "content": "<p>Perf allows jit engines to create a file with all debuginfo and then when processing the profile it will read this jit engine generated file to handle the debuginfo for the code generated by the jit engine. It seems that pprof doesn't support reading this file.</p>",
        "id": 471939098,
        "sender_full_name": "bjorn3",
        "timestamp": 1726924167
    },
    {
        "content": "<p>A bit of a hack, but maybe launching <code>perf record -p $your_own_pid</code> from within your program right before the point where you want to start recording and killing it when you want to stop recording would work? You probably need to add a sleep of a couple of ms after the starting perf to account for the time it takes for perf to initialize and starts creating a profile.</p>",
        "id": 471939572,
        "sender_full_name": "bjorn3",
        "timestamp": 1726924489
    },
    {
        "content": "<p>Also make sure to use either <code>config.profiler(ProfilingStrategy::PerfMap)</code> or <code>config.profiler(ProfilingStrategy::JitDump)</code> to generate the aformentioned debuginfo file. The <code>PerfMap</code> option produces smaller files, but only includes function names, while the <code>JitDump</code> option produces larger files, but includes a lot more debuginfo (including line info I believe) and requires you to run <code>perf inject --jit</code> on the profile file to merge the jitdump file into the profile file.</p>",
        "id": 471939778,
        "sender_full_name": "bjorn3",
        "timestamp": 1726924641
    },
    {
        "content": "<p>Thanks a lot! I grouped the wasm function calls I want to profile inside a function so I can view them in flamegraph inside that function stack. A similar hack :)</p>",
        "id": 471943132,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1726926963
    },
    {
        "content": "<p>I'm not familiar with pprof-rs itself but it looks like to integrate with that directly it would require walking the stack from a signal handler. In theory the DWARF that Wasmtime emits for Cranelift-generated code supports this because we use frame pointers for all functions and otherwise only have to describe the prologue (which I think we do correctly). In that sense in theory it should work (so long as <code>backtrace</code> works from a signal handler, which I thought it didn't...). </p>\n<p>By default though if you're just using dwarf unwind tables for jit code you probably won't have good symbols for cranelift-generated code, so if profile collection works you'd likely still need to perform a postprocessing step to symbolicate what was found in cranelift. That's something that we don't provide many APIs for today (e.g. the <code>Module</code> type can't be used for that) but there's no reason we couldn't add more support for that since Wasmtime already does it internally</p>",
        "id": 471951381,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726932860
    }
]