[
    {
        "content": "<p>Hi all, I tried to find in the github documentation the reason wasmtime was developed compared to using WAMR. Both seem to be developed by bytecodealliance, so I was expecting some documentation to help one choose between both. The only thing I can think of is that wasmtime makes it safer to use from Rust and should thus be preferred when embedding in Rust. But that's just a guess. Is there an official position regarding how to decide between wasmtime and WAMR? (e.g. regarding running on micro-controllers, APIs, etc)</p>",
        "id": 279531977,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1650455559
    },
    {
        "content": "<p>As I remember from last looking at it, WasmTime is AOT-only, so that may be a blocker for many of these IOT-like devices. It doesn't have an \"interpreted\" mode. You also need to be able to compile rust to your target architecture that may or may not be an issue depending on what's targeted. WAMR is in C, albeit a relatively newer C standard (C 11) but still probably more friendly if we're talking about these IOT-type of targets.</p>",
        "id": 279541055,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1650460284
    },
    {
        "content": "<p>Wasmtime can operate as both an AOT and a JIT compiling runtime, but you are right that there is no interpreter.</p>",
        "id": 279553409,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1650466265
    },
    {
        "content": "<p>I see, but those are suggesting that WAMR should be preferred over Wasmtime. What I'm curious about is why develop Wasmtime when WAMR already exists? Is it only to have a memory-safe alternative? Or are there some technical reasons too?</p>",
        "id": 279558254,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1650468176
    },
    {
        "content": "<p>It's hard to say a generic recommendation for what should be preferred. It depends on the systems targeted and use-cases. <br>\nFor example, for wasmtime, there are some advantages when integrating with existing rust projects, in addition to the features it has (JIT/AOT).<br>\nWAMR has advantages when it is targeted basically at a different set of devices, more geared towards IOT-space or places where you already have a C++ project where it may be easier to integrate with this VM</p>",
        "id": 279559098,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1650468537
    },
    {
        "content": "<p>What we did, is we have an integration with both <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. And for a long time we used Wasmtime for debugging capabilities, and WAMR to deploy on devices. The APIs are quite similar so integrating with both wasn't that much of an effort.</p>",
        "id": 279559335,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1650468620
    },
    {
        "content": "<p>Interesting, thanks for the input!</p>",
        "id": 279560593,
        "sender_full_name": "Julien Cretin (ia0)",
        "timestamp": 1650469115
    }
]