[
    {
        "content": "<p>Hey folks, I'm trying to write a transpiler in Rust for a custom C-like programming language that would either translate from the source language's text format to a <code>.wat</code> or WASM bytecode format (<code>.wat</code> would be easier for me to debug I think). Is there a recommended crate/library that provides high-level functions for such a task? I'm looking for something that provides utility functions like say:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"p\">.</span><span class=\"n\">define_func</span><span class=\"p\">(</span><span class=\"s\">\"add\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">ParamType</span>::<span class=\"n\">ConstI32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ParamType</span>::<span class=\"n\">ConstI32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">ResultType</span>::<span class=\"n\">ConstI32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">ops</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Local</span>::<span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">ops</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">Local</span>::<span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">ops</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">I32</span>::<span class=\"n\">Add</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which would generate:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 290953248,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1658868054
    },
    {
        "content": "<p><a href=\"https://docs.rs/wasm-encoder/latest/wasm_encoder/\">https://docs.rs/wasm-encoder/latest/wasm_encoder/</a> has an API which is very close to that.</p>",
        "id": 290953529,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1658868217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> thank you! This appears to be exactly what I need.</p>",
        "id": 290953670,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1658868310
    },
    {
        "content": "<p><code>wasm-encoder</code> encodes to the binary format, but you can also use <code>wasmprinter</code> from that same repro to print the text format from the output of <code>wasm-encoder</code></p>",
        "id": 290953985,
        "sender_full_name": "Peter Huene",
        "timestamp": 1658868475
    },
    {
        "content": "<p>Just to make sure I'm not reinventing the wheel, there isn't something higher-level that let's me translate imperative language constructs and have it do the hard work for me is there? I came across this whistle-lang compiler which actually looks pretty good: <a href=\"https://github.com/whistle-lang/whistle/tree/main/compiler\">https://github.com/whistle-lang/whistle/tree/main/compiler</a></p>\n<p>(I understand I can't get everything for free, but path of least resistance etc. :p )</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/whistle-lang/whistle/tree/main/compiler\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7d9fd351d25511a03dd305c673e808f2c8cea09c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343361373030396439623339316137306137343538626631623265353339336132363031356239646162343333323661323563393864323537346331613161372f77686973746c652d6c616e672f77686973746c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/whistle-lang/whistle/tree/main/compiler\" title=\"whistle/compiler at main Â· whistle-lang/whistle\">whistle/compiler at main Â· whistle-lang/whistle</a></div><div class=\"message_embed_description\">ðŸ•´ One hella programming language. Contribute to whistle-lang/whistle development by creating an account on GitHub.</div></div></div>",
        "id": 290975324,
        "sender_full_name": "Lander Brandt",
        "timestamp": 1658884060
    },
    {
        "content": "<p>I'm personally not familiar with any.</p>",
        "id": 290991450,
        "sender_full_name": "Peter Huene",
        "timestamp": 1658901136
    }
]