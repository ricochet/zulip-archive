[
    {
        "content": "<p>Cheers!</p>\n<p>I am the author of <a href=\"https://github.com/tessi/wasmex\">an Elixir package to execute WASM/WASI</a>. It is currently based on wasmer, <a href=\"https://github.com/tessi/wasmex/issues/336#issuecomment-1270404786\">but I'm working on a port to wasmtime</a>. It's working great so far, I'm just missing one feature: I wish to preopen directories for WASI with custom capabilities. As far as I know, the WasiCtxBuilder currently <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b454110ac7fa027150e020cb2db1bb363a90061b/crates/wasi-common/src/ctx.rs#L106\">assumes that any preopened directory gets all dir/file capabilities</a>. However, I want to be able to specify that e.g. a directory is read-only.</p>\n<p>The change needed to implement this seems to be quite small as the fundamentals are in place already. (see <a href=\"https://github.com/tessi/wasmtime/commit/c45b3d2e299f62e06aa4b5facc9c68b860ff55fb\">https://github.com/tessi/wasmtime/commit/c45b3d2e299f62e06aa4b5facc9c68b860ff55fb</a>). I would very much love to contribute my patch back to mainline wasmtime. Is there interest in this feature? Or should I solve this some other way instead - maybe I missed some obvious feature? If there is interest, is it just opening a PR and writing some tests or is there more to take care of?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tessi/wasmex\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8954a70e59e6e73ebd6f98f37cf298b3d917e720\\/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3233343036323638392f34386662663238302d386165302d313165612d386633632d356461656538653432356231)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tessi/wasmex\" title=\"GitHub - tessi/wasmex: Execute WebAssembly / WASM from Elixir\">GitHub - tessi/wasmex: Execute WebAssembly / WASM from Elixir</a></div><div class=\"message_embed_description\">Execute WebAssembly / WASM from Elixir. Contribute to tessi/wasmex development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tessi/wasmex/issues/336#issuecomment-1270404786\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/513dbe501dc0d3e0de6e2496b122c1e2b3aef7a6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666563303036336338313637353639613463343834393230393265383964613733646566356434343834643963326436316561326331636263326137373933342f74657373692f7761736d65782f6973737565732f333336)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tessi/wasmex/issues/336#issuecomment-1270404786\" title=\"Underlying Wasm runtime, wasmer -&gt; wasmtime · Issue #336 · tessi/wasmex\">Underlying Wasm runtime, wasmer -&gt; wasmtime · Issue #336 · tessi/wasmex</a></div><div class=\"message_embed_description\">Slightly related to #282 So wasmer is the underlying runtime at the moment for wasmex, would you consider switching the underlying runtime of this project to wasmtime like https://github.com/viniar...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/b454110ac7fa027150e020cb2db1bb363a90061b/crates/wasi-common/src/ctx.rs#L106\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5684ba9d0b4dd3943a2794e23bd02c6f25403182\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633563396639336165666165343231313137396463353961353565613932326637373964373332383439663762613139346463333061633735666263353534392f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b454110ac7fa027150e020cb2db1bb363a90061b/crates/wasi-common/src/ctx.rs#L106\" title=\"wasmtime/ctx.rs at b454110ac7fa027150e020cb2db1bb363a90061b · bytecodealliance/wasmtime\">wasmtime/ctx.rs at b454110ac7fa027150e020cb2db1bb363a90061b · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tessi/wasmtime/commit/c45b3d2e299f62e06aa4b5facc9c68b860ff55fb\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d847af178dbf09e6be42ad0be1a8f35fe0cbadc3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646130626533663366626139346135373061363135663130343034376566353736396237336666346630373136656364626433646663383937326131313061652f74657373692f7761736d74696d652f636f6d6d69742f63343562336432653239396636326530366161346235666163633963363862383630666635356662)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tessi/wasmtime/commit/c45b3d2e299f62e06aa4b5facc9c68b860ff55fb\" title=\"preopen WASI dirs with file/dir capabilities · tessi/wasmtime@c45b3d2\">preopen WASI dirs with file/dir capabilities · tessi/wasmtime@c45b3d2</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to tessi/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 302703055,
        "sender_full_name": "tessi",
        "timestamp": 1665076834
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> we would use this where currently we're mutating the <code>WasiCtx</code> after building it</p>",
        "id": 302703784,
        "sender_full_name": "Lann Martin",
        "timestamp": 1665077085
    },
    {
        "content": "<p>Wasi is removing the rights system entirely. See <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4666\">https://github.com/bytecodealliance/wasmtime/pull/4666</a> and <a href=\"https://github.com/WebAssembly/wasi-libc/pull/294\">https://github.com/WebAssembly/wasi-libc/pull/294</a>. In any case I believe you can inline the definition of <code>push_preopened_dir</code> and change the <code>DirCaps</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/4666\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/da70fb984603d72d1b094708449961da08897629\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363834353264383133316632653261393034623432376263323130616233666465373832633061316262333531666439383930663939363634646530373437312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f34363636)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4666\" title=\"Stop returning `NOTCAPABLE` errors from WASI calls. by sunfishcode · Pull Request #4666 · bytecodealliance/wasmtime\">Stop returning `NOTCAPABLE` errors from WASI calls. by sunfishcode · Pull Request #4666 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">ENOTCAPABLE was an error code that is used as part of the rights\nsystem, from CloudABI. There is a set of flags associated with each file\ndescriptor listing which operations can be performed with t...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/pull/294\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cd0f176c7995fa5d6c27eee9fea37e91e810ae67\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613462366332356631396634333564336462336438336637313163643564653339333063326538396538336366383461376231303363376363613938653231392f576562417373656d626c792f776173692d6c6962632f70756c6c2f323934)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/pull/294\" title=\"Delete several blocks of unused code. by sunfishcode · Pull Request #294 · WebAssembly/wasi-libc\">Delete several blocks of unused code. by sunfishcode · Pull Request #294 · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">Delete several pieces of code from libc-bottom-half/cloudlibc that aren't in\nuse on wasi-libc.</div></div></div>",
        "id": 302703993,
        "sender_full_name": "bjorn3",
        "timestamp": 1665077156
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/WASI.20preopen.20directories.20with.20capabilities/near/302703993\">said</a>:</p>\n<blockquote>\n<p>In any case I believe you can inline the definition of <code>push_preopened_dir</code> and change the <code>DirCaps</code>.</p>\n</blockquote>\n<p>Not exactly; it uses <code>DirEntry</code> which is a private struct. You can get the same effect with <code>WasiCtx::insert_dir</code> but it requires understanding more of the preopened dir internals.</p>",
        "id": 302704227,
        "sender_full_name": "Lann Martin",
        "timestamp": 1665077207
    },
    {
        "content": "<p>Right</p>",
        "id": 302704570,
        "sender_full_name": "bjorn3",
        "timestamp": 1665077325
    },
    {
        "content": "<p>Is anyone working on a wasi vfs that could be used to emulate capabilities?</p>",
        "id": 302704856,
        "sender_full_name": "Lann Martin",
        "timestamp": 1665077433
    },
    {
        "content": "<p>No clue</p>",
        "id": 302704957,
        "sender_full_name": "bjorn3",
        "timestamp": 1665077464
    },
    {
        "content": "<p>I am working in this space, but am in a meeting at the moment</p>",
        "id": 302705121,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1665077521
    },
    {
        "content": "<p>thanks a ton for your input  <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span>️. I'm curious on the WASI fs capability story. Will have a look at the provided links and hints once I put my daughter to bed</p>",
        "id": 302708102,
        "sender_full_name": "tessi",
        "timestamp": 1665078577
    },
    {
        "content": "<p>Hi! So, readonly directories is definitely something we want to support. The \"rights\" system could in theory be used to do that, but it's a very complex and obscure system that makes many use cases more complex without adding value. It rarely gets used for anything other than setting up readonly directories. So at the WASI standards level, the next version of WASI has removed the \"rights\" system, with the idea that implementations, such as Wasmtime, can add their own flags to mark directories as readonly.</p>",
        "id": 302709679,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1665079075
    },
    {
        "content": "<p>hmm, this probably means I have to accept that all preopened dirs are open for the moment. Since any potential change I could implement by manipulating todays DirCaps or FileCaps would be removed soon, right? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I rather introduce a breaking change to my users now (wasmer supports read/write/create flags - I have to drop that support without replacement) than having two breaking changes in quick succession (use some obscure DirCaps/FileCaps workaround now, do the real thing later).</p>\n<p>Even if it's not the news I want to hear, I'm really glad for all your swift and nice answers. It prevented me from sinking time into a solution that would be abandoned. Thanks!</p>\n<p>Is there a place/page/blog/repo I could follow for updates on wasmtimes FS story?</p>",
        "id": 302725068,
        "sender_full_name": "tessi",
        "timestamp": 1665084339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"542967\">tessi</span> has marked this topic as resolved.</p>",
        "id": 303225159,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665393873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"542967\">@tessi</span> this was only recently mentioned in the WASI subgroup meeting for what is in scope for <a href=\"https://github.com/WebAssembly/meetings/blob/main/wasi/2022/presentations/2022-06-30-gohman-wasi-preview2.pdf\">wasi-preview-2</a>.  For wasmtime-fs story, it's bundled in with work for wasi preview 2. The best place to track that work is this <a href=\"https://github.com/orgs/bytecodealliance/projects/6\">project tracker</a>. The issue to follow for wasmtime fs support is <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4273\">#4273</a></p>\n<p>With all of that said, I don't think we'll have an answer for what you're looking for in the short-term.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/meetings/blob/main/wasi/2022/presentations/2022-06-30-gohman-wasi-preview2.pdf\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0a5f360767fe52845eb9006e680398f205a8a4e4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303463626639663165663835336564646138633663636262396535653238613031333332616334356135613639393933646663623564643065653861333266612f576562417373656d626c792f6d656574696e6773)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/meetings/blob/main/wasi/2022/presentations/2022-06-30-gohman-wasi-preview2.pdf\" title=\"meetings/2022-06-30-gohman-wasi-preview2.pdf at main · WebAssembly/meetings\">meetings/2022-06-30-gohman-wasi-preview2.pdf at main · WebAssembly/meetings</a></div><div class=\"message_embed_description\">WebAssembly meetings (VC or in-person), agendas, and notes - meetings/2022-06-30-gohman-wasi-preview2.pdf at main · WebAssembly/meetings</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/6\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5ce2a01c3fe27d4bc753d1525377bb941d733be2\\/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/6\" title=\"WASI Preview2 Tracking • bytecodealliance\">WASI Preview2 Tracking • bytecodealliance</a></div><div class=\"message_embed_description\">WASI Preview2 Tracking</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4273\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/18c33ad614856f3ca8efaea7e51b48deb99233ab\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386333633430303734373165333435346238386433666564313632363533656333396666633137646632653335323637303936393032363434376334366365612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34323733)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4273\" title=\"Implement wasi-filesystem in Wasmtime · Issue #4273 · bytecodealliance/wasmtime\">Implement wasi-filesystem in Wasmtime · Issue #4273 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">WebAssembly/wasi-filesystem#48</div></div></div>",
        "id": 303338772,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1665444953
    },
    {
        "content": "<p>Thanks a ton Bailey! This really helps me out following the news :)</p>",
        "id": 303390616,
        "sender_full_name": "tessi",
        "timestamp": 1665480785
    }
]