[
    {
        "content": "<p>More of a general question, though I'm probably overlooking stuff. I've seen <a href=\"https://github.com/sunfishcode/hello-wasi-http\">https://github.com/sunfishcode/hello-wasi-http</a>, but was instead looking for examples that focus on outgoing requests made from the host. I came across <a href=\"https://github.com/smithy-lang/smithy-rs/pull/2520\">https://github.com/smithy-lang/smithy-rs/pull/2520</a>, but wasn't sure what the state of that was. We embed wasmtime within our runtime, so any examples demonstrating working with the preview2 bindings would be great as well. Thanks all.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/hello-wasi-http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b7acb358b56200e04beedb2ef46aaa889b4fe99b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393062346462353337633061316266653930366634373939323636653564353833663536373063653862376630656531303064616236306236303866313530332f73756e66697368636f64652f68656c6c6f2d776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/hello-wasi-http\" title=\"GitHub - sunfishcode/hello-wasi-http\">GitHub - sunfishcode/hello-wasi-http</a></div><div class=\"message_embed_description\">Contribute to sunfishcode/hello-wasi-http development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/smithy-lang/smithy-rs/pull/2520\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/32739885301c0328b6f7f420912cbb54b51cbff4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366631656166626161626434396364313963613862643631356432353662346234373364326236373636336132383834373736666437623666666163633864342f736d697468792d6c616e672f736d697468792d72732f70756c6c2f32353230)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/smithy-lang/smithy-rs/pull/2520\" title=\"feat: make outgoing request based on wasi-http proposal by eduardomourar · Pull Request #2520 · smithy-lang/smithy-rs\">feat: make outgoing request based on wasi-http proposal by eduardomourar · Pull Request #2520 · smithy-lang/smithy-rs</a></div><div class=\"message_embed_description\">Motivation and Context\n#2087\nThis is a continuation of PR #2254, it will replace the mocked HTTP client with one based on the WASI HTTP proposal.\nDescription\nA separate crate called aws-smithy-wasm...</div></div></div>",
        "id": 418103053,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1706196135
    },
    {
        "content": "<p>This example does outgoing requests: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/bin/api_proxy_streaming.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/bin/api_proxy_streaming.rs</a></p>",
        "id": 418104205,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706196387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/206238-general/topic/examples.20of.20wasi-http.20integration.20for.20client.20HTTP.20calls.3F/near/418104205\">said</a>:</p>\n<blockquote>\n<p>This example does outgoing requests: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/bin/api_proxy_streaming.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/bin/api_proxy_streaming.rs</a></p>\n</blockquote>\n<p>Ok, yeah, this is what I was expecting/looking for. Thank you <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>.</p>",
        "id": 418104658,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1706196526
    },
    {
        "content": "<p>I should note that that example is overkill if you just want to do simple, blocking requests -- it includes a custom async executor and uses it to do a bunch of fancy concurrency.  Someone could write a much simpler example, but I don't know of an existing one offhand.</p>",
        "id": 418105814,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706196884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> actually, I def was looking for something on the streaming side haha!</p>",
        "id": 418110784,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1706198230
    },
    {
        "content": "<p>Another (not particularly simple) example, integrating with <code>hyper</code>'s types: <a href=\"https://github.com/lann/wasi-hyperium\">https://github.com/lann/wasi-hyperium</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasi-hyperium\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5e0d22db0d21854187dd21eda0f2bdf15e19910e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393363363132306334376364666530343163616335626336303438653366613138356166643536616261633931336461313236353030323536363233636330322f6c616e6e2f776173692d687970657269756d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasi-hyperium\" title=\"GitHub - lann/wasi-hyperium\">GitHub - lann/wasi-hyperium</a></div><div class=\"message_embed_description\">Contribute to lann/wasi-hyperium development by creating an account on GitHub.</div></div></div>",
        "id": 418111139,
        "sender_full_name": "Lann Martin",
        "timestamp": 1706198337
    },
    {
        "content": "<p>I think <a href=\"https://github.com/landonxjames/wasi-http-test/blob/main/src/generated-js-runtime-bindings/exports/wasm-version-tests-component-clients.d.ts\">https://github.com/landonxjames/wasi-http-test/blob/main/src/generated-js-runtime-bindings/exports/wasm-version-tests-component-clients.d.ts</a> also does this....</p>",
        "id": 418113160,
        "sender_full_name": "Ralph",
        "timestamp": 1706198905
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/206238-general/topic/examples.20of.20wasi-http.20integration.20for.20client.20HTTP.20calls.3F/near/418105814\">said</a>:</p>\n<blockquote>\n<p>I should note that that example is overkill if you just want to do simple, blocking requests -- it includes a custom async executor and uses it to do a bunch of fancy concurrency.  Someone could write a much simpler example, but I don't know of an existing one offhand.</p>\n</blockquote>\n<p>Thanks for the advice, I had exactly the same question and was looking for a simple example of making an outgoing http request. I've tried running the example you suggested, <a href=\"http://api_proxy_streaming.rs\">api_proxy_streaming.rs</a> using the latest version of wasmtime. Are you able to advise the wasmtime command I need to use to run this example?</p>\n<p>Currently I'm getting the following error: 1: unknown import: <code>wasi:http/types@0.2.0::[constructor]fields</code> has not been defined , or if I run ./target/debug/wasmtime run --wasi http target/wasm32-wasi/release/api_proxy_streaming.wasm, I get an Error: Cannot enable wasi-http for core wasm modules.</p>\n<p>I built wasmtime from source using cargo build --features component-model,wasi-http <br>\nAny help would be much appreciated as I am very new to running wasm modules with wasmtime.</p>",
        "id": 418185699,
        "sender_full_name": "Gareth",
        "timestamp": 1706228052
    },
    {
        "content": "<p>You'll need to use <code>wasmtime serve</code> instead of <code>wasmtime run</code>.</p>",
        "id": 418185724,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228079
    },
    {
        "content": "<p>e.g. <code>./target/debug/wasmtime serve --wasi common target/wasm32-wasi/release/api_proxy_streaming.wasm</code></p>",
        "id": 418185975,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228218
    },
    {
        "content": "<p>oh, and you'll probably need to convert the module to a component using <code>wasm-tools component new</code> prior to running it (or else use <code>cargo-component</code> to build from source, which will take care of the componentization step for you).</p>",
        "id": 418186249,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228388
    },
    {
        "content": "<p>thx for the quick reply, yes I tried the above and got an error, Error: The serve command currently requires a component</p>",
        "id": 418186363,
        "sender_full_name": "Gareth",
        "timestamp": 1706228423
    },
    {
        "content": "<p>Consider using <a href=\"https://github.com/sunfishcode/hello-wasi-http\">https://github.com/sunfishcode/hello-wasi-http</a> as a template, which takes care of the details.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/hello-wasi-http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b7acb358b56200e04beedb2ef46aaa889b4fe99b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393062346462353337633061316266653930366634373939323636653564353833663536373063653862376630656531303064616236306236303866313530332f73756e66697368636f64652f68656c6c6f2d776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/hello-wasi-http\" title=\"GitHub - sunfishcode/hello-wasi-http\">GitHub - sunfishcode/hello-wasi-http</a></div><div class=\"message_embed_description\">Contribute to sunfishcode/hello-wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 418186373,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228436
    },
    {
        "content": "<p>(i.e. clone that repo, replace the contents of the <a href=\"http://lib.rs\">lib.rs</a> with those of <a href=\"http://api_proxy_streaming.rs\">api_proxy_streaming.rs</a>, and follow the README.md directions for building and running)</p>",
        "id": 418186471,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228503
    },
    {
        "content": "<p>great thx for your help, I'll give this a go</p>",
        "id": 418186572,
        "sender_full_name": "Gareth",
        "timestamp": 1706228556
    },
    {
        "content": "<p>Although I just noticed the README.md refers to Wasmtime 14, but recent commits refer to the rc-2023-12-05 snapshot of WASI, which came later.  Anyway, you might need to grab the wit files from the same commit you built Wasmtime from and got <a href=\"http://api_proxy_streaming.rs\">api_proxy_streaming.rs</a> from to make sure everything lines up.</p>",
        "id": 418186775,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228683
    },
    {
        "content": "<p>Sorry this is such a process.  Now that WASI 0.2.0 is out, we won't need to juggle versions as much going forward.</p>",
        "id": 418186836,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228719
    },
    {
        "content": "<p>I'm working up updating hello-wasi-http to Wasmtime 17 and WASI Preview 2. First step, <a href=\"https://github.com/bytecodealliance/cargo-component/pull/213\">update cargo-component</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/pull/213\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3cdc15b64be81f7b3db684115914d6e0059d8735\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303064396161656539313062383633623938313931316633363966633465343937326139363231333039643132616232353434323031333230666263366337622f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f70756c6c2f323133)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/pull/213\" title=\"Update the adapter to Wasmtime 17.0 and WASI Preview 2. by sunfishcode · Pull Request #213 · bytecodealliance/cargo-component\">Update the adapter to Wasmtime 17.0 and WASI Preview 2. by sunfishcode · Pull Request #213 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">ab5a448 is the tag for Wasmtime 17.0, which was just released with WASI Preview 2.0 support.</div></div></div>",
        "id": 418187116,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706228888
    },
    {
        "content": "<p>There will be a (breaking change) release of cargo-component this afternoon</p>",
        "id": 418187194,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706228952
    },
    {
        "content": "<p>that will require a few minor tweaks to your <code>Cargo.toml</code> and <code>main.rs</code>/<code>lib.rs</code> (I'll have update instructions in the release announcement)</p>",
        "id": 418187233,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706228985
    },
    {
        "content": "<p>somewhat relatedly, I'm planning to do the same for <code>componentize-py</code> early tomorrow</p>",
        "id": 418187235,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706228986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/206238-general/topic/examples.20of.20wasi-http.20integration.20for.20client.20HTTP.20calls.3F/near/418186775\">said</a>:</p>\n<blockquote>\n<p>Although I just noticed the README.md refers to Wasmtime 14, but recent commits refer to the rc-2023-12-05 snapshot of WASI, which came later.  Anyway, you might need to grab the wit files from the same commit you built Wasmtime from and got <a href=\"http://api_proxy_streaming.rs\">api_proxy_streaming.rs</a> from to make sure everything lines up.</p>\n</blockquote>\n<p>Thanks for your help, I tried to implement your suggestion using <a href=\"https://github.com/sunfishcode/hello-wasi-http\">https://github.com/sunfishcode/hello-wasi-http</a> as a template. </p>\n<ul>\n<li>I am using the latest version of wasmtime, 17.0.</li>\n<li>I added <code>wit-bindgen = { version = \"0.16.0\", default-features = false, features = [\"realloc\"] }</code> and  <code>crate-type = [\"cdylib\"]</code> to my <code>cargo.toml</code></li>\n<li>I've copied over <code>http/wit/deps</code> from wasmtime to make sure these are the latest version.</li>\n</ul>\n<p>This worked well and I was able to make a http request when running as a server with:<br>\n<code>./wasmtime/target/debug/wasmtime serve --wasi common try_http_outbound/target/wasm32wasi/debug/try_http_outbound.wasm</code></p>\n<p>...however I would like to be able to run this it via the commandline using:<br>\n<code>./wasmtime/target/debug/wasmtime run --wasi common try_http_outbound/target/wasm32-wasi/debug/try_http_outbound.wasm</code></p>\n<p>I have amended my imports for <a href=\"http://lib.rs\">lib.rs</a> and am using <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/http.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/http.rs</a> (this file is unchanged from the wasmtime repo) to make the outgoing http request. My code compiles  successfully using cargo component build.<br>\nimports to my <a href=\"http://lib.rs\">lib.rs</a> are:</p>\n<div class=\"codehilite\" data-code-language=\"mod\"><pre><span></span><code>mod http;\nuse bindings::wasi::http::types::{Method, Scheme};\nuse bindings::exports::wasi::cli::run::Guest;\n\nuse anyhow::Context;\nuse serde_json::{Value, json};\nuse url::Url;\n\nstruct Component;\nimpl Guest for crate::Component {\n    fn run() -&gt; Result&lt;(), ()&gt; {\n        main();\n        Ok(())\n    }\n}\n</code></pre></div>\n<p>My world.wit file is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">sunfishcode</span>:<span class=\"nc\">try</span><span class=\"o\">-</span><span class=\"n\">http</span><span class=\"o\">-</span><span class=\"n\">outbound</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">outgoing</span><span class=\"o\">-</span><span class=\"n\">handler</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>However when running:<br>\n<code>./wasmtime/target/debug/wasmtime run --wasi common try_http_outbound/target/wasm32-wasi/debug/try_http_outbound.wasm</code><br>\nI get the following error :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">try_http_outbound</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">try_http_outbound</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span>:<span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n    <span class=\"mi\">1</span>: <span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">fields</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n    <span class=\"mi\">2</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">nothing</span>\n</code></pre></div>\n<p>I have checked and confirmed that all the wit files match those of my wasmtime version. Any help would be much appreciated  as I’m not sure what I’ve missed here.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/hello-wasi-http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b7acb358b56200e04beedb2ef46aaa889b4fe99b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393062346462353337633061316266653930366634373939323636653564353833663536373063653862376630656531303064616236306236303866313530332f73756e66697368636f64652f68656c6c6f2d776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/hello-wasi-http\" title=\"GitHub - sunfishcode/hello-wasi-http\">GitHub - sunfishcode/hello-wasi-http</a></div><div class=\"message_embed_description\">Contribute to sunfishcode/hello-wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 418508608,
        "sender_full_name": "Gareth",
        "timestamp": 1706453472
    },
    {
        "content": "<p>Have you tried adding <code>--wasi http</code> to your <code>wasmtime run</code> command?</p>",
        "id": 418510973,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706455398
    },
    {
        "content": "<p>To run the hello-wasi-http example, using <code>wasmtime serve</code> rather than <code>wasmtime run</code>.</p>",
        "id": 418516035,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706459639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/206238-general/topic/examples.20of.20wasi-http.20integration.20for.20client.20HTTP.20calls.3F/near/418510973\">said</a>:</p>\n<blockquote>\n<p>Have you tried adding <code>--wasi http</code> to your <code>wasmtime run</code> command?</p>\n</blockquote>\n<p>amazing thx, this worked!</p>",
        "id": 418532764,
        "sender_full_name": "Gareth",
        "timestamp": 1706473322
    },
    {
        "content": "<p>For future reference, <code>wasmtime run -S help</code> will list all the WASI features you can enable or disable.</p>",
        "id": 418532897,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706473388
    },
    {
        "content": "<p>The <a href=\"https://github.com/sunfishcode/hello-wasi-http\">hello-wasi-http demo</a> repo is now updated to use Preview 2 and work with Wasmtime 17.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/hello-wasi-http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cd88fe26504a2cf49ba1e49ac3f81f6c6d83367d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623130663438363739613731376134316532633266626266356163643339616132303234303666633131613861366131386261613537393865633264306536342f73756e66697368636f64652f68656c6c6f2d776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/hello-wasi-http\" title=\"GitHub - sunfishcode/hello-wasi-http\">GitHub - sunfishcode/hello-wasi-http</a></div><div class=\"message_embed_description\">Contribute to sunfishcode/hello-wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 419952788,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1707179192
    },
    {
        "content": "<p>This uses the new <code>--proxy</code> flag to <code>cargo component new</code>, which tells cargo component to use a special adapter that avoids pulling in <code>get-environment</code> etc., so it works in <code>wasmtime serve out of the box, </code>without needing <code>-S common</code>.</p>",
        "id": 419954550,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1707180289
    }
]