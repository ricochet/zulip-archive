[
    {
        "content": "<p>so, from dwarf dump., our test float is at 0x26 which is here :</p>\n<p>translations[0x00000000].debuginfo.dwarf.debug_info.debug_info_section.slice[0x00000026]</p>\n<p>quick inspect of that &amp; it looks right. might hardwire pull that one through as a means of figuring out what issues we have before nailing it more generically.</p>",
        "id": 257698640,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634305143
    },
    {
        "content": "<p>0x00000026:   DW_TAG_variable [2]  <br>\n                DW_AT_name [DW_FORM_strp]   ( .debug_str[0x00000078] = \"my_global\")<br>\n                DW_AT_type [DW_FORM_ref4]   (cu + 0x0037 =&gt; {0x00000037} \"float\")<br>\n                DW_AT_external [DW_FORM_flag_present]   (true)<br>\n                DW_AT_decl_file [DW_FORM_data1] (\"g:\\dev\\test\\.\\test.c\")<br>\n                DW_AT_decl_line [DW_FORM_data1] (1)<br>\n                DW_AT_location [DW_FORM_exprloc]    (DW_OP_addr 0x400)</p>",
        "id": 257698675,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634305160
    },
    {
        "content": "<p>so we just verbatim dump that out &amp; guess ends up at  same address (0x400), which can inspect once it shows up in debugger.<br>\nif that's wrong, second pass over it to figure out where it gets mapped to.</p>",
        "id": 257699860,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634305625
    },
    {
        "content": "<p>&amp; can run </p>\n<p>float *wheres_my_global = &amp;my_global;</p>\n<p>... in the C. to check / figure out where it is for verification.</p>",
        "id": 257700253,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634305783
    },
    {
        "content": "<p>Some code at last :)</p>\n<p><a href=\"https://github.com/adv-sw/wasmtime/blob/c7d257dbc36ffa1d5462afff7f37f1d08d853af3/crates/wasmtime/src/module.rs#L388\">https://github.com/adv-sw/wasmtime/blob/c7d257dbc36ffa1d5462afff7f37f1d08d853af3/crates/wasmtime/src/module.rs#L388</a></p>\n<p>Just grabs the globals thus far. Not suggesting a merge yet unless you want to help deliver this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/wasmtime/blob/c7d257dbc36ffa1d5462afff7f37f1d08d853af3/crates/wasmtime/src/module.rs#L388\" style=\"background-image: url(https://opengraph.githubassets.com/d274259bcbd8b34166734c63efd7e3ece973f6cfeb4447996fa276b389c15698/adv-sw/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/wasmtime/blob/c7d257dbc36ffa1d5462afff7f37f1d08d853af3/crates/wasmtime/src/module.rs#L388\" title=\"wasmtime/module.rs at c7d257dbc36ffa1d5462afff7f37f1d08d853af3 · adv-sw/wasmtime\">wasmtime/module.rs at c7d257dbc36ffa1d5462afff7f37f1d08d853af3 · adv-sw/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/module.rs at c7d257dbc36ffa1d5462afff7f37f1d08d853af3 · adv-sw/wasmtime</div></div></div>",
        "id": 257913955,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634472732
    },
    {
        "content": "<p>Need that &amp; the toml in that module to add gimli dependency.</p>",
        "id": 257914023,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634472821
    },
    {
        "content": "<p>its not a straight verbatim dump as you have to grab the string identifier &amp; add it to the destination string table, amending index accordingly.</p>",
        "id": 257914705,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634473455
    },
    {
        "content": "<p>&amp; whatever needs doing with the address.</p>",
        "id": 257914732,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634473487
    },
    {
        "content": "<p>looking at clone_unit in <a href=\"http://unit.rs\">unit.rs</a> - does most of what we want, just for functions, not global variables.</p>",
        "id": 258001912,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634550163
    },
    {
        "content": "<p>looks like finish_compile is where we should emit this stuff.</p>",
        "id": 258018300,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634559044
    },
    {
        "content": "<p>going just above that as too much rust weirdness to resolve dropping it in there. still not a fan. bit too \"clever\".</p>",
        "id": 258021516,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634560722
    },
    {
        "content": "<p>moved it here.</p>\n<p><a href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/mod.rs#L135\">https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/mod.rs#L135</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/mod.rs#L135\" style=\"background-image: url(https://opengraph.githubassets.com/672350d618c94abdedad26199ac52f15bf09407b253bd2b8594d902834dc7801/adv-sw/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/mod.rs#L135\" title=\"wasmtime/mod.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime\">wasmtime/mod.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/mod.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime</div></div></div>",
        "id": 258028423,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634563623
    },
    {
        "content": "<p>clone_unit - clones a compile unit. each compile unit (equivalent of a source file) holds its own globals<br>\nthat calls clone_die_attributes. unsure why we don't just get globals.<br>\nprocessing ...</p>",
        "id": 258043355,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634569571
    },
    {
        "content": "<p>clone_die_attributes is parsing the globals. so we don't get them because they're either filtered out or broken in some way.<br>\nneed to visualize what we're actually getting for insight.</p>",
        "id": 258050796,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634572260
    },
    {
        "content": "<p>pending_die_refs &amp; pending_di_refs from clone_die_attributes should contain our global.</p>",
        "id": 258055711,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634573969
    },
    {
        "content": "<p>Here's where we come out the other side after processing the die.<br>\n<a href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L374\">https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L374</a></p>\n<p>Sub-programs - processed.<br>\nGlobal variable isn't a DW_TAG_subprogram - ends up doing nothing here :<br>\n<a href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L399\">https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L399</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L374\" style=\"background-image: url(https://opengraph.githubassets.com/672350d618c94abdedad26199ac52f15bf09407b253bd2b8594d902834dc7801/adv-sw/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L374\" title=\"wasmtime/unit.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime\">wasmtime/unit.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/unit.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L399\" style=\"background-image: url(https://opengraph.githubassets.com/672350d618c94abdedad26199ac52f15bf09407b253bd2b8594d902834dc7801/adv-sw/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/wasmtime/blob/95efcd83e0b3865df4306ee65e6a75b25f20bf21/crates/cranelift/src/debug/transform/unit.rs#L399\" title=\"wasmtime/unit.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime\">wasmtime/unit.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/unit.rs at 95efcd83e0b3865df4306ee65e6a75b25f20bf21 · adv-sw/wasmtime</div></div></div>",
        "id": 258057379,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634574487
    },
    {
        "content": "<p>&amp; that's all recursive. fun times :)</p>",
        "id": 258058098,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634574745
    },
    {
        "content": "<p>then into generate_simulated_dwarf where I can see what it gets. can quit whining now &amp; just work thru it. sorry all :)</p>",
        "id": 258059938,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634575425
    },
    {
        "content": "<p>think it just needs peppering with diagnostics until its obvious what's missing, or if nothing's missing look elsewhere for clues.</p>",
        "id": 258060125,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634575491
    },
    {
        "content": "<p>generate_simulated_dwarf is writing header then functions. so gotta figure out how to pull globals into that.</p>",
        "id": 258070794,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634579558
    },
    {
        "content": "<p>I also don't want to work on this  but the fundamentals need to be solid for this to be an effective internet scale project.</p>",
        "id": 258080581,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634583317
    },
    {
        "content": "<p>windows users are used to quality debugging experiences. others seem to settle for less. lets get it right :)</p>",
        "id": 258080675,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634583357
    },
    {
        "content": "<p>summary: cranelift bug.</p>",
        "id": 258083774,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634584524
    },
    {
        "content": "<p>Added</p>\n<p>log_globals(&amp;di)?;</p>\n<p>to start of generate_simulated_dwarf. </p>\n<p>log_globals defined below. seems to indicate global coming thru, so that function at fault with valid data. I say valid, its there, whether correct or not, don't yet know.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">log_globals</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">di</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">DebugInfoData</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// Scan .debuginfo for global variables which we'll record &amp; translate to JIT sink.</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span>: <span class=\"kt\">i32</span>  <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dwarf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">di</span><span class=\"p\">.</span><span class=\"n\">dwarf</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dwarf</span><span class=\"p\">.</span><span class=\"n\">units</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"c1\">// Iterate over the compilation units.</span>\n\n<span class=\"w\">   </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"s\">\"Unit at &lt;.debug_info+0x{:x}&gt;\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">header</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">().</span><span class=\"n\">as_debug_info_offset</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dwarf</span><span class=\"p\">.</span><span class=\"n\">unit</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"c1\">// Iterate over the Debugging Information Entries (DIEs) in the unit.</span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">unit</span><span class=\"p\">.</span><span class=\"n\">entries</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">delta_depth</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"p\">.</span><span class=\"n\">next_dfs</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">depth</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">delta_depth</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">         </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">gimli</span>::<span class=\"n\">DW_TAG_variable</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"GLOBAL_{} &lt;0x{:x}&gt;  {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">().</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">tag</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// Iterate over the attributes in the DIE.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">attrs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">entry</span><span class=\"p\">.</span><span class=\"n\">attrs</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">attrs</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"   {}: {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"err\">```</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258087184,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634585972
    },
    {
        "content": "<p>think we need to create a gimli unit with a null line program, implicitly globals unit. tried that, needs gimli mods so just figured out how to override with local crate. compiles, so into it.   not the ideal first rust project, but hey :)</p>\n<p>one trivial fix to run with gimli trunk.</p>",
        "id": 258224714,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634660275
    },
    {
        "content": "<p>is a nice structure for collab work &amp; the syntax isn't terrible. might even start to like it.</p>",
        "id": 258224869,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634660323
    },
    {
        "content": "<p>Early approximation - work in progress : <a href=\"https://github.com/adv-sw/wasmtime\">https://github.com/adv-sw/wasmtime</a></p>\n<p>clone_globals in wasmtime\\crates\\cranelift\\src\\debug\\transform\\unit.rs</p>\n<p>Applied in wasmtime\\crates\\cranelift\\src\\debug\\transform\\mod.rs</p>\n<p>Traverses cleanly, not yet working code. Got some placeholders in there whilst we figure out what goes where.</p>\n<p>Corrections / refinements welcome.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/wasmtime\" style=\"background-image: url(https://opengraph.githubassets.com/e4acd5e1f9c65b29f79cfd63eb36be45837742fc80a604f1424811531234dd1e/adv-sw/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/wasmtime\" title=\"GitHub - adv-sw/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift\">GitHub - adv-sw/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - GitHub - adv-sw/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift</div></div></div>",
        "id": 258520858,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634811876
    },
    {
        "content": "<p>Requires some minor gimli tweaks : <a href=\"https://github.com/adv-sw/gimli\">https://github.com/adv-sw/gimli</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/gimli\" style=\"background-image: url(https://opengraph.githubassets.com/422e098eab1dce5c41ae67f80aae90e60ab33be2372d4293b137f2393acac483/adv-sw/gimli)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/gimli\" title=\"GitHub - adv-sw/gimli: A blazing fast library for consuming the DWARF debugging format\">GitHub - adv-sw/gimli: A blazing fast library for consuming the DWARF debugging format</a></div><div class=\"message_embed_description\">A blazing fast library for consuming the DWARF debugging format - GitHub - adv-sw/gimli: A blazing fast library for consuming the DWARF debugging format</div></div></div>",
        "id": 258521450,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634812215
    },
    {
        "content": "<p>dropping log_globals back into generate_simulated_dwarf, we get one - so +ve change in behaviour.<br>\nnext to decode that as it comes out to figure out if its correct.</p>",
        "id": 258545834,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634823282
    },
    {
        "content": "<p>Extracted generated ELF that's sent to LLDB to a file for inspection via the following.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">register_debug_and_profiling</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">profiler</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">ProfilingAgent</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Register GDB JIT images; initialize profiler and load the wasm module.</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">meta</span><span class=\"p\">.</span><span class=\"n\">native_debug_info_present</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">code</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_gdbjit_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mmap</span><span class=\"p\">().</span><span class=\"n\">to_vec</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"n\">SetupError</span>::<span class=\"n\">DebugInfo</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"c1\">// ADV_SW_DEBUG : save for inspection.</span>\n<span class=\"w\">               </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Path</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"g:</span><span class=\"se\">\\\\</span><span class=\"s\">dev</span><span class=\"se\">\\\\</span><span class=\"s\">test</span><span class=\"se\">\\\\</span><span class=\"s\">emit.elf\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"n\">fs</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">               </span><span class=\"c1\">// ADV_SW_DEBUG[END]</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">profiler</span><span class=\"p\">.</span><span class=\"n\">module_load</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Looks less wrong than I expected, but not quite there yet.</p>\n<p><a href=\"https://pastebin.com/ZfLYhm2R\">https://pastebin.com/ZfLYhm2R</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/ZfLYhm2R\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/ZfLYhm2R\" title=\".\\emit.elf:\tfile format elf64-x86-64.debug_info contents:0x00000000: Compi - Pastebin.com\">.\\emit.elf:\tfile format elf64-x86-64.debug_info contents:0x00000000: Compi - Pastebin.com</a></div><div class=\"message_embed_description\">Pastebin.com is the number one paste tool since 2002. Pastebin is a website where you can store text online for a set period of time.</div></div></div>",
        "id": 258695343,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634900356
    },
    {
        "content": "<p>with my nonsense turned off, the global does appear to come thru.<br>\n<a href=\"https://pastebin.com/ZsTK8De1\">https://pastebin.com/ZsTK8De1</a><br>\nshould have done this bit first :)</p>\n<p>... but we don't see it. so another verify on that then into lldb to see why it's not registered.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/ZsTK8De1\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/ZsTK8De1\" title=\".\\emit.elf:\tfile format elf64-x86-64.debug_info contents:0x00000000: Compi - Pastebin.com\">.\\emit.elf:\tfile format elf64-x86-64.debug_info contents:0x00000000: Compi - Pastebin.com</a></div><div class=\"message_embed_description\">Pastebin.com is the number one paste tool since 2002. Pastebin is a website where you can store text online for a set period of time.</div></div></div>",
        "id": 258700853,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634903829
    },
    {
        "content": "<p>comparing emitted dwarf vs. native equivalent, we spot some differences.</p>\n<p>native </p>\n<p>&lt; 1&gt;&lt;0x0000002a&gt;    DW_TAG_variable<br>\n                      DW_AT_name                  my_global<br>\n                      DW_AT_type                  &lt;0x0000003f&gt;<br>\n                      DW_AT_external              yes(1)<br>\n                      DW_AT_decl_file             0x00000001 /media/x/DEV_LLVM/dev/test/./test.c<br>\n                      DW_AT_decl_line             0x00000001<br>\n                      DW_AT_location              len 0x0009: 0x032840400000000000: <br>\n                              DW_OP_addr 0x00404028</p>\n<p>wasmtime emit</p>\n<p>&lt; 1&gt;&lt;0x00000073&gt;    DW_TAG_variable<br>\n                     DW_AT_name                  my_global<br>\n            DW_AT_type                  &lt;0x0000002f&gt;                      <br>\n           DW_AT_external              yes(1)<br>\n                     DW_AT_decl_file             0x00000001<br>\n                     DW_AT_decl_line             0x00000001</p>",
        "id": 258704905,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634906129
    },
    {
        "content": "<p>specifically,  DW_AT_location isn't coming thru, so debugger doesn't know where it is &amp; that's likely the reason for reject.</p>",
        "id": 258706136,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634906741
    },
    {
        "content": "<p>that DW_AT_location is skipped bcoz hitting  \"// FIXME _expr contains invalid expression\"</p>\n<p>in wasmtime\\crates\\cranelift\\src\\debug\\transform\\attr.rs</p>",
        "id": 258717041,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634911867
    },
    {
        "content": "<p>operation Address is causing compile_expression to fail. have no idea what should be going on in there :)</p>",
        "id": 258719284,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634912869
    },
    {
        "content": "<p>not having a clue what I'm doing in there, I forced Address to pass &amp; got the desired attribute</p>\n<p>DW_TAG_variable<br>\n                DW_AT_name  (\"my_global\")<br>\n                DW_AT_external  (0x01)<br>\n                DW_AT_decl_file (\"g:\\dev\\test\\.\\test.c\")<br>\n                DW_AT_decl_line (1)<br>\n                DW_AT_location  (DW_OP_addr 0x0, &lt;decoding error&gt; 00 04 00 00)<br>\n                DW_AT_type  (0x0000002f \"float\")</p>\n<p>value is incorrect but its there. next to figure out what its supposed to be &amp; how to get it.</p>",
        "id": 258720837,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634913571
    },
    {
        "content": "<p>DW_AT_location does come through for locals, which will be on the stack rather than fixed location, but perhaps can look at what's going on there for clues.</p>",
        "id": 258721932,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634914067
    },
    {
        "content": "<p>trying this in <a href=\"http://attr.rs\">attr.rs</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// ADV_SW_PATCH: DW_AT_location is defined by global variables.</span>\n<span class=\"w\">            </span><span class=\"c1\">// We process directly as compile_expression doesn't like them for some reason.</span>\n\n<span class=\"w\">            </span><span class=\"n\">AttributeValue</span>::<span class=\"n\">Exprloc</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">gimli</span>::<span class=\"n\">DW_AT_location</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">to_slice</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// TODO1: Verify buf[0] == DW_OP_addr</span>\n\n<span class=\"w\">                </span><span class=\"c1\">// TODO2: This is for 32 bit wasm pointers. How to detect 64 bit &amp; react accordingly ?</span>\n\n<span class=\"w\">                </span><span class=\"c1\">// TODO3: Consider endian requirements.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">from_le_bytes</span><span class=\"p\">([</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]])</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr_tr</span><span class=\"p\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">).</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">write</span>::<span class=\"n\">Address</span>::<span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">write</span>::<span class=\"n\">AttributeValue</span>::<span class=\"n\">Address</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>coming out as zero address, though 0x0040000 in the wasm. </p>\n<p>how should I look up mapping from global's local address to target address space, please.</p>",
        "id": 258737009,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634920405
    },
    {
        "content": "<p>wasmtime\\crates\\cranelift\\src\\debug\\transform\\attr.rs</p>",
        "id": 258738483,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634921075
    },
    {
        "content": "<p>feel free to steal the thunder if you've got it from here :)</p>",
        "id": 258740029,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634921726
    },
    {
        "content": "<p>... but that's the issue - at least one of them. might be multiple faults. </p>\n<p>global variable DW_AT_location address locations are being rejected by compile_expression in trunk.</p>",
        "id": 258740293,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634921831
    },
    {
        "content": "<p>that mapping is what resolve_vmctx_memory does. so  figure out how to run through that code, I guess.</p>",
        "id": 258741830,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634922447
    },
    {
        "content": "<p>not sure globals end up in address translation table. hence why we're getting 0. so compute directly.</p>",
        "id": 258742069,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634922537
    },
    {
        "content": "<p>a command line option for wasmtime app &amp; API to copy debug mode generated elf to a file for inspection once resolved so easier next time, perhaps.</p>",
        "id": 258813597,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634981332
    },
    {
        "content": "<p>Please could master update to latest gimli. Requires stub for DebugCuIndex, DebugTuIndex</p>",
        "id": 258813889,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634981767
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    DebugCuIndex =&gt; &quot;.debug_cu_index&quot;,\n    DebugTuIndex =&gt; &quot;.debug_tu_index&quot;,\n</code></pre></div>\n\n<p>guess. something like that.</p>",
        "id": 258813995,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634981964
    },
    {
        "content": "<p>trunk broken for me running globals example from wasmtime rust sdk, with debug mode enabled.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">debug_info</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258814364,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634982600
    },
    {
        "content": "<p>&amp; slightly modified gimli. perhaps its that - nope, dropped regular in everywhere. still broken. back to my branch.</p>",
        "id": 258814417,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634982625
    },
    {
        "content": "<p>regression redacted.  programming error in my new code causing panic. doh :)</p>",
        "id": 258815660,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634984307
    },
    {
        "content": "<p>corrected that coding error. still haven't translated the address, but get wasm address coming thru (insufficient, but progress)</p>\n<p><a href=\"https://github.com/adv-sw/wasmtime/blob/4a5fa279fa49343021cdffa2af1bade8b38b299c/crates/cranelift/src/debug/transform/attr.rs#L209\">https://github.com/adv-sw/wasmtime/blob/4a5fa279fa49343021cdffa2af1bade8b38b299c/crates/cranelift/src/debug/transform/attr.rs#L209</a></p>\n<p>&amp; write_expr_addr in <a href=\"http://expression.rs\">expression.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/wasmtime/blob/4a5fa279fa49343021cdffa2af1bade8b38b299c/crates/cranelift/src/debug/transform/attr.rs#L209\" style=\"background-image: url(https://opengraph.githubassets.com/37b28d1f368ccc0f02874ee939e7d5a3b6e233d47f40bbf400aa2c54c0d0fb5b/adv-sw/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/wasmtime/blob/4a5fa279fa49343021cdffa2af1bade8b38b299c/crates/cranelift/src/debug/transform/attr.rs#L209\" title=\"wasmtime/attr.rs at 4a5fa279fa49343021cdffa2af1bade8b38b299c · adv-sw/wasmtime\">wasmtime/attr.rs at 4a5fa279fa49343021cdffa2af1bade8b38b299c · adv-sw/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/attr.rs at 4a5fa279fa49343021cdffa2af1bade8b38b299c · adv-sw/wasmtime</div></div></div>",
        "id": 258818727,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634988948
    },
    {
        "content": "<p>still haven't found the magic source to convert wasm pointer to runtime equivalent before instantiation.</p>\n<p>found translate_raw but that just performs a function lookup which will fail coz not a function.</p>",
        "id": 258825488,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634998072
    },
    {
        "content": "<p>how do I grab raw address from Address please.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_addr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addr</span>: <span class=\"nc\">gimli</span>::<span class=\"n\">write</span>::<span class=\"n\">Address</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr64</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr64</span><span class=\"p\">.</span><span class=\"n\">to_le_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>can't do as u64 or anything else I've tried. stuck on simple stuff.</p>",
        "id": 258833871,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635009825
    },
    {
        "content": "<p>I've got it generating an address. I can't figure out how to get the correct address or how to write it when I get it. </p>\n<p>clues are welcome.</p>",
        "id": 258834616,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635010837
    },
    {
        "content": "<p>there's this thing, but can't figure out how to use it.  </p>\n<p>write_address(&amp;mut self, address: Address, size: u8)</p>\n<p>if we were C, I'd just cast it or at the least be able to see what it is in debugger.</p>",
        "id": 258835015,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635011503
    },
    {
        "content": "<p>as I don't know how to transform an address, unsure if figuring out how to serialize one of those things is way to go anyway.</p>",
        "id": 258835147,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635011678
    },
    {
        "content": "<p>finally :)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">write_expr_addr</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"w\"> </span>: <span class=\"nc\">gimli</span>::<span class=\"n\">write</span>::<span class=\"n\">Address</span><span class=\"p\">)</span>-&gt; <span class=\"nc\">gimli</span>::<span class=\"n\">write</span>::<span class=\"n\">Expression</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ExpressionWriter</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_op</span><span class=\"p\">(</span><span class=\"n\">gimli</span>::<span class=\"n\">constants</span>::<span class=\"n\">DW_OP_addr</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">gimli</span>::<span class=\"n\">write</span>::<span class=\"n\">Address</span>::<span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">.</span><span class=\"n\">to_le_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">write_u8</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">},</span><span class=\"w\"></span>\n\n<span class=\"w\">      </span><span class=\"n\">gimli</span>::<span class=\"n\">write</span>::<span class=\"n\">Address</span>::<span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addend</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/*not yet supported*/</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">   </span><span class=\"n\">gimli</span>::<span class=\"n\">write</span>::<span class=\"n\">Expression</span>::<span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"p\">.</span><span class=\"n\">into_vec</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258835861,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635012605
    },
    {
        "content": "<p>Got this, which at least serializes an Address now. Coming thru zero. Unsure how I should convert the address of a wasm global variable to target equivalent.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// ADV_SW_PATCH: DW_AT_location is defined by global variables.</span>\n<span class=\"w\">            </span><span class=\"c1\">// We process directly as compile_expression doesn't like them for some reason.</span>\n\n<span class=\"w\">            </span><span class=\"n\">AttributeValue</span>::<span class=\"n\">Exprloc</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">attr</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">gimli</span>::<span class=\"n\">DW_AT_location</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">to_slice</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// Ignore unless supported op.</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">gimli</span>::<span class=\"n\">DW_OP_addr</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// TODO: Detect 64 bit wasm &amp; form source address accordingly.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr_wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>::<span class=\"n\">from_le_bytes</span><span class=\"p\">([</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">],</span><span class=\"n\">buf</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]])</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// TODO: Translate the address.</span>\n<span class=\"w\">                </span><span class=\"c1\">// TODO2: Ensure endian correctness - this is a target pointer.</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr_target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr_tr</span><span class=\"p\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">addr_wasm</span><span class=\"p\">).</span><span class=\"n\">unwrap_or</span><span class=\"p\">(</span><span class=\"n\">write</span>::<span class=\"n\">Address</span>::<span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// let addr_target = write::Address::Constant(0);</span>\n\n<span class=\"w\">                </span><span class=\"c1\">// TODO: Research use of the following - might be required.</span>\n<span class=\"w\">                </span><span class=\"c1\">// resume_with_relocated_address</span>\n<span class=\"w\">                </span><span class=\"c1\">// evaluate_one_operation</span>\n<span class=\"w\">                </span><span class=\"c1\">// op_wasm_global</span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">write_expr_addr</span><span class=\"p\">(</span><span class=\"n\">addr_target</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">write</span>::<span class=\"n\">AttributeValue</span>::<span class=\"n\">Exprloc</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258836283,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635013290
    },
    {
        "content": "<p>assuming no other issues, this is nailed once we have the correct address.</p>",
        "id": 258836512,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635013636
    },
    {
        "content": "<p>hmmm ... so that code is getting called by build_artifacts whilst creating a module. don't think we can get final address there. so need to figure out a way to park the expression &amp; evaluate it in JIT callback instead of as module is built.</p>",
        "id": 258869995,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635069038
    },
    {
        "content": "<p>create_gdbjit_image does some kind of a relocate, so need to get head around that.</p>",
        "id": 258871046,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635070634
    },
    {
        "content": "<p>first call might result in invalid pointer if we don't have memory yet, but construction of dwarf is from jit callback, at a breakpoint, we will have an instance, so can form a valid target pointer.</p>",
        "id": 258876726,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635078859
    },
    {
        "content": "<p>ummm from z:\\dev\\wasm\\wasmtime\\crates\\cranelift\\src\\debug\\transform\\attr.rs<br>\nwant  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">wasmtime_runtime</span>::<span class=\"p\">{</span><span class=\"n\">debug_builtins</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"o\">....</span><span class=\"w\"></span>\n\n<span class=\"c1\">// so I can do something along lines of :</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr_target</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">resolve_vmctx_memory</span><span class=\"p\">(</span><span class=\"n\">addr_wasm</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>... which is unsafe &amp; don't know how to resolve that either coz rust noob.</p>",
        "id": 258881230,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635085660
    },
    {
        "content": "<p>someone who knows how to drive would have this done by now :)</p>",
        "id": 258881286,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635085707
    },
    {
        "content": "<p>following example has 2 float global variables -  their   DW_AT_locations look fine. the 3 means op addresss.</p>\n<p>this log from running under lldb at a breakpoint.</p>\n<p>the addresses I need to remap are processed before the memory is initialized. so its not possible at that point.</p>\n<p>&amp; here, I think is where the __vmctx-&gt;set() thingy comes in. so gotta figure out how this all fits in there.</p>\n<p>aside: if someone could explain what a trampoline is, that'd help. might not need one, but would like to understand what they are so I know that. they seem to be something to do with functions but this is a global not a function.</p>\n<p>[global_requiring_target_resolve]<br>\n[global_requiring_target_resolve]<br>\nUnit at &lt;.debug_info+0x0&gt;<br>\nGLOBAL_1 &lt;0x26&gt;  DW_TAG_variable<br>\n   DW_AT_name: DebugStrRef(DebugStrOffset(120))<br>\n   DW_AT_type: UnitRef(UnitOffset(55))<br>\n   DW_AT_external: Flag(true)<br>\n   DW_AT_decl_file: FileIndex(1)<br>\n   DW_AT_decl_line: Udata(1)<br>\n   DW_AT_location: Exprloc(Expression(EndianSlice { slice: [3, 0, 4, 0, 0], endian: LittleEndian }))<br>\nGLOBAL_2 &lt;0x3e&gt;  DW_TAG_variable<br>\n   DW_AT_name: DebugStrRef(DebugStrOffset(136))<br>\n   DW_AT_type: UnitRef(UnitOffset(55))<br>\n   DW_AT_external: Flag(true)<br>\n   DW_AT_decl_file: FileIndex(1)<br>\n   DW_AT_decl_line: Udata(2)<br>\n   DW_AT_location: Exprloc(Expression(EndianSlice { slice: [3, 4, 4, 0, 0], endian: LittleEndian }))<br>\n[elf_emit]<br>\n[initialize_memories]</p>",
        "id": 258886431,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635093120
    },
    {
        "content": "<p>we're close :)</p>\n<p>(lldb) p my_global<br>\nerror: Couldn't materialize: couldn't get the value of variable my_global: read memory from 0x0 failed (0 of 4 bytes read)</p>\n<p>that's expected, it is set at 0x0 right now. we can finally \"see\" the global in lldb.</p>",
        "id": 258886580,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635093327
    },
    {
        "content": "<p>(lldb) fr v -g -l<br>\n(float) my_other_global = &lt;read memory from 0x0 failed (0 of 4 bytes read)&gt;<br>\n(float) my_global = &lt;read memory from 0x0 failed (0 of 4 bytes read)&gt;</p>\n<p>that's new. got nothing previously.</p>\n<p>just that remapping to nail somehow.</p>",
        "id": 258886713,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635093537
    },
    {
        "content": "<p>we can't encode as a DW_OP_addr as we don't know the target address at the point of query. hence looking at DW_OP_call_ref which on initial reading might work. have no clue how to use it, so figuring that out is next.</p>",
        "id": 258887861,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635095039
    },
    {
        "content": "<p>DW_OP_call_ref (0x9a) : 1 operand :  a 4- or 8-byte offset of DIE.</p>\n<p>that'll do. can encode it with the wasm pointer then run whatever function it wants to decode it.<br>\ndon't of course have a clue how to specify the helper function.</p>",
        "id": 258888376,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635095665
    },
    {
        "content": "<p>that's from dwarf4 spec, p167</p>",
        "id": 258888410,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635095758
    },
    {
        "content": "<p>p24 :  DW_OP_call_ref performs subroutine calls during evaluation of a DWARF expression or location description</p>",
        "id": 258888492,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635095854
    },
    {
        "content": "<p>\"The operand is used as the offset of a debugging information entry in a .debug_info or .debug_types section which may be contained in a shared object or executable other than that containing the operator.\"</p>\n<p>nope, that's not it :)</p>",
        "id": 258888577,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635095976
    },
    {
        "content": "<p>DW_OP_push_object_address perhaps. if I can push wasm addr on the stack &amp; get that as parameter to function in OP_call_ref, that'd do.</p>",
        "id": 258889345,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635097162
    },
    {
        "content": "<p>from the spec : \"Values on the stack at the time of the call may be used as parameters by the called expression and values left on the stack by the called expression may be used as return values by prior agreement between the calling and called expressions\"</p>\n<p>might even work.</p>",
        "id": 258889525,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635097427
    },
    {
        "content": "<p>Got it :)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">breakpoint</span><span class=\"w\"> </span><span class=\"mf\">1.1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"mh\">0x0000017f1d1b127f</span><span class=\"w\"> </span><span class=\"n\">JIT</span><span class=\"p\">(</span><span class=\"mh\">0x17f1b52f6d0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">11</span>:<span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">9</span><span class=\"w\">    </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">10</span><span class=\"w\">       </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_global</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">my_other_global</span><span class=\"p\">;</span><span class=\"w\"></span>\n-&gt; <span class=\"mi\">11</span><span class=\"w\">       </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">12</span><span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">fr</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">l</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">float</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">my_other_global</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0x404</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">float</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">my_global</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"mh\">0x400</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">__vmctx</span>-&gt;<span class=\"nc\">set</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">float</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">resolve_vmctx_memory</span><span class=\"p\">(</span><span class=\"mh\">0x400</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">float</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 258890597,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635098916
    },
    {
        "content": "<p>decided to just pass the wasm pointer &amp; fix it on the other side.<br>\ncan hide the pointer ops behind the lldbg gui. <br>\nunsure if its safe to resolve like this. <br>\nperhaps we do need to use an evaluated expression to present the correct target address .<br>\ndownside of that is the resolved address will be visible &amp; we don't want to show that.</p>",
        "id": 258890765,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635099137
    },
    {
        "content": "<p>global variables delivered to JIT debug interface - going with that if it's stable, which I'll figure out when I try it on something more complex.</p>",
        "id": 258891145,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635099725
    },
    {
        "content": "<ul>\n<li>wasm address, not pointer. we could perhaps present valid target address here without breaking wasm view as that's a level of indirection behind what you see in the debugger. you see thing not address of thing.  issue is if you do &amp;thing in debugger. so perhaps some fancy tricks for those with more patience on this than me. I just wanted it working. it works.</li>\n</ul>",
        "id": 258891539,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635100380
    },
    {
        "content": "<p>Perhaps extending DWARF format (&amp; lldb) by adding support for virtual addresses is the way to do this cleanly.</p>\n<p>New  DW_AT_location op DW_OP_vaddr (virtual address) which lldb could resolve by calling a method in some die like we currently do manually with resolve_vmctx_memory.</p>\n<p>That's more work than I can schedule right now, but the alternative is excessive complexity to work without it.</p>",
        "id": 258933980,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635153381
    },
    {
        "content": "<p>rust is growing on me. steep learning curve, but impressive ecosystem. apologies for foul mood - had to get this done as spotted a gap. can take a chill pill now &amp; just work through it as &amp; when. wasmtime/cranelift crazy tech too &amp; I've only scratched the surface - great work all, appreciated.</p>\n<p>with greatest respect, a few more comments in the code though, plz :)</p>\n<p>it aids understanding &amp; that aids tracking down bugs faster.</p>\n<p>apologies to any I've offended by going at this harder than was perhaps necessary.</p>",
        "id": 258944943,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635160797
    },
    {
        "content": "<p>done, I think. at least first pass solution. apologies for pushing too hard. I wanted it fixed, so my problem, nobody else's. <br>\nsome experimentation &amp; tidy up, then happy to land this if it proves to be solid. concerned a virtual address could clash with a genuine system address &amp; thus cause lldb to interpret incorrectly. ensuring sandbox memory ptr is always &gt; 4GB address resolves that 32 bit wasmtime.</p>\n<p>best solution is implement virtual addresses in DWARF spec &amp; lldb then everything is clear &amp; well structured. it'll happen at some point unless there's an objection.</p>",
        "id": 258946518,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635161869
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/DRukXAq5Y688XgXjzny96oBa/now.png\">now.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/DRukXAq5Y688XgXjzny96oBa/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/DRukXAq5Y688XgXjzny96oBa/now.png\"></a></div><p>that's better :)</p>\n<p>still optimizing out all my locals but that's the compiler.  almost sane.</p>",
        "id": 258986804,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635180370
    },
    {
        "content": "<p>the above 4GB memory pool alloc for virtual address safety point above is incorrect. we have no idea if virtual addresses also represent a valid system address. hence lldb tweak once this is solid one way or another. politics of getting it in will be more hassle than the technical work, but can patch independently for our use. so can be done.</p>",
        "id": 258995823,
        "sender_full_name": "Steve Williams",
        "timestamp": 1635184343
    }
]