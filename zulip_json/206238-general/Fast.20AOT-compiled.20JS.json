[
    {
        "content": "<p>Hello,</p>\n<p>Is there anywhere I could read more about the AOT JavaScript compilation mentioned in this article from last year: <a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly\">https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly</a></p>\n<p>In combination with the fast instantiation coming in Wasmtime 1.0 it would seem quite compelling.</p>\n<p>Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b0cea62b89ccf6d34ec3a4a8d45332741ed2f3f8\\/68747470733a2f2f62797465636f6465616c6c69616e63652e6f72672f61727469636c65732f696d672f323032312d30362d30322d6a732d6f6e2d7761736d2f66656174757265645f696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly\" title=\"Making JavaScript run fast on WebAssembly\">Making JavaScript run fast on WebAssembly</a></div><div class=\"message_embed_description\">JavaScript in the browser runs many times faster than it did two decades ago. And that happened because the browser vendors spent that time working on intensive performance optimizations.</div></div></div>",
        "id": 297690753,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1662594847
    },
    {
        "content": "<p>When I spoke with <span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> about this a few weeks ago, he estimated that about 1000 hours of work are needed to make SpiderMonkey AOT usable.  I'm not sure if anyone has actually been working on it lately, though.</p>\n<p>In the meantime, we've been seeing good FaaS performance with the combination of QuickJS + Wizer + Wasmtime that <a href=\"https://github.com/Shopify/javy\">Javy</a> uses.  It won't give you the same kind of throughput for CPU-heavy workloads as AOT compilation, but it's great for fast instantiation and I/O-bound workloads.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Shopify/javy\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ad00dc29feff16b52d40df3e01f3976b51102c2a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303465323963666263373465356638633339616339333363303837383566313365643766663439663130646439343462383033663137306232363562383832302f53686f706966792f6a617679)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Shopify/javy\" title=\"GitHub - Shopify/javy: JS to WebAssembly toolchain\">GitHub - Shopify/javy: JS to WebAssembly toolchain</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to Shopify/javy development by creating an account on GitHub.</div></div></div>",
        "id": 297783812,
        "sender_full_name": "Joel Dice",
        "timestamp": 1662643636
    },
    {
        "content": "<p>Many thanks for pointing me to Javy.</p>\n<p>I experimented with using React renderToString on a moderately complex page from a real app (30KB html rendered.) Timings are just for the renderToString on my MacBook Air M1.</p>\n<p>Deno first iteration: 12-20ms<br>\nDeno subsequent iterations: 2-4ms<br>\nqjs: 18-24ms<br>\njavy: 40-60ms</p>\n<p>AOT would make a substantial difference but his definitely opens up a lot of possibilities.</p>\n<p>I guess running something like Deno in Firecracker is probably faster for this use case for now (they claim a 3-7ms snapshot restore time) but it's more tricky to develop since there's no nested virtualization on M1 Macs or EC2 (though it does work on GCP and Github Codespaces.)</p>",
        "id": 297888166,
        "sender_full_name": "Laurence Rowe",
        "timestamp": 1662680419
    },
    {
        "content": "<p>Anyone compiling quickjs from shopify? I forked the toolchain on javy and enabled file imports. I'm now at a point where im trying to support nodejs apis to make them run in wasm/wasi but it seems like a really daunting task because of the number of libraries. Has anyone encountered this and how did they go about it if you don't mind me asking</p>",
        "id": 310428629,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1668610624
    },
    {
        "content": "<p>We're using Javy's <code>quickjs-wasm-rs</code> crate in our experimental <a href=\"https://github.com/fermyon/spin-js-sdk\">Spin JS SDK</a> project.  So far, we've only implemented a couple of NodeJS APIs, namely <a href=\"https://github.com/fermyon/spin-js-sdk/blob/main/crates/spin-js-engine/src/js_sdk/modules/fsPromises.ts\">fs.readFile and fs.readdir</a> which primarily defer to Rust code for the implementations.  <a href=\"https://github.com/fermyon/spin-js-sdk/blob/main/crates/spin-js-engine/src/lib.rs\">The Rust code</a> also <a href=\"https://github.com/fermyon/spin-js-sdk/blob/c2b75f802df967b2cae628b2ba536c95c057f96d/crates/spin-js-engine/src/lib.rs#L345-L351\">populates <code>process.env</code></a>  with any variables in the WASI environment.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin-js-sdk\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2cceeef211d06cb77a8d0a167a00b7f92180e942\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623032623137613935366433386661626536353138633466393236343564653863343964303636363138346164646439623537633861353062323164656665662f6665726d796f6e2f7370696e2d6a732d73646b)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin-js-sdk\" title=\"GitHub - fermyon/spin-js-sdk\">GitHub - fermyon/spin-js-sdk</a></div><div class=\"message_embed_description\">Contribute to fermyon/spin-js-sdk development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin-js-sdk/blob/main/crates/spin-js-engine/src/js_sdk/modules/fsPromises.ts\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2cceeef211d06cb77a8d0a167a00b7f92180e942\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623032623137613935366433386661626536353138633466393236343564653863343964303636363138346164646439623537633861353062323164656665662f6665726d796f6e2f7370696e2d6a732d73646b)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin-js-sdk/blob/main/crates/spin-js-engine/src/js_sdk/modules/fsPromises.ts\" title=\"spin-js-sdk/fsPromises.ts at main · fermyon/spin-js-sdk\">spin-js-sdk/fsPromises.ts at main · fermyon/spin-js-sdk</a></div><div class=\"message_embed_description\">Contribute to fermyon/spin-js-sdk development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin-js-sdk/blob/main/crates/spin-js-engine/src/lib.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2cceeef211d06cb77a8d0a167a00b7f92180e942\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623032623137613935366433386661626536353138633466393236343564653863343964303636363138346164646439623537633861353062323164656665662f6665726d796f6e2f7370696e2d6a732d73646b)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin-js-sdk/blob/main/crates/spin-js-engine/src/lib.rs\" title=\"spin-js-sdk/lib.rs at main · fermyon/spin-js-sdk\">spin-js-sdk/lib.rs at main · fermyon/spin-js-sdk</a></div><div class=\"message_embed_description\">Contribute to fermyon/spin-js-sdk development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin-js-sdk/blob/c2b75f802df967b2cae628b2ba536c95c057f96d/crates/spin-js-engine/src/lib.rs#L345-L351\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2cceeef211d06cb77a8d0a167a00b7f92180e942\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623032623137613935366433386661626536353138633466393236343564653863343964303636363138346164646439623537633861353062323164656665662f6665726d796f6e2f7370696e2d6a732d73646b)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin-js-sdk/blob/c2b75f802df967b2cae628b2ba536c95c057f96d/crates/spin-js-engine/src/lib.rs#L345-L351\" title=\"spin-js-sdk/lib.rs at c2b75f802df967b2cae628b2ba536c95c057f96d · fermyon/spin-js-sdk\">spin-js-sdk/lib.rs at c2b75f802df967b2cae628b2ba536c95c057f96d · fermyon/spin-js-sdk</a></div><div class=\"message_embed_description\">Contribute to fermyon/spin-js-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 310459980,
        "sender_full_name": "Joel Dice",
        "timestamp": 1668619484
    },
    {
        "content": "<p>We also provide a minimal <code>fetch</code> API, <code>Math.random()</code>, etc.</p>",
        "id": 310460305,
        "sender_full_name": "Joel Dice",
        "timestamp": 1668619594
    },
    {
        "content": "<p>Not sure what your end goal is, but I would recommend adding host APIs (e.g. NodeJS-style or Web API) as you encounter the need for them (e.g. libraries that depend on them) rather than try to tackle them all at once.</p>",
        "id": 310460621,
        "sender_full_name": "Joel Dice",
        "timestamp": 1668619689
    }
]