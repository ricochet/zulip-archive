[
    {
        "content": "<p>I've found a block of code that bails when a resource that is being imported has a static function.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/df542a839b1fc6c1345c68abf5da21ca9ef5f9fe/crates/wasmparser/src/validator/component.rs#L3162-L3170\">https://github.com/bytecodealliance/wasm-tools/blob/df542a839b1fc6c1345c68abf5da21ca9ef5f9fe/crates/wasmparser/src/validator/component.rs#L3162-L3170</a></p>\n<p>If that doesn't expand here, let me do it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"c1\">// Static methods don't have much validation beyond that they must</span>\n<span class=\"w\">            </span><span class=\"c1\">// be a function and the resource name referred to must already be</span>\n<span class=\"w\">            </span><span class=\"c1\">// in this context.</span>\n<span class=\"w\">            </span><span class=\"n\">ComponentNameKind</span>::<span class=\"n\">Static</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">func</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">all_resource_names</span><span class=\"p\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">().</span><span class=\"n\">as_str</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"static resource name is not known in this context\"</span><span class=\"p\">);</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>An issue that was created against <code>cargo-component</code> yesterday, <a href=\"https://github.com/bytecodealliance/cargo-component/issues/284\">https://github.com/bytecodealliance/cargo-component/issues/284</a><br>\nhas a small example that fails.<br>\nThe first WIT is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">test</span>:<span class=\"nc\">exporter</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"k\">static</span>: <span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and the second that wants to use it but fails is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">test</span>:<span class=\"nc\">importer</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">test</span>:<span class=\"nc\">exporter</span><span class=\"o\">/</span><span class=\"n\">exports</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've traced enough to know that it fails because the <code>all_resource_names</code> <code>IndexSet</code> is still empty. The \"my-resource\" string can't be found in it.</p>\n<p>Does anyone here have an idea why it might be empty? I can keep digging in a few hours if the problem isn't immediately obvious to someone. But the two WIT files are very small and the validation assumptions made by the <code>wasmparser</code> validator are still probably fresh in someone's mind.</p>\n<p>Thanks.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/df542a839b1fc6c1345c68abf5da21ca9ef5f9fe/crates/wasmparser/src/validator/component.rs#L3162-L3170\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/577c8d471ecec555c2be45e912c2c6dc5dccd703/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663737643664646435353136343839336561346565303966353235623766303332363939376538323233373963366565353439303461653864623861626334312f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/df542a839b1fc6c1345c68abf5da21ca9ef5f9fe/crates/wasmparser/src/validator/component.rs#L3162-L3170\" title=\"wasm-tools/crates/wasmparser/src/validator/component.rs at df542a839b1fc6c1345c68abf5da21ca9ef5f9fe · bytecodealliance/wasm-tools\">wasm-tools/crates/wasmparser/src/validator/component.rs at df542a839b1fc6c1345c68abf5da21ca9ef5f9fe · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/issues/284\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/04e53ba7520c3d268965253b8bf6e6acbfc52a1e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643830333233643636646566306661373062353539313331313865393365643163346361366231623834316362653063663062393163636334363136356130332f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f6973737565732f323834&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/issues/284\" title=\"Resource Static Methods Cause Build Failure When Imported · Issue #284 · bytecodealliance/cargo-component\">Resource Static Methods Cause Build Failure When Imported · Issue #284 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">Hey all, I ran into an issue where I couldn't import static resource functions which were defined in another wasm component. I have a minimal example attached as a zip file below. In the project, I...</div></div></div>",
        "id": 436919753,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714754037
    },
    {
        "content": "<p>Given this error, do you have a wasm on hand which should be valid but the validator is rejecting it? If so can you share the wasm? (and perhaps how to build the wasm as well)</p>",
        "id": 436924637,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714755899
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/mwF1Uf3Bmd4zxHNoYOdEPclp/exporter.wasm\">exporter.wasm</a></p>",
        "id": 436925497,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714756247
    },
    {
        "content": "<p>as in, that's considered invalid? If I run <code>wasm-tools validate</code> on it then it looks like it validates successfully</p>",
        "id": 436925573,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714756292
    },
    {
        "content": "<p>Agreed. It is valid when I  run was-tools validate on it too.</p>",
        "id": 436925628,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714756320
    },
    {
        "content": "<p>but through a different means it's hitting an error in the validator?</p>",
        "id": 436925700,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714756338
    },
    {
        "content": "<p>But it fails when the second component is being built and wants to import it.</p>",
        "id": 436925717,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714756348
    },
    {
        "content": "<p>do you have a wasm for the second component?</p>",
        "id": 436925750,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714756366
    },
    {
        "content": "<p>Well, I do if you count the case where I commented out that check that bails. You want that one?</p>",
        "id": 436925796,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714756398
    },
    {
        "content": "<p>sure yeah</p>",
        "id": 436925839,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714756419
    },
    {
        "content": "<p>(still trying to catch up on the context here myself)</p>",
        "id": 436925858,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714756432
    },
    {
        "content": "<p>this may also be a bug in wasm-compose where it's not generating a resource type when it should</p>",
        "id": 436926055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714756496
    },
    {
        "content": "<p>Well, that second wasm binary is built, even when the <code>cargo component build</code> fails with the error message. I guess it is checking things after the fact.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">importer</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">rt</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">24.0</span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">importer</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">private</span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"kr\">try</span><span class=\"o\">/</span><span class=\"n\">min</span><span class=\"o\">-</span><span class=\"n\">ex</span><span class=\"o\">/</span><span class=\"n\">importer</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">release</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">profile</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">optimized</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.32</span><span class=\"n\">s</span>\n<span class=\"w\">    </span><span class=\"n\">Creating</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">importer</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">output</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">export</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"k\">static</span><span class=\"p\">]</span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"k\">static</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">known</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0xb</span><span class=\"p\">)</span>\n<span class=\"w\"> </span><span class=\"n\">importer</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">l</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">'*</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">'</span><span class=\"p\">)</span>\n<span class=\"o\">-</span><span class=\"n\">rwxr</span><span class=\"o\">-</span><span class=\"n\">xr</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">frank</span><span class=\"w\">  </span><span class=\"n\">wheel</span><span class=\"w\">   </span><span class=\"mf\">1.6</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">May</span><span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">13</span>:<span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">importer</span><span class=\"o\">-</span><span class=\"n\">cc9d5b41ee4288ab</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"o\">-</span><span class=\"n\">rwxr</span><span class=\"o\">-</span><span class=\"n\">xr</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">frank</span><span class=\"w\">  </span><span class=\"n\">wheel</span><span class=\"w\">   </span><span class=\"mf\">1.6</span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"n\">May</span><span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">13</span>:<span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">importer</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>It also passes the wasm-tools validate on its own.</p>",
        "id": 436926594,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714756721
    },
    {
        "content": "<p>I can confirm (as the one who added it) that <code>wasm-compose</code>'s resource support is... less than robust.  I've got some patches lying around for other issues I've run into, but haven't prioritized getting them upstreamed, partly because it seems like <code>wac</code> is where the focus is these days.  But sounds like there's a problem even before <code>wasm-compose</code> is involved?</p>",
        "id": 436926714,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714756785
    },
    {
        "content": "<p>Or does <code>cargo-component</code> use <code>wasm-compose</code> behind the scenes?</p>",
        "id": 436927217,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714756986
    },
    {
        "content": "<p>I believe cargo-component uses wasm-compose for component dependencies. I believe <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> was hoping to move it over to use wac at some point in the nearish future.</p>",
        "id": 436928147,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1714757371
    },
    {
        "content": "<p>It's true that the second wasm crate, the one named <code>importer</code> is using the first crate named <code>exporter</code>. But now I see the second wasm crate build fails with the same message, even when the first one's crate has just had 'cargo clean' run it so there is no target in it, no \".wasm\" to pick up.  So I don't think this is a compose issue - at least not the composing of two components.</p>",
        "id": 436928498,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714757492
    },
    {
        "content": "<p>can you get a copy of <code>importer.wasm</code> perhaps? The raw output of rustc before cargo-component turns it into a component?</p>",
        "id": 436928949,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714757658
    },
    {
        "content": "<p>It is the <code>cargo component build</code> step in the second crate that fails because the wasmparser has found the name of the resource isn't found in the list it thinks it setup for validation. The comment around the check for static functions of a resource says there isn't much to check except that the resource name was known. Well, here it isn't known. I don't know if it should have been known or if the logic behind the check is wrong.</p>\n<p>I don't see something like this being tested in the cargo-component crate.</p>",
        "id": 436928970,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714757666
    },
    {
        "content": "<p>this may also be a bug in wit-component where it's producing an invalid component</p>",
        "id": 436928971,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714757666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590805\">Ryan Levick (rylev)</span> <a href=\"#narrow/stream/206238-general/topic/wasmparser.20assumptions.20about.20Resources.20with.20static.20functions/near/436928147\">said</a>:</p>\n<blockquote>\n<p>I believe cargo-component uses wasm-compose for component dependencies. I believe <span class=\"user-mention silent\" data-user-id=\"253989\">Peter Huene</span> was hoping to move it over to use wac at some point in the nearish future.</p>\n</blockquote>\n<p>There's no use of <code>wasm-compose</code> for component dependencies; <code>cargo-component</code> just synthesizes imports for each component's exports in the target world for bindings generation.</p>\n<p>I haven't looked too closely at this issue, but there might be something wrong with what it's giving <code>wit-bindgen</code>.</p>",
        "id": 436929133,
        "sender_full_name": "Peter Huene",
        "timestamp": 1714757742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/wasmparser.20assumptions.20about.20Resources.20with.20static.20functions/near/436928949\">said</a>:</p>\n<blockquote>\n<p>can you get a copy of <code>importer.wasm</code> perhaps? The raw output of rustc before cargo-component turns it into a component?</p>\n</blockquote>\n<p>I would be happy too. But I don't know the command sequence for that.</p>",
        "id": 436929230,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714757765
    },
    {
        "content": "<p>run <code>cargo build --target wasm32-wasi</code>, the <code>.wasm</code> in <code>targets/wasm32-wasi/debug</code> will be a module</p>",
        "id": 436929330,
        "sender_full_name": "Peter Huene",
        "timestamp": 1714757811
    },
    {
        "content": "<p>Hmm. That created exactly the same wasm files. I ran <code>sum</code> on them.</p>",
        "id": 436929858,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714757992
    },
    {
        "content": "<p>If it's failing to compentize with <code>cargo component build</code>, the original .wasm will still be present too</p>",
        "id": 436929971,
        "sender_full_name": "Peter Huene",
        "timestamp": 1714758028
    },
    {
        "content": "<p>Maybe the one I already uploaded was the first step? When it is a raw module?</p>",
        "id": 436930014,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714758049
    },
    {
        "content": "<p>i think you uploaded <code>exporter.wasm</code> and Alex was requesting <code>importer.wasm</code>, but maybe I missed it</p>",
        "id": 436930094,
        "sender_full_name": "Peter Huene",
        "timestamp": 1714758092
    },
    {
        "content": "<p>You are right. I don't see the second one in the stream now either. Thought I had uploaded it. Here it is again. And then the zip file that has both crates in it that came with the original issue.</p>",
        "id": 436930272,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714758170
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/Helrc3d42m7uO5y33-z35i_O/importer.wasm\">importer.wasm</a></p>",
        "id": 436930390,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714758218
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/UU4pWBxtbZ-QbTZO_HzVOLKs/min-ex.zip\">min-ex.zip</a></p>",
        "id": 436930408,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714758229
    },
    {
        "content": "<p>ok I can reproduce the error with <code>wasm-tools component new ~/Downloads/importer.wasm --adapt ./wasi_snapshot_preview1.reactor.wasm</code></p>",
        "id": 436930965,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714758460
    },
    {
        "content": "<p>would you mind opening an issue on the wasm-tools repo with <code>importer.wasm</code> and that comand line for this?</p>",
        "id": 436930999,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714758475
    },
    {
        "content": "<p>I'll try to get to investigating what's going on soon</p>",
        "id": 436931033,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714758483
    },
    {
        "content": "<p>Sure. No problem. Glad you don't think it is something obviously wrong with the WIT files or the Cargo.toml files. Those are always the first places someone can go wrong when it is actually operator error.</p>",
        "id": 436931294,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714758596
    },
    {
        "content": "<p>no yeah I suspect this is a bug in wit-component</p>",
        "id": 436931539,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714758696
    },
    {
        "content": "<p>Definitely not operator error and thanks for reporting it!</p>",
        "id": 436931543,
        "sender_full_name": "Peter Huene",
        "timestamp": 1714758698
    },
    {
        "content": "<p>I think I have a grasp on the shape of the bug too just need some time later to dig in properly</p>",
        "id": 436931560,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714758707
    },
    {
        "content": "<p>Here is the <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1529\">issue</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1529\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/341d33717833c5a61518f8f2ef1709a11644e81e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663939393662393665663539653665363465326233396237666136653663316332643565653166376335373234656532306361383532656262333163366337642f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31353239&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1529\" title=\"wit-component: static Resource function causes Validate to fail · Issue #1529 · bytecodealliance/wasm-tools\">wit-component: static Resource function causes Validate to fail · Issue #1529 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Per the Zulip discussion this afternoon, this is opened against wasm-tools. The original issue, against cargo-component, included the zip file to allow easy reproduction of the problem. The importe...</div></div></div>",
        "id": 436934074,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1714759567
    },
    {
        "content": "<p>thanks!</p>",
        "id": 436938143,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714761140
    },
    {
        "content": "<p>ok turned out to be a pretty easy fix -- <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1530\">https://github.com/bytecodealliance/wasm-tools/pull/1530</a> -- thanks again for the report!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1530\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c1ca0a822682a1e3708876a166b02528e3580bfa/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623433363865373162613864343833386536336564323666383261656465376562343063636631356534393037396132663236623466303438666531326264612f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31353330&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1530\" title=\"Fix creating components with only static methods on resources by alexcrichton · Pull Request #1530 · bytecodealliance/wasm-tools\">Fix creating components with only static methods on resources by alexcrichton · Pull Request #1530 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Previously the resource itself wasn't imported which meant that the [static] function did not pass validation. This commit updates the liveness of these functions to include the resource that the s...</div></div></div>",
        "id": 436948135,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714765223
    },
    {
        "content": "<p>Thanks alex!</p>",
        "id": 436948271,
        "sender_full_name": "Peter Huene",
        "timestamp": 1714765284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704709\">Frank Rehwinkel</span> has marked this topic as resolved.</p>",
        "id": 437055642,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714860579
    }
]