[
    {
        "content": "<p>I've been trying to google this for 2 days, and I am having a hard time figuring out a working example of how to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"c1\">// module.cpp</span>\n<span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;cstdio&gt;</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyStruct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">process_data</span><span class=\"p\">(</span><span class=\"n\">MyStruct</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">structs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">MyStruct</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">structs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"a: %d, b: %d</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"c1\">// host.cpp</span>\n<span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">MyStruct</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">  </span><span class=\"c1\">// Initialize WASM/WASI environment, load \"module\" file</span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"k\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Module</span><span class=\"p\">(...);</span>\n<span class=\"w\">  </span><span class=\"k\">auto</span><span class=\"w\"> </span><span class=\"n\">process_data_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">get</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span><span class=\"o\">::</span><span class=\"n\">Func</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"process_data\"</span><span class=\"p\">));</span>\n<span class=\"w\">  </span><span class=\"n\">process_data_fn</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cm\">/* don't think I can just pass a pointer to host memory here */</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>From what I've read, I _think_ I can maybe used \"Shared Memory\" to copy the structs and pass a pointer to the memory?<br>\nOr maybe I can export <code>malloc</code> from the WASM module and call that from host to get a pointer to a buffer, which I can then copy into?</p>\n<p>I've also read something about using <code>__heap_base</code> somehow, but I didn't really follow this.</p>\n<p>Any advice would be greatly appreciated, thank you <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 378945523,
        "sender_full_name": "Gavin Ray",
        "timestamp": 1690405377
    },
    {
        "content": "<p>Wasm cannot access arbitrary host memory by design. You will need to malloc space in the guest (which means the guest module needs to export a malloc function and your host code needs to know the name it is exported under) and then copy the data from the host to the guest.</p>\n<p>I suggest avoiding <code>int</code> and other types that can have different sizes on different architectures for this sort of thing, since the host is 64-bit and the guest Wasm is 32-bit.</p>\n<p>Even better, use the component model and wit-bindgen rather than rolling your own custom conventions here.</p>",
        "id": 378946485,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1690405687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> Thank you for the reply!</p>\n<p>Is there any way to share a memory space between host code and a WASM module?</p>\n<p>Also, I had not heard of <code>wit-bindgen</code> or the component model before, I'll check these out <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 378946824,
        "sender_full_name": "Gavin Ray",
        "timestamp": 1690405798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"635975\">Gavin Ray</span> <a href=\"#narrow/stream/206238-general/topic/How.20to.20pass.20a.20pointer.20to.20array.20of.20structs.20from.20C.20-.3E.20WASM/near/378946824\">said</a>:</p>\n<blockquote>\n<p>Is there any way to share a memory space between host code and a WASM module?</p>\n</blockquote>\n<p>The Wasm's linear memory is in the host process's address space, and you <em>can</em> do things like implement a custom memory creator that gives out regions of memory you want to share with the guest: <a href=\"https://docs.rs/wasmtime/latest/wasmtime/trait.MemoryCreator.html\">https://docs.rs/wasmtime/latest/wasmtime/trait.MemoryCreator.html</a></p>\n<p>But the guest and host ultimately don't really have knowledge of each other's ABI details (like where static globals are placed in memory, what calling conventions to use, how struct fields are arranged, what malloc/free to use, etc) and this is ultimately going to make trying to share memory together painful. Not impossible, but both sides will have to be written specifically to interact well with each other, and you'll essentially be inventing your own custom ABI details for all this stuff.</p>\n<p>I recommend going with the component model, which standardizes these things for you. It is shared-nothing, in that different Wasm modules and the host are all sandboxed from each other and no one exports their memory or exposes internal details, so you can't share views of memory that update as either side makes changes. But you get nice security properties and a lot of tooling that makes passing complex data around easy.</p>",
        "id": 378947876,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1690406184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> I managed to get it to work like this:<br>\n<a href=\"https://gist.github.com/GavinRay97/8e83758cf8c1c9d886df154ee2a6b7d7\">https://gist.github.com/GavinRay97/8e83758cf8c1c9d886df154ee2a6b7d7</a></p>\n<p>One thing I don't understand though, is that if I remove the functions <code>_malloc</code> and <code>_free</code> from <code>module.cpp</code>, then it ceases to work because it can't find the function <code>malloc</code>.</p>\n<p>Is this some sort of automagic thing with underscored names?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/GavinRay97/8e83758cf8c1c9d886df154ee2a6b7d7\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/GavinRay97/8e83758cf8c1c9d886df154ee2a6b7d7\" title=\"WASM copy structs to memory from host -&gt; module\">WASM copy structs to memory from host -&gt; module</a></div><div class=\"message_embed_description\">WASM copy structs to memory from host -&gt; module. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 378954827,
        "sender_full_name": "Gavin Ray",
        "timestamp": 1690408780
    },
    {
        "content": "<p>Ah I think it may actually be because <code>malloc</code> and <code>free</code> aren't exported unless used somewhere</p>",
        "id": 378956001,
        "sender_full_name": "Gavin Ray",
        "timestamp": 1690409250
    }
]