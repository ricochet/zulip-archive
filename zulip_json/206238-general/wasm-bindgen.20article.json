[
    {
        "content": "<p>Hello! Not sure if this is the best place for this but I found nothing more specific for wasm-bindgen... So, I'm asking here, where I guess most people involved with wasm hang around.</p>\n<p>Last week at a Rust meetup in Zurich, I gave a talk about my experiences with wasm-bindgen. Once the video is uploaded by the organizers, I will publish a written blog post on the same topic, too.</p>\n<p>I wondered if any contributors of wasm-bindgen would want to check my draft for mistakes before I publish it. The current draft is available as an unlisted post on my blog: <a href=\"https://www.jakobmeier.ch/wasm-road-4\">Rust and JS is the perfect pairing with no issues at all</a></p>\n<p>I speak and write about wasm-bindgen because I love using it. However, this article is a bit cynical, so I want to ensure I am not misrepresenting anything.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.jakobmeier.ch/wasm-road-4\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3a0ff726b52930c6294e26079353dfec454b641e/68747470733a2f2f7777772e6a616b6f626d656965722e63682f32312f7769702e6a7067&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.jakobmeier.ch/wasm-road-4\" title=\"Rust and JS is the perfect pairing with no issues at all\">Rust and JS is the perfect pairing with no issues at all</a></div><div class=\"message_embed_description\">Technologies in practice</div></div></div>",
        "id": 483223862,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732010480
    },
    {
        "content": "<p>Hey, <code>wasm-bindgen</code> maintainer here!<br>\nWill manage to take a look tomorrow probably.<br>\nThank you!</p>",
        "id": 483236656,
        "sender_full_name": "daxpedda",
        "timestamp": 1732014351
    },
    {
        "content": "<p>Looks like you have a broken video tag after</p>\n<blockquote>\n<p>A quick recompilation and a reload of the page later, I now see the number increase as I move the cursor. But somehow, it is stuck at 2 events. This time, there is no error in the console. What is the issue?</p>\n</blockquote>\n<p>It gets rendered as regular text. Likely because of a missing space.</p>\n<p>Edit: Same issue in a couple of other places.</p>",
        "id": 483674806,
        "sender_full_name": "bjorn3",
        "timestamp": 1732189328
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>, it should be fixed now.</p>",
        "id": 483688812,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732193617
    },
    {
        "content": "<p>Just gave it a quick rundown:</p>\n<ul>\n<li>\"Javascript\" should be written \"Java<strong>S</strong>cript\" (see e.g. <a href=\"https://en.wikipedia.org/wiki/JavaScript\">Wikipedia</a>).</li>\n<li>Don't use <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes\">event handler attributes</a>. Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a> instead.</li>\n<li>You should probably not use <code>Data.now()</code>, which is a. more accurate (<code>f64</code>) and b. not susceptible to local time changes, e.g. summer/winter time or simply time corrections by the system. Instead use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\"><code>Performance.now()</code></a>. However, you can simply use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\"><code>Event.timeStamp</code></a>, which even more accurately represents exactly when this event happend.</li>\n</ul>\n<p>Its interesting to see such a somber review of the interaction between WBG and JS, I basically never use that side of WBG. Especially the getter part hit bad. One would think that there should a sort of of non-<code>Copy</code> getter, that actually gives you a reference. But the lifetime issues around that would be absolutely abysmal.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://en.wikipedia.org/wiki/JavaScript\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/291866289509fdd8e88271e44c8ede46f17f58ca/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f612f61342f4a6176615363726970745f636f64652e706e672f36343070782d4a6176615363726970745f636f64652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://en.wikipedia.org/wiki/JavaScript\" title=\"JavaScript - Wikipedia\">JavaScript - Wikipedia</a></div><div class=\"message_embed_description\">This is an accepted version of this page</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/995c0c58fb542e2180e01753cfa3c88c39d0272c/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e64383933353235613466623566623166363761322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#event_handler_attributes\" title=\"HTML attribute reference - HTML: HyperText Markup Language | MDN\">HTML attribute reference - HTML: HyperText Markup Language | MDN</a></div><div class=\"message_embed_description\">Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/995c0c58fb542e2180e01753cfa3c88c39d0272c/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e64383933353235613466623566623166363761322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\" title=\"EventTarget: addEventListener() method - Web APIs | MDN\">EventTarget: addEventListener() method - Web APIs | MDN</a></div><div class=\"message_embed_description\">The addEventListener() method of the EventTarget interface\n  sets up a function that will be called whenever the specified event is delivered to the target.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/995c0c58fb542e2180e01753cfa3c88c39d0272c/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e64383933353235613466623566623166363761322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\" title=\"Performance: now() method - Web APIs | MDN\">Performance: now() method - Web APIs | MDN</a></div><div class=\"message_embed_description\">The performance.now() method returns a high resolution timestamp in milliseconds. It represents the time elapsed since Performance.timeOrigin (the time when navigation has started in window contexts, or the time when the worker is run in Worker and ServiceWorker contexts).</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/995c0c58fb542e2180e01753cfa3c88c39d0272c/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e64383933353235613466623566623166363761322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\" title=\"Event: timeStamp property - Web APIs | MDN\">Event: timeStamp property - Web APIs | MDN</a></div><div class=\"message_embed_description\">The timeStamp read-only property of the Event interface returns the time (in milliseconds) at which the event was created.</div></div></div>",
        "id": 484044145,
        "sender_full_name": "daxpedda",
        "timestamp": 1732349801
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"612401\">@daxpedda</span> ! I have incorporated your feedback in my post. Still waiting for the meetup organizer to upload the video, though. I will post here again when I publish the post.</p>",
        "id": 484938495,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732805679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"612401\">daxpedda</span> <a href=\"#narrow/channel/206238-general/topic/wasm-bindgen.20article/near/484044145\">said</a>:</p>\n<blockquote>\n<p>Its interesting to see such a somber review of the interaction between WBG and JS, I basically never use that side of WBG. Especially the getter part hit bad. One would think that there should a sort of of non-<code>Copy</code> getter, that actually gives you a reference. But the lifetime issues around that would be absolutely abysmal.</p>\n</blockquote>\n<p>I hope it's not too somber. I mean, the article is directed to point our problems specifically but I still want it to be fair.</p>\n<p>And yeah, regarding the lifetimes, I think I can see exactly what you mean.</p>",
        "id": 484938840,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732805800
    },
    {
        "content": "<p>Its absolutely fair. Thank you for putting in the work and sharing!<br>\nIt is truly appreciated!</p>",
        "id": 484939070,
        "sender_full_name": "daxpedda",
        "timestamp": 1732805875
    },
    {
        "content": "<p>Regrading the lifetime issues, I initially looked at <a href=\"https://github.com/rustwasm/wasm-bindgen/issues/19\">https://github.com/rustwasm/wasm-bindgen/issues/19</a><br>\nI believe this could be a first step towards non-copy getters.</p>\n<p>Do you perhaps know, has there been more work or ideas in the direction of allowing references to Rust owned values on the JS side?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/wasm-bindgen/issues/19\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f10a16af6e991d179b90fabc6f61d23a10b6a196/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303931376333326163336634346333663166663231303362326266396236633730326331633936393435636331623665643562346238343365383837306438352f727573747761736d2f7761736d2d62696e6467656e2f6973737565732f3139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/wasm-bindgen/issues/19\" title=\"Rust struct reference in js · Issue #19 · rustwasm/wasm-bindgen\">Rust struct reference in js · Issue #19 · rustwasm/wasm-bindgen</a></div><div class=\"message_embed_description\">If we wanted to pass a temporary reference to a struct defined in Rust to a js function, this should work. The user defines Foo like so: #[wasm_bindgen] pub struct Foo { internal: i32, } #[wasm_bin...</div></div></div>",
        "id": 484940057,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732806148
    },
    {
        "content": "<p>While <a href=\"https://github.com/rustwasm/wasm-bindgen/issues/19\">https://github.com/rustwasm/wasm-bindgen/issues/19</a> would be simple to implement, and the checks are in place already, it would be a major footgun to use in JS. But yes, we already knew this could work.</p>\n<p>Just vaguely remembered <a href=\"https://github.com/rustwasm/wasm-bindgen/pull/4118\">https://github.com/rustwasm/wasm-bindgen/pull/4118</a> and the corresponding <a href=\"https://github.com/tc39/proposal-explicit-resource-management\">ECMAScript explicit resource management proposal</a>. I started digging a bit and found <a href=\"https://github.com/tc39/proposal-explicit-resource-management/issues/195\">https://github.com/tc39/proposal-explicit-resource-management/issues/195</a>. So the current proposal can't enforce the <code>using</code> scope. But apparently there is a workaround: <a href=\"https://github.com/tc39/proposal-explicit-resource-management/issues/159#issuecomment-1630532470\">https://github.com/tc39/proposal-explicit-resource-management/issues/159#issuecomment-1630532470</a>.</p>\n<p>So maybe this could be used to solve this issue?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/wasm-bindgen/issues/19\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f10a16af6e991d179b90fabc6f61d23a10b6a196/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303931376333326163336634346333663166663231303362326266396236633730326331633936393435636331623665643562346238343365383837306438352f727573747761736d2f7761736d2d62696e6467656e2f6973737565732f3139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/wasm-bindgen/issues/19\" title=\"Rust struct reference in js · Issue #19 · rustwasm/wasm-bindgen\">Rust struct reference in js · Issue #19 · rustwasm/wasm-bindgen</a></div><div class=\"message_embed_description\">If we wanted to pass a temporary reference to a struct defined in Rust to a js function, this should work. The user defines Foo like so: #[wasm_bindgen] pub struct Foo { internal: i32, } #[wasm_bin...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/wasm-bindgen/pull/4118\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d0c5d7abfffcbadfdb2208a9ef1090685a18dd9e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656131373166393631636133376534336238626263323137333030376363303532653961666433323835323233633430616638613535343839663033336630382f727573747761736d2f7761736d2d62696e6467656e2f70756c6c2f34313138&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/wasm-bindgen/pull/4118\" title=\"Generate Symbol.dispose on classes by H-Plus-Time · Pull Request #4118 · rustwasm/wasm-bindgen\">Generate Symbol.dispose on classes by H-Plus-Time · Pull Request #4118 · rustwasm/wasm-bindgen</a></div><div class=\"message_embed_description\">Implements #4117 (Explicit Resource Management support).\nThe main things I can think of for additional tests here are:\n\nA basic Deno-only test involving using.\nThe polyfill mechanism (not worth it ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tc39/proposal-explicit-resource-management\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/87d0055e17f586ea0cc6c0966cae7839b0222cd7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656238656662636630616436623461343237653062326434643262663932373336386638373135346631646437383731353036353066363161656638383638652f746333392f70726f706f73616c2d6578706c696369742d7265736f757263652d6d616e6167656d656e74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tc39/proposal-explicit-resource-management\" title=\"GitHub - tc39/proposal-explicit-resource-management: ECMAScript Explicit Resource Management\">GitHub - tc39/proposal-explicit-resource-management: ECMAScript Explicit Resource Management</a></div><div class=\"message_embed_description\">ECMAScript Explicit Resource Management. Contribute to tc39/proposal-explicit-resource-management development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tc39/proposal-explicit-resource-management/issues/195\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1e24d4eb27c76456aeb8c546124d7607f88534e3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383031323835653265633963643432656265633539663363306439653830373437306636646137613231373263323436356431643632663134313537303630642f746333392f70726f706f73616c2d6578706c696369742d7265736f757263652d6d616e6167656d656e742f6973737565732f313935&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tc39/proposal-explicit-resource-management/issues/195\" title=\"`[Symbol.enter]()` Follow-on proposal · Issue #195 · tc39/proposal-explicit-resource-management\">`[Symbol.enter]()` Follow-on proposal · Issue #195 · tc39/proposal-explicit-resource-management</a></div><div class=\"message_embed_description\">There has been some interest in changing the behavior of using and await using slightly to guide users towards using over const. In #49 there is a more comprehensive discussion about the possibilit...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tc39/proposal-explicit-resource-management/issues/159#issuecomment-1630532470\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/16a5e8f0ed6c71efef1f9699401df5afd5b67abe/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616361613566643531623335313566353438363330646363613166353865333664663536373838623132386434643162383761666135353638383861353931632f746333392f70726f706f73616c2d6578706c696369742d7265736f757263652d6d616e6167656d656e742f6973737565732f313539&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tc39/proposal-explicit-resource-management/issues/159#issuecomment-1630532470\" title=\"Disposable is leaky by default · Issue #159 · tc39/proposal-explicit-resource-management\">Disposable is leaky by default · Issue #159 · tc39/proposal-explicit-resource-management</a></div><div class=\"message_embed_description\">I'm a bit uneasy with the fact that it's allowed to create a Disposable without registering its dispose method to some kind of disposal scope, either with using on the current scope, or add to some...</div></div></div>",
        "id": 484950465,
        "sender_full_name": "daxpedda",
        "timestamp": 1732809596
    },
    {
        "content": "<p>Thanks for gathering the links! Very interesting, I had no idea about the <code>using</code> proposal. I can see how this could help with a much cleaner solution to provide non-copy getters, especially with the work-around to enforce proper usage.</p>\n<p>I'll need to think about it some more but I might come back to this topic later. For now, just one last question. Without promising anything, yet, would there be a base level of interest for contributions to wasm-bindgen regarding non-copy getter implementations?</p>",
        "id": 484966373,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732816143
    },
    {
        "content": "<p>You mean for reviewing? Yes.<br>\nBut it needs a good proposal and probably a lot of explaining, I'm definitely no expert with JS.</p>",
        "id": 484966504,
        "sender_full_name": "daxpedda",
        "timestamp": 1732816212
    },
    {
        "content": "<p>Ok, yeah sounds good <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 484966824,
        "sender_full_name": "Jakob Meier (jakmeier)",
        "timestamp": 1732816412
    }
]