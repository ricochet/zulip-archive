[
    {
        "content": "<p>Is there a way to unwrap_list and know the inner wasm:component:types:Type associated with it with the inner handle? I'm running into this scenario trying to map some things with lists of lists (nested lists)? I'm probably missing something. I didn't find a good test w/ inner lists and wit as well.</p>",
        "id": 329785913,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1677175506
    },
    {
        "content": "<p>good q, the only test i can find that uses list&lt;list&lt;string&gt;&gt; is in wit-bindgen</p>",
        "id": 329787301,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677175903
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists/wasm.rs#L100\">https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists/wasm.rs#L100</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists/wasm.rs#L100\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d844bad084f16b5ed4c2e82b268ac36f565dc664\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656165396638393533633966643535393465653863336662333564643365303666373737656262643836643435663831643835363663346166373431303865372f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists/wasm.rs#L100\" title=\"wit-bindgen/wasm.rs at main · bytecodealliance/wit-bindgen\">wit-bindgen/wasm.rs at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/wasm.rs at main · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 329787492,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677175950
    },
    {
        "content": "<p>when using wit-bindgen, we present the list as a Vec&lt;Vec&lt;String&gt;&gt;, so the api definitely works. you can use <code>cargo expand</code> to see how the wasmtime::component::binden! macro generates the code that goes from component::Val to that</p>",
        "id": 329787830,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677176060
    },
    {
        "content": "<p>does that answer your question? or is there something particular about the types representation of lists that is missing here</p>",
        "id": 329787993,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677176109
    },
    {
        "content": "<p>it looks to me like if you have a <code>ty: Type</code> and its a list, the elem type is then <code>ty.unwrap_list().ty()</code></p>",
        "id": 329788417,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677176250
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>. I'll double check the bindgen. I was using <code>ty.unwrap_list().ty()</code> while trying to reuse the echo component stuff in the wasmtime repo test suite. It was just giving me the inner list handler at index 0 (first run returns 1). But, I think I maybe got it. :)</p>",
        "id": 329789386,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1677176538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> a Q in addition then. In the current wit / component spec, would there be any way to encode heterogeneous lists? Or is that eve something to think about :)</p>",
        "id": 329790481,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1677176880
    },
    {
        "content": "<p>theres no dynamic types in component model, so youd need to make an enum of the possible variants in your hlist</p>",
        "id": 329790676,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677176938
    },
    {
        "content": "<p>theres also no recursive types</p>",
        "id": 329790724,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677176957
    },
    {
        "content": "<p>these do eliminate some cool possibilities, but theyre reasonable restrictions for a lot of \"real world\" programs for now, and make it a lot more tractable to ship this thing :)</p>",
        "id": 329790883,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677177005
    },
    {
        "content": "<p>Yep, figured <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>. I'm writing an IR from something that had recursive types and mapping that, with runtime checking, to wasmtime:component Vals. Encoding the enum of variants is next on my list.</p>",
        "id": 329791567,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1677177190
    },
    {
        "content": "<p>Thanks again <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span></p>",
        "id": 329797012,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1677178892
    }
]