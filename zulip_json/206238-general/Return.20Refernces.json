[
    {
        "content": "<p>Hi, folks. for various reasons, I dropped work on my wasmtime-java integration, but am picking it back up now. Some tests that were working before have now stopped working, and it looks like something changed in the Rust -&gt; WASM compilation in regards to mutable pointers (byte array out params). Basically, generated WASM import declarations are not generating the i32 input param for that field. Do folks know if something changed in a recent(ish) version of rustc/llvm that might have broken this? Thanks!</p>",
        "id": 237676763,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314237
    },
    {
        "content": "<p>I updated everything to current stable releases for reference...</p>",
        "id": 237676970,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314310
    },
    {
        "content": "<p>Here's an example, the <code>response</code> param doesn't end up in the generated wasm interface: <a href=\"https://github.com/bluejekyll/wasmtime-java/blob/main/tests/strings/src/lib.rs#L6\">https://github.com/bluejekyll/wasmtime-java/blob/main/tests/strings/src/lib.rs#L6</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bluejekyll/wasmtime-java/blob/main/tests/strings/src/lib.rs#L6\" style=\"background-image: url(https://opengraph.githubassets.com/2032e36a508df867e69e4802857c3f0179edf67a97d758ffc7888ea3108399b1/bluejekyll/wasmtime-java)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bluejekyll/wasmtime-java/blob/main/tests/strings/src/lib.rs#L6\" title=\"bluejekyll/wasmtime-java\">bluejekyll/wasmtime-java</a></div><div class=\"message_embed_description\">Wasmtime bindings for Java. Contribute to bluejekyll/wasmtime-java development by creating an account on GitHub.</div></div></div>",
        "id": 237677362,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314440
    },
    {
        "content": "<p>You might be running into how the wasm32-wasi target had its ABI updated to match C perhaps? Do you have the signature of the function in question?</p>",
        "id": 237677374,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314444
    },
    {
        "content": "<p>ah yeah that's the ABI update, the first argument is now passed indirectly on the wasi target rather than by-value as two params</p>",
        "id": 237677446,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314469
    },
    {
        "content": "<p>(assuming WasmSlice is two u32 values)</p>",
        "id": 237677466,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314480
    },
    {
        "content": "<p>Yes, WasmSlice is two u32's</p>",
        "id": 237677494,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314497
    },
    {
        "content": "<p>We we can't do repr(C) type params (anymore)?</p>",
        "id": 237677580,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314528
    },
    {
        "content": "<p>you can, the ABI is just different</p>",
        "id": 237677715,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314587
    },
    {
        "content": "<p>clang decided that the ABI for any aggregate parameter is for it to be passed indirectly</p>",
        "id": 237677749,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314598
    },
    {
        "content": "<p>Also, this RFC is highly relevant: <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">https://github.com/bytecodealliance/rfcs/pull/11</a></p>\n<p>It'll be a bit until it's fully finalized and implemented, but not <em>that</em> long either</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rfcs/pull/11\" style=\"background-image: url(https://opengraph.githubassets.com/ab581c9773383dd38c445edc0942a7e7318830d868f77f9022c24d240706a234/bytecodealliance/rfcs/pull/11)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rfcs/pull/11\" title=\"RFC: Redesign Wasmtime's API by alexcrichton · Pull Request #11 · bytecodealliance/rfcs\">RFC: Redesign Wasmtime's API by alexcrichton · Pull Request #11 · bytecodealliance/rfcs</a></div><div class=\"message_embed_description\">Rendered\n\nOverhaul the wasmtime crate&#39;s API to improve it along a number of vectors:\n\nGreatly improve the multithreading story in all languages (Rust, C, Go, ...),\nnamely enabling safe usage of...</div></div></div>",
        "id": 237677767,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1620314606
    },
    {
        "content": "<p>oh I don't think this affects the problem <span class=\"user-mention\" data-user-id=\"350398\">@Benjamin Fry</span> is running into, I think it's about compiling Rust to wasm instead</p>",
        "id": 237677900,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/Return.20Refernces/near/237677715\">said</a>:</p>\n<blockquote>\n<p>you can, the ABI is just different</p>\n</blockquote>\n<p>Do you perhaps have a link to an example?</p>",
        "id": 237677911,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314654
    },
    {
        "content": "<p>there's an upstream issue about this ABI detail as well -- <a href=\"https://github.com/WebAssembly/tool-conventions/issues/88\">https://github.com/WebAssembly/tool-conventions/issues/88</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/issues/88\" style=\"background-image: url(https://opengraph.githubassets.com/574a08b8611aef070b60f98df5546deb124e462d0325bf9cbf399e6b93872374/WebAssembly/tool-conventions/issues/88)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/issues/88\" title=\"Pass small structs in parameters instead of memory · Issue #88 · WebAssembly/tool-conventions\">Pass small structs in parameters instead of memory · Issue #88 · WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Currently clang will pass any structure with more than a single element indirectly (as LLVM byval). Many other ABIs pass small structures in registers, potentially improving performance. We could d...</div></div></div>",
        "id": 237677922,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314657
    },
    {
        "content": "<p>the funtion you have there is translated to <code>(import \"test\" \"say_hello_to_java\" (func (param i32 i32)))</code></p>",
        "id": 237678019,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314697
    },
    {
        "content": "<p>where the first <code>i32</code> points to memory where there's two consecutive <code>i32</code> values, and the second <code>i32</code> is the return pointer from the signature</p>",
        "id": 237678102,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314721
    },
    {
        "content": "<p>oh, right. The part I was referring to was this:</p>\n<blockquote>\n<p>for various reasons, I dropped work on my wasmtime-java integration, but am picking it back up now.</p>\n</blockquote>",
        "id": 237678133,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1620314728
    },
    {
        "content": "<p>oh heh indeed it is highly relevant for that part :)</p>",
        "id": 237678183,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314748
    },
    {
        "content": "<p>similarly for your <code>greet</code> function that gets translated to <code>(export \"greet\" (func (param i32)))</code></p>",
        "id": 237678276,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314771
    },
    {
        "content": "<p>which means that to call the <code>greet</code> function you first have to allocate space for the <code>WasmSlice</code> struct in memory, then fill in the struct, then pass the pointer</p>",
        "id": 237678329,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620314793
    },
    {
        "content": "<p>Yeah, I understand the issue now, thanks, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 237678459,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314860
    },
    {
        "content": "<p>Is the best bet to expand these to the exact ABI, and not try and do the direct inline types then?</p>",
        "id": 237678570,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620314894
    },
    {
        "content": "<p>depends on your use case, but the answer is probably \"yes\"</p>",
        "id": 237678863,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1620315012
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> that was the exact issue. I really appreciate the quick feedback. I owe you a drink at next RustConf.</p>",
        "id": 237682475,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1620316322
    }
]