[
    {
        "content": "<p>According to the wit spec, it seems a function can only take parameters of these types</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ty</span><span class=\"w\"> </span>::<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u8</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u16</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u32</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">u64</span><span class=\"o\">'</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s8</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s16</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s32</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s64</span><span class=\"o\">'</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">float32</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">float64</span><span class=\"o\">'</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">char</span><span class=\"o\">'</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">bool</span><span class=\"o\">'</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">string</span><span class=\"o\">'</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">tuple</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">list</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">option</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">result</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">handle</span>\n<span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">id</span>\n</code></pre></div>\n<p>does this mean we cannot have functions which take functions as arguments? I am trying to figure out how to expose egui bindings to wasm, and the egui api uses a lot of closures.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">child_ui</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">horizontal</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s\">\"first\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s\">\"second\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>I don't understand how i can model this in wit files.</p>\n<p>As a side note, how do i represent a resource in rust code?</p>",
        "id": 402682487,
        "sender_full_name": "code red art",
        "timestamp": 1700222518
    },
    {
        "content": "<p>In guest Rust you will typically use a resource wrapper generated by wit-bindgen.</p>",
        "id": 402698696,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700227613
    },
    {
        "content": "<p>There isn't any straightforward way to pass a closure between a wasm guest and host. There are a couple of ways to pass function pointers depending on what exactly you're trying to do.</p>",
        "id": 402699156,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700227739
    },
    {
        "content": "<p>The egui snippet you pasted appears to be a builder pattern of sorts. You could probably translate it into a wit interface using resources, which may be what you're getting at.</p>",
        "id": 402699431,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700227821
    },
    {
        "content": "<p>thanks for the reply. I fell asleep thinking about this :D. egui is not using builds, its just fully based on passing closures.  </p>\n<p>I was hoping to compile the egui library as a component too and link to guest, but it won't seem to work either, as wit doesn't have the syntax for first class function passing<br>\nMaybe it was intentional to not allow functions to travel across component boundary?</p>",
        "id": 402726027,
        "sender_full_name": "code red art",
        "timestamp": 1700236002
    },
    {
        "content": "<blockquote>\n<p>Maybe it was intentional to not allow functions to travel across component boundary?</p>\n</blockquote>\n<p>This is a tricky subject. Most languages don't pass actual code around; in Rust's case a closure compiles down roughly to an anonymous function pointer and a struct containing the state captured by the closure. You could perhaps model that as a callback (a tricky subject on its own in the component model) plus a record for state, but that would be a significant R&amp;D project to actually integrate into an existing language.</p>",
        "id": 402727005,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700236326
    },
    {
        "content": "<p>seems message got corrupted while travelling across the component boundary <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 402727427,
        "sender_full_name": "code red art",
        "timestamp": 1700236473
    },
    {
        "content": "<p>understood. I will see if i can contribute/fork egui with a more ffi friendly api and bind that to wasmtime.  thanks for the answers &lt;3</p>",
        "id": 402728113,
        "sender_full_name": "code red art",
        "timestamp": 1700236706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511207\">code red art</span> has marked this topic as resolved.</p>",
        "id": 402728241,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700236746
    },
    {
        "content": "<p>Seems to me that WIT resources are exactly the right tool to model callbacks.  Say, for example. you wanted to model a callback that takes two parameters, an <code>s32</code> and a <code>string</code>, and returns a <code>bool</code>.  The resource would look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">call</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The guest can then implement that resource in such a way that it contains a closure containing arbitrary state (e.g. <code>struct MyCallback(Box&lt;dyn Fn(i32, String) -&gt; bool&gt;)</code>).  When the host (or composed component) receives a handle to an instance of that resource, it can call the <code>call</code> method when appropriate and later drop it when it's no longer needed.</p>",
        "id": 402732103,
        "sender_full_name": "Joel Dice",
        "timestamp": 1700237835
    },
    {
        "content": "<p>Ah you're right, that wouldn't necessarily be <em>so</em> bad. It would require a different resource type for each unique closure signature but that could be semi-automated as well.</p>",
        "id": 402736382,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700239297
    },
    {
        "content": "<p>Based on the above snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">label</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">label</span>: <span class=\"nc\">string</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">child</span><span class=\"o\">-</span><span class=\"n\">ui</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">cb</span>: <span class=\"nc\">ui</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">horizontal</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">cb</span>: <span class=\"nc\">ui</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">ui</span><span class=\"o\">-</span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">ui</span>: <span class=\"nc\">ui</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 402737105,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700239563
    },
    {
        "content": "<p>You wouldn't want to have to execute that mess of callbacks very frequently, but hopefully it just builds a config object.</p>",
        "id": 402737337,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700239659
    },
    {
        "content": "<p>A bit late but even though the problem is basically solved w/ resources, I just had a thought -- what about solving it with WASM?</p>\n<p>Assuming a self-hosting interpreter (let's say <code>wasm3</code>, or some future version of <code>wasmtime</code>), wouldn't a WIT definition (<code>string</code>) + some WASM bytes <code>list&lt;u8&gt;</code>) be a decent approximation for a free floating function?  There's a lot of handwaving to do around how you'd deal with imports and the piping but it seems possible</p>",
        "id": 403505663,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1700621674
    }
]