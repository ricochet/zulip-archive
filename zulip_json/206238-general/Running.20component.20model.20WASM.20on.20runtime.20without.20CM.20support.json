[
    {
        "content": "<p>I'm assuming if I have a component model component wasm file that I can't run that in a runtime that doesn't support the component model (I'm thinking of running plugins on the JVM with chicory for example).<br>\nIf this is the case, are their build steps I can do on a component model built component to make it capable of running on a runtime with no component model support?<br>\nAlso I realize another issue I might face is my plugins using WASI 0.2.0 and a platform like chicory seems to only su[pport preview 1, is there anything I can do in a build step to mitigate/polyfill this?</p>",
        "id": 431703770,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1712435694
    },
    {
        "content": "<p>To be clear, I am looking to build out a host and extension mechanism. <br>\nFor some of the platforms I am targeting to be able to run my host component component model and preview 2 is available (Rust, Go, TypeScript, and Python... I think .NET too), but I also need to support the JVM and it seems embedding a runtime in the JVM is limited and none of the solutions I see support component model and WASI preview 2.<br>\nI'm fairly new to trying to build something so I can be off (though I've been tracking progress of things in the space for a few months).</p>",
        "id": 431703915,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1712435875
    },
    {
        "content": "<p>I don't believe there are any existing solutions for this. JCO does this for JS WebAssembly with a combination of preprocessing and host runtime support: <a href=\"https://github.com/bytecodealliance/jco\">https://github.com/bytecodealliance/jco</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7ba2b2286b81283a8cb6838ea5ea95495565a7f5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363934356430363662313966643238626238633330363936386439303338393061316266333337386435316435396439623230653532663362663536656663302f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 431982027,
        "sender_full_name": "Lann Martin",
        "timestamp": 1712586010
    },
    {
        "content": "<p>there's also <span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span>'s <a href=\"https://github.com/cpetig/wasmtime-adapter\">preview2 adapter,</a> which I think is a meaningful step towards this</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wasmtime-adapter\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cdf321a68fff15595c7c644a96858a1d84850a55\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333638303534313536616161306636336133616330633266343730346530373763313365306538393430613035373936323134326664623835656536396133662f6370657469672f7761736d74696d652d61646170746572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wasmtime-adapter\" title=\"GitHub - cpetig/wasmtime-adapter: Preview2 adapter forked from wasmtime\">GitHub - cpetig/wasmtime-adapter: Preview2 adapter forked from wasmtime</a></div><div class=\"message_embed_description\">Preview2 adapter forked from wasmtime. Contribute to cpetig/wasmtime-adapter development by creating an account on GitHub.</div></div></div>",
        "id": 432245452,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1712670249
    },
    {
        "content": "<p>JCO does convert the component to a WASM module module that can run on the web (and indeed any WASM runtime without component model support) and it even generates JS bindings for you. But if your runtime is not in javascript, then you will have to manipulate the bytes directly yourself, which is difficult, but possible. I am doing the same thing in Rust, where I take the JCO-transpiled WASM module and manipulate the bytes directly myself.</p>",
        "id": 433021364,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1712989955
    }
]