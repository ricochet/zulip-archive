[
    {
        "content": "<p>Hi all, I'm doing a university project which is to create a WebAssembly IDE.</p>\n<p>I have made a WAST interpreter and am starting the part of the project where I make the debugger (breakpoints, step in, out, over, etc.)</p>\n<p>I noticed that unfortunately span information is not present for instructions or expressions, so I'm finding it difficult to devise a way to map lines of WAST source code to parsed instructions that my interpreter consumes.</p>\n<p>Does anyone have any advice that might point me in the right direction? I don't mind editing the wast crate internally just for this project, if that is how it must be done.</p>\n<p>Many thanks all</p>",
        "id": 435623721,
        "sender_full_name": "William",
        "timestamp": 1714149911
    },
    {
        "content": "<p>neat project!</p>\n<p>I think adding span information to the <code>wast</code> crate's AST should be fine in principle, the details might be a bit fiddly</p>\n<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is the original author of that crate, knows it best, and would have opinions/ideas here, but he is also on a flight right now, so probably won't get back to you until later today or maybe monday</p>",
        "id": 435626350,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714150867
    },
    {
        "content": "<p>it might make sense (from a minimal-churn for downstream consumers, ease of landing perspective) to keep these spans out of the <code>Instruction</code> enum and in a side table inside <code>Expression</code>, similar to the branch hints</p>",
        "id": 435626807,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714151034
    },
    {
        "content": "<p>we could put a span in each variant of the <code>Instruction</code> enum but that is going to be a lot of ocean boiling</p>",
        "id": 435626939,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714151078
    },
    {
        "content": "<p>thanks for your response :)</p>\n<p>Yes you would be right in saying the details are a bit fiddly -- from my layman's perspective, it is not trivial to implement without better knowledge of the specific logic that goes into parsing the instructions unfortunately.</p>\n<p>And yes adding a span directly to the Instruction would be difficult and of course a breaking change. It would definitely be some busywork to sort out both on the implementation side and the user's side :(</p>\n<p>Time is not on my side here; my deadline is in 2 weeks (stupid I know!) so even a jank or incomplete solution would probably suit me OK for now. Hopefully Alex can shine some light on those fiddly details so I can whip something up for internal use <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 435628468,
        "sender_full_name": "William",
        "timestamp": 1714151746
    },
    {
        "content": "<p>if you need something sooner rather than later, I'd just fork <code>wast</code> and add the spans directly to the <code>Instruction</code> enum, since you won't have to worry about fixing up all the downstream users, just your own code</p>",
        "id": 435629480,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714152179
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L134\">https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L134</a> and <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L343\">https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L343</a> are the general area of the code you'll need to tweak</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L134\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/506420abf8237bfe09ec027c867815694b741ec0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616533383139356433353139363562663634663133633535656238313331313062356535626362313566383161366235636364376138663133393464343963362f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L134\" title=\"wasm-tools/crates/wast/src/core/expr.rs at 7589b29dd9dc973ae4380c54039c1d380fc1e566 路 bytecodealliance/wasm-tools\">wasm-tools/crates/wast/src/core/expr.rs at 7589b29dd9dc973ae4380c54039c1d380fc1e566 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L343\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/506420abf8237bfe09ec027c867815694b741ec0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616533383139356433353139363562663634663133633535656238313331313062356535626362313566383161366235636364376138663133393464343963362f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/7589b29dd9dc973ae4380c54039c1d380fc1e566/crates/wast/src/core/expr.rs#L343\" title=\"wasm-tools/crates/wast/src/core/expr.rs at 7589b29dd9dc973ae4380c54039c1d380fc1e566 路 bytecodealliance/wasm-tools\">wasm-tools/crates/wast/src/core/expr.rs at 7589b29dd9dc973ae4380c54039c1d380fc1e566 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 435629691,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714152274
    },
    {
        "content": "<p>yeah, that is probably the wise thing to do at this stage. I will have to figure out how the logic behind parenthesis parsing works in relation to parsing instructions and therefore figuring out the relevant spans. thank you for your prompt advice :)</p>",
        "id": 435629956,
        "sender_full_name": "William",
        "timestamp": 1714152365
    },
    {
        "content": "<p>I suspect the parser has a method to just grab the current span at any given moment</p>",
        "id": 435630319,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714152506
    },
    {
        "content": "<p>so you hopefully shouldn't need to do any relative offset kind of thing to compute the span for a particular instruction in the middle of parsing</p>",
        "id": 435630397,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714152539
    }
]