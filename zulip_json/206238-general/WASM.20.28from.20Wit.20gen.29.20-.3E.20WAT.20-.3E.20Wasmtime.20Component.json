[
    {
        "content": "<p>Howdy, all, I have a test working that complies a wasm file (using WIT, with wit_bindgen_guest_rust::generate!), in a separate project, and then another project that loads said file and encodes it to a component (via wit-component ComponentEncoder), and then execute the fn via Wasmtime, using wasmtime::component::bindgen! . All good. </p>\n<p>However, unlike working with wasmtime Modules, converting the compiled wasm to wat and then using wat::parse_bytes/file to convert it .wasm again results in an error trying to find the exported function using the same toolchain. Is this expectation correct for this toolchain? I just wanted to make sure.</p>",
        "id": 326580717,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1675860918
    },
    {
        "content": "<p>Yes roundtripping the core module loses custom sections which are used by wit component. Round tripping the component should work though</p>",
        "id": 326582857,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1675861540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> gotcha and thanks. That makes sense to me. I'll test through roundtripping the component. Is there a way to dynamically check if the incoming bytes represent a component vs mod without trying to use wast? Probably can decode metadata from the incoming representation?</p>",
        "id": 326589896,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1675863492
    },
    {
        "content": "<p>Yes you can check the first 8 bytes to see whether it's a component or a core wasm module</p>",
        "id": 326595853,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1675865215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> does work indeed, thanks again.</p>",
        "id": 326613725,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1675869303
    }
]