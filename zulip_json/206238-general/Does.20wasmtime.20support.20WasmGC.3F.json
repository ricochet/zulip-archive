[
    {
        "content": "<p>I'm interested in using Hoot (<a href=\"https://gitlab.com/spritely/guile-hoot\">https://gitlab.com/spritely/guile-hoot</a>) and want to run it using wasmtime so i can integrate it into a C project. However, it depends on Tail Call optimizations and WasmGC. Does wasmtime support that?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gitlab.com/spritely/guile-hoot\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5df75b2377c091df9d7cd43466335f62bacaf93b/68747470733a2f2f6769746c61622e636f6d2f75706c6f6164732f2d2f73797374656d2f70726f6a6563742f6176617461722f34333539313835302f686f6f742e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gitlab.com/spritely/guile-hoot\" title=\"spritely / Guile Hoot · GitLab\">spritely / Guile Hoot · GitLab</a></div><div class=\"message_embed_description\">GitLab.com</div></div></div>",
        "id": 452465201,
        "sender_full_name": "Srayan Jana",
        "timestamp": 1721350428
    },
    {
        "content": "<p>not yet, but <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> is actively working on implementing it. It's a large project!</p>",
        "id": 452465345,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721350540
    },
    {
        "content": "<p>damn. in the meantime, is there any sort of native wasm runtime that DOES have it?</p>",
        "id": 452465482,
        "sender_full_name": "Srayan Jana",
        "timestamp": 1721350647
    },
    {
        "content": "<p>depending on what you mean by \"native Wasm runtime\" (outside the browser perhaps?), Node might count; it has Wasm GC because it uses V8. I'm not aware of any other outside-the-browser / server-side VMs that do</p>",
        "id": 452467726,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721352442
    },
    {
        "content": "<p>does jco -- which uses node/deno/bun -- have this support? I can't recall; we could ask <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span></p>",
        "id": 452536998,
        "sender_full_name": "Ralph",
        "timestamp": 1721383538
    },
    {
        "content": "<p>guessing not, though</p>",
        "id": 452537013,
        "sender_full_name": "Ralph",
        "timestamp": 1721383546
    },
    {
        "content": "<p>jco has separate wasi-shims for node and browsers, some functions are stubbed on either side, so it's possible that jco supports this, but only on browsers</p>",
        "id": 452539132,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1721384038
    },
    {
        "content": "<p>I mean technically possible, I haven't checked if they have shims for wasi-gc yet</p>",
        "id": 452539244,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1721384071
    },
    {
        "content": "<p>wasmtime does have tail calls, fwiw; gc is still WIP</p>",
        "id": 452598561,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1721402929
    },
    {
        "content": "<p>minor nitpick: wasmtime does not do tail call optimization, i.e. it will not automatically turn <code>call</code>s that are in tail position into <code>return_call</code>s, but it does implement the tail calls proposal that introduces <code>return_call</code> et al and those are guaranteed to take <code>O(1)</code> stack usage, but it is the wasm producer's responsibility to signal whether they want tail calls or not via their instruction choice</p>",
        "id": 452599057,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1721403050
    },
    {
        "content": "<blockquote>\n<p>I haven't checked if they have shims for wasi-gc yet</p>\n</blockquote>\n<p>GC is a core Wasm feature, not a WASI API, so it's not something one can really shim with imports; one could in theory do a wasm-to-wasm code transform (binaryen might even have something like this?) but in jco's case, if they run on an underlying Wasm engine with GC, then there's no reason GC wouldn't work</p>",
        "id": 452599387,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721403155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"737420\">Srayan Jana</span> <a href=\"#narrow/stream/206238-general/topic/Does.20wasmtime.20support.20WasmGC.3F/near/452465201\">said</a>:</p>\n<blockquote>\n<p>I'm interested in using Hoot (<a href=\"https://gitlab.com/spritely/guile-hoot\">https://gitlab.com/spritely/guile-hoot</a>) and want to run it using wasmtime so i can integrate it into a C project. However, it depends on Tail Call optimizations and WasmGC. Does wasmtime support that?</p>\n</blockquote>\n<p>Very interesting, is it a re implementation of Guile? The fact it has a more permissive license suggests so.</p>",
        "id": 455016137,
        "sender_full_name": "Diego Antonio Rosario Palomino",
        "timestamp": 1722312338
    }
]