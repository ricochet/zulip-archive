[
    {
        "content": "<blockquote>\n<p><code>(export \"wasi:cli/run@0.2.1|run\")</code></p>\n</blockquote>\n<p>I think here you meant <code>(export \"wasi:cli/run@0.2.1#run\")</code>. Also make sure you use <code>--world wasi:cli/command</code> in the <code>embed</code> subcommand to select the right world</p>",
        "id": 480259233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730590744
    },
    {
        "content": "<p>Ah, yes, I was trying a few different things and at some point I changed <code>#</code> to <code>|</code>. And also the <code>command</code> include was precisely the thing that was missing, thanks so much!</p>\n<p>For anyone trying that for themselves. Given that you have <code>wit</code> declarations for WASI p2 in the <code>wit/deps</code> directory, you declare a world like that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">testing</span><span class=\"p\">:</span><span class=\"nc\">wasi</span><span class=\"o\">-</span><span class=\"n\">components</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"o\">-</span><span class=\"n\">testing</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">imports</span><span class=\"o\">@</span><span class=\"mf\">0.2.1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">// this is what I was missing, I wrongly assumed wasi:cli/imports grabs everything</span>\n<span class=\"w\">  </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">@</span><span class=\"mf\">0.2.1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>now with the following wat code:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi:io/streams@0.2.1\"</span> <span class=\"s2\">\"[method]output-stream.blocking-write-and-flush\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$blocking-write-and-flush</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi:cli/stdout@0.2.1\"</span> <span class=\"s2\">\"get-stdout\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$get-stdout</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"wasi:cli/run@0.2.1#run\"</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$blocking-write-and-flush</span>\n      <span class=\"p\">(</span><span class=\"nb\">call</span> <span class=\"nv\">$get-stdout</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">100</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">200</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span><span class=\"p\">)</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mf\">100</span><span class=\"p\">)</span> <span class=\"s2\">\"hello</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>You can do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"o\">-</span><span class=\"n\">testing</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">core</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"p\">#</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">hello</span>\n</code></pre></div>",
        "id": 480259758,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1730591301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657423\">Piotr Sarnacki</span> has marked this topic as resolved.</p>",
        "id": 480259796,
        "sender_full_name": "Notification Bot",
        "timestamp": 1730591354
    },
    {
        "content": "<p>this is the interesting part to learn from on my side:</p>",
        "id": 480402542,
        "sender_full_name": "Ralph",
        "timestamp": 1730713057
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// this is what I was missing, I wrongly assumed wasi:cli/imports grabs everything</span>\n<span class=\"w\">  </span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">command</span><span class=\"o\">@</span><span class=\"mf\">0.2.1</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 480402552,
        "sender_full_name": "Ralph",
        "timestamp": 1730713059
    }
]