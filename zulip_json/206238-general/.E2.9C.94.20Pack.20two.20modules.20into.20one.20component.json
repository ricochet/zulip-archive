[
    {
        "content": "<p>I am looking for a way to create a component that includes two <em>core modules</em> with the <code>wasm-tools component</code>. </p>\n<p>I suppose those two modules can be linked together. First module is able to <em>export</em> second's <em>import</em>. like:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package local:logger\n\ninterface logging {\n  enum level {\n    error,\n    warn,\n    verbose,\n    debug,\n  }\n\n  log: func(l: level, s: string) -&gt; result&lt;_, u32&gt;\n}\n\nworld logger {\n  export logging\n}\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package local:demo\n\ninterface logging {\n  enum level {\n    error,\n    warn,\n    verbose,\n    debug,\n  }\n\n  log: func(l: level, s: string) -&gt; result&lt;_, u32&gt;\n}\n\nworld demo {\n  import logging\n  export run: func()\n}\n</code></pre></div>",
        "id": 383565707,
        "sender_full_name": "lum1n0us",
        "timestamp": 1691662300
    },
    {
        "content": "<p>This PR (which was just merged yesterday) may be useful to you: <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\">https://github.com/bytecodealliance/wasm-tools/pull/1133</a><br>\nHowever, it doesn't use WIT or the canonical ABI for inter-module linking -- just core functions.  There's a demo of how to use it here: <a href=\"https://github.com/dicej/component-linking-demo\">https://github.com/dicej/component-linking-demo</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/92e6c46d8e2ac67921e6d2029e0768a1d7e2f33a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373333656237353738316632626435616663333533373738383134366538383865353136613038343033356661636235666333663838343630633135326638382f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31313333)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\" title=\"[wit-component] add shared-everything linking support by dicej 路 Pull Request #1133 路 bytecodealliance/wasm-tools\">[wit-component] add shared-everything linking support by dicej 路 Pull Request #1133 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Per https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md and https://hackmd.io/IlY4lICRRNy9wQbNLdb2Wg.\nThis adds a new component link subco...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/component-linking-demo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/52da6a1a181c77e10cb4e4a9e3cf6f7bd5a5fc20\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613865663166643066363535393132323466363963366131366139353766613562306233353534616661653639303461383138306162646162353430343732352f646963656a2f636f6d706f6e656e742d6c696e6b696e672d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/component-linking-demo\" title=\"GitHub - dicej/component-linking-demo: Demo of shared-everything linking using the WebAssembly Component Model\">GitHub - dicej/component-linking-demo: Demo of shared-everything linking using the WebAssembly Component Model</a></div><div class=\"message_embed_description\">Demo of shared-everything linking using the WebAssembly Component Model - GitHub - dicej/component-linking-demo: Demo of shared-everything linking using the WebAssembly Component Model</div></div></div>",
        "id": 383634992,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691676073
    },
    {
        "content": "<p>If you're using WIT to declare the inter-module interfaces, you might as well just make them components and compose them at that level using <code>wasm-tools compose</code>.</p>",
        "id": 383635475,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691676127
    },
    {
        "content": "<p>Does this mean I could take a pre-built wasm (like duckdb.wasm or onnx.wasm) and call any of their exports from my \"app\" and use this new link function to mash them all together into a single wasm?</p>",
        "id": 384186538,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1691828634
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"415410\">lum1n0us</span> has marked this topic as resolved.</p>",
        "id": 384615260,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691975167
    }
]