[
    {
        "content": "<p>While trying to test very simple WASI components, I am getting errors associated with the return type of <code>wasi:io/streams</code> <code>write</code> method.</p>\n<p>I think the source of the problem is that the <code>wit</code> files defining <code>wasi:io/streams</code> are different across different versions and don't appear to match for the current head of <code>cargo component</code> (e57d1d1) and <code>wasmtime-wasi</code> (12.0.1).<br>\nWhen I look at the build of my component I see</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">rand</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instance</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"input-stream\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"output-stream\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">4</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">enum</span> <span class=\"s\">\"open\"</span><span class=\"w\"> </span><span class=\"s\">\"ended\"</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">5</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"stream-status\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(</span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">6</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"this\"</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"drop-input-stream\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">6</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">7</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">8</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">9</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">10</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"this\"</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"buf\"</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"blocking-write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">11</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"this\"</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"drop-output-stream\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">11</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>which indicates a <code>write</code> type of <code>func(this: u32, buf: list&lt;u8&gt;, result&lt;u64, stream-status&gt;)</code>.<br>\nThis matches <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/wit/deps/io/streams.wit#L152-L156\">here</a> and <a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/main/wasi/wit/deps/io/streams.wit#L152-L156\">here</a>.</p>\n<p>However, the <code>wasmtime-wasi=11.01</code> and <code>wasmtime-wasi=12.01</code> both differ from this definition!<br>\nAccording the files downloaded to my <code>.cargo/registry</code>:</p>\n<p>wasmtime-wasi 11.01</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">write</span>: <span class=\"nc\">func</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">this</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Data to write</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>wasmtime-wasi 12.01</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">write</span>: <span class=\"nc\">func</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">this</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Data to write</span>\n<span class=\"w\">    </span><span class=\"n\">buf</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">status</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>How can I get my wasm32-wasi component building and running?</p>",
        "id": 388443151,
        "sender_full_name": "Nick",
        "timestamp": 1693536934
    },
    {
        "content": "<p>You'll want to pair the adapter and Wasmtime together at this time. WASI is evolving meaning that if any one piece of the toolchain/tooling/etc uses WASI then everything must agree on that. Can you use the adapter and Wasmtime both at version 12?</p>",
        "id": 388443798,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693537337
    },
    {
        "content": "<p>Gotcha. I'll give it a try and report back, thanks.</p>",
        "id": 388444033,
        "sender_full_name": "Nick",
        "timestamp": 1693537509
    },
    {
        "content": "<p>Yup, that worked; thanks!</p>",
        "id": 388447138,
        "sender_full_name": "Nick",
        "timestamp": 1693539557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"645795\">Nick</span> has marked this topic as resolved.</p>",
        "id": 388447145,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693539563
    }
]