[
    {
        "content": "<p>As far as I can tell, wit resources can't have fields, only methods.<br>\nI'm working on translating some WebIDL files into wit, and I'm trying to figure out the best way to deal with this constraint.<br>\nIs the best way to just have setter and getter methods for each field?</p>",
        "id": 410096476,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1703646383
    },
    {
        "content": "<p>There's some discussion <a href=\"https://github.com/WebAssembly/component-model/issues/235\">here</a> around introducing \"properties\", but that's more about being able to generate more idiomatic bindings in various languages than doing anything fundamentally new — i.e. it would just be sugar over functions, the same way that resource methods are just functions.</p>\n<p>I don't think it would be possible to have directly-accessed fields for resources, because their concrete representation is opaque to code holding a handle to them.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/235\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0b5aacaf66e82f88af069654332c75306398751f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656535393532636364653961663666353333666661383566313932616134353536343566363339643036323833303962623465623534326337326337643832642f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/235\" title=\"Resource properties · Issue #235 · WebAssembly/component-model\">Resource properties · Issue #235 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Most languages have either: language-level support for properties C#: string MyProperty { get; set; } JavaScript: get myProperty() JavaScript: set myProperty(value) or conventions on how to name pr...</div></div></div>",
        "id": 410120728,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1703666594
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"470250\">@Jeff Parsons</span> !</p>\n<p>So I guess I'll just make my own getter/setters until this is properly specced.</p>",
        "id": 410230114,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1703732304
    },
    {
        "content": "<p>Here's a list of conversions from WebIDL types to wit types. Some of them are obvious how to convert, but others are not. I wonder what y'all think.</p>\n<p><a href=\"https://github.com/MendyBerger/webidl-wit#conversions-from-webidl-to-wit-types\">https://github.com/MendyBerger/webidl-wit#conversions-from-webidl-to-wit-types</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/MendyBerger/webidl-wit#conversions-from-webidl-to-wit-types\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/545349ade3daa1c90afa120eb4d18f3124e98a1e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303064623963373731633539663132366362623637333836363166373536376535366437653662376233313938353636663163393064346330363066653532362f4d656e64794265726765722f77656269646c2d776974)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/MendyBerger/webidl-wit#conversions-from-webidl-to-wit-types\" title=\"GitHub - MendyBerger/webidl-wit\">GitHub - MendyBerger/webidl-wit</a></div><div class=\"message_embed_description\">Contribute to MendyBerger/webidl-wit development by creating an account on GitHub.</div></div></div>",
        "id": 410657629,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1704053750
    },
    {
        "content": "<p>This looks like a great start! I wouldn't be surprised if over time, Wit adds more types, like BigInt or finite-only floating-point types, and we can refine some of these, but what you have here looks good for now.</p>",
        "id": 411063807,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1704308121
    },
    {
        "content": "<p>I'm thinking that it might make sense to make all function arguments <code>borrow</code>,  since in JS everything is borrowed.</p>\n<p>What do y'all think?</p>",
        "id": 417040859,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1705798928
    }
]