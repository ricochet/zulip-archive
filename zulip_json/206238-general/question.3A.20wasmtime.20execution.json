[
    {
        "content": "<p>Hi folks, I've been jumping around the wasmtime and cranelift code, mostly for my own education. </p>\n<p>Am I correct in understanding that wasmtime always executes a module by JITing the code and then running the JIT-ed code? Does it not follow the LuaJIT model of only generating native code for hot code?</p>",
        "id": 190651805,
        "sender_full_name": "Samrat Man Singh",
        "timestamp": 1584285792
    },
    {
        "content": "<p>That is correct. Wasmtime does have a cache for the JIT-ed code, so JITing should take less time after the first invocation.</p>",
        "id": 190651875,
        "sender_full_name": "bjorn3",
        "timestamp": 1584285863
    },
    {
        "content": "<p>The plan is to eventually have additional execution modes:</p>\n<ul>\n<li>full ahead-of-time compilation integrated directly into Wasmtime</li>\n<li>interpreted execution</li>\n<li>tiering from interpreter to baseline to optimizing compiler (or subsets of that)</li>\n</ul>\n<p>In that last scenario, we'd at least potentially introduce support for per-function tiering, but that'd depend on strong use cases</p>",
        "id": 190663389,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1584301018
    },
    {
        "content": "<p>As additional background, Lua doesn't have static types, so it's not possible to generate efficient code for it untl you've run it for a while and gathered data on what types it's using at runtime.</p>",
        "id": 190664391,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584302432
    },
    {
        "content": "<p>WebAssembly has static types, so it's possible to generate good native code for it without having to see it run first.</p>",
        "id": 190664413,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584302475
    }
]