[
    {
        "content": "<p>I have a <code>wit</code> file which I use in several different components...  when I generate the bindings, even through the same tooling (e.g. cargo-component or wit-bindgen), I get conflicts that the type in <code>component_a::Foo</code> is different than <code>component_b::Foo</code> - even though they're both importing the same <code>wit</code> and using the same <code>world</code></p>\n<p>is this a known issue? any tips for working around this other than writing macros to convert the types?</p>",
        "id": 493638221,
        "sender_full_name": "dakom",
        "timestamp": 1736876998
    },
    {
        "content": "<p>One option that I've seen some projects do is factor out the bindings into a separate crate. That is, put a wit bindgen <code>generate!()</code> in src/lib.rs in its own crate that your other crates can depend on.</p>",
        "id": 493647287,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1736880451
    },
    {
        "content": "<p>that would definitely work... but I'm building the components with <code>cargo component build</code> and it wants to know the <code>world</code>, generate its own bindings, etc.. with this approach, I guess I'd need to bypass <code>cargo component</code> and do things more manually? will check into it, thanks!</p>",
        "id": 493792997,
        "sender_full_name": "dakom",
        "timestamp": 1736923545
    },
    {
        "content": "<p>in almost every single component model I've ever seen over the past 30 years, data types are always their own \"component\"/\"package\"/\"shareable thing\". I'll be STUNNED if the wasm component model can pull this off or any language chain.</p>",
        "id": 493940335,
        "sender_full_name": "Ralph",
        "timestamp": 1736951471
    },
    {
        "content": "<p>but, as you might imagine, I'd <strong><em>looooooooooove</em></strong>* to be surprised here.</p>",
        "id": 493940440,
        "sender_full_name": "Ralph",
        "timestamp": 1736951499
    },
    {
        "content": "<p>:-)</p>",
        "id": 493940447,
        "sender_full_name": "Ralph",
        "timestamp": 1736951501
    },
    {
        "content": "<p>fwiw, I went down a few rabbit holes... the most promising for a general solution was probably something like:</p>\n<ol>\n<li>all bindings for components in one shared crate</li>\n<li>macros to convert the types used between worlds, if needed</li>\n<li>do the same on the host side (wasmtime bindings)</li>\n<li>more macros to convert between host and guest bindings</li>\n</ol>\n<p>it worked, but kinda ugly...</p>\n<p>turns out for my use-case I don't need the macros - just have a shared lib with the bindings, and use <code>variant</code>s to handle more usecases where I would have maybe wanted different <code>world</code>s before.</p>\n<p>I do think tooling to handle the problem of \"I have a <code>.wit</code> that's used in a bunch of places, but bindings are incompatible\" would be nice - especially where it's multiple worlds generated as distinct bindings but from the same exact interface imports</p>",
        "id": 494086550,
        "sender_full_name": "dakom",
        "timestamp": 1737015098
    },
    {
        "content": "<p>Everyone wants it, of course. My guess is that if you have your data types in a separate wit, witbindgen should be able to export both guest and host parts properly.</p>",
        "id": 494105962,
        "sender_full_name": "Ralph",
        "timestamp": 1737021654
    }
]