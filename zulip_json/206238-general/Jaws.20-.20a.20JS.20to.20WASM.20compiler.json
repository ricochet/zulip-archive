[
    {
        "content": "<p>Hi all!</p>\n<p>After reading some articles about WASM GC being a game changer for WebAssembly scripting languages support, I was slightly disappointed there are no implementations of JavaScript on top of WASM GC. I know there is <a href=\"https://github.com/CanadaHonk/porffor\">porffor</a>, which is a great and very interesting project, but it purposefully uses only core WASM. Honestly, I had no idea if implementing JavaScript semantics was possible even with WASM GC, so I did the only thing that made sense to me, I started writing the tool myself, to check it myself. I think it's going great, so I'm open sourcing it as <a href=\"https://github.com/drogus/jaws\">Jaws</a></p>\n<p>It's still very much an experimental tool, but I'm fairly certain it's possible to implement 100% of the JavaScript spec that way. In order to confirm it, though, I first wanted to explore implementing JavaScript semantics that are the hardest to implement: scopes/closures, try/catch, async/await and generators. I have the first two and the easier part of async/await (ie. <code>async</code>).</p>\n<p>To give you an example, this code will output the same thing that Node.js outputs:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"foo\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">bar</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">catch</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"caught\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"rethrowing\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"nx\">err</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">foo</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(</span>\n<span class=\"w\">  </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{},</span>\n<span class=\"w\">  </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"error\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"p\">);</span>\n</code></pre></div>\n<p>I'm now working on implementing <code>await</code> and then generator functions. My current approach is to introduce CPS transforms into the code. I tried using Asyncify, but it looks like it doesn't work with proposals I'm using, so I'll probably just roll it out by hand (which also might be best anyway, cause there are some specific things I can do to make it fit the code I generate better). stack-switching proposal would be ideal, but I don't think any of the runtimes support it yet, so I'll leave it for now. It's hard enough to run the project anywhere even with the current set of WASM features <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>The project works as follows:</p>\n<ol>\n<li>There is quite a lot of hand written WAT code implementing various helpers, types, and functions to allow mimicking JS semantics</li>\n<li>A Rust program parses the Javascript code using the parser from <a href=\"https://github.com/boa-dev/boa\">Boa</a> interpreter</li>\n<li>The JavaScript AST is translated to a WASM AST</li>\n<li>WASM AST is translated to WAT and written to a WAT file</li>\n</ol>\n<p>My plan is to use WASIp2 for stuff like handling incoming/outgoing HTTP requests, writing to STDOUT/STDERR and files, but also for using timers etc. WasmTime seems to be the only runtime supporting WASIp2/components, but unfortunately it doesn't fully support WASM GC nor does it support exception handling proposal, so I resolved to write a very simple Javascript polyfill for stuff that I'm using (only monotonic clocks and output for now).</p>\n<p>Any critique, ideas, questions, or other input are welcomed!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/CanadaHonk/porffor\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a119ebb1d964818f2c6283f2e5201cd328bffd37/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663365613564303832396465643732663837353566613363373732363838346133656233363633663239663763353035376361323662626639656638313436612f43616e616461486f6e6b2f706f7266666f72&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/CanadaHonk/porffor\" title=\"GitHub - CanadaHonk/porffor: A from-scratch experimental AOT JS engine, written in JS\">GitHub - CanadaHonk/porffor: A from-scratch experimental AOT JS engine, written in JS</a></div><div class=\"message_embed_description\">A from-scratch experimental AOT JS engine, written in JS - CanadaHonk/porffor</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/drogus/jaws\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/03a65a6baca80b1f86d93a016b390481164573d8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663333373730613665656266373633333465613665643763373364383963373433613962653062303732653866666164333064333862343035613139356663332f64726f6775732f6a617773&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/drogus/jaws\" title=\"GitHub - drogus/jaws: JavaScript to WASM compiler\">GitHub - drogus/jaws: JavaScript to WASM compiler</a></div><div class=\"message_embed_description\">JavaScript to WASM compiler. Contribute to drogus/jaws development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/boa-dev/boa\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/349d7844c56dc172071851fec5eb341df38c6d89/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3134343037333533392f33663130633735622d643037382d343862372d396433612d643837393264643138633334&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/boa-dev/boa\" title=\"GitHub - boa-dev/boa: Boa is an embeddable and experimental Javascript engine written in Rust. Currently, it has support for some of the language.\">GitHub - boa-dev/boa: Boa is an embeddable and experimental Javascript engine written in Rust. Currently, it has support for some of the language.</a></div><div class=\"message_embed_description\">Boa is an embeddable and experimental Javascript engine written in Rust. Currently, it has support for some of the language. - boa-dev/boa</div></div></div>",
        "id": 481480388,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1731174774
    }
]