[
    {
        "content": "<p>I'm trying to ensure I've exhaustively covered all possible imports in a wasm program (the idea being that I build the program and use wasm-nm to list all imports) in a wrapper (using wasmtime-go) that I'm building. Does anyone know how I can disable dead code elimination or some other mechanism to get these imports? Such as querying a crate to find all extern \"C\" decls, or functions with a wasm link attr?</p>",
        "id": 217087674,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1605664723
    },
    {
        "content": "<p>I suppose the list of imports doesn't change often, so it's not really a big deal to hand-write the list, but now I feel nerd baited</p>",
        "id": 217087761,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1605664821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> <code>-Clink-dead-code=yes</code> should do.</p>",
        "id": 217258094,
        "sender_full_name": "bjorn3",
        "timestamp": 1605786056
    },
    {
        "content": "<p>Doesn't seem to, but I haven't tried a minimal repro yet.</p>",
        "id": 217295897,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1605803893
    },
    {
        "content": "<p>Ok. Just did a minimal repro that defines three wasm imports. Compiling with <code>rustc --target=wasm32-wasi -g ./src/main.rs -C link-dead-code=yes</code> then running the result through <code>wasm-nm</code>, the result is that there's no import defined for functions that are not used in my main function</p>",
        "id": 217309379,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1605809816
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Compile with:</span>\n<span class=\"c1\">// rustc --target=wasm32-unknown-unknown -g main.rs -C link-dead-code=yes</span>\n<span class=\"c1\">// Check with:</span>\n<span class=\"c1\">// wasm-nm -i main.wasm</span>\n\n<span class=\"cp\">#[link(wasm_import_module=</span><span class=\"s\">\"math\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"add\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"mul\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">mul</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">top</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Comment this out and there's no `top` import in the wasm binary</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Comment this out and there's no `add` import in the wasm binary</span>\n<span class=\"w\">    </span><span class=\"n\">call_add</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_add</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// mul is never in the wasm binary because `call_mul` is never called</span>\n<span class=\"k\">fn</span> <span class=\"nf\">call_mul</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217310282,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1605810244
    },
    {
        "content": "<p>note, i also tried with <code>-C opt-level=0 -C lto=no</code></p>",
        "id": 217310767,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1605810477
    },
    {
        "content": "<p><del>Executables only export the <code>main</code> function by default. The linker removes all functions that are not directly or indirectly used through an export.</del> Didn't notice which topic this is.</p>",
        "id": 217457784,
        "sender_full_name": "bjorn3",
        "timestamp": 1605905901
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 217457847,
        "sender_full_name": "bjorn3",
        "timestamp": 1605905959
    },
    {
        "content": "<p>I don't really know what will fix it.</p>",
        "id": 217458031,
        "sender_full_name": "bjorn3",
        "timestamp": 1605906059
    }
]