[
    {
        "content": "<p>Hello all, I am new to Wasm and Cranelift and wanted to play with it  with C++ code. I am trying to compile the C++ code to wasm and also to cranelift IR. I read few documents and saw that C++ exception handling and threads in Wasm are still in development/proposal phase. Given that would it be right to think about replacing the JVM jit environment with wasm at the moment ? Also any concrete starting points in that direction would be really appreciated. TIA.</p>",
        "id": 190941934,
        "sender_full_name": "Divya Agrawal",
        "timestamp": 1584511972
    },
    {
        "content": "<p>Exception handling and threads for WebAssembly are both <a href=\"https://github.com/WebAssembly/proposals/#phase-2---proposed-spec-text-available-cg--wg\" target=\"_blank\" title=\"https://github.com/WebAssembly/proposals/#phase-2---proposed-spec-text-available-cg--wg\">stage 2 proposals</a> right now. Follow the links on that page for more info.</p>",
        "id": 190966743,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584530631
    },
    {
        "content": "<p>Whether or not wasm is a suitable replacement for the JVM depends greatly on how you want to use it. If you need exception handling and threads, then it's not all the way there yet.</p>",
        "id": 190966872,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584530745
    },
    {
        "content": "<p>Hi Dan, thanks a lot for your comments. Any other starting points for C++ to wasm ?</p>",
        "id": 190967090,
        "sender_full_name": "Divya Agrawal",
        "timestamp": 1584530919
    },
    {
        "content": "<p>Are you interested in wasm in browsers, outside of browsers, or both?</p>",
        "id": 190967542,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584531189
    },
    {
        "content": "<p>outside of browsers</p>",
        "id": 190967702,
        "sender_full_name": "Divya Agrawal",
        "timestamp": 1584531282
    },
    {
        "content": "<p>wasi-sdk has packages of clang for C/C++ configured to work with wasi-libc and builds of libc++</p>",
        "id": 190967787,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584531360
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/wasi-sdk\" target=\"_blank\" title=\"https://github.com/WebAssembly/wasi-sdk\">https://github.com/WebAssembly/wasi-sdk</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sdk\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sdk\" target=\"_blank\" title=\"WebAssembly/wasi-sdk\">WebAssembly/wasi-sdk</a></div><div class=\"message_embed_description\">WASI-enabled WebAssembly C/C++ toolchain. Contribute to WebAssembly/wasi-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 190967802,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584531363
    },
    {
        "content": "<p>Dan, is that also available for arm64-linux?  It would be useful (for current dev work) if it was.  Currently we have to compile C++ to wasm on an x86 box and then scp it to an arm64 box for testing, which is, well, something that would be nice to be able to avoid.</p>",
        "id": 190968176,
        "sender_full_name": "Julian Seward",
        "timestamp": 1584531649
    },
    {
        "content": "<p>Unfortunately no, we don't have precompiled packages for arm64 yet.</p>",
        "id": 190968792,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584532116
    },
    {
        "content": "<p>If you build it from source, it ought to work though.</p>",
        "id": 190968825,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584532143
    },
    {
        "content": "<p>and rust/cargo should work</p>",
        "id": 190969007,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1584532266
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> sure, but I really would prefer to start with C test cases.</p>",
        "id": 190970318,
        "sender_full_name": "Julian Seward",
        "timestamp": 1584533089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> do you happen to know if building from source is a complex process (mucho hoop jumping?)  Or is it something nice like ./configure ; make ; make install?</p>",
        "id": 190970457,
        "sender_full_name": "Julian Seward",
        "timestamp": 1584533166
    },
    {
        "content": "<p>It's a pretty simple process in theory: check out wasi-sdk, init the git submodules, run \"make\", you now have /opt/wask-sdk/bin/clang etc. and are good to go</p>",
        "id": 190970784,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584533382
    },
    {
        "content": "<p>Set <code>PREFIX=...</code> on the make invocation if you want it to build somewhere else.</p>",
        "id": 190971391,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584533800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> thanks!  I'll give it a try.</p>",
        "id": 190971414,
        "sender_full_name": "Julian Seward",
        "timestamp": 1584533820
    }
]