[
    {
        "content": "<p>Hi, I'm trying to make a PR to add sendmmsg/recvmmsg (note the extra m) to rustix. <code>libc</code> has these functions in linux_like, which I gather is a hard requirement. However, I have a few questions as I go:</p>\n<ul>\n<li>It looks like the BSDs have sendmmsg, but it's not a syscall. Does that mean it should be only for linux?</li>\n<li>The interface is shaping up to be pretty unwieldy, something like <code>msgs: &amp;[(&amp;[IoSlice&lt;'_&gt;], &amp;mut SendAncillaryBuffer)]</code>. That's not even getting into the return type. Should I go straight to a higher level interface, maybe something like a builder pattern, or just slog through with that?</li>\n<li>The <code>msghdr.rs</code> interfaces are not well-suited to this (see <code>with_noaddr_msghdr</code>). Is that designed specifically to avoid allocation or something? Should I try to adapt those or just do without?</li>\n<li>Should I just give up and cry?</li>\n</ul>\n<p>Thanks in advance!</p>\n<p>Edit: thinking more, I think it <em>has</em> to be a builder pattern, or you can't mix sockaddr types easily. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Sendmmsg</span><span class=\"p\">::</span><span class=\"n\">builder</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">send_v4</span><span class=\"p\">(</span><span class=\"n\">sa1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">IoSlice</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">send_v6</span><span class=\"p\">(</span><span class=\"n\">sa2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">IoSlice</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"bar\"</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">done</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 469956217,
        "sender_full_name": "Colin Marc",
        "timestamp": 1726231386
    },
    {
        "content": "<blockquote>\n<p>It looks like the BSDs have sendmmsg, but it's not a syscall. Does that mean it should be only for linux?</p>\n</blockquote>\n<p>It can go either way. rustix aims for \"syscall-like APIs\", and <code>sendmmsg</code> is pretty syscall-like. That said, if it's more complex, it's ok to defer for now too.</p>\n<blockquote>\n<p>The interface is shaping up to be pretty unwieldy, something like msgs: &amp;[(&amp;[IoSlice&lt;'_&gt;], &amp;mut SendAncillaryBuffer)]. That's not even getting into the return type. Should I go straight to a higher level interface, maybe something like a builder pattern, or just slog through with that?</p>\n</blockquote>\n<p>My understanding is that <code>sendmmsg</code> is just an optimization, compared to making multiple <code>sendmsg</code> calls. As such, my guess is that it's better to go for the lower-level interface, since a builder would likely impose a dynamic allocation which users looking to optimize would want to avoid. That's just a guess though, and not a hard rule.</p>\n<blockquote>\n<p>The <a href=\"http://msghdr.rs\">msghdr.rs</a> interfaces are not well-suited to this (see with_noaddr_msghdr). Is that designed specifically to avoid allocation or something? Should I try to adapt those or just do without?<br>\n    Should I just give up and cry?</p>\n</blockquote>\n<p>My guess is that that existing infrastructure won't work well for you as-is, if you need to support multiple addresses in a single <code>sendmmsg</code> call.</p>\n<p>As a possible alternative, I wonder if this would work: have a public type <code>MMsgHdr</code>, that contains a single private <code>mmsghdr</code> and is <code>repr(transparent)</code>. Give it constructors for constructing it with different address types and data and control messages. It probably needs lifetime parameters. And a method for reading out the <code>msg_len</code> value. And then let users do their own builder-like thing with a <code>Vec&lt;MMsgHdr&gt;``, or their own fixed-sized </code>[MMsgHdr; N], or whatever, as they see fit, and pass it into <code>sendmmsg</code> as a <code>&amp;mut [MMsgHdr]</code>. Since it's <code>repr(transparent)</code>, rustix could pass the raw slice into the <code>sendmmsg</code> syscall. Do you think something like that might work?</p>",
        "id": 470009391,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1726244813
    },
    {
        "content": "<blockquote>\n<p>My understanding is that <code>sendmmsg</code> is just an optimization, compared to making multiple <code>sendmsg</code> calls. As such, my guess is that it's better to go for the lower-level interface, since a builder would likely impose a dynamic allocation which users looking to optimize would want to avoid. That's just a guess though, and not a hard rule.</p>\n</blockquote>\n<p>Even the lower-level interface would require allocating <code>msghdr</code> structs, so it wouldn't save any allocations. Also, the performance benefit is usually from the reduced number of syscalls, not from the allocations, but that's a fair point.</p>\n<blockquote>\n<p>As a possible alternative, I wonder if this would work: have a public type <code>MMsgHdr</code>, that contains a single private <code>mmsghdr</code> and is <code>repr(transparent)</code>. Give it constructors for constructing it with different address types and data and control messages. It probably needs lifetime parameters. And a method for reading out the <code>msg_len</code> value. And then let users do their own builder-like thing with a <code>Vec&lt;MMsgHdr&gt;``, or their own fixed-sized</code> [MMsgHdr; N], or whatever, as they see fit, and pass it into <code>sendmmsg</code> as a <code>&amp;mut [MMsgHdr]</code>. Since it's <code>repr(transparent)</code>, rustix could pass the raw slice into the <code>sendmmsg</code> syscall. Do you think something like that might work?</p>\n</blockquote>\n<p>Yes, that seems doable! FWIW, the <code>MMsgHdr</code> is just a <code>msghdr</code> and a len, so it would be potentially usable for single-M <code>sendmsg</code> as well.</p>\n<p>Also, there's the question of the return value. The syscall returns the number of messages succesfully sent, and the amount of each message sent is saved in in the <code>mmsghdr</code>'s length field. Hence <code>Vec&lt;usize&gt;</code>. One benefit of the builder pattern thing is that you could offer a <code>remaining()</code> method to filter out everything that's already been sent, but maybe that's too high-level.</p>",
        "id": 470012071,
        "sender_full_name": "Colin Marc",
        "timestamp": 1726245775
    },
    {
        "content": "<p>Hm, so, I spent some time poking at this, and unfortunately I don't think <code>repr(transparent)</code> works very well.</p>\n<p>The problem is that <code>msghdr</code> is just a bunch of pointers:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">msghdr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\">         </span><span class=\"o\">*</span><span class=\"n\">msg_name</span><span class=\"p\">;</span><span class=\"w\">       </span><span class=\"cm\">/* Optional address */</span>\n<span class=\"w\">    </span><span class=\"kt\">socklen_t</span><span class=\"w\">     </span><span class=\"n\">msg_namelen</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"cm\">/* Size of address */</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">iovec</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">msg_iov</span><span class=\"p\">;</span><span class=\"w\">        </span><span class=\"cm\">/* Scatter/gather array */</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">        </span><span class=\"n\">msg_iovlen</span><span class=\"p\">;</span><span class=\"w\">     </span><span class=\"cm\">/* # elements in msg_iov */</span>\n<span class=\"w\">    </span><span class=\"kt\">void</span><span class=\"w\">         </span><span class=\"o\">*</span><span class=\"n\">msg_control</span><span class=\"p\">;</span><span class=\"w\">    </span><span class=\"cm\">/* Ancillary data, see below */</span>\n<span class=\"w\">    </span><span class=\"kt\">size_t</span><span class=\"w\">        </span><span class=\"n\">msg_controllen</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"cm\">/* Ancillary data buffer len */</span>\n<span class=\"w\">    </span><span class=\"kt\">int</span><span class=\"w\">           </span><span class=\"n\">msg_flags</span><span class=\"p\">;</span><span class=\"w\">      </span><span class=\"cm\">/* Flags on received message */</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n<p>If I have <code>RecvMMsgHdr</code> with a constructor like <code>new(iov: &amp;mut [IoSliceMut], control: RecvAncillaryBuffer)</code>, then I can ensure with lifetimes that the iov pointers and control buffer pointer are safe to store on the <code>msghdr</code>. But that's not true of the sockaddr. I could require a <code>&amp;mut SockAddrStorage</code>, but I don't have a way to communicate whether the memory is valid after the call (it depends on whether the kernel set <code>msg_namelen &gt;= 0</code>, I think).</p>\n<p>It would be reasonable to allocate the sockaddrstorage on behalf of the user, but I don't have anywhere to store the pointer, since it's <code>repr(transparent)</code>.</p>\n<p>Any ideas?</p>",
        "id": 471335218,
        "sender_full_name": "Colin Marc",
        "timestamp": 1726688538
    },
    {
        "content": "<p>maybe use 1-ZST typestate to track if it's before/after the call?</p>",
        "id": 471388928,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1726716058
    },
    {
        "content": "<p>Since this issue is unique to recvmmsg, I pushed a PR with just sendmmsg: <a href=\"https://github.com/bytecodealliance/rustix/pull/1171\">https://github.com/bytecodealliance/rustix/pull/1171</a></p>\n<blockquote>\n<p>maybe use 1-ZST typestate to track if it's before/after the call?</p>\n</blockquote>\n<p>I'm not a type wizard, would you be able to sketch out an example of what you mean?</p>\n<p>Another idea I had would be to make a <code>RecvMMsgBuffer</code> utility with something like <code>fn grow(&amp;mut self, len: usize, mtu: usize)</code>. It would maintain a slab of memory for contents/cmgs/sockaddrs and a <code>Vec&lt;mmsghdr&gt;</code>, and let you iterate over filled messages. The goal would be for it to be reusable, obviously.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rustix/pull/1171\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/050830dd6aa7203c28c54ebeaea13231461d5c14/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653634396330663338393735666464623638613834316435613336366635333233313663646266386664643932383165306432656439636538633837373037392f62797465636f6465616c6c69616e63652f7275737469782f70756c6c2f31313731&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rustix/pull/1171\" title=\"Add support for sendmmsg(2) on linux by colinmarc · Pull Request #1171 · bytecodealliance/rustix\">Add support for sendmmsg(2) on linux by colinmarc · Pull Request #1171 · bytecodealliance/rustix</a></div><div class=\"message_embed_description\">https://man7.org/linux/man-pages/man2/sendmmsg.2.html\nPartially addresses #1156. I would've liked to add recvmmsg in the same PR, but it's actually much more complicated.</div></div></div>",
        "id": 471421830,
        "sender_full_name": "Colin Marc",
        "timestamp": 1726731039
    }
]