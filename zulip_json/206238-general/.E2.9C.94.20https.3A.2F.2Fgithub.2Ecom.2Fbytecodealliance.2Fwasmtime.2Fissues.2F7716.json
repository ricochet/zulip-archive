[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>, others. I'm also running into this issue when compiling my wasm wit-bindgen (version 0.16) code with wasi (it works fine with wasm32-unknown-known). I'm using the reactor version of wasi_snapshot_preview1.wasm from wasmtime 16 when running --adapt. Our runtime, which embeds wasmtime, has</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmparser</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.118\"</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"16.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">  </span><span class=\"s2\">\"async\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"component-model\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"cranelift\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"parallel-compilation\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"pooling-allocator\"</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"s2\">\"wat\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime-component-util</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"16.0\"</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"16.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default-features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">  </span><span class=\"s2\">\"tokio\"</span><span class=\"p\">,</span>\n<span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"1.0\"</span>\n<span class=\"n\">wit-component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"0.19\"</span>\n</code></pre></div>\n<p>It fails on instantiation: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I even removed any WASI bits from the component code, but just focused on targetting wasm32-wasi.</p>",
        "id": 411436585,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704490769
    },
    {
        "content": "<p>Should I attempt to go backwards in time with different versions?</p>",
        "id": 411436773,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704490864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"587442\">@Zeeshan Lakhani</span> can you share a bit more of the embedding code? e.g. what calls to <code>add_to_linker</code> do you have?</p>",
        "id": 411437457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704491231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, thanks for reaching out. so we instantiate this way (i'll share the component_bytes_fn, as it's all oss):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Instantiates the provided `module` using the specified</span>\n<span class=\"w\">    </span><span class=\"sd\">/// parameters, wrapping up the result in a [Env] structure</span>\n<span class=\"w\">    </span><span class=\"sd\">/// that translates between wasm and the host, and gives access</span>\n<span class=\"w\">    </span><span class=\"sd\">/// for future invocations to use the already-initialized linker, store.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Used when first initiating a module of a workflow.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">instantiate</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">bytes</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">fun_name</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">data</span>: <span class=\"nc\">State</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Env</span><span class=\"o\">&lt;</span><span class=\"n\">State</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">configure</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">define_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">limiter_async</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">limits</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">set_fuel</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">fuel</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Configures a `Store` to yield execution of async WebAssembly code</span>\n<span class=\"w\">        </span><span class=\"c1\">// periodically and not cause extended polling.</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">fuel_async_yield_interval</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">UNIT_OF_COMPUTE_INSTRUCTIONS</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// engine clones are shallow (not deep).</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component_from_bytes</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fun_name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Env</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">set_bindings</span><span class=\"p\">(</span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">set_instance</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I haven't pushed this code upstream yet (which is outdated versions), but component_from_bytes remains the same, but with the newest versions in my local code: <a href=\"https://github.com/ipvm-wg/homestar/blob/main/homestar-wasm/src/wasmtime/world.rs#L326\">https://github.com/ipvm-wg/homestar/blob/main/homestar-wasm/src/wasmtime/world.rs#L326</a></p>",
        "id": 411437972,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704491476
    },
    {
        "content": "<p>It looks like nothing is being added to <code>Linker</code> in that file?</p>",
        "id": 411438125,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704491562
    },
    {
        "content": "<p>You'll need to specify in the embedding what to add to <code>Linker</code> which adds host functions like WASI functions</p>",
        "id": 411438157,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704491577
    },
    {
        "content": "<p>that comes from the <code>wasmtime-wasi</code> crate, e.g. <code>wasmtime_wasi::preview2::command::add_to_linker</code></p>",
        "id": 411438224,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704491619
    },
    {
        "content": "<p>ah gotcha. is there a way to know if the component was wasi compiled or not?</p>",
        "id": 411438634,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704491849
    },
    {
        "content": "<p>yes you can look at the imports of the component to see if it includes wasi</p>",
        "id": 411438677,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704491882
    },
    {
        "content": "<p>e.g. <code>wasm-tools print</code> and you can take a look at that</p>",
        "id": 411438728,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1704491889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> perfect. thank you. derp for missing that!, will update the thread once I update these.</p>",
        "id": 411439656,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704492293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> (or others). Zeeshan being dumb alert :). So, I was trying to use an import of print on the example and using it: print(\"blah\"). </p>\n<p>I've defaulted the wasictx in state to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>So, I must be missing something to make this work in the embedded context? Error is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">WasmRuntime</span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">print</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n\n<span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">nothing</span>\n</code></pre></div>\n<p>print compiled to wasi target is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">crop_base64</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_width</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_height</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"running crop_base64\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base64_encoded_png</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">\"data:image/png;base64,\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">decoded</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">general_purpose</span>::<span class=\"n\">STANDARD</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">base64_encoded_png</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span>::<span class=\"n\">crop</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_width</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">target_height</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Everything compiles and works without the print.</p>",
        "id": 411466271,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704508083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I'm all good btw! Just need to go through the tests and docs in detail around how to impl Host for the State context. Thanks again.</p>",
        "id": 411581938,
        "sender_full_name": "Zeeshan Lakhani",
        "timestamp": 1704616310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587442\">Zeeshan Lakhani</span> has marked this topic as resolved.</p>",
        "id": 411581947,
        "sender_full_name": "Notification Bot",
        "timestamp": 1704616322
    }
]