[
    {
        "content": "<p>I am looking for compiler repository that I can contribute. but it looks 'Easy' labeled issues on github are doesn't seem to be maintained. can I get some easy task for cranelift stuffs? I have experience with modifying CoreCLR(which is dotnet runtime) optimization passes, LLVM optimization, lowering passes.</p>",
        "id": 295211960,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661428622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"527732\">@Jun Ryung Ju</span> welcome and thank you very much for your interest and stopping by here!</p>\n<p>We haven't done a great job of maintaining a list of easy issues, but some of the big ideas in many of them are still relevant (and actually always relevant), mainly:</p>\n<ul>\n<li>Optimize instruction lowerings</li>\n<li>Add support for missing cases on instructions (new types, etc)</li>\n<li>Help build testing infrastructure</li>\n<li>Optimize the compiler's performance itself (compiler speed), via reducing memory use, simplifying algorithms, etc</li>\n</ul>\n<p>On the third item above (testing infrastructure), <span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> is currently working to build out and improve a \"CLIF interpreter\", which is an interpreter of our intermediate language (CLIF) that we can use as a reference to test the real compiler backends against. AFAIK it does not yet have implementations for all opcodes. <span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> are there easy-to-separate pieces of work here that <span class=\"user-mention\" data-user-id=\"527732\">@Jun Ryung Ju</span> might be interested in?</p>",
        "id": 295267535,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661445454
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, Welcome to the project!</p>\n<p>Yes, there are a bunch of opcodes not yet implemented in the interpreter. The two groups that come to mind are:</p>\n<ul>\n<li>Bit ops on floats <code>f32/f64</code></li>\n<li><code>fcvt_to_int</code> and all its variants</li>\n</ul>\n<p>The reason these are important is that they are already implemented in the various backends, so when they are ready on the interpreter we can start fuzzing on them (which is the main driver for the work on the interpreter). Mostly its adding tests to our test suite and then working on a implementation on the interpreter.</p>\n<p>Here's an <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4446\">example PR</a> adding a few instructions</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/4446\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0f1d57102c07832eca5faefc906f4c40bbed29ee\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303339373830363236363538663330663439633532613665363837646238333065363363613737303835333933613939326439636532373030663731323632652f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f34343436)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4446\" title=\"cranelift: Add `fadd`/`fsub`/`fmul`/`fdiv` to interpreter by afonso360 · Pull Request #4446 · bytecodealliance/wasmtime\">cranelift: Add `fadd`/`fsub`/`fmul`/`fdiv` to interpreter by afonso360 · Pull Request #4446 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">👋  Hey,\nFuzzgen found that we were missing these as soon as I added float support</div></div></div>",
        "id": 295269770,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661446189
    },
    {
        "content": "<p>If you'd like to work on something related to compiler passes, you might want to read this thread that has a bunch of information regarding the current state of the compiler:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4712\">https://github.com/bytecodealliance/wasmtime/issues/4712</a></p>\n<p>Although I don't know how easy/hard any of those items are</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4712\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bdb633751ab4c2d429c9934dadb77f9a71fb0f24\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306261316238366334336565336566333565316338393838383232656238373432326561333962373030353464623562623435633136353738666436626139622f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34373132)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4712\" title=\"Census of binaryen/`wasm-opt` passes that might be relevant to Cranelift · Issue #4712 · bytecodealliance/wasmtime\">Census of binaryen/`wasm-opt` passes that might be relevant to Cranelift · Issue #4712 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">What is Cranelift&#39;s job (in the context of Wasmtime)? To take Wasm that is produced by LLVM and already optimized 99% of the time and do the architecture-specific code generation that LLVM cann...</div></div></div>",
        "id": 295272703,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661447112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/295269770\">말함</a>:</p>\n<blockquote>\n<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, Welcome to the project!</p>\n<p>Yes, there are a bunch of opcodes not yet implemented in the interpreter. The two groups that come to mind are:</p>\n<ul>\n<li>Bit ops on floats <code>f32/f64</code></li>\n<li><code>fcvt_to_int</code> and all its variants</li>\n</ul>\n<p>The reason these are important is that they are already implemented in the various backends, so when they are ready on the interpreter we can start fuzzing on them (which is the main driver for the work on the interpreter). Mostly its adding tests to our test suite and then working on a implementation on the interpreter.</p>\n<p>Here's an <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4446\">example PR</a> adding a few instructions</p>\n</blockquote>\n<p>Thanks for helping me out <span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> </p>\n<p>I think task that you suggested are good task to start contribute on cranelift. I'll take that :)</p>",
        "id": 295275528,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661448156
    },
    {
        "content": "<p>If you need any help let me know</p>",
        "id": 295275642,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661448186
    },
    {
        "content": "<p>Are there any resources I can refer to make a strict test? I have no idea what needs to be tested on \"Bit ops on floats f32/f64\" feature.</p>",
        "id": 295981680,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661801288
    },
    {
        "content": "<p>I mean for the strict test. not simple test.</p>",
        "id": 295981762,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661801339
    },
    {
        "content": "<p>I'm not sure what you mean by strict test?</p>",
        "id": 295986959,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661802702
    },
    {
        "content": "<p>The most common tests we have are compile tests and run tests</p>",
        "id": 295987052,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661802731
    },
    {
        "content": "<p>The interpreter can only run the latter</p>",
        "id": 295987077,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661802749
    },
    {
        "content": "<p>so, \"Bit ops on floats\" is kind of a broad term, it means a bunch of bit wise instructions that can also be used on floats, such as:</p>\n<ul>\n<li><a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.band\">band</a></li>\n<li><a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.bor\">bor</a></li>\n<li><a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.bxor\">bxor</a></li>\n</ul>\n<p>etc...</p>",
        "id": 295987215,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661802810
    },
    {
        "content": "<p>To build a run test you can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_f32</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">band_f32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"w\"></span>\n</code></pre></div>\n<p>put that in a file in <code>filetests/filetests/runtests/band-floats.clif</code> and the you can run it by invoking <code>cargo run -- test filetests/filetests/runtests/band-floats.clif</code> from the cranelift directory</p>",
        "id": 295987537,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661802928
    },
    {
        "content": "<p>(i haven't tested the output of that, Its probably wrong!)</p>",
        "id": 295987589,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661802951
    },
    {
        "content": "<p>the first lines tell <code>clif-util</code> what kind of tests we want to run on this file. <code>test interpret</code> invokes the interpreter and checks if the conditions in the <code>; run</code> comments pass. <code>test run</code> does the same, but compiles the file and runs it as a native binary</p>",
        "id": 295987823,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661803036
    },
    {
        "content": "<p>What I usually do when I write these tests is copy some other file such as <code>fadd.clif</code> and modify it, it has a bunch of interesting <code>f32</code> and <code>f64</code> values that provide a good base to start from!</p>",
        "id": 295988029,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661803100
    },
    {
        "content": "<p>Hope that helps!</p>",
        "id": 295988245,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661803198
    },
    {
        "content": "<p>um I was talking about what to test for float bit ops. looks your test on <code>fadd/fsub/fmul/fdiv</code> covers almost all cases so. is there a reference to cover bits ops on float feature? like from llvm bit operation tests. (well, I just realized I can just copy and paste some llvm bit ops tests.)</p>",
        "id": 295988442,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661803275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/295987537\">말함</a>:</p>\n<blockquote>\n<p>To build a run test you can do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">interpret</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">s390x</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">band_f32</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">band_f32</span><span class=\"p\">(</span><span class=\"mh\">0x0</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">5</span><span class=\"w\"></span>\n</code></pre></div>\n<p>put that in a file in <code>filetests/filetests/runtests/band-floats.clif</code> and the you can run it by invoking <code>cargo run -- test filetests/filetests/runtests/band-floats.clif</code> from the cranelift directory</p>\n</blockquote>\n<p>by the way this also helped me a lot.</p>",
        "id": 295988603,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661803327
    },
    {
        "content": "<p>thank you for the help!</p>",
        "id": 295988637,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1661803341
    },
    {
        "content": "<p><code>band</code> should pretty much allow all floats with no exceptions (unlike for example NaN's for fadd) so as long as we have a few tests on each category of floats it should be ok</p>",
        "id": 295988682,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661803364
    },
    {
        "content": "<p>i.e. for <code>fadd</code> we don't assert NaN's as strictly as we can with <code>band</code></p>",
        "id": 295988773,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661803398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span>, that looks like a great start to some documentation on the filetests. Would you mind opening a PR just putting that kind of information in <code>cranelift/filetests/README.md</code> or something? I could have used that a few weeks ago. <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> You don't have to add any more detail, we can always expand it later.</p>",
        "id": 296017521,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1661817368
    },
    {
        "content": "<p>I started working on this. I think I can finish this before this week.</p>",
        "id": 297202629,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662374138
    },
    {
        "content": "<p>The PR will be separate into two pieces. one is for basic ops(and, or, xor, not), and another one is shift ops(shl, shr, and so on...)</p>",
        "id": 297203136,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662374351
    },
    {
        "content": "<p>I'll make PR ASAP when its done :) thanks for helping.</p>",
        "id": 297203193,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662374381
    },
    {
        "content": "<p>No problem, and thanks for working on this!</p>",
        "id": 297206688,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662375952
    },
    {
        "content": "<p>I don't know why but cranelift is trying to lower test BB into native instructions. (I am using aarch64-darwin on host which is apple M1/M2 system) also this makes my test fails. if I remove \"target aarch64\" line from test clif. test success.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">TRACE</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">machinst</span>::<span class=\"n\">lower</span><span class=\"w\">      </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"n\">function</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"nc\">apple_aarch64</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">runtests</span><span class=\"o\">/</span><span class=\"kt\">f32</span><span class=\"o\">-</span><span class=\"n\">bitops</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">panicked</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">worker</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"nc\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"n\">Int</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"n\">Float</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>\n<p>can you help me to resolve this issue? or should I touch on instruction lowering section. (maybe missing i32 to f32 lowering stuffs? this should work fine because selected registers have same size. looks just type sanity check fails.)</p>",
        "id": 297216851,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662380219
    },
    {
        "content": "<p>This is lowered aarch64 instruction tho.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">VCode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Entry</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v130</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v132</span><span class=\"w\"></span>\n<span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"mi\">0</span>:\n    <span class=\"p\">(</span><span class=\"n\">original</span><span class=\"w\"> </span><span class=\"n\">IR</span><span class=\"w\"> </span><span class=\"n\">block</span>: <span class=\"nc\">block0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">fmov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d0</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"nc\">fmov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"nc\">and</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v132</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v129</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">fmov</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v130</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">4</span>: <span class=\"nc\">fmov</span><span class=\"w\"> </span><span class=\"n\">d0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">v131</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">Inst</span><span class=\"w\"> </span><span class=\"mi\">5</span>: <span class=\"nc\">ret</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 297216933,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662380254
    },
    {
        "content": "<p>the panic is on this assertion check. <code>/regalloc2-0.3.2/src/ion/liveranges.rs:526:25</code></p>",
        "id": 297217165,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662380336
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/regalloc2/blob/be47ac39e80471250e010d7b526105b7a0dcd4c1/src/ion/liveranges.rs#L526\">https://github.com/bytecodealliance/regalloc2/blob/be47ac39e80471250e010d7b526105b7a0dcd4c1/src/ion/liveranges.rs#L526</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc2/blob/be47ac39e80471250e010d7b526105b7a0dcd4c1/src/ion/liveranges.rs#L526\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/544f11987e675921a88a0edd32c83aeaed4a7ff1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666662353664643231393562396265376133653865306261383262353765383737376439326165633338646137616236663039663561623734376539323166362f62797465636f6465616c6c69616e63652f726567616c6c6f6332)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc2/blob/be47ac39e80471250e010d7b526105b7a0dcd4c1/src/ion/liveranges.rs#L526\" title=\"regalloc2/liveranges.rs at be47ac39e80471250e010d7b526105b7a0dcd4c1 · bytecodealliance/regalloc2\">regalloc2/liveranges.rs at be47ac39e80471250e010d7b526105b7a0dcd4c1 · bytecodealliance/regalloc2</a></div><div class=\"message_embed_description\">A new register allocator. Contribute to bytecodealliance/regalloc2 development by creating an account on GitHub.</div></div></div>",
        "id": 297217248,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662380370
    },
    {
        "content": "<p>Yeah looks <code>and</code> instr returns integer type as return type. maybe need lower <code>%v132</code>into float register class type so sanity check passes.</p>",
        "id": 297218745,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662380953
    },
    {
        "content": "<p>The good news is that if we are trying to run the code in the native target, it means that the interpreter tests passed!</p>\n<p>But it looks like our native support for these operations is quite incomplete (I originally looked at some parts of the backend and thought that these operations were available).</p>\n<p>I tried to run this on <code>x86</code> and it fails in ISLE probably due to not being handled correctly and I also tried on <code>aarch64</code> (linux) and got the same error as you. <code>s390x</code> also does not implement this.</p>\n<blockquote>\n<p>maybe missing i32 to f32 lowering stuffs? this should work fine because selected registers have same size. looks just type sanity check fails.</p>\n</blockquote>\n<p>Maybe, I'm not very familiar with how the register allocator works but I think we do track floats and integers as separate classes.</p>\n<p>In any case, usually for operations that the backends don't implement yet we disable tests for them, in this case since none of the backends implement them we can remove the <code>test run</code> and all of the <code>target</code>'s.</p>",
        "id": 297224536,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662383506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> Is this something that would be useful for cg_clif? Otherwise I think it could be a good candidate for removing these ops?</p>",
        "id": 297224656,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662383548
    },
    {
        "content": "<p>Which ops?</p>",
        "id": 297224752,
        "sender_full_name": "bjorn3",
        "timestamp": 1662383587
    },
    {
        "content": "<p>bitwise ops on floats</p>",
        "id": 297224782,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662383601
    },
    {
        "content": "<p><code>band</code>/<code>bor</code> / etc..</p>",
        "id": 297224804,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662383608
    },
    {
        "content": "<p>We even support that?</p>",
        "id": 297224816,
        "sender_full_name": "bjorn3",
        "timestamp": 1662383615
    },
    {
        "content": "<p>well. Its technically legal, but unimplemented everywhere</p>",
        "id": 297224842,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662383629
    },
    {
        "content": "<p>Rust doesn't have bitwise ops on floats. If it needs them, it does a transmute, which for float -&gt; int is implemented as bitcast.</p>",
        "id": 297224960,
        "sender_full_name": "bjorn3",
        "timestamp": 1662383668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"527732\">@Jun Ryung Ju</span> I've opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\">https://github.com/bytecodealliance/wasmtime/issues/4870</a> to track the status of these ops. I'm really sorry about asking you to work on this, I had the idea that they were implemented correctly!</p>\n<p>Hopefully we can cleanup our opcodes instead which is also a unintended benefit!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/799a18f7d8fdc182dc10fce0818592585b3997ca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663339353761353832333430616134663063363162613130343139663332316338643533306232326234666462363062353534623430613430313630646535382f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34383730)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4870\" title=\"Cranelift: simplify opcode set by removing bitwise operations on floats · Issue #4870 · bytecodealliance/wasmtime\">Cranelift: simplify opcode set by removing bitwise operations on floats · Issue #4870 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">👋 Hey, Jun Ryung Ju (sorry, I don&#39;t know the github user) on zulip discovered that bitwise operations on floats are unimplemented on AArch64. Upon further investigation they seem to be unimplem...</div></div></div>",
        "id": 297229210,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662385449
    },
    {
        "content": "<p>can I try implement the lowering thing?</p>",
        "id": 297230516,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662386016
    },
    {
        "content": "<p>Sure, but you might want to wait for a response on that issue, otherwise it might not be worth it if we are going to remove them</p>",
        "id": 297230715,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662386096
    },
    {
        "content": "<p>I'll work on <code>fcvt_to_int and all its variants</code> feature instead of this while waiting :)</p>",
        "id": 297316836,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662449481
    },
    {
        "content": "<p>We seem to have consensus that we should remove the bitwise operators on floats. Thank you for noticing this!</p>",
        "id": 297664609,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1662581102
    },
    {
        "content": "<p>When I tried removing the bitwise operators on floats, I discovered that Wasmtime actually uses them (on SIMD float vectors). So we're not removing them after all, and if you want to work on implementing them correctly for scalar floats, that'd be great!</p>",
        "id": 297689397,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1662593763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504918\">Jamey Sharp</span> <a href=\"#narrow/stream/206238-general/topic/asking.20help.20for.20first.20time.20contribution/near/297689397\">말함</a>:</p>\n<blockquote>\n<p>When I tried removing the bitwise operators on floats, I discovered that Wasmtime actually uses them (on SIMD float vectors). So we're not removing them after all, and if you want to work on implementing them correctly for scalar floats, that'd be great!</p>\n</blockquote>\n<p>Ok I'll try that. thanks for clarification.</p>",
        "id": 297947693,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662721137
    },
    {
        "content": "<p>but I think seems this need change for SIMD lowering instead of implementing scalar float ops. (like using raw bit level casting)</p>",
        "id": 297948010,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662721244
    },
    {
        "content": "<p>any decision for this?</p>",
        "id": 297948192,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1662721311
    },
    {
        "content": "<p>From what I understand I think we are going to go ahead with leaving the bit ops there for all types instead of switching to <code>bitcast + int op</code>.</p>\n<p>I'm going to wait a bit to see if anyone else comments before opening issues against all backends</p>",
        "id": 297991876,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662735386
    },
    {
        "content": "<p>You also might be interested in this: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4889\">https://github.com/bytecodealliance/wasmtime/issues/4889</a></p>\n<p>I finally had some time to do a proper roundup of what is or isn't working in the interpreter and combine it into a tracking issue.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4889\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/17a6e1c20d282a0afd01d58b771d3a93416e65a7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613763613562336339323235363831316332613139373536303861636631326630383537643934313339343438663933613661653035616464323932643133392f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34383839)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4889\" title=\"cranelift: Tracking issue for Interpreter support · Issue #4889 · bytecodealliance/wasmtime\">cranelift: Tracking issue for Interpreter support · Issue #4889 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey, I did a roundup of what is supported in the interpreter and what is tested or not. Now that we have multiple people working on the interpreter this is probably a better way to keep track of wh...</div></div></div>",
        "id": 297992016,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1662735431
    },
    {
        "content": "<p>Can I take task that lowers float bitops into x86/64 instruction after this?</p>",
        "id": 299423223,
        "sender_full_name": "Jun Ryung Ju",
        "timestamp": 1663501553
    },
    {
        "content": "<p>Sure, as far as I know no one else is working on that</p>",
        "id": 299707793,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1663663866
    },
    {
        "content": "<p>Yes, you're welcome to do that! It's easier to do once you've written some runtests for these bitops and ensured they pass on the interpreter, so I'll try to merge your PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4920\">https://github.com/bytecodealliance/wasmtime/pull/4920</a> as soon as you've added some tests and it passes CI. (Note that CI is currently failing because you need to run <code>cargo fmt</code>.)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/4920\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/879f60ceb3f03cb21ac82aed9321ae31d9f6511c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653462633432316165353139663739313130653161393536353330666264643432333132636363393332386238316232623533643962636132343164313763392f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f34393230)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4920\" title=\"[WIP] cranelift: Added fp `and`, `or`, `xor`, `not` ops to interpreter. by ArtBlnd · Pull Request #4920 · bytecodealliance/wasmtime\">[WIP] cranelift: Added fp `and`, `or`, `xor`, `not` ops to interpreter. by ArtBlnd · Pull Request #4920 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Tests are not ready. I'll add it ASAP.\n@afonso360</div></div></div>",
        "id": 299831568,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1663701584
    },
    {
        "content": "<p>howdy</p>",
        "id": 299920048,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754242
    },
    {
        "content": "<p>I have this kinda strange idea</p>",
        "id": 299920076,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754251
    },
    {
        "content": "<p>for those of you who know docker and docker compose - you probably heard this phrase that wasm kinda solves the same problems as docker (isolation, scoped permissions etc)</p>",
        "id": 299920215,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754289
    },
    {
        "content": "<p>so I was thinking - why not create something like a <code>wasmtime-compose.yml</code> file where you put all the config for how to set up whole project</p>",
        "id": 299920306,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754335
    },
    {
        "content": "<p>things that aren't really compiled to wasm like postgres could run on docker using a bridge, but stuff that is compilable to wasm would use wasmtime</p>",
        "id": 299920394,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754375
    },
    {
        "content": "<p>so as an MVP it could be just a superset of docker-compose's file syntax that extends it with some wasm options, and over time as an ecosystem grows the docker bridge would become less and less important, until eventually you'd end up with purely wasm-deployed apps - just with a good old familiar syntax</p>",
        "id": 299920802,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754500
    },
    {
        "content": "<p>does that sound feasible? as I said it's just a wild shower idea I had - think docker-compose for wasm-binaries</p>",
        "id": 299921071,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663754599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"545793\">@Wojciech Niedźwiedź</span> I think tooling in this space makes a lot of sense and docker compose was some of the inspiration I had in making <code>wasm-compose</code> (<a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-compose\">https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-compose</a>), where the idea is instead of composing <em>containers</em> together, it composes <em>WebAssembly components</em> (based on the component model proposal). The tool right now is pretty simple and I hope to evolve it over time with the component model itself. I'm happy to receive feedback about the tool or hear your ideas regarding what it means to you to compose WebAssembly as well (GitHub issues would probably be the best way to do that)!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-compose\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0d06af4a326aa8a7d993688159bf5cd22e25ee5b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373838333331613463343562303434303835326232373836613566663533613231616634386337306633653338643736393539363035313930643532313135322f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-compose\" title=\"wasm-tools/crates/wasm-compose at main · bytecodealliance/wasm-tools\">wasm-tools/crates/wasm-compose at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 299995653,
        "sender_full_name": "Peter Huene",
        "timestamp": 1663778356
    },
    {
        "content": "<p>Note, though, that if you're inclined to kick the tires following the example, right now <code>cargo component</code> is out of date with respect to the current component model proposal which hopefully will be fixed shortly now that there's a PR to update one of its dependencies.</p>",
        "id": 299996110,
        "sender_full_name": "Peter Huene",
        "timestamp": 1663778513
    },
    {
        "content": "<p>Obviously the tool doesn't do a hybrid model of working with some containerized applications and some wasm; what you propose sounds quite interesting as a way to bring wasm-based services into an existing orchestration.</p>",
        "id": 299996513,
        "sender_full_name": "Peter Huene",
        "timestamp": 1663778655
    },
    {
        "content": "<p>wow, I feel like a genious now xD I'm in no place to give any serious recommendation as I'm just a humble python developer who started writing rust just couple years ago for hobby projects - as I said just a shower idea. Feels really good to have the same idea as a smart person though</p>",
        "id": 300108020,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663838533
    },
    {
        "content": "<p>but what docker-compose does for me is I can define multiple services, give instructions on how to build them and close them down together in the same network - (plus simple deployments on a VPS using <code>docker-compose up -d</code>). for  <code>wasm</code> you could also give permissions to the \"service\", like - can it access the internet etc. I can also just invite someone to collaborate and tell them to \"just type <code>docker-compose up</code> and it'll work\"</p>",
        "id": 300108582,
        "sender_full_name": "Wojciech Niedźwiedź",
        "timestamp": 1663838755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"527732\">Jun Ryung Ju</span> has marked this topic as resolved.</p>",
        "id": 303181551,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665360686
    }
]