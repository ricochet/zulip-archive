[
    {
        "content": "<p>May I ask a completely naive question? How is the work being done on the <code>component-model</code>'s PR #336 named \"formalize component value definitions\" related to the <code>wasm-wave</code> crate which reached version 0.5.0 some three months ago? Is it related? Are they opposites sides of a coin? Was one the precursor of the other?</p>\n<p>I will admit I don't really know what this \"Value Encoding\" means. Seems like Wasm components are being encoded to binary well already and allowing all sorts of composition.</p>",
        "id": 438385875,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1715612772
    },
    {
        "content": "<p>WAVE is a human-read/writeable encoding of component model values that is (currently) completely outside of the spec. That PR is about adding an encoding of value constants into the component spec, which would be primarily for machine consumption. They aren't really related apart from both being representations of component values.</p>",
        "id": 438388119,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715613424
    },
    {
        "content": "<p>Thanks for that. Two questions?</p>\n<p>What would the human-readable coding  with wasm-wave show on a component that <code>wasm-tools print</code> does not? Is it kind of the same thing, but it would allow a parser to then go in the other direction, kind of like Wasm core modules could go from binary to .wat files and back?</p>\n<p>And since WASIp2 was implemented already, what does it mean that binary value constants aren't in the spec? (I hope this doesn't sound like an obnoxious question.)</p>",
        "id": 438389387,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1715613812
    },
    {
        "content": "<p>Encoded constants aren't required by any feature currently in the spec. They are being added to support a new \"Value Definitions\" feature in that PR.</p>",
        "id": 438390312,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715614081
    },
    {
        "content": "<p>Currently, any constant values a component uses will be encoded within the core module in a guest-language-dependent way. They only get encoded (as component values) when they are used in an imported function call.</p>",
        "id": 438390679,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715614182
    },
    {
        "content": "<p>Oh, thank you. <em>That</em> shed light on the issue for me.</p>",
        "id": 438392285,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1715614607
    },
    {
        "content": "<p>in particular we were hoping that wave could be the format we use for accepting arguments to invoke on the CLI, which doesn't presently work (came up recently <a href=\"#narrow/stream/217126-wasmtime/topic/trying.20to.20hand.20create.20a.20component/near/438117527\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/trying.20to.20hand.20create.20a.20component/near/438117527</a>)</p>",
        "id": 438394546,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715615308
    },
    {
        "content": "<p>I don't recall what was blocking that from continuing, when I looked at wave it looked great so maybe its just that nobody has prioritized adding it to wasmtime-cli</p>",
        "id": 438394662,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715615344
    },
    {
        "content": "<p>Yes I just haven't followed up: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7326\">https://github.com/bytecodealliance/wasmtime/issues/7326</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7326\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/620c30635c1e7a98a628bf4a4814d6c6f4ca9220/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306437613466393463386466613731623935346531393461363861376332663666323136306365626266653962373135333339306166373463313964653066342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37333236&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7326\" title=\"Add support for components to `wasmtime run --invoke` · Issue #7326 · bytecodealliance/wasmtime\">Add support for components to `wasmtime run --invoke` · Issue #7326 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">You can currently call a core module export with wasmtime run --invoke &lt;func&gt; &lt;module.wasm&gt; [params...], but using --invoke with components is not supported. While it should (presumably) be fairly ...</div></div></div>",
        "id": 438394827,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715615401
    },
    {
        "content": "<p>right on. well, we know you have been busy with lots of important stuff! maybe we could even make this an issue suitable for a new contributor?</p>",
        "id": 438395193,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715615500
    },
    {
        "content": "<p>Wave needs to be updated to Wasmtime 20's new component Val API but otherwise it should be relatively straightforward.</p>",
        "id": 438395628,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715615633
    },
    {
        "content": "<p>Also might want to move it into the BA org?</p>",
        "id": 438395707,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715615649
    },
    {
        "content": "<p>yeah, maybe as a crate in the wac repo?</p>",
        "id": 438395839,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715615701
    },
    {
        "content": "<p>I was able to get a forked version of<code>wepl</code> compiled for the new Wasmtime. The Val API did change but it was mostly very easy.</p>",
        "id": 438396061,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1715615771
    },
    {
        "content": "<p>yeah <code>wasmtime repl</code> would be the ideal spot for that to land</p>",
        "id": 438396180,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715615814
    },
    {
        "content": "<p><del>Not sure we'd want wasmtime to depend on wac (unless its going to anyway)</del> never mind, \"crate in the wac repo\" doesn't mean \"is wac\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 438396317,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715615863
    },
    {
        "content": "<p>the alternative is to have it in wasm-tools, which could work as well, and might make it easier to keep dep bumping cycles shorter since wac depends on wasmtime</p>",
        "id": 438396683,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715615984
    },
    {
        "content": "<p>(iirc, i understood that wac could run wasm as its extension system so i assume its using wasmtime-the-crate to do that)</p>",
        "id": 438396964,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715616047
    },
    {
        "content": "<p><span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span>  I believe that is planned but hasn't landed yet</p>",
        "id": 438397239,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715616124
    },
    {
        "content": "<p><a href=\"https://github.com/lann/wasm-wave/issues/33\">https://github.com/lann/wasm-wave/issues/33</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasm-wave/issues/33\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4f7788be24ca1231bca8a274cec4a729db9f80cc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346332653230623862623334343439356330366435666138356430343534383038396132653062356263383434313265393731323731333066396136356638662f6c616e6e2f7761736d2d776176652f6973737565732f3333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasm-wave/issues/33\" title=\"Move this repo to `bytecodealliance/wasm-tools` · Issue #33 · lann/wasm-wave\">Move this repo to `bytecodealliance/wasm-tools` · Issue #33 · lann/wasm-wave</a></div><div class=\"message_embed_description\">Zulip context: https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/value.20encoding.20and.20wasm-wave/near/438395707</div></div></div>",
        "id": 438397365,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715616161
    },
    {
        "content": "<p>I'll submit a PR for this soon. I have wasm-wave compiling and passings its unit tests for Wasm 20 now.</p>",
        "id": 438568255,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1715690712
    },
    {
        "content": "<p>Great! I'd be happy to discuss this too; I had the vague notion that I might need/want to redesign <a href=\"https://docs.rs/wasm-wave/0.5.1/wasm_wave/wasm/trait.WasmType.html\"><code>WasmType</code></a> and <a href=\"https://docs.rs/wasm-wave/0.5.1/wasm_wave/wasm/trait.WasmValue.html\"><code>WasmValue</code></a></p>",
        "id": 438569137,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715691004
    },
    {
        "content": "<p>Of course. Given how wasmtime redesigned its featured values and types, I kept thinking maybe how wasm-wave was wrapping those features could be changed. But I had a feeling a straightforward upgrade wouldn't be hard and could give an easier redesign point. And no ego here. I'm happy if you are willing to look at it and you can decide what to do then. I'll admit I've made these changes without a complete understanding how the program works, basically letting the compiler tell me what to look at and relying on the 54  unit tests to tell me if it seemed to be regressing. We can discuss more in the PR in a few minutes.</p>",
        "id": 438570546,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1715691453
    },
    {
        "content": "<p>Yeah if it works I'm happy to merge and consider other changes later</p>",
        "id": 438571105,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715691617
    },
    {
        "content": "<p>Thanks to <span class=\"user-mention\" data-user-id=\"704709\">@Frank Rehwinkel</span> for sticking with me as I figured out what interface changes were needed to support Wasmtime's new component type system! Their PR has been released with <code>wasm-wave</code> 0.6.0, bringing support for Wasmtime 21.</p>",
        "id": 440507792,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716556776
    }
]