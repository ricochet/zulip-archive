[
    {
        "content": "<p>do you think you could add support for the so-called \"protobuf main\"? it's a very powerful new way to use shell commands: <a href=\"https://github.com/SoniEx2/protobuf-main/blob/default/sayhello/sayhello.c#L18-L36\">https://github.com/SoniEx2/protobuf-main/blob/default/sayhello/sayhello.c#L18-L36</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/SoniEx2/protobuf-main/blob/default/sayhello/sayhello.c#L18-L36\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fe7fbd9285255c256c4ba320f150806ed6d11333/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383666313666646431313036383264383435363335353233333332313332366261623639313136623939373432326365333233636236393465336261616630652f536f6e694578322f70726f746f6275662d6d61696e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/SoniEx2/protobuf-main/blob/default/sayhello/sayhello.c#L18-L36\" title=\"protobuf-main/sayhello/sayhello.c at default · SoniEx2/protobuf-main\">protobuf-main/sayhello/sayhello.c at default · SoniEx2/protobuf-main</a></div><div class=\"message_embed_description\">Inspired by wasm typed main. Contribute to SoniEx2/protobuf-main development by creating an account on GitHub.</div></div></div>",
        "id": 470076910,
        "sender_full_name": "Soni L.",
        "timestamp": 1726279860
    },
    {
        "content": "<p>(yeah, we actually wrote a proof of concept for this thing... it's always exciting when you write code like <code>ptrdiff_t len = argv[argc-1] - argv[1];</code>)</p>",
        "id": 470078265,
        "sender_full_name": "Soni L.",
        "timestamp": 1726281006
    },
    {
        "content": "<p>here's some previous discussion on protobuf main in the context of WASI: <a href=\"https://github.com/WebAssembly/WASI/issues/541\">https://github.com/WebAssembly/WASI/issues/541</a> but we'd like to focus this towards protobuf main in the wasmtime CLI. (WASI should use typed main, when that becomes a thing.)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/issues/541\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3ce5658e7c60ad00846683c5b7b4fb2cd061d563/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363533373365623432303537616666316466626238643162653065363636346664643964633236643435313437623235356565643633343436326262326262662f576562417373656d626c792f574153492f6973737565732f353431&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/issues/541\" title=\"Proposal: &quot;Protobuf main&quot; · Issue #541 · WebAssembly/WASI\">Proposal: \"Protobuf main\" · Issue #541 · WebAssembly/WASI</a></div><div class=\"message_embed_description\">Instead of having the classic argc/argv interface which everyone knows and loves, it'd be nice if wasi could provide a typed CLI interface, either using protobuf or some bespoke new thing. Specific...</div></div></div>",
        "id": 470078893,
        "sender_full_name": "Soni L.",
        "timestamp": 1726281519
    },
    {
        "content": "<p>(actually we don't think you can use protobuf main with wasip2 due to a thing called \"unicode\"? does wasip2 enforce strict unicode strings in argv? we know wasip2 moves away from being posixy, compared to wasip1...)</p>",
        "id": 470079045,
        "sender_full_name": "Soni L.",
        "timestamp": 1726281680
    },
    {
        "content": "<p>likewise, a native powershell interface would be nice</p>",
        "id": 470079789,
        "sender_full_name": "Soni L.",
        "timestamp": 1726282017
    },
    {
        "content": "<p>As I understand it, the WASI CLI world wouldn't allow arbitrary binary data to be passed in with command line arguments, because WASI strings don't support unpaired Unicode surrogates. This might require a \"protobuf-cli\" world instead, like how Wasmtime currently supports the wasi-http world alongside wasi-cli.</p>",
        "id": 470080300,
        "sender_full_name": "IFcoltransG",
        "timestamp": 1726282142
    },
    {
        "content": "<p>yeah probably, but that's the WASI side of things, which we don't wanna go into. anyway,</p>\n<p>\"protobuf main\" in <em>wasmtime</em> would be not much different from if wasmtime were to provide a powershell cmdlet. a powershell cmdlet is pretty cool because it solves the main problem with passing CLI arguments to... anything really: the lack of types and the ensuing total confusion between options and arguments.</p>",
        "id": 470080949,
        "sender_full_name": "Soni L.",
        "timestamp": 1726282529
    },
    {
        "content": "<p>you could just take Actual Paths, instead of trying to guess whether something is an option or a subcommand or a path</p>",
        "id": 470081041,
        "sender_full_name": "Soni L.",
        "timestamp": 1726282587
    },
    {
        "content": "<p>fwiw, the wasmtime cli is already typed, the cli library does type checking during commandline parsing, but your concerns are about exposing those rust types into something other languages can use. WHat you want is already how the rust side works I think</p>",
        "id": 470161052,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1726315752
    },
    {
        "content": "<p>the wasmtime CLI takes an array of strings and then passes it into a parser. this is akin to passing strings to a javascript function which are then eval()'d to produce objects, instead of passing the objects as they are. sure, you need serialization between the caller and callee (because processes in virtual memory can't just pass arbitrary pointers around, besides you'd still need runtime type checking due to the possibility of replacing the executables), but there are better ways to serialize data around than a bespoke untyped DSL that everyone implements differently.</p>",
        "id": 470180071,
        "sender_full_name": "Soni L.",
        "timestamp": 1726325247
    },
    {
        "content": "<p>the parser is defined as structs with strong typing is my point, you can run the wasmtime cli function from rust code with typed arguments without using the parser first, and those structs could be used to generate these protobuf bindings you want, but that would be entirely possible outside of wasmtime in a bindings crate, maybe I'm wrong but I don't see this as a feature to add directly to the runtime</p>",
        "id": 470184053,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1726326612
    }
]