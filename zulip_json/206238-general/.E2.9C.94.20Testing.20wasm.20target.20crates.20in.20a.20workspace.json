[
    {
        "content": "<p>I've been working on something where I'd like to make small wasm tests (written in Rust) to verify that the runtime implementation I've done with wasmtime is behaving correctly (pretty much these little tests would trap if the runtime didn't behave right). Ideally I'd have a way to get some packages built to a wasm target and then do something with libtest-mimic.</p>\n<p>I can't use wasm-pack since this is not actually running on web</p>\n<p>However I can't seem to find a real nice way to do this. On the surface the unstable <code>artifact-dependencies</code> from cargo would sound like it would work, but the fact that I need to manually insert env lookups into the buildscript isn't nice.</p>\n<p>Invoking cargo from a buildscript isn't desirable (since I'd need to avoid having cargo call the workspace which is being invoked, therefore deadlocking)</p>",
        "id": 394541826,
        "sender_full_name": "i509VCB",
        "timestamp": 1696297853
    },
    {
        "content": "<p>I believe it can be achieved by using <a href=\"https://doc.rust-lang.org/cargo/reference/config.html#targettriplerunner\">CARGO_TARGET_&lt;triple&gt;_RUNNER</a> and pointing to your compiled application based on wasmtime. You just need to ensure that your application accepts the wasm file that will be executed as argument. If you are using the component model, you can have the same approach but need to install <code>cargo-component</code> rom <a href=\"https://github.com/bytecodealliance/cargo-component/pull/143\">this branch</a> i am working on and run <code>cargo component test</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/pull/143\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3eb21476b6c02cf98ff1663909e69bc72920bffa\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623935646434356330316461616338343932386366363766373539653266363233623536326238646663623030313836336561383438643938373965653633392f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f70756c6c2f313433)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/pull/143\" title=\"feat: support run, test and bench cargo commands by eduardomourar 路 Pull Request #143 路 bytecodealliance/cargo-component\">feat: support run, test and bench cargo commands by eduardomourar 路 Pull Request #143 路 bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">This will take a similar approach as used by cargo-wasi (source code here) in order to expose the following cargo commands: run, test and bench.\nThe following steps will be done per action:\n\nrun:  ...</div></div></div>",
        "id": 394578033,
        "sender_full_name": "Eduardo Rodrigues",
        "timestamp": 1696319028
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"506572\">Eduardo Rodrigues</span> <a href=\"#narrow/stream/206238-general/topic/Testing.20wasm.20target.20crates.20in.20a.20workspace/near/394578033\">said</a>:</p>\n<blockquote>\n<p>I believe it can be achieved by using <a href=\"https://doc.rust-lang.org/cargo/reference/config.html#targettriplerunner\">CARGO_TARGET_&lt;triple&gt;_RUNNER</a> and pointing to your compiled application based on wasmtime. You just need to ensure that your application accepts the wasm file that will be executed as argument. If you are using the component model, you can have the same approach but need to install <code>cargo-component</code> rom <a href=\"https://github.com/bytecodealliance/cargo-component/pull/143\">this branch</a> i am working on and run <code>cargo component test</code>.</p>\n</blockquote>\n<p>that looks interesting with the target runner option.</p>\n<p>From the pull request I saw it looks quite close to what I want (since I am using the component model) although it seems to generate some empty main functions</p>",
        "id": 394699932,
        "sender_full_name": "i509VCB",
        "timestamp": 1696362941
    },
    {
        "content": "<p>My current hack isn't great as I use an xtask crate to invoke cargo twice internally</p>",
        "id": 394700335,
        "sender_full_name": "i509VCB",
        "timestamp": 1696363110
    },
    {
        "content": "<p>Although the appeal of not needing all my xtask stuff and instead just throw an empty main in is appealing</p>",
        "id": 394700602,
        "sender_full_name": "i509VCB",
        "timestamp": 1696363220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506572\">@Eduardo Rodrigues</span> thank you for the pointer on <code>target.&lt;triple&gt;.runner</code>, it's definitely nicer than my xtask stuff.</p>",
        "id": 394701311,
        "sender_full_name": "i509VCB",
        "timestamp": 1696363544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"653437\">i509VCB</span> has marked this topic as resolved.</p>",
        "id": 394701330,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696363557
    }
]