[
    {
        "content": "<p>Howdy!  I'm trying to run a fairly large C/C++ test suite built on top of Catch2, compiled with wasi-sdk v10 and running with wasmtime.  I'm getting a fail on exit:</p>\n<div class=\"codehilite\"><pre><span></span><code>===============================================================================\nAll tests passed (142033 assertions in 116 test cases)\nError: failed to run main module `/var/folders/zs/m4nj7dw15v54xf284j66fbth0000gp/T/Pram_IfXpoFVmPpbidgbO9vvp/g==/WasiRunner/16149EC0-pram-baselib-tests-debug.wasm/app/baselib-tests-debug.wasm`\n\nCaused by:\n    0: failed to invoke `_start`\n    1: wasm trap: indirect call type mismatch, source location: @9e416a\n       wasm backtrace:\n         0: &lt;unknown&gt;!__funcs_on_exit\n         1: &lt;unknown&gt;!__prepare_for_exit\n         2: &lt;unknown&gt;!_start\n</code></pre></div>\n\n\n<p>There's no call to atexit in the code, so I'm guessing it's due to some generated __cxa_atexit with the wrong function signature.  Is there any reasonable way for me to figure out which function has the wrong signature?</p>",
        "id": 195589833,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588091354
    },
    {
        "content": "<p>Is it possible to recompile the test suite with debug info and use a debugger with wasmtime?</p>",
        "id": 195591373,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588091963
    },
    {
        "content": "<p>mm. Good idea; I do have debug info, I didn't actually think to use a debugger here.  Let me try that</p>",
        "id": 195591565,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588092038
    },
    {
        "content": "<p>/me is interested in assisting with troubleshooting any problems with running that setup</p>",
        "id": 195591583,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092049
    },
    {
        "content": "<p>wasmtime transforms wasm DWARF if <code>-g</code> is provided (works by default with lldb/linux, though there is a PR for gdb)</p>",
        "id": 195591729,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092118
    },
    {
        "content": "<p>do I just lldb on wasmtime itself, or is there a gdbserver-like thing to attach to?  Also running with <code>-g</code>, I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span><code>Error: failed to run main module `...`\nCaused by:\n    0: Debug information error\n    1: Invalid opcode in DWARF expression\n</code></pre></div>",
        "id": 195591907,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588092194
    },
    {
        "content": "<p>okay, looks like an old wasmtime</p>",
        "id": 195591975,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092241
    },
    {
        "content": "<p>yeah, it's 0.15 -- I'm building from git right now</p>",
        "id": 195592037,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588092255
    },
    {
        "content": "<p>I recommend ;) <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1572\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1572\">https://github.com/bytecodealliance/wasmtime/pull/1572</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1572\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1572\" title=\"Fix value label ranges resolution by yurydelendik · Pull Request #1572 · bytecodealliance/wasmtime\">Fix value label ranges resolution by yurydelendik · Pull Request #1572 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">There was a bug how value labels were resolved, which caused some DWARF expressions not be transformed, e.g. those are in the registers.\n\nPatch built on top of #1542\nDocumentation for ValueLocRange...</div></div></div>",
        "id": 195592071,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092275
    },
    {
        "content": "<p>do I want your branch, or master -- or merge of the two?</p>",
        "id": 195592241,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588092342
    },
    {
        "content": "<p>I rebased on top of master today</p>",
        "id": 195592354,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092376
    },
    {
        "content": "<p>ah there's a merge conflict with master still</p>",
        "id": 195592544,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588092474
    },
    {
        "content": "<p>right, I'll resolve that shortly, the branch can be used as is</p>",
        "id": 195592730,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092538
    },
    {
        "content": "<p>erm, right. sorry, operating on too little sleep :)</p>",
        "id": 195592803,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588092571
    },
    {
        "content": "<p>/me rebased PRs just to have that clean from conflicts</p>",
        "id": 195593770,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588092959
    },
    {
        "content": "<p>Arg, I need a newer lldb on mac</p>",
        "id": 195598917,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588095027
    },
    {
        "content": "<p>that might be a problem, only version of brew's lldb can do it, I think</p>",
        "id": 195601311,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588096048
    },
    {
        "content": "<p>and just for MacOSX, \".lldbinit\" needs <code>settings set plugin.jit-loader.gdb.enable on</code></p>",
        "id": 195601684,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588096198
    },
    {
        "content": "<p>/me has <code>lldb version 9.0.0</code> on mac</p>",
        "id": 195601774,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588096223
    },
    {
        "content": "<p>ah it was the lldbinit piece I was missing!  lldb 10.0 from brew works:</p>\n<div class=\"codehilite\"><pre><span></span><code>(lldb) bt\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)\n  * frame #0: 0x000000016ec53806 JIT(0x17d700000)`__funcs_on_exit at &lt;gen-1&gt;.wasm:10371434\n    frame #1: 0x000000016ec53695 JIT(0x17d700000)`__prepare_for_exit at &lt;gen-1&gt;.wasm:10371335\n    frame #2: 0x000000016da007be JIT(0x17d700000)`_start at &lt;gen-1&gt;.wasm:47534\n    frame #3: 0x000000016ec6ace3\n    frame #4: 0x000000010013b33a wasmtime`wasmtime::func::Func::call::_$u7b$$u7b$closure$u7d$$u7d$::h519bce4b59bf0f7c at func.rs:566:20\n    frame #5: 0x0000000100161ba8 wasmtime`wasmtime_runtime::traphandlers::catch_traps::call_closure::h991a454e37488ebb(payload=&quot;P\\x95���&quot;) at traphandlers.rs:385:17\n    frame #6: 0x00000001005d0fd6 wasmtime`RegisterSetjmp(buf_storage=0x00007ffeefbf9370, body=(wasmtime`wasmtime_runtime::traphandlers::catch_traps::call_closure::h991a454e37488ebb at traphandlers.rs:381), payload=0x00007ffeefbf9230) at helpers.c:12:3\n</code></pre></div>",
        "id": 195603944,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097233
    },
    {
        "content": "<p>of course now I need a libc with debug info</p>",
        "id": 195604002,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097267
    },
    {
        "content": "<p>because it's not clear how to figure out what it's actually trying to call -- I'm guessing with debug symbols, I'll be able to inspect the actual function pointer value, which should tell me the actual bad function?</p>",
        "id": 195604213,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097352
    },
    {
        "content": "<p>yeah, that's a hope</p>",
        "id": 195604242,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097372
    },
    {
        "content": "<p>you can also <code>dis</code> and check registers: maybe some value from params will pop</p>",
        "id": 195604461,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097459
    },
    {
        "content": "<p>this is actually a little annoying.  cranelift knows it's a bad signature.  would be handy if it could show me what the \"bad\" one was (and expected, though in this case I know what's expected)</p>",
        "id": 195604556,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097500
    },
    {
        "content": "<p>under the hood it is just an (signature) ID</p>",
        "id": 195604679,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097541
    },
    {
        "content": "<p>sure, but that id is described in the wasm module</p>",
        "id": 195604778,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097596
    },
    {
        "content": "<p>not really, more like engine assigned id/handle</p>",
        "id": 195604906,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097662
    },
    {
        "content": "<p>I wonder if  frame <code>var</code>s are inspectable</p>",
        "id": 195605031,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097742
    },
    {
        "content": "<p>they don't seem to be</p>",
        "id": 195605045,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097749
    },
    {
        "content": "<p>in wasmtime you can choose cranelift optimization e.g. via <code>--opt-level 0</code></p>",
        "id": 195605177,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097798
    },
    {
        "content": "<p>function \"pointer\" indices are direct indices into a table, right?  funcptr value \"1\" == index 1</p>",
        "id": 195605351,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097889
    },
    {
        "content": "<p>I think I can use the wat output and figure out all the calls to cxa_atexit</p>",
        "id": 195605373,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588097906
    },
    {
        "content": "<p>right</p>",
        "id": 195605403,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097923
    },
    {
        "content": "<p>fwiw, 10371335 is bytecode offset in wasm in <code>&lt;gen-1&gt;.wasm:10371335</code></p>",
        "id": 195605452,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588097951
    },
    {
        "content": "<p>/me is not sure <a href=\"https://wasdk.github.io/wasmcodeexplorer/\" title=\"https://wasdk.github.io/wasmcodeexplorer/\">https://wasdk.github.io/wasmcodeexplorer/</a> can handle that large file though</p>",
        "id": 195605642,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588098032
    },
    {
        "content": "<p>how do I get the wasm heap base address in lldb?</p>",
        "id": 195605650,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588098037
    },
    {
        "content": "<p>is there __vmctx defined?</p>",
        "id": 195605702,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588098067
    },
    {
        "content": "<p>if yes, <code>__vmctx-&gt;memory</code> shall do it</p>",
        "id": 195605748,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588098092
    },
    {
        "content": "<p>mm I can try, I was just using wasm2wat</p>",
        "id": 195605763,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588098100
    },
    {
        "content": "<p>__vmctx wasn't available, trying with opt-level 0 though</p>",
        "id": 195605803,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588098119
    },
    {
        "content": "<p>(thanks for your help btw!)</p>",
        "id": 195605875,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588098142
    },
    {
        "content": "<p>heh, <code>--opt-level 0</code> made things worse :)  (I have vmctx from a different frame turns out)  With it I lose some local vars:</p>\n<div class=\"codehilite\"><pre><span></span><code>(int) var0 = &lt;variable not available&gt;\n(int) var1 = 211424\n(int) var2 = &lt;variable not available&gt;\n</code></pre></div>\n\n\n<p>without (default):</p>\n<div class=\"codehilite\"><pre><span></span><code>(int) var0 = 52080\n(int) var1 = 211424\n(int) var2 = 277217280\n</code></pre></div>",
        "id": 195606358,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588098344
    },
    {
        "content": "<p>hmm... yeah... okay, I need to fix more stuff then</p>",
        "id": 195606518,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588098413
    },
    {
        "content": "<p>you can try setting a breakpoint (on symbols?), see if non-trap will give you more info</p>",
        "id": 195606740,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588098509
    },
    {
        "content": "<p>my strategy of \"let me read ints from memory at various local var addresses (also double-dereferenced) in hopes of finding the function pointer index\" did not succeed</p>",
        "id": 195606798,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588098530
    },
    {
        "content": "<p>right, having source code / DWARF for wasi-sdk might give you more clues for its location</p>",
        "id": 195607554,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588098866
    },
    {
        "content": "<p>I just realized I can also just.. put a printf inside funcs_atexit to print the indices as they're called</p>",
        "id": 195614769,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588102513
    },
    {
        "content": "<p><code>printf</code>: my favourite debugging technique when debugging miscompilations of cg_clif.</p>",
        "id": 195616358,
        "sender_full_name": "bjorn3",
        "timestamp": 1588103257
    },
    {
        "content": "<p>It would be _really nice_ to have some kind of wasm intrinsics for working with function signatures.  I'd love to be able to add an <code>assert(__wasm_signature_type(funcptr) == __wasm_signature_type(KnownGoodFunction))</code> in <code>__cxa_atexit</code> and give the user a good warning</p>",
        "id": 195622099,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588105584
    },
    {
        "content": "<p>That was extremely painful, but it looks like the culprit is <code>$std::__2::vector&lt;Baselib_Memory_PageState__std::__2::allocator&lt;Baselib_Memory_PageState&gt;_&gt;::~vector__</code></p>",
        "id": 195624560,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588106807
    },
    {
        "content": "<p>which returns an i32, instead of returning void</p>",
        "id": 195624614,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588106844
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   // Under some ABIs, destructors return this instead of void, and cannot be\n   // passed directly to __cxa_atexit if the target does not allow this\n   // mismatch.\n</code></pre></div>",
        "id": 195625887,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588107457
    },
    {
        "content": "<p>er.. this seems like a llvm bug, because <code>canCallMismatchedFunctionType</code> should definitely be false for wasm</p>",
        "id": 195626059,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588107523
    },
    {
        "content": "<p>now I have 3hrs of meetings but I will fix this :)</p>",
        "id": 195626302,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588107650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297507\">@Vladimir Vukicevic</span> it should be returning false already: <a href=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L517\" title=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L517\">https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L517</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L517\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/17149993?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L517\" title=\"llvm/llvm-project\">llvm/llvm-project</a></div><div class=\"message_embed_description\">The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at...</div></div></div>",
        "id": 195626429,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588107711
    },
    {
        "content": "<p>does wasm/wasi use the itanium ABI?</p>",
        "id": 195631767,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588110570
    },
    {
        "content": "<p>i'm trying to create a small repro</p>",
        "id": 195631912,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588110645
    },
    {
        "content": "<p>it uses a variant of the Itanium ABI</p>",
        "id": 195631926,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588110654
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project/blob/master/clang/include/clang/Basic/TargetCXXABI.h#L91\" title=\"https://github.com/llvm/llvm-project/blob/master/clang/include/clang/Basic/TargetCXXABI.h#L91\">https://github.com/llvm/llvm-project/blob/master/clang/include/clang/Basic/TargetCXXABI.h#L91</a> if anyone is curious :-)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/blob/master/clang/include/clang/Basic/TargetCXXABI.h#L91\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/17149993?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/blob/master/clang/include/clang/Basic/TargetCXXABI.h#L91\" title=\"llvm/llvm-project\">llvm/llvm-project</a></div><div class=\"message_embed_description\">The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at...</div></div></div>",
        "id": 195632141,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588110741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> you may know this (hi, btw!) -- in my broken case, the bad <code>__cxa_atexit</code> destructor call setup is happening from a <code>__cxx_global_var_init.77</code> function.  Does that seem sane for global_var_init to do that?</p>",
        "id": 195639382,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588114734
    },
    {
        "content": "<p>Yeah. Wasm doesn't have an equivalent of .fini or .dtors in other platforms, so the global var inits have to register their associated destructor calls with __cxa_atexit</p>",
        "id": 195639551,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588114837
    },
    {
        "content": "<p>Also, hi! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 195639570,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588114861
    },
    {
        "content": "<p>but I see global dtors also being called from <code>__cxx_global_array_dtor</code> functions too</p>",
        "id": 195639906,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588115043
    },
    {
        "content": "<p>__cxx_global_array_dtor is the function that gets registered with __cxa_atexit, which calls the dtors</p>",
        "id": 195640284,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588115268
    },
    {
        "content": "<p>well -- no, in my case I see a dtor being _directly_ registered with __cxa_atexit from a global_var_init</p>",
        "id": 195640663,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588115547
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  (func $__cxx_global_var_init.77 (type $t9)\n    (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i32) (local $l4 i32)\n    i32.const 2171\n    local.set $l0\n    i32.const 0\n    local.set $l1\n    i32.const 1024\n    local.set $l2\n    i32.const 211420\n    local.set $l3\n    i32.const 151088\n    local.set $l4\n    local.get $l3\n    local.get $l4\n    call $std::__2::basic_string&lt;char__std::__2::char_traits&lt;char&gt;__std::__2::allocator&lt;char&gt;_&gt;::basic_string&lt;std::nullptr_t&gt;_char_const*_\n    drop\n    local.get $l0\n    local.get $l1\n    local.get $l2\n    call $__cxa_atexit\n    drop\n    return)\n</code></pre></div>\n\n\n<p>in my case <code>$l0 = 2171</code> is the bad-signature vector dtor being passed to cxa_atexit</p>",
        "id": 195640708,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588115598
    },
    {
        "content": "<p>Hmm. That does seem odd. wasm destructors return i32, so I wouldn't think they could be registered with __cxa_atexit like that</p>",
        "id": 195641004,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588115832
    },
    {
        "content": "<p>yep, that's the bug :)</p>",
        "id": 195641012,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588115844
    },
    {
        "content": "<p>Is that a std::string? When I try a simple testcase with std::string, it registers <code>__cxx_global_array_dtor</code> with <code>__cxa_atexit</code>, and <code>__cxx_global_array_dtor</code> calls the dtor</p>",
        "id": 195641142,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588115960
    },
    {
        "content": "<p>I need to try <code>-fregister-global-dtors-with-atexit</code> but I really want to get to a small repro, this massive unified test runner is not great to work with :)</p>",
        "id": 195641149,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588115967
    },
    {
        "content": "<p>it's also totally possible that the wrong function pointer is being used here somehow too</p>",
        "id": 195641292,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588116090
    },
    {
        "content": "<p>Oh, awkward. It looks like -fregister-global-dtors-with-atexit does the same thing as what the wasm backend does with global dtors</p>",
        "id": 195641453,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588116229
    },
    {
        "content": "<p>Ooh. ignore my WAT paste above, the actual number is 2170 (which is still the dtor)</p>",
        "id": 195641826,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588116565
    },
    {
        "content": "<p>ok, 2170 is the same problem, just in a different <code>__cxx_global_var_init.5.37</code>.  the ctor right before it is <code>    call $std::__2::vector&lt;Baselib_Memory_PageState__std::__2::allocator&lt;Baselib_Memory_PageState&gt;_&gt;::vector_std::initializer_list&lt;Baselib_Memory_PageState&gt;_</code>, let me see if I can create something like this</p>",
        "id": 195641936,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588116654
    },
    {
        "content": "<p>Baselib_Memory_PageState is just an enum, nothing crazy.</p>",
        "id": 195642344,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588117073
    },
    {
        "content": "<p>Yeah, I can't reproduce this in a small testcase.  The thing that's wrong is the only vector dtor that's in the function ptr table (lots of other dtors, I assume due to vtables).  In a clang link command that outputs wasm, how do I get it to output bitcode or LLMV IR?</p>",
        "id": 195642776,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588117446
    },
    {
        "content": "<p>I don't know of a way to get it to emit llvm ir when producing wasm. It doesn't produce a linked LLVM IR image unless you're using -flto</p>",
        "id": 195644060,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588118308
    },
    {
        "content": "<p>I'm now at a bit of a loss how to proceed.  I _think_ the most useful next steps will be one of:</p>\n<ol>\n<li>see if I can get some kind of whole-program/LTO bitcode that I can decompile to IR, and see if the problem is visible there</li>\n<li>see if I can find in one of the object files the actual issue</li>\n<li>???</li>\n</ol>",
        "id": 195645369,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588119326
    },
    {
        "content": "<p>Can you determine which source file defines the object with the destructor in question?</p>",
        "id": 195645446,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588119383
    },
    {
        "content": "<p>Yeah I'm pretty sure I can</p>",
        "id": 195645485,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588119477
    },
    {
        "content": "<p>If you can compile that source file to .o, we could see if the problem is present there, or if it gets introduced at link time</p>",
        "id": 195645646,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588119615
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>define internal void @__cxx_global_var_init.27() #0 !dbg !13235 {\n  %1 = alloca %&quot;class.std::initializer_list&quot;, align 4\n  %2 = alloca [6 x i32], align 4\n  %3 = getelementptr inbounds [6 x i32], [6 x i32]* %2, i32 0, i32 0, !dbg !13236\n  %4 = bitcast [6 x i32]* %2 to i8*, !dbg !13236\n  call void @llvm.memcpy.p0i8.p0i8.i32(i8* align 4 %4, i8* align 4 bitcast ([6 x i32]* @constinit to i8*), i32 24, i1 false), !dbg !13236\n  %5 = getelementptr inbounds %&quot;class.std::initializer_list&quot;, %&quot;class.std::initializer_list&quot;* %1, i32 0, i32 0, !dbg !13236\n  %6 = getelementptr inbounds [6 x i32], [6 x i32]* %2, i32 0, i32 0, !dbg !13236\n  store i32* %6, i32** %5, align 4, !dbg !13236\n  %7 = getelementptr inbounds %&quot;class.std::initializer_list&quot;, %&quot;class.std::initializer_list&quot;* %1, i32 0, i32 1, !dbg !13236\n  store i32 6, i32* %7, align 4, !dbg !13236\n  %8 = call %&quot;class.std::__2::vector.6&quot;* @_ZNSt3__26vectorI24Baselib_Memory_PageStateNS_9allocatorIS1_EEEC2ESt16initializer_listIS1_E(%&quot;class.std::__2::vector.6&quot;* @pageStatesAll, %&quot;class.std::initializer_list&quot;* byval(%&quot;class.std::initializer_list&quot;) align 4 %1), !dbg !13236\n  %9 = call i32 @__cxa_atexit(void (i8*)* @__cxx_global_array_dtor.28, i8* null, i8* @__dso_handle) #4, !dbg !13236\n  ret void, !dbg !13236\n}\n</code></pre></div>",
        "id": 195646049,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120087
    },
    {
        "content": "<p>pretty sure that's it, and it looks fine :|</p>",
        "id": 195646057,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120097
    },
    {
        "content": "<p>Is this an optimized build?</p>",
        "id": 195646106,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120154
    },
    {
        "content": "<p>And if so, do you have wasm-opt in your PATH?</p>",
        "id": 195646117,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120170
    },
    {
        "content": "<p>debug build (-g -O0)</p>",
        "id": 195646126,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120185
    },
    {
        "content": "<p>Can you do <code>wasm2wat</code> on the .o file?</p>",
        "id": 195646181,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120211
    },
    {
        "content": "<p>tried, I get \"0001e60: error: invalid section code: 12\"</p>",
        "id": 195646185,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120225
    },
    {
        "content": "<p>(brb, meeting, sigh)</p>",
        "id": 195646198,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120242
    },
    {
        "content": "<p>or <code>llvm-objdump -d</code> (which works now \\o/)</p>",
        "id": 195646210,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120257
    },
    {
        "content": "<p>I can do llvm-objdump.. but not sure how to tell if the result is useful, I don't get any symbol/function names</p>",
        "id": 195646304,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120358
    },
    {
        "content": "<p>wasm2wat may need --enable-bulk-memory</p>",
        "id": 195646330,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120395
    },
    {
        "content": "<p>Or if your wasm2wat is new enough, --enable-all should do it</p>",
        "id": 195646398,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120443
    },
    {
        "content": "<p>yep that worked.  let's see</p>",
        "id": 195646412,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120461
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  (func $__cxx_global_var_init.27 (type $t0)\n    (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i32) (local $l4 i32) (local $l5 i32) (local $l6 i32) (local $l7 i32) (local $l8 i32) (local $l9 i32) (local $l10 i64) (local $l11 i32) (local $l12 i32) (local $l13 i64) (local $l14 i64) (local $l15 i64) (local $l16 i32) (local $l17 i32) (local $l18 i32) (local $l19 i32) (local $l20 i32) (local $l21 i32) (local $l22 i32) (local $l23 i32)\n    global.get $env.__stack_pointer\n    local.set $l0\n    i32.const 48\n    local.set $l1\n    local.get $l0\n    local.get $l1\n    i32.sub\n    local.set $l2\n    local.get $l2\n    global.set $env.__stack_pointer\n    i32.const 6\n    local.set $l3\n    i32.const 16\n    local.set $l4\n    local.get $l2\n    local.get $l4\n    i32.add\n    local.set $l5\n    local.get $l5\n    local.set $l6\n    i32.const 16\n    local.set $l7\n    local.get $l6\n    local.get $l7\n    i32.add\n    local.set $l8\n    i32.const 0\n    local.set $l9\n    local.get $l9\n    i64.load offset=648 align=4\n    local.set $l10\n    local.get $l8\n    local.get $l10\n    i64.store align=4\n    i32.const 8\n    local.set $l11\n    local.get $l6\n    local.get $l11\n    i32.add\n    local.set $l12\n    local.get $l9\n    i64.load offset=640 align=4\n    local.set $l13\n    local.get $l12\n    local.get $l13\n    i64.store align=4\n    local.get $l9\n    i64.load offset=632 align=4\n    local.set $l14\n    local.get $l6\n    local.get $l14\n    i64.store align=4\n    local.get $l2\n    local.get $l6\n    i32.store offset=40\n    local.get $l2\n    local.get $l3\n    i32.store offset=44\n    local.get $l2\n    i64.load offset=40\n    local.set $l15\n    local.get $l2\n    local.get $l15\n    i64.store offset=8\n    i32.const 620\n    local.set $l16\n    i32.const 8\n    local.set $l17\n    local.get $l2\n    local.get $l17\n    i32.add\n    local.set $l18\n    local.get $l16\n    local.get $l18\n    call $_ZNSt3__26vectorI24Baselib_Memory_PageStateNS_9allocatorIS1_EEEC2ESt16initializer_listIS1_E\n    drop\n    i32.const 16\n    local.set $l19\n    i32.const 0\n    local.set $l20\n    i32.const 0\n    local.set $l21\n    i32.const 620\n    drop\n    local.get $l19\n    local.get $l20\n    local.get $l21\n    call $env.__cxa_atexit\n    drop\n    i32.const 48\n    local.set $l22\n    local.get $l2\n    local.get $l22\n    i32.add\n    local.set $l23\n    local.get $l23\n    global.set $env.__stack_pointer\n    return)\n</code></pre></div>",
        "id": 195646437,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120502
    },
    {
        "content": "<p>gah sorry, long paste</p>",
        "id": 195646445,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588120510
    },
    {
        "content": "<p>ok, so it has a 0, so there's presumably a relocation to fill it iin</p>",
        "id": 195646463,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120561
    },
    {
        "content": "<p><code>llvm-objdump -d -r</code> on the .o file should show the relocations</p>",
        "id": 195646513,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588120594
    },
    {
        "content": "<p>(ok meetings all done)  What am I looking for in the -d -r output?  the tail end looks like</p>\n<div class=\"codehilite\"><pre><span></span><code>    f598: 10 d4 81 80 80 00             call    212\n            0000f599:  R_WASM_FUNCTION_INDEX_LEB    _ZNSt3__26vectorI24Baselib_Memory_PageStateNS_9allocatorIS1_EEEC2ESt16initializer_listIS1_E+0\n    f59e: 1a                            drop\n    f59f: 41 90 80 80 80 00             i32.const   16\n            0000f5a0:  R_WASM_TABLE_INDEX_SLEB  __cxx_global_array_dtor.28+0\n    f5a5: 21 13                         local.set   19\n    f5a7: 41 00                         i32.const   0\n    f5a9: 21 14                         local.set   20\n    f5ab: 41 80 80 80 80 00             i32.const   0\n            0000f5ac:  R_WASM_MEMORY_ADDR_SLEB  __dso_handle+0\n    f5b1: 21 15                         local.set   21\n    f5b3: 41 ec 84 80 80 00             i32.const   620\n            0000f5b4:  R_WASM_MEMORY_ADDR_SLEB  pageStatesAll+0\n    f5b9: 1a                            drop\n    f5ba: 20 13                         local.get   19\n    f5bc: 20 14                         local.get   20\n    f5be: 20 15                         local.get   21\n    f5c0: 10 80 80 80 80 00             call    0\n            0000f5c1:  R_WASM_FUNCTION_INDEX_LEB    __cxa_atexit+0\n    f5c6: 1a                            drop\n    f5c7: 41 30                         i32.const   48\n    f5c9: 21 16                         local.set   22\n    f5cb: 20 02                         local.get   2\n    f5cd: 20 16                         local.get   22\n    f5cf: 6a                            i32.add\n    f5d0: 21 17                         local.set   23\n    f5d2: 20 17                         local.get   23\n    f5d4: 24 80 80 80 80 00             global.set  0\n            0000f5d5:  R_WASM_GLOBAL_INDEX_LEB  __stack_pointer+0\n    f5da: 0f                            return\n    f5db: 0b                            end\n</code></pre></div>\n\n\n<p>which looks correct unfortunately</p>",
        "id": 195649068,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588122687
    },
    {
        "content": "<p>I just audited all __cxa_atexit calls in this file and everything looks fine.  This is the only file that the relevant type (the Baselib_Memory_PageState) enum/vector appears in</p>",
        "id": 195649333,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588122884
    },
    {
        "content": "<p>Here's what I've got.  All the global_var_inits from this function set up a cxa_atexit with a global_array_dtor function, except for the bad one.  The bad one is the \"right\" (consistent) index:</p>\n<div class=\"codehilite\"><pre><span></span><code>(func $_GLOBAL__sub_I_Baselib_Memory_Tests_Wasi.cpp (type $t9)\n    call $__cxx_global_var_init.76     -&gt; cxa_atexit with 2167      __cxx_global_array_dtor.78\n    call $__cxx_global_var_init.1.46   -&gt; cxa_atexit with 2168      __cxx_global_array_dtor.2.46\n    call $__cxx_global_var_init.3.46   -&gt; cxa_atexit with 2169      __cxx_global_array_dtor.4.46\n    call $__cxx_global_var_init.5.37   -&gt; cxa_atexit with ... 2170  $std::__2::vector&lt;Baselib_Memory_PageState__std::__2::allocator&lt;Baselib_Memory_PageState&gt;_&gt;::~vector__\n    return)\n</code></pre></div>\n\n\n<p>(with annotations of what funcptr index they call and what the actual thing is)</p>",
        "id": 195650618,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588124438
    },
    {
        "content": "<p>Ok, I had the wrong things earlier.   Based on that, the issue is in <code>var_init.5</code> in that file.  The .o file indeed has the wrong thing for <code>var_init.5</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>...\n     705: 41 84 80 80 80 00             i32.const   4\n            00000706:  R_WASM_TABLE_INDEX_SLEB  _ZNSt3__26vectorI24Baselib_Memory_PageStateNS_9allocatorIS1_EEED2Ev+0\n     70b: 21 0d                         local.set   13\n     70d: 20 0d                         local.get   13\n     70f: 21 0e                         local.set   14\n     711: 20 0c                         local.get   12\n     713: 21 0f                         local.set   15\n     715: 41 80 80 80 80 00             i32.const   0\n            00000716:  R_WASM_MEMORY_ADDR_SLEB  __dso_handle+0\n     71b: 21 10                         local.set   16\n     71d: 20 0e                         local.get   14\n     71f: 20 0f                         local.get   15\n     721: 20 10                         local.get   16\n     723: 10 80 80 80 80 00             call    0\n            00000724:  R_WASM_FUNCTION_INDEX_LEB    __cxa_atexit+0\n</code></pre></div>",
        "id": 195650899,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588124763
    },
    {
        "content": "<p>And the LLVM IR looks wrong (extra indentation in the cxa_atexit call):</p>\n<div class=\"codehilite\"><pre><span></span><code>define internal void @__cxx_global_var_init.5() #0 !dbg !3799 {\n  %1 = alloca %&quot;class.std::initializer_list&quot;, align 4\n  %2 = alloca [1 x i32], align 4\n  %3 = getelementptr inbounds [1 x i32], [1 x i32]* %2, i32 0, i32 0, !dbg !3800\n  store i32 4, i32* %3, align 4, !dbg !3800\n  %4 = getelementptr inbounds %&quot;class.std::initializer_list&quot;, %&quot;class.std::initializer_list&quot;* %1, i32 0, i32 0, !dbg !3800\n  %5 = getelementptr inbounds [1 x i32], [1 x i32]* %2, i32 0, i32 0, !dbg !3800\n  store i32* %5, i32** %4, align 4, !dbg !3800                                                                                                      %6 = getelementptr inbounds %&quot;class.std::initializer_list&quot;, %&quot;class.std::initializer_list&quot;* %1, i32 0, i32 1, !dbg !3800\n  store i32 1, i32* %6, align 4, !dbg !3800\n  %7 = call %&quot;class.std::__2::vector.6&quot;* @_ZNSt3__26vectorI24Baselib_Memory_PageStateNS_9allocatorIS1_EEEC2ESt16initializer_listIS1_E(%&quot;class.std::__2::vector.6&quot;* @_ZGR39Baselib_Test_Memory_SupportedPageStates_, %&quot;class.std::initializer_list&quot;* byval(%&quot;class.std::initializer_list&quot;) align 4 %1), !dbg !3800\n  %8 = call i32 @__cxa_atexit(\n            void (i8*)* bitcast (%&quot;class.std::__2::vector.6&quot;* (%&quot;class.std::__2::vector.6&quot;*)* @_ZNSt3__26vectorI24Baselib_Memory_PageStateNS_9allocatorIS1_EEED2Ev to void (i8*)*),\n            i8* bitcast (%&quot;class.std::__2::vector.6&quot;* @_ZGR39Baselib_Test_Memory_SupportedPageStates_ to i8*),\n            i8* @__dso_handle) #4, !dbg !3800  store %&quot;class.std::__2::vector.6&quot;* @_ZGR39Baselib_Test_Memory_SupportedPageStates_, %&quot;class.std::__2::vector.6&quot;** @Baselib_Test_Memory_SupportedPageStates, align 4, !dbg !3800\n  ret void, !dbg !3801\n}\n</code></pre></div>",
        "id": 195651121,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588124969
    },
    {
        "content": "<p>It looks like it might be related to global reference temporaries</p>",
        "id": 195658549,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588133753
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"n\">B</span> <span class=\"p\">{</span> <span class=\"n\">B</span><span class=\"p\">();</span> <span class=\"o\">~</span><span class=\"n\">B</span><span class=\"p\">();</span> <span class=\"p\">};</span>\n<span class=\"k\">namespace</span> <span class=\"n\">test</span> <span class=\"p\">{</span>\n  <span class=\"k\">const</span> <span class=\"n\">B</span> <span class=\"n\">b1</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">();</span>\n  <span class=\"k\">const</span> <span class=\"n\">B</span> <span class=\"o\">&amp;</span><span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n<p>shows the problem</p>",
        "id": 195658691,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588133948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> yep. I literally just tracked it down to here: <a href=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGExpr.cpp#L347\" title=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGExpr.cpp#L347\">https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGExpr.cpp#L347</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGExpr.cpp#L347\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/1386314?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGExpr.cpp#L347\" title=\"llvm-mirror/clang\">llvm-mirror/clang</a></div><div class=\"message_embed_description\">Mirror kept for legacy. Moved to https://github.com/llvm/llvm-project - llvm-mirror/clang</div></div></div>",
        "id": 195659208,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588134703
    },
    {
        "content": "<p>That call doesn't go through all the same code that happens <a href=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGDeclCXX.cpp#L143\" title=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGDeclCXX.cpp#L143\">https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGDeclCXX.cpp#L143</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGDeclCXX.cpp#L143\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/1386314?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm-mirror/clang/blob/master/lib/CodeGen/CGDeclCXX.cpp#L143\" title=\"llvm-mirror/clang\">llvm-mirror/clang</a></div><div class=\"message_embed_description\">Mirror kept for legacy. Moved to https://github.com/llvm/llvm-project - llvm-mirror/clang</div></div></div>",
        "id": 195659269,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588134758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> can you fix, or want me to give it a go?</p>",
        "id": 195659339,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588134872
    },
    {
        "content": "<p>I'm not at a computer where I can debug clang easily, so if yyou want to have a go, go for ito</p>",
        "id": 195659440,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588134993
    },
    {
        "content": "<p>I may poke you tomorrow for help in actually getting a patch submitted <span aria-label=\"put litter in its place\" class=\"emoji emoji-1f6ae\" role=\"img\" title=\"put litter in its place\">:put_litter_in_its_place:</span></p>",
        "id": 195659455,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588135031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> I take it back.  I don't have anywhere near enough context to do this :)</p>",
        "id": 195659735,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588135322
    },
    {
        "content": "<p>Yeah definitely can't do this, not without spending a large chunk of time on it that I wish I had.  Let me know if I should file it somewhere.</p>",
        "id": 195660329,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588135901
    },
    {
        "content": "<p>And armed with all this info, I see this code in our tests:</p>\n<div class=\"codehilite\"><pre><span></span><code>const std::vector&lt;Baselib_Memory_PageState&gt;&amp; Baselib_Test_Memory_SupportedPageStates = { Baselib_Memory_PageState_ReadWrite };\n</code></pre></div>\n\n\n<p>which, if I explicitly declare a vector with the right value and then assign that to the reference, the problem goes away.</p>",
        "id": 195660807,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588136285
    },
    {
        "content": "<p>Alternatively, could you just remove the <code>&amp;</code> there and create a regular global instead of a global reference to a temporary?</p>",
        "id": 195661550,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588137133
    },
    {
        "content": "<p>not in this case, this is a thing that's an extern elsewhere and it's a per-platform vector where most other platforms are initialized from a global vector</p>",
        "id": 195661630,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588137275
    },
    {
        "content": "<p>also, hooray for tracking down something that likely would have been a pain in the butt at some random point later on :)</p>",
        "id": 195661649,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588137325
    },
    {
        "content": "<p>Looking at the code in clang, I have an idea of what might be wrong, but I'll need to debug more to confirm. But I'll have to pick this up tomorrow.</p>",
        "id": 195661653,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588137333
    },
    {
        "content": "<p>Yep, no problem.  Thanks for looking into it!</p>",
        "id": 195661662,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588137353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> any luck on this? (I was out yesterday)</p>",
        "id": 195850680,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588258520
    },
    {
        "content": "<p>Not yet; I got busy with other things yesterday, but I'm going to take another look soon</p>",
        "id": 195850863,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588258575
    },
    {
        "content": "<p>np, thanks!</p>",
        "id": 195850916,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588258592
    },
    {
        "content": "<p>The dtor bitcast is coming from here:</p>",
        "id": 195895984,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278031
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L2403\" title=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L2403\">https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L2403</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L2403\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/17149993?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/blob/master/clang/lib/CodeGen/ItaniumCXXABI.cpp#L2403\" title=\"llvm/llvm-project\">llvm/llvm-project</a></div><div class=\"message_embed_description\">The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at...</div></div></div>",
        "id": 195896002,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278044
    },
    {
        "content": "<p>So one option is to make it call <code>EmitDeclDestroy</code>, or factor out code from <code>EmitDeclDestroy</code> for it to use.</p>",
        "id": 195896020,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278054
    },
    {
        "content": "<p>That would let it use a <code>__cxx_global_array_dtor</code> wrapper, which should fix the problem.</p>",
        "id": 195896045,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278075
    },
    {
        "content": "<p>There's also a plausible workaround:</p>",
        "id": 195896064,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278082
    },
    {
        "content": "<p>It turns out we already have code in the LLVM wasm backend which attempts to emulate function pointer casts by inserting wrapper functions.</p>",
        "id": 195896078,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278091
    },
    {
        "content": "<p>The only reason that code isn't saving us here is that it's looking for casted functions which are immediately called,</p>",
        "id": 195896085,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278098
    },
    {
        "content": "<p>and here we have a function being casted and passed as an argument to <code>__cxa_atexit</code>.</p>",
        "id": 195896101,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278109
    },
    {
        "content": "<p>So we could tweak this:</p>",
        "id": 195896115,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278116
    },
    {
        "content": "<p><a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp#L75\" title=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp#L75\">https://github.com/llvm/llvm-project/blob/master/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp#L75</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp#L75\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/17149993?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/blob/master/llvm/lib/Target/WebAssembly/WebAssemblyFixFunctionBitcasts.cpp#L75\" title=\"llvm/llvm-project\">llvm/llvm-project</a></div><div class=\"message_embed_description\">The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Note: the repository does not accept github pull requests at this moment. Please submit your patches at...</div></div></div>",
        "id": 195896160,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278123
    },
    {
        "content": "<p>to recognize uses which are \"the first operand of a <code>__cxa_atexit</code> call\"</p>",
        "id": 195896176,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278132
    },
    {
        "content": "<p>which would then cause it to insert a wrapper, which ought to generate working code.</p>",
        "id": 195896185,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588278138
    },
    {
        "content": "<p>It seems like both paths to <code>__cxa_atexit</code> should go through something common</p>",
        "id": 195985189,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588353709
    },
    {
        "content": "<p>But maybe not.  Either one of your suggestions seems pretty reasonable, but fixing it in a non-WASM specific way seems better because this is technically a problem on any ABI that can't call mismatched functions.  Which is probably just wasm, but still.</p>",
        "id": 195985503,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588353856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> any luck on this?  (Or, alternatively, is there a bug filed I can track -- or do you want me to file one somewhere? :)</p>",
        "id": 196681902,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588792034
    },
    {
        "content": "<p>No, I've not made any further progress yet.</p>",
        "id": 196683708,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588792941
    },
    {
        "content": "<p>I poked at it a bit, but I didn't see any super easy paths here. If you wanted to file a bug with the small testcase above and the findings about it, that'd be great!</p>",
        "id": 196683822,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588792997
    },
    {
        "content": "<p>Where's the best place to file the bug?  Against wasi-sdk or llvm?</p>",
        "id": 196833374,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588887393
    },
    {
        "content": "<p>For <code>wasi-sdk</code>, that'd be here: <a href=\"https://github.com/webassembly/wasi-sdk/issues\" title=\"https://github.com/webassembly/wasi-sdk/issues\">https://github.com/webassembly/wasi-sdk/issues</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/wasi-sdk/issues\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/wasi-sdk/issues\" title=\"WebAssembly/wasi-sdk\">WebAssembly/wasi-sdk</a></div><div class=\"message_embed_description\">WASI-enabled WebAssembly C/C++ toolchain. Contribute to WebAssembly/wasi-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 196833540,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1588887503
    },
    {
        "content": "<p>Yeah, the issue is a llvm bug though for the wasm backend; wasn't sure if filing that in wasi-sdk was the right place</p>",
        "id": 196835352,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588888561
    },
    {
        "content": "<p>For clang/llvm bugs, use the llvm tracker: <a href=\"https://bugs.llvm.org/\" title=\"https://bugs.llvm.org/\">https://bugs.llvm.org/</a></p>",
        "id": 196838094,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588890364
    },
    {
        "content": "<p>Filed <a href=\"https://bugs.llvm.org/show_bug.cgi?id=45876\">https://bugs.llvm.org/show_bug.cgi?id=45876</a></p>",
        "id": 197172971,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1589215445
    }
]