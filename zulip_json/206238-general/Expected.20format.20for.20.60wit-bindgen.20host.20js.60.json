[
    {
        "content": "<p>I'm trying to generate the JS host for a WIT world but I can´t figure out which input it expects. Passing the *.wit file such as the one in <a href=\"https://bytecodealliance.github.io/wit-bindgen/\">https://bytecodealliance.github.io/wit-bindgen/</a> fails with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">demo</span><span class=\"p\">.</span><span class=\"n\">wit</span>:<span class=\"mi\">1</span>:<span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">funcs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Using a wat file also fails (\"attempted to parse a wasm module with a component parser\").</p>",
        "id": 322416247,
        "sender_full_name": "Fabrice Desré",
        "timestamp": 1674180171
    },
    {
        "content": "<p>I believe the JS host bindings expect a WebAssembly component as input, which it infers the world from. It needs the component because it generates some glue (polyfills what a component-model-native host like Wasmtime would do) that depends on the inner core modules of the component.</p>",
        "id": 322428647,
        "sender_full_name": "Peter Huene",
        "timestamp": 1674190642
    },
    {
        "content": "<p>ok, so in the case of the demo, was the wit file also generated from this component? If so, how?</p>",
        "id": 322429176,
        "sender_full_name": "Fabrice Desré",
        "timestamp": 1674191037
    },
    {
        "content": "<p>The demo takes a wit, synthesizes a dummy core wasm module that implements the world, then makes a component with all that, and then runs the js bindings over that component output</p>",
        "id": 322429859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674191620
    },
    {
        "content": "<p>You can inspect the wasm outputs and see one should be full of unused imports and functions that only have unreachable instructions</p>",
        "id": 322429913,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674191652
    },
    {
        "content": "<p>ok, but what command is used to go from .wit -&gt; core wasm &amp; component?</p>",
        "id": 322437479,
        "sender_full_name": "Fabrice Desré",
        "timestamp": 1674196664
    },
    {
        "content": "<p>With the latest <code>wasm-tools</code> CLI you can do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">embed</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dummy</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>foo.wit</code> looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and that'll print out the component (in the wasm text format)</p>",
        "id": 322542921,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674228992
    }
]