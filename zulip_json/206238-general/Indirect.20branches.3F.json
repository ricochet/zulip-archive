[
    {
        "content": "<p>Is there any work done on indirect branches or tail calls?</p>",
        "id": 223638242,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611320823
    },
    {
        "content": "<p>I don't think so.</p>",
        "id": 223638268,
        "sender_full_name": "bjorn3",
        "timestamp": 1611320854
    },
    {
        "content": "<p>but is it planned to have support for indirect branches and branch target patching support in the future?</p>",
        "id": 223647159,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611325450
    },
    {
        "content": "<p>For tail calls there is an issue, but for indirect branches there isn't yet as far as I know. Branch target patching may be hard to implement due to interaction with regalloc I think.</p>",
        "id": 223662581,
        "sender_full_name": "bjorn3",
        "timestamp": 1611332161
    },
    {
        "content": "<p>seems quite dead issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\">https://github.com/bytecodealliance/wasmtime/issues/1065</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\" title=\"Is there any support for tail call eliminations? Are there any plans about it? · Issue #1065 · bytecodealliance/wasmtime\">Is there any support for tail call eliminations? Are there any plans about it? · Issue #1065 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">To write a functional language compiler using this IR, tail call eliminations would be desirable. Are there any plans to support this? I couldn't find any details in the docs.</div></div></div>",
        "id": 223681266,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611340636
    },
    {
        "content": "<p>In general, we intend to support all of Wasm, so standards track proposals will be implemented eventually (at least by the time they are fully accepted) but there is the question of priority and (again, in general) we are focusing on proposals that move us towards the <a href=\"https://hacks.mozilla.org/2019/11/announcing-the-bytecode-alliance/#tomorrow-s-solution-webassembly-nanoprocesses-\">nanoprocess model</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hacks.mozilla.org/2019/11/announcing-the-bytecode-alliance/#tomorrow-s-solution-webassembly-nanoprocesses-\" style=\"background-image: url(https://hacks.mozilla.org/files/2019/11/featured-image.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hacks.mozilla.org/2019/11/announcing-the-bytecode-alliance/#tomorrow-s-solution-webassembly-nanoprocesses-\" title=\"Announcing the Bytecode Alliance: Building a secure by default, composable future for WebAssembly\">Announcing the Bytecode Alliance: Building a secure by default, composable future for WebAssembly</a></div><div class=\"message_embed_description\">Lin Clark introduces the Bytecode Alliance, and uses Code Cartoon illustrations to share their vision of a WebAssembly ecosystem that is secure by default, fixing cracks in today’s software foundations. ...</div></div></div>",
        "id": 223686376,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1611343355
    },
    {
        "content": "<p>+1 on fitzgen's note re: prioritization, though I'll add that if someone wants to look at adding tail calls at the CLIF level, for use by other Cranelift frontends before the Wasm story comes together, I'm happy to point at the relevant ABI code and details, and review PRs</p>",
        "id": 223687002,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611343656
    },
    {
        "content": "<p>I guess I could try to work on tail calls on CLIF level. I've worked on my own tiny IR with tail calls support and it worked very well</p>",
        "id": 223687519,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611343884
    },
    {
        "content": "<p>Cool! The most relevant code is here (ABI code shared by x86-64 and aarch64 and specialized as needed): <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/machinst/abi_impl.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/machinst/abi_impl.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/machinst/abi_impl.rs\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/machinst/abi_impl.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 223688115,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344135
    },
    {
        "content": "<p>we'd need new tail-call instructions, I think, and then lower them into some combination of the return epilogue (stackframe cleanup) and call code; I haven't thought through too many details yet</p>",
        "id": 223688213,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344174
    },
    {
        "content": "<p>let me know if you've got specific questions or thoughts after poking around...</p>",
        "id": 223688268,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344195
    },
    {
        "content": "<p>I have question that is where to look for adding new instruction? I think tail call could be just treated as <code>return_</code> except with <code>jmp</code> instruction instead of <code>ret</code> most of the time.</p>",
        "id": 223689307,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611344665
    },
    {
        "content": "<p>Instructions are defined in cranelift/codegen/meta/src/shared/instructions.rs</p>",
        "id": 223689434,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344735
    },
    {
        "content": "<p>that's more or less the lowering, yes, though there are a lot of details wrt stack frames :-) And actually one thing I didn't mention above is that for call signatures that imply on-stack args or return values, things get a bit messy if we want to maintain constant stack usage with tail-call recursion</p>",
        "id": 223689573,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344783
    },
    {
        "content": "<p>And if I understand correctly if we will treat tail call as return then function we're calling should have same return types as current function. I'm also not sure wha to do when functions returns more than two parameters or some parameters is passed through stack? For example windows abi can return only one value through register while SystemV allows returning two values in two registers</p>",
        "id": 223689651,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611344820
    },
    {
        "content": "<p>yes, so the return-area size will match, so we can just reuse the space that the caller allocated</p>",
        "id": 223689756,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344867
    },
    {
        "content": "<p>the args are a bit trickier though: the tail-call's on-stack args space needs to be the same size or smaller than ours</p>",
        "id": 223689804,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344883
    },
    {
        "content": "<p>if not, then we are forced to make the tail call with an SP below its location when we were called, which voids the constant stack usage guarantee otherwise usually expected of tail call implementations</p>",
        "id": 223689914,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344926
    },
    {
        "content": "<p>I'm not sure how other compilers handle this; needs some thought/research</p>",
        "id": 223689968,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611344954
    },
    {
        "content": "<p>Hmm -- so gcc seems to just not do TCO when the stack arg space of the callee is larger than the caller's: <a href=\"https://godbolt.org/z/nbGTve\">https://godbolt.org/z/nbGTve</a> (func2 and func3 both tail-call func1; func3 has a large enough stack arg space to reuse while func2 does not)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/nbGTve\" style=\"background-image: url(https://github.com/compiler-explorer/infra/blob/master/logo/favicon.png?raw=true)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/nbGTve\" title=\"Compiler Explorer - C (x86-64 gcc (trunk))\">Compiler Explorer - C (x86-64 gcc (trunk))</a></div><div class=\"message_embed_description\">__attribute__((noinline)) int func1(int a, int b, int c, int d, int e, int f, int g, int h) {\n    return a + b + c + d + e + f + g + h;\n}\n\nint func2(int a, int b, int c, int d, int e, int f, int g) {\n    return func1(a, b, c, d, e, f, g + 1, g + 1);\n}\n\nint func3(int a, int b, int c, int d, int e, int f, int g, int h) {\n    return func1(a, b, c, d, e, f, g + 1, h + 1);\n}</div></div></div>",
        "id": 223690977,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611345424
    },
    {
        "content": "<p>interestingly, clang seems to <em>not</em> do TCO for func3</p>",
        "id": 223690998,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611345435
    },
    {
        "content": "<p>I'm gonna try Zig. It has possibility to force tail call</p>",
        "id": 223691043,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611345460
    },
    {
        "content": "<p>for C/C++ compilers this is a \"nice-to-have\" optimization, so no problem if we fail, but yeah, for cases where the IR semantics imply we must do TCO, it's an open question</p>",
        "id": 223691122,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611345487
    },
    {
        "content": "<p>Hmm Zig seems to just throw error when it can't do tail call</p>",
        "id": 223691986,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611345846
    },
    {
        "content": "<p>What if preallocate stack space for arguments if needed on caller side? This way callee does not have to do any stack manipulation and function that callee tail calls should use this memory?</p>",
        "id": 223693348,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611346511
    },
    {
        "content": "<p>But this seems to limit how we can call functions. Indirect tail calls is quite impossible this way I believe</p>",
        "id": 223693459,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611346562
    },
    {
        "content": "<p>That's a bit tricky to require, since if a standard ABI (like System V) is specified, calls may come from code that is outside our control</p>",
        "id": 223693935,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611346758
    },
    {
        "content": "<p>Another way is to do tail calls platform dependent and make <code>tail_call</code> return true or false if it emits or not tail call. There should also be way to pass these parameters on heap but I'm entirely not sure how this works</p>",
        "id": 223694063,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611346809
    },
    {
        "content": "<p>I just took a look at the Wasm proposal (to look ahead a bit to what we will eventually need to satisfy) and I didn't see any requirements wrt argument type or number of arguments of caller and callee. I remember something about an ABI change needed in SpiderMonkey to support fully general tail calls. So if we will need to do something specific for Wasm anyway, where TCO is required by the newly proposed instructions, I think the best thing to do in this case (with a standard ABI like SysV) is to just fall back silently to a non-tail call, as gcc and clang do</p>",
        "id": 223694257,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611346919
    },
    {
        "content": "<p>Perhaps we could add an attribute on the instruction that requires it to TCO or emit a compile error, but that makes the CLIF validity dependent on ABI details / stack layout, which I am not too fond of</p>",
        "id": 223694347,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611346949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> perhaps you have more guidance / thoughts on the above? ^^</p>",
        "id": 223694417,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611346981
    },
    {
        "content": "<blockquote>\n<p>but that makes the CLIF validity dependent on ABI details / stack layout, which I am not too fond of</p>\n</blockquote>\n<p>Yeah I don't like that too. I would like to use Cranelift in my tracing jit compiler and tail calls is the only way to implement side traces effectively.</p>",
        "id": 223694687,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611347106
    },
    {
        "content": "<p>if you control the signatures (as you generate the traces) a workaround would be to just ensure that you always have the same number of args, I guess (I dunno how you're mapping traces to functions -- args are live registers/values?)</p>",
        "id": 223695449,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611347435
    },
    {
        "content": "<p>anyway, yeah, I would say let's start by assuming silent fallback, and we can change if we have a better idea later :-)</p>",
        "id": 223695505,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1611347459
    },
    {
        "content": "<p>Yeah I guess this should work. We also could return boolean from <code>tail_call</code> function which will say if tail call is sucessful or not.</p>",
        "id": 223696041,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611347681
    },
    {
        "content": "<p>Going to sleep. Will try to start work on this tomorrow. :)</p>",
        "id": 223696154,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611347742
    },
    {
        "content": "<p>I'm going in the right direction?  I can't get it to built cranelift: &lt;<a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...playXE:cranelift-tailcalls\">https://github.com/bytecodealliance/wasmtime/compare/main...playXE:cranelift-tailcalls</a>&gt;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">Inst</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">recipe</span><span class=\"w\"> </span><span class=\"n\">Op1tail_call</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">same</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">meta</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">cdsl</span><span class=\"o\">/</span><span class=\"n\">encodings</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">154</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/compare/main...playXE:cranelift-tailcalls\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...playXE:cranelift-tailcalls\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 223721247,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1611362642
    },
    {
        "content": "<p>It is complaining that the arguments to <code>tail_call</code> and the required return values of functions can't be the same. You are implementing it for the old x86 backend that will likely be removed somewhere this year. The new backend can be found at codegen/src/isa/x64. This backend uses a completely different framework.</p>",
        "id": 223735361,
        "sender_full_name": "bjorn3",
        "timestamp": 1611384391
    },
    {
        "content": "<p>By the way, there is another option for tail calls that wasn't discussed above: you can generate a shim for the current function to call one with a bigger stack frame, so as to get enough space to fit a tail call. This usually isn't worth the effort, but it is important if you have a mutual tail call situation. You can also optimize any calls that you have visibility into to skip the shim, but anything where you have to adhere to the ABI has to call the shim. (I had to implement a compiler with TCO for a class and this is what I did to ensure that mutual tail calls always work.)</p>",
        "id": 234469245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618393080
    }
]