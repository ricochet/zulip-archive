[
    {
        "content": "<p>Hello,</p>\n<p>I’m new to wasmtime and I could use some help.</p>\n<p>I want to port a module that creates TCP sockets to wasmtime. I understand it must use the wasi-sockets API.<br>\nSo I wrote a minimal test that calls the wasi:sockets/tcp-create-socket@0.2.0/create-tcp-socket() function.</p>\n<p>And then I do:</p>\n<p>wasm-tools component new testapp.wasm --adapt wasi_snapshot_preview1.command.wasm -o testapp-p2.wasm</p>\n<p>But it stops with the following error:</p>\n<p>error: failed to encode a component from module</p>\n<p>Caused by:<br>\n    0: failed to register indirect shims for main module<br>\n    1: missing component metadata for import of <code>wasi:sockets/tcp-create-socket@0.2.0::create-tcp-socket</code></p>\n<p>I know the name and type of the function are good, because if I change them, I get another error like “type mismatch for function <code>create-tcp-socket</code>: expected <code>[I32, I32] -&gt; []</code> but found <code>[I32, I32] -&gt; [I32]</code>”. So the tool knows about that function, but doesn’t want to include it.</p>\n<p>If I extract the WIT information with “wasm-tools component wit”, the wasi:sockets/tcp-create-socket@0.2.0 module is not there. Maybe this is why. But how to add it? I can extract WIT, but how can I modify it and then update the WASM file with the new version?</p>",
        "id": 419340831,
        "sender_full_name": "Kotek",
        "timestamp": 1706824819
    },
    {
        "content": "<p>when wasm-tools component new says \"missing component metadata for import\" what that means its looking for information in a custom section that provides component model type information for the module-level import</p>",
        "id": 419364644,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706836439
    },
    {
        "content": "<p>when you use the wit-bindgen tool suite for various languages, this information ends up in your linked module on your behalf, unless you are using wit-bindgen c, in which case it emits it in a special <code>.o</code> file that you need to pass to cc as part of your linking step. are you by chance using wit-bindgen c?</p>",
        "id": 419364758,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706836518
    },
    {
        "content": "<p>If I don't call functions from <code>wasi-sockets</code>, the <code>wasm-tools component</code>  command completes, and the WASM file runs. For example if I call <code>wasi:cli/stderr@0.2.0/get-stderr()</code> it works and returns the descriptor. But not for functions from <code>wasi-sockets</code>.</p>",
        "id": 419382020,
        "sender_full_name": "Kotek",
        "timestamp": 1706847740
    },
    {
        "content": "<p>I don't need to export anything to other components.</p>",
        "id": 419419255,
        "sender_full_name": "Kotek",
        "timestamp": 1706866569
    },
    {
        "content": "<p>I use Kotlin and Zig. I installed wit-bindgen-cli to see what the .o file you are talking about contains. It requires a WIT file, but with the one from my test app  it prints \"Error: package not found import wasi:cli/exit@0.2.0;\"</p>",
        "id": 419423941,
        "sender_full_name": "Kotek",
        "timestamp": 1706868191
    },
    {
        "content": "<p>I tried this:</p>\n<p>package testapp:component;</p>\n<p>world testapp {<br>\n  import wasi:sockets/tcp-create-socket@0.2.0;<br>\n}</p>",
        "id": 419424009,
        "sender_full_name": "Kotek",
        "timestamp": 1706868217
    },
    {
        "content": "<p>But got \"Error: package not found\" even with a copy of <code>tcp-create-socket.wit</code> in the same directory.</p>",
        "id": 419424193,
        "sender_full_name": "Kotek",
        "timestamp": 1706868277
    },
    {
        "content": "<p>Error is the same with teavm-java</p>",
        "id": 419424579,
        "sender_full_name": "Kotek",
        "timestamp": 1706868398
    },
    {
        "content": "<p>The default WIT content is:</p>\n<p>package root:component;</p>\n<p>world root {<br>\n  import wasi:cli/exit@0.2.0;<br>\n  import wasi:io/error@0.2.0;<br>\n  import wasi:io/streams@0.2.0;<br>\n  import wasi:cli/stdin@0.2.0;<br>\n  import wasi:cli/stdout@0.2.0;<br>\n  import wasi:cli/stderr@0.2.0;<br>\n  import wasi:clocks/wall-clock@0.2.0;<br>\n  import wasi:filesystem/types@0.2.0;<br>\n  import wasi:filesystem/preopens@0.2.0;</p>\n<p>export wasi:cli/run@0.2.0;<br>\n}</p>\n<p>How to add wasi:sockets to that list and remove the imports I don't need?</p>",
        "id": 419426016,
        "sender_full_name": "Kotek",
        "timestamp": 1706868886
    },
    {
        "content": "<p>Also why are imports required? With function calls, the WASM file already contains what modules, versions and functions must be imported. Why the duplication? Is it for IDEs?</p>",
        "id": 419427573,
        "sender_full_name": "Kotek",
        "timestamp": 1706869494
    },
    {
        "content": "<p>the type information for all of those imports is coming from the adapter, but the adapter doesnt have the type information for wasi sockets</p>",
        "id": 419511449,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706898524
    },
    {
        "content": "<p>those imports are present because the adapter requires them in order to provide an implementation of wasi preview 1 to your module</p>",
        "id": 419511553,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706898568
    },
    {
        "content": "<p>if you dont need them, you can take a look at the adapter source for how we narrowed it down for the proxy build, and try that, but its not trivial. we havent put much energy into optimizing the way the adapter builds because its 1. quite difficult, and 2. a stepping stone to where toolchains use the preview 2 imports directly</p>",
        "id": 419511747,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706898639
    },
    {
        "content": "<p>if you are using kotlin and/or zig you'll have to provide the component type information for the preview 2 functions your module imports in order to use <code>wasm-tools component new</code>. you can dig into how the wit-bindgen c object file creator works in that project to see how.</p>",
        "id": 419511923,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706898714
    },
    {
        "content": "<p>But what WIT file shall I give to <code>wit-bindgen c</code>? What should it contain to enable wasi sockets? What is \"the component type information\" exactly? A custom section? Functions that have to be defined?</p>",
        "id": 419520993,
        "sender_full_name": "Kotek",
        "timestamp": 1706902174
    },
    {
        "content": "<p>I just want to call a function. Why is it so complicated?</p>",
        "id": 419522080,
        "sender_full_name": "Kotek",
        "timestamp": 1706902646
    },
    {
        "content": "<p>Can the adapter be patched to include <code>wash-sockets</code>?</p>",
        "id": 419522390,
        "sender_full_name": "Kotek",
        "timestamp": 1706902782
    },
    {
        "content": "<p>Is it possible to buy support for wasmtime to help us solve that issue?</p>",
        "id": 419522989,
        "sender_full_name": "Kotek",
        "timestamp": 1706903013
    },
    {
        "content": "<p>Or any other place to ask for help?</p>",
        "id": 419523163,
        "sender_full_name": "Kotek",
        "timestamp": 1706903085
    },
    {
        "content": "<p>you should invoke wit-bindgen c with the wasi-cli command world. its complicated because this is brand new stuff and nobody has yet built out a super easy DX for your language. it will only feel simple once that happens.</p>",
        "id": 419532146,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706906667
    },
    {
        "content": "<p>i'm not aware of anyone offering commercial support for wasmtime or other places to ask for help. this is a small community and this zulip is the center of it.</p>",
        "id": 419532307,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706906739
    },
    {
        "content": "<p>Could you clarify what \"the wadi-cli command world\" is?  What should the content of the file be? Is it a copy of <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/command.wit\">https://github.com/WebAssembly/wasi-cli/blob/main/wit/command.wit</a> and <code>imports.wit</code> patched to include <code>wasi-sockets</code>?</p>",
        "id": 419533960,
        "sender_full_name": "Kotek",
        "timestamp": 1706907437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"688605\">Kotek</span> <a href=\"#narrow/stream/206238-general/topic/Using.20sockets.20in.20Wasmtime/near/419522080\">said</a>:</p>\n<blockquote>\n<p>I just want to call a function. Why is it so complicated?</p>\n</blockquote>\n<p>Reading over this I wanted to point out that comments like this generally aren't too helpful and end up more often than not being actively harmful. As a maintainer it's difficult to see comments like this in the sense that while we understand documentation and the tooling isn't perfect a comment like this indicates that you might not be acting in good faith and/or not be putting in the effort to engage with us trying to help.</p>\n<p>I haven't read over the rest of the thread here but I wanted to at least point that out. We always appreciate help in fixing issues, improving docs, or even just help identifying what needs improvement. It's best though to assume everyone's acting in good faith here and it's not like we're intentionally making things hard, but instead this is somewhat of a new ecosystem and it takes time to grow it.</p>",
        "id": 419536461,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706908696
    },
    {
        "content": "<p>I agree with what Alex said here, so the best path is to start again with the idea that this is a new path for us all.</p>",
        "id": 419547665,
        "sender_full_name": "Ralph",
        "timestamp": 1706914179
    },
    {
        "content": "<p>We are with your desires here. Help us keep you and others get to the right path.</p>",
        "id": 419547757,
        "sender_full_name": "Ralph",
        "timestamp": 1706914209
    },
    {
        "content": "<p>The community has arrived at this place, hoping to make it easier - but we aren't quite here yet. Help us help you.</p>",
        "id": 419548027,
        "sender_full_name": "Ralph",
        "timestamp": 1706914342
    },
    {
        "content": "<p>hi, i just tried using a socket from wasmtime and ran into an error saying that <code>sock_open</code> doesn't exist. that led me down the path of finding out that wasmtime doesn't support WASIX. is there any recommended way of doing IPC with WASI / wasmtime?</p>",
        "id": 485711696,
        "sender_full_name": "mr_rustbot",
        "timestamp": 1733174912
    },
    {
        "content": "<p>wasip2 has support for opening sockets. Wasip1 (which you presumably are using and which wasix extends) also supports sockets, but sockets that are pre-opened by the host. Wasip1 doesn't allow you to open new sockets at runtime. For that you have to use wasip2.</p>",
        "id": 485863536,
        "sender_full_name": "bjorn3",
        "timestamp": 1733235322
    },
    {
        "content": "<p>awesome, thanks!</p>",
        "id": 485866589,
        "sender_full_name": "mr_rustbot",
        "timestamp": 1733236059
    }
]