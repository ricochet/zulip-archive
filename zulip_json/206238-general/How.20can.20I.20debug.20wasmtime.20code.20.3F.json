[
    {
        "content": "<p>I would like to debug when I execute <strong>wasmtime hello.wasm</strong>  . excited to see the modules wasmtime is going through !</p>",
        "id": 189397314,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1582996173
    },
    {
        "content": "<p>If you run wasmtime with <code>-g</code>, it will produce debuginfo for the jitted wasm module, if the wasm module contained debuginfo. If you run wasmtime itself in gdb or lldb, it will find the debuginfo produced by wasmtime and make the wasm module debuggable as if it was a native executable.</p>",
        "id": 189397567,
        "sender_full_name": "bjorn3",
        "timestamp": 1582996663
    },
    {
        "content": "<p>I am getting into <strong>wasmtime </strong> debug mode using gdb.. not able to see where wasmtime is calling the module..</p>\n<p>gdb) n<br>\n34      in src/libstd/rt.rs<br>\n(gdb) n<br>\n40      in src/libstd/rt.rs<br>\n(gdb) n<br>\n41      in src/libstd/rt.rs<br>\n(gdb) n<br>\n44      in src/libstd/rt.rs<br>\n(gdb) n<br>\n48      in src/libstd/rt.rs<br>\n(gdb) n<br>\n[New Thread 0x7ffff6ec4700 (LWP 15929)]<br>\n[New Thread 0x7ffff6cc3700 (LWP 15930)]<br>\n[New Thread 0x7ffff6ac2700 (LWP 15931)]<br>\n[New Thread 0x7ffff68c1700 (LWP 15932)]<br>\n[New Thread 0x7ffff66c0700 (LWP 15933)]<br>\nHello World<br>\n54      in src/libstd/rt.rs<br>\n(gdb)</p>",
        "id": 189400625,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1583001970
    },
    {
        "content": "<p>Unfortunately debugging with gdb doesn't quite work yet. The DWARF debug info format that gdb and lldb both use is quite underspecified, so there are differences in interpretation. Since the content compiled to Wasm is produced by LLVM, it's much easier to make things work in LLVM's debugger, too</p>",
        "id": 189404557,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1583008693
    },
    {
        "content": "<p><code>n(ext)</code> skips over calls instead of stepping into them like <code>step</code>. This means that you skip over everything except for the content of the first function executed in every rust program (in this case wasmtime)</p>",
        "id": 189404580,
        "sender_full_name": "bjorn3",
        "timestamp": 1583008801
    },
    {
        "content": "<p>You may want to set a breakpoint at <code>catch_traps</code> (<code>rbreak catch_traps</code> with gdb or <code>break set -r catch_traps</code> with lldb), as this is pretty much the last wasmtime function called before the jitted wasm code is executed.</p>",
        "id": 189404762,
        "sender_full_name": "bjorn3",
        "timestamp": 1583009053
    },
    {
        "content": "<p>hardtime to make it work again..<br>\nnaveen@naveen-Inspiron-7352:~/rustprojects$ lldb -- wasmtime -g rustwasm.wasm<br>\n(lldb) target create \"wasmtime\"<br>\nerror: '/home/naveen/rustprojects/wasmtime' doesn't contain any 'host' platform architectures: x86_64, i386<br>\n(lldb) file rustwasm.wasm<br>\nerror: '/home/naveen/rustprojects/rustwasm.wasm' doesn't contain any 'host' platform architectures: x86_64, i386<br>\n(lldb)</p>",
        "id": 189416372,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1583031524
    },
    {
        "content": "<p>when debugging in  gdb  for the rustwasm.wasm , it's not catching the breakpoint at \"catch_traps\"</p>",
        "id": 189416392,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1583031569
    },
    {
        "content": "<p>I managed to debug in lldb. but sourcecode is listing in assembly. I wrote a rust program, but lldb shows as assembly..</p>",
        "id": 189422162,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1583044632
    },
    {
        "content": "<p>Did you compile the rust program with debuginfo?</p>",
        "id": 189425213,
        "sender_full_name": "bjorn3",
        "timestamp": 1583051258
    },
    {
        "content": "<p>I built using <strong>cargo build --target=wasm32-wasi</strong></p>",
        "id": 189436595,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1583075778
    },
    {
        "content": "<p>tried this one also :<strong> RUSTFLAGS=-g cargo build --target=wasm32-wasi</strong> . But did not work.. source code is listing as assembly</p>",
        "id": 189436781,
        "sender_full_name": "Naveen Davis Vallooran",
        "timestamp": 1583076131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267879\">@Naveen Davis Vallooran</span>  did you have any luck with debugging? what version of rust you are using?</p>",
        "id": 189696083,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583332366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267879\">@Naveen Davis Vallooran</span> can you trying something like <a href=\"https://gist.github.com/yurydelendik/92e707e4bd1569debac56a9517c6b9b6\" target=\"_blank\" title=\"https://gist.github.com/yurydelendik/92e707e4bd1569debac56a9517c6b9b6\">https://gist.github.com/yurydelendik/92e707e4bd1569debac56a9517c6b9b6</a> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/yurydelendik/92e707e4bd1569debac56a9517c6b9b6\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/yurydelendik/92e707e4bd1569debac56a9517c6b9b6\" target=\"_blank\" title=\"helloworld.rs debugging\">helloworld.rs debugging</a></div><div class=\"message_embed_description\">helloworld.rs debugging. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 189715023,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583343312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> is gdb fine too?</p>",
        "id": 189900454,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583506537
    },
    {
        "content": "<p>I was going to check that in a day or two. Last time I checked, about year or so, it is possible to set breakpoints on specific line</p>",
        "id": 189900602,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583506628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> and the 'Traps' in wasm, should they stop as breakpoints in gdb?</p>",
        "id": 189901331,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583507086
    },
    {
        "content": "<p>\"'Traps' in wasm\" ?</p>",
        "id": 189901413,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583507143
    },
    {
        "content": "<p>/me needs more info about 'Traps'</p>",
        "id": 189901530,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583507222
    },
    {
        "content": "<p>I see that CLIF has a Trap opcode, and it looks like wasmtime uses them for 'stack overflow' traps and some other issues</p>",
        "id": 189901565,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583507261
    },
    {
        "content": "<p>I saw LLDB stopping at signals, yes</p>",
        "id": 189901711,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583507362
    },
    {
        "content": "<p>Ok thanks</p>",
        "id": 189901752,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583507394
    },
    {
        "content": "<p>I need a specific test to see what is going on</p>",
        "id": 189901919,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1583507484
    }
]