[
    {
        "content": "<p>i'm looking at the WIT docs on 'top level <code>use</code>': <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#top-level-use\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#top-level-use</a></p>\n<p>a set of the examples shows a world importing and exporting the same interface:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"p\">:</span><span class=\"nc\">demo</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">1.0.0.</span><span class=\"p\">{</span><span class=\"n\">request</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">handler</span><span class=\"o\">@</span><span class=\"mf\">1.0.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">handler</span><span class=\"o\">@</span><span class=\"mf\">1.0.0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>what does this mean? in my mind, this says that the world uses the interface internally, but also re-exports the _same interface_ to any other worlds that import the world.</p>\n<p>is this right?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#top-level-use\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4942a748abf1ac4a80de6665dc7613dfae94f20e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306464656339333630613931386434326461373365653362393631623462616333373062616562353333363238663563623035303561363936623733633935392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#top-level-use\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 486805661,
        "sender_full_name": "John VanEnk",
        "timestamp": 1733694118
    },
    {
        "content": "<p>Yes, exports the same interface, though it doesn't mean re-exporting the imports; it means components have their own implementations that they export. They can forward calls of their exports to their corresponding imports if they want to be a simple pass-through, but they can also have their own logic.</p>",
        "id": 486819026,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1733705847
    },
    {
        "content": "<p>Components that import and export the same interface like this can be stacked, much like lego bricks, where the top of one brick fits into the bottom of the next.</p>",
        "id": 486819303,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1733706080
    },
    {
        "content": "<p>ah! that's neat. are those things that would then need to be composed by the application? it doesn't seem like you can express that sort of transparent proxy stacking with wit.</p>",
        "id": 487110800,
        "sender_full_name": "John VanEnk",
        "timestamp": 1733782656
    },
    {
        "content": "<p>i'm trying to think of how this would be done, but since, afaik, worlds are the set of all their imports and exports, and worlds including other worlds deduplicate common imports and exports seems to imply to me that a single compiled component can only have one import of the interface and one export of the interface.</p>\n<p>everything else seems like it would have to be stitched together elsewhere?</p>",
        "id": 487111057,
        "sender_full_name": "John VanEnk",
        "timestamp": 1733782738
    },
    {
        "content": "<p>That's right. WIT and worlds are just for describing types of components, and not for doing the actual linking of components. The tool and language for linking is <a href=\"https://github.com/bytecodealliance/wac\">wac</a>, which is related to WIT, but adds features needed for describing linking.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wac\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5021b5ab5a4fb5d0730556153f0e5c4f42b9b3a3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653637363164303266396437623131653865363730353730326163633736303961663962656134323035313435363261646234366139303737376365663538652f62797465636f6465616c6c69616e63652f776163&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wac\" title=\"GitHub - bytecodealliance/wac: WebAssembly Composition (WAC) tooling\">GitHub - bytecodealliance/wac: WebAssembly Composition (WAC) tooling</a></div><div class=\"message_embed_description\">WebAssembly Composition (WAC) tooling. Contribute to bytecodealliance/wac development by creating an account on GitHub.</div></div></div>",
        "id": 487113968,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1733783760
    },
    {
        "content": "<p>okay great! my mental model of how things work remains intact, and you've taught me something new. thank you.</p>",
        "id": 487118860,
        "sender_full_name": "John VanEnk",
        "timestamp": 1733785888
    },
    {
        "content": "<p>Hey John <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  you might also enjoy/benefit from reading the <a href=\"https://component-model.bytecodealliance.org/\">component model book</a> (any contributions/questions/notes on what is unclear would be greatly appreciated!!)</p>",
        "id": 487139594,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1733796258
    }
]