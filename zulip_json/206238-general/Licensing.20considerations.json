[
    {
        "content": "<p>Good day.</p>\n<p>I just discovered your projects yesterday, and got very excited to start working with modern web technologies again, after many years.<br>\nSimilarly, I launched on a quest to understand software licensing models, as I mostly neglected them until now.</p>\n<p>So, I apologize for inevitably looking like a troll; stirring up concerns in the heat of the moment.<br>\nMy intention with this post is to solely exchange ideas that don't seem to be addressed often enough, in my opinion.</p>\n<p>Apache-2.0 is a great license, and was a great pleasure to read and sympathize with, personally.<br>\nIt covers some things that I'm sure most developers care about, which aren't covered, or explicitly stated by the MIT license.</p>\n<p>However, it feels like it still potentially allows coorporations to \"swallow up\" the combined community effort for monetary gains,<br>\nand provides grounds for unethical practises while doing so. This is often addressed by the copyleft GPL license.<br>\nYet the GPL, as a purely viral license, seems to raise a lot of concerns in common Business Models that <br>\nmight be used by small and medium companies, who try to make an honest living through their work.</p>\n<p>But there seems to be a middle-ground, namely the Mozilla Public License (MPL), a file-based copyleft license.</p>\n<p>From what I gathered, using the MPL-2.0 would allow downstream crates to similarly embed wasmtime<br>\nin their applications, choosing their preferred licensing model.<br>\nBut it would additionally require that any changes made directly to files within wasmtime must be made<br>\nopenly available under the MPL-2.0+, which I see as a be a big plus for the user, for two main reasons:</p>\n<ul>\n<li>\n<p>Adoption by big coorporations will more likely enhance the product,<br>\n  by ensuring that modifications can be implemented upstream</p>\n</li>\n<li>\n<p>Changes may be audited to find possibly unethical use within them.<br>\n  Here, things like tracking, spyware or censoring/banning targetted applications come to mind.</p>\n</li>\n</ul>\n<p>I was addressing wasmtime directly here, but I'm sure could be relevant to some underlying projects aswell.</p>\n<p>Changing this throughout the codebase would probably turn out to be a tremendous effort.<br>\nMy question here is: might it just be worth it?</p>",
        "id": 256563828,
        "sender_full_name": "Stefano Russo",
        "timestamp": 1633607387
    },
    {
        "content": "<p>I'm not a lawyer, and this isn't legal advice. My understanding of the MPL-2.0 is that if proprietary extensions are written in separate files, the MPL-2.0 is ok with them being linked in. As such, it wouldn't meaningfully stop anyone from doing anything.</p>",
        "id": 256588492,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1633617571
    },
    {
        "content": "<p>For encouraging people to contribute enhancements back, one observation is that the actual code at any moment in time is just one part of a much bigger picture of what Wasmtime is all about. It's also about ongoing platform evolution, security processes, community relationships, and ecosystem. Maintaining out-of-tree changes as the platform and ecosystem grow has ongoing costs.</p>",
        "id": 256590085,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1633618128
    },
    {
        "content": "<p>Also worth noting is that we don't exist in a vacuum, and others' policies and preferences are sometimes relevant; for example Cranelift is possibly going to be distributed with Rust (as an alternate backend) in some possible future, and for that to happen, MPL is not workable without policy changes, as I understand it. Similarly, Bytecode Alliance has a policy that our code will be APL-2.0: <a href=\"https://bytecodealliance.org/#project-licenses\">https://bytecodealliance.org/#project-licenses</a> . (I learned about all this when I ported some regalloc algorithms from IonMonkey, which is originally MPL; we're working on relicensing so that it can fit in with the rest.) The philosophical merits of one or the other may very well exist and I don't claim to have any informed opinion on that; just noting other constraints that may make the choice for us :-)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.org/#project-licenses\" style=\"background-image: url(https://bytecodealliance.org/images/avatar.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.org/#project-licenses\" title=\"Bytecode Alliance\">Bytecode Alliance</a></div><div class=\"message_embed_description\">Welcome to the Bytecode Alliance</div></div></div>",
        "id": 256613918,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1633626425
    },
    {
        "content": "<p>Thanks for your input!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256588492\">said</a>:</p>\n<blockquote>\n<p>My understanding of the MPL-2.0 is that if proprietary extensions are written in separate files, the MPL-2.0 is ok with them being linked in. As such, it wouldn't meaningfully stop anyone from doing anything.</p>\n</blockquote>\n<p>I still imagine that there would have to be situations, where the restrictions of the MPL could indeed be used to tighten down parts of the program. They could be intricate and apparently small. I'm short of concrete examples, but I shall be on the lookout for them :3</p>\n<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256588492\">said</a>:</p>\n<blockquote>\n<p>It's also about ongoing platform evolution, security processes, community relationships, and ecosystem. Maintaining out-of-tree changes as the platform and ecosystem grow has ongoing costs.</p>\n</blockquote>\n<p>My lack of experience with OSS communities may prevent me from recognize these concrete costs, at least in relation with software licensing.<br>\nApart from someone like me hogging your time right now, because there seem to be a lot of unfamiliarity and unresolved questions in this area :*)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256613918\">said</a>:</p>\n<blockquote>\n<p>for example Cranelift is possibly going to be distributed with Rust (as an alternate backend) in some possible future, and for that to happen, MPL is not workable without policy changes, as I understand it.</p>\n</blockquote>\n<p>I would assume that the MPL is well-suited for this case, as rustlang's team would just need to mention the inclusion of cranelift as a MPL licensed dependency, and refer to the GitHub repository. Thanks to version control, a user could then single out the exact version that was used when building their version of rustc. Referring to this FAQ entry (Q8): <a href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#distribute-my-binaries\">https://www.mozilla.org/en-US/MPL/2.0/FAQ/#distribute-my-binaries</a></p>\n<p>I might however have a wrong impression about what exactly the meaning of \"sublicensing\" is (as mentioned in the MPL-2 under 3.2 b.)<br>\n<a href=\"https://www.mozilla.org/en-US/MPL/2.0/#distribution-of-executable-form\">https://www.mozilla.org/en-US/MPL/2.0/#distribution-of-executable-form</a></p>\n<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256613918\">said</a>:</p>\n<blockquote>\n<p>(I learned about all this when I ported some regalloc algorithms from IonMonkey, which is originally MPL; we're working on relicensing so that it can fit in with the rest.)</p>\n</blockquote>\n<p>I see. What is current plan of action to make this work?<br>\nOff the top-of my head, I can see a few options, that themselves raise concerns.</p>\n<p>1) Build a FFI Rust wrapper around IonMonkey, responsible for exporting the required functions.</p>\n<p>- One might not be allowed to build such a wrapper, since the API definitions themselves are technically <br>\n    licensed under the MPL, and one can't simply e.g. #include \"algorithms.h\" as one would from C, but<br>\n    instead have to copy some of the licensed Work to even embed it.</p>\n<p>- The performance of going through such a wrapper might not match the desired speed that could be <br>\n    achieved through directly embedding the algorithms.</p>\n<p>2) Use a tool like <code>bindgen</code> to generate compatible FFI headers</p>\n<p>- This still feels like a grey area. The MPL-2.0 FAQ has an entry for minified JavaScript (Q16),<br>\n     which states that they are considered an Executable rather than Source Code as defined by the license.<br>\n     But that seems to be mainly because <code>it is not \"the preferred form for modification\"</code>,<br>\n     which it potentially would be when converting a C-Header to Rust.<br>\n<a href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#minified-js\">https://www.mozilla.org/en-US/MPL/2.0/FAQ/#minified-js</a></p>\n<p>- (same performance concerns as above)</p>\n<p>3) Convince the IonMonkey team to relicense the algorithms under a permissive license</p>\n<p>- As the code in question now lies inside of (probably multiple) MPL licensed files, the matter might not simply be that<br>\n     of finding the author of that single algorithm, but to get all contributors of that file to agree.</p>\n<p>(I am not a lawyer; this isn't legal advice.)</p>\n<p>I would appreciate if you have anything to add to this, as I'd like to forward some questions to Mozilla, as to possibly reveal options that make collaboration more enjoyable in the future. Eventually, I'm hoping for a version of MPL that is able to address these kinds of collaboration  issues once and for all.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#distribute-my-binaries\" style=\"background-image: url(https://www.mozilla.org/media/img/mozorg/mozilla-256.4720741d4108.jpg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#distribute-my-binaries\" title=\"MPL 2.0 FAQ\">MPL 2.0 FAQ</a></div><div class=\"message_embed_description\">MPL 2.0 FAQ</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#minified-js\" style=\"background-image: url(https://www.mozilla.org/media/img/mozorg/mozilla-256.4720741d4108.jpg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#minified-js\" title=\"MPL 2.0 FAQ\">MPL 2.0 FAQ</a></div><div class=\"message_embed_description\">MPL 2.0 FAQ</div></div></div>",
        "id": 256719021,
        "sender_full_name": "Stefano Russo",
        "timestamp": 1633689077
    },
    {
        "content": "<p>regalloc-2 is a rust implemenetation of a register allocator. It is sufficiently based on spidermonkey's register allocator that several files of it have to be MPL licensed.</p>",
        "id": 256806190,
        "sender_full_name": "bjorn3",
        "timestamp": 1633727313
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449402\">Stefano Russo</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256719021\">said</a>:</p>\n<blockquote>\n<p>[ ... Cranelift potentially distributed with rust-lang in the future ... ]</p>\n<p>I would assume that the MPL is well-suited for this case, as rustlang's team would just need to mention the inclusion of cranelift as a MPL licensed dependency, and refer to the GitHub repository. Thanks to version control, a user could then single out the exact version that was used when building their version of rustc. Referring to this FAQ entry (Q8): <a href=\"https://www.mozilla.org/en-US/MPL/2.0/FAQ/#distribute-my-binaries\">https://www.mozilla.org/en-US/MPL/2.0/FAQ/#distribute-my-binaries</a></p>\n</blockquote>\n<p>Possibly, I'm not sure; though as a purely pragmatic matter, that's a much bigger lift than \"just relicense the code to fit policy\" (see below for more; that approach is already in motion), and may have other downstream implications we're not aware of.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"449402\">Stefano Russo</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256719021\">said</a>:</p>\n<blockquote>\n<p>[...  regalloc2 ... ]</p>\n<p>I see. What is current plan of action to make this work?</p>\n</blockquote>\n<p>Your option 3 (get a relicensing signoff from Mozilla) is already in-the-works; while I appreciate the thought you put into this comment, I don't think there's any need to get involved -- it should resolve soon!</p>\n<p>(For maximal clarity, as @bjorn3 mentions, the new register allocator is from-scratch code, which is derivative at the algorithmic level; we aren't and aren't planning to actually link to IonMonkey code.)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"449402\">Stefano Russo</span> <a href=\"#narrow/stream/206238-general/topic/Licensing.20considerations/near/256719021\">said</a>:</p>\n<blockquote>\n<p>I would appreciate if you have anything to add to this, as I'd like to forward some questions to Mozilla, as to possibly reveal options that make collaboration more enjoyable in the future. Eventually, I'm hoping for a version of MPL that is able to address these kinds of collaboration  issues once and for all.</p>\n</blockquote>\n<p>I am really only involved from the PoV of an author, and one who built a derivative work, and my interest is mainly just in advancing the software, so I can't claim to have any sort of legal opinion or thoughts in general that should weigh in.</p>\n<p>I would ask that if you're hoping to get involved in this manner, at least if you're going to be arguing from the perspective of anything Bytecode Alliance-related, that you coordinate with <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> first, as he has been the driving force in the above licensing (MPL vs APL-2.0) discussions, BA IP policies, is in active contact with Mozilla, and in general is the right person for this sort of thing. Having a passion for these issues is a great thing but I also want to make sure that we don't complicate matters by trying to pull in too many directions at once :-)</p>",
        "id": 256995832,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1633911065
    },
    {
        "content": "<p>Hi Stefano, and welcome! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> It's great to hear that our projects got you excited! <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span> </p>\n<p>And thank you for looping me in, Chris!</p>\n<p>Stefano, thank you for sharing these thoughtful considerations regarding licenses. The TL;DR of my answer is: we deliberately and carefully chose APL 2.0 + LLVM Exception as the default license for all Bytecode Alliance projects, and don't intend to change it anytime soon. The key reason is that we think it provides the best basis for successful collaboration by providing the combination of solid indemnification (to protect the author) and a a strong patent grant (to protect others from the author), while not introducing constraints on which organizations and projects can make use of the code.</p>\n<p>You're right that the MPL would make it harder to take our code and integrate it into proprietary applications without making positive contributions to the shared code. In practice, however, we've come to the conclusion that trying to use licenses to enforce collaboration isn't really worth it, and focusing on <em>enabling and facilitating</em> collaboration is more fruitful.</p>\n<p>If there were no downsides to it, we'd probably still use a weak copyleft license, and I personally think the MPL 2 is a pretty excellent compromise. However, there are real downsides, which is why we very deliberately chose the license we're using, and don't intend to change it*.</p>\n<p>For various reasons, there are a lot of organizations and projects that have tight constraints on the kinds of licenses they accept for any dependencies. As Chris mentioned, the Rust compiler doesn't accept MPL dependencies. It's possible that that constraint could be lifted (I don't know the reasons, since this was before my own involvement in Rust), but I don't know how likely that'd be. And that's just a single project; there are as I said quite a few of these.</p>\n<p>I could write much more about this, but unfortunately I'm running out of time before a meeting, so I'll end here.</p>\n<p>*: which would in practice be all but impossible, because we don't do copyright assignment, so we'd have to explicitly ask permission to relicense from all contributors. There are successful examples of this, but they're rare.</p>",
        "id": 257072014,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633962526
    },
    {
        "content": "<p>Oh, and as Chris says, the relicensing for ra2 is well underway, based on excellent and enjoyable collaboration between all involved parties! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257072118,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633962588
    }
]