[
    {
        "content": "<p>Consider the following scenario: we have two components, A and B. B relies on A, i.e A is a library. Both A and B wanna subscribe to pollables, A to pollables provided by the host, and B to pollables provided by A. Can they do it without blocking each other?</p>\n<p>My understanding is that subscribing to pollables is a blocking operation. And since both A and B run on the same thread, having them both subscribe to pollables is impossible.</p>\n<p>Am I wrong about this? Is there any way around this problem?<br>\nAlso, will wasip3 solve this somehow?</p>",
        "id": 476569476,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1728787378
    },
    {
        "content": "<p>Correct -- the only way to compose concurrent components in WASIp2 is for them to coordinate by having one call <code>poll</code> with <code>pollable</code>s from both of them (i.e. one would have to pass its <code>pollable</code>s to the other).  This is extremely awkward and not practical in general, which is why WASIp3 will instead use the new <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\">async ABI</a> as the basis for concurrency, making async composition as easy as sync composition.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/dd9bd5d0fab18d13fd7b165d36998051bd8f012a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613539326337343063666139313864653962343565636263623834666434303634356233343964343433373734333734333264363032636661306562386464302f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Async.md\" title=\"component-model/design/mvp/Async.md at main 路 WebAssembly/component-model\">component-model/design/mvp/Async.md at main 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 476570291,
        "sender_full_name": "Joel Dice",
        "timestamp": 1728788306
    },
    {
        "content": "<p>See also Luke Wagner's async presentation videos and <a href=\"https://github.com/dicej/rfcs/blob/component-async/accepted/component-model-async.md#motivation\">https://github.com/dicej/rfcs/blob/component-async/accepted/component-model-async.md#motivation</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/rfcs/blob/component-async/accepted/component-model-async.md#motivation\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6817b36694c3a533904f27189a23fbf6aed6baa0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333530613932313438373634373062326636313933303561343637306533633539643636346165616366336437386464663831653461663763636338333963642f646963656a2f72666373&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/rfcs/blob/component-async/accepted/component-model-async.md#motivation\" title=\"rfcs/accepted/component-model-async.md at component-async 路 dicej/rfcs\">rfcs/accepted/component-model-async.md at component-async 路 dicej/rfcs</a></div><div class=\"message_embed_description\">RFC process for Bytecode Alliance projects. Contribute to dicej/rfcs development by creating an account on GitHub.</div></div></div>",
        "id": 476570426,
        "sender_full_name": "Joel Dice",
        "timestamp": 1728788455
    },
    {
        "content": "<p>Thanks for clarifying this <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>!</p>",
        "id": 476570554,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1728788631
    }
]