[
    {
        "content": "<p>I am trying to implement overflow in risc-v.<br>\nI look at the interpreter.<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/interpreter/src/value.rs#L448\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/interpreter/src/value.rs#L448</a><br>\noverflow should implemented as \"checked_sub\".<br>\nbut in test file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i128</span><span class=\"p\">)</span>:\n  <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x80000000_00000000_00000000_00000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x7FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x7FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x7FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x80000000_00000000_00000000_00000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x80000000_00000000_00000000_00000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x7FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x4FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x30000000_00000000_00000000_00000000</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">icmp_of_i128</span><span class=\"p\">(</span><span class=\"mh\">0x4FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mh\">0x30000000_00000000_00000000_00000001</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n</code></pre></div>\n<p>; run: %icmp_of_i128(1, 0x7FFFFFFF_FFFFFFFF_FFFFFFFF_FFFFFFFF) == true  <br>\nshould not overflow.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/interpreter/src/value.rs#L448\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0bc77ea3d47e5d208892e2d290fcd88518254700\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646138626134623233656564303031623362653031353734363232663436343665363133616337336330623664316332366333303938383062363735323833332f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/interpreter/src/value.rs#L448\" title=\"wasmtime/value.rs at main · bytecodealliance/wasmtime\">wasmtime/value.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 288751310,
        "sender_full_name": "yang yu",
        "timestamp": 1657157544
    },
    {
        "content": "<p>Hey,</p>\n<p>This is interesting... I think it may be a codegen bug in the aarch64 backend and a wrong test suite. I'm going to check this a bit further, but my initial guess would be that the interpreter has the correct implementation.</p>\n<p>It is also weird that this testsuite does not have <code>test interpret</code> when the interpreter has this implemented.</p>\n<p>Thanks for finding this!</p>",
        "id": 288819386,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1657206507
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/cranelift/codegen/src/isa/aarch64/lower.rs#L1292-L1294\">our implementation</a> is very different from what <a href=\"https://godbolt.org/z/hjx334cTf\">LLVM outputs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/cranelift/codegen/src/isa/aarch64/lower.rs#L1292-L1294\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b0ffd2bac3861708bf0c02fda6f111ae60e4e074\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636531316236313632366263376462626463613232346161333364326536613363313739663061656538303138343933656434353363366361313534323033612f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7000b0a4cff1798b8e2fc5316b1be29b9fee2415/cranelift/codegen/src/isa/aarch64/lower.rs#L1292-L1294\" title=\"wasmtime/lower.rs at 7000b0a4cff1798b8e2fc5316b1be29b9fee2415 · bytecodealliance/wasmtime\">wasmtime/lower.rs at 7000b0a4cff1798b8e2fc5316b1be29b9fee2415 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/hjx334cTf\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bf336f7597f851df0732b12f8d4b7b383508ec8\\/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/hjx334cTf\" title=\"Compiler Explorer - Rust (rustc 1.58.0)\">Compiler Explorer - Rust (rustc 1.58.0)</a></div><div class=\"message_embed_description\">pub fn of_check(a: i128, b: i128) -&gt; bool {\n    a.checked_sub(b).is_none()\n}\n</div></div></div>",
        "id": 288820502,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1657206955
    },
    {
        "content": "<p>Just to let you know, I've added a PR to fix this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4403\">https://github.com/bytecodealliance/wasmtime/pull/4403</a></p>\n<p>Thanks for the report!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/4403\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2ce5a6c395f45a87481bcbe726789c1577b9bfe0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363230346135646335383964656133633763643436366439333264653362333038353963656464386431653336653261663636613433356630303034373261622f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f34343033)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4403\" title=\"aarch64: Fix i128 icmp `of`/`nof` implementations by afonso360 · Pull Request #4403 · bytecodealliance/wasmtime\">aarch64: Fix i128 icmp `of`/`nof` implementations by afonso360 · Pull Request #4403 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">@yuyang-ok reported via zulip that i128 overflow tests were wrong.\nIt turns out that both the tests and the aarch64 codegen are wrong.\nI've altered the implementation to match what LLVM produces, a...</div></div></div>",
        "id": 288830089,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1657211058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span>  ok, thanks.</p>",
        "id": 288899320,
        "sender_full_name": "yang yu",
        "timestamp": 1657257582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466261\">yang yu</span> has marked this topic as resolved.</p>",
        "id": 292679892,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660092280
    }
]