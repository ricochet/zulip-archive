[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">sample_fn</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">sum</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>then I'm calling with:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">cffi</span> <span class=\"kn\">import</span> <span class=\"n\">FFI</span>\n<span class=\"n\">ffi</span> <span class=\"o\">=</span> <span class=\"n\">FFI</span><span class=\"p\">()</span>\n\n<span class=\"n\">elems</span> <span class=\"o\">=</span> <span class=\"n\">ffi</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s2\">\"float [3]\"</span><span class=\"p\">)</span>\n<span class=\"n\">elems</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">elems</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>\n<span class=\"n\">elems</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">22.0</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">wasm_mod</span><span class=\"o\">.</span><span class=\"n\">sample_fn</span><span class=\"p\">(</span>\n    <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">ffi</span><span class=\"o\">.</span><span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"s1\">'int32_t'</span><span class=\"p\">,</span> <span class=\"n\">elems</span><span class=\"p\">))</span>\n<span class=\"p\">))</span>\n</code></pre></div>\n<p>the fn signature requires an i32 to be passed which I suppose is the array pointer. when I pass <code>int32_t</code> I get memory fault, and I can't cast it to type <code>float *</code> as python won't accept it.</p>",
        "id": 483890275,
        "sender_full_name": "Moore",
        "timestamp": 1732274882
    },
    {
        "content": "<p>Does your actual code have the <code>#[no_mangle]</code> attribute on the rust function?</p>",
        "id": 483924528,
        "sender_full_name": "Lann Martin",
        "timestamp": 1732286240
    },
    {
        "content": "<p>Yes. It works fine when I use two floats. It's only the float arrays which I can't pass.</p>",
        "id": 483926982,
        "sender_full_name": "Moore",
        "timestamp": 1732287076
    },
    {
        "content": "<p>A Wasm guest can't access host memory, so passing a host pointer to the guest won't work.  You'll need some way to allocate guest memory from the host (e.g. another, malloc-style function export), which the host can use to allocate space for a copy of the array, then copy the content from the host array to the guest array (being careful to convert the guest pointer to a host pointer by adding the linear memory base pointer to it), then pass the guest pointer to <code>sample_fn</code>.</p>",
        "id": 483928550,
        "sender_full_name": "Joel Dice",
        "timestamp": 1732287535
    }
]