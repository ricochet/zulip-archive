[
    {
        "content": "<p>Does wasmtime plan to support nested calls and concurrent calls to multiple instance?</p>\n<ul>\n<li>Nested calls: The host (runtime) can call a client (WASM) function and the client can call a host function. But then, because <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Func.html#method.call\"><code>Func::Call</code></a> takes <code>&amp;mut Store</code>, the host can't call the client back again.</li>\n</ul>\n<p>Some use case: Client pass callback functions to host function that will be invoked immediately. Like:<br>\nClient:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"n\">host_sort_fn</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callback_to_id</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Host:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">host_sort_fn</span><span class=\"p\">(</span><span class=\"n\">list</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callback_id</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"invoke_callback\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">sort_by</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">callback_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)));</span>\n<span class=\"w\">  </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ul>\n<li>Concurrent Call: So host provided functions can call another instance or switch between instances, etc.</li>\n</ul>",
        "id": 379020335,
        "sender_full_name": "James",
        "timestamp": 1690439170
    },
    {
        "content": "<blockquote>\n<p>Concurrent Call</p>\n</blockquote>\n<p>If two instances can interact with each other, then they can't safely be called concurrently (in general). If the instances cannot interact then they probably don't need to use the same <code>Store</code></p>",
        "id": 379161131,
        "sender_full_name": "Lann Martin",
        "timestamp": 1690464823
    },
    {
        "content": "<p>Nested calls are supported though because host functions get access to a Caller which can be used as the store argument</p>",
        "id": 379241374,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1690477703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/Supporting.20nested.20.2F.20concurrent.20client.20calls/near/379241374\">said</a>:</p>\n<blockquote>\n<p>Nested calls are supported though because host functions get access to a Caller which can be used as the store argument</p>\n</blockquote>\n<p>You're right. But if I'm not wrong we can't do that with component model now. At least the trait generated by the bindgen only give access to the store data.</p>",
        "id": 379375255,
        "sender_full_name": "James",
        "timestamp": 1690526755
    }
]