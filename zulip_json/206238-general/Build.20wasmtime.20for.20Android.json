[
    {
        "content": "<p>Hi all, is there an instruction for building wasmtime for Android and iOS ?</p>",
        "id": 198090789,
        "sender_full_name": "Denis",
        "timestamp": 1589905317
    },
    {
        "content": "<p>Wasmtime hasn't been tested on these platforms and likely won't compile there today. The porting work necessary to get this working, though, is likely pretty small!</p>",
        "id": 198091544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589905679
    },
    {
        "content": "<p>Thanks !! In free time I will try to port it ...</p>",
        "id": 198092832,
        "sender_full_name": "Denis",
        "timestamp": 1589906185
    },
    {
        "content": "<p>Seems like there are only some modules not compiled:<br>\nerror: failed to run custom build command for <code>backtrace-sys v0.1.36</code></p>\n<p>Caused by:<br>\n  process didn't exit successfully: <code>G:\\Projects\\Programing\\wasmtime\\target\\release\\build\\backtrace-sys-f5d9903e1591a6a7\\build-script-build</code> (exit code: 1)<br>\n--- stdout<br>\nOPT_LEVEL = Some(\"3\")<br>\nTARGET = Some(\"i686-linux-android\")<br>\nHOST = Some(\"x86_64-pc-windows-msvc\")<br>\nCC_i686-linux-android = None<br>\nCC_i686_linux_android = None<br>\nTARGET_CC = None<br>\nCC = None<br>\nCFLAGS_i686-linux-android = None<br>\nCFLAGS_i686_linux_android = None<br>\nTARGET_CFLAGS = None<br>\nCFLAGS = None<br>\nCRATE_CC_NO_DEFAULTS = None<br>\nDEBUG = Some(\"false\")<br>\nrunning: \"i686-linux-android-clang\" \"-O3\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"--target=i686-linux-android\" \"-Wall\" \"-Wextra\" \"-E\" \"src/android-api.c\"</p>\n<p>--- stderr</p>\n<p>error occurred: Failed to find tool. Is <code>i686-linux-android-clang</code> installed? (see <a href=\"https://github.com/alexcrichton/cc-rs#compile-time-requirements\">https://github.com/alexcrichton/cc-rs#compile-time-requirements</a> for help)</p>\n<p>warning: build failed, waiting for other jobs to finish...<br>\nerror: failed to run custom build command for <code>wasmtime-runtime v0.16.0 (G:\\Projects\\Programing\\wasmtime\\crates\\runtime)</code></p>\n<p>Caused by:<br>\n  process didn't exit successfully: <code>G:\\Projects\\Programing\\wasmtime\\target\\release\\build\\wasmtime-runtime-9ffa91a42426fedc\\build-script-build</code> (exit code: 1)<br>\n--- stdout<br>\ncargo:rerun-if-changed=src/helpers.c<br>\nTARGET = Some(\"i686-linux-android\")<br>\nOPT_LEVEL = Some(\"3\")<br>\nHOST = Some(\"x86_64-pc-windows-msvc\")<br>\nCC_i686-linux-android = None<br>\nCC_i686_linux_android = None<br>\nTARGET_CC = None<br>\nCC = None<br>\nCFLAGS_i686-linux-android = None<br>\nCFLAGS_i686_linux_android = None<br>\nTARGET_CFLAGS = None<br>\nCFLAGS = None<br>\nCRATE_CC_NO_DEFAULTS = None<br>\nDEBUG = Some(\"false\")<br>\nrunning: \"i686-linux-android-clang\" \"-O3\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"--target=i686-linux-android\" \"-Wall\" \"-Wextra\" \"-o\" \"G:\\\\Projects\\\\Programing\\\\wasmtime\\\\target\\\\i686-linux-android\\\\release\\\\build\\\\wasmtime-runtime-5cf986442753146a\\\\out\\\\src/helpers.o\" \"-c\" \"src/helpers.c\"</p>\n<p>--- stderr</p>\n<p>error occurred: Failed to find tool. Is <code>i686-linux-android-clang</code> installed? (see <a href=\"https://github.com/alexcrichton/cc-rs#compile-time-requirements\">https://github.com/alexcrichton/cc-rs#compile-time-requirements</a> for help)</p>\n<p>warning: build failed, waiting for other jobs to finish...<br>\nerror: failed to run custom build command for <code>zstd-sys v1.4.15+zstd.1.4.4</code></p>\n<p>Caused by:<br>\n  process didn't exit successfully: <code>G:\\Projects\\Programing\\wasmtime\\target\\release\\build\\zstd-sys-1eeff73c0cda7a4c\\build-script-build</code> (exit code: 1)<br>\n--- stdout<br>\nTARGET = Some(\"i686-linux-android\")<br>\nHOST = Some(\"x86_64-pc-windows-msvc\")<br>\nCC_i686-linux-android = None<br>\nCC_i686_linux_android = None<br>\nTARGET_CC = None<br>\nCC = None<br>\nCFLAGS_i686-linux-android = None<br>\nCFLAGS_i686_linux_android = None<br>\nTARGET_CFLAGS = None<br>\nCFLAGS = None<br>\nCRATE_CC_NO_DEFAULTS = None<br>\nDEBUG = Some(\"false\")<br>\nrunning: \"i686-linux-android-clang\" \"-O3\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"--target=i686-linux-android\" \"-I\" \"zstd/lib/\" \"-I\" \"zstd/lib/common\" \"-I\" \"zstd/lib/legacy\" \"-fvisibility=hidden\" \"-DZSTD_LIB_DEPRECATED=0\" \"-DZSTDLIB_VISIBILITY=\" \"-DZDICTLIB_VISIBILITY=\" \"-DZSTDERRORLIB_VISIBILITY=\" \"-DZSTD_LEGACY_SUPPORT=1\" \"-o\" \"G:\\\\Projects\\\\Programing\\\\wasmtime\\\\target\\\\i686-linux-android\\\\release\\\\build\\\\zstd-sys-f793a83e8009b4cf\\\\out\\\\zstd\\\\lib\\\\common\\\\debug.o\" \"-c\" \"zstd\\\\lib\\\\common\\\\debug.c\"<br>\nrunning: \"i686-linux-android-clang\" \"-O3\" \"-ffunction-sections\" \"-fdata-sections\" \"-fPIC\" \"--target=i686-linux-android\" \"-I\" \"zstd/lib/\" \"-I\" \"zstd/lib/common\" \"-I\" \"zstd/lib/legacy\" \"-fvisibility=hidden\" \"-DZSTD_LIB_DEPRECATED=0\" \"-DZSTDLIB_VISIBILITY=\" \"-DZDICTLIB_VISIBILITY=\" \"-DZSTDERRORLIB_VISIBILITY=\" \"-DZSTD_LEGACY_SUPPORT=1\" \"-o\" \"G:\\\\Projects\\\\Programing\\\\wasmtime\\\\target\\\\i686-linux-android\\\\release\\\\build\\\\zstd-sys-f793a83e8009b4cf\\\\out\\\\zstd\\\\lib\\\\common\\\\entropy_common.o\" \"-c\" \"zstd\\\\lib\\\\common\\\\entropy_common.c\"</p>\n<p>--- stderr</p>\n<p>error occurred: Failed to find tool. Is <code>i686-linux-android-clang</code> installed? (see <a href=\"https://github.com/alexcrichton/cc-rs#compile-time-requirements\">https://github.com/alexcrichton/cc-rs#compile-time-requirements</a> for help)</p>\n<p>warning: build failed, waiting for other jobs to finish...<br>\nerror: build failed</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/cc-rs#compile-time-requirements\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/cc-rs#compile-time-requirements\" title=\"alexcrichton/cc-rs\">alexcrichton/cc-rs</a></div><div class=\"message_embed_description\">Rust library for build scripts to compile C/C++ code into a Rust library - alexcrichton/cc-rs</div></div></div>",
        "id": 198093513,
        "sender_full_name": "Denis",
        "timestamp": 1589906506
    },
    {
        "content": "<p>For a project that I'm working on, we are considering switching to wasmtime for our WebAssembly runtime. If I understand correctly, wasmtime currently only supports the x86_64 architecture. For the project that I'm working on, we would love to see support for Android and AArch64 in general. The wasmtime guide, section \"Platform Support - JIT compiler support\", states \"Support for ARM, AArch64, and x86 is planned at this time\".  I've done some research myself but couldn't find any more info regarding those architectures. Could I have an update on the jit compiler progress for those architectures, if any.</p>",
        "id": 202698434,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1593701299
    },
    {
        "content": "<p>Aarch64 support works pretty well now</p>",
        "id": 202698679,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1593701412
    },
    {
        "content": "<p>(I don't know about support on Android though)</p>",
        "id": 202698870,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1593701509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315493\">@Max de Danschutter</span> as Joey says, aarch64 is coming along nicely, and our plan (\"we\" being the SpiderMonkey/Wasm team at Mozilla) is to use this as our optimizing backend for Wasm in Firefox/aarch64 -- so we're aiming for production quality</p>",
        "id": 202699054,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1593701582
    },
    {
        "content": "<p>That's great to hear, especially the production quality! Could I also ask what WebAssembly features aarch64 support currently and what is still missing in general?  This would greatly help us out making the decision of moving to wasmtime!</p>",
        "id": 202705645,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1593704468
    },
    {
        "content": "<p>We currently have support for everything in the wasm MVP + some lightweight shipped features (bulk memory ops, etc.), and multi-value. Ongoing work is happening for reference types, SIMD and atomics. Ref types are pretty much done, they require more thorough testing + reviews, etc. SIMD and atomics have started relatively recently, in comparison.</p>",
        "id": 202705996,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1593704636
    },
    {
        "content": "<p>That is quite a lot already. It is indeed coming along nicely. Thanks for the help everyone this should be enough information!</p>",
        "id": 202706594,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1593704907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315493\">@Max de Danschutter</span> the plan is to get to feature parity for Aarch64 quickly, and then keep it that way. We'll eventually expand that, but for now it'd be safe to view x86_64 and Aarch64 as the two platforms with the highest level of support.</p>\n<p>A note on Android: we don't currently run CI tests on Android, or produce builds, but we know anecdotally that Wasmtime works on Android. We'd love to hear about issues and work together on fixing them if you run into any, though!</p>",
        "id": 202706616,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1593704923
    },
    {
        "content": "<p>When we switch to wasmtime there will be issues reported for sure as we intend to run it on as many platforms as possible. However, we will gladly help out as well!</p>",
        "id": 202706986,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1593705069
    },
    {
        "content": "<p>Sounds great — don't hesitate to reach out!</p>",
        "id": 202707059,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1593705116
    },
    {
        "content": "<p>Might be a bit off-topic but I've started my work on converting Wasmer to Wasmtime. <a href=\"https://docs.rs/wasmer-runtime/0.17.1/wasmer_runtime/struct.Ctx.html#structfield.data\">In Wasmer,</a> the context of the currently running WebAssemly instance, which is implicitly passed to every WebAssembly function, can have user-supplied contextual data. This is a feature we use quite a lot and I couldn't find a good alternative in Wasmtime. Since I'm no expert at Wasmtime 'yet' could someone tell me what a good alternative is in Wasmtime.</p>",
        "id": 203924020,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1594798382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> can you weigh in on how best to do this? ^</p>",
        "id": 203938964,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594809860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315493\">@Max de Danschutter</span> could you describe a bit how it's used for you? Is this something like data associated with callbacks?</p>",
        "id": 203957119,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594820876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> We have a ModuleContext struct, which is the host state associated with a particular module instance. We use this to map calls from modules into appropriate host side calls and to interact with memory exposed by the instance. If a more detailed explanation is needed let me know!</p>",
        "id": 203958684,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1594821628
    },
    {
        "content": "<p>ah ok, so you're mainly implementing host functions that interpret arguments as pointers into wasm memory?</p>",
        "id": 203958961,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594821747
    },
    {
        "content": "<p>maybe it is something like <code>wasm_func_new_with_env</code>/<code>wasm_func_callback_with_env_t</code> ?</p>",
        "id": 203959384,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1594821950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315493\">@Max de Danschutter</span> if you mainly want to get the memory, there's direct support for that, too. See the third example here: <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html#examples-1\">https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Func.html#examples-1</a></p>",
        "id": 203959445,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594821962
    },
    {
        "content": "<p>err, the fourth example</p>",
        "id": 203959479,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594821980
    },
    {
        "content": "<p>Besides accessing wasm memory in host functions we also update our host state that is associated with that particular module instance.</p>",
        "id": 203959718,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1594822113
    },
    {
        "content": "<p>Ah ok, so accessing memory is easily done through <code>Caller</code> which can access the memory of the caller so long as it's exported. Otherwise there's no native equivalent to this in Wasmtime, but you can create a <code>Func</code>-per-instance (it should be very cheap with <code>Func::wrap</code>)</p>",
        "id": 203959812,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594822180
    },
    {
        "content": "<p>with a <code>Func</code>-per-instance you can then close over instance-specific state to update it, would that work for your use case?</p>",
        "id": 203959832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594822195
    },
    {
        "content": "<p>I could easily see quite a few use cases needing to associate data with an instance, so I wonder if we should add support for that? Instances are heavy enough that adding an additional pointer-sized members should not matter at all, I'd hope</p>",
        "id": 203961706,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594823010
    },
    {
        "content": "<p>Oh for sure yeah, but callbacks, for example, don't have access to their <code>Instance</code></p>",
        "id": 203961810,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594823048
    },
    {
        "content": "<p>we can certainly add the APIs but I'm not sure if it'd solve the use case here</p>",
        "id": 203961829,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594823056
    },
    {
        "content": "<p>yes, that's what <code>wasm_func_new_with_env</code> for, and Rust API can do it via closure</p>",
        "id": 203961858,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1594823077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/Build.20wasmtime.20for.20Android/near/203961810\">said</a>:</p>\n<blockquote>\n<p>Oh for sure yeah, but callbacks, for example, don't have access to their <code>Instance</code></p>\n</blockquote>\n<p>Ah, I see—good point! In that case closures are probably needed, yes. And certainly better than adding overhead to all callbacks</p>",
        "id": 203962057,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594823180
    },
    {
        "content": "<p>Ah, capturing my <code>ModuleContext</code>could work but then how should I access that within an import?</p>",
        "id": 203968129,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1594825993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315493\">@Max de Danschutter</span> the thinking is that you'd make a <code>Func</code>-per-import, and each <code>Func</code> is a Rust closure which can close over outer state</p>",
        "id": 203968496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594826146
    },
    {
        "content": "<p>Ah, of course, now I see. Quite new to Rust so closures sometimes confuse me a bit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\nThat looks like the most straight forward way to do it in wasmtime so I'll try that out!</p>",
        "id": 203968783,
        "sender_full_name": "Max de Danschutter",
        "timestamp": 1594826276
    }
]