[
    {
        "content": "<p>Just to ask a question about what should be done for wasm configuration: My use case is that I have a wasm module that I load with wasmtime, and then call various functions of it as hooks. IIUC, it means that my module is semantically a \"reactor\".</p>\n<p>I'm compiling this module from Rust code. So I came upon <a href=\"https://github.com/rust-lang/rust/pull/79997\">https://github.com/rust-lang/rust/pull/79997</a> .<br>\nHowever, I couldn't make it work in practice, be it from my program or using wasmtime --invoke. It looks to me, like rustc doesn't actually create the _initialize function. (I posted more details on the PR thread itself)</p>\n<p>Is what I'm looking for actually wasm reactors? And if yes, am I doing something wrong there, or is it just that rustc is currently unable to compile a WASI-able reactor? (The only idea for a workaround I'd have would be to make my thing not a reactor but a command, and have it just call a \"dothething\" function in the host that'd then do all the callbacks, thus ensuring that datastructures are initialized by virtue of being in the wasm's main scope... But that sounds awful)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/pull/79997\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/pull/79997\" title=\"Add a -Zwasi-exec-model codegen option for emitting WASI reactors by coolreader18 · Pull Request #79997 · rust-lang/rust\">Add a -Zwasi-exec-model codegen option for emitting WASI reactors by coolreader18 · Pull Request #79997 · rust-lang/rust</a></div><div class=\"message_embed_description\">Fixes #79199, and relevant to #73432\nImplements wasi reactors, as described in WebAssembly/WASI#13 and design/application-abi.md\nEmpty lib.rs, lib.crate-type = [&quot;cdylib&quot;]:\n$ cargo +reacto...</div></div></div>",
        "id": 222667392,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610584461
    },
    {
        "content": "<p>At first glance, it does sound like what you're doing is a reactor. I think the problem is that Rust needs to switch to crt1-reactor.o (instead of crt1.o), but I haven't dug into it yet.</p>",
        "id": 222668269,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610585129
    },
    {
        "content": "<p>Doing so may also require an update to a newer WASI libc</p>",
        "id": 222668300,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610585152
    },
    {
        "content": "<p>Thank you for your feedback! According to a recent message on the PR, it looks like I did something wrong in the compilation process — I've documented the procedure I took to make things work on there :)</p>",
        "id": 222670082,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610586612
    },
    {
        "content": "<p>Ah, yes, using --entry _initialize means some things may work without crt1-initialize.o</p>",
        "id": 222670353,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610586939
    },
    {
        "content": "<p>er, crt1-reactor.o</p>",
        "id": 222670368,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610586951
    },
    {
        "content": "<p>Thanks for helping test this and figure out something that works! Hopefully in the future we'll fix the <code>pub fn main</code> requirement and generally smooth out the process <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222670569,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587145
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 222670583,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587171
    },
    {
        "content": "<p>Ah, also while I have this topic paged in here, <code>_initialize</code> is called automatically if you use wasmtime's <code>Linker::module</code> function</p>",
        "id": 222670677,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587265
    },
    {
        "content": "<p>And not otherwise. When we added support for that, there were differing opinions about whether we should <em>always</em> run _initialize on any <code>instantiate</code> call, and we ended up deciding not to. But this may evolve as our understanding of what a reactor is evolves.</p>",
        "id": 222670806,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587428
    },
    {
        "content": "<p>Ooh right I missed it. That said there's something I don't get about Linker::module: usually the Command/Reactor would be the last thing one would want to add to a linker... yet it looks to me like after Linker::module one has to run Linker::instantiate again with... another module?</p>",
        "id": 222670955,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587585
    },
    {
        "content": "<p>After <code>Linker::module</code>, the reactor should be instantiated and its exports available for <code>get</code> etc.</p>",
        "id": 222671002,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587670
    },
    {
        "content": "<p>IOW, it would sound more logical to me if Linker::module did not do reactor initialization, but Linker::instantiate did (or allowed to do)... but I may be missing something?</p>",
        "id": 222671007,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587676
    },
    {
        "content": "<p>Oooh you're running .get() directly on the Linker, and not on an Instance?</p>",
        "id": 222671063,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587713
    },
    {
        "content": "<p>Hmm I guess no it doesn't have the necessary things for that</p>",
        "id": 222671079,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587748
    },
    {
        "content": "<p>when you're using a <code>Linker</code>, it generally owns the instances, and you can do <code>get</code> to get their exports</p>",
        "id": 222671089,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587770
    },
    {
        "content": "<p>Hmm the thing I'm wondering about is, to get an Instance from a Linker, I see only Linker::instantiate; which requires giving another Module?</p>",
        "id": 222671152,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587811
    },
    {
        "content": "<p>or, actually, that's not quite right. It doesn't own the instances. But it does collect all the exports and makes them available</p>",
        "id": 222671160,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587844
    },
    {
        "content": "<p>the linker doesn't generally hand out instances; it hands out exports.</p>",
        "id": 222671175,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610587870
    },
    {
        "content": "<p>Oooh I misread the signature of Linker::get ._.</p>",
        "id": 222671193,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587919
    },
    {
        "content": "<p>Ok so if I understand correctly, Linker::instantiate should very rarely be used?</p>",
        "id": 222671262,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610587995
    },
    {
        "content": "<p>I think it comes down to whether you want a lower-level interface where you have more control, or a higher-level interface that does more things for you</p>",
        "id": 222671363,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610588111
    },
    {
        "content": "<p><code>instantiate</code> directly corresponds to an operation in the wasm spec, so if you know that that's exactly what you want, it's there</p>",
        "id": 222671388,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1610588162
    },
    {
        "content": "<p>Hmm ok thank you! I've just checked and was indeed able to get things working this way :) So I've repurposed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2580\">https://github.com/bytecodealliance/wasmtime/issues/2580</a> for the documentation issue. Thank you! :D</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2580\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2580\" title=\"Wasmtime: Clarify the relationship between Linker and Instance · Issue #2580 · bytecodealliance/wasmtime\">Wasmtime: Clarify the relationship between Linker and Instance · Issue #2580 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Automatically call _initialize for reactors, maybe using a special function to create a reactor Module? Benefit Knowing one has to call _initialize is something that is not very documented ...</div></div></div>",
        "id": 222672107,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610589063
    }
]