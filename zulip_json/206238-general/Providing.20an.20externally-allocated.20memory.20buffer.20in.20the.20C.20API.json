[
    {
        "content": "<p>The C API for providing a memory import utilises the wasm engine's own internal memory construction:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm_memory_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">wasm_memory_new</span><span class=\"p\">(</span><span class=\"n\">wasm_store_t</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">wasm_memorytype_t</span><span class=\"o\">*</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>wasm_memory_t</code> is an anonymous struct, and while <code>wasm_memory_data()</code> can retrieve the raw pointer for the underlying buffer, there doesn't appear to be any way to provide this buffer directly.</p>\n<p>Specifically, I want something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm_memory_t</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">wasm_memory_new_with_buffer</span><span class=\"p\">(</span><span class=\"n\">wasm_store_t</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uint32_t</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">free_fn</span><span class=\"p\">)(</span><span class=\"n\">uint32_t</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>\n<p>My use case is to provide a virtual-mem-mapped buffer that allows transparent memory sharing between module instances. I have a working proof of concept already but needed to hack the wamr implementation to get at the linear memory allocation. (Note that wamr does provide some custom allocator functionality, but there's no facility for detecting which of the allocations is specifically for the module's linear memory buffer.)</p>\n<p>Is there any possibility of adding something like this to the C API?</p>",
        "id": 256169862,
        "sender_full_name": "Michael Martin",
        "timestamp": 1633403504
    },
    {
        "content": "<p>You also need a grow function as argument.</p>",
        "id": 256205233,
        "sender_full_name": "bjorn3",
        "timestamp": 1633427052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"427188\">@Michael Martin</span> this isn't supported in the C API right now but it should be supported in the Rust bindings through the <code>LinearMemory</code> trait and friends, if you're interested though I think it'd be pretty reasonable to expose the functionality through the C API</p>",
        "id": 256252743,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1633443318
    },
    {
        "content": "<p>Thanks Alex. Do you know what the process for requesting changes to the C API is?</p>",
        "id": 256663091,
        "sender_full_name": "Michael Martin",
        "timestamp": 1633647642
    },
    {
        "content": "<p>Currently we don't have a formal process, but it's typically fine to do in a PR for an extension like this, review will help take care of the fiddly bits with the API and such</p>",
        "id": 256664979,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1633648763
    },
    {
        "content": "<p>Thanks again Alex. I'll put a PR together and send it out soon. <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> noted - I'll include a grow arg in the PR.</p>",
        "id": 257128730,
        "sender_full_name": "Michael Martin",
        "timestamp": 1633995119
    },
    {
        "content": "<p>I have a work-in-progress <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/compare/main...mykmartin:linear-buffer-alloc\">implementation</a> for this but I'm not sure how best to update the API itself. In the implementation I've just added <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/compare/main...mykmartin:linear-buffer-alloc#diff-088a8428148fb3aaf8108d5fcbc584c1f428cd7ed3e5484d9a9cbe4febb5e14a\">another function</a> for creating instances:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm_module_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_module_new</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n<span class=\"n\">wasm_linear_buffer_alloc_t</span><span class=\"w\"> </span><span class=\"n\">lba</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\">   </span><span class=\"c1\">// pointers to malloc, realloc and free functions</span>\n<span class=\"n\">wasm_instance_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_instance_new_with_lb_alloc</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">lba</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, this doesn't seem to fit with the general philosophy of the API - I don't imagine we'd want new creation functions for every new feature added. Another option could be to set the allocator functions on the <code>wasm_module_t</code> object:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm_module_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_module_new</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n<span class=\"n\">wasm_linear_buffer_alloc_t</span><span class=\"w\"> </span><span class=\"n\">lba</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">wasm_module_set_linear_buffer_alloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">lba</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">wasm_instance_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_instance_new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I don't think this is a good approach either. The module object is an otherwise constant runtime representation of the wasm binary, whereas the new allocator functions should be instance-specific.</p>\n<p>I also can't have a function for updating the instance object (e.g. <code>wasm_instance_set_linear_buffer_alloc(&amp;instance, &amp;lba)</code>) since the buffer allocation happens during the call to <code>wasm_instance_new</code>. Thoughts?</p>\n<p>(I haven't made this change in the wasm-c-api repo yet because that uses V8 for building the examples and I don't want to go to the trouble of implementing the proposal in V8 until it has some traction.)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/compare/main...mykmartin:linear-buffer-alloc\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/104659809e5dfd549c06b7def37d3b5e2c6d86f7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613233653938623736623762383932663861366633323034306561666434376566633361666633393361316562373264653231306563663234653231383765392f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/compare/main...mykmartin:linear-buffer-alloc\" title=\"Comparing bytecodealliance:main...mykmartin:linear-buffer-alloc · bytecodealliance/wasm-micro-runtime\">Comparing bytecodealliance:main...mykmartin:linear-buffer-alloc · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/compare/main...mykmartin:linear-buffer-alloc#diff-088a8428148fb3aaf8108d5fcbc584c1f428cd7ed3e5484d9a9cbe4febb5e14a\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/104659809e5dfd549c06b7def37d3b5e2c6d86f7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613233653938623736623762383932663861366633323034306561666434376566633361666633393361316562373264653231306563663234653231383765392f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/compare/main...mykmartin:linear-buffer-alloc#diff-088a8428148fb3aaf8108d5fcbc584c1f428cd7ed3e5484d9a9cbe4febb5e14a\" title=\"Comparing bytecodealliance:main...mykmartin:linear-buffer-alloc · bytecodealliance/wasm-micro-runtime\">Comparing bytecodealliance:main...mykmartin:linear-buffer-alloc · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 259951563,
        "sender_full_name": "Michael Martin",
        "timestamp": 1635826237
    }
]