[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> in wasmtime 0.9 it was possible to crate a WASI-like module through InstanceHandle and then Instance::from_handle (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/v0.9.0/crates/wasi/src/instantiate.rs#L85\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/v0.9.0/crates/wasi/src/instantiate.rs#L85\">https://github.com/bytecodealliance/wasmtime/blob/v0.9.0/crates/wasi/src/instantiate.rs#L85</a>).</p>\n<p><span class=\"user-mention\" data-user-id=\"266298\">@Krzysztof Woś</span> <span class=\"user-mention\" data-user-id=\"266161\">@Maciej Kot</span> and I are working on a project that relies on this to instantiate our own API module with access to instances memory.</p>\n<p>However, your recent changes (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/3dd5a3cb3f0943bfa2c448f5029e975d343e9a2b\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/commit/3dd5a3cb3f0943bfa2c448f5029e975d343e9a2b\">https://github.com/bytecodealliance/wasmtime/commit/3dd5a3cb3f0943bfa2c448f5029e975d343e9a2b</a>) close that route. And I don't see any alternatives. Even the comment in latest version of wasi crate states \"crates in general should not be doing that\" when talking about accessing Instance's memory. Hence, we can't migrate from 0.9 to latest and it looks like we're stuck.</p>\n<p>How can we construct a module with our own hostcalls with access to memory? Can you point us at an example?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/v0.9.0/crates/wasi/src/instantiate.rs#L85\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/v0.9.0/crates/wasi/src/instantiate.rs#L85\" target=\"_blank\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/3dd5a3cb3f0943bfa2c448f5029e975d343e9a2b\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/64996?s=200&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/3dd5a3cb3f0943bfa2c448f5029e975d343e9a2b\" target=\"_blank\" title=\"Reimplement `wasmtime-wasi` on top of `wasmtime`  (#899) · bytecodealliance/wasmtime@3dd5a3c\">Reimplement `wasmtime-wasi` on top of `wasmtime`  (#899) · bytecodealliance/wasmtime@3dd5a3c</a></div><div class=\"message_embed_description\">* Reimplement `wasmtime-wasi` on top of `wasmtime`\r\n\r\nThis commit reimplements the `wasmtime-wasi` crate on top of the\r\n`wasmtime` API crate, instead of being placed on top of the `wasmtime-*`\r\nfam...</div></div></div>",
        "id": 188996988,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1582615595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266363\">@Maciej Woś</span> the theory is that this is \"solved\" with interface types at some point, where that automatically generates adapters to transfer data between memories</p>",
        "id": 189030339,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582645190
    },
    {
        "content": "<p>In the meantime it should work by copying this -- <a href=\"https://github.com/bytecodealliance/wasmtime/blob/f8abe1169c9d0c0e034511bac7bacf030d4ecab8/crates/wasi/src/lib.rs#L20-L75\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/blob/f8abe1169c9d0c0e034511bac7bacf030d4ecab8/crates/wasi/src/lib.rs#L20-L75\">https://github.com/bytecodealliance/wasmtime/blob/f8abe1169c9d0c0e034511bac7bacf030d4ecab8/crates/wasi/src/lib.rs#L20-L75</a> -- into your crate</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/f8abe1169c9d0c0e034511bac7bacf030d4ecab8/crates/wasi/src/lib.rs#L20-L75\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f8abe1169c9d0c0e034511bac7bacf030d4ecab8/crates/wasi/src/lib.rs#L20-L75\" target=\"_blank\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 189030410,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582645214
    },
    {
        "content": "<p>while it's internal and not expected to be used generally, we'll keep <em>something</em> like that working for <code>wasmtime-wasi</code> at least</p>",
        "id": 189030429,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582645228
    },
    {
        "content": "<p>which I think should work for what you're doing?</p>",
        "id": 189030446,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582645233
    },
    {
        "content": "<p>I need to read up on interface types. I'm not sure how would they work in our use case. We simply need hostcalls that can access and modify module's memory.</p>\n<p>Regarding <code>WasiCallerMemory</code>, is there an example of how to use it? The only use in <code>wasmtime</code> repo is inside WASI-specific <code>define_struct</code> macro. How can I use <code>WasiCallerMemory</code> without copying all that code?</p>",
        "id": 189084250,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1582689364
    },
    {
        "content": "<p>The way we implement hostcalls presently is the same as in the example below. So there are two questions at hand:<br>\n1) How to migrate that into something compliant with current API<br>\n2) What the final API for this should be<br>\nI'm not familiar with interface types beyond the basic idea, but it seems to me that what we are after is the API through which you would implement interface types. Due to the nature of how we are going to use the runtime, we would like to be as close to the actual bits as possible, not walled off behind additional interfaces, however convenient these may be in the general case.</p>",
        "id": 189086930,
        "sender_full_name": "Krzysztof Woś",
        "timestamp": 1582694169
    },
    {
        "content": "<p>Here's the repo: <a href=\"https://github.com/krzysztofwos/wasmtime-example\" target=\"_blank\" title=\"https://github.com/krzysztofwos/wasmtime-example\">https://github.com/krzysztofwos/wasmtime-example</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/krzysztofwos/wasmtime-example\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/795525?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/krzysztofwos/wasmtime-example\" target=\"_blank\" title=\"krzysztofwos/wasmtime-example\">krzysztofwos/wasmtime-example</a></div><div class=\"message_embed_description\">Contribute to krzysztofwos/wasmtime-example development by creating an account on GitHub.</div></div></div>",
        "id": 189087961,
        "sender_full_name": "Krzysztof Woś",
        "timestamp": 1582696219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266363\">@Maciej Woś</span> currently you'd have to copy in the <code>WasiCallerMemory</code> type, it's not great :(</p>",
        "id": 189126266,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582732065
    },
    {
        "content": "<p>in general we'd prefer to encourage instantiating a runtime with a <code>Memory</code> value</p>",
        "id": 189126281,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582732074
    },
    {
        "content": "<p>so you'd instantiate the module first, get your memory, then put the memory somewhere you can reference</p>",
        "id": 189126337,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582732086
    },
    {
        "content": "<p>it's a bit circular since you're satifsying imports as well</p>",
        "id": 189126351,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582732094
    },
    {
        "content": "<p>so it's not a great solution</p>",
        "id": 189126355,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582732099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> so we need to copy <code>WasiCallerMemory</code> and then somehow create <code>Func</code> <code>Extern</code> using one of the wrappers? Could you give me an example? Something like <code>Func::wrap1(&amp;store, |mem: WasiCallerMemory|)</code>?</p>",
        "id": 189133734,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1582736523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266363\">@Maciej Woś</span> yeah that should work</p>",
        "id": 189133756,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582736544
    },
    {
        "content": "<p>OK, I'll try it out</p>",
        "id": 189133778,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1582736558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266363\">@Maciej Woś</span>  If none of this works well, or you think your use case could be supported well with a more direct API, then we should definitely look into that, too, so it'd be great if you could report back here once you've done some experiments</p>",
        "id": 189137286,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1582738608
    },
    {
        "content": "<p>I rewrote <span class=\"user-mention\" data-user-id=\"266298\">@Krzysztof Woś</span>'s example <a href=\"https://github.com/krzysztofwos/wasmtime-example/pull/1/files#diff-639fbc4ef05b315af92b4d836c31b023R35\" target=\"_blank\" title=\"https://github.com/krzysztofwos/wasmtime-example/pull/1/files#diff-639fbc4ef05b315af92b4d836c31b023R35\">https://github.com/krzysztofwos/wasmtime-example/pull/1/files#diff-639fbc4ef05b315af92b4d836c31b023R35</a>.</p>\n<p>Looks like it will work for now. Thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> </p>\n<p>I'm just wondering about the interface though. Previously we could construct as single <code>Instance</code> with all the host calls we wanted. That was a pretty neat way to do it. They were resolved as any other import from a separate Wasm module.</p>\n<p>With this approach they need to be resolved slightly differently.</p>\n<p>Also, how stable is this interface? The comments suggest this is not something that should be done.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/krzysztofwos/wasmtime-example/pull/1/files#diff-639fbc4ef05b315af92b4d836c31b023R35\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/1270689?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/krzysztofwos/wasmtime-example/pull/1/files#diff-639fbc4ef05b315af92b4d836c31b023R35\" target=\"_blank\" title=\"update for wasmtime v0.12.0 by lostman · Pull Request #1 · krzysztofwos/wasmtime-example\">update for wasmtime v0.12.0 by lostman · Pull Request #1 · krzysztofwos/wasmtime-example</a></div><div class=\"message_embed_description\">\nHave a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.\n  </div></div></div>",
        "id": 189284367,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1582866324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>  I'd be curious to hear your thoughts on this. ISTM that this is a pattern we should support in a stable way, but perhaps there's some other way to support the underlying needs?</p>",
        "id": 189304076,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1582891832
    },
    {
        "content": "<p>Yeah this is one thing I was thinking about at some point, the general problem is that you want to create a set of imports with one piece of shared state, and you don't really want to manage the <code>Rc</code> yourself.</p>",
        "id": 189321908,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582905073
    },
    {
        "content": "<p>We support this in a stable way in that you can put your state in an <code>Rc</code> and then share it amongst all of the imports, but it's not exactly the most ergonomic thing in the world (it is safe though unlike the previous iteration!)</p>",
        "id": 189321942,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582905098
    },
    {
        "content": "<p>In some sense though it's all technically the same thing since an instance handle is an <code>Rc</code> so technically it's just who's writing the <code>Rc</code> allocation</p>",
        "id": 189322043,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582905142
    },
    {
        "content": "<p>I'll file an issue about supporting this ergonomically though</p>",
        "id": 189322061,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582905152
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1018\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1018\">https://github.com/bytecodealliance/wasmtime/issues/1018</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1018\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1018\" target=\"_blank\" title=\"Support creating a set of imports with once piece of shared state easily · Issue #1018 · bytecodealliance/wasmtime\">Support creating a set of imports with once piece of shared state easily · Issue #1018 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">One thing the current wasmtime::Func API isn&#39;t great at is sometimes (for example with WASI) you want to create a set of functions that all share the same piece of state. Sort of like a trait t...</div></div></div>",
        "id": 189322361,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582905347
    },
    {
        "content": "<p>I've migrated our code to the latest wasmtime and it all looks good except I needed to add more wrappers: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1222\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1222\">https://github.com/bytecodealliance/wasmtime/pull/1222</a>. We have functions with many parameters!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1222\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1222\" target=\"_blank\" title=\"add more wrappers and getters by lostman · Pull Request #1222 · bytecodealliance/wasmtime\">add more wrappers and getters by lostman · Pull Request #1222 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I've been migrating code to the latest version of wasmtime and found myself short of suitable wrapX functions. Hence this PR.</div></div></div>",
        "id": 189658944,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1583294316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266363\">@Maciej Woś</span> does <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1237\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1237\">https://github.com/bytecodealliance/wasmtime/pull/1237</a> address your use case sufficiently?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1237\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1237\" target=\"_blank\" title=\"Add a first-class way of accessing caller's memory by alexcrichton · Pull Request #1237 · bytecodealliance/wasmtime\">Add a first-class way of accessing caller's memory by alexcrichton · Pull Request #1237 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit adds a first-class way to access a caller&#39;s memory when\ndefining a Func implemented by the host. This is a very common usage\nscenario where the wasm module calls a host function wit...</div></div></div>",
        "id": 190060536,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1583754240
    },
    {
        "content": "<p>Thanks Till. First glance looks great. I copied that type into our code and upgraded to latest. But I'm happy to see it becoming part of the standard API</p>",
        "id": 190140676,
        "sender_full_name": "Maciej Woś",
        "timestamp": 1583812766
    },
    {
        "content": "<p>Great, thank you for confirming that this works for you!</p>",
        "id": 190156832,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1583834445
    }
]