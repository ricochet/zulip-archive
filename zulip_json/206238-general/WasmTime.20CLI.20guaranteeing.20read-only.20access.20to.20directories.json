[
    {
        "content": "<p>I in no way want to sound like I'm asking for more work to be done for the WasmTime CLI. The speed at which this whole ecosystem is evolving is great. I just wanted to ask if the idea of using the WasmTime CLI to sandbox a wasm image pulled from a service somewhere that only needed read-access to directories and files within it had ever come up? </p>\n<p>I know I could write my own embedder to do that, but it would never have the same level of trust that a tool coming from the <code>Bytecode Alliance</code> would have - when the tool's documentation states that a certain command-line argument would grant the WASM image only read access to the directory's contents. The service could provide the shell script that called the WasmTime CLI and the user could rest assured the directory they passed to the script could be read but not modified.</p>\n<p>Maybe someone knows of a fork that is already working towards that level of trust?</p>",
        "id": 429911728,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1711560335
    },
    {
        "content": "<p>Wasmtime's WASI support actually has support for readonly directories but it's not exposed through the command line right now. For example <a href=\"https://github.com/bytecodealliance/wasmtime/blob/5b1526cdabcf100d3d5dabe31b9d4943c5bfeabe/src/commands/run.rs#L850-L851\">this line</a> assumes all permissions. I think extending the CLI syntax to support a readonly flag might make sense there if you're interested in sending a PR?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/5b1526cdabcf100d3d5dabe31b9d4943c5bfeabe/src/commands/run.rs#L850-L851\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/842efb91823f98e1dd3bd930c7ffe8cb54afe0a7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653265396663646461336432303836326630636336616539363663333230373864666631363965306336653562653066653262646332333837633836646366372f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5b1526cdabcf100d3d5dabe31b9d4943c5bfeabe/src/commands/run.rs#L850-L851\" title=\"wasmtime/src/commands/run.rs at 5b1526cdabcf100d3d5dabe31b9d4943c5bfeabe · bytecodealliance/wasmtime\">wasmtime/src/commands/run.rs at 5b1526cdabcf100d3d5dabe31b9d4943c5bfeabe · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 429914252,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711561191
    },
    {
        "content": "<p>So the first <code>DirPerms</code> argument could say the directory is provided by the host as read-only and the second, <code>FilePerms</code>, could say the files themselves are also read-only? That's nice. I was under the impression only creating new files could be disallowed. There is definitely some bike-shedding warranted on the CLI argument. Is this the right place? Instead of <code>--dir</code>, it could be <code>--dir-readonly</code>. But naming things is hard and I would be happy with any name as its really the fact that the final binary is coming from you and the documentation spells out the promise it is making that's important.</p>\n<p>I'm certainly up for sending a PR! If you prefer, the better names discussion could be part of the PR.</p>",
        "id": 429916049,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1711561826
    },
    {
        "content": "<p>Ah bikeshedding can happen wherever, but probably best to do in a PR yeah. As for inspiration I know <code>docker</code> has modes like this but I also know their CLI syntax for volumes has evolved over time. Otherwise though I'm not sure what the best syntax is here myself, so seems reasonable to take a stab at something and we can see how it works out</p>",
        "id": 429916317,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711561929
    }
]