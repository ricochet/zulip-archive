[
    {
        "content": "<p>Following a proposal by a co-worker I have been investigating into a modified ABI which is symmetric between caller and callee, while maintaining an unchanged API to the guest languages. This facilitates using WIT for compile-to-native plugins, because the same binding rules work for both sides of the call (no guest vs host distinction).</p>\n<p>The rules are quite simple to define: Apply the same ABI for imported and exported interfaces.</p>\n<p>For strings you can either select <code>method(&amp;str) -&gt; &amp;'post str</code> (with <code>'post</code> defined as until calling <code>cabi_post</code> on the result), <code>method(&amp;str) -&gt; String</code> or <code>method(String) -&gt; String</code>. I selected the first one because it is the only option which removes all allocations from the call. Similar for vectors.</p>\n<p>For resources I selected the import ABI for both sides, with the recent modification to make handles usize. This way a resource table becomes <em>optional</em> because you <em>can</em> pass rep directly to the other side.</p>\n<p>You can find a link to the source code and more information <a href=\"#narrow/stream/327223-wit-bindgen/topic/Native.20plugins.20defined.20in.20WIT/near/447003081\">in this thread</a></p>\n<p>If you combine this with a caller provided buffer API (and/or async from 0.3) it becomes even more attractive for shared everything, as initial feed-back from SIG embedded suggests.</p>\n<p>I post here as I would like to get a wider opinion on the acceptability as an alternative ABI configuration for shared everything.</p>",
        "id": 451151450,
        "sender_full_name": "Christof Petig",
        "timestamp": 1720864982
    }
]