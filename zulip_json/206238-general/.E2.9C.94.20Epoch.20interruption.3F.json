[
    {
        "content": "<p>I'm running an instance of wasm code. I want to limit it to ~Xms of runtime - after that, I want to kill the instance. </p>\n<p>Is epoch-based interruptions good for this use case? Does epoch based interruption guarantee that the interrupt will happen, or could a malicious wasm module spin loop or something and prevent it from happening? </p>\n<p>Additionally, what is the intended way to use epochs? Have a thread call Increment_epoch() every 1ms, and set the epoch deadline to X ticks?<br>\nHave a thread sleep Xms, then call increment_epoch() once and set the epoch deadline to 1 tick?</p>",
        "id": 287622199,
        "sender_full_name": "JMS",
        "timestamp": 1656356220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509382\">@JMS</span> either of those driver patterns would work, it's really up to you and the architecture of your application!</p>",
        "id": 287622278,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356260
    },
    {
        "content": "<p>response time to an epoch interruption should be bounded by the maximum straight-line body length of one function; every loop backedge and every function entry checks for the epoch deadline</p>",
        "id": 287622377,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356285
    },
    {
        "content": "<blockquote>\n<p>response time to an epoch interruption should be bounded by the maximum straight-line body length of one function; every loop backedge and every function entry checks for the epoch deadline</p>\n</blockquote>\n<p>Can I get an eli5 on this? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287622486,
        "sender_full_name": "JMS",
        "timestamp": 1656356345
    },
    {
        "content": "<p>Sorry, basically it's an answer to your question \"does epoch based interruption guarantee that the interrupt will happen, or could a malicious wasm module spin loop or something and prevent it from happening? \" that means \"yes, it guarantees the interrupt will happen\"</p>",
        "id": 287622588,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356392
    },
    {
        "content": "<p>Ah wait, do you mean every iteration of a loop, and every fn call checks the epoch?<br>\nSo you can't use loops or recursion to infinitely prevent the epoch rinteruppt ight?</p>",
        "id": 287622602,
        "sender_full_name": "JMS",
        "timestamp": 1656356396
    },
    {
        "content": "<p>right, exactly. loops and recursion are the two ways to get truly unbounded runtime, and we check at regular intervals during both</p>",
        "id": 287622701,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356419
    },
    {
        "content": "<p>just with function calls one could blow up runtime (but still have bounded runtime), by having a tree of functions each of which calls its child ten times; but we guard against that by checking in every function entry as well</p>",
        "id": 287622776,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356459
    },
    {
        "content": "<p>Awesome, ty! I also want to suggest that this gets added to the documentation - I don't see mention of it anywhere.</p>",
        "id": 287622779,
        "sender_full_name": "JMS",
        "timestamp": 1656356461
    },
    {
        "content": "<p>I think it should be in the docs on <code>Config::epoch_interruption</code>? but I haven't looked in a bit and if not we always welcome doc prs to make things clearer!</p>",
        "id": 287622847,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356488
    },
    {
        "content": "<p>I don't see it? <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a><br>\nYeah, I can make a PR :)</p>",
        "id": 287622905,
        "sender_full_name": "JMS",
        "timestamp": 1656356513
    },
    {
        "content": "<p>later today*</p>",
        "id": 287622998,
        "sender_full_name": "JMS",
        "timestamp": 1656356541
    },
    {
        "content": "<p>hmm, yeah, maybe I'm remembering just an implementation-level comment on how it works and why it's bounded then</p>",
        "id": 287623025,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356559
    },
    {
        "content": "<p>ok cool, thanks!</p>",
        "id": 287623035,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656356566
    },
    {
        "content": "<p>Wait a minute, epochs are per engine? Ugh. My game uses the same engine on multiple threads, to run multiple wasm instances at once. Incrementing the epoch would interuppt _all_ of them, not just the one I mean to interuppt right? Is there a way to do per-store epochs or something?</p>",
        "id": 287629332,
        "sender_full_name": "JMS",
        "timestamp": 1656359950
    },
    {
        "content": "<p>currently no; maybe it could be made configurable; <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> would probably have a better head for the API-design tradeoffs here</p>",
        "id": 287630215,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656360343
    },
    {
        "content": "<p>Through the use of <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.epoch_deadline_callback\"><code>Store::epoch_deadline_callback</code></a> I think you can have per-store limits where you can have custom logic for when the epoch comes up of what to do (e.g. \"oops interrupted too soon\" or \"ok time to die, return a trap\")</p>",
        "id": 287630606,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656360520
    },
    {
        "content": "<p>otherwise though each store has its own limit of what epoch it will \"stop\" at and that can be configured separately in each store relative to when wasm starts executing</p>",
        "id": 287630660,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656360549
    },
    {
        "content": "<p>so there can be like one timer thread updating the epoch at 60hz or so and you could configure a separate deadline for each store depending on when it starts</p>",
        "id": 287630700,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656360573
    },
    {
        "content": "<p>Hmm yeah, so one thread incrementing every 1ms, and then have each store set deadline to \"current + DURATION\" would work well. Question is, can I get the current epoch from the engine somehow? I don't see a method to do so.</p>",
        "id": 287632486,
        "sender_full_name": "JMS",
        "timestamp": 1656361585
    },
    {
        "content": "<p>The method to set the deadline works in a relative way, starting at the current tick: \"Sets the epoch deadline to a certain number of ticks in the future.\" (<code>Store::set_epoch_deadline</code>)</p>",
        "id": 287632786,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656361778
    },
    {
        "content": "<p>Ah, makes sense, ty</p>",
        "id": 287632901,
        "sender_full_name": "JMS",
        "timestamp": 1656361829
    },
    {
        "content": "<p>Does it set the epoch based on the time I call the function, or the time the instance starts?</p>",
        "id": 287633534,
        "sender_full_name": "JMS",
        "timestamp": 1656362221
    },
    {
        "content": "<p>Like, should I call it right before I run the instance, after setup? Or is it ok to do it during the store creation.</p>",
        "id": 287633572,
        "sender_full_name": "JMS",
        "timestamp": 1656362244
    },
    {
        "content": "<p>it sets it when the function is called, not on each wasm invocation</p>",
        "id": 287633618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656362272
    },
    {
        "content": "<p>so you'd want to configure it just before calling wasm</p>",
        "id": 287633635,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656362281
    },
    {
        "content": "<p>Ok, interesting. So I was setting it too early before, and by the time I called the wasm, it was already past the deadline. So the wasm code ended up being able to run an infinite loop <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 287633939,
        "sender_full_name": "JMS",
        "timestamp": 1656362458
    },
    {
        "content": "<p>It should be the case that the wasm immediately trapped rather than actually running anything, once the deadline is passed wasm won't make any more progress</p>",
        "id": 287634029,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1656362521
    },
    {
        "content": "<p>Hmm, that definitely wasn't the case. My logs showed it was making no progress - nothing was printing. Something seems strange about it.</p>",
        "id": 287634544,
        "sender_full_name": "JMS",
        "timestamp": 1656362781
    },
    {
        "content": "<p>Now that I set the deadline right before running the call, it's behaving even more weird. Setting a 9s deadline somehow makes it trap every single time. But disabling epochs has it run hundreds of times a second!</p>",
        "id": 287635050,
        "sender_full_name": "JMS",
        "timestamp": 1656363052
    },
    {
        "content": "<p>Oooh crap - I forgot to put the increment_epoch() in a loop <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287635417,
        "sender_full_name": "JMS",
        "timestamp": 1656363242
    },
    {
        "content": "<p>Nope, it's still behaving strange, ugh</p>",
        "id": 287635930,
        "sender_full_name": "JMS",
        "timestamp": 1656363507
    },
    {
        "content": "<p>Replacing my wasm code with an empty function makes it trap still. No way an empty function is taking more than 9s to run, when a non-empty function takes 63 microseconds...</p>",
        "id": 287637927,
        "sender_full_name": "JMS",
        "timestamp": 1656364505
    },
    {
        "content": "<p>Question: If I never call <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.set_epoch_deadline\">https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.set_epoch_deadline</a>, but have epoch interrupts enabled, what happens? Is there a default deadline?</p>",
        "id": 287661646,
        "sender_full_name": "JMS",
        "timestamp": 1656381370
    },
    {
        "content": "<p>I've narrowed it down to <a href=\"https://github.com/JMS55/botnet/blob/master/src/compute_bot_action.rs#L40\">https://github.com/JMS55/botnet/blob/master/src/compute_bot_action.rs#L40</a> getting interuptted every single time I call it</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JMS55/botnet/blob/master/src/compute_bot_action.rs#L40\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8e8adea833ece11123170c62a5ab0c81ce7c7ab4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663966383839663265643138363065363736353434396234366533313233306162646666313664343535623962366630363635336564343266643139376264322f4a4d5335352f626f746e6574)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JMS55/botnet/blob/master/src/compute_bot_action.rs#L40\" title=\"botnet/compute_bot_action.rs at master · JMS55/botnet\">botnet/compute_bot_action.rs at master · JMS55/botnet</a></div><div class=\"message_embed_description\">Contribute to JMS55/botnet development by creating an account on GitHub.</div></div></div>",
        "id": 287662240,
        "sender_full_name": "JMS",
        "timestamp": 1656382121
    },
    {
        "content": "<p>Ok, so doing <code>    store.set_epoch_deadline(10000000000000000000);</code> at the very start, and then setting a real deadline when I'm ready fixes it.</p>",
        "id": 287662334,
        "sender_full_name": "JMS",
        "timestamp": 1656382264
    },
    {
        "content": "<p>Opened a bug report <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4342\">https://github.com/bytecodealliance/wasmtime/issues/4342</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4342\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c9afc6b9fd151f544756a63b25f94865ce6a5966\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376436303762613464663635363161303761386637616136356435363130623435343236623736633738303531336430643162376531343435633738643934302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34333432)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4342\" title=\"Enabling epoch interruption without setting a deadline causes the interrupt to immediately trigger · Issue #4342 · bytecodealliance/wasmtime\">Enabling epoch interruption without setting a deadline causes the interrupt to immediately trigger · Issue #4342 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Test Case https://github.com/JMS55/wasmtime-epoch-test Steps to Reproduce Clone the above repository cd guest &amp;&amp; cargo build cargo run Uncomment line 12 of main.rs cargo run again Expected ...</div></div></div>",
        "id": 287664241,
        "sender_full_name": "JMS",
        "timestamp": 1656384483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509382\">JMS</span> has marked this topic as resolved.</p>",
        "id": 287666057,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656386306
    }
]