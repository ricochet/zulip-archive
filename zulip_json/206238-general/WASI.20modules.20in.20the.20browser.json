[
    {
        "content": "<p>Hi! What is currently the best way to run WASI modules in the browser? WASM modules are easy to run, but modules that use WASI, I need some help.</p>",
        "id": 435403290,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714055462
    },
    {
        "content": "<p>Take a look at <a href=\"https://github.com/bytecodealliance/jco\">JCO</a>'s \"transpile\" feature</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d64b398913ac1bee5a960eb26518f49b8aa9aec0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323264383564613361633135623637366438636265363334393766303438396466623436343130623136636433333664316338643961393135386363316239662f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 435404119,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714055675
    },
    {
        "content": "<p>I may not undestand, but it looks like it is focused on WebAssembly Components and I don't know if it is what I'm looking for.</p>\n<p>Maybe an example will help me explain: </p>\n<p>I compiled a C function to a WASI Module. The function simply calls \"printf('Hello')\" to print something.  Now that I have a .wasm file, how can I instantiate the module and run the function in the browser? As it uses WASI capabilities, the native WebAssembly API doesn't work because I need the WASI imports.</p>\n<p>As I'm not currently working with the WebAssembly component Model, i'm not sure if the jco helps me with my goals.</p>",
        "id": 435406666,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714056313
    },
    {
        "content": "<p>Components are the basis of WASI 0.2. If you don't want to use components you will need to stick to WASI 0.1 (aka preview1). I'm not sure what the state of the art for running WASI 0.1 in browsers is; possibly this: <a href=\"https://github.com/bjorn3/browser_wasi_shim\">https://github.com/bjorn3/browser_wasi_shim</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/browser_wasi_shim\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b1ba9aa0578a3a4c98b95e7ed30e244aa8eb9b65/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626230363331363637373663306537343933373165343166353734366230343162353238663436653439343635343466636431363939653730313664383739302f626a6f726e332f62726f777365725f776173695f7368696d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/browser_wasi_shim\" title=\"GitHub - bjorn3/browser_wasi_shim: A WASI shim for in the browser\">GitHub - bjorn3/browser_wasi_shim: A WASI shim for in the browser</a></div><div class=\"message_embed_description\">A WASI shim for in the browser. Contribute to bjorn3/browser_wasi_shim development by creating an account on GitHub.</div></div></div>",
        "id": 435410708,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714057447
    },
    {
        "content": "<p>I need some more insight on Components. Is it possible to take a C script and turn it into a component so I can use jco to run it? Also, would love to know where can i obtain some more information on the component model.</p>",
        "id": 435412153,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714057909
    },
    {
        "content": "<p>This is the best high-level landing page for component model documentation: <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a></p>",
        "id": 435413017,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714058215
    },
    {
        "content": "<blockquote>\n<p>Is it possible to take a C script and turn it into a component so I can use jco to run it?</p>\n</blockquote>\n<p>Yep! <a href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-cc\">https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-cc</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-cc\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3de388c3020d4e57b48964211d8a8bcca489483c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306665643063383233646363306134623133346264613238363137633737386432613961613938656635663561353433326630666132626538623434396439622f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-cc\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 435413301,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714058311
    },
    {
        "content": "<p>Thank you very much! <br>\nOne more question: is it possible, at this time, to build a WASI module that publishes messages to a MQTT bus? I imagine it would have to tackle problems like networking, but i don't know if WASI is yet capable of such a thing. Sorry to bother, is just that i'm a little lost on the state of the technology. Thanks again!</p>",
        "id": 435413627,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714058417
    },
    {
        "content": "<p>Yes, though unless I'm mistaken about the current state of socket support in wasi-sdk I think you would have to implement it directly against the WASI sockets APIs: <a href=\"https://github.com/WebAssembly/WASI/tree/main/preview2/sockets\">https://github.com/WebAssembly/WASI/tree/main/preview2/sockets</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/tree/main/preview2/sockets\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d898fbc76144e38f889ce0ec36b5da205ef3513d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326464613130356566616430383464353834346632636334333865383731383235653132656336333530383435646537363966666431346166653439363634622f576562417373656d626c792f57415349&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/tree/main/preview2/sockets\" title=\"WASI/preview2/sockets at main · WebAssembly/WASI\">WASI/preview2/sockets at main · WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div>",
        "id": 435425534,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714062333
    },
    {
        "content": "<p>My knowledge of WASI sockets is pretty limited at this point; someone else might be able to provide more info.</p>",
        "id": 435425702,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714062385
    },
    {
        "content": "<p>Though: considering all of your questions, you may have a more fundamental problem: afaik there is no way to implement mqtt in a browser, with or without wasm.</p>",
        "id": 435426836,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714062758
    },
    {
        "content": "<p>The plan was to create a library in python that would publish messages and have it run in the browser with WASI. The bus itself would not be in the browser, just the publishing of the messages.</p>\n<p>But i'm currently in a more basic state-of-mind now, just learning about the topic and creating simple examples first.</p>",
        "id": 435427159,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714062857
    },
    {
        "content": "<p>Right, but unless you have an HTTP (or other browser-supported protocol) proxy for MQTT, there is no way for a browser to publish to an mqtt broker</p>",
        "id": 435427943,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714063157
    },
    {
        "content": "<p>I'm having some trouble understanding the process and steps to build a component (from Python).</p>\n<ol>\n<li>So first I need to develop the Python script. </li>\n<li>Create the WIT file (using the wit-bindgen???)</li>\n<li>Use JCO to run the component in the browser</li>\n</ol>\n<p>Are these the right steps?</p>",
        "id": 435429043,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714063578
    },
    {
        "content": "<p>The easiest way to build a component from Python is probably <a href=\"https://github.com/bytecodealliance/componentize-py\">componentize-py</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9b8f826a793f303506bae213130760b523818fd8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323761396436303730393734313734643838346331636239636535663033363738646366313637626164626631373732336262353532623531306238353662332f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py\" title=\"GitHub - bytecodealliance/componentize-py\">GitHub - bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 435430355,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714064059
    },
    {
        "content": "<p>I know people have used <code>componentize-py</code> to build components and then run them using JCO, although I haven't tried the latter yet, myself.</p>",
        "id": 435430529,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714064131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  Thank you. I understand that componentize-py takes a WIT file as an argument. Is it common to write the files manually or is there a tool that is used to generate the WIT file based on the code?</p>",
        "id": 435431926,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714064631
    },
    {
        "content": "<p>There's no tool to generate a WIT file from Python code yet, AFAIK, so you'll either need to write it manually or use one someone else has already written.</p>",
        "id": 435432218,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714064732
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  Ok so I'm afraid i have not understood the purpose of the WIT file. How can I use someone else's WIT file for my own Python script?</p>",
        "id": 435432405,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714064807
    },
    {
        "content": "<p>The WIT file determines two important things: the API that the component will present to the host (i.e. to JS code in the browser in this case) and the API the the host will present to the component.  WASI defines some standard ones that cover both (e.g. wasi-cli, which has a <code>run</code> export analogous to <code>main</code> in native CLI apps, plus various imports for accessing the filesystem, doing socket networking, getting environment variables, etc.).  If your app can be modeled in terms of one of those standard collections of interfaces (which we call \"worlds\"), then you can use those WIT files.  If you need a custom API in either direction, you'll want to write your own.</p>",
        "id": 435433652,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714065300
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  for your patience and help.<br>\nSo, let me check if my thoughts are ok:</p>\n<ol>\n<li>I wrote a simple Python script that prints the fibonacci sequence every 2 seconds.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">time</span>\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>:\n    <span class=\"nc\">fib_sequence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">fib_sequence</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">n</span>:\n        <span class=\"nc\">fib_sequence</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">fib_sequence</span>\n\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">print_fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>:\n    <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"n\">num</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>:\n        <span class=\"nc\">print</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">terms</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">15</span>\n<span class=\"n\">print_fibonacci</span><span class=\"p\">(</span><span class=\"n\">terms</span><span class=\"p\">)</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>Now to turn this into a component, I will need to use componentize-py with a WIT file that specifies an export called \"fibonacci\", right?</p>\n</li>\n<li>\n<p>And to run the component in the browser, I could use jco.<br>\nAm I missing something?</p>\n</li>\n</ol>",
        "id": 435439035,
        "sender_full_name": "Nuno Lima",
        "timestamp": 1714067376
    },
    {
        "content": "<p>I'd recommend looking at a few of <a href=\"https://github.com/bytecodealliance/componentize-py/tree/main/examples\">the examples</a>.  <code>componentize-py</code> does not (yet) have special support for the <code>wasm-cli</code> world, which is what would be needed to support the script you shared unchanged.  However, if you were to move the <code>terms = 15; print_fibonacci(terms)</code> part into the body of the <code>run</code> function <a href=\"https://github.com/bytecodealliance/componentize-py/blob/main/examples/cli/app.py\">here</a>, then yes, that should work just fine.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/tree/main/examples\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/abaf802cb63df8aa00fe8adf79babe653c4ff318/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386438303132663235663936626238323632636437346432376635363965613137333639626537633332616663393463343537613537366566326139656235322f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/tree/main/examples\" title=\"componentize-py/examples at main · bytecodealliance/componentize-py\">componentize-py/examples at main · bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-py development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/blob/main/examples/cli/app.py\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/abaf802cb63df8aa00fe8adf79babe653c4ff318/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386438303132663235663936626238323632636437346432376635363965613137333639626537633332616663393463343537613537366566326139656235322f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/blob/main/examples/cli/app.py\" title=\"componentize-py/examples/cli/app.py at main · bytecodealliance/componentize-py\">componentize-py/examples/cli/app.py at main · bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 435441144,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714068080
    }
]