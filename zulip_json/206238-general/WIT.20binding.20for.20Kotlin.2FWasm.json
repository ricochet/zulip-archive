[
    {
        "content": "<p>Kotlin/Wasm is an effort driven by the Kotlin team to introduce first class support for Wasm in Kotlin without generating JVM bytecode and by leveraging Wasm GC. I am collaborating with them to move forward Wasm Component Model binding and WASI support on <a href=\"https://github.com/sdeleuze/kowasm\">https://github.com/sdeleuze/kowasm</a>.</p>\n<p>We have started to explore how WIT can be translated to Kotlin, see <a href=\"https://github.com/sdeleuze/kowasm/blob/main/component-model/src/wasmTest/kotlin/org/kowasm/componentmodel/WitToKotlin.kt\">WitToKotlin.kt</a> and  the <a href=\"https://github.com/sdeleuze/kowasm/commit/75a23bab5367a521254a4cd65b8b18e63e2fb0eb\">related comments</a>. What is interesting with Kotlin is that it provides a more expressive language than Java, closer to what Rust allows in term of expressiveness, but higher level due to his GCed nature.</p>\n<p>Please find below a summary of questions/remarks we have, and where we are looking for feedback:</p>\n<ul>\n<li>Kotlin has <a href=\"https://kotlinlang.org/docs/data-classes.html\">data classes</a> that map nicely to WIT records but they imply some <a href=\"https://jakewharton.com/public-api-challenges-in-kotlin/#copy-functions\">binary compatiblity issues</a>. We could use regular classes but we would lose features like destructuring and have weaker semantic match with WIT. I am curious if binary compatibility is ensured in other language bindings when a field is added to a record to help us to make an educated choice.</li>\n<li>Most of WIT concepts map nicely to Kotlin, but <code>union</code> looks like a weird one where we struggle to find an elegant translation. It makes sense on Rust but I am wondering how other languages approach it.</li>\n<li>We have mapped WIT option to <a href=\"https://kotlinlang.org/docs/null-safety.html#nullable-receiver\">Kotlin null-safety</a> (wrapper less approach idiomatic in Kotlin to express the presence or not of a value)</li>\n<li>We have mapped at least for now WIT result to thrown exceptions</li>\n<li>Where mutability had to be expressed, we have chosen to default to <code>val</code> (read-only) rather than <code>var</code> (mutable) even if this does not look like defined by WIT. Is it ok? Should WIT says something about mutability?</li>\n<li>While we map WIT list to <code>List&lt;T&gt;</code> (similar to what it is in Java) for most cases, for effiency reasons we mapped list of bytes to <code>ByteArray</code> which is an optimized array of bytes which does not provide growable capabilities. Any concern about that or thoughts about mapping WIT <code>list</code> to growable heap allocated list versus arrays?</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/kowasm\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4e4f2b2b4441a8f4e2d67ca1fc3c75209189c4d9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356639316432653165313362393937383739346337336463353066653333623633353164636236346138653031366562613366613630386261646333346265332f7364656c65757a652f6b6f7761736d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/kowasm\" title=\"GitHub - sdeleuze/kowasm: KoWasm is an experimental project intended to provide WASI and WebAssembly Component Model support for Kotlin/Wasm\">GitHub - sdeleuze/kowasm: KoWasm is an experimental project intended to provide WASI and WebAssembly Component Model support for Kotlin/Wasm</a></div><div class=\"message_embed_description\">KoWasm is an experimental project intended to provide WASI and WebAssembly Component Model support for Kotlin/Wasm - GitHub - sdeleuze/kowasm: KoWasm is an experimental project intended to provide ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/kowasm/blob/main/component-model/src/wasmTest/kotlin/org/kowasm/componentmodel/WitToKotlin.kt\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4e4f2b2b4441a8f4e2d67ca1fc3c75209189c4d9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356639316432653165313362393937383739346337336463353066653333623633353164636236346138653031366562613366613630386261646333346265332f7364656c65757a652f6b6f7761736d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/kowasm/blob/main/component-model/src/wasmTest/kotlin/org/kowasm/componentmodel/WitToKotlin.kt\" title=\"kowasm/WitToKotlin.kt at main · sdeleuze/kowasm\">kowasm/WitToKotlin.kt at main · sdeleuze/kowasm</a></div><div class=\"message_embed_description\">KoWasm is an experimental project intended to provide WASI and WebAssembly Component Model support for Kotlin/Wasm - kowasm/WitToKotlin.kt at main · sdeleuze/kowasm</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/kowasm/commit/75a23bab5367a521254a4cd65b8b18e63e2fb0eb\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b9410b1965cd588b388f7427d6476d94ee2a2896\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643331353131313239376565303963653232633964643333306330393431323430343763326463643234653635303939316466663938386135383637623735372f7364656c65757a652f6b6f7761736d2f636f6d6d69742f37356132336261623533363761353231323534613463643635623862313865363365326662306562)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/kowasm/commit/75a23bab5367a521254a4cd65b8b18e63e2fb0eb\" title=\"Start to explore how WIT translates to Kotlin · sdeleuze/kowasm@75a23ba\">Start to explore how WIT translates to Kotlin · sdeleuze/kowasm@75a23ba</a></div><div class=\"message_embed_description\">See #2</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://kotlinlang.org/docs/data-classes.html\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2862849515f25d0f94d91bbca798a423cad64198\\/68747470733a2f2f6b6f746c696e6c616e672e6f72672f6173736574732f696d616765732f6f70656e2d67726170682f646f63732e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://kotlinlang.org/docs/data-classes.html\" title=\"Data classes | Kotlin\">Data classes | Kotlin</a></div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://kotlinlang.org/docs/null-safety.html#nullable-receiver\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2862849515f25d0f94d91bbca798a423cad64198\\/68747470733a2f2f6b6f746c696e6c616e672e6f72672f6173736574732f696d616765732f6f70656e2d67726170682f646f63732e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://kotlinlang.org/docs/null-safety.html#nullable-receiver\" title=\"Null safety | Kotlin\">Null safety | Kotlin</a></div></div></div>",
        "id": 326298938,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1675756060
    },
    {
        "content": "<blockquote>\n<p>but union looks like a weird one where we struggle to find an elegant translation. It makes sense on Rust but I am wondering how other languages approach it.</p>\n</blockquote>\n<p>Hey! I recently worked on Go bindings support for <code>wit-bindgen</code>. Speaking of <code>union</code>, <code>variant</code>, and <code>enum</code> types, Go as a language does not support any of these types. The way I did is to use <code>struct</code> to define these types. There are two fields inside the struct, one is <code>Kind</code> and another is <code>Value</code> of <code>any</code> type. Then, use Go's <code>switch</code> statement, I can simulate \"pattern matching\" feature that some other languages have, like rust. </p>\n<p>For example, the following variant type will be generated as roughly </p>\n<div class=\"codehilite\" data-code-language=\"F#\"><pre><span></span><code><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"n\">a</span><span class=\"o\">(</span><span class=\"n\">s32</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"n\">b</span><span class=\"o\">(</span><span class=\"n\">s64</span><span class=\"o\">)</span>\n<span class=\"w\">   </span><span class=\"n\">c</span><span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kd\">type</span><span class=\"w\"> </span><span class=\"nx\">C2Kind</span><span class=\"w\"> </span><span class=\"kt\">int</span>\n\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"nx\">C2KindA</span><span class=\"w\"> </span><span class=\"nx\">C2Kind</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"kc\">iota</span>\n<span class=\"w\">    </span><span class=\"nx\">C2KindB</span>\n<span class=\"w\">    </span><span class=\"nx\">C2KindR</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">type</span><span class=\"w\"> </span><span class=\"nx\">C2</span><span class=\"w\"> </span><span class=\"kd\">struct</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">kind</span><span class=\"w\"> </span><span class=\"nx\">C2Kind</span>\n<span class=\"w\">    </span><span class=\"nx\">val</span><span class=\"w\">  </span><span class=\"kt\">any</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In addition to the struct, the bindgen will also generate accessor methods to this struct, including <code>constructor</code>, <code>getter</code>, and <code>setter</code>s. </p>\n<p>Then in the guest code, I can do </p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"k\">switch</span><span class=\"w\"> </span><span class=\"nx\">myC2</span><span class=\"p\">.</span><span class=\"nx\">Kind</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"nx\">C2KindA</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"c1\">// do something with myC2.GetA()</span>\n<span class=\"k\">case</span><span class=\"w\"> </span><span class=\"nx\">C2KindB</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"c1\">// do other things</span>\n<span class=\"k\">default</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"s\">\"exhausted\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Hope this helps!</p>",
        "id": 326306066,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1675758955
    },
    {
        "content": "<blockquote>\n<p>Kotlin has data classes that map nicely to WIT records but they imply some binary compatiblity issues. We could use regular classes but we would lose features like destructuring and have weaker semantic match with WIT. I am curious if binary compatibility is ensured in other language bindings when a field is added to a record to help us to make an educated choice.</p>\n</blockquote>\n<p>I imagine most source languages won't be able to maintain this kind of binary compatibility.</p>\n<p>The component model has a concept of [subtyping] which includes the ability to add fields to records, but I expect it won't usually be implemented with source-language concepts of binary compatibility. Instead, it'll be implemented with component-model-typesystem-aware linking.</p>\n<p>[subtyping]: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Subtyping.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Subtyping.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Subtyping.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/328d66836cc87f9fc5d5eaba494fc6b363884f09\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396163383564323663383133376365663765346665373830646638373638313538313239326137333230666132366536653734653139376433656533376361372f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Subtyping.md\" title=\"component-model/Subtyping.md at main · WebAssembly/component-model\">component-model/Subtyping.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/Subtyping.md at main · WebAssembly/component-model</div></div></div>",
        "id": 326359812,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1675775829
    },
    {
        "content": "<blockquote>\n<p>We have mapped WIT option to Kotlin null-safety (wrapper less approach idiomatic in Kotlin to express the presence or not of a value)</p>\n</blockquote>\n<p>This sounds great! One question is: Do you have a way to handle <code>option&lt;option&lt;T&gt;&gt;</code>?</p>",
        "id": 326359987,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1675775893
    },
    {
        "content": "<blockquote>\n<p>Where mutability had to be expressed, we have chosen to default to val (read-only) rather than var (mutable) even if this does not look like defined by WIT. Is it ok? Should WIT says something about mutability?</p>\n</blockquote>\n<p>All types in wit (other than resources) are pass-by-value, so once a value is received from an interface, code can mutate it or do whatever it wants with the value because it has its own copy.</p>",
        "id": 326360937,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1675776208
    },
    {
        "content": "<p>A <code>sealed class</code> (or interface) is probably the most \"idiomatic\" translation of <code>union</code>, but it requires class wrappers for every variant</p>",
        "id": 326362625,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675776690
    },
    {
        "content": "<p>Another common approach would be to have a class with a \"type\" (or similarly named) field plus a nullable getter/setter per variant</p>",
        "id": 326363245,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675776860
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 326374389,
        "sender_full_name": "Joel Dice",
        "timestamp": 1675779940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"473681\">Sébastien Deleuze</span> <a href=\"#narrow/stream/206238-general/topic/WIT.20binding.20for.20Kotlin.2FWasm/near/326298938\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Most of WIT concepts map nicely to Kotlin, but <code>union</code> looks like a weird one where we struggle to find an elegant translation. It makes sense on Rust but I am wondering how other languages approach it.</li>\n</ul>\n</blockquote>\n<p>For the Java binding generator, I treated it like a <code>variant</code>, generating names for each field, e.g. <code>f0</code>, <code>f1</code>...</p>\n<blockquote>\n<ul>\n<li>We have mapped WIT option to <a href=\"https://kotlinlang.org/docs/null-safety.html#nullable-receiver\">Kotlin null-safety</a> (wrapper less approach idiomatic in Kotlin to express the presence or not of a value)</li>\n</ul>\n</blockquote>\n<p>I did the same for Java, although Dan's point about <code>option&lt;option&lt;T&gt;&gt;</code> is making me think it needs another look.</p>\n<blockquote>\n<ul>\n<li>We have mapped at least for now WIT result to thrown exceptions</li>\n</ul>\n</blockquote>\n<p>I think that's the right choice.  That's on my TODO list for the Java generator.</p>\n<blockquote>\n<ul>\n<li>Where mutability had to be expressed, we have chosen to default to <code>val</code> (read-only) rather than <code>var</code> (mutable) even if this does not look like defined by WIT. Is it ok? Should WIT says something about mutability?</li>\n</ul>\n</blockquote>\n<p>IMHO, I don't think WIT should have anything to say about mutability for value types, although for resource handles it may be relevant.  Value types have copy semantics in WIT, so once a component receives the data, it can do whatever it wants with it.  In terms of code generation, I'd say do whatever feels idiomatic for the language.</p>\n<blockquote>\n<ul>\n<li>While we map WIT list to <code>List&lt;T&gt;</code> (similar to what it is in Java) for most cases, for effiency reasons we mapped list of bytes to <code>ByteArray</code> which is an optimized array of bytes which does not provide growable capabilities. Any concern about that or thoughts about mapping WIT <code>list</code> to growable heap allocated list versus arrays?</li>\n</ul>\n</blockquote>\n<p>This seems related to the mutability question, and again I'd say do whatever is idiomatic.</p>",
        "id": 326376432,
        "sender_full_name": "Joel Dice",
        "timestamp": 1675780482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/206238-general/topic/WIT.20binding.20for.20Kotlin.2FWasm/near/326359987\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>We have mapped WIT option to Kotlin null-safety (wrapper less approach idiomatic in Kotlin to express the presence or not of a value)</p>\n</blockquote>\n<p>This sounds great! One question is: Do you have a way to handle <code>option&lt;option&lt;T&gt;&gt;</code>?</p>\n</blockquote>\n<p>I think for this possible but uncommon case we would generate a wrapper. Kotlin/JVM can typically use <code>java.util.Optional&lt;T&gt;</code> for that, but it is not available in Kotlin/Wasm, so we would generate a custom <code>Optional&lt;T&gt;</code> or similar wrapper for that case.</p>",
        "id": 326405911,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1675788033
    },
    {
        "content": "<p>Thanks everybody for your feedback, super useful.</p>",
        "id": 326406063,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1675788085
    }
]