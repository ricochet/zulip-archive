[
    {
        "content": "<p>Given wasmtime recently landed support, I tried to run a pthread hello world program, and encountered two issues:</p>\n<ul>\n<li>I had to patch wasmtime to change <code>thread_spawn</code> to <code>thread-spawn</code> to match what wasi-libc uses</li>\n<li>I had to pass <code>-Wl,--import-memory,--shared-memory</code> to satisfy the requirement of importing a shared linear memory, but I couldn't find a way to tell the linker to also export the memory</li>\n</ul>\n<p>Did anyone else manage to compile and run a wasm32-wasi-threads module?</p>",
        "id": 326596161,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1675865294
    },
    {
        "content": "<p>Yes, I hope to publish a blog post explaining all the details soon but there are a few remaining issues to work through.</p>",
        "id": 326664708,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1675883177
    },
    {
        "content": "<p>One of the reasons that I'm working on <a href=\"https://github.com/WebAssembly/wasi-sdk/pull/293\">https://github.com/WebAssembly/wasi-sdk/pull/293</a> is that LLVM 16 provides the <code>--export-memory</code> and <code>--import-memory</code> flags in a way that allows the \"import, then export\" paradigm currently necessary in Wasmtime. Once I have that working I plan to publish a pre-release of wasi-sdk that has all the right tools to make things work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sdk/pull/293\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3cf624934b3b9c0792377dff6b94f29c0417f433\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316630383266333963343461663331393439346132393232636236313262346330636332326463663366633238616331616165336235656139376431336535662f576562417373656d626c792f776173692d73646b2f70756c6c2f323933)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sdk/pull/293\" title=\"Update to LLVM 16 by abrown · Pull Request #293 · WebAssembly/wasi-sdk\">Update to LLVM 16 by abrown · Pull Request #293 · WebAssembly/wasi-sdk</a></div><div class=\"message_embed_description\">This change updates the src/llvm-project submodule to LLVM 16. It uses the same commit as the one in LLVM's own 16.0.0-rc1 pre-release. It also updates the src/wasi-libc submodule with some recent ...</div></div></div>",
        "id": 326665029,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1675883310
    },
    {
        "content": "<p>Ah, <code>--export-memory</code>, that was new in <code>wasm-ld</code> and i was looking at the old manpage. I just got an example to run, the behavior is a bit odd but that's kinda expected in the early days. Thanks for your work.</p>",
        "id": 326668063,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1675884320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408159\">Cheng Shao</span> has marked this topic as resolved.</p>",
        "id": 326668157,
        "sender_full_name": "Notification Bot",
        "timestamp": 1675884349
    },
    {
        "content": "<p>Yeah, the \"import, then export\" idea is odd (if that's what you're referring to). <span class=\"user-mention\" data-user-id=\"567999\">@YAMAMOTO Takashi</span> opened up <a href=\"https://github.com/WebAssembly/WASI/issues/502\">https://github.com/WebAssembly/WASI/issues/502</a> to discuss this topic generally; feel free to comment there if you have a strong opinion one way or another.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/issues/502\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c1530f3e4f2026625afbec22c1607626ff63e3ea\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366431376130623330343233343034326461613063643337333633373333356537333235363234333431643761316234633139323136393138366330663964372f576562417373656d626c792f574153492f6973737565732f353032)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/issues/502\" title=\"memory export vs import · Issue #502 · WebAssembly/WASI\">memory export vs import · Issue #502 · WebAssembly/WASI</a></div><div class=\"message_embed_description\">currently a module exports its memory for wasi. for wasi-threads, a module imports the memory too. it&#39;s a bit redundant to both import and export a memory. regardless of what to do for wasi-thr...</div></div></div>",
        "id": 326677304,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1675887599
    },
    {
        "content": "<p>No, I mean the runtime result is incorrect. Though I'm not sure if it's a wasi-libc issue or wasmtime issue, so don't know where to report it..</p>",
        "id": 326677917,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1675887827
    },
    {
        "content": "<p>Oh, that's interesting! If you can diagnose which side it is on, please open a bug. The whole idea of this experimental wasi-sdk release is to bring to light these kinds of issues. Can you say more about the project and what you see?</p>",
        "id": 326680602,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1675888825
    },
    {
        "content": "<p>The bug report is at <a href=\"https://gist.github.com/TerrorJack/a3128331031377a38d50912b0eab609c\">https://gist.github.com/TerrorJack/a3128331031377a38d50912b0eab609c</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/TerrorJack/a3128331031377a38d50912b0eab609c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/TerrorJack/a3128331031377a38d50912b0eab609c\" title=\"bug.md\">bug.md</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 326685818,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1675890741
    },
    {
        "content": "<p>Thanks, I'll take a look!</p>",
        "id": 326703825,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1675898131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408159\">Cheng Shao</span> <a href=\"#narrow/stream/206238-general/topic/.E2.9C.94.20Did.20anyone.20manage.20to.20run.20a.20wasm32-wasi-threads.20module.3F/near/326685818\">said</a>:</p>\n<blockquote>\n<p>The bug report is at <a href=\"https://gist.github.com/TerrorJack/a3128331031377a38d50912b0eab609c\">https://gist.github.com/TerrorJack/a3128331031377a38d50912b0eab609c</a></p>\n</blockquote>\n<p>you should use large enough --max-memory.<br>\neg.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">spacetanuki</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"mf\">19.5</span><span class=\"n\">g0236e959edbc</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wall</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">pthread</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Wl</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">import</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"o\">--</span><span class=\"n\">max</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"o\">=</span><span class=\"mi\">655360</span>\n<span class=\"n\">spacetanuki</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">git</span><span class=\"o\">/</span><span class=\"n\">toywasm</span><span class=\"o\">/</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">thread</span><span class=\"o\">/</span><span class=\"n\">toywasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"n\">spacetanuki</span><span class=\"o\">%</span>\n</code></pre></div>",
        "id": 326722498,
        "sender_full_name": "YAMAMOTO Takashi",
        "timestamp": 1675911719
    },
    {
        "content": "<p>Yeah, that's it... wow, that was unintuitive. I just was taking a look at <span class=\"user-mention\" data-user-id=\"408159\">@Cheng Shao</span>'s report today and I can confirm that adding <code>--max-memory=655360</code> to the linker flags makes everything start working again.</p>",
        "id": 327119299,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1676053661
    },
    {
        "content": "<p>I guess non-PoC code would have error-checking like the following:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">int</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pthread_create</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">thread1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">NULL</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kr\">thread</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">thr</span><span class=\"p\">);</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"failed to spawn: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Which prints the following for me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">spawn</span>: <span class=\"nc\">Resource</span><span class=\"w\"> </span><span class=\"n\">temporarily</span><span class=\"w\"> </span><span class=\"n\">unavailable</span>\n</code></pre></div>",
        "id": 327120247,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1676053924
    }
]