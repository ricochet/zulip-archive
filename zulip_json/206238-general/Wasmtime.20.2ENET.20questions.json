[
    {
        "content": "<p>Hi,  recently I have started working with wasmtime in .NET, I have very little experience with  C# however, and it has been hard for to to understand the docs., so I am a bit confused on how this package works here. I have a WebAssembly module that simply creates a file and writes to it (originally made in rust), and I managed to use it in wasmtime go,  py, and rust.  What I am trying to do is to reproduce this Go code in .NET: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">dir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ioutil</span><span class=\"p\">.</span><span class=\"n\">TempDir</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"out\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">defer</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">RemoveAll</span><span class=\"p\">(</span><span class=\"n\">dir</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stdoutPath</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">filepath</span><span class=\"p\">.</span><span class=\"n\">Join</span><span class=\"p\">(</span><span class=\"n\">dir</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"stdout\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">engine</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">NewEngine</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">NewStore</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">NewLinker</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// configure WASI imports to write stdout into a file.</span>\n<span class=\"w\">    </span><span class=\"n\">wasiConfig</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">NewWasiConfig</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">wasiConfig</span><span class=\"p\">.</span><span class=\"n\">SetStdoutFile</span><span class=\"p\">(</span><span class=\"n\">stdoutPath</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// pass access to this folder directory to the Wasm module</span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasiConfig</span><span class=\"p\">.</span><span class=\"n\">PreopenDir</span><span class=\"p\">(</span><span class=\"s\">\"./data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\".\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// set the version to the same as in the module.</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">NewWasiInstance</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasiConfig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// link WASI</span>\n<span class=\"w\">    </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">DefineWasi</span><span class=\"p\">(</span><span class=\"n\">wasi</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// create the WebAssembly-module</span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">NewModuleFromFile</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"../wasm_module/write.wasm\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">in</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">GetExport</span><span class=\"p\">(</span><span class=\"s\">\"_initialize\"</span><span class=\"p\">).</span><span class=\"n\">Func</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">.</span><span class=\"n\">Call</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">panic</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So far I have this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">             </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">//using var linker = new Link  ..there is no linker?</span>\n\n<span class=\"w\">            </span><span class=\"n\">WasiConfiguration</span><span class=\"w\"> </span><span class=\"n\">wasiConfiguration</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">WasiConfiguration</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">wasiConfiguration</span><span class=\"p\">.</span><span class=\"n\">WithPreopenedDirectory</span><span class=\"p\">(</span><span class=\"s\">\"./data\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">//using var wasi = Wasi  .. no wasi?</span>\n\n<span class=\"w\">            </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">.</span><span class=\"n\">FromFile</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"write.wasm\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Host</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineWasi</span><span class=\"p\">(</span><span class=\"s\">\"wasi1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasiConfiguration</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"n\">dynamic</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">_initialize</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But there are some things that I don't understand, like how do I export a function correctly? In rust there were like 3 ways to do it,  do I just do it the way I did it here in the last line? </p>\n<p>Am I setting the pre-opened directory correctly?</p>",
        "id": 226636382,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613556689
    },
    {
        "content": "<p>Alright, I was mostly doing right, I just wrote the version of wasi wrong, should have been \"wasi_snapshot_preview\", is there a way to store a function in a variable?, instead of just calling it. The point is that I need store those functions in a class</p>",
        "id": 226643320,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613561179
    },
    {
        "content": "<p>I am stuck at the utilization of memory, how do this <code>mem := instance.GetExport(\"memory\").Memory()</code>in C#?</p>",
        "id": 226688430,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613581036
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"381147\">@AndreaEsposit</span> . Rather than casting the <code>Instance</code> to <code>dynamic</code> upon assignment, you can keep it an <code>Instance</code> and use <code>instance.Memories</code> to get the memory (either by ordinal or using something like a LINQ query to find by name).</p>\n<p>Something like this perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">Wasmtime</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">Example</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Program</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">engine</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Engine</span><span class=\"p\">();</span>\n            <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">module</span> <span class=\"p\">=</span> <span class=\"n\">Module</span><span class=\"p\">.</span><span class=\"n\">FromFile</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"s\">\"write.wasm\"</span><span class=\"p\">);</span>\n\n            <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">store</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Store</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n            <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">host</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Host</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n            <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">DefineWasi</span><span class=\"p\">(</span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"n\">WasiConfiguration</span><span class=\"p\">().</span><span class=\"n\">WithPreopenedDirectory</span><span class=\"p\">(</span><span class=\"s\">\"./data\"</span><span class=\"p\">,</span> <span class=\"s\">\".\"</span><span class=\"p\">));</span>\n\n            <span class=\"k\">using</span> <span class=\"nn\">var</span> <span class=\"n\">instance</span> <span class=\"p\">=</span> <span class=\"n\">host</span><span class=\"p\">.</span><span class=\"n\">Instantiate</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">);</span>\n            <span class=\"p\">((</span><span class=\"kt\">dynamic</span><span class=\"p\">)</span><span class=\"n\">instance</span><span class=\"p\">).</span><span class=\"n\">_initialize</span><span class=\"p\">();</span>\n            <span class=\"p\">((</span><span class=\"kt\">dynamic</span><span class=\"p\">)</span><span class=\"n\">instance</span><span class=\"p\">).</span><span class=\"n\">write</span><span class=\"p\">();</span>\n\n            <span class=\"kt\">var</span> <span class=\"n\">memory</span> <span class=\"p\">=</span> <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">Memories</span><span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"p\">=&gt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"p\">==</span> <span class=\"s\">\"memory\"</span><span class=\"p\">).</span><span class=\"n\">First</span><span class=\"p\">();</span>\n            <span class=\"p\">...</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 226696819,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613584206
    },
    {
        "content": "<p>Likewise, <code>instance.Memories[0]</code> would return the same memory by ordinal (assuming there's just one).</p>",
        "id": 226696884,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613584236
    },
    {
        "content": "<p>by storing a function in a variable, do you mean passing a function reference to Wasm?</p>",
        "id": 226697049,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613584310
    },
    {
        "content": "<p>Oh I think you mean just getting the function rather than using <code>dynamic</code> (which is a shortcut for looking up the function and invoking it).</p>\n<div class=\"codehilite\" data-code-language=\"C#\"><pre><span></span><code><span class=\"kt\">var</span> <span class=\"n\">write</span> <span class=\"p\">=</span> <span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">Functions</span><span class=\"p\">.</span><span class=\"n\">Where</span><span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"p\">=&gt;</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">Name</span> <span class=\"p\">==</span> <span class=\"s\">\"write\"</span><span class=\"p\">).</span><span class=\"n\">First</span><span class=\"p\">();</span>\n<span class=\"n\">write</span><span class=\"p\">.</span><span class=\"n\">Invoke</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 226697680,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613584582
    },
    {
        "content": "<p>Oh I see, thank you very much, I was really struggling with this. Do  I need to specify what types the function is taking? or all type of functions are can be defined like that?</p>",
        "id": 226739345,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613601714
    },
    {
        "content": "<p>Are you trying to define a host function or do you want to validate that the <code>write</code> export of the instance has the expected parameters and results?</p>",
        "id": 226739583,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613601873
    },
    {
        "content": "<p>if the latter, the <code>Invoke</code> method will validate what is passed to it matches the function's signature, but you can also do it in the above <code>Where</code> call by checking the <code>Parameters</code> and <code>Results</code> properties of the <code>ExternFunction</code> (see docs here: <a href=\"https://bytecodealliance.github.io/wasmtime-dotnet/api/Wasmtime.Externs.ExternFunction.html\">https://bytecodealliance.github.io/wasmtime-dotnet/api/Wasmtime.Externs.ExternFunction.html</a>)</p>",
        "id": 226739727,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613601974
    },
    {
        "content": "<p>if the former, you'd use <code>Host.DefineFunction</code> (of which there are a ton of overloads, see: <a href=\"https://bytecodealliance.github.io/wasmtime-dotnet/api/Wasmtime.Host.html\">https://bytecodealliance.github.io/wasmtime-dotnet/api/Wasmtime.Host.html</a>) which has a  bunch of reflection magic to get the appropriate Wasm function type of the delegate passed to it.</p>",
        "id": 226739848,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613602075
    },
    {
        "content": "<p>Oh, brilliant, thank you for the good explanations, much appreciated. I think I got everything you said, and I guess that to write a byte array to memory I will just have to use  the <code>WriteByte</code> function in a loop. (that is at least how I did it in Go)</p>",
        "id": 226743030,
        "sender_full_name": "AndreaEsposit",
        "timestamp": 1613603975
    },
    {
        "content": "<p>You can slice <code>Memory.Span</code> and use <code>Array.CopyTo</code> for copying without iterating by byte (ends up being a memcpy under the covers)</p>",
        "id": 226746483,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613606265
    },
    {
        "content": "<p>e.g. <code>bytes.CopyTo(memory.Span[offset..])</code></p>",
        "id": 226746803,
        "sender_full_name": "Peter Huene",
        "timestamp": 1613606457
    }
]