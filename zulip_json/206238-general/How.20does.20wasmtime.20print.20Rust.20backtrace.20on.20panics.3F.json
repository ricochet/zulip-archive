[
    {
        "content": "<p>I'm surprised that if I run a wasm32-wasi Rust program with wasmtime it prints the Rust backtrace (of the Wasm program, not the host) on panic. How does wasmtime implement this? I'd expect it to understand Rust stack implementation on Wasm target for this.. is this the case? Or is it Rust's runtime/core/std that prints the backtrace? If so, why is it printed even when I don't pass <code>RUST_BACKTRACE=1</code>? Example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">wasm_backtrace</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">omer</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">wasm_backtrace</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.34</span><span class=\"n\">s</span><span class=\"w\"></span>\n\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasm_backtrace</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">explicit</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">2</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasm_backtrace</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">unreachable</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n         <span class=\"mi\">0</span>: <span class=\"mh\">0x6c34</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__rust_start_panic</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">1</span>: <span class=\"mh\">0x68df</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">rust_panic</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">2</span>: <span class=\"mh\">0x65b9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">rust_panic_with_hook</span>::<span class=\"n\">h2345fb0909b53e12</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">3</span>: <span class=\"mh\">0x10c7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h86678b4e45fbd7fa</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1ccc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_end_short_backtrace</span>::<span class=\"n\">h8c7fe73fc6112e0e</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">5</span>:  <span class=\"mh\">0xfb5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"n\">begin_panic</span>::<span class=\"n\">h5a83b3bb18195122</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">6</span>: <span class=\"mh\">0x1fed</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">wasm_backtrace</span>::<span class=\"n\">g</span>::<span class=\"n\">hc5f9230a6e65a92c</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">7</span>: <span class=\"mh\">0x1fbf</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">wasm_backtrace</span>::<span class=\"n\">f</span>::<span class=\"n\">h80747d9c660ceee4</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">8</span>: <span class=\"mh\">0x1fb5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">wasm_backtrace</span>::<span class=\"n\">main</span>::<span class=\"n\">h9fc5985544d26b7b</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">9</span>: <span class=\"mh\">0x1bee</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span>::<span class=\"n\">hfd088d5879747b81</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">10</span>: <span class=\"mh\">0x1d03</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h2d7439e32125816a</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">11</span>:  <span class=\"mh\">0x4a5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">hc9be9987846fa67a</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">12</span>: <span class=\"mh\">0x69f0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"n\">h260050c92cd470af</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">13</span>:  <span class=\"mh\">0x457</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"n\">hd15e4b73e676a12b</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">14</span>: <span class=\"mh\">0x200b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"mi\">15</span>:  <span class=\"mh\">0x397</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219467794,
        "sender_full_name": "osa1",
        "timestamp": 1607605081
    },
    {
        "content": "<p>It is generated and printed by wasmtime. During the trap, cranelift gets entire backtrace (see backtrace crate) and filters out only wasm addresses, wasmtime just prints out wasm portion, but capable of getting entire stack including host.</p>",
        "id": 219469951,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1607606287
    },
    {
        "content": "<blockquote>\n<p>cranelift gets entire backtrace (see backtrace crate)</p>\n</blockquote>\n<p>How is this done exactly? Does wasmtime/cranelift know about Rust's stack implementation in Wasm linear memory?</p>",
        "id": 219474929,
        "sender_full_name": "osa1",
        "timestamp": 1607608949
    },
    {
        "content": "<p>So <code>backtrace</code> (the crate) can walk Rust stack.. but for example in my example wasmtime needs to be aware that the Wasm program is Rust and call that crate to obtain the stack trace, no?</p>",
        "id": 219475077,
        "sender_full_name": "osa1",
        "timestamp": 1607609025
    },
    {
        "content": "<p>nope, the wasm program can be in C, and your will see similar trace but with C names</p>",
        "id": 219475389,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1607609159
    },
    {
        "content": "<p>So wasmtime understands C ABI on Wasm?</p>",
        "id": 219475501,
        "sender_full_name": "osa1",
        "timestamp": 1607609197
    },
    {
        "content": "<p>backtrace walk native stack not just rust</p>",
        "id": 219475558,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1607609221
    },
    {
        "content": "<p>it is more related with libunwind  works than C API</p>",
        "id": 219475829,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1607609338
    },
    {
        "content": "<p>OK thanks. I'll look at uses of the backtrace crate in wasmtime for details.</p>",
        "id": 219475864,
        "sender_full_name": "osa1",
        "timestamp": 1607609354
    },
    {
        "content": "<p>One more question: the backtrace in my example is obtained on Wasm trap instruction, right?</p>",
        "id": 219476072,
        "sender_full_name": "osa1",
        "timestamp": 1607609448
    },
    {
        "content": "<p>more exactly from <code>unreachable</code> (multiple instructions can trap for different reasons)</p>",
        "id": 219476167,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1607609490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> thanks, really helpful. Does wasmtime provide an API for getting the Wasm program's backtrace (using the <code>backtrace</code> crate or otherwise) when implementing a host function? As far as I understand host functions have access to <code>Caller</code> but it's not possible to get a backtrace from that type, right?</p>",
        "id": 219480059,
        "sender_full_name": "osa1",
        "timestamp": 1607611045
    },
    {
        "content": "<p><a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Trap.html\">https://docs.wasmtime.dev/api/wasmtime/struct.Trap.html</a> ?</p>",
        "id": 219480337,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1607611158
    },
    {
        "content": "<p>On a related note, I think we should probably default the module name to the filename sans <code>.wasm</code> so that backtraces aren't filled with <code>&lt;unknown&gt;</code>.</p>",
        "id": 219520610,
        "sender_full_name": "Peter Huene",
        "timestamp": 1607628062
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2495\">https://github.com/bytecodealliance/wasmtime/issues/2495</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2495\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2495\" title=\"Use a reasonable default for module names in Wasmtime backtraces · Issue #2495 · bytecodealliance/wasmtime\">Use a reasonable default for module names in Wasmtime backtraces · Issue #2495 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Repro Create a Rust wasm file that simply panics in main. Run the wasm with wasmtime foo.wasm Expected behavior As the module doesn&#39;t declare a module name, Wasmtime should provide a meaningful...</div></div></div>",
        "id": 219521692,
        "sender_full_name": "Peter Huene",
        "timestamp": 1607628367
    }
]