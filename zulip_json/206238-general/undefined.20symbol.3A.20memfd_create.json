[
    {
        "content": "<p>I'm trying to get some simple PDF functionality going with WASI. With some very small alterations, I was able to build <a href=\"https://github.com/cdmurph32/pdfio/tree/wasi\">pdfio</a>. Unfortunately, when I try to build my <a href=\"https://github.com/cdmurph32/pdf-text-example/blob/main/hello_world.c\">component</a>:<br>\n<code>/opt/wasi-sdk/bin/clang -target wasm32-wasip2 -mexec-model=reactor -D_WASI_EMULATED_MMAN -lwasi-emulated-mman pdf.c hello_world.c pdf_component_type.o libz.a -lpdfio -o hello_world.wasm</code><br>\nI get this error:<br>\n<code>wasm-ld: error: /tmp/hello_world-ccb71f.o: undefined symbol: memfd_create</code><br>\nI'm using the latest wasi-sdk DEB. Does it need to be rebuilt so that -D_WASI_EMULATED_MMAN will work? The PDF library is built around having a file descriptor.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cdmurph32/pdfio/tree/wasi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/40af4a0e5a37e5c852319d0248045634513a791c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353139613533626236386462623833343331636662373033383036356131666431666163613366333130656430373464343864646136346364343762393666612f63646d7572706833322f706466696f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cdmurph32/pdfio/tree/wasi\" title=\"GitHub - cdmurph32/pdfio at wasi\">GitHub - cdmurph32/pdfio at wasi</a></div><div class=\"message_embed_description\">PDFio is a simple C library for reading and writing PDF files. - GitHub - cdmurph32/pdfio at wasi</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cdmurph32/pdf-text-example/blob/main/hello_world.c\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a915f395abedef53d14cb4d02b05be2c34f15d3a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343566386262373565633663613332326663346335393638353232373538303235306434386138616234393039326663353765353264643139343232366631302f63646d7572706833322f7064662d746578742d6578616d706c65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cdmurph32/pdf-text-example/blob/main/hello_world.c\" title=\"pdf-text-example/hello_world.c at main · cdmurph32/pdf-text-example\">pdf-text-example/hello_world.c at main · cdmurph32/pdf-text-example</a></div><div class=\"message_embed_description\">Wasmcloud demo of a PDF processing service. Contribute to cdmurph32/pdf-text-example development by creating an account on GitHub.</div></div></div>",
        "id": 465435811,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724762261
    },
    {
        "content": "<p>memfd_create isn’t part of mman emulation, it’s a different sort of Linux interface - it creates an anonymous file that resides in ram as opposed to a filesystem, but behaves as a file. It has a lot of uses in Linux but typically it’s for creating memory shared between multiple processes, which won’t really be applicable in wasi.</p>",
        "id": 465476271,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724770612
    },
    {
        "content": "<p>From your repo it looks like you’re porting this library to wasi so I’d start by examining the way configure is determining whether memfd is available or not and trying to turn it off that way - since this library doesn’t indicate its Linux only it probably has ways to build without memfd</p>",
        "id": 465476736,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724770717
    },
    {
        "content": "<p>The PDF library needs a filehandle and I have the PDF in memory. I haven't written anything in C since 2012, so I'm unsure how to give it a filehandle to the PDF.<br>\nThis is true of basically all PDF libraries. They were written to conserve memory for large PDFs, so they allocate small buffers and free them as needed.<br>\nIf memfd_create won't work, I'm open to anything else.</p>",
        "id": 465486642,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773311
    },
    {
        "content": "<p>Thanks for responding BTW</p>",
        "id": 465486751,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773330
    },
    {
        "content": "<p>ok, understood. in that case you may have to add your own memfd emulation to wasi-libc</p>",
        "id": 465486937,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773379
    },
    {
        "content": "<p>OK. I'll give it a shot. Thanks!</p>",
        "id": 465487121,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773427
    },
    {
        "content": "<p>memfd is a syscall because fds can be sent between linux processes, but since thats not the case in wasi it can be implemented in userland</p>",
        "id": 465487141,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773433
    },
    {
        "content": "<p>but before diving into that id try to understand what the library falls back on when memfd_create isnt available</p>",
        "id": 465487404,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773484
    },
    {
        "content": "<p>when you say you have the pdf in memory, is providing it via wasi filesystem an option?</p>",
        "id": 465487484,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773505
    },
    {
        "content": "<p>is it in the hosts memory or did you already move it to / create it in the guest linear memory</p>",
        "id": 465487550,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773521
    },
    {
        "content": "<p>if its in the hosts memory you could either write it to a real host filesystem tmp file, or swap out wasmtime-wasi's wasi-filesystem imports for a very limited in-memory fs. if the pdf was created/loaded in the guests memory, you could mount a tmpdir to wasi-filesystem, and write it to the file.</p>",
        "id": 465487910,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773613
    },
    {
        "content": "<p>It's being sent via a POST request. It's coming through <code>exports_wasi_http_incoming_handler_handle</code>. So it's already in memory.</p>",
        "id": 465488211,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773687
    },
    {
        "content": "<p>This is just a POC. At some point we could probably stream pages.</p>",
        "id": 465488458,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773761
    },
    {
        "content": "<p>ok, got it. well, your fastest path to a POC is to have a tmpdir in your preopens, write it to a file, and pass it to your pdf lib that way.</p>",
        "id": 465488598,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773799
    },
    {
        "content": "<p>OK. So use wasi-filesystem. Does wasmtime provide that out of the box?</p>",
        "id": 465488793,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773840
    },
    {
        "content": "<p>yeah definitely</p>",
        "id": 465488864,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773859
    },
    {
        "content": "<p>if you're using the cli, <code>--dir</code> will allow you to provide a host fs dir as a preopen</p>",
        "id": 465489006,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773896
    },
    {
        "content": "<p>if you wrote your own rust embedding the equivalent is in WasiCtxBuilder</p>",
        "id": 465489106,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724773920
    },
    {
        "content": "<p>OK. Thanks again.</p>",
        "id": 465489191,
        "sender_full_name": "Colin D Murphy",
        "timestamp": 1724773934
    }
]