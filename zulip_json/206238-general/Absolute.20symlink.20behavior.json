[
    {
        "content": "<p>Hey all, just stumbled upon <code>cap-std</code> - it looks great!<br>\nI have a use case that might be a bit unique.<br>\nI want to access paths as if I'm running from a specific process. Right now we do it by accessing the process' <code>/proc/{pid}/root</code> then <code>.join</code>ing the path.<br>\nWe now came across an issue where a path there contains an absolute symlink, which ofc leads us to our own root.<br>\nI would want the symlink to be resolved as if I'm chrooted there, is this possible using <code>cap-std</code>?</p>",
        "id": 306182339,
        "sender_full_name": "Aviram Hassan",
        "timestamp": 1666770567
    },
    {
        "content": "<p>okay, just tested it, I get permission denied.. any recommendation on another crate/api to use ?</p>",
        "id": 306190070,
        "sender_full_name": "Aviram Hassan",
        "timestamp": 1666773511
    },
    {
        "content": "<p>I don't know of any crates that do this.</p>",
        "id": 306688198,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1666971806
    },
    {
        "content": "<p>I have heard from other cap-std users that such a features might be useful, though, and have thought a bit about how it might work. I expect it would look like a new <code>RootDir</code> type, that works like <code>Dir</code> except that it would support absolute paths by resolving them relative to the base.</p>",
        "id": 306688268,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1666971826
    },
    {
        "content": "<p>it might need to be more complex, <code>/proc/pid/root</code> is not quite a normal symlink, since when traversing it you can see stuff like mounts that might not be in the same namespace as you</p>",
        "id": 312602613,
        "sender_full_name": "Charlie Barto",
        "timestamp": 1669633570
    }
]