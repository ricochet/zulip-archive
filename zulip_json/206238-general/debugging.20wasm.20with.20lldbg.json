[
    {
        "content": "<p>&lt;&gt;&lt;&gt; lldbg update :</p>\n<p><a href=\"https://github.com/adv-sw/lldbg\">https://github.com/adv-sw/lldbg</a></p>\n<p>IDE coming along nicely, lldb won't step into wasm c++ or identify in scope globals. Unsure why.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/lldbg\" style=\"background-image: url(https://opengraph.githubassets.com/34766ade6d7969353b9334d376a090582c9ddd325b4f4ce265570c128c865cf9/adv-sw/lldbg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/lldbg\" title=\"GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.\">GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.</a></div><div class=\"message_embed_description\">A lightweight native GUI for LLDB. Contribute to adv-sw/lldbg development by creating an account on GitHub.</div></div></div>",
        "id": 255603489,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633019181
    },
    {
        "content": "<p>Do you guys do anything with the name mangling which is different on Windows than from Linux ? Maybe it's that.</p>",
        "id": 255605822,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633020019
    },
    {
        "content": "<p>seems to be relative path issue. must start debugger from correct directory for some symbols to resolve. doh.</p>",
        "id": 255715805,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633080791
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/NJaDiuqBpBZFIUYfg7sk29tC/now.png\">now.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/NJaDiuqBpBZFIUYfg7sk29tC/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/NJaDiuqBpBZFIUYfg7sk29tC/now.png\"></a></div><p>figured previous out - was relative path issue. next up : wasm class instances are obscured.</p>\n<p>note wrapper around App &amp; its class members opaque behind __ptr.</p>\n<p>can we do better ?</p>\n<p>does rust have the same issue ?</p>",
        "id": 255726181,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633086339
    },
    {
        "content": "<p>seems related to this : <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\">https://github.com/bytecodealliance/wasmtime/issues/1896</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\" style=\"background-image: url(https://opengraph.githubassets.com/4270f0071d8b0aa323d461323ca081d82fbd64d07a5b815fbc8f16a8902576a3/bytecodealliance/wasmtime/issues/1896)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1896\" title=\"Problem with debugging wasm module compiled from C++ · Issue #1896 · bytecodealliance/wasmtime\">Problem with debugging wasm module compiled from C++ · Issue #1896 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hi, I&#39;m trying to use wasmtime&#39;s debug support. I followed the simple demo from #1613, and it works as expected. But when I try to debug a slightly more complex C++ program, there&#39;s som...</div></div></div>",
        "id": 255733152,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633090173
    },
    {
        "content": "<p>from yury: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" style=\"background-image: url(https://opengraph.githubassets.com/2471f11f2cf3dd68ea655c05db618a45ebd914ac12dcfa1380b0a78279b9353e/bytecodealliance/wasmtime/pull/1482)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"Utility methods for artificial debug types in the generated DWARF by yurydelendik · Pull Request #1482 · bytecodealliance/wasmtime\">Utility methods for artificial debug types in the generated DWARF by yurydelendik · Pull Request #1482 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, artificial &quot;wrapper&quot; types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function&#39;s vmctx is needed. T...</div></div></div>",
        "id": 255753128,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633098612
    },
    {
        "content": "<p>once I get my head around this, as we have custom lldb front end, hopefully can hide all that away.</p>",
        "id": 255753225,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633098664
    },
    {
        "content": "<p>got it, I think ... next to see if that can be folded away. <a href=\"/user_uploads/15107/74FlTyiEkonJ7zzk5PXtCxv5/now.png\">now.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/74FlTyiEkonJ7zzk5PXtCxv5/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/74FlTyiEkonJ7zzk5PXtCxv5/now.png\"></a></div>",
        "id": 255774834,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633107393
    },
    {
        "content": "<p>lldbg update : pp command used to dereference wasmtime pointers added.</p>",
        "id": 255777637,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633108505
    },
    {
        "content": "<p>next up automating this. provided alias expands as follows :</p>\n<p>p __vmctx-&gt;set(), *thing</p>\n<p>unsure what that means :)  </p>\n<p>you're calling that built in function with the sandbox pointer &amp; it's returning diagnostics as to what's at that address, or its calculating a system memory address which lldb then uses to call up what's there ?</p>",
        "id": 255859875,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633170035
    },
    {
        "content": "<p>getting there with a little help from lldb guys</p>\n<p>p __vmctx-&gt;set()</p>\n<p>binds * operator to all wasmtime pointers in current stack frame</p>\n<p>p *thing</p>\n<p>calls that operator you just injected, returning regular memory pointer, which lldb then looks up ?</p>",
        "id": 255869438,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633179407
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/-0fMWlZDWYUwJegU-Fac5cgD/now.png\">now.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/-0fMWlZDWYUwJegU-Fac5cgD/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/-0fMWlZDWYUwJegU-Fac5cgD/now.png\"></a></div><p>Web Assembly pointer demangled &amp; presented as expected in debugger.</p>\n<p>Still to do - dereferencing of that.</p>",
        "id": 255875049,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633184912
    },
    {
        "content": "<p>almost sane now :)</p>\n<p>added wasm filtering  of things regular users won't need to see &amp; demangle / lookup of wasmtime pointers to their actual equivalents.</p>\n<p>basic testing thus far so might still be refinements required but fairly pleased with that.</p>\n<p>the wasm filtering can be disabled/enabled as a compile define option.</p>\n<p><a href=\"/user_uploads/15107/oSyRpYtdvJn5G89vjp62UoaS/now.png\">now.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/oSyRpYtdvJn5G89vjp62UoaS/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/oSyRpYtdvJn5G89vjp62UoaS/now.png\"></a></div>",
        "id": 255886212,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633196490
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/bNxk5s3h_PawdC_vdV-UJhiu/now.png\">now.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/bNxk5s3h_PawdC_vdV-UJhiu/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/bNxk5s3h_PawdC_vdV-UJhiu/now.png\"></a></div><p>current issues :</p>\n<p>__app static global not coming thru.<br>\n\"this\" not populated properly.</p>\n<p>happy to do what I can to resolve as need this production quality.</p>\n<p>so I suppose I need to take a look at what the dwarf generate thing is doing.</p>\n<p>if anyone can point me at it, that'd be appreciated.</p>",
        "id": 255940408,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633255663
    },
    {
        "content": "<p>repro: <a href=\"http://advance-software.com/misc/test.zip\">http://advance-software.com/misc/test.zip</a></p>\n<p>getting this out : </p>\n<p>warning: `this' is not accessible (substituting 0)</p>\n<p>unsure where that's coming from.</p>",
        "id": 256078587,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633361615
    },
    {
        "content": "<p>put breakpoint on m_i = i; in constructor in test.cpp</p>\n<p>note \"this\" empty - either lldbg to observe directly or lldb  pp *this after configuring the macro.</p>",
        "id": 256078833,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633361694
    },
    {
        "content": "<p>will need very recent wasmtime if reproducing on windows for jit debugging to work. trunk is fine, built this morning.</p>",
        "id": 256080054,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633362133
    },
    {
        "content": "<p>suspect we can repro on linux too, but haven't tested that yet.</p>",
        "id": 256080148,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633362168
    },
    {
        "content": "<p>oh yeah &amp; need lldb patching for jit to work on windows too coz it's broken in their tree &amp; they won't accept patch without a test I haven't got time to put together.</p>",
        "id": 256080540,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633362323
    },
    {
        "content": "<p>suspect this can be resolved linux to avoid lldb jit broken windows for those who can't be bothered patching &amp; building their own llvm tree.</p>",
        "id": 256080715,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633362393
    },
    {
        "content": "<p>windows lldb patch here to fix up jit : <a href=\"https://reviews.llvm.org/D110066\">https://reviews.llvm.org/D110066</a></p>",
        "id": 256080899,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633362476
    },
    {
        "content": "<p>if this all resolves, I'll put that lldb test together for them. grumble grumble :)</p>",
        "id": 256085213,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633364007
    },
    {
        "content": "<p>even simpler repro : <a href=\"http://advance-software.com/misc/test.zip\">http://advance-software.com/misc/test.zip</a></p>\n<p>removed wasi requirement. test.cpp in there is as simple as it gets. breakpoint in constructor, this not populated as expected.</p>",
        "id": 256101378,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633369694
    },
    {
        "content": "<p>confirmed linux (ubuntu).</p>\n<p>repro updated: <a href=\"http://advance-software.com/misc/test.zip\">http://advance-software.com/misc/test.zip</a></p>\n<p><a href=\"http://make_t.sh\">make_t.sh</a><br>\n<a href=\"http://debug.sh\">debug.sh</a></p>\n<p>change <a href=\"http://debug.sh\">debug.sh</a> lldbg to lldb to skip gui if desired.</p>\n<p>... but lldbg confirmed working linux. pain free build. binary needs to be in your path.</p>",
        "id": 256119782,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633376475
    },
    {
        "content": "<p><a href=\"https://github.com/adv-sw/lldbg\">https://github.com/adv-sw/lldbg</a></p>\n<p>pull <br>\ncmake .<br>\nmake</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/adv-sw/lldbg\" style=\"background-image: url(https://opengraph.githubassets.com/61c474b34a55e3c51ad3630748664d912f030e9e20ef4661e6557b067076784b/adv-sw/lldbg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/adv-sw/lldbg\" title=\"GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.\">GitHub - adv-sw/lldbg: A lightweight native GUI for LLDB.</a></div><div class=\"message_embed_description\">A lightweight native GUI for LLDB. Contribute to adv-sw/lldbg development by creating an account on GitHub.</div></div></div>",
        "id": 256119959,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633376543
    },
    {
        "content": "<p>set WASI_SDK in <a href=\"http://make_t.sh\">make_t.sh</a>  to where you have it. that's it. breakpoint in constructor. inspect this.</p>",
        "id": 256120271,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633376693
    },
    {
        "content": "<p>tested native compile on linux to verify its not lldbg gui or lldb API messing up. works as expected, this deferences properly. so its a wasmtime issue. hence will file in issues on github so we can track.</p>",
        "id": 256241858,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633439377
    },
    {
        "content": "<p>effectively a production stop c++ wasm issue. yeah you can get around not being able to inspect this in a debugger but its not something you'd want to take forward.</p>\n<p>also had issue with static globals with double underscore being absent. that needs fixing too.</p>\n<p>I'll do it once I figure out where the code is though rust noob &amp; this is advanced work.</p>",
        "id": 256242804,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633439728
    },
    {
        "content": "<p>surprised by the silence - anyone able to reproduce ?</p>",
        "id": 256242961,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633439780
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/1mPZfRMpSrQS7tIg_FS-PP_E/now.png\">now.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/1mPZfRMpSrQS7tIg_FS-PP_E/now.png\" title=\"now.png\"><img src=\"/user_uploads/15107/1mPZfRMpSrQS7tIg_FS-PP_E/now.png\"></a></div><p>linux repro.</p>",
        "id": 256243247,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633439886
    },
    {
        "content": "<p>so, this is what I need to get my head around ?</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/crates/cranelift/src/debug/transform\">https://github.com/bytecodealliance/wasmtime/tree/main/crates/cranelift/src/debug/transform</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/main/crates/cranelift/src/debug/transform\" style=\"background-image: url(https://opengraph.githubassets.com/ad66570ef8b5b1009a1f710e905cda97d52e2eb96516dfadd8ff21d18c9efc05/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/crates/cranelift/src/debug/transform\" title=\"wasmtime/crates/cranelift/src/debug/transform at main · bytecodealliance/wasmtime\">wasmtime/crates/cranelift/src/debug/transform at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/crates/cranelift/src/debug/transform at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 256246419,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633441098
    },
    {
        "content": "<p>when I said I'll fix it, that of course means input &amp; guidance welcome as I've never touched this stuff before :)</p>",
        "id": 256246598,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633441186
    },
    {
        "content": "<p>that's some scary code. no specific references to \"this\"</p>",
        "id": 256249592,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633442251
    },
    {
        "content": "<p>think I file this in cranelift not wasmtime but happy to accept direction.</p>",
        "id": 256251367,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633442872
    },
    {
        "content": "<p>test updated: have make_native &amp; make_wasm build scripts &amp; dbg_native &amp; debug_wasm run scripts.<br>\nessentially the same - just a tidy.</p>",
        "id": 256252264,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633443151
    },
    {
        "content": "<p><a href=\"http://advance-software.com/misc/test.zip\">advance-software.com/misc/test.zip</a></p>",
        "id": 256252319,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633443174
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3419\">https://github.com/bytecodealliance/wasmtime/issues/3419</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3419\" style=\"background-image: url(https://opengraph.githubassets.com/cd3c454b0ac2152dd443f92cdc30f084caddbada0096391c31a89e423c5f9cf7/bytecodealliance/wasmtime/issues/3419)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3419\" title=\"Cranelift: &quot;this&quot; not populated correctly during debug session. · Issue #3419 · bytecodealliance/wasmtime\">Cranelift: \"this\" not populated correctly during debug session. · Issue #3419 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Unzip test case. On Linux : Run make_wasm.sh to build Optional lldbg debugging front end - tested linux &amp; windows : https://github.com/adv-sw/lldbg Modify dbg_wasm.sh to run under lldb direct i...</div></div></div>",
        "id": 256253858,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633443708
    },
    {
        "content": "<p>seem to remember your custom clang has its own weird flag to turn optimizations off. can't seem to find that.</p>",
        "id": 256269138,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633448570
    },
    {
        "content": "<p>should I be using that or llvm trunk clang ? perhaps that's an irrelevant aside. don't understand problem yet.</p>",
        "id": 256270762,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633449183
    },
    {
        "content": "<p>what version of dwarf are you using plz</p>",
        "id": 256271139,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633449308
    },
    {
        "content": "<p>I'm starting at zero with this, generating debug info isn't something I've ever done before.</p>",
        "id": 256271919,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633449593
    },
    {
        "content": "<p>I ran a dwarfdump on native &amp; wasm from ubuntu. </p>\n<p>6407  test.d<br>\n3841 test.wasm.d</p>\n<p>wasm dwarfdump half the size of native. have no idea if this is red herring or the issue, just learning my way around.</p>",
        "id": 256274211,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633450357
    },
    {
        "content": "<p>that's my first reading of a dwarfdump, so take this as noob input - both look correct. I can see this defined in constructor &amp; the connectivity to its class definition. so the dwarf data knows what it is. what's weird is you don't seem to do anything special with 'this' so I wonder where its failing.</p>",
        "id": 256277563,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633451719
    },
    {
        "content": "<p>maybe lldb is blocking some reserved words resolving in their gdb/jit interface for some reason. might look there for clues. I can at least inspect what you're sending.</p>",
        "id": 256277944,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633451869
    },
    {
        "content": "<p>without gui in the way :</p>\n<p>lldb -- wasmtime -g  g:\\dev\\test\\test.wasm<br>\n(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-g\" \"g:\\\\dev\\\\test\\\\test.wasm\"<br>\n(lldb) b test.cpp:7<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 13564 launched: 'G:\\dev\\test\\wasmtime.exe' (x86_64)<br>\n1 location added to breakpoint 1<br>\nProcess 13564 stopped</p>\n<ul>\n<li>thread #1, stop reason = breakpoint 1.1<br>\n    frame #0: 0x000001efef7614a2 JIT(0x1eff1418690)<code>Thing::Thing(this=(__ptr = 131088), i=5) at test.cpp:7:13\n   4    public:\n   5       Thing(int i)\n   6       {\n-&gt; 7          m_i = i;\n   8       }\n   9\n   10      int m_i;\n(lldb) command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'\n(lldb) pp *this\nwarning: </code>this' is not accessible (substituting 0)<br>\n(lldb) error: Couldn't apply expression side effects : Couldn't dematerialize a result variable: couldn't read its memory<br>\n(lldb)</li>\n</ul>",
        "id": 256383854,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633513398
    },
    {
        "content": "<p>tried gdb instead of lldb ... progress I think ... it lets us access \"this\" ... however doesn't seem to like __vmctx-&gt;set() so can't decode.</p>\n<p>Thread 1 \"wasmtime\" hit Breakpoint 1, Thing::Thing (this=..., i=5) at ./test.cpp:8<br>\n8         m_i = i; <br>\n(gdb) info locals<br>\n__vmctx = 0x5555560e53c0<br>\n(gdb) p __vmctx-&gt;set()<br>\nAborted (core dumped)<br>\nx@dev:~/dev/test$ gdb --args wasmtime -g ./test.wasm<br>\nReading symbols from wasmtime...<br>\n(gdb) b test.cpp:7<br>\nNo source file named test.cpp.<br>\nMake breakpoint pending on future shared library load? (y or [n]) y<br>\nBreakpoint 1 (test.cpp:7) pending.<br>\n(gdb) r<br>\nStarting program: /home/x/dev/tools/wasmtime -g ./test.wasm<br>\nThread 1 \"wasmtime\" hit Breakpoint 1, Thing::Thing (this=..., i=5) at ./test.cpp:8<br>\n8         m_i = i; <br>\n(gdb) p this<br>\n$1 = {__ptr = 67216}</p>",
        "id": 256388122,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633515691
    },
    {
        "content": "<p>not ultimately wanting to end up at gdb so think I stop there. it shows us (I think) wasmtime is presenting \"this\" properly &amp; hence inability to access is an lldb bug.</p>",
        "id": 256389529,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633516460
    },
    {
        "content": "<p>oh what fun :)<br>\n<a href=\"https://discord.com/channels/636084430946959380/636732809708306432\">https://discord.com/channels/636084430946959380/636732809708306432</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://discord.com/channels/636084430946959380/636732809708306432\" style=\"background-image: url(https://discord.com/assets/652f40427e1f5186ad54836074898279.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://discord.com/channels/636084430946959380/636732809708306432\" title=\"Discord - A New Way to Chat with Friends &amp; Communities\">Discord - A New Way to Chat with Friends &amp; Communities</a></div><div class=\"message_embed_description\">Discord is the easiest way to communicate over voice, video, and text.  Chat, hang out, and stay close with your friends and communities.</div></div></div>",
        "id": 256411978,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633527358
    },
    {
        "content": "<p>ummm ... </p>\n<p>when I look at Thing *thing I get this :<br>\n(WebAssemblyPtrWrapper&lt;Thing&gt;) $0 = (__ptr = 131088)</p>\n<p>when I look at this, I don't get :<br>\n(WebAssemblyPtrWrapper&lt;this&gt;) $0 = (__ptr = 131088)</p>\n<p>perhaps we should for consistency. You're not this, you're a wrapped this. Debugger tweaks can hide that away but at the data sharing level, perhaps we should have consistency.</p>\n<p>that said, still working thru bug with lldb engineer. unsure at this stage if that's necessary or wild speculation on my part.</p>",
        "id": 256561459,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633606076
    },
    {
        "content": "<p>mumbling to self. not sure we can. <a href=\"http://confused.com\">confused.com</a></p>",
        "id": 256562021,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633606367
    },
    {
        "content": "<p>could we perhaps rename this to ^this (or some other) on the fly to work around issue where some debuggers (lldb) assumes reserved word \"this\" is a direct pointer ?</p>",
        "id": 256562716,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633606723
    },
    {
        "content": "<p>would love an experimental s/this/__this in dwarf emit :)</p>\n<p>discussion progressing here : <a href=\"https://discord.com/channels/636084430946959380/636732809708306432\">https://discord.com/channels/636084430946959380/636732809708306432</a></p>\n<p>getting into specifics beyond my knowledge, so feel free to dive in to correct/engage</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://discord.com/channels/636084430946959380/636732809708306432\" style=\"background-image: url(https://discord.com/assets/652f40427e1f5186ad54836074898279.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://discord.com/channels/636084430946959380/636732809708306432\" title=\"Discord - A New Way to Chat with Friends &amp; Communities\">Discord - A New Way to Chat with Friends &amp; Communities</a></div><div class=\"message_embed_description\">Discord is the easiest way to communicate over voice, video, and text.  Chat, hang out, and stay close with your friends and communities.</div></div></div>",
        "id": 256563763,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633607335
    },
    {
        "content": "<p>suggestion __vmctx-&gt;set() injects a \"this\" that points to the real address. would complement the __this mod above which would be the wrapped pointer.</p>",
        "id": 256570779,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633610794
    },
    {
        "content": "<p>in event stack frame has a __this, keep adding underscores until you find an available identifier (rare).</p>",
        "id": 256571930,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633611254
    },
    {
        "content": "<p><a href=\"http://simulate.rs\">simulate.rs</a>  generate_vars seems to be the emit, so lets see if I can fail my way thru a little rust :)</p>",
        "id": 256574668,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633612353
    },
    {
        "content": "<p>in generate_vars I want  :</p>\n<p>if (name_id == \"this\") <br>\n    name_id = \"__this\"</p>\n<p>.. but I don't rust. at all. not really wanting to as lots on &amp; I don't feel the need other than to patch this.</p>",
        "id": 256579238,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633614213
    },
    {
        "content": "<p>given I don't rust, thinking I'll have a go from the other end - see if I can get lldb to accept this without assumptions.<br>\nwouldn't hurt to try both approaches then we can select the most robust.</p>",
        "id": 256613244,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633626182
    },
    {
        "content": "<p>still thinking of running with ^this to avoid potential symbol clash. managed c++ uses this syntax too. unclear that's an issue.<br>\nunclear whether debugger will accept so we'd have to try it.</p>",
        "id": 256618887,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633628336
    },
    {
        "content": "<p>&amp; if debugger has issues, given I'm heading in there anyway, we can resolve them. hence we can close this as we please. </p>\n<p>I'm liking ^thing dereferencing to thing actual pointer.  Similarly ^this to this. When we send naked this, as its a genuine pointer, lldb won't barf without modifications being necessary.</p>\n<p>Thoughts welcome.</p>",
        "id": 256620335,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633628891
    },
    {
        "content": "<p>The issue is lldb in its current form expects 'this' and 'self' to be standard pointers. if they're not, it barfs.</p>",
        "id": 256631257,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633633129
    },
    {
        "content": "<p>gdb doesn't have this restriction, however whatever version is ubuntu mainline barfs on p __vmctx-&gt;set()<br>\nhence its not a workaround option unless anyone has the mood to fix that if its still an issue gdb trunk.</p>",
        "id": 256631754,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633633315
    },
    {
        "content": "<p>10.1 trying trunk now.</p>",
        "id": 256634162,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633634266
    },
    {
        "content": "<p>.</p>",
        "id": 256634723,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633634468
    },
    {
        "content": "<p>gdb trunk fails : <a href=\"https://pastebin.com/ztrK5g0p\">https://pastebin.com/ztrK5g0p</a></p>\n<p>stopping there as have lldb solution preference.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://pastebin.com/ztrK5g0p\" style=\"background-image: url(https://pastebin.com/i/facebook.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://pastebin.com/ztrK5g0p\" title=\"$ gdb --args wasmtime -g ./test.wasmGNU gdb (GDB) 12.0.50.20211007-gitCopyri - Pastebin.com\">$ gdb --args wasmtime -g ./test.wasmGNU gdb (GDB) 12.0.50.20211007-gitCopyri - Pastebin.com</a></div><div class=\"message_embed_description\">Pastebin.com is the number one paste tool since 2002. Pastebin is a website where you can store text online for a set period of time.</div></div></div>",
        "id": 256641421,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633637208
    },
    {
        "content": "<p>though it might be possible to mod  lldb to run with an 'invalid' this pointer, I'm not clear that's the way.<br>\nwasmtime dwarf can &amp; should send a resolved this pointer.<br>\nsandboxed this pointer can be sent as a special that debugger front end can merge so interface is intuitive &amp; you see the sandboxed pointer whilst presenting the naked pointer. hence I think  wasmtime bug. in rust code :(</p>\n<p>surprised at lack of assistance here guys, this is a core flaw. if you can't debug c++ effectively, you're a toy.</p>",
        "id": 256717902,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633688424
    },
    {
        "content": "<p>found following - likely an irrelevant aside, but anyway : <a href=\"https://reviews.llvm.org/D78801?id=261780\">https://reviews.llvm.org/D78801?id=261780</a></p>",
        "id": 256718614,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633688857
    },
    {
        "content": "<p>progress. weirdly, running <br>\n(lldb) fr v<br>\nfirst seems to resolve the matter.</p>\n<p>(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-g\" \".\\\\test.wasm\"<br>\n(lldb) b test.cpp:7<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) r<br>\nProcess 12588 launched: 'Z:\\dev\\wasm\\wasmtime\\target\\release\\wasmtime.exe' (x86_64)<br>\n1 location added to breakpoint 1<br>\nProcess 12588 stopped</p>\n<ul>\n<li>thread #1, stop reason = breakpoint 1.1<br>\n    frame #0: 0x000002acfef614a2 JIT(0x2acfd256e70)<code>Thing::Thing(this=(__ptr = 131088), i=5) at test.cpp:7:13\n   4    public:\n   5       Thing(int i)\n   6       {\n-&gt; 7          m_i = i;\n   8       }\n   9\n   10      int m_i;\n(lldb) p this\nwarning: </code>this' is not accessible (substituting 0). Couldn't load 'this' because its value couldn't be evaluated<br>\n(lldb) (Thing *) $0 = nullptr<br>\n(lldb) fr v<br>\n(WasmtimeVMContext *) __vmctx = 0x000002acfd209e50<br>\n(WebAssemblyPtrWrapper&lt;Thing&gt;) this = (__ptr = 131088)<br>\n(int) i = 5<br>\n(lldb) p this<br>\n(Thing *) $1 = 0x0000000000020010</li>\n</ul>",
        "id": 256722280,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633690952
    },
    {
        "content": "<p>experiment :</p>\n<p>Process 10565 stopped</p>\n<ul>\n<li>thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff7fa732c JIT(0x5555560f71f0)<code>Thing::Thing(this=(__ptr = 67216), i=5) at test.cpp:8:13\n   5    public:\n   6       Thing(int i) \n   7       { \n-&gt; 8          m_i = i; \n   9       }\n   10      \n   11      int m_i;\n(lldb) fr v this\n(WebAssemblyPtrWrapper&lt;Thing&gt;) this = (__ptr = 67216)\n(lldb) p __vmctx-&gt;set() \nwarning: </code>this' is not accessible (substituting 0)<br>\n(lldb) fr v *this<br>\nerror: not a pointer or reference type: (WebAssemblyPtrWrapper&lt;Thing&gt;) this<br>\n(lldb) </li>\n</ul>\n<p>we can get the sandbox pointer but not resolve it.</p>",
        "id": 256731462,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633695857
    },
    {
        "content": "<p>rust programmers be like not my problem :)</p>\n<p>... but it is coz if you can only use wasmtime effectively from rust, it ain't going to go far.</p>",
        "id": 256731605,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633695947
    },
    {
        "content": "<p>if we had a function that could accept a sandbox pointer &amp; return the real one, that'd maybe be enough. we can't evaluate on \"this\" without modding lldb as self/this are special cased.  fr v works where p fails bcoz it doesn't evaluate, just passes the value (I think), but we need an evaluate with current implementation to resolve.</p>",
        "id": 256732757,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633696563
    },
    {
        "content": "<p>still the issue of lldb not liking \"this\" in unexpected format which could bite in different scenarios.</p>",
        "id": 256733052,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633696733
    },
    {
        "content": "<p>so back to ^this or __this for sandboxed pointer. seems most robust solution without ripping debugger apart.</p>",
        "id": 256733107,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633696769
    },
    {
        "content": "<p>eval \"{auto tmp = this; *tmp; }\"</p>\n<p>or some such maybe. perhaps a workaround if we can avoid a direct eval of 'this'. better to fix properly, but whatever works.</p>",
        "id": 256755973,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633706422
    },
    {
        "content": "<p>&amp; who's to say a new reserved word used to evaluate current this isn't properly. a few options.</p>",
        "id": 256756958,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633706819
    },
    {
        "content": "<p>p __vmctx-&gt;this()</p>\n<p>? </p>\n<p>evaluating to resolved this pointer. for use on debuggers that require it.</p>",
        "id": 256757223,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633706928
    },
    {
        "content": "<p>or, preferable :</p>\n<p>this evaluates to resolved.</p>\n<p>p __vmctx-&gt;this()</p>\n<p>evaluates to sandbox pointer. that way, lldb gets a nice, lovely valid this pointer as it expects &amp; can thus provide full functionality.</p>\n<p>would be a change in behaviour so perhaps new -g:lldb flag to enable &amp; SDK equivalent.</p>",
        "id": 256757939,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633707235
    },
    {
        "content": "<p>other workarounds might include querying previous stack frame for what object's method is being presented - that's implicitly current this.<br>\nunsure if we can grab that. just an idea right now.</p>",
        "id": 256758869,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633707613
    },
    {
        "content": "<p>however if we're looking on previous stack frame, your __vmctx-&gt;set()  stack frame magic won't be set up properly so that one might not be possible, unless you were to maintain 2 stack frames. if we have to mod, not sure this is the way to go but an option. we'd only need one var of previous stack frame maintained.</p>",
        "id": 256760562,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633708326
    },
    {
        "content": "<p>... which amounts to __vmctx-&gt;this()</p>\n<p>however we get it, that's what we need. a bypass around asking lldb to evaluate this coz it can't coz its not a valid pointer.</p>",
        "id": 256760705,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633708403
    },
    {
        "content": "<p>we could mod lldb to be more flexible with its handling of this however I suspect that's non-trivial work &amp; no way of knowing if patch would be accepted so could end up with lldb divergence. hence I'm saying wasmtime issue. understood issue, resolvable.</p>\n<p>I'd complete the engineering but rust does my head in. I don't want to go there :)</p>\n<p>y'all crazy :)</p>",
        "id": 256761100,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633708570
    },
    {
        "content": "<p>have started getting following error :</p>\n<p>p __vmctx-&gt;set()<br>\nerror: Couldn't lookup symbols:<br>\n  set_vmctx_memory</p>\n<p>unsure why. currently running clean wasmtime trunk.</p>",
        "id": 256863861,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633779814
    },
    {
        "content": "<p>also running lldb trunk so issue could be anywhere. think I have lldb 12 &amp; some old wasmtime working but that's no good for development work.</p>",
        "id": 256864106,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633780043
    },
    {
        "content": "<p>windows working too following a recompile :) lldb 12.0.1 tested.</p>",
        "id": 256891961,
        "sender_full_name": "Steve Williams",
        "timestamp": 1633806811
    }
]