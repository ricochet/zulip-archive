[
    {
        "content": "<p>So I have this (maybe rather strange) use case of JITing only \"parts\" of some riscv(32) bytecode.</p>\n<p>For a bit of context, I run these instructions in a interpreter normally because I am generating proofs of correct execution which requires me to collect auxiliary information per cycle, however I also have an \"unconstrained\" mode, which runs the instructions without collecting this data, this is the part I want to JIT.</p>\n<p>For my use case, Im only given this bytecode, and I only want to JIT some parts of it that are \"sandwhiched\" say, between two placeholder opcodes.</p>\n<p>I think most of what i'm trying to do is clear to me, but one thing im having trouble fleshing out is the JALR instruction.</p>\n<p>My naive approach to solve this is to actually JIT the whole program, interpreting each instruction as a basic block, and basically implementing like a dynamic jump table at runtime.</p>\n<p>Im curious to gather feedback and see if anyone can help me think of a better approach to handling these dynamic jumps.</p>\n<p>Thank you in advance!</p>",
        "id": 494461699,
        "sender_full_name": "Nate",
        "timestamp": 1737159571
    },
    {
        "content": "<p>The classical way of handling indirect jumps in a dynamic binary translation (DBT) system like Valgrind, Pin or Dynamo (to give some keywords to search on!) is to have a big dispatch hashtable from entry-point PC to \"trace\" or \"block\" of jit'd code starting at that address. You then compile indirect jumps (or calls) into a sequence that looks up in that hashtable, does a jump to the equivalent native code if present, otherwise invokes the JIT compiler to generate new code (or escape to an interpreter or whatever)</p>",
        "id": 494467761,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737164087
    },
    {
        "content": "<p>It sounds like what you're wanting to do is a slightly more precomputed version of that where you handle every individual instruction as a potential entry point ahead of time; probably you'll have much better results if you do it on demand (if your environment permits true JIT), since relatively few instructions will be targets of indirect jumps/calls</p>",
        "id": 494467818,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737164139
    },
    {
        "content": "<p>Thanks for the response, lots of interesting info here.</p>\n<p>I think that last part is exactly what im looking to do. I think my next question is, once I do know my entrypoint, say at some pc=X,</p>\n<p>How much of the program do I start jitting from pc=X? Until I hit another indirect jump? </p>\n<p>Maybe im misunderstanding, but my understanding of what youre saying is that I should basically maintain a mapping, just in time, of pc -&gt; jitted function, but how do i share state between this?</p>",
        "id": 494468540,
        "sender_full_name": "Nate",
        "timestamp": 1737164730
    },
    {
        "content": "<p>And maybe for more clarity I will always be starting off in the interpreter, and then enter the JIT at some arbitrary PC</p>",
        "id": 494468640,
        "sender_full_name": "Nate",
        "timestamp": 1737164786
    },
    {
        "content": "<blockquote>\n<p>Maybe im misunderstanding, but my understanding of what youre saying is that I should basically maintain a mapping, just in time, of pc -&gt; jitted function, but how do i share state between this?</p>\n</blockquote>\n<p>Is it like I might pass in some pointer to my \"virtual registers\", ie some *mut [Value; 32] and pass this between jitted functions</p>",
        "id": 494468696,
        "sender_full_name": "Nate",
        "timestamp": 1737164846
    },
    {
        "content": "<p>Yes, exactly, typically you have a \"struct CPUState\" and within a jit'd block you can load and store to this, perhaps keeping values in registers (SSA values) until the end; and your interpreter operates on the same state.</p>",
        "id": 494469006,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737165106
    },
    {
        "content": "<p>How long to JIT, and whether you follow one path or both sides of a conditional, etc., is an interesting heuristic question that different systems answer differently</p>",
        "id": 494469062,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737165125
    },
    {
        "content": "<p>Basically your questions boil down to \"how do I design a dynamic binary translation system\" and I'd recommend reading at least the Dynamo paper (<a href=\"https://dl.acm.org/doi/pdf/10.1145/349299.349303\">https://dl.acm.org/doi/pdf/10.1145/349299.349303</a>) -- \"fragment cache\", \"trace selection\" and all the rest</p>",
        "id": 494469133,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737165186
    },
    {
        "content": "<p>Valgrind is a good open-source contemporary example of a system like this, and you may find it instructive to read their internal docs and source too</p>",
        "id": 494469154,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737165216
    },
    {
        "content": "<p>Awesome thank you very much!</p>",
        "id": 494469226,
        "sender_full_name": "Nate",
        "timestamp": 1737165264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> Last question for now would be which do you think is better for my registers, the stack operations vs the <code>*mut [Value; u32]</code> approach?</p>\n<p>Couldnt find much info on how cranelift treats/reasons about the stack assignments, are they persistent between functions from the same context?</p>",
        "id": 494544525,
        "sender_full_name": "Nate",
        "timestamp": 1737226402
    },
    {
        "content": "<p>Cranelift has stackslots but they are local to the current function; so if you need to store state that persists across different compiled instruction traces and your interpreter (I think you do, for CPU registers?) then you'll want to emit normal loads and stores to an array of values in memory</p>",
        "id": 494544927,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737226702
    }
]