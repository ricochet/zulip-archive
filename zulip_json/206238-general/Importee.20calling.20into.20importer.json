[
    {
        "content": "<p>I am thinking about a plugin system(-ish), where I’d want the runtime to invoke the plugins, but some plugins will also need to call stuff in the  runtime. However, Components don’t have higher-order functions, and the import graph is a DAG, so no cycles can be present. I also don’t think I can somehow shoehorn function pointers (passed as resources maybe?) would work, as I don’t think I can control how a language puts these functions into their tables and the tables won’t necessarily be shared... What is the expected/recommended pattern  for this kind of architecture?</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world runtime {\n  import plugin-a: interface {\n    do-a-thing: func() // This function wants to call `change_state`\n  }\n  // ... more plugins with the same interface ...\n  export main: func()\n  export change_state: func(state: u32)\n}\n</code></pre></div>",
        "id": 339871394,
        "sender_full_name": "Surma",
        "timestamp": 1678110217
    },
    {
        "content": "<p>I am not sure if this is the only way, but I did that by defining the worlds from the viewpoint of a plugin</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world plugin {\n    // these functions are from the host\n    import log: func(msg: string)\n    import error: func(msg: string)\n\n    //these are implemented in each plugin\n    export setup: func() -&gt; list&lt;u8&gt;\n    export handler: func(fname: string) -&gt; list&lt;u8&gt;\n    export help: func()\n}\n</code></pre></div>\n<p>as an example. Each of my plugins can use the log functions and each plugin exports setup, handler and help</p>",
        "id": 339882832,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1678112816
    },
    {
        "content": "<p>Another thing to remember is that the import graph is only a DAG for component <em>instances</em>. A component can appear multiple places in a path through the DAG as long as it is instantiated multiple times (doesn't share state)</p>",
        "id": 339889144,
        "sender_full_name": "Lann Martin",
        "timestamp": 1678114290
    },
    {
        "content": "<p>Hm, right, but I do explicitly want to share state <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 339892378,
        "sender_full_name": "Surma",
        "timestamp": 1678115075
    },
    {
        "content": "<p>In the simple example above, <code>do-a-thing</code> could return the next state. If it needs multiple state changes it could return a <code>option&lt;u32&gt;</code> and be called multiple times until it returns nothing</p>",
        "id": 339893823,
        "sender_full_name": "Lann Martin",
        "timestamp": 1678115413
    },
    {
        "content": "<p>That could be replaced by a <code>stream&lt;u32&gt;</code> once streams exist</p>",
        "id": 339893924,
        "sender_full_name": "Lann Martin",
        "timestamp": 1678115434
    },
    {
        "content": "<p>Yeah, polling is one way out of there I suppose. I do worry about the overhead of that, though, with the lowering and lifting. </p>\n<p>Being able to pass around function references across instance boundaries seems like a pretty powerful primitive that’s missing. But I’m also sure that’s a lot more complicated than I make it sound <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 339910995,
        "sender_full_name": "Surma",
        "timestamp": 1678119365
    },
    {
        "content": "<p>It isn't so much about how complicated it is; the component model has a \"no reentering from imports\" invariant. I'd be happy if someone could point to some discussion of that rule because I haven't quite wrapped my head around the rationale for it yet</p>",
        "id": 339934906,
        "sender_full_name": "Lann Martin",
        "timestamp": 1678125774
    },
    {
        "content": "<p>Oooh, that invariant does sound very relevant. I’d be curious to learn more. </p>\n<p>It does seem a bit surprising at the higher level — if the component model is supposed to address linking problem space, then components should be able to function like libraries, and there are libraries that utilize the callback pattern — I am not sure how those are supposed to get mapped to the component space (unless it’s supposed to be via core functions + table and the library component imports the table?)</p>",
        "id": 340395014,
        "sender_full_name": "Surma",
        "timestamp": 1678289707
    },
    {
        "content": "<p>For many cases, libraries that would want callbacks will want to use <code>stream</code>, once the component model supports that. Since it's async, it can interleave work from the producer of the stream and the consumer of the stream in much the same way that a callback would. It may even be implemented inside the component as actual callbacks.</p>",
        "id": 340406062,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1678292199
    },
    {
        "content": "<p>And a benefit of organizing it as a <code>stream</code> rather than a callback is that the system as a whole avoids the complexity of cross-component lifetime management for callback closure objects.</p>",
        "id": 340406279,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1678292276
    }
]