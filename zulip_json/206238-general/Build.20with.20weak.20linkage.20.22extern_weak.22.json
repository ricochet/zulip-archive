[
    {
        "content": "<p>Hello people, I've been trying to use the weak linkage nightly feature (<code>\"extern_weak\"</code>, <a href=\"https://github.com/rust-lang/rust/issues/29603\">https://github.com/rust-lang/rust/issues/29603</a>) </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(linkage)]</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">os</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">c_char</span><span class=\"p\">;</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[linkage = </span><span class=\"s\">\"extern_weak\"</span><span class=\"cp\">]</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">External_API</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"cp\">#[allow(unsafe_code)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main_fun</span><span class=\"p\">(</span><span class=\"n\">_argv</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_char</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_argc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">External_API</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"val = {val}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm building with <code>cargo +nightly build --lib --target wasm32-wasi</code>, but I'm getting a panic when I try to use the exposed API: <code>called </code>Option::unwrap()<code> on a </code>None<code> value</code>.<br>\nDoes anyone know if the feature is supposed to compile correctly to wasm targets? Thanks</p>\n<p>I'm experimenting, I know I can just do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">External_API</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"cp\">#[allow(unsafe_code)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">run_main</span><span class=\"p\">(</span><span class=\"n\">_argv</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_char</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_argc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">External_API</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">   </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"val = {val}\"</span><span class=\"p\">);</span>\n<span class=\"w\">   </span><span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and it works fine</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/29603\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b1c4cfed25773957c2528b4125706ea01e87a6e1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626365643464636536333536383933623062393433643730633266653831313866363331636536383663363062316661633331396261313039326266343534662f727573742d6c616e672f727573742f6973737565732f3239363033&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/29603\" title=\"Tracking issue for the `linkage` feature 路 Issue #29603 路 rust-lang/rust\">Tracking issue for the `linkage` feature 路 Issue #29603 路 rust-lang/rust</a></div><div class=\"message_embed_description\">Tracks stabilization for the linkage attribute.</div></div></div>",
        "id": 479836761,
        "sender_full_name": "Enrico Loparco",
        "timestamp": 1730367154
    }
]