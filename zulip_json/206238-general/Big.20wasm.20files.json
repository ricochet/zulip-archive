[
    {
        "content": "<p>Why is the .wasm files generated by wasmtime for just a simple print Hello World of about 2 MB</p>",
        "id": 190622881,
        "sender_full_name": "Akshat Agarwal",
        "timestamp": 1584234226
    },
    {
        "content": "<p>I guess it's not \"generated\" by wasmtime (sorry about that). But even then. I am asking here because I don't know where else to ask this question.</p>",
        "id": 190625243,
        "sender_full_name": "Akshat Agarwal",
        "timestamp": 1584238563
    },
    {
        "content": "<p>Are you looking at binaries built with Rust? I noticed this too, at first; it seems by default the .wasm files include debug info, and <code>wasm-strip</code>(part of the WABT, WebAssembly Binary Toolkit) can remove it. I see (using a hello-world built with <code>rustc --target=wasm32-wasi -O ...</code>):</p>\n<div class=\"codehilite\"><pre><span></span>$ wc -c *.wasm\n1925510 helloworld-rs.wasm\n  71138 helloworld-rs-stripped.wasm\n</pre></div>\n\n\n<p>I used Bloaty McBloatface (<a href=\"https://github.com/google/bloaty/\" target=\"_blank\" title=\"https://github.com/google/bloaty/\">https://github.com/google/bloaty/</a>), which supports WebAssembly, to look at where the space is spent in the original (non-stripped) file:</p>\n<div class=\"codehilite\"><pre><span></span>$ bloaty helloworld-rs.wasm\n    FILE SIZE        VM SIZE\n --------------  --------------\n  32.0%   602Ki   NAN%       0    .debug_str\n  25.6%   481Ki   NAN%       0    .debug_info\n  15.8%   296Ki   NAN%       0    .debug_line\n  10.0%   188Ki   NAN%       0    .debug_ranges\n   8.0%   149Ki   NAN%       0    .debug_pubnames\n   3.0%  57.1Ki   NAN%       0    Code\n   2.8%  53.6Ki   NAN%       0    .debug_pubtypes\n   1.0%  17.9Ki   NAN%       0    .debug_aranges\n   0.8%  16.0Ki   NAN%       0    name\n   0.6%  11.6Ki   NAN%       0    Data\n   0.2%  4.39Ki   NAN%       0    .debug_abbrev\n   0.0%     251   NAN%       0    Function\n   0.0%     238   NAN%       0    Import\n   0.0%     131   NAN%       0    Element\n   0.0%     116   NAN%       0    producers\n   0.0%     108   NAN%       0    Type\n   0.0%      73   NAN%       0    Export\n   0.0%      27   NAN%       0    Global\n   0.0%      25   NAN%       0    .debug_macinfo\n   0.0%      12   NAN%       0    [2 Others]\n   0.0%       8   NAN%       0    [WASM Header]\n 100.0%  1.84Mi 100.0%       0    TOTAL\n</pre></div>\n\n\n<p>So, as seen above, most of the data is debug info that can be removed.</p>\n<p>FWIW, I also built a hello-world in C with the WASI SDK (<a href=\"https://github.com/WebAssembly/wasi-sdk/\" target=\"_blank\" title=\"https://github.com/WebAssembly/wasi-sdk/\">https://github.com/WebAssembly/wasi-sdk/</a>), and the resulting file is 16306 bytes, so it does seem the bits of the Rust stdlib pulled in by <code>println!</code> are a bit larger than the libc slice for <code>printf</code>...</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/bloaty/\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/bloaty/\" target=\"_blank\" title=\"google/bloaty\">google/bloaty</a></div><div class=\"message_embed_description\">Bloaty McBloatface: a size profiler for binaries. Contribute to google/bloaty development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sdk/\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sdk/\" target=\"_blank\" title=\"WebAssembly/wasi-sdk\">WebAssembly/wasi-sdk</a></div><div class=\"message_embed_description\">WASI-enabled WebAssembly C/C++ toolchain. Contribute to WebAssembly/wasi-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 190629424,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1584247397
    },
    {
        "content": "<p>Yeah, it's almost certainly debug info. It'd be nice if we could move that to outside the Wasm file, but I don't think that works yet.</p>\n<p>The Rust and WebAssembly book has a lot more information: <a href=\"https://rustwasm.github.io/docs/book/reference/code-size.html\" target=\"_blank\" title=\"https://rustwasm.github.io/docs/book/reference/code-size.html\">https://rustwasm.github.io/docs/book/reference/code-size.html</a></p>",
        "id": 190640210,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1584267061
    },
    {
        "content": "<p>Two additional things I can add here: One is that we use static linking right now, so executables include the pieces of libc they need, rather than dynamic linking them.</p>",
        "id": 190653989,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584288975
    },
    {
        "content": "<p>Another is that we've made some major improvements in the tools recently which aren't yet in a release. With a trunk build of wasi-sdk and friends, a C hello world <em>with debug info</em> is 29K.</p>",
        "id": 190654092,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584289117
    },
    {
        "content": "<p>Ah, and one other detail: C++ hello worlds using &lt;iostream&gt; are significantly bigger than C hello worlds using printf. This is because  &lt;iostream&gt; ends up causing us to link in all kinds of locale support (that hello world itself doesn't need).</p>",
        "id": 190654198,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584289318
    },
    {
        "content": "<p>There is also <code>twiggy</code>, which I wrote to better understand why some function was called and why the linker didn't gc it from the final binary: <a href=\"https://github.com/rustwasm/twiggy\" target=\"_blank\" title=\"https://github.com/rustwasm/twiggy\">https://github.com/rustwasm/twiggy</a></p>\n<p>Also, not wasm specific, but probably answers a lot of these same questions: <a href=\"https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html\" target=\"_blank\" title=\"https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html\">https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/twiggy\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/37272798?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/twiggy\" target=\"_blank\" title=\"rustwasm/twiggy\">rustwasm/twiggy</a></div><div class=\"message_embed_description\">TwiggyðŸŒ± is a code size profiler. Contribute to rustwasm/twiggy development by creating an account on GitHub.</div></div></div>",
        "id": 190746742,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1584376144
    }
]