[
    {
        "content": "<p>Hi Folks,</p>\n<p>I am new to wasmtime. So was trying to find a way to calculate the CPU consumption per module for metering purposes. I saw something related to \"FUEL\" (<a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Config.html#method.consume_fuel\">https://docs.wasmtime.dev/api/wasmtime/struct.Config.html#method.consume_fuel</a> ), but is there a direct way to calculate [ Ghz-seconds]? Alternatively, Is there a way to map FUEL to [Ghz-seconds]?</p>",
        "id": 286033716,
        "sender_full_name": "Sahil Garg",
        "timestamp": 1655192935
    },
    {
        "content": "<p>No, fuel is deterministic and roughly corresponds to amount of wasm instructions executed. You seem to want the amount of cycles the cpu used to execute it which is highly dependent on the exact cpu, what the result is of the compilation, the exact state of the caches and a dozen other factors. The only way to get that is to use the cpu profiling functionality of the OS. For example perf_event_open on Linux (doesn't work with the default perf paranoid level config unless you are root)</p>",
        "id": 286043994,
        "sender_full_name": "bjorn3",
        "timestamp": 1655198862
    },
    {
        "content": "<p>Hello, <br>\nquick question regarding Fuel:</p>\n<ul>\n<li>is there any \"instruction -&gt; cost\" table? (like this <a href=\"https://ethereum.org/en/developers/docs/evm/opcodes/\">https://ethereum.org/en/developers/docs/evm/opcodes/</a>) or do all instructions cost the same?</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://ethereum.org/en/developers/docs/evm/opcodes/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/53be5b8a61dcdb07247660f740037b77865784bd\\/68747470733a2f2f657468657265756d2e6f72672f7374617469632f62663738623439643765323362383861376565613933343232356230636639362f31353438652f656e74657270726973652d6574682e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://ethereum.org/en/developers/docs/evm/opcodes/\" title=\"Opcodes for the EVM | ethereum.org\">Opcodes for the EVM | ethereum.org</a></div><div class=\"message_embed_description\">A list of all available opcodes for the Ethereum virtual machine.</div></div></div>",
        "id": 286928931,
        "sender_full_name": "Jorge Silva",
        "timestamp": 1655824557
    },
    {
        "content": "<p>Currently almost all opcodes are cost \"1\" with some being cost \"0\", although we don't provide a strong guarantee about what opcodes \"cost\" at this time</p>",
        "id": 286939533,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1655828681
    },
    {
        "content": "<p>okay, thank you Alex! Are there plans to document/customize different opcodes costs?</p>",
        "id": 286948309,
        "sender_full_name": "Jorge Silva",
        "timestamp": 1655832581
    },
    {
        "content": "<p>I don't believe anyone's currently working on that, but it seems like a reasonable-enough feature to add to me.  I think there was some historical discussion about adding it but now I forget where that happened...</p>",
        "id": 286949140,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1655833009
    },
    {
        "content": "<p>In the release build , is it possible to generate .wasm file in the target folder using cargo build --target wasm32-wasi ? I want the component model wasm file.</p>",
        "id": 287970851,
        "sender_full_name": "Shivam",
        "timestamp": 1656560953
    },
    {
        "content": "<p>Is there any way that I can generate .wasm file from .wat based on component model?</p>",
        "id": 288493297,
        "sender_full_name": "Shivam",
        "timestamp": 1657008948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 288494289,
        "sender_full_name": "Shivam",
        "timestamp": 1657009563
    },
    {
        "content": "<blockquote>\n<p>In the release build , is it possible to generate .wasm file in the target folder using cargo build --target wasm32-wasi ? I want the component model wasm file.</p>\n</blockquote>\n<p>Wasi doesn't yet use the component model.</p>",
        "id": 288510531,
        "sender_full_name": "bjorn3",
        "timestamp": 1657018706
    },
    {
        "content": "<blockquote>\n<p>Is there any way that I can generate .wasm file from .wat based on component model?</p>\n</blockquote>\n<p>A .wat file describes the interface of a .wasm file. You have to compile the .wasm file from another language that supports compiling to wasm.</p>",
        "id": 288510632,
        "sender_full_name": "bjorn3",
        "timestamp": 1657018773
    },
    {
        "content": "<p>I'm interested in wasm file which is based on component model . so I'm compiling the the component model module but I'm not sure how to compile component model module?</p>",
        "id": 288532590,
        "sender_full_name": "Shivam",
        "timestamp": 1657029074
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"509768\">@Shivam</span>. Currently there's a tool called <code>wit-component</code> in the <code>wit-bindgen</code> repository (<a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/wit-component\">https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/wit-component</a>) that can create a component based on the component model from a core wasm module that was built with wit-bindgen. There's also a <code>cargo-component</code> tool for Rust component development that should be available very soon to easily create components (it automates bindings generation and using <code>wit-component</code> to create a wasm component). As WASI preview2 (which is based on the component model) isn't yet ready, these tools are expecting you to target <code>wasm32-unknown-unknown</code> (in the case of <code>cargo-component</code>, the target is implicitly set for you).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/wit-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b749222b9901d427a1ab8d57524b11f1165648f3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396565633766326566323363636136393235353963313031373631393036373066393635626362383639313163643764656163396235646239616333313233642f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/wit-component\" title=\"wit-bindgen/crates/wit-component at main · bytecodealliance/wit-bindgen\">wit-bindgen/crates/wit-component at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/crates/wit-component at main · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 288573608,
        "sender_full_name": "Peter Huene",
        "timestamp": 1657045146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> Note that wasm32-unknown-unknown's call conv is not compatible with C.</p>",
        "id": 288628773,
        "sender_full_name": "bjorn3",
        "timestamp": 1657089052
    },
    {
        "content": "<p>The intention is to default to WASI once it does support the component model</p>",
        "id": 288628885,
        "sender_full_name": "Peter Huene",
        "timestamp": 1657089168
    },
    {
        "content": "<p>I'm not sure that if i can generate a .wasm from the .wat file? I checked it , it depending on the .wit format and generates a .rs file. Is there any way that I can generate .wasm file from .wat format of component model?</p>",
        "id": 288635710,
        "sender_full_name": "Shivam",
        "timestamp": 1657094591
    },
    {
        "content": "<p>Also where i can find the binary ? for testing a .wat format?</p>",
        "id": 288637812,
        "sender_full_name": "Shivam",
        "timestamp": 1657095752
    },
    {
        "content": "<p><code>wasm-tools parse</code> can be used to convert a <code>.wat</code> file to a <code>.wasm</code> file and it supports the component model; it can be installed from here: <a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bb99a0115a05b48bbce50f45ddf6f18cf6602cb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323064306665383931336335363136383537346565623339343033633466356563646237666435363732396334376366333830313061663963363661663330372f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 288700824,
        "sender_full_name": "Peter Huene",
        "timestamp": 1657127166
    },
    {
        "content": "<p>if by testing you mean executing your component defined in either wat or wasm, wasmtime has under-development support for executing components (under the <code>component-model</code> feature), but you need to use the Wasmtime Rust API to instantiate the component</p>",
        "id": 288700958,
        "sender_full_name": "Peter Huene",
        "timestamp": 1657127237
    },
    {
        "content": "<p>Hello everyone first time here, I was wondering if it is possible to add import functions to a wasm module using wasmtime. I want the user to give me some code which I can essentially add to at runtime</p>",
        "id": 288708124,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1657130640
    },
    {
        "content": "<p>Woops I meant exports * get the naming confused sometimes</p>",
        "id": 288709487,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1657131334
    },
    {
        "content": "<p>You want to add functions to a wasm module at runtime?</p>",
        "id": 288709593,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1657131371
    },
    {
        "content": "<p>Dynamically adding code to a running instance is not currently possible.</p>",
        "id": 288709690,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1657131437
    },
    {
        "content": "<p>Ahh I see thank you, I  might use some code generation on the client side instead. Thank you</p>",
        "id": 288710412,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1657131769
    },
    {
        "content": "<p>Thanks Peter!</p>",
        "id": 288713826,
        "sender_full_name": "Shivam",
        "timestamp": 1657133469
    },
    {
        "content": "<p>Hi, I'm using the <code>wasmtime::component</code> module to load in a WASM file, define some functions that it can use, and then run some functions that it exports. The WASM file is another rust crate that I compile to the <code>wasm32-wasi</code> target. I'm getting the error <code>attempted to parse a wasm module with a component parser</code> which I assume means that the Rust compiler outputs a WASM module rather than a WASM component. Is it possible for the Rust compiler to generate a component? If not,  how can I <em>create</em> a WASM component? The reason I'm using components in the first place is because I'd like to use structs across the FFI boundary between the Rust runner and WASM file.</p>",
        "id": 288758022,
        "sender_full_name": "Klim Tsoutsman",
        "timestamp": 1657165301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512674\">Klim Tsoutsman</span> has marked this topic as resolved.</p>",
        "id": 288774921,
        "sender_full_name": "Notification Bot",
        "timestamp": 1657181504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512674\">Klim Tsoutsman</span> <a href=\"#narrow/stream/206238-general/topic/.E2.9C.94.20Help.3F/near/288758022\">said</a>:</p>\n<blockquote>\n<p>Hi, I'm using the <code>wasmtime::component</code> module to load in a WASM file, define some functions that it can use, and then run some functions that it exports. The WASM file is another rust crate that I compile to the <code>wasm32-wasi</code> target. I'm getting the error <code>attempted to parse a wasm module with a component parser</code> which I assume means that the Rust compiler outputs a WASM module rather than a WASM component. Is it possible for the Rust compiler to generate a component? If not,  how can I <em>create</em> a WASM component? The reason I'm using components in the first place is because I'd like to use structs across the FFI boundary between the Rust runner and WASM file.</p>\n</blockquote>\n<p>Sorry, I probably should have scrolled up in the chat to see if my question has already been answered. Peter Huene literally answered the same question yesterday :)</p>",
        "id": 288775226,
        "sender_full_name": "Klim Tsoutsman",
        "timestamp": 1657181716
    },
    {
        "content": "<blockquote>\n<p>Is it possible for the Rust compiler to generate a component? If not, how can I create a WASM component?</p>\n</blockquote>\n<p>To answer this, the Rust compiler does not generate components at this time, only core wasm modules. We're working on tooling like <a href=\"https://github.com/bytecodealliance/cargo-component/\"><code>cargo component</code></a> to generate components</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/99a648f589d523d060851d07751ce3a1d40efd9d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333035313764613336376135306637356364633066366635666465343234316362396630616365623137306234333765336534646639363339313330336436392f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 288818912,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1657206323
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 288911103,
        "sender_full_name": "Jens Gåsemyr Magnus",
        "timestamp": 1657268300
    }
]