[
    {
        "content": "<p>I've been playing with this for the past week or so, i.e. Java JNI bindings to Wasmtime. Thought I'd share here, if there are other folks interested. It's very early stages, but I've at least gotten up to calling Java methods from WASM via the Java Wasmtime bindings. There's still a lot to do. But it's really exciting to see this working. Nice work all on all the interfaces, Wasmtime has been a pleasure to work with. <a href=\"https://github.com/bluejekyll/wasmtime-java\">https://github.com/bluejekyll/wasmtime-java</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bluejekyll/wasmtime-java\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/986845?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bluejekyll/wasmtime-java\" title=\"bluejekyll/wasmtime-java\">bluejekyll/wasmtime-java</a></div><div class=\"message_embed_description\">Wasmtime bindings for Java. Contribute to bluejekyll/wasmtime-java development by creating an account on GitHub.</div></div></div>",
        "id": 212244883,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1601851221
    },
    {
        "content": "<p>Nice! Would love to add this to the readme when it's ready and we may want to move into the org if you'd like as well</p>",
        "id": 212250906,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1601861365
    },
    {
        "content": "<p>Yes. I’d definitely love to do that. I’m doing my best to do things correctly. I’m a little nervous about the threading model right now, but am happy with the memory management.</p>",
        "id": 212254490,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1601867527
    },
    {
        "content": "<p>I'd be happy to help out with any questions in the wasmtime arena if need be!</p>",
        "id": 212255604,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1601869485
    },
    {
        "content": "<p>Although I'm much less knowledgeable in the JNI arena...</p>",
        "id": 212255605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1601869491
    },
    {
        "content": "<p>Right now I have some concerns about dropping across threads. Java has a new Cleaner facility (deprecates finalize methods), and I think it will potentially cleanup objects on a separate thread. This could mean that !Send and !Sync types (e.g. Store) might get dropped by a different thread. Given that the wasmtime types don’t implement Drop, I think this is ok, but I wonder if there are other concerns there?</p>",
        "id": 212313919,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1601910901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350398\">@Benjamin Fry</span> nah that'll be the cause of many segfaults, they all need to be dropped on the same thread. I had to deal with this with the Go bindings as well, which specifically queued up items for destruction into a shared structure and then the \"main item\" occasionally gc'd it. That's not a great solution in Go though and I'd ideally like to do better, but I wasn't able to find a way in Go to force things to deallocate on the same thread.</p>",
        "id": 212319292,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1601913278
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, that is exactly the type of thing I was worried about.</p>",
        "id": 212320229,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1601913650
    },
    {
        "content": "<p>I'm a little tempted to spawn a thread in Rust to manage all of the Wasmtime components, but that would add a substantial amount of state to manage between threads...</p>",
        "id": 212321435,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1601914172
    },
    {
        "content": "<p>I got end-to-end tests working! Still need to figure up the threading and cleanup, but this is in pretty decent shape for POC and outline.</p>",
        "id": 212592007,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602091697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> taking you up on your offer, is there a standard for array and string conversion into WASM that I can follow? It's not 100% clear to me right now how to pass byte arrays and strings into wasmtime. I'm assuming this is mostly standardized because wasm-bindgen does something on the WASM interface level. Maybe you could point me at where this happens in the Go bindings?</p>",
        "id": 212870753,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602274502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350398\">@Benjamin Fry</span> do you mean at the</p>",
        "id": 212870871,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274573
    },
    {
        "content": "<p>C API layer?</p>",
        "id": 212870879,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274579
    },
    {
        "content": "<p>or in wasm itself?</p>",
        "id": 212870883,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274583
    },
    {
        "content": "<p>The \"C\" api layer, though I'm not using the C api, I'm going straight from Java -&gt; JNI -&gt; Rust -&gt; Wasmtime... it's easier I think than using the C API.</p>",
        "id": 212870972,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602274653
    },
    {
        "content": "<p>ah ok, so wasm-bindgen is not really related to wasmtime in that it's all meant for the web</p>",
        "id": 212871130,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274750
    },
    {
        "content": "<p>otherwise do you mean like passing wasm bytes to <code>wasm_module_new</code>?</p>",
        "id": 212871147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274765
    },
    {
        "content": "<p>or</p>",
        "id": 212871148,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274767
    },
    {
        "content": "<p>getting the name from <code>wasm_importtype_module</code> or something like that?</p>",
        "id": 212871176,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274786
    },
    {
        "content": "<p>No, the <code>Func</code> interface.</p>",
        "id": 212871242,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602274806
    },
    {
        "content": "<p>so like you want to call a wasm program and give it a string?</p>",
        "id": 212871259,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274822
    },
    {
        "content": "<p>Or a byte array, yes. I understand this needs to be done with a Memory or Table?</p>",
        "id": 212871332,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602274867
    },
    {
        "content": "<p>ah</p>",
        "id": 212871360,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274882
    },
    {
        "content": "<p>ok</p>",
        "id": 212871362,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274882
    },
    {
        "content": "<p>er</p>",
        "id": 212871371,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274886
    },
    {
        "content": "<p>er  sry learning  a new keyboard layout...</p>",
        "id": 212871387,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274896
    },
    {
        "content": "<p>but anyway you'll be using <code>Memory</code></p>",
        "id": 212871407,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274913
    },
    {
        "content": "<p>you'll at this point basically need to do what wasm-bindgen does by hand</p>",
        "id": 212871459,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274937
    },
    {
        "content": "<p>right... that's what I figured.</p>",
        "id": 212871467,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602274951
    },
    {
        "content": "<p>which means you need to manually copy the bytes into <code>Memory</code> and then call the wasm function with the pointer</p>",
        "id": 212871470,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274954
    },
    {
        "content": "<p>currently wasmtime doesn't do anything to help you</p>",
        "id": 212871487,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274969
    },
    {
        "content": "<p>although this is the whole schtick of interface types</p>",
        "id": 212871499,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602274980
    },
    {
        "content": "<p>What are \"interface\" types?</p>",
        "id": 212871523,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275005
    },
    {
        "content": "<p><a href=\"https://github.com/webassembly/interface-types\">https://github.com/webassembly/interface-types</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/interface-types\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/interface-types\" title=\"WebAssembly/interface-types\">WebAssembly/interface-types</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/interface-types development by creating an account on GitHub.</div></div></div>",
        "id": 212871550,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275031
    },
    {
        "content": "<p>still a wasm proposal, but basically makes strings and such first-class types</p>",
        "id": 212871614,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275055
    },
    {
        "content": "<p>Ah, that looks nice.</p>",
        "id": 212871674,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275095
    },
    {
        "content": "<p>you can think of that proposal sort of like wasm-bindgen standardized</p>",
        "id": 212871746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275151
    },
    {
        "content": "<p>In the mean time, is there a common pattern for laying out the function parameters that are associated with the Memory being passed in?</p>",
        "id": 212871827,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275183
    },
    {
        "content": "<p>That is, I believe I have to use a Linker to associate the memory, and then pass in the length of the Memory?</p>",
        "id": 212871886,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275223
    },
    {
        "content": "<p>I guess I'm looking for naming conventions and parameter ordering/placement.</p>",
        "id": 212872478,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350398\">@Benjamin Fry</span> hm I'm not</p>",
        "id": 212872853,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275853
    },
    {
        "content": "<p>sure that I understand</p>",
        "id": 212872861,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275859
    },
    {
        "content": "<p>what do you mean by <code>Memory</code> as a parameter?</p>",
        "id": 212872877,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275875
    },
    {
        "content": "<p>b/c that should largely be handled during instantiation, not while you're calling functions</p>",
        "id": 212872963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275906
    },
    {
        "content": "<p>yes. but the function definitions need to take offset and length right?</p>",
        "id": 212873016,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275950
    },
    {
        "content": "<p>they</p>",
        "id": 212873044,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275971
    },
    {
        "content": "<p>and they might be mixed with other parameters?</p>",
        "id": 212873045,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602275971
    },
    {
        "content": "<p>true, yeah, but there's no real convention about that since it's more</p>",
        "id": 212873068,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602275995
    },
    {
        "content": "<p>of an ABI thing with the wasm blob</p>",
        "id": 212873135,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276014
    },
    {
        "content": "<p>any ordering of arguments is basically as easy as all the others, so I think s-to answer your question there's no real conventions or anything like that</p>",
        "id": 212873177,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276059
    },
    {
        "content": "<p>I see. Do you forsee wasm-bindgen as ever being used for non-js areas?</p>",
        "id": 212873347,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602276151
    },
    {
        "content": "<p>because I would expect it expects the orders and naming of the memory to be done in some consistent way?</p>",
        "id": 212873412,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602276191
    },
    {
        "content": "<p>wasm-bindgen literally as is probably not, but spiritually yes (that's interface types effectively)</p>",
        "id": 212873655,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276323
    },
    {
        "content": "<p>wasm-bindgen doesn't really deal with naming or ordering conventions, it just reflects what you wrote in the source</p>",
        "id": 212873693,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276354
    },
    {
        "content": "<p>so if the first argument is a string then the first two abi arguments are the pointer and the length, but that moves around if you move  the argument</p>",
        "id": 212873776,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276389
    },
    {
        "content": "<p>That's exactly what i was looking for... {pointer, length} in that order, based on where the String/byte array appear as arguments in the original language.</p>",
        "id": 212874191,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602276641
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 212874294,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602276720
    },
    {
        "content": "<p>oh</p>",
        "id": 212874347,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276729
    },
    {
        "content": "<p>oh lol sorry if that was a roundabout way to answer your question</p>",
        "id": 212874363,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602276749
    },
    {
        "content": "<p>I'm sure mostly from my lack of familiarity with this space.</p>",
        "id": 212874402,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602276790
    },
    {
        "content": "<p>Thanks for helping me grok it.</p>",
        "id": 212874440,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602276832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I think, unless I'm doing something wrong, I need to have access to a dynamic version of Func::wrap, that would allow for a list of WasmTy parameters. Is there a reason that implementation doesn't exist? I think I need it to be able to build more complex types for passing via memory regions with Caller, but the compile time bindings of the existing Func::wrap impl is very restrictive.</p>",
        "id": 213207288,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602618146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350398\">@Benjamin Fry</span> I think that's <code>Func::new</code>?</p>",
        "id": 213207370,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602618197
    },
    {
        "content": "<p>I'm using that now, but it feels like I don't have access to some of the dynamic type conversion options that we get with the WasmTy implementations (I want a custom version of that for Slices, like what wasm-bindgen has).</p>",
        "id": 213207560,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602618290
    },
    {
        "content": "<p>Maybe I'm over-thinking this.</p>",
        "id": 213207691,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602618361
    },
    {
        "content": "<p>hm that's true</p>",
        "id": 213208593,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602618822
    },
    {
        "content": "<p>although the conversions are in theory relatively trivial</p>",
        "id": 213208606,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602618832
    },
    {
        "content": "<p>we may need to implement a few more things though</p>",
        "id": 213208617,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602618840
    },
    {
        "content": "<p>So I'm hoping to use wasm_bindgen for the wasm bindings. It appears that wasm_bindgen only produces 32bit arguments (which makes sense for wasm32 target), but wasmtime appears to directly support 64bit values? This implies that I have to detect if the module is wasm_bindgen generated and then only use 32bit arguments? Am I misunderstanding the lay of the land?</p>",
        "id": 213209129,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602619105
    },
    {
        "content": "<p>I'll share what I have when I get it working, then if you have time maybe you could review what I've done?</p>",
        "id": 213209712,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602619377
    },
    {
        "content": "<p>yeah</p>",
        "id": 213210847,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602619976
    },
    {
        "content": "<p>yeah this is where wasm-bindgen is very web focused</p>",
        "id": 213210866,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602619984
    },
    {
        "content": "<p>which only some browsers implementin the 64 bit integers in js for now</p>",
        "id": 213210889,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602619998
    },
    {
        "content": "<p>but yeah can help with review!</p>",
        "id": 213210899,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602620003
    },
    {
        "content": "<p>Ok, do you think it's worth \"detecting\" if the module is wasm_bindgen, and if so, only drop to 32bit impls in that case? or is there another more general purpose way to detect that?</p>",
        "id": 213211022,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602620069
    },
    {
        "content": "<p>hm maybe? tbh fusing wasm-bindgen and wasmtime is gonna be painful no matter what you do</p>",
        "id": 213211433,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602620352
    },
    {
        "content": "<p>it's just not really built for it</p>",
        "id": 213211450,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602620359
    },
    {
        "content": "<p>Yeah, I'm starting to get that... ok</p>",
        "id": 213211498,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602620389
    },
    {
        "content": "<p>different question then, is there a different macro tool like wasm-bindgen that is better to use in this case?</p>",
        "id": 213211565,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602620414
    },
    {
        "content": "<p>unfortunately not currently, no</p>",
        "id": 213211817,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602620578
    },
    {
        "content": "<p>or not that I know of</p>",
        "id": 213211824,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1602620581
    },
    {
        "content": "<p>got it. I did notice some discussion on the wasm-bindgen repo in this area, so i can follow that.</p>",
        "id": 213211892,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602620623
    },
    {
        "content": "<p>Ugh, I'm so close on this, at least of passing Strings from WASM-&gt;Rust-&gt;Java, but I have an exception, so need to take a detour to unwrap the chain of exceptions.</p>",
        "id": 213367152,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602721615
    },
    {
        "content": "<p>Now I have full Java exception stack traces being reported back from the WASM calls to Java Funcs. That's really helpful.</p>",
        "id": 213449031,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602778120
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Hopefully this is my last pestering question. I have byte array's being passed from WASM to Java now. I'm going to work on the inverse next. I'm curious about something related to Memory usage. Is the general best practice to export allocation methods in the WASM module, and get pointers back from those functions? Or is there another best practice for finding an offset into Memory for that call? I've been reading a lot of the documentation and looking at implementations, and I'm quite confused.</p>",
        "id": 213449523,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602778348
    },
    {
        "content": "<p>for now, exposing allocation functions is probably best.</p>\n<p>eventually interface types will handle all of this for you</p>",
        "id": 213453970,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1602780437
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>, that confirms what I was thinking would be needed.</p>",
        "id": 213455706,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602781194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350398\">@Benjamin Fry</span> the witx tooling might work for your use case, depending on the details. See <a href=\"https://radu-matei.com/blog/wasm-api-witx/\">this excellent blog post</a> by <span class=\"user-mention\" data-user-id=\"269505\">@Radu M</span> for an overview</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://radu-matei.com/blog/wasm-api-witx/\" style=\"background-image: url(https://www.gravatar.com/avatar/031fa2ff2832edcb6b30c8ffb61da4d4?s=256)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://radu-matei.com/blog/wasm-api-witx/\" title=\"Writing a simple WASM API layer using interface types and Wasmtime - radu's blog\">Writing a simple WASM API layer using interface types and Wasmtime - radu's blog</a></div><div class=\"message_embed_description\">In this short article we explore how to get started with WebAssembly interface types by defining a simple API layer, then implementing that using Wiggle and Wasmtime</div></div></div>",
        "id": 213583930,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1602866271
    },
    {
        "content": "<p>Yeah, I'm considering that for generating bindings and having a common API that's defined... right now I'm just trying to support Rust in WASM, but the witx stuff looks really useful for when we expand to other languages...</p>",
        "id": 213584212,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602866405
    },
    {
        "content": "<p>Even for just Rust it might be a good approach, because it's intended to approximate Interface Types, and will evolve in that direction more and more</p>",
        "id": 213584329,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1602866501
    },
    {
        "content": "<p>True... I haven't looked at using it yet. Do you have an opinion on the ease of adoption and usage of witx?</p>",
        "id": 213585372,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602867107
    },
    {
        "content": "<p>I'm guessing that differs across different languages and their support for witx</p>",
        "id": 213585472,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1602867136
    },
    {
        "content": "<p>yeah, I doubt there's a general answer to be had here — though I'd like to have one, too! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213587733,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1602868234
    },
    {
        "content": "<p>Thanks for all your help <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> and <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>. I just got byte arrays as both parameters into WASM and returns working all the way back to Java (using ByteBuffer for the Java type). There's some deallocations that I need to insert as everything is just allocating right now, but it's all working. Now just need to do some cleanup.</p>",
        "id": 213885279,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1603180619
    },
    {
        "content": "<p>FYI, I have this in fairly decent shape at least for POC work. Not sure what the rest of the group thinks about where it lives. I have test automation in place for Linux and macOS, but Windows not yet due to a lack of desire on my part at the moment. In terms of work left, I have something in place at least for guaranteeing that Store's aren't shared across threads on the Java side, but it might need to be better for some of the other types. In terms of GC, all the Java types are auto-closeable, and memory is freed in the close of the Java object, so this should help ensure that all cleanup in the Rust impls happens on the same thread, but since I haven't used this in anger yet, I'm sure there are issues with that model.</p>",
        "id": 214903134,
        "sender_full_name": "Benjamin Fry",
        "timestamp": 1603922509
    },
    {
        "content": "<p>Is there any mature binding in Java for wasmtime? I'm trying to build some proof of concept to replace statics sdks with something more dynamic using webassembly from Java, python, go, node and rust</p>",
        "id": 299865900,
        "sender_full_name": "Andrés Margalef",
        "timestamp": 1663718880
    }
]