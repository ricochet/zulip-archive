[
    {
        "content": "<p>I have a question related to the static analysis of components in the WebAssembly component model.</p>\n<p>Let's say I have a wasm component (#1) with an export A. <br>\nI have another component #2 that imports A and B. <br>\nNow I compose a third component out of #1 and #2, and therefore it only imports B (since the A import is internally satisfied).</p>\n<p>Can someone looking at component #3 tell that it contains functionality from A? Is it guaranteed that the wit file extracted from component #3 will reveal the presence of A? Or could that information be obfuscated?</p>",
        "id": 409634064,
        "sender_full_name": "James Mart",
        "timestamp": 1703274180
    },
    {
        "content": "<p>The exports of component 3 won't inherently reveal anything about components 1 or 2. The actual encoded bytes of component 3 will (with existing tooling) reveal everything about the composition.</p>",
        "id": 409634853,
        "sender_full_name": "Lann Martin",
        "timestamp": 1703274724
    },
    {
        "content": "<p>You could conceptually have a tool that \"compiles\" the composition of 1 and 2 into a core module that behaves the same as the composition, but I'm not aware of anyone doing that (and arguably that wouldn't be \"composing\" in the component model sense any more).</p>",
        "id": 409634953,
        "sender_full_name": "Lann Martin",
        "timestamp": 1703274793
    },
    {
        "content": "<p>Thanks for the reply, Lann. Consider a component that by its imports and exports appears only to do screen rendering, but in fact it also \"secretly\" makes HTTP requests to a server? I know if I parse the bytecode or monitor the network I may discover the functionality, but if I understand your answer, then I can't necessarily \"trust\" the declared imports and exports tell the full story.</p>\n<p>If this is true, I don't really understand the claims I've heard about static analyzability in the component model, for example in some of the recent WasmCon talks. I suppose if I'm the author of all of the components then I can statically analyze the final product, but I can't really statically analyze a composition if it uses any registry components.</p>",
        "id": 409675325,
        "sender_full_name": "James Mart",
        "timestamp": 1703299722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648387\">James Mart</span> <a href=\"#narrow/stream/206238-general/topic/Private.20internal.20components.3F/near/409675325\">said</a>:</p>\n<blockquote>\n<p>Consider a component that by its imports and exports appears only to do screen rendering, but in fact it also \"secretly\" makes HTTP requests to a server? I know if I parse the bytecode or monitor the network I may discover the functionality, but if I understand your answer, then I can't necessarily \"trust\" the declared imports and exports tell the full story.</p>\n</blockquote>\n<p>No, that is absolutely not a thing a component can do. Regardless of how it is structured (or obfuscated) internally, the only way it can perform any kind of IO is through its imports and exports.</p>",
        "id": 409699342,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1703321663
    },
    {
        "content": "<p>I might be mistaken, but I think the source of confusion might have been what Lann said about hypothetically converting a composed component into a core Wasm module. At that point any guarantees about internal component structure would be destroyed, but the resulting core Wasm module still couldn't just decide to interact with the outside world arbitrarily; it can still only call the outside world via its imports and be called from the outside world via its exports.</p>",
        "id": 409699906,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1703322064
    },
    {
        "content": "<p>I <strong>think</strong> there's another thing here: the use of the word \"secret\" implies some wasm module that can't be understood. So far as I can tell, there's no such thing as an opaque module -- it's a spec, after all, so it can be examined internally easily enough.</p>",
        "id": 409711405,
        "sender_full_name": "Ralph",
        "timestamp": 1703332423
    },
    {
        "content": "<p>Where <span class=\"user-mention\" data-user-id=\"648387\">@James Mart</span> says, <code>ts imports and exports appears only to do screen rendering, but in fact it also \"secretly\" makes HTTP requests to a server</code>-- another way to say this is that the wams runtime controls any interaction between the module inside the sandbox and the outside world. As a result, with a compliant wasm runtime, that \"secret\" http call will fail miserably because it's not a declared export it can call.</p>",
        "id": 409711511,
        "sender_full_name": "Ralph",
        "timestamp": 1703332535
    },
    {
        "content": "<p>I'm still, after this thread, not really clear about your objective, <span class=\"user-mention\" data-user-id=\"648387\">@James Mart</span>, or is it merely curiosity? You say earlier <code> can't necessarily \"trust\" the declared imports and exports tell the full story.</code> That seems to imply you're trying to say you are not convinced that the inner code can call the http endpoint secretly. And the answer to that is yes, you <em>can</em>, because the runtime will not permit any outbound calls from any module without <em>permitting it explicitly</em>. Any such call with bonk. It doesn't matter whether you've parsed the actual wasm or merely the exports: without a) the export declared and b) the runtime permitting the use of that call the network request will bonk.</p>",
        "id": 409711734,
        "sender_full_name": "Ralph",
        "timestamp": 1703332780
    },
    {
        "content": "<p>if you GIVE modules full OS-style permissions AND if they therefore invoke an host export http request function AND you didn't scan the module beforehand then you might be surprised to find the \"secret\" call will work.</p>",
        "id": 409711876,
        "sender_full_name": "Ralph",
        "timestamp": 1703332848
    },
    {
        "content": "<p>do I understand things correctly? This is, by the way, precisely the same guarantee that core wasm gives you: that you can't make calls across the sandbox boundary without the host runtime giving that permission, whether your exported http api is WIT or whether it's a custom declared api (or js bindings for that matter).</p>",
        "id": 409712088,
        "sender_full_name": "Ralph",
        "timestamp": 1703332946
    },
    {
        "content": "<p>the <em>module</em> or <em>component</em> cannot, of itself, make that outbound call actually work. <em>Only</em> the runtime can permit that, and only for the specific exported api it presents to the module to call.</p>",
        "id": 409712145,
        "sender_full_name": "Ralph",
        "timestamp": 1703332994
    },
    {
        "content": "<p>Someone correct me here, because it's a fairly important set of points, if I'm misunderstanding something.</p>",
        "id": 409712169,
        "sender_full_name": "Ralph",
        "timestamp": 1703333036
    },
    {
        "content": "<p>Typically, this is the <a href=\"https://www.ibm.com/topics/log4j\">https://www.ibm.com/topics/log4j</a> scenario, in which a dependency of a dependency used log4j without the jdni fix, enabling an inner depedency to maliciously execute remote code inside an environment's secure boundary.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.ibm.com/topics/log4j\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f1547d5e1e1c034efb770178a219a10a255735bf\\/68747470733a2f2f7777772e69626d2e636f6d2f636f6e74656e742f64616d2f636f6e6e65637465646173736574732d61646f62652d636d732f776f726c64776964652d636f6e74656e742f6f746865722f756c2f7461726765742f37612f30332f4f70656e5f536f757263655f332e706e672f5f6a63725f636f6e74656e742f72656e646974696f6e732f63713564616d2e6d656469756d2e313538342e313538342e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.ibm.com/topics/log4j\" title=\"What is the Log4j vulnerability? | IBM\">What is the Log4j vulnerability? | IBM</a></div><div class=\"message_embed_description\">The Log4J vulnerability, also known as “Log4Shell,” is a critical vulnerability discovered in the Apache Log4J logging library in November 2021.</div></div></div>",
        "id": 409712501,
        "sender_full_name": "Ralph",
        "timestamp": 1703333319
    },
    {
        "content": "<p>this just won't work unless you give that component permission to do this.</p>",
        "id": 409712522,
        "sender_full_name": "Ralph",
        "timestamp": 1703333348
    },
    {
        "content": "<p>is that the kind of situation you're thinking about?</p>",
        "id": 409712535,
        "sender_full_name": "Ralph",
        "timestamp": 1703333362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"648387\">@James Mart</span> I think I understand your question better now. A more-concrete example may help:</p>\n<p>Component A imports a \"database\" interface.</p>\n<ul>\n<li>Scenario 1: Component X wraps component A and simply \"passes through\" the database import. From the \"outside\" all you see is component X importing the database interface.</li>\n<li>Scenario 2: Component B has a database export and implements an in-memory database with no persistence (no imports). Component X composes A and B; from the outside you see no imports.</li>\n<li>Scenario 3: Component C implements a database network client; it has a database export and a networking import. Component X composes A and C; from the outside you see just the networking import.</li>\n</ul>",
        "id": 409720246,
        "sender_full_name": "Lann Martin",
        "timestamp": 1703340678
    },
    {
        "content": "<p>All interaction with the \"real world\" must ultimately happen through the outermost component's imports and exports. You might not be able to tell that the composed components are interacting with a database (as in scenarios 2 and 3), but you can see all of the ways it is permitted to interact with the outside world.</p>",
        "id": 409720618,
        "sender_full_name": "Lann Martin",
        "timestamp": 1703341060
    },
    {
        "content": "<p>and more, even without that, you can examine the core wasm in or linked by the component itself and examine what each one tries to do. Right now that's hard but all the tools exist; I'm quite sure that we'll have this tooling very soon that will be mostly point-and-click.</p>",
        "id": 409720872,
        "sender_full_name": "Ralph",
        "timestamp": 1703341269
    },
    {
        "content": "<p>One of the very neat things about the component model is that you can accidentally ship log4j and without complete OS-style exports to use, absolutely nothing will happen.</p>",
        "id": 409720974,
        "sender_full_name": "Ralph",
        "timestamp": 1703341350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> , just to close your examples, in Scenario 3 you can only SEE the networking import, but without the host's database export support, component c's database usage will fail. Yes?</p>",
        "id": 409721095,
        "sender_full_name": "Ralph",
        "timestamp": 1703341468
    },
    {
        "content": "<p>you can't \"see\" it (without looking at the assembly codepath itself, which you can do) but the inner also can't USE it without the host's permission/export implementation.</p>",
        "id": 409721228,
        "sender_full_name": "Ralph",
        "timestamp": 1703341583
    },
    {
        "content": "<p>Ah, to clarify (can't edit <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span>): in scenario 3, component C is an \"adapter\": its database export is used to fulfill component A's import.</p>",
        "id": 409721445,
        "sender_full_name": "Lann Martin",
        "timestamp": 1703341769
    },
    {
        "content": "<p>we do need Zulip to support Mermaid diagrams here, it would help</p>",
        "id": 409722349,
        "sender_full_name": "Ralph",
        "timestamp": 1703342586
    },
    {
        "content": "<p>:-)</p>",
        "id": 409722355,
        "sender_full_name": "Ralph",
        "timestamp": 1703342588
    },
    {
        "content": "<p>The two points are:</p>",
        "id": 409722512,
        "sender_full_name": "Ralph",
        "timestamp": 1703342726
    },
    {
        "content": "<ol>\n<li>you can't interact with the outside world (external to the sandbox) without using the public imports and exports of the outermost component.</li>\n<li>This remains true regardless what the inner components or modules try to do.</li>\n<li>In all cases, you can examine the code paths of all modules in advance; wasm is a public specification.</li>\n</ol>",
        "id": 409722658,
        "sender_full_name": "Ralph",
        "timestamp": 1703342874
    },
    {
        "content": "<p>and 4. off-by-two errors</p>",
        "id": 409722665,
        "sender_full_name": "Ralph",
        "timestamp": 1703342881
    },
    {
        "content": "<p>Thanks for the replies, everyone.</p>\n<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> I know the internal structure can be examined with various tooling so nothing is ultimately \"secret.\" But in terms of being able to trustlessly execute third-party components, I don't want to have to examine the bytecode of each to ensure they aren't misbehaving. That was the perspective I was coming from. </p>\n<p>But I understand better now, thanks to all of your replies. What I'm realizing is that, even if you create a composition of multiple internal components, you can't embed IO (like an HTTP request) into a module in such a way that it hides that capability from the final components imports (the way that you <em>can</em> embed a non-persistent in-memory database as in <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span>'s Scenario 2 above). Ultimately, IO is definitionally an interaction with the outside world and would therefore need to be imported by the final component.</p>",
        "id": 409726558,
        "sender_full_name": "James Mart",
        "timestamp": 1703345615
    },
    {
        "content": "<p>Yup!</p>",
        "id": 409726636,
        "sender_full_name": "Ralph",
        "timestamp": 1703345659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"648387\">James Mart</span> has marked this topic as resolved.</p>",
        "id": 409726695,
        "sender_full_name": "Notification Bot",
        "timestamp": 1703345703
    }
]