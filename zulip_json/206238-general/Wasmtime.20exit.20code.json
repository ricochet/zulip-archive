[
    {
        "content": "<p>Wasmtime does not seem to accept exit codes greater than 125. Is their any reason for this limitation? I couldn't find any relevant documentation.<br>\nSee wasi_proc_exit in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/lib.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/lib.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/lib.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi/src/lib.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 216060488,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604914500
    },
    {
        "content": "<p>in POSIX, exit codes &gt;= 128 indicate that the process was terminated by a signal, and 126 and 127 are used to report errors launching child processes. WASI doesn't yet have signals or ways to launch child processes, and we're not yet sure what they'll look like, so we're erring on the side of being conservative</p>",
        "id": 216069853,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1604920295
    },
    {
        "content": "<p>Do you have a use case which needs exit codes &gt; 125?</p>",
        "id": 216069958,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1604920347
    },
    {
        "content": "<p>Thanks Dan. It does make sense.<br>\nI'm using the C API, and I would like to distinguish between a signal and a non-user trap. I don't think I'll need the exact signal, so I guess I can make the distinction from the trap message.</p>",
        "id": 216070764,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604920848
    },
    {
        "content": "<p>WASI doesn't have signals.</p>",
        "id": 216071063,
        "sender_full_name": "bjorn3",
        "timestamp": 1604921053
    },
    {
        "content": "<p>You can use <a href=\"https://github.com/bytecodealliance/wasmtime/blob/12e658a1ef344ccacf872accb0cadd7ef6e8cf4a/crates/c-api/include/wasmtime.h#L639\"><code>wasmtime_trap_exit_status</code></a> to determine if the trap was caused by a <code>proc_exit</code> or not.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/12e658a1ef344ccacf872accb0cadd7ef6e8cf4a/crates/c-api/include/wasmtime.h#L639\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/12e658a1ef344ccacf872accb0cadd7ef6e8cf4a/crates/c-api/include/wasmtime.h#L639\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 216071377,
        "sender_full_name": "bjorn3",
        "timestamp": 1604921257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/Wasmtime.20exit.20code/near/216071377\">said</a>:</p>\n<blockquote>\n<p>You can use <a href=\"https://github.com/bytecodealliance/wasmtime/blob/12e658a1ef344ccacf872accb0cadd7ef6e8cf4a/crates/c-api/include/wasmtime.h#L639\"><code>wasmtime_trap_exit_status</code></a> to determine if the trap was caused by a <code>proc_exit</code> or not.</p>\n</blockquote>\n<p>Thanks Bjorn, that's what I'm doing ATM, but it returns false if the exit code is &gt; 125. Even though WASI doesn't have signals, I still need to distinguish an exit code of [126, 255] from, e.g., an unreachable trap, but I guess I have to use the error message for that?</p>",
        "id": 216071699,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604921412
    },
    {
        "content": "<p>When the exit code is in the range 126..=255, it isn't valid and you don't get an exit trap but an error trap.</p>",
        "id": 216071892,
        "sender_full_name": "bjorn3",
        "timestamp": 1604921523
    },
    {
        "content": "<p>You must not pass 126..=255 to <code>proc_exit</code>.</p>",
        "id": 216071957,
        "sender_full_name": "bjorn3",
        "timestamp": 1604921557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/Wasmtime.20exit.20code/near/216071957\">said</a>:</p>\n<blockquote>\n<p>You must not pass 126..=255 to <code>proc_exit</code>.</p>\n</blockquote>\n<p>I'm not the one supplying the WASI binary. I'm just trying to handle the case where it happens.</p>",
        "id": 216072160,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604921688
    },
    {
        "content": "<p>What application is it if I may ask?</p>",
        "id": 216072196,
        "sender_full_name": "bjorn3",
        "timestamp": 1604921713
    },
    {
        "content": "<p>I'm writing a WebAssembly/WASI analysis and I'm using some more or less random C programs compiled with WASI-clang as benchmarks.</p>",
        "id": 216072375,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604921821
    },
    {
        "content": "<p>Why would it return those strange exit codes?</p>",
        "id": 216072504,
        "sender_full_name": "bjorn3",
        "timestamp": 1604921891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/Wasmtime.20exit.20code/near/216072504\">said</a>:</p>\n<blockquote>\n<p>Why would it return those strange exit codes?</p>\n</blockquote>\n<p><code>return -1</code> seems to be a pretty common pattern for indicating a program failure.</p>",
        "id": 216072588,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604921951
    },
    {
        "content": "<p>From the main function of course.</p>",
        "id": 216072614,
        "sender_full_name": "Martin Torp",
        "timestamp": 1604921965
    },
    {
        "content": "<p>On one hand POSIX seems to reserve <code>EXIT_FAILURE</code> as exit code for the purpose of calling <code>exit</code> on an error: <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/exit.html\">https://pubs.opengroup.org/onlinepubs/9699919799/functions/exit.html</a>, which is defined as 1 in wasi-libc: <a href=\"https://github.com/WebAssembly/wasi-libc/blob/575e1579a4ebaa6dccb884ca657188a92982af23/libc-top-half/musl/include/stdlib.h#L88\">https://github.com/WebAssembly/wasi-libc/blob/575e1579a4ebaa6dccb884ca657188a92982af23/libc-top-half/musl/include/stdlib.h#L88</a> The C specification states that returning a value from the main function is equivalent to calling <code>exit</code> with the respective return value as argument: <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf</a> 5.1.2.2.3 Program termination</p>\n<p>On the other hand POSIX does state that any value is allowed to be passed to <code>exit</code>: <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/exit.html\">https://pubs.opengroup.org/onlinepubs/9699919799/functions/exit.html</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/575e1579a4ebaa6dccb884ca657188a92982af23/libc-top-half/musl/include/stdlib.h#L88\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/575e1579a4ebaa6dccb884ca657188a92982af23/libc-top-half/musl/include/stdlib.h#L88\" title=\"WebAssembly/wasi-libc\">WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 216074479,
        "sender_full_name": "bjorn3",
        "timestamp": 1604923060
    },
    {
        "content": "<p>in practice, compliance with POSIX is very... handwavey.</p>",
        "id": 216176365,
        "sender_full_name": "Jubilee",
        "timestamp": 1604989939
    },
    {
        "content": "<p>which isn't even unexpected since in general it rarely specifies SHALL NOT, it only specifies SHALL and SHOULD, and in a way that allows a broad latitude of interpretation.</p>",
        "id": 216176384,
        "sender_full_name": "Jubilee",
        "timestamp": 1604989986
    },
    {
        "content": "<p>but like, my experience with experimenting with shells and the like which claim to be \"POSIX-compliant\" is that one should expect compliance with POSIX even on the points where it is clearly \"do this\" to be within a standard deviation, as it were, of interpretations.</p>",
        "id": 216176483,
        "sender_full_name": "Jubilee",
        "timestamp": 1604990111
    },
    {
        "content": "<p>I agree POSIX is handwavy in a lot of ways. So I think in this case, the question to ask is, if you could make <code>exit(-1)</code> do anything, what would you want it to do?</p>",
        "id": 216219478,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605018840
    },
    {
        "content": "<p>I don't know of any code that does <code>exit(-1)</code> myself, but <a href=\"https://softwareengineering.stackexchange.com/questions/314563/where-did-exit-1-come-from\">apparently it happens</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://softwareengineering.stackexchange.com/questions/314563/where-did-exit-1-come-from\" style=\"background-image: url(https://cdn.sstatic.net/Sites/softwareengineering/Img/apple-touch-icon@2.png?v=1ef7363febba)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://softwareengineering.stackexchange.com/questions/314563/where-did-exit-1-come-from\" title=\"Where did &quot;exit(-1)&quot; come from?\">Where did \"exit(-1)\" come from?</a></div><div class=\"message_embed_description\">I see in a lot of legacy software and bad tutorials on the Internet that recommend using exit(-1), return -1 or similar to represent \"abnormal termination\". The problem is, in POSIX at least, -1 has </div></div></div>",
        "id": 216219656,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605018892
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 216301823,
        "sender_full_name": "indolering",
        "timestamp": 1605062225
    }
]