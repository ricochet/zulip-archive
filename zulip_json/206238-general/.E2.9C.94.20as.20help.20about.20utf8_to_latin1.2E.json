[
    {
        "content": "<p>I am trying to add riscv64 backend to riscv64.<br>\nI have a null pointer issue at.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"mh\">0x00000040008a96e6</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">component</span>::<span class=\"n\">transcode</span>::<span class=\"n\">trampolines</span>::<span class=\"n\">utf8_to_latin1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"o\">=</span><span class=\"mh\">0x40c3ac5000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"o\">=</span><span class=\"mi\">27</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"mh\">0x4043ab5000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_retptr</span><span class=\"o\">=</span><span class=\"mh\">0x0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">component</span><span class=\"o\">/</span><span class=\"n\">transcode</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">88</span><span class=\"w\"></span>\n#<span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x0000004043ab3064</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>\n<p>you can see <code>_retptr</code> is null.<br>\nthis bug is very wired to me.<br>\nI nerve find the code in <code>wasmtime</code> that you want to call <code>wasmtime_runtime::component::transcode::trampolines::utf8_to_latin1 </code>.<br>\nI only saw you want to call <code>wasmtime_cranelift::compiler::component::host::utf8_to_latin1</code>.<br>\nand the two function have differrent signature.<br>\nI think you are calling the wrong function???</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">xxxxxxxxxxxxxxxxxxx</span><span class=\"w\"> </span>: <span class=\"nc\">Utf8ToLatin1</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">vmctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">wasmtime_system_v</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_frame_pointer</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"o\">+</span><span class=\"mi\">24</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_return_address</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"o\">+</span><span class=\"mi\">32</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"o\">+</span><span class=\"mi\">64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">144</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">152</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_indirect</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">(</span><span class=\"n\">v16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"c1\">// call to  wasmtime_runtime::component::transcode::trampolines::utf8_to_latin1</span>\n<span class=\"w\">    </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ireduce</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v20</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v23</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ireduce</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v23</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 293465163,
        "sender_full_name": "yang yu",
        "timestamp": 1660540428
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466261\">@yang yu</span>  The component-model stuff is pretty new; <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> might have more specific insights or hints here?</p>",
        "id": 293467335,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660542261
    },
    {
        "content": "<p>ok , I just can't pass test on riscv64.</p>",
        "id": 293469549,
        "sender_full_name": "yang yu",
        "timestamp": 1660543918
    },
    {
        "content": "<p>This most likely has to do with the multi-return and the <code>wasmtime_system_v</code> ABI in use here. The \"wasmtime flavor\" of the <code>systemv_abi</code> changes how multiple returns get represented. Has the riscv64 backend implemented this ABI? Are the other multi-value tests passing in Wasmtime yet (I would expect them not to be passing if this isn't passing)</p>",
        "id": 293531185,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1660574086
    },
    {
        "content": "<p>No,riscv64 not implement <code>wasmtime_system_v</code> abi at all.<br>\nI think I can't find the document about wasmtime_system_v-riscv64 abi.     <br>\nI only find one document about riscv abi.<br>\n<a href=\"https://riscv.org/wp-content/uploads/2015/01/riscv-calling.pdf\">https://riscv.org/wp-content/uploads/2015/01/riscv-calling.pdf</a></p>",
        "id": 293650087,
        "sender_full_name": "yang yu",
        "timestamp": 1660618455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466261\">@yang yu</span> the <code>wasmtime_system_v</code> ABI is our own invention; there won't be any other docs about it. Basically what is needed is to support multivalue returns in a slightly different way that involves a stack return area. If you grep for <code>WasmtimeSystemV</code> in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/abi.rs#L772\">x64/abi.rs</a> you'll see how we handle it on x86-64; most of the details will be handled by the common ABI code</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/abi.rs#L772\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c3c14befb04e26c6785adaeb36022e0183f14272\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363536656334393236663235316630303234303730633232303937633336343032336336393832303839643435646536353965366162303034613539323965332f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0f944937c0c3d90946eaa6199f0baa5ed991c80d/cranelift/codegen/src/isa/x64/abi.rs#L772\" title=\"wasmtime/abi.rs at 0f944937c0c3d90946eaa6199f0baa5ed991c80d · bytecodealliance/wasmtime\">wasmtime/abi.rs at 0f944937c0c3d90946eaa6199f0baa5ed991c80d · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 293659027,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660629190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> there is another detail I don't know.<br>\n<code>wasmtime_system_v</code> abi only use one register store result.<br>\n<a href=\"/user_uploads/15107/mkMmfMFh6vnSR2Mqo6OC2lcx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/mkMmfMFh6vnSR2Mqo6OC2lcx/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/mkMmfMFh6vnSR2Mqo6OC2lcx/image.png\"></a></div>",
        "id": 294001585,
        "sender_full_name": "yang yu",
        "timestamp": 1660785571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466261\">yang yu</span> has marked this topic as resolved.</p>",
        "id": 294001593,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660785587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466261\">yang yu</span> has marked this topic as unresolved.</p>",
        "id": 294504087,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661053047
    },
    {
        "content": "<p>is that <code>wasmtime_system_abi</code> is actual  <code>C</code> api, because <code>C</code> only can return one value.<br>\nSo only one register can be used for all register class to return value.</p>",
        "id": 294505724,
        "sender_full_name": "yang yu",
        "timestamp": 1661054919
    },
    {
        "content": "<p>wasmtime_system_v is basically system_v except in case of returning multiple values it passes a pointer to write the return values to as last argument afaik.</p>",
        "id": 294519044,
        "sender_full_name": "bjorn3",
        "timestamp": 1661070053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  ok，I just have this question , I saw using <code>wasmtime_system_v</code> to call <code>C</code> code.</p>",
        "id": 294602054,
        "sender_full_name": "yang yu",
        "timestamp": 1661140771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466261\">yang yu</span> has marked this topic as resolved.</p>",
        "id": 294602057,
        "sender_full_name": "Notification Bot",
        "timestamp": 1661140788
    }
]