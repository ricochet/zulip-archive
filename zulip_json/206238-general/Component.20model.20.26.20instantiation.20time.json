[
    {
        "content": "<p>Hi everyone!</p>\n<p>From what I understand the component model is a mixture of module linking + interface types, and requires that each additional module is separately instantiated. In scenarios where instantiation time is critical (Wasm instance per web request) it becomes impractical to have many modules linked together, because each addition slows down the instantiation. I'm afraid that users are going to avoid using modules linked together if it means performance sacrifices and are going to stick to always one module.</p>\n<p>I'm curious how others are thinking about this issue and if it would have any measurable performance impact in real-world applications?</p>",
        "id": 258035942,
        "sender_full_name": "Bernard Kolobara",
        "timestamp": 1634566768
    },
    {
        "content": "<p>One observation here is that component linking is very intentionally being kept very simple. In a lot of use cases, dynamism like resolving URLs to satisfy dependencies, or generating code to connect two components together, will be done ahead of time, so that the actual linking that happens at instantiation time stays simple and fast.</p>",
        "id": 258037167,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1634567239
    },
    {
        "content": "<p>Hi Bernard <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>Fully agreed that this is a crucial point! Since we at Fastly have the same instance lifetime model, this is something we, too, care about deeply. It's also why we've spent significant effort optimizing instantiation time in Wasmtime <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> A key enabler of good instantiation perf is the use of the pooling instance allocator. With that, instantiation <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2900#issuecomment-839811562\">is measured in (low) single-digit microseconds</a>, which alleviates a lot of these concerns, I think <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2900#issuecomment-839811562\" style=\"background-image: url(https://opengraph.githubassets.com/9c4c850bbce4ca444315b60414815b63a3255b2c7ac430d27c82d2bd2857b71b/bytecodealliance/wasmtime/pull/2900)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2900#issuecomment-839811562\" title=\"Implement simple benchmarks for instantiation. by peterhuene · Pull Request #2900 · bytecodealliance/wasmtime\">Implement simple benchmarks for instantiation. by peterhuene · Pull Request #2900 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This adds benchmarks around module instantiation using criterion.\nBoth the default (i.e. on-demand) and pooling allocators are tested\nsequentially and in parallel using a thread pool.\nInstantiation...</div></div></div>",
        "id": 258037217,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1634567258
    },
    {
        "content": "<p>Also, what <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> said :-)</p>",
        "id": 258037337,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1634567289
    },
    {
        "content": "<p>but also what <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> said <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 258037422,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1634567324
    },
    {
        "content": "<p>And, because linking is kept simple, it should be possible for engines to cache graphs or subgraphs of linked components, so that repeatedly instantiating the same set of components linked together can be very fast.</p>",
        "id": 258037546,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1634567369
    },
    {
        "content": "<p>Thank you both! :) That's what I was also thinking, if per instance time is optimized enough it should be fine. Sacrificing a bit performance for a simpler model of linking (each module gets a separate instance) should be the way to go.</p>",
        "id": 258039136,
        "sender_full_name": "Bernard Kolobara",
        "timestamp": 1634567989
    },
    {
        "content": "<p>It's not even just a simpler model of linking—it's critical to the security model Components provide. Because of that, we see it as vital to ensure we really do make the overhead low enough. Once we get to a world where component graphs grow large enough, that'll almost certainly need to involve lazy instantiation, but for the time being instantiating sets of components as Dan describes should be plenty fast</p>",
        "id": 258043835,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1634569749
    },
    {
        "content": "<p>given there's so much low level knowledge here, why am I fighting with this thing.</p>",
        "id": 258044080,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634569833
    },
    {
        "content": "<p>or to put it a little more politely, could I get some help nailing global variable emit please. its hard. the code is terse &amp; rust isn't my language of choice. surely you all need this too. essentials first - all bases covered, then optimisations.</p>",
        "id": 258045179,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634570209
    },
    {
        "content": "<p>&amp; appreciate other work is going on, not just the itch I think needs scratching. thanks all for vast amounts of difficult work on this project.</p>",
        "id": 258047322,
        "sender_full_name": "Steve Williams",
        "timestamp": 1634570947
    }
]