[
    {
        "content": "<p>In <a href=\"/user_uploads/15107/v7JMk09rIZwwZGEU2U3eue9q/image.png\">Fig. 4</a> of <a href=\"https://www.usenix.org/system/files/sec20-lehmann.pdf\">Everything old is new Again</a>, it is suggested that the memory layout in Linear Memory varies depending on the compiler.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/v7JMk09rIZwwZGEU2U3eue9q/image.png\" title=\"Fig. 4\"><img src=\"/user_uploads/15107/v7JMk09rIZwwZGEU2U3eue9q/image.png\"></a></div><p>When looking at the <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\">Documentation</a> it seems more like the operand stack is not even in the linear Memory and a the storage layout is uniformly defined. </p>\n<p>Which is the Case?<br>\nIs there documentation for which compiler uses which layout?<br>\nIs  WebAssembly with different Storage Layouts still deterministic in case of a buffer overflow?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f2feb9fabd6ede23c57555b9b06672bfa99559ba/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373964366638656231643138613934626236343535616464333130616565616239323561623836386464363338333334333332633964616434366633616437312f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\" title=\"wasm-micro-runtime/doc/memory_tune.md at main · bytecodealliance/wasm-micro-runtime\">wasm-micro-runtime/doc/memory_tune.md at main · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 450146653,
        "sender_full_name": "Lasse",
        "timestamp": 1720525923
    },
    {
        "content": "<p>The operand stack is completely separate from the linear memory and the wasm engine will ensure it isn't tampered with. The stack that figure is referring to is the emulated stack which contains values that need to be stored in the linear memory. For example because they got their address taken, or are too large to be placed on the operand stack or in locals. It doesn't contain return addresses and the like. As far as the wasm engine is concerned this emulated stack is just regular memory.</p>",
        "id": 450220592,
        "sender_full_name": "bjorn3",
        "timestamp": 1720542760
    },
    {
        "content": "<blockquote>\n<p>Is WebAssembly with different Storage Layouts still deterministic in case of a buffer overflow?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 450220678,
        "sender_full_name": "bjorn3",
        "timestamp": 1720542783
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"730619\">Lasse Krähner</span> has marked this topic as resolved.</p>",
        "id": 450395924,
        "sender_full_name": "Notification Bot",
        "timestamp": 1720603879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/206238-general/topic/.E2.9C.94.20storage.20Layout.20depending.20on.20Compiler.3F/near/450220678\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Is WebAssembly with different Storage Layouts still deterministic in case of a buffer overflow?</p>\n</blockquote>\n<p>Yes</p>\n</blockquote>\n<p>do you have literature/documentation for this?</p>",
        "id": 452035486,
        "sender_full_name": "Lasse",
        "timestamp": 1721215361
    },
    {
        "content": "<p>As far as the wasm engine is concerned, there is no such thing as a buffer overflow. It has no knowledge at all about how the wasm module uses it's linear memory, so it can't do anything like optimizing based on UB (wasm has no UB)</p>",
        "id": 452040206,
        "sender_full_name": "bjorn3",
        "timestamp": 1721216178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"730619\">@Lasse</span> I think the canonical citation for that would be the determism of Wasm overall (in addition to what bjorn3 said -- what happens inside is opaque, but each step is well-defined)</p>",
        "id": 452107826,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721229843
    },
    {
        "content": "<p>think of it like a CPU emulator stepping through an exploit sequence -- every instruction is still well-defined as the exploit happens \"inside the machine\"</p>",
        "id": 452108033,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721229898
    }
]