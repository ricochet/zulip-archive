[
    {
        "content": "<p>Hello all, I'm considering using WIT Bindgen's WIT format as an interface description language for a runtime I'm building.  I think the only thing I need is the parser, at <a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/parser\">https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/parser</a>.  </p>\n<p>This runtime is a lot like COM, we've got a bunch of instantiated WASM modules which collaborate via handles to interfaces that they implement.</p>\n<p>For example, suppose we have the following WASM module (somewhat simplified):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"n\">imports</span>:\n  <span class=\"nc\">fn</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interface_description</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"cm\">/* handle or null */</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">ihttp_handler</span><span class=\"p\">.</span><span class=\"n\">service_web_request</span><span class=\"p\">(</span><span class=\"n\">handle</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">request</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span><span class=\"w\"> </span><span class=\"cm\">/* response */</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Upon initialization, an instance of server.wasm can scan the namespace and import a handle from another wasm module that implements the <br>\nihttp_handler interface.  The call to do that would look something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">handler</span>: <span class=\"nc\">IHttpHandler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"p\">(</span><span class=\"s\">\"/handlers/echo_handler\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"... WIT interface definition of ihttp_handler ...\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cm\">/* there is some syntax sugar here, the only thing import actually returns is an integer handle, but this can be exposed in rust</span>\n<span class=\"cm\">as a trait object */</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">.</span><span class=\"n\">service_web_request</span><span class=\"p\">(</span><span class=\"s\">\"... HTTP request \"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// do something with the response</span>\n</code></pre></div>\n<p>I think it's sufficient for me to use the parser, all my runtime really cares about is that the IMPORTs exposed on the consuming module line up with the EXPORTs on the module which exposes the interface, both of which are using fully qualified names like ihttp_handler.service_web_request.  </p>\n<p>Some functions, like import above, would be availalbe to all modules from the runtime itself.</p>\n<p>What thoughts do you guys have of me using the parser crate like that?<br>\nThanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/parser\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0cff05624ca37d4fcf54d3f4f26adce2f37dba36\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383035656133363331386365363636616262336266623566346461363566313266656237353135363061653536623234646562366162373263353833636536352f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/crates/parser\" title=\"wit-bindgen/crates/parser at main · bytecodealliance/wit-bindgen\">wit-bindgen/crates/parser at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/crates/parser at main · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 288280093,
        "sender_full_name": "mamidon",
        "timestamp": 1656781856
    },
    {
        "content": "<p>We are all focused on building up the component model. If you're doing something else, that's fine, however I don't expect we'll be able to make changes to accommodate it.</p>",
        "id": 288287445,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1656792060
    },
    {
        "content": "<p>That's fine, I wouldn't expect any accommodations.  Is WIT itself deprecated?  If so, what's the component-model equivalent? <br>\nThanks</p>",
        "id": 288359202,
        "sender_full_name": "mamidon",
        "timestamp": 1656900278
    },
    {
        "content": "<p>Wit is the component model's IDL. It's not deprecated; it's the main show :-).</p>",
        "id": 288361344,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1656903213
    }
]