[
    {
        "content": "<p>Hello,</p>\n<p>Right now it is not permitted to have missing imports in a wasm module as it's considered corrupted and it will not execute. This means that for situations that for the scenario where you have in the wild various versions of a WASM host that exposes functions to be used by a binary, you need to create separate WASM files for each version that's out there.</p>\n<p>Things like this aren't possible right now:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vm_host_has_feature</span><span class=\"p\">(</span><span class=\"s\">\"feature_name\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">call_function_from_vm_because_it_should_exist_here</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">fallback_bhv</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Given this scenario is semi common (e.g. someone may want mods built for new versions of the game to work on the old version too. It's not really a good developer experience for people to maintain pipelines that output X binary versions that are guarded by <code>#[feature]</code> flags and it would be nice to allow imports to be missing.</p>\n<p>The behavior for when you call a missing imported function is that you get a trap.</p>\n<p>I have a couple of questions:<br>\n1) Why is the standard not allowing my proposed behavior? What's the reason to ask for all imports to be there?<br>\n2) Could we have a build option / feature flag on WASMTIME to allow for this?</p>\n<p>Thanks,<br>\nAlex</p>",
        "id": 224315776,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1611834905
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span>, this came up in a recent issue, too: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\">https://github.com/bytecodealliance/wasmtime/issues/2587</a></p>\n<p>The tl;dr is that we want to avoid a proliferation of non-standard interfaces that might tie the hands of the WASI standardization effort later on. However, I agree that there's a real need to satisfy here, too. Do you think <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765386694\">my suggestion</a> in that thread would be a viable solution for you? And if so, would you be up for adding support for such a flag?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587\" title=\"Wasmtime fails to run a .wasm built with rust-secp256k1, Wasmer can run it · Issue #2587 · bytecodealliance/wasmtime\">Wasmtime fails to run a .wasm built with rust-secp256k1, Wasmer can run it · Issue #2587 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is an issue where wasmtime seems to read a const pointer as a function pointer, when it is actually a pointer to a constant. Wasmer does not have this issue, which suggests it&#39;s a defect i...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765386694\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2587#issuecomment-765386694\" title=\"Wasmtime fails to run a .wasm built with rust-secp256k1, Wasmer can run it · Issue #2587 · bytecodealliance/wasmtime\">Wasmtime fails to run a .wasm built with rust-secp256k1, Wasmer can run it · Issue #2587 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is an issue where wasmtime seems to read a const pointer as a function pointer, when it is actually a pointer to a constant. Wasmer does not have this issue, which suggests it&#39;s a defect i...</div></div></div>",
        "id": 224317112,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1611835719
    },
    {
        "content": "<p>If that permits imports that aren't found to be replaced by a trap if called, allowing the module to run it is a great solution! Thanks <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p>I can start work to add it on my side.</p>\n<p>What would be the best way to propose this change to the WASM standard to relax that requirement on imports?</p>",
        "id": 224317294,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1611835855
    },
    {
        "content": "<blockquote>\n<p>I can start work to add it on my side.</p>\n</blockquote>\n<p>Great!</p>\n<blockquote>\n<p>What would be the best way to propose this change to the WASM standard to relax that requirement on imports?</p>\n</blockquote>\n<p>Hmm, good question. I'm not sure where it best fits in, but perhaps the WASI subgroup might be the right place? <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> and <span class=\"user-mention\" data-user-id=\"254124\">@Lin Clark</span>, what's your take on this?</p>",
        "id": 224318106,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1611836437
    },
    {
        "content": "<p>Yes, the WASI Subgroup has a design for <a href=\"https://github.com/WebAssembly/WASI/blob/main/design/optional-imports.md\">Optional Imports</a> which does this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/blob/main/design/optional-imports.md\" style=\"background-image: url(https://avatars.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/blob/main/design/optional-imports.md\" title=\"WebAssembly/WASI\">WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div>",
        "id": 224372900,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1611859334
    },
    {
        "content": "<p>Thanks both, I've raised this PR: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2637\">https://github.com/bytecodealliance/wasmtime/pull/2637</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2637\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2637\" title=\"Added unstable-allow-missing-imports and config flag and test by AlexEne · Pull Request #2637 · bytecodealliance/wasmtime\">Added unstable-allow-missing-imports and config flag and test by AlexEne · Pull Request #2637 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I&#39;ve added the possibility to allow missing imports in modules. This has been discussed here.\nTo re-iterate the need for this, there are use-cases where not all host programs VMs have been upda...</div></div></div>",
        "id": 225159794,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1612445838
    }
]