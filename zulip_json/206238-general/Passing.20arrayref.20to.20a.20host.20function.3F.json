[
    {
        "content": "<p>I'm getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">))))</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">array</span><span class=\"p\">)))</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>The wasm looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"cp\">$String</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">array</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"cp\">$debug</span><span class=\"p\">.</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">4</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"cp\">$String</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"host\"</span><span class=\"w\"> </span><span class=\"s\">\"debug\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$debug</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"cp\">$debug</span><span class=\"p\">.</span><span class=\"k\">type</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>And I'm registering the function like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">StoreData</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"n\">linker</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"host\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"debug\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StoreData</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Rooted</span><span class=\"o\">&lt;</span><span class=\"n\">ArrayRef</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"c1\">// ...</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>Also: what's the best way to access the bytes of the array as a string?</p>",
        "id": 489589719,
        "sender_full_name": "Talin",
        "timestamp": 1734478139
    },
    {
        "content": "<p>I think that might be a bug because that looks like it's expected to work, mind filing an issue?</p>\n<p>For getting the array as a string we need to add APIs to do that, they're not currently present on <code>ArrayRef</code> so you'd have to access it byte-by-byte (which probably isn't the speediest)</p>",
        "id": 489591890,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734479374
    },
    {
        "content": "<p>hm so my guess is that it's <code>(array mut i8)</code> vs <code>(array i8)</code>, we might not have anything in the API to match that</p>",
        "id": 489592134,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734479482
    },
    {
        "content": "<p>but if you try changing the type to <code>(array mut i8)</code> it may work for now?</p>",
        "id": 489592173,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734479511
    },
    {
        "content": "<p>(I could also be totally off)</p>",
        "id": 489592230,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734479523
    },
    {
        "content": "<p>Changing from <code>types.ty().array(&amp;StorageType::I8, false)</code> to <code>types.ty().array(&amp;StorageType::I8, true)</code>didn't seem to make any difference. Even the error message was the same.</p>",
        "id": 489599259,
        "sender_full_name": "Talin",
        "timestamp": 1734483693
    },
    {
        "content": "<p>Ah ok I'm just barking up the wrong tree then, we can properly investigate this in an issue</p>",
        "id": 489599554,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734483861
    },
    {
        "content": "<p>Bug filed: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9848\">https://github.com/bytecodealliance/wasmtime/issues/9848</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9848\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/002e15193e123da31ea132275dd37627a3adff21/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613735393264653763383161383533643635353436373735633031663062316663356531316532343761636431383030386562613730646131343832663161642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39383438&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9848\" title=\"Error linking to function that takes a GC array ref. 路 Issue #9848 路 bytecodealliance/wasmtime\">Error linking to function that takes a GC array ref. 路 Issue #9848 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I'm getting this error: types incompatible: expected type `(func (param (ref array (engine 5))))`, found type `(func (param (ref array)))` The wasm looks like this: (type $String (;3;) (array i8)) ...</div></div></div>",
        "id": 489599888,
        "sender_full_name": "Talin",
        "timestamp": 1734484103
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 489599947,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734484161
    }
]