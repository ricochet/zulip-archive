[
    {
        "content": "<p>Hello,</p>\n<p>We have a way to use a linker to add a WASI module.   <br>\nHowever, from what I can tell this method: <code>wasmtime_linker_module(linker, &amp;empty, _module)</code> magically instantiates the module.  <br>\nAs it is shown in the wasi.c example, calling the default method just works, without having a module instance.  <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/3715e19c67ab7e59fadf750a1de2ba48f1e6f4ce/examples/wasi/main.c#L84\">https://github.com/bytecodealliance/wasmtime/blob/3715e19c67ab7e59fadf750a1de2ba48f1e6f4ce/examples/wasi/main.c#L84</a></p>\n<p>I didn't manage to find a way on how to tell what the default method is (it seems to be fn main()  ) for a <code>main.rs</code> compiled with <code>cargo build --target wasm32-wasi</code>. But in case of a lib that has a: </p>\n<div class=\"codehilite\"><pre><span></span><code>#[no_mangle]\npub extern &quot;C&quot; fn main() {`\n</code></pre></div>\n\n\n<p>This <code>main</code> is not considered a default method. That's fine. It's surprising that I could call in a function returned by <code>wasmtime_linker_get_default</code> that is non-null in my lib case. So who knows what that called into, but it's not my main function :D.</p>\n<p>That being said, I would like to get my exports and find the <code>fn main()</code> somwhere in the export list. Is there some example code somewhere that can show me how this is done?   </p>\n<p>Also would calling <code>wasmtime_linker_instantiate(...)</code> instantiate my module twice? (as <code>wasmtime_linker_module</code> seems to do that already).</p>\n<p>I've found:</p>\n<div class=\"codehilite\"><pre><span></span><code>    wasm_extern_vec_t externs;\n    wasm_instance_exports(instance, &amp;externs);\n    assert(externs.size == 1);\n    wasm_func_t *gcd = wasm_extern_as_func(externs.data[0]);\n    assert(gcd != NULL);\n</code></pre></div>\n\n\n<p>But these are some opaque data structures and I can't tell what the names of the methods are.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3715e19c67ab7e59fadf750a1de2ba48f1e6f4ce/examples/wasi/main.c#L84\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3715e19c67ab7e59fadf750a1de2ba48f1e6f4ce/examples/wasi/main.c#L84\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 201964997,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593089922
    },
    {
        "content": "<p>I'd love to know the answer to it as well for my pet project <a href=\"https://github.com/kubkon/wasmtime-zig\">wasmtime-zig</a>. From some prelim research, but <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> can correct me here, I think we could search for an export by name using <code>wasmtime_caller_export_get</code>. As far as an example is concerned, I'm following <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>'s excellent <a href=\"https://github.com/bytecodealliance/wasmtime-go\">wasmtime-go</a> integration. In particular, here's the shim which wraps <code>wasmtime_caller_export_get</code> in Go: <a href=\"https://github.com/bytecodealliance/wasmtime-go/blob/main/shims.c#L28\">https://github.com/bytecodealliance/wasmtime-go/blob/main/shims.c#L28</a> Is that what you're after BTW?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kubkon/wasmtime-zig\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1519747?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kubkon/wasmtime-zig\" title=\"kubkon/wasmtime-zig\">kubkon/wasmtime-zig</a></div><div class=\"message_embed_description\">Zig embedding of Wasmtime. Contribute to kubkon/wasmtime-zig development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-go\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-go\" title=\"bytecodealliance/wasmtime-go\">bytecodealliance/wasmtime-go</a></div><div class=\"message_embed_description\">Go WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-go development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-go/blob/main/shims.c#L28\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-go/blob/main/shims.c#L28\" title=\"bytecodealliance/wasmtime-go\">bytecodealliance/wasmtime-go</a></div><div class=\"message_embed_description\">Go WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-go development by creating an account on GitHub.</div></div></div>",
        "id": 201965879,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1593090396
    },
    {
        "content": "<p>How did you create the wasmtime_caller_t*?<br>\nWhat I tried was:</p>\n<div class=\"codehilite\"><pre><span></span><code>    <span class=\"n\">wasm_func_t</span><span class=\"o\">*</span> <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"k\">nullptr</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_t</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n    <span class=\"n\">wasm_name_new_from_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s\">&quot;main&quot;</span><span class=\"p\">);</span>\n    <span class=\"k\">auto</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wasmtime_linker_get_default</span><span class=\"p\">(</span><span class=\"n\">_linker</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">empty</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">);</span>\n</code></pre></div>\n\n\n<p>This gets me back a method, but I am almost certain it's not the correct one, as it doesn't print anything and doesn't trigger any breakdpoint in the rust code that was used to compile it.</p>\n<p>The interesting thing is that using any random string in <code>wam_name_new_from_string(&amp;name, \"randomstuff\");</code>, is absolutely fine and I do still get a func back that's not nullptr that I can call with <code>wasmtime_func_call(</code></p>",
        "id": 201966450,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593090769
    },
    {
        "content": "<p>Oh, wait, that name is not the function name, but the module name from where the _default_ function is returned.</p>\n<p>It's not nullptr as the default is (in <code>linker.rs</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Otherwise return a no-op function.</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Func</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">FuncType</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201971110,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593092961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> FWIW dealing with the \"default export\" is mostly for wasi things</p>",
        "id": 201972866,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593093748
    },
    {
        "content": "<p>if your modules use wasi then you'll want to use that, otherwise you'll likely want to use the <code>wasmtime_linker_instantiate</code> API to get an instance back out</p>",
        "id": 201972902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593093764
    },
    {
        "content": "<p>otherwise there's Rust APIs for getting items from a <code>Linker</code>, but they may not be bound in the C API yet</p>",
        "id": 201972981,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593093805
    },
    {
        "content": "<p>So I want to have a method, that works with WASI and can have a way of returning wasm_func_t functions for things I marked as \"extern C\" in rust (the thing that's compiled to WASM). </p>\n<p>It's fine for now to say that it needs to be a <code>main()</code> from a rust binary. But I am not sure how to extract from a module functions that need WASI and a linker.</p>\n<p>I would have expected that get_function to return nullptr if it's not found tho, it's slightly confusing it returns a no-op</p>",
        "id": 201973448,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593094015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> the simplest thing to do today would be to make a <code>wasmtime_linker_t</code>, add wasi to it, then call <code>wasmtime_linker_instantiate</code> to get a <code>wasm_instance_t</code></p>",
        "id": 201974367,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094475
    },
    {
        "content": "<p>then you can iterate over the exports and work with the module</p>",
        "id": 201974375,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094481
    },
    {
        "content": "<p>that doesn't handle the reactor/command difference right now, but that's a relatively new concept and may not need to be handled by you just yet</p>",
        "id": 201974403,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094500
    },
    {
        "content": "<p>That seems great. I wasn't sure if <code>wasmtime_linker_instantiate</code> would duplicate the instance as <code>wasmtime_linker_module</code> seems to create an instance under the hood (without exposing it to C)</p>",
        "id": 201974591,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593094589
    },
    {
        "content": "<p>Thanks for all the help Alex</p>",
        "id": 201974601,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593094597
    },
    {
        "content": "<p>oh it would duplicate the instance</p>",
        "id": 201974878,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094711
    },
    {
        "content": "<p><code>wasmtime_linker_module</code> registers a module to be instantiated by the linker automatically under a given name</p>",
        "id": 201974908,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094726
    },
    {
        "content": "<p>whereas <code>wasmtime_linker_instantiate</code> will create a new instance and return it, not registering anything with the linker</p>",
        "id": 201974945,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094748
    },
    {
        "content": "<p>Oh great then. Like this it does exactly what i need. I thought the call to  <code>wasmtime_linker_module</code> was mandatory. If I can use linker_instrantiate instead it's perfect</p>",
        "id": 201975246,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593094860
    },
    {
        "content": "<p>ah yeah <code>wasmtime_linker_module</code> is just optional!</p>",
        "id": 201975332,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593094895
    },
    {
        "content": "<p>As for <code>linker.rs</code>, get_default(), it should probably return an Err() if there's no default method, having a no-op  as the default makes kind of hard on the users of the library to figure out why things don't work as expected and there are probably not so many cases when that's actually desirable (running a no-op method).<br>\nThe signature is already <code>pub fn get_default(&amp;self, module: &amp;str) -&gt; Result&lt;Func&gt; {</code></p>",
        "id": 201977656,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593095974
    }
]