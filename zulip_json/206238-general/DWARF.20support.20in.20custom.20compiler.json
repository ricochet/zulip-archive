[
    {
        "content": "<p>I'm trying to add DWARF support to my Java-to-Wasm compiler. However, when I try to run generated wasm file in gdb/wasmtime, I got no result, <code>.debug_X</code> sections are silently ignored. I tried to verify DWARF sections using following approach: (1) create an ELF file (2) extract <code>.debug_X</code> sections into files (3) add these sections to ELF file using objcopy (4) use objdump/dwarfdump/llvm-dwarfdump to verity DWARF. So my question is: what are further steps to debug my issue? Is there any way to get more logs from wasmtime related to DWARF supports?</p>",
        "id": 311007435,
        "sender_full_name": "Alexey Andreev",
        "timestamp": 1668859853
    },
    {
        "content": "<p>Update: seems that wasmtime recognizes DW_TAG_subprogram, however no line information available.</p>",
        "id": 311008273,
        "sender_full_name": "Alexey Andreev",
        "timestamp": 1668860194
    },
    {
        "content": "<p>Did you pass <code>-g</code> to wasmtime to enable debuginfo translation?</p>",
        "id": 311031769,
        "sender_full_name": "bjorn3",
        "timestamp": 1668870597
    },
    {
        "content": "<p>You can't just copy the debuginfo from the wasm file to compiled object files. The debuginfo needs to be translated by the wasm engine to fixup references and translate variable locations.</p>",
        "id": 311031888,
        "sender_full_name": "bjorn3",
        "timestamp": 1668870655
    },
    {
        "content": "<p>Yes, I pass <code>-g</code> to wasmtime</p>\n<blockquote>\n<p>You can't just copy the debuginfo from the wasm file to compiled object files</p>\n</blockquote>\n<p>Sure. That was not my intention. I just wanted to verify generated DWARF sections. I know only tools from non-Wasm world, that's why I needed this trick. I create ELF file from random simple C code and then embed DWARF there, since objdump only works with ELF. Of course, I'm not trying to debug this.</p>",
        "id": 311044708,
        "sender_full_name": "Alexey Andreev",
        "timestamp": 1668876783
    },
    {
        "content": "<p>Update: I tried to emit DW_LNE_END_SEQUENCE after each function, not at the end of code section, and got following panic from wasmtime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">explicit</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">transform</span><span class=\"o\">/</span><span class=\"n\">line_program</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">160</span>:<span class=\"mi\">26</span><span class=\"w\"></span>\n<span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n   <span class=\"mi\">0</span>: <span class=\"nc\">rust_begin_unwind</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"n\">a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">584</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>: <span class=\"nc\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic_fmt</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"n\">a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">142</span>:<span class=\"mi\">14</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">2</span>: <span class=\"nc\">core</span>::<span class=\"n\">panicking</span>::<span class=\"n\">panic</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"n\">a55dd71d5fb0ec5a6a3a9e8c27b2127ba491ce52</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">48</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">3</span>: <span class=\"nc\">wasmtime_cranelift</span>::<span class=\"n\">debug</span>::<span class=\"n\">transform</span>::<span class=\"n\">line_program</span>::<span class=\"n\">clone_line_program</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>: <span class=\"nc\">wasmtime_cranelift</span>::<span class=\"n\">debug</span>::<span class=\"n\">transform</span>::<span class=\"n\">unit</span>::<span class=\"n\">clone_unit</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">5</span>: <span class=\"nc\">wasmtime_cranelift</span>::<span class=\"n\">debug</span>::<span class=\"n\">transform</span>::<span class=\"n\">transform_dwarf</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">6</span>: <span class=\"nc\">wasmtime_cranelift</span>::<span class=\"n\">debug</span>::<span class=\"n\">write_debuginfo</span>::<span class=\"n\">emit_dwarf</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"mi\">7</span>: <span class=\"o\">&lt;</span><span class=\"n\">wasmtime_cranelift</span>::<span class=\"n\">compiler</span>::<span class=\"n\">Compiler</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">wasmtime_environ</span>::<span class=\"n\">compilation</span>::<span class=\"n\">Compiler</span><span class=\"o\">&gt;</span>::<span class=\"n\">emit_obj</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 311045826,
        "sender_full_name": "Alexey Andreev",
        "timestamp": 1668877332
    },
    {
        "content": "<p>Ok, I found the reason. I added <code>DW_LNE_END_SEQUENCE</code> after the function, even if the function did not produce any line instructions. And this did the trick. So looks like wasmtime rejects <code>.debug_line</code> section with only one large sequence, it requires a separate sequence for each subprogram.</p>",
        "id": 311060378,
        "sender_full_name": "Alexey Andreev",
        "timestamp": 1668885891
    }
]