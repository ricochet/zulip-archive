[
    {
        "content": "<p>Hi guys!<br>\nI’ve been playing around with rust, wasmtime and the wasi api for learning(and maybe future projects).<br>\nSomething I can’t see to figure out is how to implement a virtual fs using wasi. While searching I found that wasi used to have a virtfs module that -maybe- could fit in my use case, but it looks like it was removed from the crate. What I basically want to do involves the following structure:<br>\n/foo - an ordinary, preopened-directory, with read and write capabilities.<br>\n/bar - an in-memory directory.<br>\n/bar/hello.txt - an in-memory file the guest can read to.</p>\n<p>Sorry if this sounds like a noob question, I’m just starting in Rust + Wasm world and any starting point or help would be highly apreciated🤗</p>",
        "id": 265403709,
        "sender_full_name": "Dan Soares",
        "timestamp": 1639812347
    },
    {
        "content": "<p>You can implement <code>WasiFile</code> and <code>WasiDir</code> for your own type to represent <code>/bar</code> and <code>/bar/hello.txt</code>. You can then mount it by calling <code>.push_preopened_dir()</code> on the <code>WasiCtx</code>.</p>",
        "id": 265414053,
        "sender_full_name": "bjorn3",
        "timestamp": 1639827850
    },
    {
        "content": "<p>Hi! There are ways to do this, as bjorn3 mentioned. It also turns out that, as convenient as they can be to get things started with one wasm component, filesystem-based APIs make it difficult to have multiple wasm components that work together. The wasm component model is designed to support virtualization of APIs, with the idea being that instead of writing filesystem-based APIs, you can just write regular APIs, using the new wit and wit-bindgen, and have the same ability to swap out implementations.</p>",
        "id": 265419411,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1639835285
    },
    {
        "content": "<p>dan and I rewrote the wasi-common crate last winter. the virtfs did end up getting removed as part of the rewrite because all of the internal interfaces changed. if you want a starting point, i have one here, its complete except for symlinks (which turn out to be a pretty big part of getting a filesystem implementation right under wasi) <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2635\">https://github.com/bytecodealliance/wasmtime/pull/2635</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2635\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7828d887789d23b08327fd60dbe7473504349603\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663334343163333566393138666662613064383535343565376335643935633034633735316332306136313861306432326134316636313333386236393636372f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f32363335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2635\" title=\"wasi virtual filesystem by pchickey · Pull Request #2635 · bytecodealliance/wasmtime\">wasi virtual filesystem by pchickey · Pull Request #2635 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">An in-memory filesystem implementation for the wasi-common crate.</div></div></div>",
        "id": 265431141,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1639850050
    },
    {
        "content": "<p>if your virtfs doesnt need symlinks, this one may work for you</p>",
        "id": 265431150,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1639850069
    },
    {
        "content": "<p>i havent touched that PR in a long time. it looks like there are some other incomplete parts as well</p>",
        "id": 265431222,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1639850164
    },
    {
        "content": "<p>but at any rate, the approach taken by that PR is to implement the virtfs as native rust code. the component model, which is in progress but not quite ready for production use yet, will make it possible to implement a virtfs as webassembly code.</p>",
        "id": 265431353,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1639850369
    }
]