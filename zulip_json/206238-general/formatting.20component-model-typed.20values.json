[
    {
        "content": "<p>Are there any conventions yet for formatting component-model-typed values to text? Like, a common way of rendering variant/result/flags/etc. to JSON, or some other format?</p>",
        "id": 385737284,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1692300139
    },
    {
        "content": "<p>I've been working on this JSON repr: <a href=\"https://hackmd.io/@lann/rJFNJ2Mhn\">https://hackmd.io/@lann/rJFNJ2Mhn</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/@lann/rJFNJ2Mhn\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/be5883ebc78216e6d97b1f14ef5fbbb5049814a8\\/68747470733a2f2f7777772e67726176617461722e636f6d2f6176617461722f35386537303761353133356136613738313666373336386266643564396134663f733d343030)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/@lann/rJFNJ2Mhn\" title=\"Component JSON - HackMD\">Component JSON - HackMD</a></div><div class=\"message_embed_description\">For the best language interoperability, numbers &gt; (2^53 â€“ 1) or &lt; -(2^53 - 1) should be serialized as base-10 strings.</div></div></div>",
        "id": 385745044,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692303635
    },
    {
        "content": "<p>I tried to follow web api conventions wrt e.g. <code>result</code>s, which may make it a little odd-looking to some</p>",
        "id": 385745178,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692303704
    },
    {
        "content": "<p>How well do the representation of specialized types map to their despecialized equivalents as defined in e.g. the Canonical ABI doc?</p>",
        "id": 386391608,
        "sender_full_name": "Robin Brown",
        "timestamp": 1692624704
    },
    {
        "content": "<p>Not well; I prioritized concision and some broad \"JSON conventionality\"</p>",
        "id": 386395221,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692625665
    },
    {
        "content": "<p>Note though that WIT itself can't represent all of the despecialized equivalents since several of them use numeric field/variant labels.</p>",
        "id": 386395538,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692625747
    },
    {
        "content": "<p>I have an initial implementation of the above serialization format: <a href=\"https://github.com/lann/wasmtime-component-serde\">https://github.com/lann/wasmtime-component-serde</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasmtime-component-serde\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9d831747726854ea024be63179f5576497fb053f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363231356233633230373163633730626362303439393564616332373966363765323830373238336631363439343834393263613138366164306363393538362f6c616e6e2f7761736d74696d652d636f6d706f6e656e742d7365726465)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasmtime-component-serde\" title=\"GitHub - lann/wasmtime-component-serde\">GitHub - lann/wasmtime-component-serde</a></div><div class=\"message_embed_description\">Contribute to lann/wasmtime-component-serde development by creating an account on GitHub.</div></div></div>",
        "id": 390589852,
        "sender_full_name": "Lann Martin",
        "timestamp": 1694549820
    },
    {
        "content": "<p>Cool!</p>",
        "id": 390592262,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694550853
    },
    {
        "content": "<p>Perhaps at some point we should move <code>wasmtime::component::{Type, Val}</code> out into a separate crate so that tools like this can use them without pulling in all of wasmtime</p>",
        "id": 390592342,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694550898
    },
    {
        "content": "<p>You currently can't construct recursively-defined <code>Type</code>s without instantiating a (dummy) component either.</p>",
        "id": 390592669,
        "sender_full_name": "Lann Martin",
        "timestamp": 1694551034
    },
    {
        "content": "<p>At least not via publicly documented interfaces that I've seen.</p>",
        "id": 390592726,
        "sender_full_name": "Lann Martin",
        "timestamp": 1694551071
    },
    {
        "content": "<p>I had to resort to <a href=\"https://github.com/lann/wasmtime-component-serde/blob/main/tests/types.wit#L2\">this</a> and <a href=\"https://github.com/lann/wasmtime-component-serde/blob/854fa1fafd0735cb94ee6319859f65b07ce5f56f/tests/round_trip.rs#L60-L79\">this</a> to test complex types.</p>",
        "id": 390592952,
        "sender_full_name": "Lann Martin",
        "timestamp": 1694551188
    },
    {
        "content": "<p>I'm a little surprised serde-json doesn't handle things like serializing big numbers or Infinity into strings automatically. I think that means that the comment is right; we may eventually need different serde serializations for different backends.</p>",
        "id": 390594312,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694551797
    },
    {
        "content": "<p>wrt moving component::{Type, Val} out to a separate crate, it would also be really cool if we could move the <code>Lift, Lower, ComponentVal</code> traits as well, so that wasmtime-wit-bindgen wouldnt actually imply a dependency on wasmtime unless the user wants it. that would let us make wasmtime-wasi work across runtimes again</p>",
        "id": 390598009,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694553292
    },
    {
        "content": "<p>well, again as in, like wasi-common did before i got rid of lucet compatibility in wiggle.</p>",
        "id": 390598090,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694553331
    },
    {
        "content": "<p>i believe the story was that wasm3 was using wasi-common somewhere? tbh i cant remember who reported they were sad that i broke it</p>",
        "id": 390598212,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694553374
    },
    {
        "content": "<p>but idk, maybe the counter-argument is that ComponentVal is a huge chunk of the component runtime's complexity and it cant be extracted. i havent tried to do it.</p>",
        "id": 390598520,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694553525
    }
]