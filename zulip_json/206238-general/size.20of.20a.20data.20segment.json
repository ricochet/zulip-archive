[
    {
        "content": "<p>we're trying to figure out if it's possible to retrieve the size of a data segment or if we need to use hacks. it appears that we need to use hacks?</p>",
        "id": 490590740,
        "sender_full_name": "Soni L.",
        "timestamp": 1734991579
    },
    {
        "content": "<p>can't believe there isn't a data.length opcode</p>",
        "id": 490828263,
        "sender_full_name": "Soni L.",
        "timestamp": 1735181922
    },
    {
        "content": "<p>if you're looking for wasm memory, there is <a href=\"https://webassembly.github.io/spec/core/exec/instructions.html#exec-memory-size\"><code>memory.size</code></a></p>",
        "id": 490830994,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1735184773
    },
    {
        "content": "<p>this is the problem:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>    <span class=\"p\">(</span><span class=\"k\">data</span> <span class=\"nv\">$HelloWorld</span> <span class=\"s2\">\"Hello, World!</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"nv\">$HelloWorld-len</span> <span class=\"kt\">i32</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">14</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 490896472,
        "sender_full_name": "Soni L.",
        "timestamp": 1735232044
    },
    {
        "content": "<p>anyway, there's probably a reason nobody uses wat</p>",
        "id": 490896551,
        "sender_full_name": "Soni L.",
        "timestamp": 1735232109
    },
    {
        "content": "<p>wat is meant to be a 1-to-1 representation of the wasm binary format, and the general idea with the binary format is that (like other binary formats for code) it should be efficient and possible to emit from a tool, not necessarily flexible or easy to write in a way that human-targeting PLs are. (It's still nicer than many bytecodes but that's not the primary purpose)</p>\n<p>Said another way: the producer of a Wasm module can know how long its data segments are, because it emits them; so the binary format doesn't need an operator for this, and it would be unnecessary complexity for the VM to implement.</p>",
        "id": 491019838,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1735324727
    },
    {
        "content": "<p>the VM already needs to know how long data segments are, due to memory.init instruction. it's just not currently exposed (in an useful way - trapping isn't useful) to the wasm guest for some reason.</p>",
        "id": 491025980,
        "sender_full_name": "Soni L.",
        "timestamp": 1735328949
    },
    {
        "content": "<p>Sure -- there's plenty that the VM knows about the guest that it could, in theory, expose to the guest. The question with a virtual-machine design is \"why\" rather than \"why not\" -- again, Wasm is designed to be a universal portable bytecode, not a convenient and friendly programming language for humans to write.</p>\n<p>I'm offering a descriptive reason for why things are how they are, in my understanding; not trying to have a discussion on the merits; for the latter I'd encourage you to file issues on the Wasm design repo and drive an instruction-set extension (and receive much more feedback in the CG) if you're so inclined. The best we can offer here is \"an interpretation of upstream\".</p>",
        "id": 491029232,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1735331380
    }
]