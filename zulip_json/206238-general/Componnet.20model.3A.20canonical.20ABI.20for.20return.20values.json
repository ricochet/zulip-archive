[
    {
        "content": "<p>Hi  <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> I have a question regard to the return values in the cannon-lift. The proposal simply put a \"i32\" type as flat_results. I wonder if we should be more specific about it? Like it is value or pointer? I assume if the ft has single primitive type as return, it can be a value. for other situation,  it is probabaly a pointer to flatten items.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">MAX_FLAT_PARAMS</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">16</span>\n<span class=\"n\">MAX_FLAT_RESULTS</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">flatten_functype</span><span class=\"p\">(</span><span class=\"n\">ft</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">)</span>:\n  <span class=\"nc\">flat_params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">flatten_types</span><span class=\"p\">(</span><span class=\"n\">ft</span><span class=\"p\">.</span><span class=\"n\">param_types</span><span class=\"p\">())</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">flat_params</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MAX_FLAT_PARAMS</span>:\n    <span class=\"nc\">flat_params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">i32</span><span class=\"o\">'</span><span class=\"p\">]</span>\n\n<span class=\"w\">  </span><span class=\"n\">flat_results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">flatten_types</span><span class=\"p\">(</span><span class=\"n\">ft</span><span class=\"p\">.</span><span class=\"n\">result_types</span><span class=\"p\">())</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">(</span><span class=\"n\">flat_results</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MAX_FLAT_RESULTS</span>:\n    <span class=\"nc\">match</span><span class=\"w\"> </span><span class=\"n\">context</span>:\n      <span class=\"nc\">case</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">lift</span><span class=\"o\">'</span>:\n        <span class=\"nc\">flat_results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">i32</span><span class=\"o\">'</span><span class=\"p\">]</span>\n<span class=\"w\">      </span><span class=\"n\">case</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">lower</span><span class=\"o\">'</span>:\n        <span class=\"nc\">flat_params</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">i32</span><span class=\"o\">'</span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"n\">flat_results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">CoreFuncType</span><span class=\"p\">(</span><span class=\"n\">flat_params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">flat_results</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 388421600,
        "sender_full_name": "Wang Xin",
        "timestamp": 1693525038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268650\">@Wang Xin</span> thanks for the question: in this case where we have more than MAX_FLAT_RESULTS (currently 1, due to lack of multi-return support in certain parts of the LLVM toolchain), the <code>i32</code> is always a pointer to linear memory that will hold all the return values as a tuple.  (Once multi-return support is implemented in the right places, we can increase MAX_FLAT_RESULTS or add a <code>canonopt</code> to do that.)</p>",
        "id": 388421924,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1693525244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span>  Thanks!  I got it.</p>",
        "id": 388422554,
        "sender_full_name": "Wang Xin",
        "timestamp": 1693525681
    }
]