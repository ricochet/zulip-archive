[
    {
        "content": "<p>Hi All,</p>\n<p>I’ve started looking into tooling support for donut wrapping, where a component <code>A</code> imports another component <code>B</code> and instantiates <code>B</code> inside <code>A</code>. This allows <code>A</code> to both provide <code>B</code>’s imports and use its exports. Donut wrapping is already supported by the component model but not by tooling. Here’s an example (by Luke Wagner) of how it’s done in WAT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"cp\">$M</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"cp\">$m</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"cp\">$M</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"cp\">$core_tbl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"cp\">$m</span><span class=\"w\"> </span><span class=\"s\">\"tbl\"</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$core_f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"cp\">$m</span><span class=\"w\"> </span><span class=\"s\">\"f\"</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$core_f</span><span class=\"p\">))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"guest\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"cp\">$Guest</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"cp\">$guest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"cp\">$Guest</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"f\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$f</span><span class=\"p\">))))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$g</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"cp\">$guest</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$core_g</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$g</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"cp\">$Util</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"s\">\"tbl\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"cp\">$t</span><span class=\"w\"> </span><span class=\"n\">funcref</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$g</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.))</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"cp\">$t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"cp\">$g</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"cp\">$util</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"cp\">$Util</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"tbl\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"cp\">$core_tbl</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"g\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$core_g</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Here, a core instance <code>$m</code> is providing imports to <code>$guest</code> and calls its exports through a core table via <code>$Util</code>.</p>\n<h3>Approach</h3>\n<p>I’m thinking about following these steps:</p>\n<ul>\n<li>\n<p>First, we need to express “component imports” in WIT. For this, I suggest extending WIT to support <code>import world w;</code> statements in world definitions, where a world imports a component described by a world <code>w</code>.</p>\n</li>\n<li>\n<p>Next, <code>wit-parser</code> must be modified to support the import world statement, and <code>wit-component</code> must be modified accordingly. This includes adding <code>WorldKey::World</code> and <code>WorldItem::World</code> cases in <code>wit-parser</code> and changing <code>Resolve</code> accordingly. This will ultimately result in <code>(import \"guest\" (component ...))</code> in CM.</p>\n</li>\n<li>\n<p>Then, <code>wit-bindgen</code> must be changed to consume importing worlds and to generate the component (I haven’t looked into this carefully yet).</p>\n</li>\n</ul>\n<h3>Questions</h3>\n<p>I’d like to hear your thoughts and get your feedback before starting the implementation. Some questions are:</p>\n<ul>\n<li>\n<p>What are your thoughts about the suggested <code>import world</code> syntax? What are some possible alternatives?</p>\n</li>\n<li>\n<p>Is there a process that I should follow (including GitHub issues, reference implementations, etc.)?</p>\n</li>\n<li>\n<p>Am I missing anything in the way that I’m approaching this problem? Are there other alternative or more efficient ways of doing this?</p>\n</li>\n</ul>\n<p>Thanks!</p>",
        "id": 444098654,
        "sender_full_name": "Salman Saghafi",
        "timestamp": 1718139104
    }
]