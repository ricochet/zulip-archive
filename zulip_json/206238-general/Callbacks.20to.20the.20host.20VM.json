[
    {
        "content": "<p>Hello, </p>\n<p>I was looking through the examples here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c</a><br>\nI don't understand how the wasm program \"knows\" that the registered import is the one for the <code>hello</code> function.</p>\n<p>Other VMs have to name the functions registered (e.g. wasm3 linker). But I find no such thing for wasmtime. </p>\n<p>Does this mean that imports are matched in order with the imports provided to this method?:</p>\n<div class=\"codehilite\"><pre><span></span><code>  const wasm_extern_t *imports[] = { wasm_func_as_extern(hello) };\n  error = wasmtime_instance_new(store, module, imports, 1, &amp;instance, &amp;trap);\n</code></pre></div>\n\n\n<p>This seems like a difficult way to manage an import table. Is there another way?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/hello.c\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 202426551,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593519339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span> ah yeah so <code>wasm_instance_new</code> (and <code>wasmtime_instance_new</code>) require a 1:1 mapping from the module's imports to the list of imports provided (you can see some info on that at <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html#method.new\">https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Instance.html#method.new</a>)</p>",
        "id": 202440618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593526308
    },
    {
        "content": "<p>for a more ergonomic or string-based API, though, I'd recommend using the <code>wasmtime_linker_t</code> type which allows you to specify imports by name and then instantiate a module via that name lookup</p>",
        "id": 202440694,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593526329
    },
    {
        "content": "<p>Alex, you're absolutely right!  Thanks for all the help btw, and sorry for all the newbish questions :D</p>",
        "id": 202443048,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593527424
    },
    {
        "content": "<p>No worries at all! This is also on us for not having a documented C API and a pretty limited number of examples :)</p>",
        "id": 202443224,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593527510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298375\">@Alexandru Ene</span>  to add to what Alex said, the example you mentioned uses the official <a href=\"https://github.com/WebAssembly/wasm-c-api\">Wasm C-API</a> so that determines how this works. Better documentation would help, of course! <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasm-c-api\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasm-c-api\" title=\"WebAssembly/wasm-c-api\">WebAssembly/wasm-c-api</a></div><div class=\"message_embed_description\">Wasm C API prototype. Contribute to WebAssembly/wasm-c-api development by creating an account on GitHub.</div></div></div>",
        "id": 202472300,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1593539766
    },
    {
        "content": "<p>Yup, I did spend some time even in the linker api as I even had a PR on it, but somehow missed that it is available for linking host functions :D .</p>",
        "id": 202472843,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1593540017
    }
]