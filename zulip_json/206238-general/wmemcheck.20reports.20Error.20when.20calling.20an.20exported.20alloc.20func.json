[
    {
        "content": "<p>For a Wasm that exports an alloc function so that the host can alloc memory and then copy bytes into guest:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">alloc</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">Layout</span><span class=\"p\">::</span><span class=\"n\">from_size_align_unchecked</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When the host using the Rust embedding API to call this function in wasmtime, and <code>wmemcheck</code> is enabled, I got an error:</p>\n<blockquote>\n<p>Error: error while executing at wasm backtrace:<br>\n    0:   0x83 - test_wmemcheck.wasm!alloc<br>\n    1: 0x2a68 - test_wmemcheck.wasm!alloc.command_export</p>\n<p>Caused by:<br>\n    Load out of bounds at addr 0x100000 of size 1</p>\n</blockquote>\n<p>I have reduced both the host code and the guest Wasm code to a minimal example, and it still reports error. What is the reason behind this?</p>",
        "id": 490480682,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1734944923
    },
    {
        "content": "<p>Could you post the minimal example?</p>",
        "id": 490532319,
        "sender_full_name": "Lann Martin",
        "timestamp": 1734965695
    },
    {
        "content": "<p>The host code is from the example code in the main doc</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">wmemcheck</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"/home/x/wasm32-unknown-unknown/release/test_wmemcheck.wasm\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a `Linker` which will be later used to instantiate this module.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Host functionality is defined by name within the `Linker`.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"host\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"host_func\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Got {} from WebAssembly\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"my host state is: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// All wasm objects operate within the context of a \"store\". Each</span>\n<span class=\"w\">    </span><span class=\"c1\">// `Store` has a type parameter to store host-specific data, which in</span>\n<span class=\"w\">    </span><span class=\"c1\">// this case we're using `4` for.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"alloc\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// And finally we can call the wasm!</span>\n<span class=\"w\">    </span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The wasm code is compiled to wasip1 and unknown-unknown and both reports error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Allocate memory.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Safety</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// See [`std::alloc::GlobalAlloc::alloc`].</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">alloc</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">Layout</span><span class=\"p\">::</span><span class=\"n\">from_size_align_unchecked</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n\n<span class=\"sd\">/// Deallocate memory.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Safety</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// See [`std::alloc::GlobalAlloc::dealloc`].</span>\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">dealloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">dealloc</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">ptr</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">alloc</span><span class=\"p\">::</span><span class=\"n\">Layout</span><span class=\"p\">::</span><span class=\"n\">from_size_align_unchecked</span><span class=\"p\">(</span><span class=\"n\">len</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 490533761,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1734966269
    }
]