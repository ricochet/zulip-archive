[
    {
        "content": "<p>Hey folks, I'd like to have your opinions on <a href=\"https://github.com/AssemblyScript/universal-strings\">https://github.com/AssemblyScript/universal-strings</a> and what your thoughts are about the foregoing discussion in <a href=\"https://github.com/WebAssembly/gc/issues/145\">https://github.com/WebAssembly/gc/issues/145</a>. In particular I'd like to understand the potential strategic conflicts leading to tough discussions like these over something that might well be a generally superior solution benefiting the entire ecosystem of (managed) languages and developers? Feel free to PM me if there's non-public intel you'd like to share. Really want to understand the big picture better.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/AssemblyScript/universal-strings\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/28916798?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/AssemblyScript/universal-strings\" title=\"AssemblyScript/universal-strings\">AssemblyScript/universal-strings</a></div><div class=\"message_embed_description\">Document scoped to discussion of Universal Strings in WebAssembly - AssemblyScript/universal-strings</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/gc/issues/145\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/gc/issues/145\" title=\"GC story for strings? · Issue #145 · WebAssembly/gc\">GC story for strings? · Issue #145 · WebAssembly/gc</a></div><div class=\"message_embed_description\">As of the MVP document, strings can be expressed as either an (array i8) or (array i16) per a language&#39;s string encoding, but with only one character at a time being accessible with array.get a...</div></div></div>",
        "id": 212927104,
        "sender_full_name": "Deleted",
        "timestamp": 1602352215
    },
    {
        "content": "<ol>\n<li>\n<p>It doesn't support UTF-8, which Rust mandates for strings. While the proposal suggests sanitizing the string at the boundary, this would require an unnecessary validation step when both sides are guaranteed to produce an UTF-8 string.</p>\n<blockquote>\n<p>Avoid alloc+copy-&gt;garbage at the boundary in between two Wasm GC-enabled languages and/or JavaScript</p>\n</blockquote>\n</li>\n<li>\n<p>While this is the case for GC-enabled languages, for non-GC-enabled languages it will require two copies instead of a single one.</p>\n</li>\n</ol>",
        "id": 212954725,
        "sender_full_name": "bjorn3",
        "timestamp": 1602403767
    },
    {
        "content": "<p>Thanks! There is indeed a validation step necessary in this case, with <a href=\"https://github.com/AssemblyScript/universal-strings/pull/2\">https://github.com/AssemblyScript/universal-strings/pull/2</a> proposing an idea to avoid <em>redundant</em> validation steps or validating implicitly. Also note that even with any alternative there will be a validation step somewhere iff the binding specified either UTF-8 or UTF-16, i.e. enforcing well-formedness, because one has to guarantee the invariant somehow. Also open to further ideas! Regarding 2. I don't quite see where there are two copies, and how it differs from let's say UTF-16 to UTF-16. Can you elaborate where you are seeing the issue, and how it is less efficient than interface types for example?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/AssemblyScript/universal-strings/pull/2\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/28916798?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/AssemblyScript/universal-strings/pull/2\" title=\"Mention an &quot;is_valid&quot; bit can save work by kripken · Pull Request #2 · AssemblyScript/universal-strings\">Mention an \"is_valid\" bit can save work by kripken · Pull Request #2 · AssemblyScript/universal-strings</a></div><div class=\"message_embed_description\">GitHub is home to over 50 million developers working together to host and review code, manage projects, and build software together.</div></div></div>",
        "id": 212971548,
        "sender_full_name": "Deleted",
        "timestamp": 1602433427
    },
    {
        "content": "<p>There are two copies as you first have to copy the string from linear memory to a stringref and then back to linear memory in the other module.</p>",
        "id": 212971676,
        "sender_full_name": "bjorn3",
        "timestamp": 1602433676
    },
    {
        "content": "<p>I see now, interesting. Very good point, agree that this should be avoided! Have ideas already :)</p>",
        "id": 212972275,
        "sender_full_name": "Deleted",
        "timestamp": 1602434679
    },
    {
        "content": "<p>One implicit mechanism I can imagine is if there is a <code>string.new</code> at one side of the boundary, and a <code>string.lower</code> immediately at the other, the engine can copy from the source to the target. Anything more formalized than that achieving the same will do as well.</p>",
        "id": 212972429,
        "sender_full_name": "Deleted",
        "timestamp": 1602434965
    },
    {
        "content": "<p>Interesting observation there is that a module does not even have to fully support GC for this to work, and is the common case in systems languages using linear memory exclusively. May just legalize <code>string.new</code> and <code>string.lower</code> at the boundary independently of GC.</p>",
        "id": 212973185,
        "sender_full_name": "Deleted",
        "timestamp": 1602436218
    },
    {
        "content": "<p>Here you go: <a href=\"https://github.com/AssemblyScript/universal-strings#integration-with-linear-memory-based-languages\">https://github.com/AssemblyScript/universal-strings#integration-with-linear-memory-based-languages</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/AssemblyScript/universal-strings#integration-with-linear-memory-based-languages\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/28916798?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/AssemblyScript/universal-strings#integration-with-linear-memory-based-languages\" title=\"AssemblyScript/universal-strings\">AssemblyScript/universal-strings</a></div><div class=\"message_embed_description\">Document scoped to discussion of Universal Strings in WebAssembly - AssemblyScript/universal-strings</div></div></div>",
        "id": 212975328,
        "sender_full_name": "Deleted",
        "timestamp": 1602439586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"333713\">@dcode</span> Modules are typically compiled separately. When the compiler sees a <code>string.new</code> being passed to an import, it doesn't know whether the export will do a <code>string.lower</code>. It'd have to emit code to create a GC object to pass, because that might be what the export needs.</p>",
        "id": 212977721,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602443703
    },
    {
        "content": "<p>Good point, yeah. Perhaps the engine may create both entry points upon compilation, and use the optimized one where it sees fit?</p>",
        "id": 212978305,
        "sender_full_name": "Deleted",
        "timestamp": 1602444682
    },
    {
        "content": "<p>In order to let the linker pick the which version to use at link time, while avoiding duplicating the entire function, the compiler would presumably split the code which makes the call into a separate function.</p>",
        "id": 212979480,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602446704
    },
    {
        "content": "<p>Suppose we call these split-out funtions the \"adapter functions\"</p>",
        "id": 212979491,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602446740
    },
    {
        "content": "<p>Heh, nice, fair point, just that these are taken care of by the engine, i.e. one does not have to author, ship, publish or install adapter functions (per environment), and there is zero size overhead in modules.</p>",
        "id": 212979850,
        "sender_full_name": "Deleted",
        "timestamp": 1602447294
    },
    {
        "content": "<p>Except that tools auto-generate these so developers don't author them manaully, and there's no extra work to \"ship, publish, or install\", and they're not per-environment.</p>",
        "id": 213056649,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602518499
    },
    {
        "content": "<p>The code size part does get to an interesting design question -- should wasm define a fixed set of supported string formats, or should it let source languages define their own formats?</p>",
        "id": 213057007,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602518669
    },
    {
        "content": "<p>Can you elaborate what the expected process of adding IT to and later using it with a module is? For instance, will it require creating multiple binaries depending on what other modules or hosts a module integrates with? Or just the adapters that wrap a module? How does it behave when for example a dependency is switched out with a compatible one written in another language?</p>",
        "id": 213057234,
        "sender_full_name": "Deleted",
        "timestamp": 1602518776
    },
    {
        "content": "<p>This is the \"fusion\" part of the IT proposal. You produce a module with adapters that translate between your concrete types and the abstract IT types, and the host / other module has adapters that translate from the abstract IT types to its concrete types</p>",
        "id": 213057338,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602518844
    },
    {
        "content": "<p>These two halves are fused at link time to produce the complete adapter function. So you only ship the code for your half.</p>",
        "id": 213057396,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1602518882
    },
    {
        "content": "<p>I see, thanks! Yeah, only shipping the code for your half is crucial there.</p>",
        "id": 213057741,
        "sender_full_name": "Deleted",
        "timestamp": 1602519034
    },
    {
        "content": "<p>yeah, that part is one of the most important aspects of ITs: building on the whole-system view the runtime has, we can have a system where content modules don't have to agree on a serialization format as a least-common denominator, as RPC mechanisms usually have to</p>",
        "id": 213272995,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1602673633
    }
]