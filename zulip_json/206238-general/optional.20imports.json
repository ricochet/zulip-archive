[
    {
        "content": "<p>hi, what's the current state of optional imports? i have a wasi preview1 application that i want to give an additional syscall or two in the browser, but still run the module in wasmtime etc.</p>",
        "id": 370132963,
        "sender_full_name": "ovf",
        "timestamp": 1687883930
    },
    {
        "content": "<p>There is no first-class concept of optional imports yet. Wasmtime has options to stub out unknown imports to return \"default values\"; that's about as close as you can get today.</p>",
        "id": 370141182,
        "sender_full_name": "Lann Martin",
        "timestamp": 1687885410
    },
    {
        "content": "<p>thanks! that's a bit unfortunate. do people generally not need this, or am i facing an x/y problem?</p>",
        "id": 370141861,
        "sender_full_name": "ovf",
        "timestamp": 1687885540
    },
    {
        "content": "<p>Optional imports are definitely on the collective design radar but haven't taken priority yet. There are also more workarounds available if you are building your own wasmtime embedding rather than using <code>wasmtime run</code>.</p>",
        "id": 370142500,
        "sender_full_name": "Lann Martin",
        "timestamp": 1687885661
    },
    {
        "content": "<p>thanks. my goal is to redistribute that module, so custom wasmtime embeddings won't help.</p>",
        "id": 370142982,
        "sender_full_name": "ovf",
        "timestamp": 1687885759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> could you point me to that workaround you mentioned? Please</p>",
        "id": 373079540,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1688705920
    },
    {
        "content": "<p>The general strategy would be to <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Module.html#method.imports\">iterate over a module's imports</a> and - for any unknown imports that you want to stub out - <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Linker.html#method.func_new\">define a stub implementation</a> that either traps or returns some default value. If you want to do this unconditionally for all unknown imports there are <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Linker.html#method.define_unknown_imports_as_traps\">two</a> <a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/struct.Linker.html#method.define_unknown_imports_as_default_values\">functions</a> that implement the above approach, corresponding to <code>wasmtime run</code> <code>--trap-unknown-imports</code> and <code>--default-values-unknown-imports</code></p>",
        "id": 373199211,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688734184
    },
    {
        "content": "<p>The source of those two functions is also a great reference for how to do this yourself.</p>",
        "id": 373199550,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688734253
    },
    {
        "content": "<p>With wit-bindgen, you could define the imported functions in a <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-resource\">resource</a> and then return an <code>option&lt;resource&gt;</code> from an imported function.</p>\n<p>Not sure if that will help if yo don's want to / can't use wit bindgen.</p>",
        "id": 373210889,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1688736412
    },
    {
        "content": "<p>If the host (in this case) knows about the import ahead of time then you have lots of alternatives. I think one of the ideas with optional imports would be that only the importer needs to know about the optional import and can detect at runtime whether the import was actually provided.</p>",
        "id": 373213316,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688736867
    },
    {
        "content": "<p>Nice! Thank you. I‚Äôm assuming this works transparently in the component model? ü§î</p>",
        "id": 373443410,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1688812340
    },
    {
        "content": "<p>I finally got time to come back to this topic. I am really interested about what you said <span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> since my use case is very straightforward, it is essentially what <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> mentioned so I am trying to have a quick example but not only about optional imports, but also optional exports. I think that the later might not be supported just yet <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#a-note-on-subtyping\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#a-note-on-subtyping</a> but I might be wrong. </p>\n<p>What I want for the optional exports is to sort-of define a default behavior in the Host that, if a component is loaded and has the exported function, then it will call that function instead of the default. </p>\n<p>I think this is really helpful since we could implement new functionality that, components might not really need to define which means that they can be loaded by the runtime without issues but, when consumers want to modify that default behavior, they can do it without breaking the ‚Äúcontract‚Äù. This essentially allows the system to add features without the components knowing.</p>\n<p>Is there something I can read about optional exports? I really appreciate all of your time.</p>",
        "id": 384493067,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1691932513
    },
    {
        "content": "<p>In \"normal\" wasm files, all exports are optional by default. That's why <code>instance.get_typed_func</code>returns an result, because the function might not exists.</p>\n<p>With wit bindgen / the component model, I'm not sure how well optional exports are supported. My approach would be to create a wrapper library around the \"raw\" wit \"contract\", which would be better to use anyway, and it gives you additional benefits such as handling default/optional exports.</p>\n<p>For example, you have a look at <a href=\"https://github.com/kajacx/LiquiSlimeBevy/blob/master/liquislime-rust-api/src/lib.rs#L30\">this trait</a>. It \"wraps\" the trait coming from the wit bindgen, but it's using custom types. This is so that I can define convenience methods on the types that will be used by the end user who will write the guest library, which is more convenient then requiring them to use the wit generated types directly.</p>\n<p>Adding an optional exported function with default behaviour is super easy now: just add a method to the trait with a default implementation. It would not even break existing guest libraries, as long as then use the updated version of the \"api\" library.</p>",
        "id": 384539599,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1691944486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> this is exactly what I need. Thank you so much for sharing this with me.</p>",
        "id": 384768727,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1692017885
    },
    {
        "content": "<p>One more question, I noticed that your project is still using <code>wit-bindgen = { version = \"0.8.0\" }</code> - I am doing the same - Any reason not to switching to use wasmtime directly now that the component model is in there? (trying to look for any gotchas before trying to switch my project <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>)</p>",
        "id": 384769337,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1692018010
    },
    {
        "content": "<p>AFAIK, the <code>wasmtime</code> crate is for the runtime host, this is for the guest. I guess I could update to use <code>cargo-component-bindings</code>, which is what <a href=\"https://github.com/bytecodealliance/cargo-component\">cargo component</a> will generate for you, but I haven't gotten to do the update yet.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0a61d90ea1245a9b6cbb68e5b661501a7d79abcf\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626236613664386263326334633235393432353462316434366631636162633462633934346131613433623864303462323462303961353032626465663364312f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 384784515,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1692020806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> might have some thoughts on optional imports/exports</p>",
        "id": 384912210,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1692047908
    },
    {
        "content": "<p>optional imports/exports are still something I'd like to include in the C-M and Wit so that this optionality can be given first-class tooling and virtualization support and also enable certain kinds of deployment-time optimizations, but it's definitely post-Preview-2, so i'm glad to hear we have stopgap workarounds in the meantime.</p>",
        "id": 384915579,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1692049446
    }
]