[
    {
        "content": "<p>Hi, I am wondering what is the canonical way in wasmtime to read host memory without the copy cost? I think one way is using imported function/callback but section 6 (page8,right half) of <a href=\"https://openproceedings.org/2023/conf/edbt/paper-156.pdf\">this paper</a> says it is also costly because of the conversion of function parameters and return value. It also mentions some tricks to let different virtual memory (like one in host and the other in wasm) point to the same physical memory so the copy is saved. Is it even possible in wasmtime?</p>",
        "id": 482529972,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1731644675
    },
    {
        "content": "<p>I'm not sure exactly what you mean by \"read host memory\"; the wasm sandbox very intentionally only allows guests to read their own memories. If you are looking for a way to avoid copies between guests and the host, currently the only really viable option for most guest languages / toolchains is for the guest to allocate a buffer, pass the buffer offset (\"pointer\", from the guest's perspective) to the host, and for the host to operate on that buffer directly via e.g. <a href=\"https://docs.rs/wasmtime/26.0.1/wasmtime/struct.Memory.html#method.data_mut\"><code>Memory::data_mut</code></a>.</p>",
        "id": 482616484,
        "sender_full_name": "Lann Martin",
        "timestamp": 1731678352
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"754563\">@Xinyu Zeng</span> the straightforward answer to your question would be that providing accessors as imports avoids the copy -- and it is asymptotically more efficient if you're reading only a small part of a buffer. This pattern occurs today in ad-hoc ways already -- for example wasi-http has a notion of handles to pieces of requests/responses (like sets of headers) and provides an API to query and mutate these; the whole body doesn't need to cross the boundary.</p>\n<p>The cost issue of <em>that</em> (many tiny accessor calls) is a separate question and one that could be optimized if needed. A comment on the paper you link: it's important to understand what's \"fundamental\" and what's simply a property of an implementation, especially when discussing research papers. In that section they seem to be describing a limitation of V8 and/or the particular ABI they have chosen. But there's no reason that a Wasm engine in theory couldn't inline \"accessor\" functions across module boundaries, or the host/guest boundary, so that the access is as cheap as a local memory access. One could imagine an opaque reference as a handle in an API and accessors that provide access to parts of it. Wasmtime doesn't support such inlining today, either, but at least in the cross-module case, this is theoretically pretty clear (inlining IR across functions) and probably could be done.</p>",
        "id": 482658444,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731690936
    },
    {
        "content": "<p>Thanks a lot for the reply! I will try both approaches. Given the info I guess the \"host operating via data_mut\" method is the less costly one but it is hard to implement in my use cases.</p>",
        "id": 482742542,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1731738142
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> Could you refer me to the wasi-http code that uses imports to avoid the copy?</p>",
        "id": 484451431,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1732607415
    },
    {
        "content": "<p>Look at the handling of headers for example — the “fields” resource type is a handle to data on the host side with individual get/set accessors. That’s a general pattern that is useful when you have “sparse” access to external data.</p>",
        "id": 484456818,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1732609639
    },
    {
        "content": "<p>I am not very familiar with the component model...Maybe a direct question, IIUC, this way of avoiding copy using imports is only possible for small data, e.g., two i32, because the data has to be passed via function return values. Is that correct? I still do not understand how to zero-copy a <em>whole buffer</em> using imports...</p>",
        "id": 484475604,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1732615626
    },
    {
        "content": "<p>Guest components cannot read each other's memories by design. The only way to do zero-copy in the networking sense today is for the host to directly write to one guest's memory.</p>",
        "id": 484516281,
        "sender_full_name": "Lann Martin",
        "timestamp": 1732628454
    },
    {
        "content": "<p>In other words, zero-copy in this case would mean that the first time the data is written to memory (e.g. from the network), it should go straight into an already-allocated buffer that lives in the guest's linear memory.</p>\n<ol>\n<li>Allocate a buffer in guest memory (e.g. by calling some kind of <code>malloc</code>-style function exported by the guest).  In the component model, the function would be <code>cabi_realloc</code>.</li>\n<li>Pass the pointer and length of that buffer to e.g. <code>read(2)</code>, <code>recv(2)</code>, or whatever</li>\n<li>Call a guest-exported function with the buffer pointer and length of data that was read</li>\n<li>Deallocate the buffer (e.g. by calling some kind of <code>free</code>-style function) or reuse the buffer to read more data.</li>\n</ol>",
        "id": 484538700,
        "sender_full_name": "Joel Dice",
        "timestamp": 1732634589
    },
    {
        "content": "<p>The approach I was trying to sketch above -- poorly, sorry, so I'll expand it more here! -- is <em>kind of</em> a path to zero-copy, but to be very clear, it's not something that would be efficient today without more work. <span class=\"user-mention\" data-user-id=\"754563\">@Xinyu Zeng</span> the idea is that even for large buffers, you can expose them only through accessors. Consider, e.g., a \"resource handle\" for a buffer or string; and an imported function that, given that handle and an index, returns the byte at that index. That gives you access to all the data without copying it in wholesale.</p>\n<p>There are a number of tradeoffs though:</p>\n<ul>\n<li>Today, without inlining or special recognition of intrinsics, this is going to be very slow: it will be a full function call (to either the module that has the data in its own memory, or to the host) for every byte access. One could get around that with a sufficiently smart Wasm compiler that does inlining. In an ideal world, the resource handle turns into a native pointer, and the \"get byte\" accessor turns into a bounds-checked access to the data at that pointer. Note that I'm speaking about possible optimizations we could implement, not something a user of Wasmtime could do today.</li>\n<li>It doesn't give you a \"native view\" of the data. In e.g. Rust or C in the guest, you won't have a <code>&amp;[u8]</code> or <code>uint8_t*</code> respectively. This one is pretty fundamental: zero copy means we don't put the data in the guest memory, but the guest memory is all the guest sees with its own pointer types, as others note above.</li>\n</ul>\n<p>What I'm describing is in the same spirit as the \"string imports\" idea floating around in core Wasm spec discussions, and the idea is visible in a coarse granularity today (I mentioned headers in wasi-http because these are not copied wholesale into the guest; you use accessors to get pieces of them); but it's more of a direction we could follow in building out engine optimizations to make this efficient, and very much not something one can take off the shelf today. Sorry if this wasn't clear before!</p>",
        "id": 484555756,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1732639595
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span>  and <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> ! I understand this approach but sometimes it is not easy, e.g., the API of the \"producer\" of the data allocates its memory in host already e.g. return a <code>Bytes</code>.</p>",
        "id": 484627249,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1732673308
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> a lot for the explanation. I kind of get what you mean. In an ideal world with perfect inlining this imported function call (the \"get byte\" accessor) behaves exactly like a raw memory read. Because it does not have \"native view\", if in guest we want to operate on a (large) buffer in host, we may need some wrapper code to turn every byte read to the buffer into that \"get byte\" accessor.</p>",
        "id": 484628619,
        "sender_full_name": "Xinyu Zeng",
        "timestamp": 1732674221
    },
    {
        "content": "<p>A bit late to the thread but you may be interested by those issues:</p>\n<ul>\n<li><a href=\"https://github.com/WebAssembly/memory-control/issues/19\">https://github.com/WebAssembly/memory-control/issues/19</a></li>\n<li><a href=\"https://github.com/WebAssembly/component-model/issues/398\">https://github.com/WebAssembly/component-model/issues/398</a></li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> may have some insights in that as well since he has been actively working on building a Component Model abstraction over mapping part of the linear memory of guests to host memory IIUC the approach.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/memory-control/issues/19\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2d9508459599bc9890dfa82f4b7c4f80b94fbdd6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363836343763633330623833623737633034323036653239623063623961303137663931363934306566623763333638363035383861366538613164343166652f576562417373656d626c792f6d656d6f72792d636f6e74726f6c2f6973737565732f3139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/memory-control/issues/19\" title=\"Memory Sharing Discussion · Issue #19 · WebAssembly/memory-control\">Memory Sharing Discussion · Issue #19 · WebAssembly/memory-control</a></div><div class=\"message_embed_description\">Introduction and Context There have been a number of conversations and questions raised about the possibility to share subsets of memory between multiple WebAssembly instances and the host environm...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/398\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/99d9f5a1c7cd322169e254b0dce4ce8cad4dff4b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343731316132363164393332393031396236316363653330323163396166366463353535353530336166303134316263613163666264353866366565316464342f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f333938&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/398\" title=\"Flat data representation proposal: Enables zero copy shared memory, zero allocation return types, binary serialization · Issue #398 · WebAssembly/component-model\">Flat data representation proposal: Enables zero copy shared memory, zero allocation return types, binary serialization · Issue #398 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This all started with defining zero copy shared memory over a WIT interface (channel is WIT resource, inspired by iceoryx2): let channel = Channel_u32::new(\"topic\"); loop { let message = channel.al...</div></div></div>",
        "id": 489069359,
        "sender_full_name": "raskyld",
        "timestamp": 1734255209
    }
]