[
    {
        "content": "<p>Hi</p>\n<p>I have a go app which makes a tcp connection to an ip. <br>\nhere is the go program </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">main</span>\n\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"fmt\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"io/ioutil\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"net/http\"</span>\n<span class=\"w\">    </span><span class=\"s\">\"os\"</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"I am from Go app\"</span><span class=\"p\">)</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Make a simple HTTP GET request</span>\n<span class=\"w\">    </span><span class=\"n\">resp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">http</span><span class=\"p\">.</span><span class=\"n\">Get</span><span class=\"p\">(</span><span class=\"s\">\"http://example.com\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Error:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Read the response body</span>\n<span class=\"w\">    </span><span class=\"n\">body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ioutil</span><span class=\"p\">.</span><span class=\"n\">ReadAll</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Body</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">nil</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"Error reading response body:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Body</span><span class=\"p\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n\n<span class=\"w\">    </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Response status: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resp</span><span class=\"p\">.</span><span class=\"n\">Status</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">fmt</span><span class=\"p\">.</span><span class=\"n\">Printf</span><span class=\"p\">(</span><span class=\"s\">\"Response body: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and I have compiled it to wasip2 target using tiny Go dev branch.</p>\n<p>then I have wasmtime <a href=\"http://main.rs\">main.rs</a> rust file which loads and instantiates and calls the main function go go app </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">ResourceTable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">sync</span><span class=\"p\">::{</span><span class=\"n\">Arc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Mutex</span><span class=\"p\">};</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"p\">::{</span><span class=\"n\">Context</span><span class=\"p\">};</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n\n<span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">MyState</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_sync</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">inherit_network</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyState</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"n\">ctx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi_ctx</span><span class=\"p\">,</span>\n\n<span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(),</span>\n\n<span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">);</span>\n\n\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module_go_app</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"/Users/celinesantosh/Desktop/sem_5/go_program/go_app.wasm\"</span><span class=\"p\">)</span>\n\n<span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to read go_app.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module_go_app</span><span class=\"p\">)</span>\n\n<span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to instantiate go_app\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">sync</span><span class=\"p\">::</span><span class=\"n\">Command</span><span class=\"p\">::</span><span class=\"n\">instantiate</span><span class=\"p\">(</span>\n\n<span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n\n<span class=\"o\">&amp;</span><span class=\"n\">module_go_app</span><span class=\"p\">,</span>\n\n<span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">,</span>\n\n<span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">command</span>\n\n<span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">()</span>\n\n<span class=\"p\">.</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span>\n\n<span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to invoke `run` function\"</span><span class=\"p\">);</span>\n\n\n\n<span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>the output prints till <br>\nI am from Go app</p>\n<p>but the tcp connection is not success it gives error <br>\nError: Lookup of host name '<a href=\"http://example.com\">example.com</a>' failed: Netdev not set</p>\n<p>I have used wasi preview 2 apis. but network calls are not success.. Is there anything extra I have to do for network configs.</p>\n<p>I have given inherit_network() in WasiCtxBuilder object. still it doesn't work.</p>",
        "id": 457073446,
        "sender_full_name": "celine santosh",
        "timestamp": 1723026265
    },
    {
        "content": "<p>Have you tried calling <a href=\"https://docs.rs/wasmtime-wasi/23.0.1/wasmtime_wasi/struct.WasiCtxBuilder.html#method.allow_ip_name_lookup\">https://docs.rs/wasmtime-wasi/23.0.1/wasmtime_wasi/struct.WasiCtxBuilder.html#method.allow_ip_name_lookup</a> ?</p>",
        "id": 457116791,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723039067
    },
    {
        "content": "<p>yes , I just tried now </p>\n<p><code>et wasi_ctx = WasiCtxBuilder::new().inherit_stdio().inherit_network().allow_ip_name_lookup(true).build();</code></p>\n<p>still the same error <br>\nhere is the output<br>\n<strong>Finished</strong> <code>dev</code> profile [unoptimized + debuginfo] target(s) in 0.42s</p>\n<p><strong>Running</strong> <code>/Users/celinesantosh/Desktop/sem_5/wasmtime_dev/target/debug/celine_app</code></p>\n<p>I am from Go app</p>\n<p>Error: Lookup of host name '<a href=\"http://example.com\">example.com</a>' failed: Netdev not set</p>",
        "id": 457121552,
        "sender_full_name": "celine santosh",
        "timestamp": 1723040297
    },
    {
        "content": "<p>Golang does not yet have wasip2 support where wasi features like <code>wasi:http</code> have been added. The <code>net/http</code>module is part of the standard library that doesn't know about how to make <code>wasi:http</code> calls. This work is underway, but I can walk you through how to build with tinygo today to get an http request working.</p>\n<p>The easiest path to get something working today is to use the wit-bindgen CLI tool to generate go bindings. This tool is written in Rust and supports creating bindings for several languages. By generating bindings to wasi-http, you can write a go program that avoids pulling in modules that don't yet know how to target wasip2 and then build with the tinygo compiler. This works today, example <a href=\"https://github.com/wasmCloud/wasmCloud/blob/main/examples/golang/components/http-client-tinygo/hello.go\">here</a>.</p>\n<p>The very soon answer, but not really the recommend approach for folks getting started right now is to use the go native tools we've been building in the BA and golang communities. If you are on the <code>dev</code> branch of tinygo, you can even start building for wasip2 by passing in  <code>-target=wasip2</code>. Building tinygo from source locally can be tricky, but you can go to the CI and download an artifact for your architecture. This is dependent on a new tool called <code>wasm-tools-go</code> which is written in go and creates more idiomatic go bindings. Using this tool, I am seeing folks create higher-level bindings that look a lot more like what you'd expect in a go program: <a href=\"https://github.com/hayride-dev/wasi-tinygo/blob/main/main.go\">https://github.com/hayride-dev/wasi-tinygo/blob/main/main.go</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wasmCloud/wasmCloud/blob/main/examples/golang/components/http-client-tinygo/hello.go\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/16762fc1438fdc6db4a0ad2e5782897700aa9a1f/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3330343430333639322f31643761333062662d366433642d346161312d386663322d333663623031303938346463&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wasmCloud/wasmCloud/blob/main/examples/golang/components/http-client-tinygo/hello.go\" title=\"wasmCloud/examples/golang/components/http-client-tinygo/hello.go at main · wasmCloud/wasmCloud\">wasmCloud/examples/golang/components/http-client-tinygo/hello.go at main · wasmCloud/wasmCloud</a></div><div class=\"message_embed_description\">wasmCloud is an open source Cloud Native Computing Foundation (CNCF) project that enables teams to build, manage, and scale polyglot apps across any cloud, K8s, or edge. - wasmCloud/wasmCloud</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/hayride-dev/wasi-tinygo/blob/main/main.go\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3b127c8e0e89833b76b13a4170177ea74482aa2c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326430363030346262326138353533366133386461366665366536633335353230333537333262303936343364616665373463653232643364386131613965382f686179726964652d6465762f776173692d74696e79676f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/hayride-dev/wasi-tinygo/blob/main/main.go\" title=\"wasi-tinygo/main.go at main · hayride-dev/wasi-tinygo\">wasi-tinygo/main.go at main · hayride-dev/wasi-tinygo</a></div><div class=\"message_embed_description\">Example tinygo repository for wasi . Contribute to hayride-dev/wasi-tinygo development by creating an account on GitHub.</div></div></div>",
        "id": 457452495,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1723143521
    }
]