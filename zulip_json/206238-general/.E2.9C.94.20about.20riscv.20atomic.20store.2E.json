[
    {
        "content": "<p>atomic store a value can fail.<br>\n<a href=\"https://msyksphinz-self.github.io/riscv-isadoc/html/rv64a.html#sc-d\">https://msyksphinz-self.github.io/riscv-isadoc/html/rv64a.html#sc-d</a><br>\nshould I use a loop to implement atomic store.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">sc</span><span class=\"p\">.</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"p\">,</span><span class=\"n\">rs1</span><span class=\"p\">,</span><span class=\"n\">rs2</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">   </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 288460185,
        "sender_full_name": "yang yu",
        "timestamp": 1656976803
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"466261\">@yang yu</span> -- actually the semantics of Cranelift's atomic store are infallible, i.e., there is no \"failure\". I think you may be confusing it for a \"store conditional\" (<code>sc</code> in RISC-V or other classic RISCs like MIPS, ARM32) instruction, which fails if some other CPU touched the value since the paired \"load-linked\"</p>",
        "id": 288479225,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656997748
    },
    {
        "content": "<p>an atomic store should have SeqCst ordering, which means that it occurs in some order relative to other atomic loads/stores on the same address and all CPUs agree on that order, and it also imposes ordering edges on the surrounding program (ordinary loads/stores prior to an atomic store always come before, and are observed by, ordinary loads/stores after an atomic load that observes the atomic store)</p>",
        "id": 288479308,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656997843
    },
    {
        "content": "<p>You'll need to reason about the memory model -- I don't know in detail what RISC-V provides -- but probably what you'll need is an ordinary store instruction, preceded by and/or followed by a memory fence or barrier instruction of some kind</p>",
        "id": 288479332,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656997883
    },
    {
        "content": "<p>one easy way to see what should be generated is to use an atomic with SeqCst ordering in C++ or Rust, and compile it to assembly; then do whatever clang or rustc does</p>",
        "id": 288479439,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656997993
    },
    {
        "content": "<p>here are atomic loads and stores with SeqCst in Rust, compiled to RISC-V: <a href=\"https://godbolt.org/z/G5h4c3cxc\">https://godbolt.org/z/G5h4c3cxc</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/G5h4c3cxc\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bf336f7597f851df0732b12f8d4b7b383508ec8\\/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/G5h4c3cxc\" title=\"Compiler Explorer - Rust (rustc 1.58.0)\">Compiler Explorer - Rust (rustc 1.58.0)</a></div><div class=\"message_embed_description\">use std::sync::atomic::{AtomicU64, Ordering};\n\npub fn store(atomic: &amp;AtomicU64, value: u64) {\n    atomic.store(value, Ordering::SeqCst);\n}\n\npub fn load(atomic: &amp;AtomicU64) -&gt; u64 {\n    atomic.load(Ordering::SeqCst)\n}\n</div></div></div>",
        "id": 288479543,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656998118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>  thanks ,  But I am not very understand this. May be I will find some course to learn about this.</p>",
        "id": 288496261,
        "sender_full_name": "yang yu",
        "timestamp": 1657010711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"466261\">@yang yu</span> for now I think just emitting the same output as what you see from <code>rustc</code> (in the Godbolt compiler explorer link above) should be fine</p>",
        "id": 288540907,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1657032545
    },
    {
        "content": "<p>ok</p>",
        "id": 288595629,
        "sender_full_name": "yang yu",
        "timestamp": 1657057406
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"466261\">yang yu</span> has marked this topic as resolved.</p>",
        "id": 292680021,
        "sender_full_name": "Notification Bot",
        "timestamp": 1660092437
    }
]