[
    {
        "content": "<p>hi! thought I'd create a stream for <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9544\">#9544</a> as part of making wasmtime fully functional on illumos, and also getting rid of a lot of unsafety.</p>\n<p>I started off with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9620\">#9620</a> to add a type-level wrapper around <code>usize</code> to ensure that it's always host page aligned</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9544\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/475eee2fbbafd227aa7829ead697b9b6399bc828/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653330333837323236366430353238313736393533396130363535616365663635333533646165363463343437393631356232366431373331373863356539312f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39353434&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9544\" title=\"Improving wasmtime performance on illumos via mmapping /dev/null · Issue #9544 · bytecodealliance/wasmtime\">Improving wasmtime performance on illumos via mmapping /dev/null · Issue #9544 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">(I'm still a novice to the wasmtime code so please let me know if I've made any mistakes. Thanks!) Motivation In #9535 we added initial support for illumos. (Thanks!) As noted there, we did notice ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9620\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/641cb1654c299dcca906668ff04f60903e8601d4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323331396261643239393437303661636366373938613330633564343161386166353231623966643533666537333438663832336632336638323263666365382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363230&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9620\" title=\"Add HostAlignedByteCount to enforce alignment at compile time by sunshowers · Pull Request #9620 · bytecodealliance/wasmtime\">Add HostAlignedByteCount to enforce alignment at compile time by sunshowers · Pull Request #9620 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">As part of the work to allow mmaps to be backed by other implementations (#9544), I realized that we didn&#39;t have any way to track whether a particular usize is host-page-aligned at compile time...</div></div></div>",
        "id": 483168775,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1731984235
    },
    {
        "content": "<p>A question I had is that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/mmap_vec.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/mmap_vec.rs</a> seems to suggest that there's <code>MmapVec::split_at</code> but that doesn't appear to exist. Is that WIP?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/mmap_vec.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6d838ffd8b3def482018ea3a84d6ba836eda4f1e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643062633465616263323363313031313332393963623538306134343365396130613666616233636430313132383261366236663839336339353835656235662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/mmap_vec.rs\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/mmap_vec.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/mmap_vec.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 483173181,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1731986756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> has marked this topic as unresolved.</p>",
        "id": 483292440,
        "sender_full_name": "Notification Bot",
        "timestamp": 1732030629
    },
    {
        "content": "<p>Oh that method used to exist but no longer does. Which as I think more about this obviates the need for <code>MmapVec</code> entirely...</p>",
        "id": 483292703,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732030688
    },
    {
        "content": "<p>I needed to re-rationalize the docs in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9614\">https://github.com/bytecodealliance/wasmtime/pull/9614</a> anyway so I went ahead and removed the <code>Arc</code> as part of that commit and shifted around some unsafe bits</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9614\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/384691c08dbfcb19dc61af8aab3a34db1af171e2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346361653037306330653635663538636330656137363462666336653434316432396137623163313935393963333939623830396565666439393732623632322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363134&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9614\" title=\"Add a `signals-based-traps` Cargo compile-time feature by alexcrichton · Pull Request #9614 · bytecodealliance/wasmtime\">Add a `signals-based-traps` Cargo compile-time feature by alexcrichton · Pull Request #9614 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR adds a new signals-based-traps Cargo compile-time feature which mirrors the Config::signals_based_traps runtime configuration. Disabling this Cargo feature enables reducing Wasmtime&#39;s p...</div></div></div>",
        "id": 483334131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732043006
    },
    {
        "content": "<p>thanks! sorry about the from_file booboo. I thought those would be page aligned too</p>",
        "id": 483339146,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732044861
    },
    {
        "content": "<p>(should they be? feels like a good invariant to have)</p>",
        "id": 483339167,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732044876
    },
    {
        "content": "<p>Ah no that wouldn't work. However it looks like the only way to construct a file-backed mmap is using <code>MmapVec</code> -- which suggests that maybe we should have a type-level distinction between aligned and unaligned mmaps</p>",
        "id": 483369158,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732057202
    },
    {
        "content": "<p>ah yeah so <code>Mmap</code> I think should always be page-aligned but <code>MmapVec</code> is not guaranteed to be page-aligned</p>",
        "id": 483370685,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732058026
    },
    {
        "content": "<p>so that'll be the point where sizes are rounded-up and the length of <code>MmapVec</code> will be a plain old <code>usize</code></p>",
        "id": 483370702,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732058039
    },
    {
        "content": "<p>Well -- <code>Mmap::from_file</code> is not page aligned, right?</p>",
        "id": 483370760,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732058051
    },
    {
        "content": "<p>the start is page aligned but the length might not be</p>",
        "id": 483370814,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732058089
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/sys/unix/mmap.rs#L93\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/sys/unix/mmap.rs#L93</a> -- there's no rounding up of len happening</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/sys/unix/mmap.rs#L93\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/54cbca431abdb06708f10d620c1cebc639f6d70f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663164356265386162376666623033316661613134313731383061386164613033623866613163386462323637303537303235353530653861653433363466372f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/sys/unix/mmap.rs#L93\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/sys/unix/mmap.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/sys/unix/mmap.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 483371040,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732058213
    },
    {
        "content": "<p>oh right yeah good point</p>",
        "id": 483371126,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732058275
    },
    {
        "content": "<p>I had a rough idea that the constructor there would return <code>(Mmap, usize)</code> where <code>usize</code> was the length of the mapping created byte-wise, but the <code>Mmap</code> would store the rounded-up size as the true length</p>",
        "id": 483371198,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732058306
    },
    {
        "content": "<p>(assuming OSes actually round up and give us ownership of the whole page)</p>",
        "id": 483371213,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732058315
    },
    {
        "content": "<p>Looks like it's rounded up and zeroed out on Linux: <a href=\"https://man7.org/linux/man-pages/man2/mmap.2.html#NOTES\">https://man7.org/linux/man-pages/man2/mmap.2.html#NOTES</a></p>\n<p>But POSIX doesn't commit to anything: <a href=\"https://pubs.opengroup.org/onlinepubs/9799919799/functions/mmap.html\">https://pubs.opengroup.org/onlinepubs/9799919799/functions/mmap.html</a></p>",
        "id": 483371685,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732058609
    },
    {
        "content": "<p>Yeah I just had a chat with Bryan Cantrill and he said to not assume anything about the rest of memory</p>",
        "id": 483382614,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732061791
    },
    {
        "content": "<p>This may mean we can't store a page aligned length in mmap in that case? That feels a bit unfortunate though... Could also use a separate field to clamp lengths of read-only/executable memory?</p>",
        "id": 483419143,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732087088
    },
    {
        "content": "<p>I have a draft working with a type-level assertion of this. will post tomorrow</p>",
        "id": 483431859,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732092525
    },
    {
        "content": "<p>Basically making two versions of Mmap, one that is aligned and one that isn't. From my read of the code they seem to be two generally different kinds of operations that happen to use similar Unix APIs</p>",
        "id": 483432031,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732092587
    },
    {
        "content": "<p>I think it'd be reasonable to split out yeah, especially if one platform has totally different APIs for managing one vs the other (which I suppose is sort of like how Windows treats it)</p>",
        "id": 483514995,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732117393
    },
    {
        "content": "<p>put up a PR for what I had in mind: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9639\">https://github.com/bytecodealliance/wasmtime/pull/9639</a>  -- I've rebased 9620 on top of it and it works well</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9639\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cfd1ef7fdc55bba433633c02ec82348001948045/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633265623438313837633062386362646362656139393839646532343666333336393033653634376233323733666138366436383934636433346136613563362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363339&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9639\" title=\"Add a type-level distinction between aligned and possibly-unaligned Mmaps by sunshowers · Pull Request #9639 · bytecodealliance/wasmtime\">Add a type-level distinction between aligned and possibly-unaligned Mmaps by sunshowers · Pull Request #9639 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In the wasmtime codebase there are two kinds of mmaps: those that are always backed by anonymous memory and are always aligned, and those that are possibly file-backed and so the length might be un...</div></div></div>",
        "id": 483563889,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732133669
    },
    {
        "content": "<p>Looks great, thanks!</p>",
        "id": 483569645,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732136018
    },
    {
        "content": "<p>awesome, thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>. slowly inching towards making this code less terrifying haha</p>",
        "id": 483569738,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732136051
    },
    {
        "content": "<p>What's the reason <code>host_page_size</code> is behind the <code>signals-based-traps</code> feature right now? I need HostAlignedByteCount, and therefore host_page_size, as part of the <code>RuntimeLinearMemory</code> API which isn't behind that feature</p>",
        "id": 483839809,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732253309
    },
    {
        "content": "<p>(specifically for the <code>byte_size</code> function, which returns a multiple of the host page size)</p>",
        "id": 483840128,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732253549
    },
    {
        "content": "<p>Right now <code>signals-based-traps</code> is used to basically mean \"be as portable as possible, assume no virtual memory\", so when that's disabled there might not even be virtual memory which is why the function is gone.</p>",
        "id": 483960360,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732297437
    },
    {
        "content": "<p>But also I would imagine that <code>RuntimeLinearMemory</code> wouldn't want to use this because it's all about wasm byte sizes and such and memories could be either 1-byte-pages or 64k-pages there</p>",
        "id": 483960486,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732297478
    },
    {
        "content": "<p>Hmmm. So there are parts of the codebase that panic today if the byte size isn't a multiple of the host page size</p>",
        "id": 483970606,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301247
    },
    {
        "content": "<p>Is the contract that \"if there is host virtual memory, byte_size is a multiple of it?\"</p>",
        "id": 483970717,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301286
    },
    {
        "content": "<p>In theory the contract is that such parts don't exist if virtual memory is disabled at compile time, but we're also sort of designing all of this as we go along</p>",
        "id": 483970842,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301360
    },
    {
        "content": "<p>so it's less so an \"if\" and moreso \"the question isn't asked if <code>signals-based-traps</code> is disabled\"</p>",
        "id": 483970898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301386
    },
    {
        "content": "<p>Ahh I see</p>",
        "id": 483970967,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301404
    },
    {
        "content": "<p>So can the byte_size API be gated on signals-based-traps?</p>",
        "id": 483971037,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301434
    },
    {
        "content": "<p>you mean <code>HostAlignedSize</code>?</p>",
        "id": 483971096,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301457
    },
    {
        "content": "<p>oh no you mean <code>RuntimeLinearMemory::byte_size</code></p>",
        "id": 483971124,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301467
    },
    {
        "content": "<p>that one definitely doesn't want to be host-aligned b/c with 1-byte-page-sized memories that intentionall isn't host-page-aligned</p>",
        "id": 483971172,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/centralizing.20memory.20allocation.20code.20in.20Mmap.20.28.239544.29/near/483971124\">said</a>:</p>\n<blockquote>\n<p>oh no you mean <code>RuntimeLinearMemory::byte_size</code></p>\n</blockquote>\n<p>Yeah I mean this one</p>",
        "id": 483971193,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301499
    },
    {
        "content": "<p>in that the return value there is semantically the byte size of the wasm linear memory, which is wasm-page-aligned and that page size depends on the wasm module</p>",
        "id": 483971289,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/centralizing.20memory.20allocation.20code.20in.20Mmap.20.28.239544.29/near/483971172\">said</a>:</p>\n<blockquote>\n<p>that one definitely doesn't want to be host-aligned b/c with 1-byte-page-sized memories that intentionall isn't host-page-aligned</p>\n</blockquote>\n<p>Hmm that is interesting because an unaligned byte size does theoretically panic today</p>",
        "id": 483971292,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301524
    },
    {
        "content": "<p>oh dear that's a bug we should fix!</p>",
        "id": 483971322,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301539
    },
    {
        "content": "<p>ok. once I've had some coffee I'll try tracking down what I saw last night</p>",
        "id": 483971367,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301561
    },
    {
        "content": "<p>yeah the return value of <code>byte_size</code> there should definitely always handle being not-page-aligned</p>",
        "id": 483971431,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301589
    },
    {
        "content": "<p>Ok. So byte size is really the wasm page size?</p>",
        "id": 483971469,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301609
    },
    {
        "content": "<p>right yeah</p>",
        "id": 483971490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301618
    },
    {
        "content": "<p>Which is a power of 2 but is otherwise unrelated to the host page size? yeah make sense</p>",
        "id": 483971508,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301625
    },
    {
        "content": "<p>correct yeah</p>",
        "id": 483971531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301633
    },
    {
        "content": "<p>wasm as-is-stable today requires 64KiB page sizes</p>",
        "id": 483971593,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301643
    },
    {
        "content": "<p>but the custom-page-sizes proposal relaxes that to also having a page size of 1</p>",
        "id": 483971607,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301651
    },
    {
        "content": "<p>other powers-of-two aren't currently allowed, but the theory is we may want to allow them in the future</p>",
        "id": 483971628,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301662
    },
    {
        "content": "<p>Ok. I guess that's why it wasn't hit</p>",
        "id": 483971633,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301665
    },
    {
        "content": "<p>Btw why is it called byte_size and not wasm_page_size?</p>",
        "id": 483971717,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301717
    },
    {
        "content": "<p>there's definitely been some back and forth in this regard, and I by no means would claim the curent naming is the best</p>",
        "id": 483971784,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301747
    },
    {
        "content": "<p>but many other places we handle wasm pages elsewhere in the codebase are typically with a concrete type (u32 or u64) and in units of pages rather than units of bytes</p>",
        "id": 483971856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301771
    },
    {
        "content": "<p>in that sense <code>byte_size</code> was intended to both use <code>usize</code> to convey it's talking about the host and also clearly indicate it's a byte-based unit and not a page-based unit</p>",
        "id": 483971892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301790
    },
    {
        "content": "<p>Ah</p>",
        "id": 483971895,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301790
    },
    {
        "content": "<p>Should be a newtype ;)</p>",
        "id": 483971918,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301805
    },
    {
        "content": "<p>we could certainly do with much more documentation</p>",
        "id": 483971935,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301813
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a3d00777c1080c147f4e9a03dbd00214c61af6e3/crates/wasmtime/src/runtime/vm/memory.rs#L146\">https://github.com/bytecodealliance/wasmtime/blob/a3d00777c1080c147f4e9a03dbd00214c61af6e3/crates/wasmtime/src/runtime/vm/memory.rs#L146</a> the comment there feels misleading to me btw</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a3d00777c1080c147f4e9a03dbd00214c61af6e3/crates/wasmtime/src/runtime/vm/memory.rs#L146\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0fefa4dabbbd6701809ab22f3d31a21de0c985f8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646136613838653434336131633231356134356132646232366633386537636130643262653039636665393362636465343761343937376364386262356338662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a3d00777c1080c147f4e9a03dbd00214c61af6e3/crates/wasmtime/src/runtime/vm/memory.rs#L146\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at a3d00777c1080c147f4e9a03dbd00214c61af6e3 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at a3d00777c1080c147f4e9a03dbd00214c61af6e3 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 483971938,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301815
    },
    {
        "content": "<p>yeah I've been meaning to rework these traits and write many more words on the docs</p>",
        "id": 483971996,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301840
    },
    {
        "content": "<p><code>RuntimeLinearMemory</code> and <code>wasmtime::LinearMemory</code> are basically duplicates of each other and I'd prefer to only have one</p>",
        "id": 483972032,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301860
    },
    {
        "content": "<p>and that documentation should be greatly expanded to talk more about wasm pages and such</p>",
        "id": 483972074,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732301872
    },
    {
        "content": "<p>Yeah that would be helpful. As a newcomer I definitely did not understand what it meant. I thought I was something closer to currently allocated memory</p>",
        "id": 483972505,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301960
    },
    {
        "content": "<p>since byte_size is right above byte_capacity</p>",
        "id": 483972529,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732301973
    },
    {
        "content": "<p>yeah I've found when it comes to linear memory it's generally required that many words are needed to convey what's going on</p>",
        "id": 483972629,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732302003
    },
    {
        "content": "<p>(which is why I'm loving the newtypes since that's the \"picture is worth a thousand words\" idea)</p>",
        "id": 483972693,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732302018
    },
    {
        "content": "<p>forcing decisions around newtypes certainly shook out this bug lol</p>",
        "id": 483972790,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732302055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9660\">https://github.com/bytecodealliance/wasmtime/issues/9660</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9660\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64191ee5bdc6540fb7d628618a20a9d1e042e256/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333739633763666466623738393837646337613666333338643435643963626430313738353666316439623638366135306161653966393236393538666537612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39363630&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9660\" title=\"MemoryImageSlot doesn't handle the case where RuntimeLinearMemory::byte_size is not page-aligned · Issue #9660 · bytecodealliance/wasmtime\">MemoryImageSlot doesn't handle the case where RuntimeLinearMemory::byte_size is not page-aligned · Issue #9660 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Discovered this while working on #9652. Looking at LocalMemory::new: wasmtime/crates/wasmtime/src/runtime/vm/memory.rs Lines 484 to 487 in bc656c7 let mut slot = MemoryImageSlot::create( alloc.base...</div></div></div>",
        "id": 483989370,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732308683
    },
    {
        "content": "<p>aha yeah that rings a bell, thanks!</p>\n<p>It's definitely the case that we're walking a fine line with the CoW bits and wasm linear memories that are using 1-byte pages</p>",
        "id": 483989562,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732308764
    },
    {
        "content": "<p>I think there are likely other places where there's an implicit assumption too -- this was just the one I directly ran into</p>",
        "id": 483989629,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732308796
    },
    {
        "content": "<p>Is the solution here to round up accessible to the host page size?</p>",
        "id": 483989714,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732308839
    },
    {
        "content": "<p>yeah we're leaning relatively heavily on our fuzzing here to try to suss out all the weird ways these features can interact</p>",
        "id": 483989779,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732308848
    },
    {
        "content": "<p>probably? I'd have to dig in more though (dealing with memory image slots just triggered the \"oh yeah that sounds familiar\" thinking)</p>",
        "id": 483989831,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732308876
    },
    {
        "content": "<p>that wound be wonderful, thanks!</p>\n<p>should I hold off on 9652 until you have a sense of what to do here? 9652 forces a decision here (fortunately or unfortunately), either to:</p>\n<ul>\n<li>round up</li>\n<li>panic on unaligned <code>byte_size</code>/<code>accessible</code> (maybe ok for now with the understanding that it would need to be fixed for smaller page sizes)</li>\n</ul>",
        "id": 483990339,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732309116
    },
    {
        "content": "<p>oh in that case let me dig in now</p>",
        "id": 483990497,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732309192
    },
    {
        "content": "<p>Thanks! I have a personal thing to handle for the rest of the day so no immediate rush</p>",
        "id": 483991021,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732309378
    },
    {
        "content": "<p>ok I think there's two possible ways to go here:</p>\n<ul>\n<li>One is to skip CoW stuff if the wasm page size is 1. Basically return errors/skip paths/etc so that way <code>accessible</code> is always page-aligned</li>\n<li>Another is to have two fields in <code>MemoryImageSlot</code>, one for the wasm-visible accessible size (<code>accessible: usize</code> today) and another for the page-aligned-rounded-up size (e.g. \"memory below this point is all accessible by the host\"). That I think is roughly what <code>MmapMemory</code> keeps track of.</li>\n</ul>\n<p>I think this latter one is probably the route to go? (may require more refactoring though...) Happy to help out if this is all ending up too far afield of what you're interested in</p>",
        "id": 483991533,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732309639
    },
    {
        "content": "<p>I'll have a look, thanks! I'll be honest I'm tempted to do the first for now and then look at the second as a followup. It sounds like CoW is an optimization and not something required for correctness?</p>",
        "id": 483991954,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732309866
    },
    {
        "content": "<p>correct yeah, and happy to merge that too!</p>",
        "id": 483992091,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732309939
    },
    {
        "content": "<p>Ah, ran into another fun issue around <code>RuntimeLinearMemory</code>. It looks like there's now -- very recently -- a malloc-based impl as well, however I'm not seeing where it is aligned to a page boundary: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory/malloc.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory/malloc.rs</a></p>\n<p>This base pointer gets passed into mprotect here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/cow.rs#L708\">https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/cow.rs#L708</a> -- as mentioned before, mprotect requires the base ptr to be host page aligned</p>\n<p>More generally, supporting the malloc impl adds a bit of a challenge -- my plan was previously to pass <code>&amp;Mmap</code> instances around, but that wouldn't be suitable for the malloc-based impl ofc. We may need to have a general way to express the idea of mprotecting some range of memory within an allocation</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory/malloc.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/622389b4ff92191b8b8b857cdd43760ffa0aa5b2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393234343065613235643162363262356131663531653431656264643161393337393031303638303663393835333264383232616134623066396162316330322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory/malloc.rs\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/memory/malloc.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/memory/malloc.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/cow.rs#L708\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/622389b4ff92191b8b8b857cdd43760ffa0aa5b2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393234343065613235643162363262356131663531653431656264643161393337393031303638303663393835333264383232616134623066396162316330322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/cow.rs#L708\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/cow.rs at 67674881db5fbdbba8594feb52655aaa351a5f77 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/cow.rs at 67674881db5fbdbba8594feb52655aaa351a5f77 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484029457,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732335159
    },
    {
        "content": "<p>This is in theory mitigated by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory.rs#L136\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory.rs#L136</a> which prevents the use of malloc with CoW</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory.rs#L136\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/622389b4ff92191b8b8b857cdd43760ffa0aa5b2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393234343065613235643162363262356131663531653431656264643161393337393031303638303663393835333264383232616134623066396162316330322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/memory.rs#L136\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484038453,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732344016
    },
    {
        "content": "<p>For CoW stuff it may suffice to add a method to get an optional mmap from the memory?</p>",
        "id": 484038474,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732344044
    },
    {
        "content": "<p>I feel like I saw a situation where the CoW impl might have used a malloc pointer but I'll double check, thanks! What you're describing makes sense to me</p>",
        "id": 484092404,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732392583
    },
    {
        "content": "<p>Ah doesn't look like there is, though the argument is pretty convoluted haha</p>",
        "id": 484113622,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732414617
    },
    {
        "content": "<p>there are a lot of pointers being passed around</p>",
        "id": 484113634,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732414632
    },
    {
        "content": "<p>another interesting one, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L164\">https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L164</a> might underflow with zero-sized stack. I didn't see a precondition check though there might be one I missed</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L164\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ddd1d660149f937de155472bcd9ec8ee117fcbba/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623434313236326233393865383762383139393736353039356338353636373137613633653133646534336232303337656366343838383834616165383961322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L164\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs at 67674881db5fbdbba8594feb52655aaa351a5f77 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs at 67674881db5fbdbba8594feb52655aaa351a5f77 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484119037,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732420884
    },
    {
        "content": "<p>Ah that one is protected by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L98-L100\">this</a>, but I agree that the precondition checks and reasons they don't panic at runtime are pretty thin as the checks are relatively far from the use-site</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L98-L100\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ea6df388b4efaa0e620efa5c83eaacee39b51d97/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646663346662646338373534653861653033333538346662616664643166343533623036383833396166373566613639636461346438616137333965343433612f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/67674881db5fbdbba8594feb52655aaa351a5f77/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs#L98-L100\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs at 67674881db5fbdbba8594feb52655aaa351a5f77 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/unix_stack_pool.rs at 67674881db5fbdbba8594feb52655aaa351a5f77 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484327994,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732547803
    },
    {
        "content": "<p>and I also definitely agree that the amount of pointer-passing is one I've hoped we can improve over time</p>",
        "id": 484328068,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732547823
    },
    {
        "content": "<p>ahh I see it. since allocations are guarded by the precondition, deallocations are as well. probably worth checking the precondition again though since this is a public method</p>",
        "id": 484376322,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732563388
    },
    {
        "content": "<p>I hope all this has been helpful btw, this is definitely making the greater mmap usage easier to handle</p>",
        "id": 484376509,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732563466
    },
    {
        "content": "<p>yeah I think it's all great, it's much nicer than having a smattering of asserts here and there which felt haphazard at best</p>",
        "id": 484376615,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732563500
    },
    {
        "content": "<p>ok put up a PR for unix_stack_pool: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9678\">https://github.com/bytecodealliance/wasmtime/pull/9678</a>. this should now really help with moving more ops over to mmaps</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9678\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/456e1766d3b1dca686d601ee8a66f4a627d4479b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653337376265343638383234393362383266306564346333393038366664323766313137653230313030633066613331323738326535366330656433616366612f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9678\" title=\"Move unix_stack_pool over to aligned byte counts by sunshowers · Pull Request #9678 · bytecodealliance/wasmtime\">Move unix_stack_pool over to aligned byte counts by sunshowers · Pull Request #9678 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This removes the last remaining use of round_usize_up_to_host_pages. I've added a couple of extra asserts that I believe are justified.</div></div></div>",
        "id": 484388283,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732568231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> hmmm.... I have a suspicion there's a subtle drop order issue with CoW images.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/cow.rs#L782\">https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/cow.rs#L782</a> remaps over that space in case of a drop (e.g. due to a panic?)</p>\n<p>But <a href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L107-L115\">https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L107-L115</a> stores <code>mapping</code> <em>before</em> <code>image_slots</code>, which by Rust drop order rules means that the <code>Mmap</code> will be dropped before <code>image_slots</code>. That's not correct</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/cow.rs#L782\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b32bd29acf9a052f1a036542844f3e78685b2360/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666235303137363136353165316135656531386264333534393864356532643435396637346537663064633032323833613064636565323437323363393131332f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/cow.rs#L782\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/cow.rs at 438fc938c26e04c8238c4a1275992246fbf9d130 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/cow.rs at 438fc938c26e04c8238c4a1275992246fbf9d130 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L107-L115\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b32bd29acf9a052f1a036542844f3e78685b2360/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666235303137363136353165316135656531386264333534393864356532643435396637346537663064633032323833613064636565323437323363393131332f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L107-L115\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs at 438fc938c26e04c8238c4a1275992246fbf9d130 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs at 438fc938c26e04c8238c4a1275992246fbf9d130 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484410976,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732579230
    },
    {
        "content": "<p>This discovery was the result of my attempt to see how hard adding a lifetime parameter to <code>MemoryImageSlot</code> would be. turns out it's quite hard for now, but this looks incorrect</p>",
        "id": 484411083,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732579278
    },
    {
        "content": "<p>I think the net effect of this isn't too bad -- it means that those bits of memory stay mapped forever AFAICT, so basically a memory leak. but yikes lol</p>",
        "id": 484411396,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732579421
    },
    {
        "content": "<p>certainly not anticipated by this code afaict</p>",
        "id": 484411415,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732579431
    },
    {
        "content": "<p>I think that's handled by the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L518-L530\">manual drop of the memory pool</a> but we could use improved comments!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L518-L530\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e0c7d78abb3712914ece4a7d4bbb3345c316f2e5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346561623138333436663562396564656366353337633736366364646135643334333237313132656330663763663533353664643839316333646535366365392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/438fc938c26e04c8238c4a1275992246fbf9d130/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs#L518-L530\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs at 438fc938c26e04c8238c4a1275992246fbf9d130 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/memory_pool.rs at 438fc938c26e04c8238c4a1275992246fbf9d130 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484414608,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732581541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> ah ... thanks</p>",
        "id": 484415302,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582074
    },
    {
        "content": "<p>One option I thought about in the past is to pass around <code>Arc&lt;Mmap&gt;</code> or maybe bring back <code>MmapVec</code> in one form or another for something like this</p>",
        "id": 484415953,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582513
    },
    {
        "content": "<p>so the mmap has shared ownership in places but each owned \"slice\" can only operate on a certain range</p>",
        "id": 484415968,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582528
    },
    {
        "content": "<p>overall I've definitely felt pain about the pointer-passing we have for CoW right now as well</p>",
        "id": 484416001,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582549
    },
    {
        "content": "<p>I was wondering that ... my concern is that that can lead to memory pseudo-leaks with slots hanging around unintentionally</p>",
        "id": 484416072,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582567
    },
    {
        "content": "<p>(this is why I had half-suggested using weak refs)</p>",
        "id": 484416104,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582595
    },
    {
        "content": "<p>lifetimes would ensure that slots don't outlive the original mapping</p>",
        "id": 484416129,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582609
    },
    {
        "content": "<p>but they seem hard because there are a lot of self-referential structs rn</p>",
        "id": 484416163,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582625
    },
    {
        "content": "<p>Personally I'm a bit more worried to get more memory safety here rather than worrying too much about resource usage, these mmaps are so big bugs with them tend to be found pretty fast</p>",
        "id": 484416193,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582652
    },
    {
        "content": "<p>hmm ok</p>",
        "id": 484416203,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582663
    },
    {
        "content": "<p>and we wouldn't need to worry about anything like cycles b/c the arcs wouldn't have interior mutability</p>",
        "id": 484416206,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582668
    },
    {
        "content": "<p>not that it's a silver bullet of course, but I still think that using an owned \"thing\" instead of a raw pointer would be nicer for CoW</p>",
        "id": 484416275,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582690
    },
    {
        "content": "<p>welll... there are a bunch of <code>&amp;mut self</code> methods on <code>Mmap</code> rn</p>",
        "id": 484416285,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582696
    },
    {
        "content": "<p>I <em>think</em> the OS does synchronization on the address space so they may not be required</p>",
        "id": 484416311,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732582718
    },
    {
        "content": "<p>we can probably change those to <code>&amp;self</code>, they're just <code>&amp;mut</code> b/c they could be basically</p>",
        "id": 484416315,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582722
    },
    {
        "content": "<p>yeah</p>",
        "id": 484416318,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582723
    },
    {
        "content": "<p>it's nice to have the guarantee of <code>&amp;mut</code> when we can</p>",
        "id": 484416334,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582737
    },
    {
        "content": "<p>but if we can't well we can't :)</p>",
        "id": 484416339,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732582740
    },
    {
        "content": "<p>sorry to bring this up again -- I've spent a few hours staring at this and I'm still worried about the interaction between memory_image and the backing mmap.</p>\n<p>This code: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L464C5-L472\">https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L464C5-L472</a> stores both an <code>alloc</code> and a <code>memory_image</code>.</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L673-L675\">https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L673-L675</a> drops <code>alloc</code> but not <code>memory_image</code>.</p>\n<p>As far as I can tell, <code>alloc</code> can be either a borrowed allocation (via <code>new_static</code>) or an owned allocation (via <code>new_dynamic</code>). In case of the former, I believe this is fine -- since the actual ownership of the memory is by someone else. But in case of the latter, the memory backing <code>memory_image</code> might get unmapped.</p>\n<p>AFAICT the only guard against this is the name <code>unwrap_static_image</code> -- afaict nothing prevents it from being called against a dynamic image?</p>\n<p>This seems like a really complex set of constraints that would be good to fit lifetimes into, but that seems very hard</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L464C5-L472\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/846b3b76b378d9bc3c0cd1b287748cec34e1f758/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663266336263613662616536653038373430366139323762343235656365383531656336303163376535326262636634613330313430363038336634313836382f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L464C5-L472\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at 0e3e863a57cd28e1ce9be628fd0d8df192077305 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at 0e3e863a57cd28e1ce9be628fd0d8df192077305 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L673-L675\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/846b3b76b378d9bc3c0cd1b287748cec34e1f758/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663266336263613662616536653038373430366139323762343235656365383531656336303163376535326262636634613330313430363038336634313836382f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0e3e863a57cd28e1ce9be628fd0d8df192077305/crates/wasmtime/src/runtime/vm/memory.rs#L673-L675\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at 0e3e863a57cd28e1ce9be628fd0d8df192077305 · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/memory.rs at 0e3e863a57cd28e1ce9be628fd0d8df192077305 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 484438535,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732599489
    },
    {
        "content": "<p>also put up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">https://github.com/bytecodealliance/wasmtime/pull/9681</a> as an RFC. It's unfortunately really tricky -- the <code>Arc&lt;Mmap&gt;</code> approach is difficult to do as well because of methods like <code>slice_mut</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/93447784c7dfcac5d097eb75b8e007c6d29dff85/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626238663131386131306461316362646439646464336362333734303135383061623734396534383332326265323536363064383136316432383566303634342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363831&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\" title=\"[RFC] Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9681 · bytecodealliance/wasmtime\">[RFC] Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9681 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is part of the work to centralize memory management into the mmap\nmodule. This commit introduces a few structures which aid in that process, and\nstarts converting one of the functions (MemoryI...</div></div></div>",
        "id": 484441056,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732601468
    },
    {
        "content": "<p>I guess you could imagine <code>Mmap</code> giving out exclusive access to chunks of memory, checked at runtime. But that's a ton of work, and it would probably also interact with all of the other ways memory is reserved from an <code>Mmap</code>.</p>\n<p>I'm unfortunately running out of time to work on this as well, so I don't think I can take on a giant refactor</p>",
        "id": 484441546,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732601872
    },
    {
        "content": "<p>ok managed to get the arc approach working, wdyt: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9682\">https://github.com/bytecodealliance/wasmtime/pull/9682</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9682\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bc6f1ffd3ff1316af8fe8db45950edceb10c3ee2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353434336133343534333534306535373038623063636264353136383062313736313234303133656361646337336165646364346536623165616530616165332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363832&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9682\" title=\"Put MemoryPool and MmapMemory mmaps behind Arc by sunshowers · Pull Request #9682 · bytecodealliance/wasmtime\">Put MemoryPool and MmapMemory mmaps behind Arc by sunshowers · Pull Request #9682 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In upcoming work we&#39;re going to centralize memory management inside Mmap.  In order to do that, we need memory that logically borrows from the Mmap to have access to it. That turns out to be po...</div></div></div>",
        "id": 484453829,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732608476
    },
    {
        "content": "<blockquote>\n<p>This seems like a really complex set of constraints that would be good to fit lifetimes into, but that seems very hard</p>\n</blockquote>\n<p>Yeah you're definitely right, I lost a few asserts related to this in the last refactoring and that's not great, it's definitely not going to work with non-static memories there</p>",
        "id": 484543491,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732635889
    },
    {
        "content": "<p>(left some comments on the PR about Arc)</p>",
        "id": 484544685,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732636251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/206238-general/topic/centralizing.20memory.20allocation.20code.20in.20Mmap.20.28.239544.29/near/484544685\">said</a>:</p>\n<blockquote>\n<p>(left some comments on the PR about Arc)</p>\n</blockquote>\n<p>thanks, do you want me to make a PR on my own repo with the subsequent work? I hate gh and its lack of stacked PRs</p>",
        "id": 484575396,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732646715
    },
    {
        "content": "<p>heh all I know is github so I'm used to it at this point, so feel free to either push more commits to that PR or just make a second PR with that as the first commit</p>",
        "id": 484575923,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732646926
    },
    {
        "content": "<p>basically whatever's easiest for you</p>",
        "id": 484575991,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732646954
    },
    {
        "content": "<p>no need from wasmtime's side to have pr-per-commit</p>",
        "id": 484576010,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732646962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> all right, put up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9687\">https://github.com/bytecodealliance/wasmtime/pull/9687</a> as a draft that includes 9682 + further work</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9687\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/18d947a6dcbae2b546a72fb6edea9309289b8d39/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633437303635323333616134323062613139623138333563373332653563653037316137653063633335396539656438343164613338393266626539313563312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363837&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9687\" title=\"[draft] show how Arc&lt;Mmap&gt; would work by sunshowers · Pull Request #9687 · bytecodealliance/wasmtime\">[draft] show how Arc&lt;Mmap&gt; would work by sunshowers · Pull Request #9687 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Draft to show how #9682 would work. (Will clean this up before putting up.)</div></div></div>",
        "id": 484589281,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652214
    },
    {
        "content": "<p>the description of the last commit isn't fully up to date yet, just wanted to get this out there</p>",
        "id": 484589374,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652264
    },
    {
        "content": "<p>nice I'll try to take a look later today</p>",
        "id": 484589405,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652281
    },
    {
        "content": "<p>thank you so much! tbh trying to understand this static memory lifetime thing ate up so much of my time yesterday</p>",
        "id": 484589523,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652322
    },
    {
        "content": "<p>oh dear sorry it's eating up so much time :(</p>",
        "id": 484589561,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652342
    },
    {
        "content": "<p>if it'd be helpful I'd be happy to jump on a call or similar to talk in-depth about this</p>",
        "id": 484589587,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652358
    },
    {
        "content": "<p>thank you! might take you up on that soon for future work.</p>\n<p>As a tiny bit of feedback I think renaming static to borrowed and dynamic to owned would have really helped</p>",
        "id": 484589788,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652451
    },
    {
        "content": "<p>oh we are always very welcome to feedback like that :)</p>",
        "id": 484589855,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652484
    },
    {
        "content": "<p>runtime internals are basically whatever someone first thought of which after many refactorings typically is no longer the best name</p>",
        "id": 484589879,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652497
    },
    {
        "content": "<p>it's not borrowed in the having a lifetime param sense, but it is definitely logically borrowed if I understand it correctly</p>",
        "id": 484589909,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652514
    },
    {
        "content": "<p>you're definitely right yeah</p>",
        "id": 484590136,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652612
    },
    {
        "content": "<p>I think in general the logical lifetime of memory was quite hard for me to get my head around. I think I have a decent sense of it now and it is (currently) correct as used, though things like <code>unwrap_static_memory</code> worry me</p>",
        "id": 484590385,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652729
    },
    {
        "content": "<p>yeah I don't think we've done a great job of keeping things documented and coherent as they've evolved over time</p>",
        "id": 484590670,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652841
    },
    {
        "content": "<p>now's as good as any time to get things coherent again though</p>",
        "id": 484590707,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652856
    },
    {
        "content": "<p>and ideally we could remove hacks like that unwrap</p>",
        "id": 484590720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652863
    },
    {
        "content": "<p>I also feel like for a <code>MemoryImageSlot</code>, clear-on-drop and logically-borrowed have some degree of coupling though I haven't fully understood the interactions</p>",
        "id": 484590733,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732652867
    },
    {
        "content": "<p>I suspect there's probably a better way to refactor all of this and represent it differently than it is right now, but I'm not sure how best that would be done myself</p>",
        "id": 484590995,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732652983
    },
    {
        "content": "<p>hmm, I tried out a few things yesterday but wasn't happy at any of them. I guess one way would be to have pervasive lifetime params everywhere. Don't have <code>Memory</code> own the memory at all, always have a <code>'alloc</code> arena allocate and hand out memory. It would be a huge refactor though</p>",
        "id": 484591553,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653227
    },
    {
        "content": "<p>yeah I can see where that might get out of hand</p>",
        "id": 484591750,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653262
    },
    {
        "content": "<p>the best I can think of is something like a \"state\" where you pass in <code>&amp;Mmap</code> and it doesn't store it itself</p>",
        "id": 484591780,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653277
    },
    {
        "content": "<p>and it has an assertion you pass in the same one or something like that</p>",
        "id": 484591795,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653286
    },
    {
        "content": "<p>That's what my abandoned PR did actually</p>",
        "id": 484591813,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653296
    },
    {
        "content": "<p>but that also feels like a large refactoring and may not be too too beneficial</p>",
        "id": 484591814,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653296
    },
    {
        "content": "<p>ah ok that confirms the \"not too beneficial\" part then lol</p>",
        "id": 484591847,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653309
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\">https://github.com/bytecodealliance/wasmtime/pull/9681</a> did that -- have an <code>MmapOffsetRaw</code> that <code>&amp;Mmap</code> was always compared against</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1cee67a9f9f0813b0e3c50c535b92effa708a5f9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396239613666656230336437623362653864373336396162333933353934303265306265313734303234373965356633373334633533383931663831313961652f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363831&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681\" title=\"[RFC] Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9681 · bytecodealliance/wasmtime\">[RFC] Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9681 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is part of the work to centralize memory management into the mmap\nmodule. This commit introduces a few structures which aid in that process, and\nstarts converting one of the functions (MemoryI...</div></div></div>",
        "id": 484591874,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653324
    },
    {
        "content": "<p>That ran into at least two issues:</p>\n<ol>\n<li>How to deal with <code>StaticMemory</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681/files#diff-28c2cb0feca42e3f9df5ae472338b696640b6dfd104d8980c26b6b6822ac8443\">https://github.com/bytecodealliance/wasmtime/pull/9681/files#diff-28c2cb0feca42e3f9df5ae472338b696640b6dfd104d8980c26b6b6822ac8443</a></li>\n<li>How to deal with clear-on-drop for <code>reset_with_anon_memory</code> (see <code>cow.rs</code> in that PR)</li>\n</ol>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9681/files#diff-28c2cb0feca42e3f9df5ae472338b696640b6dfd104d8980c26b6b6822ac8443\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/af8588ce607520b7e1ac0c93bda35946440e307d/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3138303631383f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9681/files#diff-28c2cb0feca42e3f9df5ae472338b696640b6dfd104d8980c26b6b6822ac8443\" title=\"[RFC] Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9681 · bytecodealliance/wasmtime\">[RFC] Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9681 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is part of the work to centralize memory management into the mmap\nmodule. This commit introduces a few structures which aid in that process, and\nstarts converting one of the functions (MemoryI...</div></div></div>",
        "id": 484592101,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653419
    },
    {
        "content": "<p>Another issue there is how to deal with the decommit queue, which would need access to mmap functionality</p>",
        "id": 484592187,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653455
    },
    {
        "content": "<p>And that's where I felt like pervasive lifetime params would help... but then I ran into issues with the same code representing both owned and borrowed allocations <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 484592259,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653481
    },
    {
        "content": "<p>yeah those are all very good points and I can see where it all broke down...</p>",
        "id": 484592319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653491
    },
    {
        "content": "<p>So yeah I basically went through the 5 stages of grief yesterday</p>",
        "id": 484592328,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653495
    },
    {
        "content": "<p>lol</p>",
        "id": 484592338,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653498
    },
    {
        "content": "<p>man yeah you're not kidding</p>",
        "id": 484592354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653503
    },
    {
        "content": "<p>so many failed attempts yesterday lol</p>",
        "id": 484592447,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653550
    },
    {
        "content": "<p>I find that happens to me a lot when I'm not sure how to represent data ahead of time in rust</p>",
        "id": 484592495,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653580
    },
    {
        "content": "<p><code>Arc</code> in a sense is nice but it also pushes all of this under the carpet</p>",
        "id": 484592499,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653584
    },
    {
        "content": "<p>true</p>",
        "id": 484592515,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653592
    },
    {
        "content": "<p>I don't think it makes it that much harder to unwind all this in the future though -- at least with Arc it's explicit where all the places that need access to the mmap are</p>",
        "id": 484592632,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732653629
    },
    {
        "content": "<p>also true yeah</p>",
        "id": 484592696,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732653665
    },
    {
        "content": "<p>as a heads up my day is coming to a close and I fear I won't be able to get to this today, I'm also going to be mostly out for the rest of the week for US thanksgiving and such, but wanted to let you know I haven't forgotten this and I'll get to it next monday at the latest</p>",
        "id": 484608595,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732660969
    },
    {
        "content": "<p>no worries, thank you so much! I'm also going to take the next few days off</p>",
        "id": 484608736,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1732661042
    },
    {
        "content": "<p>oh dear my day has escaped me and I didn't get to this, I'll try to do this early tomorrow</p>",
        "id": 485723959,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1733180953
    },
    {
        "content": "<p>thank you! apologies for not getting back this week, have been very busy</p>",
        "id": 486602130,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1733522969
    },
    {
        "content": "<p>Updated <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9687\">https://github.com/bytecodealliance/wasmtime/pull/9687</a>, and added some notes about <code>impl Drop for LocalMemory</code> -- it actually identified the issue with <code>unwrap_static_image</code>! gosh I love rust</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9687\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6a44bd277d9715201b70e6fded2e23b6ccbf9559/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613438306638326534666333626136346630623435633539333861653665613431623638306134343361363233326136663033353634306538626562633936362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39363837&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9687\" title=\"Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9687 · bytecodealliance/wasmtime\">Move MemoryImageSource::map_at to mmap module by sunshowers · Pull Request #9687 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is part of the work to centralize memory management into the mmap\nmodule. This commit introduces a few structures which aid in that process, and\nstarts converting one of the functions (MemoryI...</div></div></div>",
        "id": 486607048,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1733525754
    },
    {
        "content": "<p>is there a way to run all CI jobs as part of the PR? seems like my PRs haven't been triggering miri even though my changes affect it</p>",
        "id": 486611804,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1733528961
    },
    {
        "content": "<p><code>prtest:full</code> in the commit message will do that!</p>",
        "id": 486611898,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733529012
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> -- to confirm, that's in the message of the PR tip? or any of the commits? or the PR summary?</p>",
        "id": 486611972,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1733529077
    },
    {
        "content": "<p>I think in the commit message of the commit that is tested (the tip); I don't think the CI setup is smart enough to grep further back in the commit stack</p>",
        "id": 486611998,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733529107
    },
    {
        "content": "<p>cool, thanks</p>",
        "id": 486612019,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1733529122
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0a894cb384201f1899098b8583ad6b2154579b98/.github/workflows/main.yml#L210\">https://github.com/bytecodealliance/wasmtime/blob/0a894cb384201f1899098b8583ad6b2154579b98/.github/workflows/main.yml#L210</a> ahh it looks like any of the commits in the PR will do based on that + a quick local test. thanks for the <code>prtest:full</code> reference, was easy to find once I had that :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0a894cb384201f1899098b8583ad6b2154579b98/.github/workflows/main.yml#L210\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9f7cd8ce9ecd432dd717e09a2bbb62a8819cdb67/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306537303863343639363738366632663738643137316234356535343139363061656130643266653761653132623061396666396134646461643936393565322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0a894cb384201f1899098b8583ad6b2154579b98/.github/workflows/main.yml#L210\" title=\"wasmtime/.github/workflows/main.yml at 0a894cb384201f1899098b8583ad6b2154579b98 · bytecodealliance/wasmtime\">wasmtime/.github/workflows/main.yml at 0a894cb384201f1899098b8583ad6b2154579b98 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 486612229,
        "sender_full_name": "Rain (they/them)",
        "timestamp": 1733529261
    },
    {
        "content": "<p>oh neat! leave it to our resident YAML Programmer(tm) <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> to do it the right way :-)</p>",
        "id": 486612272,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733529299
    }
]