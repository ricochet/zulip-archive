[
    {
        "content": "<p>Are there any recommended strategies how one might represent generics in a wit signature or in core WASM? I’d like to describe a module from a standard lib for a small programming language in wit but I know it doesn’t support custom generic types, does anyone have any hints on how I can represent and process such a thing in wit? What kind of protocol I’d need to come up with?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">combine</span>: <span class=\"nc\">a</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">a</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">a</span>\n<span class=\"w\">       </span><span class=\"n\">Identity</span>: <span class=\"nc\">a</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">a</span>\n</code></pre></div>\n<p>For example the above 2 functions</p>",
        "id": 431675396,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1712411700
    },
    {
        "content": "<p>One approach might be to make <code>a</code> be a handle to a resource, and then implement dynamic typing within that resource.</p>",
        "id": 431689507,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1712423558
    },
    {
        "content": "<p>But another approach is to consider that a standard lib for a language with a sophisticated type system may not be an advantageous place to use Wit, at least as long as Wit lacks custom generics.</p>",
        "id": 431689619,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1712423645
    },
    {
        "content": "<p>Thanks for the suggestion</p>",
        "id": 431692014,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1712425809
    },
    {
        "content": "<p>I am using a combination of <code>resource</code> types and <code>variant</code> types to model something genericish. The container resource holds the data, it is instantiated with an <code>enum</code> describing the generic child type, and it returns the child data wrapped in a <code>variant</code> the describes the type and holds the data. Not the prettiest thing in the world, but it works for the moment. </p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource container{\n    constructor(input: container-input);\n    get-data: func() -&gt; container-data;\n    get-child: func() -&gt; container-child;\n  }\n\n  variant container-child {\n    foo(foo-data),\n    unmodeled(string),\n  }\n\nrecord container-input {\n    child-event-type: container-child-types,\n    data: string\n  }\n\nenum container-child-types {\n    foo,\n    unmodeled,\n  }\n</code></pre></div>",
        "id": 433000265,
        "sender_full_name": "Landon James",
        "timestamp": 1712967596
    }
]