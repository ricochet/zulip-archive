[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> do you know if there is any standalone example or test of calling wasm exported functions from the wasmtime c-api? I can do it easily enough with functions that don't interact with memory, but I'm missing the magic that e.g. serializes string content into linear memory so the called function can read it. I assume that's spin's job in your world, but there must also be a generic way to accomplish it?</p>",
        "id": 383640149,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691676700
    },
    {
        "content": "<p>That magic was <code>wit-bindgen &lt;=0.2</code> prior to implementation of the component model, and components now.</p>",
        "id": 383642485,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691677083
    },
    {
        "content": "<p>Hmm. So what part of the wasmtime c-api provides it, or has the api not caught up with components yet?</p>",
        "id": 383642965,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691677151
    },
    {
        "content": "<p>The Wasmtime C API does not yet expose Wasmtime's component support (i.e. it's only available in the Rust API), so there's no easy way to do it.  Are you looking to instantiate and run a component, or just a module that uses the component canonical ABI (e.g. the output of TeaVM prior to running <code>wasm-tools component new</code>)?  If the former, you'll probably need to use Rust.  If the latter, you could probably hack something together that does the lifting and lowering according to <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md</a>.</p>",
        "id": 383643008,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691677157
    },
    {
        "content": "<p>Component support in the Wasmtime C API has been a common request, but it's a pretty big lift, and nobody has volunteered to do it, yet.</p>",
        "id": 383643593,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691677230
    },
    {
        "content": "<p>In the short term, I have a .wit \"myfunc: func(in: string) -&gt; string\" and the corresponding .java 'deserialization' boilerplate that bindgen gives, plus the .wasm teavm transpiles from that. I have a c program that loads that .wasm, instantiates it and gives me the 'myfunc' function handle. That function doesn't take a string, it takes two ints that key into the linear memory. So now I need the boilerplate for the 'serializer' that will poke a string into linear memory so the function can find it. So there isn't any library assistance for that, I have to hand tool it at present, and likewise all the more complex versions of the same call pattern?</p>",
        "id": 383646043,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691677576
    },
    {
        "content": "<p>I'm afraid so, if you need to stick with C.  If you can switch to Rust, it will all be taken care of for you.</p>",
        "id": 383647900,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691677854
    },
    {
        "content": "<p>Eventually I need C, but I can live with Rust for now I think. Where can I find a Rust example of doing that to use as a starting point?</p>",
        "id": 383648388,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691677927
    },
    {
        "content": "<p>The runtime tests in the <code>wit-bindgen</code> repo (e.g. <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/records.rs\">https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/records.rs</a>) are good examples.</p>",
        "id": 383649086,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678054
    },
    {
        "content": "<p>They all amount to pointing <code>wasmtime-wit-bindgen</code> <code>bindgen!</code> macro at a WIT file and then using the API it produces.</p>",
        "id": 383649373,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678108
    },
    {
        "content": "<p>Docs here: <a href=\"https://docs.rs/wasmtime/11.0.1/wasmtime/component/macro.bindgen.html\">https://docs.rs/wasmtime/11.0.1/wasmtime/component/macro.bindgen.html</a></p>",
        "id": 383649984,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678202
    },
    {
        "content": "<p>There's also a dynamic API which does not rely on build-time codegen (example here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/component_model/dynamic.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/component_model/dynamic.rs</a>).  That would be easier to wrap a C API around, I imagine.</p>",
        "id": 383650694,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678310
    },
    {
        "content": "<p>Hmm, so they use the rust bindgen in --import mode get a client ('serializer') and then call that? interesting. It should theoretically then be possible to generate, using that bindgen or another, a serializer function in wasm, then write a zero-args export function that calls it and which can be invoked from C. You'd basically put the serialization/call setup code itself in wasm instead of in C, since there is auto-generation for that but not for C.</p>",
        "id": 383651092,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691678372
    },
    {
        "content": "<p>I don't _think_ <code>--import</code> is a thing anymore in <code>wit-bindgen</code> now that we have WIT worlds, so I'm not quite following you on the first part.  But yeah, you could put some <code>extern \"C\"</code> functions in your Rust code to make them available to C.</p>",
        "id": 383652721,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678601
    },
    {
        "content": "<p>Hmm. So given a .wit file, I want to codegen two things: an implementation, and an api for calling that implementation. You're saying I can only generate the implementation?</p>",
        "id": 383653443,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691678702
    },
    {
        "content": "<p>You may be interested in <a href=\"#narrow/stream/327223-wit-bindgen/topic/Emitting.20resolved.20WIT.20packages.20to.20JSON.3F\">this thread</a> as well <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 383654455,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691678834
    },
    {
        "content": "<p>You can generate the guest APIs (i.e. the Wasm part) using <code>wit-bindgen</code> for Rust, C, Go, or Java (or Python or JS if you use the relevant tools).  For the time being, you can only generate the host APIs using Rust via <code>wasmtime-wit-bindgen</code>.</p>",
        "id": 383654574,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678857
    },
    {
        "content": "<p>Oh, and you can generate host APIs for Python, too, via <code>wasmtime-py</code>, assuming your component has no subcomponents.</p>",
        "id": 383655186,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678951
    },
    {
        "content": "<p>I _think_ those are the only host API generators for the component model at the moment.</p>",
        "id": 383655346,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691678976
    },
    {
        "content": "<p>Oh, and <code>jco</code> for JS</p>",
        "id": 383655697,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691679027
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> is working on C++ support for both guest and host.</p>",
        "id": 383655997,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691679075
    },
    {
        "content": "<p>Unless I misunderstand the terms, it's not a host/guest thing, it's a client/server or caller/callee thing. I can generate the receiving side for my function, now I want to generate the calling side for a guest language. Then the host's only job is to bootstrap that guest caller code. Apparently I can't put the calling logic directly in the host, my host is C and there isn't a codegen for that. But I should be able to put it in any guest language I want and then call that from C. My impression was the way to get bindgen to give me that calling code rather than the callee code was --import.</p>",
        "id": 383658480,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691679457
    },
    {
        "content": "<p>Hang on, what stops me generating the guest caller API in C and then just copying all that bindgen boilerplate into my own C host code? The only thing it should need is a shim giving it a pointer to the linear memory.</p>",
        "id": 383663119,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691680229
    },
    {
        "content": "<p>That might work.  I think you may need to edit the generated code to hook it up to Wasmtime, which will be a pain if you need to change the WIT and regenerate the code.  I'd recommend starting with a simple example and see how it goes.</p>",
        "id": 383670239,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691681367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438638\">Jonathan Halliday</span> <a href=\"#narrow/stream/206238-general/topic/wit-bindgen-teavm-java/near/383663119\">said</a>:</p>\n<blockquote>\n<p>Hang on, what stops me generating the guest caller API in C and then just copying all that bindgen boilerplate into my own C host code? The only thing it should need is a shim giving it a pointer to the linear memory.</p>\n</blockquote>\n<p>The canonical ABI is asymmetric, you can't use the same code on guest and host. This is due to exported linear memory from guest to host and shared nothing from host to guest. But due to the abi crate the effort to create host bindings is comparable to the effort to create guest bindings, with a good amount of code reuse.</p>",
        "id": 383693907,
        "sender_full_name": "Christof Petig",
        "timestamp": 1691685810
    },
    {
        "content": "<p>huh? Guest code doesn't know what it's talking to - could be the host, could be another guest. It's just a serialization protocol to a chunk of memory.</p>",
        "id": 383705949,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691688188
    },
    {
        "content": "<p>That's true. Host bindings differ from guest bindings because of how they need to interact with the wasmtime runtime.</p>",
        "id": 383719751,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691691226
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"438638\">Jonathan Halliday</span> <a href=\"#narrow/stream/206238-general/topic/wit-bindgen-teavm-java/near/383705949\">said</a>:</p>\n<blockquote>\n<p>huh? Guest code doesn't know what it's talking to - could be the host, could be another guest. It's just a serialization protocol to a chunk of memory.</p>\n</blockquote>\n<p>A component/guest can't talk to another component/guest without the host (or another external instance) copying/converting the data, due to their shared nothing design.</p>",
        "id": 383760026,
        "sender_full_name": "Christof Petig",
        "timestamp": 1691702087
    },
    {
        "content": "<p>Oh right, guest codegen is always from the perspective of the owner of the linear memory. Host codegen additionally needs to e.g. <code>cabi_realloc</code> to make space for new values.</p>",
        "id": 383763085,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691703139
    },
    {
        "content": "<p>The guest is the owner of the linear memory only after the host creates it and hands it off to the guest. Between those two steps the host can presumably poke whatever it likes into it.</p>",
        "id": 383767258,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1691704734
    },
    {
        "content": "<p>Well sure, but most guest environments will also have some kind of runtime (or at least static initialization) that expects control over at least parts of memory. As a general-purpose mechanism the canonical abi always asks the \"inner\" module for an allocation it can safely write to.</p>",
        "id": 383773345,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691706779
    }
]