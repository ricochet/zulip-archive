[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">.</span><span class=\"n\">text</span>\n\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">export_name</span><span class=\"w\">    </span><span class=\"n\">wasi_thread_start</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_thread_start</span>\n\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">globaltype</span><span class=\"w\"> </span><span class=\"n\">__stack_pointer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">globaltype</span><span class=\"w\"> </span><span class=\"n\">__tls_base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">functype</span><span class=\"w\">   </span><span class=\"n\">__wasi_thread_start_C</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span>\n\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">hidden</span><span class=\"w\"> </span><span class=\"n\">wasi_thread_start</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">globl</span><span class=\"w\">  </span><span class=\"n\">wasi_thread_start</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"k\">type</span><span class=\"w\">   </span><span class=\"nc\">wasi_thread_start</span><span class=\"p\">,</span><span class=\"o\">@</span><span class=\"n\">function</span>\n\n<span class=\"n\">wasi_thread_start</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">functype</span><span class=\"w\">   </span><span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span>\n\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Set</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">minimum</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">offsetof</span><span class=\"p\">(</span><span class=\"n\">start_arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">start_arg</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">stack</span>\n<span class=\"w\">    </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\">  </span><span class=\"n\">__stack_pointer</span>\n\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">start_arg</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">tls_base</span>\n<span class=\"w\">    </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\">  </span><span class=\"n\">__tls_base</span>\n\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Make</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">rest</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">work</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">tid</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">start_arg</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">__wasi_thread_start_C</span>\n\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Unlock</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">CLONE_CHILD_CLEARTID</span><span class=\"w\"> </span><span class=\"n\">would</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Linux</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">#</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">once</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">unlock</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">our</span><span class=\"w\"> </span><span class=\"s\">\"map_base\"</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">freed</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">joining</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">It</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">safe</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">ASM</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">longer</span><span class=\"w\"> </span><span class=\"k\">use</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">our</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">pthread_t</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">It</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">impossible</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">safely</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">C</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">there</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">no</span><span class=\"w\"> </span><span class=\"n\">way</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">tell</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\">   </span><span class=\"n\">__thread_list_lock</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\">   </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">As</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">optimization</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"w\"> </span><span class=\"n\">tl_lock_waiters</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">But</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">now</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">simply</span><span class=\"w\"> </span><span class=\"n\">wake</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">unconditionally</span><span class=\"w\"> </span><span class=\"k\">as</span>\n<span class=\"w\">    </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">CLONE_CHILD_CLEARTID</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"p\">.</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\">   </span><span class=\"n\">__thread_list_lock</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\">   </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">notify</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span>\n\n<span class=\"w\">    </span><span class=\"n\">end_function</span>\n</code></pre></div>\n<p>Dear Community,</p>\n<p>We are trying to integrate <code>wasi_thread_start.s</code> into our own pipeline. It compiles into an object file fine with the command:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>clang-16<span class=\"w\"> </span>--target<span class=\"o\">=</span>wasm32-wasi-threads<span class=\"w\"> </span>-matomics<span class=\"w\"> </span>-mbulk-memory<span class=\"w\"> </span>-mmutable-globals<span class=\"w\"> </span>-mllvm<span class=\"w\"> </span>-wasm-enable-sjlj<span class=\"w\"> </span>-o<span class=\"w\"> </span>wasi_thread_start.o<span class=\"w\"> </span>-c<span class=\"w\"> </span>wasi_thread_start.s\n</code></pre></div>\n<p>However, when executing, we are facing the problem: <code>global is immutable: cannot modify it with global.set</code>. Any help would be much appreciated!</p>\n<p>Best,<br>\nDennis</p>",
        "id": 456633940,
        "sender_full_name": "Dennis Zhang",
        "timestamp": 1722872712
    },
    {
        "content": "<p>Wasi-libc's build system seems to only pass <code>--target=wasm32-wasi-threads -matomics</code> to clang for compiling assembly. Maybe one of the other flags you pass shouldn't be passed? Also wasi-sdk is compiled with clang 18, rather than clang 16. That could also cause this problem.</p>",
        "id": 456685020,
        "sender_full_name": "bjorn3",
        "timestamp": 1722885889
    }
]