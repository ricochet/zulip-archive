[
    {
        "content": "<p>I see atomic.wait.i32 and atomic.notify.i32 in the spec -- if I try to use the intrinsic  <code>__builtin_wasm_atomic_wait_i32</code> clang blows up with: <code>fatal error: error in backend: Cannot select: intrinsic %llvm.wasm.atomic.wait.i32.</code>  What am I doing wrong?</p>\n<p>Also, from reading the spec, it seems like these instructions will trap if called when the memory buffer is not a shared buffer (i.e. when threads aren't possible).  Is this true?</p>",
        "id": 195851415,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588258778
    },
    {
        "content": "<p>At the wasm level, yes, wait on non-shared memory was changed to trap: <a href=\"https://github.com/WebAssembly/threads/pull/147\" title=\"https://github.com/WebAssembly/threads/pull/147\">https://github.com/WebAssembly/threads/pull/147</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/threads/pull/147\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/threads/pull/147\" title=\"Allow atomic operations on unshared memories by tlively 路 Pull Request #147 路 WebAssembly/threads\">Allow atomic operations on unshared memories by tlively 路 Pull Request #147 路 WebAssembly/threads</a></div><div class=\"message_embed_description\">As discussed in the CG on November 12, 2019 and in #144. Specifically,\nall atomic accesses are now allowed to validate and execute normally\non unshared memories and wait operations trap when used w...</div></div></div>",
        "id": 195859035,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588261632
    },
    {
        "content": "<p>At the toolchain level, we used to have separate options for \"what wasm spec features are available?\" and \"what threading model do you want the compiler to use?\"</p>",
        "id": 195859405,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588261788
    },
    {
        "content": "<p>There was pushback from people who felt that there were too many options, so now we no longer have a way to configure these separately. Unfortunately, this means we no longer have a way to support <code>wait</code> without enabling a muilti-threaded model, but WASI doesn't support the multi-threaded models</p>",
        "id": 195859596,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588261860
    },
    {
        "content": "<p>The trap piece makes sense (was just unfortunate, I was hoping to use wait to end up with a sleep() equivalent, regardless of threading model) -- but is the clang error just due to the compiler not being allowed to emit an atomic wait because it knows that the code doesn't have the multi-threaded model selected?</p>",
        "id": 195860540,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588262227
    },
    {
        "content": "<p>(I have a meeting in 2 minutes, but briefly here,) the error is that the backend doesn't think that the target has a wait instruction, so it doesn't know how to encode a wait intrinsic.</p>",
        "id": 195860916,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588262360
    },
    {
        "content": "<p>You can tell it that it has a wait instruction with -mthreads, but that has other side effects</p>",
        "id": 195860962,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588262380
    },
    {
        "content": "<p>Also, ideally clang should be diagnosing the \"I don't know how to do that with the current target configuration\" error, rather than letting the backend crash on it, but that's just for tidiness</p>",
        "id": 195861147,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588262440
    },
    {
        "content": "<p>makes sense, thanks!</p>",
        "id": 195862154,
        "sender_full_name": "Vladimir Vukicevic",
        "timestamp": 1588262815
    }
]