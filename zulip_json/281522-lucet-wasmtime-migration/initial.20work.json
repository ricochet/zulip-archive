[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> I was reading over <a href=\"https://github.com/yurydelendik/wasmtime/commit/3eef46346e1a813484803028be5765286b201b48\">your patch</a> this morning, overall I think it's roughly in the right direction but I think we'll ideally want to structure things differently</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yurydelendik/wasmtime/commit/3eef46346e1a813484803028be5765286b201b48\" style=\"background-image: url(https://avatars.githubusercontent.com/u/1523410?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yurydelendik/wasmtime/commit/3eef46346e1a813484803028be5765286b201b48\" title=\"Some AOT linking: _raw_ for wasi; serialize meta · yurydelendik/wasmtime@3eef463\">Some AOT linking: _raw_ for wasi; serialize meta · yurydelendik/wasmtime@3eef463</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - yurydelendik/wasmtime</div></div></div>",
        "id": 229499296,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305591
    },
    {
        "content": "<p>I think one of the first things we'll want to land is the ability to build the <code>wasmtime</code> crate without the cranelift jit, that's a refactoring which is needed no matter what the AOT world shapes up to be</p>",
        "id": 229499464,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305618
    },
    {
        "content": "<p>I'm imagining that in the <code>wasmtime</code>-without-cranelift world we wouldn't give you <code>Module::new</code> (and friends) and you would only have <code>Module::deserialize</code> to create a module you could then instantiate.</p>",
        "id": 229499682,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305657
    },
    {
        "content": "<p>I think next what might be good is to change your PR to add a new API like <code>Module::from_wasm2obj</code> (or sometehing like that) where it takes a <code>*const u8</code> which is the metadata symbol created by <code>wasm2obj</code> for now.</p>",
        "id": 229499965,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305705
    },
    {
        "content": "<p>Basically that would be a different way of saying \"here's a precompiled object, give me the module\"</p>",
        "id": 229500154,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305731
    },
    {
        "content": "<p>that should vastly simplify integration work and everything else because at that point it's just \"use the <code>wasmtime</code> crate\"</p>",
        "id": 229500251,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305751
    },
    {
        "content": "<p>if you want to make an issue that's ok, but I'm not sure that it's necessarily required here</p>",
        "id": 229500555,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305819
    },
    {
        "content": "<p>I can create issue a meta issue that outlines the patch action items</p>",
        "id": 229500696,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1615305850
    },
    {
        "content": "<p>refactoring to be able to compile without cranelift is mostly just a given, and then something like <code>Module::from_wasm2obj</code> could ideally be maintained as a pretty small patch for now while we figure out what best for rfcs and such</p>",
        "id": 229500716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305854
    },
    {
        "content": "<p>The peformance numbers y'all get will I think heavily influence what the action items are</p>",
        "id": 229500800,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305875
    },
    {
        "content": "<p>I think that's the main next step because we'll need feedback for what performance aspects are required</p>",
        "id": 229500921,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305905
    },
    {
        "content": "<p>e.g. static calls and such if necessary</p>",
        "id": 229500980,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305915
    },
    {
        "content": "<p>If you can use the wasmtime-crate roughly as-is today and are happy with the performance that's naturally the ideal (maybe a patch or two of course), but something where you want static calls to static symbols for either imports or exports (or both) will significantly change the design I think</p>",
        "id": 229501257,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615305968
    },
    {
        "content": "<p>I did not see performance numbers, but I assume they are connected with heavy use of function wrappers and trampolines</p>",
        "id": 229501274,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1615305973
    },
    {
        "content": "<p>right yeah, I just want to make sure we're looking at concrete numbers and we're in a position where literally everything is optimal <em>except</em> for the static vs indirect function call</p>",
        "id": 229501430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306008
    },
    {
        "content": "<p>also though, another possible work item, it seems reasonable to make <code>Module::serialize</code> basically the exact output of <code>wasm2obj</code> perhaps</p>",
        "id": 229501816,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306088
    },
    {
        "content": "<p>(or at least more similar than it is today)</p>",
        "id": 229501877,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306098
    },
    {
        "content": "<p>the risk is creating valid native object files</p>",
        "id": 229502047,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1615306136
    },
    {
        "content": "<p>there's some trickery involved yeah where the formats are slightly different but I think that's ok</p>",
        "id": 229502244,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306181
    },
    {
        "content": "<p>for now, Module::serialize uses okay format</p>",
        "id": 229502276,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1615306189
    },
    {
        "content": "<p>like for <code>wasm2obj</code> we'll need to implement most of that anyway</p>",
        "id": 229502278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306190
    },
    {
        "content": "<p>I'm basically trying to see if there's stuff to land immediately which is just internal  refactorings/etc which makes the final patch to land this feature smaller</p>",
        "id": 229502443,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306218
    },
    {
        "content": "<p>along the lines of \"<code>wasmtime</code> should have a build mode without <code>cranelift</code>\"</p>",
        "id": 229502535,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306237
    },
    {
        "content": "<p>there's no need to delay that work until this feature lands</p>",
        "id": 229502560,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615306245
    },
    {
        "content": "<p>I agree. I'll try to extract that piece from WIP</p>",
        "id": 229502924,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1615306363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> a quick question about \"building wasmtime without the cranelift jit\" --- Still a bit confused by this. Could you clarify if this is referring to a step that occurs when I run <code>cargo build</code> in the wasmtime git repo or something to do with instantiating a wasm instance during runtime?</p>",
        "id": 229545501,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1615320871
    },
    {
        "content": "<p>If it helps, I think the former is largely not a blocker for a v1. The latter would be important to address <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 229545990,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1615321077
    },
    {
        "content": "<p>There is a great deal of coupling between environment, runtime, and, JIT, also, cranelift. this step will allow to clarify the boundary between runtime and JIT/cranelift</p>",
        "id": 229547193,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1615321562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270657\">@Shravan Narayan</span> ah this is largely about the internal organization of wasmtime itself, this wouldn't be a blocker for gaming anything out or taking a look at numbers. I'm assuming though that the final embedding within rlbox would ideally not like to pull in cranelift at runtime, and this is what would enable that</p>",
        "id": 229553042,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615323664
    },
    {
        "content": "<p>I think that makes sense. Ideally yes, we would like to be able to exclude that. I'll go further and say this shouldn't block shipping a v1 of RLBox+wasmtime to Firefox's pre-release channels as well since Firefox would already ship the cranelift package for wasm's web use case. So the memory footprint of the cranelift package is already present</p>",
        "id": 229557500,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1615325454
    },
    {
        "content": "<p>ah ok, then I think the next step is to look at benchmark numbers and see what needs to be optimized yet. In parallel perhaps we could add something like <code>Module::from_wasm2obj</code> which does everything internally to handle the precompilation part, but this shouldn't affect much of the performance measurement</p>",
        "id": 229558383,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1615325798
    },
    {
        "content": "<p>To clarify, I don't believe we are currently shipping runtime cranelift to most of our users</p>",
        "id": 229723763,
        "sender_full_name": "Bobby Holley",
        "timestamp": 1615403195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254435\">@Bobby Holley</span>  oh sorry. I thought I saw cranelift was in the src tree already, but perhaps it doesn't get included in the actual build which gets shipped. From a shipping standpoint, are we safe to assume the memory footprint of a few additional MB of unused code (cranelift-jit)  wouldn't be a blocker for us.</p>",
        "id": 229748113,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1615411761
    },
    {
        "content": "<blockquote>\n<p>From a shipping standpoint, are we safe to assume the memory footprint of a few additional MB of unused code (cranelift-jit) wouldn't be a blocker for us.</p>\n</blockquote>\n<p>Having been part of the multi-year discussions about shipping the JS Intl API and the associated multiple MBs of locale data, I'm pretty sure that the answer will be \"no\".</p>\n<p>I also would hope that it wouldn't be too hard to create a build config that doesn't include the JIT, but obviously others might know better. At the very least this should be perfectly parallelizable with a lot of the other work, and not preclude experimentation</p>",
        "id": 229753965,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1615413813
    }
]