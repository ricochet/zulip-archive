[
    {
        "content": "<p>I've tried to use the cpython binaries in componentize-py, but didn't get very far because the libpython3.13.a needs to be compiled with -fPIC for this to work unless I'm reading the output wrong, it spews a lot of errors in the form of<br>\n<code>wasm-ld: error: componentize-py/pybuild/libpython3.13.a(getbuildinfo.o): relocation R_WASM_MEMORY_ADDR_LEB cannot be used against symbol </code>initialized<code>; recompile with -fPIC</code></p>",
        "id": 463881128,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1724191750
    },
    {
        "content": "<p>Yup, hence <a href=\"https://github.com/bytecodealliance/componentize-py/blob/4f3045bfe3609f0627b8be595ce6a3f1faff979d/build.rs#L289\">https://github.com/bytecodealliance/componentize-py/blob/4f3045bfe3609f0627b8be595ce6a3f1faff979d/build.rs#L289</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/blob/4f3045bfe3609f0627b8be595ce6a3f1faff979d/build.rs#L289\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1ad7f4ce6e674a27fb51f00b70e77b6e52f8e456/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303965626466383464633035323331336632613866623662373739663533303332356261653466336333366162303039346666376665613539643565356334352f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/blob/4f3045bfe3609f0627b8be595ce6a3f1faff979d/build.rs#L289\" title=\"componentize-py/build.rs at 4f3045bfe3609f0627b8be595ce6a3f1faff979d · bytecodealliance/componentize-py\">componentize-py/build.rs at 4f3045bfe3609f0627b8be595ce6a3f1faff979d · bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 463882812,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724192669
    },
    {
        "content": "<p>yes, I guess what I'm asking is if Brett could add that to the other build too</p>",
        "id": 463882952,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1724192748
    },
    {
        "content": "<p>What's the impact going to be? The build I create isn't entirely a shared library on it's own to begin with since WASI doesn't directly support that w/o using componentize-py. Is it just binary size that's going to be unhappy? And is this something to turn on universally for all WASI builds (i.e. upstream this), or more of a special case? Basically why hasn't <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> asked for this before?</p>\n<p>And <span class=\"user-mention\" data-user-id=\"550770\">@Ramon Klass</span> , the build process is documented at <a href=\"https://devguide.python.org/getting-started/setup-building/#wasi\">https://devguide.python.org/getting-started/setup-building/#wasi</a> if you ever need to do your own custom build.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://devguide.python.org/getting-started/setup-building/#wasi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b9f3ed676c3e77f3927bd823a6578b781689821a/68747470733a2f2f64657667756964652e707974686f6e2e6f72672f5f7374617469632f6f672d696d6167652d323030783230302e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://devguide.python.org/getting-started/setup-building/#wasi\" title=\"Setup and building\">Setup and building</a></div><div class=\"message_embed_description\">These instructions cover how to get a working copy of the source code and a compiled version of the CPython interpreter (CPython is the version of Python available from https://www.python.org/). It...</div></div></div>",
        "id": 465245697,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1724695009
    },
    {
        "content": "<p><code>-fPIC</code> <em>does</em> have performance and binary size costs, which is part of why <code>wasi-libc</code> currently builds seperate .o files for the .a and .so libraries.  Personally, I think those costs aren't worth worrying about, but some folks care.</p>\n<p>As for why I haven't asked for it: I've been content to use my lightly patched fork, with no urgent need to upstream those patches.  Sounds <span class=\"user-mention\" data-user-id=\"550770\">@Ramon Klass</span> is motivated, though :)</p>",
        "id": 465253659,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724698275
    },
    {
        "content": "<p>well if the patcfh for socket support is still needed then we can't move away from the fork anyway, so I'm not sure how useful proving that you can build a version with upstream  cpython-wasi which does not support everything the current build does would be</p>",
        "id": 465254558,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1724698677
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/componentize-py.20with.20cpython-wasi-build/near/465253659\">said</a>:</p>\n<blockquote>\n<p><code>-fPIC</code> <em>does</em> have performance and binary size costs</p>\n</blockquote>\n<p>We talking 1% or 10% impact?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/componentize-py.20with.20cpython-wasi-build/near/465253659\">said</a>:</p>\n<blockquote>\n<p>As for why I haven't asked for it: I've been content to use my lightly patched fork, with no urgent need to upstream those patches.</p>\n</blockquote>\n<p>Except I'm starting to get questions beyond this as to why componentize-py doesn't work w/ the latest releases of CPython or why/how does it deviate. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p><span class=\"user-mention silent\" data-user-id=\"550770\">Ramon Klass</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/componentize-py.20with.20cpython-wasi-build/near/465254558\">said</a>:</p>\n<blockquote>\n<p>if the patch for socket support is still needed</p>\n</blockquote>\n<p>It is because I can't even test the socket support until there is thread support and I'm not comfortable claiming <code>socket</code> is supported w/o the test suite working (i.e. I tried a couple of weeks ago and nearly every test errored out or was skipped; the only test that didn't failed). And as a side note, a key reason VS Code doesn't support WASI 0.2 is because of the lack of threads and now important they are to networking, and thus devaluing the work to port VS Code (and thus CPython for me) to WASI 0.2 and use new features (things build fine, just nothing new is turned on within Python).</p>",
        "id": 465505340,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1724777466
    },
    {
        "content": "<blockquote>\n<p>We talking 1% or 10% impact?</p>\n</blockquote>\n<p>For libc.a, the binary size difference was about 1% (889KB vs 900KB).  I never did any timing benchmarks, so I don't have any numbers for that; sorry.</p>",
        "id": 465509918,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724778475
    },
    {
        "content": "<p>FWIW, I had a lot of the asyncio socket tests passing at one point.  The ones that didn't pass involved e.g. process forking and signal handling.  Not sure if it would be practical to carve out the working subset of tests and run only those for WASI; might be a lot of work.</p>",
        "id": 465510471,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724778634
    },
    {
        "content": "<p>that's unfortunate, especially since the threads are only needed to monitor the socket. As Joel said only running the async tests might be an option but I'm not familiar with the python test suite yet, maybe I should indeed go through your guide at least once :)</p>",
        "id": 465537437,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1724785900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  side note not related to the cpython builds: since you ship the libc of wasi-sdk in componentize-py, that means wasi-wheels needs to use the same wasi-sdk version for any wheels that compiled c code</p>\n<p>I'd like to bump both to wasi-sdk 24 and see how it goes now that I fixed my buildchain, but I thought it would make sense to upgrade wasi-sdk alongside cpython since for python users it's clear that they need different wheels for py313, but not so clear that a componentize-py upgrade breaks certain wheel files</p>",
        "id": 465548581,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1724788471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/componentize-py.20with.20cpython-wasi-build/near/465510471\">said</a>:</p>\n<blockquote>\n<p>FWIW, I had a lot of the asyncio socket tests passing at one point.  The ones that didn't pass involved e.g. process forking and signal handling.  Not sure if it would be practical to carve out the working subset of tests and run only those for WASI; might be a lot of work.</p>\n</blockquote>\n<p>The asyncio tests will just make sure sockets are async, not that the socket themselves work appropriately. Much like w/ anything POSIX, our socket test suite is extensive and I don't feel comfortable claiming support until I know exactly where the incompatibilities lie. And with a test suite just shy of 800 tests, I would not expect unthreading it is going to be quick and easy. It also doesn't help that someone who volunteered to look into socket support thought it wasn't worth it w/o more work, e.g., lack of <code>getaddrinfo()</code> (<a href=\"https://github.com/python/cpython/issues/121634#issuecomment-2271446647\">https://github.com/python/cpython/issues/121634#issuecomment-2271446647</a>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/python/cpython/issues/121634#issuecomment-2271446647\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3ecc54c17da15e0690c11cb8d48cfbbf37bd10a6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623133333836626336666562353963663931356137363536666232333238366663316539626332306237383233643438613866333232366534366330323431372f707974686f6e2f63707974686f6e2f6973737565732f313231363334&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/python/cpython/issues/121634#issuecomment-2271446647\" title=\"Test the `wasm32-wasip2` target triple · Issue #121634 · python/cpython\">Test the `wasm32-wasip2` target triple · Issue #121634 · python/cpython</a></div><div class=\"message_embed_description\">https://bytecodealliance.zulipchat.com/#narrow/stream/394175-SIG-Guest-Languages/topic/Python.20subgroup/near/450807393 Requires #120371 since WASI SDK 22 is required. But this supposedly has some ...</div></div></div>",
        "id": 465818613,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1724866074
    },
    {
        "content": "<p>Ironically, the CPython asyncio test suite was a huge help in getting <code>getaddrinfo</code> working and addressing corner cases.  I'd be curious what specifically makes it \"not usable\".  Issues on the <code>wasi-libc</code> repo would be most welcome!</p>",
        "id": 465819955,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724866668
    },
    {
        "content": "<blockquote>\n<p>The asyncio tests will just make sure sockets are async</p>\n</blockquote>\n<p>That surprises me.  <a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_streams.py\">This test</a>, for example, seems to be doing more than checking whether sockets are async.  They're connecting, reading, writing, etc.  And <a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_events.py\">this one</a> tests multiplexing.  Others test UDP multicast, various ioctl settings, etc.  It was all quite helpful getting the <code>wasi-libc</code> stuff into shape.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_streams.py\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/511b31a23028568a8f704205c7d016e90a52f37e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646533626435353932623932613735333239626231316264343831616437323433666437366461643564353830303264303539623637313436333736396263392f707974686f6e2f63707974686f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_streams.py\" title=\"cpython/Lib/test/test_asyncio/test_streams.py at main · python/cpython\">cpython/Lib/test/test_asyncio/test_streams.py at main · python/cpython</a></div><div class=\"message_embed_description\">The Python programming language. Contribute to python/cpython development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_events.py\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/511b31a23028568a8f704205c7d016e90a52f37e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646533626435353932623932613735333239626231316264343831616437323433666437366461643564353830303264303539623637313436333736396263392f707974686f6e2f63707974686f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_events.py\" title=\"cpython/Lib/test/test_asyncio/test_events.py at main · python/cpython\">cpython/Lib/test/test_asyncio/test_events.py at main · python/cpython</a></div><div class=\"message_embed_description\">The Python programming language. Contribute to python/cpython development by creating an account on GitHub.</div></div></div>",
        "id": 465821536,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724867144
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/componentize-py.20with.20cpython-wasi-build/near/465821536\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The asyncio tests will just make sure sockets are async</p>\n</blockquote>\n<p>That surprises me.  <a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_streams.py\">This test</a>, for example, seems to be doing more than checking whether sockets are async.  They're connecting, reading, writing, etc.  And <a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_asyncio/test_events.py\">this one</a> tests multiplexing.  Others test UDP multicast, various ioctl settings, etc.  It was all quite helpful getting the <code>wasi-libc</code> stuff into shape.</p>\n</blockquote>\n<p>But that's still unfortunately a subset of the socket tests; when I say \"sockets are supported\", people are going to think of <a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_socket.py\">https://github.com/python/cpython/blob/main/Lib/test/test_socket.py</a> passing, not <code>test_asyncio</code>.</p>\n<p>Regardless, work -- aka VS Code as the primary user of my WASI work -- isn't moving to WASI 0.2 yet no matter what support I get going, so sinking my time into setting up a new tier -- since <code>wasm32-wasip2</code> is a new triple to cover w/ e.g., buildbots -- isn't worth the 20% time I'm getting for WASI starting next month. Get VS Code to support WASI 0.2 and then we can talk about worrying about network support w/o threads.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/python/cpython/blob/main/Lib/test/test_socket.py\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ebe323a299fa06f70b5ffec8d86aad4935e0a9c2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653138336439646431663831346634633265343266366130313861343764356630303730656638613638323237333339623730663833646563623737643730662f707974686f6e2f63707974686f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/python/cpython/blob/main/Lib/test/test_socket.py\" title=\"cpython/Lib/test/test_socket.py at main · python/cpython\">cpython/Lib/test/test_socket.py at main · python/cpython</a></div><div class=\"message_embed_description\">The Python programming language. Contribute to python/cpython development by creating an account on GitHub.</div></div></div>",
        "id": 466077999,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1724953802
    },
    {
        "content": "<p>Indeed, I wouldn't say \"sockets are supported\".  I'd say \"a useful subset of sockets are supported\" -- enough to make non-trivial libraries like Redis-Py work.  It's a big step forward from \"not at all supported\", even if doesn't solve every possible case.</p>",
        "id": 466078918,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724954046
    },
    {
        "content": "<p>It's a bummer that the main sockets tests require multithreading to run; I'd expect most of them would pass otherwise.  I understand that it's kind of inevitable that you'd want more than one thread (or else multiple processes) when testing blocking sockets, so it's not surprising, but I hope folks will see beyond that and recognize the usefulness of what we've built already rather than assume they'll need to wait for multithreading before socket support is useful.</p>",
        "id": 466081714,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724954821
    },
    {
        "content": "<p>actually, that's not Brett</p>",
        "id": 466090073,
        "sender_full_name": "Ralph",
        "timestamp": 1724957472
    },
    {
        "content": "<p>that's me, and other</p>",
        "id": 466090093,
        "sender_full_name": "Ralph",
        "timestamp": 1724957477
    },
    {
        "content": "<p>we get to demonstrate that it's important to do. Brett, you, and others have done amazing things here already.</p>",
        "id": 466090174,
        "sender_full_name": "Ralph",
        "timestamp": 1724957504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/componentize-py.20with.20cpython-wasi-build/near/466081714\">said</a>:</p>\n<blockquote>\n<p>It's a bummer that the main sockets tests require multithreading to run; I'd expect most of them would pass otherwise.  I understand that it's kind of inevitable that you'd want more than one thread (or else multiple processes) when testing blocking sockets, so it's not surprising, but I hope folks will see beyond that and recognize the usefulness of what we've built already rather than assume they'll need to wait for multithreading before socket support is useful.</p>\n</blockquote>\n<p>Dirk should hopefully be at the plumber's summit so you can bug him in person to change VS Code's plans. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 466108775,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1724963812
    },
    {
        "content": "<p>I'm not trying to change anyone's plans or tell them what to do; just pointing out that WASIp2 sockets support in Python is already in a usable state.  No problem at all if now is not the time to upstream it into CPython.  <code>componentize-py</code> is there for anyone who wants to use it in the meantime.</p>",
        "id": 466109862,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724964305
    },
    {
        "content": "<p>yeah, this is a Microsoft/BigCorp thing. Branded things do not invest in \"usable states\". Their customers demand money if bugs happen, or demand immediate fixes whether they're paying for that extra \"sudden\" work or not. And that sudden work, as you'll imagine, is a very expensive opportunity cost for other things suddenly NOT done.</p>",
        "id": 466215195,
        "sender_full_name": "Ralph",
        "timestamp": 1725010990
    },
    {
        "content": "<p>My job is to help Dirk's tree understand where small steps along with our work here place vscode in the position to \"suddenly lean in\" when it has enough stability for them to commit to unknown future customers.</p>",
        "id": 466215499,
        "sender_full_name": "Ralph",
        "timestamp": 1725011041
    },
    {
        "content": "<p>Interestingly, Kubernetes really changed all that; implementing even WASI support was speculative on Dirk's part (partly based on my sharing the beautiful vision of the future, paved with gold, that components lead us toward....). These days <strong>some</strong> customers will actually run something in a \"usable state\", which is great! But that remains a minority.</p>",
        "id": 466217050,
        "sender_full_name": "Ralph",
        "timestamp": 1725011269
    },
    {
        "content": "<p><em>my job is to break that even more</em> :-)</p>",
        "id": 466217183,
        "sender_full_name": "Ralph",
        "timestamp": 1725011285
    },
    {
        "content": "<p>you can think of the .NET thing the same way. There's like two years of work behind the point we're at now -- lots of persuasion on my part and lots of extended vision on theirs.</p>",
        "id": 466217478,
        "sender_full_name": "Ralph",
        "timestamp": 1725011337
    },
    {
        "content": "<p>(This, not mentioning all the hard work of you and timmy and scott and others)</p>",
        "id": 466217586,
        "sender_full_name": "Ralph",
        "timestamp": 1725011357
    },
    {
        "content": "<p>now, all that said, documenting this thread somewhere and making it \"the way\" until we can get resources to tackle the \"socket coverage problem\" in cpython would be a good thing. We can't live on Joel's fork forever. :-)</p>",
        "id": 466230310,
        "sender_full_name": "Ralph",
        "timestamp": 1725013860
    }
]