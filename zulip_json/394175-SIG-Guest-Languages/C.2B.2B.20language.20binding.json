[
    {
        "content": "<p>I have created a <a href=\"https://github.com/cpetig/wit-bindgen\">wit-bindgen fork</a> providing high level type support for C++ (std::{optional, expected, string, vector, …}, namespaces, methods on resources).</p>\n<p>Because this is sadly not commercially backed and I prefer writing Rust over C++ in my spare time, I don't aim to maintain a functionally complete solution (yet), but perhaps there is enough interest to turn this into a group effort.</p>\n<p>Over the past weeks I gained enough knowledge of the code base to adapt it into supporting my subset of WIT, both on the guest and host (WAMR) side.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7f0897f81fc528586a1a83381419203709bdcefb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313931316263616539666162343935653831376261383464306534666635376431313438343162663733653533643561313864306664323166353739313337662f6370657469672f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen\" title=\"GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div>",
        "id": 379745422,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690624925
    },
    {
        "content": "<p>Is this a temporary fork that you're intending to contribute back up to wit-bindgen?</p>",
        "id": 380419491,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690821851
    },
    {
        "content": "<p>This is meant as a temporary fork, mostly because I won't be able to quickly reach the quality of code and completeness I would expect from integration into the official repository.</p>",
        "id": 380506605,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690841838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"614853\">Ayako Akasaka</span> <a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/391645311\">said</a>:</p>\n<blockquote>\n<p>I saw your great work(<a href=\"https://github.com/cpetig/resource-demo/blob/main/guest-cpp/main.cpp\">https://github.com/cpetig/resource-demo/blob/main/guest-cpp/main.cpp</a>) and <a href=\"https://github.com/cpetig/wit-bindgen.git\">https://github.com/cpetig/wit-bindgen.git</a>. It worked well for my project.<br>\nAre you going to push \"wit-bindgen cpp-host/c-host\" to main wit-bindgen? And can we contribute if it can help you to accelerate?</p>\n</blockquote>\n<p>I answer in this channel to keep the information about C++ bindings more together.</p>\n<p>I plan to propose a merge into main wit-bindgen once the test cases work for C++ and I no longer have lots of dead and duplicated code - as I copied parts together from the Rust and C binding. Also my understanding of the inner structure has improved a lot since I started the fork, now I know how to use FunctionBindgen::emit(). Even though this isn't yet used in all places it makes sense.</p>\n<p>I would love to get some feedback on the binding, e.g. whether std::optional and std::expected work for you and whether using &amp;&amp; for non-borrowed arguments would be acceptable (I think this is the most reasonable option, but it will require plenty of std::move). Borrowed arguments (also all non-resource arguments to imported functions) would receive T const&amp;.</p>\n<p>If you happen to use C++ in the context of adaptive AUTOSAR you have an additional option, as I maintain a special fork² to generate code for their C++14 compatible types.</p>\n<p>Best regards<br>\n   Christof</p>",
        "id": 391761959,
        "sender_full_name": "Christof Petig",
        "timestamp": 1695065269
    },
    {
        "content": "<p>Another issue is with <code>string</code> and <code>list</code> types, as with Rust you can convert these objects into and from a <code>realloc</code>ed pointer  - but with C++ these conversions aren't supported by the std library (as far as I can tell). So I used an owning <code>string_view</code> and <code>span</code> derivative as a workaround.</p>",
        "id": 391764148,
        "sender_full_name": "Christof Petig",
        "timestamp": 1695066236
    },
    {
        "content": "<p>Hi, <span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> <br>\nI saw you doing a lot at <a href=\"https://github.com/cpetig/wit-bindgen/pull/1\">https://github.com/cpetig/wit-bindgen/pull/1</a>.<br>\nYou're doing a lot of hard work.<br>\nIf possible, could you please tell me about the current status?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen/pull/1\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/92bb79b704229f479716df643f99ba83feee40c9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623539303833353436363565306336393866316532643738346163663064636339333762656662366235313231613165663964323236313430376238346362612f6370657469672f7769742d62696e6467656e2f70756c6c2f31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen/pull/1\" title=\"Ongoing rework of the C++ generator from scratch by cpetig · Pull Request #1 · cpetig/wit-bindgen\">Ongoing rework of the C++ generator from scratch by cpetig · Pull Request #1 · cpetig/wit-bindgen</a></div><div class=\"message_embed_description\">A (C++) language binding generator for WebAssembly interface types - Ongoing rework of the C++ generator from scratch by cpetig · Pull Request #1 · cpetig/wit-bindgen</div></div></div>",
        "id": 404264606,
        "sender_full_name": "Ayako Akasaka",
        "timestamp": 1701009986
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"614853\">Ayako Akasaka</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/C.2B.2B.20language.20binding/near/404264606\">said</a>:</p>\n<blockquote>\n<p>If possible, could you please tell me about the current status?</p>\n</blockquote>\n<p>The overly simple resource example from <a href=\"https://github.com/cpetig/resource-demo/blob/main/wit/simple.wit\">https://github.com/cpetig/resource-demo/blob/main/wit/simple.wit</a> works for both guest and host (but I want to change the interface for class implementation from private implementation to a user controlled class definition ASAP).</p>\n<p>Today I was able to create host bindings for WASI:cli@0.2.0-rc (no panic) but with a lot of stubs in the generated code. I plan to enable this case within the coming days. But still supporting all data types (record, flags, variant, list, result, resource) in both directions is a large task.</p>\n<p>So I would say that unless you want to generate something very simple, the current code is not yet up to the task (because I need resources I didn't implement the more simple data types first). Feel free to give it a try, but don't expect the generated code to be correct, yet.</p>\n<p>But the most arduous part (getting any code output) should be completed as of today.</p>\n<p>Best regards, Christof</p>",
        "id": 404294769,
        "sender_full_name": "Christof Petig",
        "timestamp": 1701037079
    },
    {
        "content": "<p>Update: I changed the class implementation (export) to include an user controlled header (with an autogenerated template).<br>\nI will now proceed to implementing more of the WASI types on host side.</p>\n<p>PS: Please drop me a note if my constant rebasing to upstream main creates unnecessary work, then I can start creating merges.</p>",
        "id": 404491692,
        "sender_full_name": "Christof Petig",
        "timestamp": 1701120326
    },
    {
        "content": "<p>I promised <span class=\"user-mention\" data-user-id=\"506239\">@Trevor Elliott</span> updates whenever I work on C++ code generation. <br>\nI currently work on getting the host part of the WASI interfaces supported (wamr target). Today I implemented tuple, flags and host load+store.<br>\nOpen points are that the order of resource definitions aren't right in case of inter-dependencies (Rust doesn't care) - and some of the lifting lowering is incomplete.</p>",
        "id": 407320430,
        "sender_full_name": "Christof Petig",
        "timestamp": 1702329036
    },
    {
        "content": "<p>@Christof Petig Have you implemented a c/c++ version of the canonical ABI as part of your work?</p>\n<p>I have started one as part of a plugin project for a big data platform (currently only supporting \"scalars\") and didn't want to duplicate work... (See: <a href=\"https://github.com/hpcc-systems/HPCC-Platform/blob/master/plugins/wasmembed/abi.cpp\">https://github.com/hpcc-systems/HPCC-Platform/blob/master/plugins/wasmembed/abi.cpp</a>)</p>",
        "id": 411889646,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1704790595
    },
    {
        "content": "<p>Oh interesting, I was using the Rust implementation for the c++ code generator.</p>",
        "id": 411895218,
        "sender_full_name": "Christof Petig",
        "timestamp": 1704792723
    },
    {
        "content": "<p>Also I realized that calling into exported functions on the host side requires generating proper wasm guest calling code...</p>",
        "id": 411895599,
        "sender_full_name": "Christof Petig",
        "timestamp": 1704792857
    },
    {
        "content": "<p>So your plan for the host was to import / reference a rust lib?</p>",
        "id": 411896069,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1704793036
    },
    {
        "content": "<p>No, the Rust crate calls into the bindgen code to generate c++ code to lift/lower the data types, so no Rust at runtime.</p>",
        "id": 412031135,
        "sender_full_name": "Christof Petig",
        "timestamp": 1704843701
    }
]