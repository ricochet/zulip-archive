[
    {
        "content": "<p>Hello everyone,<br>\nYesterday a new subgroup for C#/.net was voted for and we are in the process of starting the new group. If this is something you would be interested in and would like to attend the meetings then please share your availability by following this link (NOTE: Times are in UTC+2): <a href=\"https://www.when2meet.com/?21455130-KHnGM\">https://www.when2meet.com/?21455130-KHnGM</a></p>",
        "id": 392168235,
        "sender_full_name": "Timmy Silesmo",
        "timestamp": 1695232684
    },
    {
        "content": "<p><a href=\"https://github.com/yowl/WitCSharp\">https://github.com/yowl/WitCSharp</a>  I created README with the main issues we discussed at the meeting today.   I just put it in a new repo, but please suggest a better place as required.   It might be a basis for the next meeting to see which direction we want to take on the big ticket items.  Feel free to request access to edit it.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yowl/WitCSharp\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/39b356cab8cabe49c26b26726dbd4a4c613a4d93\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383133353063363662343764626235663236343065636365616565353830393936363035333362333935346464393663316566373235636137633232386463642f796f776c2f576974435368617270)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yowl/WitCSharp\" title=\"GitHub - yowl/WitCSharp: Holding repo for issues related to the development of C# WIT source code generation\">GitHub - yowl/WitCSharp: Holding repo for issues related to the development of C# WIT source code generation</a></div><div class=\"message_embed_description\">Holding repo for issues related to the development of C# WIT source code generation - GitHub - yowl/WitCSharp: Holding repo for issues related to the development of C# WIT source code generation</div></div></div>",
        "id": 393311634,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695756533
    },
    {
        "content": "<p>For language-ecosystem specific projects (e.g. bindgen, devtools) I personally think it'd be great for those to eventually belong to those ecosystems directly. Like .net dev tooling eventually ending up in the <code>dotnet</code> org someday. Tools that are still too early for that kind of integration/adoption or whose ecosystems don't have a single central place (e.g. <code>componentize-py</code> and <code>compoenntize-js</code>) have typically lived in the BA org itself.</p>",
        "id": 393316579,
        "sender_full_name": "Robin Brown",
        "timestamp": 1695758371
    },
    {
        "content": "<p>Ok, I have asked in the runtime group if they would like it there.</p>",
        "id": 393327772,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695761736
    },
    {
        "content": "<p>[not with my TSC delegate hat on, since we don't have an established principle for this] fwiw I think that we should also be open to hosting these kinds of things indefinitely if there isn't a better place. For both componentize-js and -py I'm not sure where better they should live than in the BA org, and I think for the foreseeable future their development will very much be driven by BA contributors, so hosting them makes sense.</p>\n<p>IMO the same approach makes sense for the C#/.Net bindings: if there is an obvious better place and interest by the language community to host it there, that makes sense. Otherwise I'd be happy to champion hosting in the BA org if you're interested</p>",
        "id": 393449976,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1695809879
    },
    {
        "content": "<p>Sorry, would have like to attend this meeting, where can I watch for the next?</p>",
        "id": 393513053,
        "sender_full_name": "Michael Ball",
        "timestamp": 1695826916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/New.20C.23.2F.2Enet.20Subgroup/near/393449976\">said</a>:</p>\n<blockquote>\n<p>[not with my TSC delegate hat on, since we don't have an established principle for this] fwiw I think that we should also be open to hosting these kinds of things indefinitely if there isn't a better place. For both componentize-js and -py I'm not sure where better they should live than in the BA org, and I think for the foreseeable future their development will very much be driven by BA contributors, so hosting them makes sense.</p>\n<p>IMO the same approach makes sense for the C#/.Net bindings: if there is an obvious better place and interest by the language community to host it there, that makes sense. Otherwise I'd be happy to champion hosting in the BA org if you're interested</p>\n</blockquote>\n<p>Thanks, just posted the question <a href=\"https://github.com/dotnet/runtimelab/issues/2409\">https://github.com/dotnet/runtimelab/issues/2409</a> in case the runtime people have an opinion.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/issues/2409\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5e478d13a93a67a713111b7d05c1742f0e1eeee1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633435626136373130383837663262626661643466656236346433363334653762353565663831663539336563366566316566383165396633393639656662372f646f746e65742f72756e74696d656c61622f6973737565732f32343039)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/issues/2409\" title=\"NativeAOT-LLVM: Question: Does dotnet/runtimelab want to host WIT code gen issues · Issue #2409 · dotnet/runtimelab\">NativeAOT-LLVM: Question: Does dotnet/runtimelab want to host WIT code gen issues · Issue #2409 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">Hi, I started a discussion on https://bytecodealliance.zulipchat.com/#narrow/stream/394175-SIG-Guest-Languages about where to host a place where the interested parties can discuss the way forward f...</div></div></div>",
        "id": 393517189,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695828098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> I agree that we should be open to hosting them indefinitely as well. My response was meant to hint that there are two main reasons for the BA to host one of these projects now and potentially indefinitely:</p>\n<ol>\n<li>If there isn't any singular place it makes sense to live, like in the case of the JS ecosystem for Componentize-JS</li>\n<li>If there are some potential places it could be donated to but that's not fully clear or ready to happen yet, like in the case of Python for Componentize-Py</li>\n</ol>",
        "id": 393542318,
        "sender_full_name": "Robin Brown",
        "timestamp": 1695837032
    },
    {
        "content": "<p>Either way, some care should be taken in deciding where projects should be created and how that affects their development and governance.</p>",
        "id": 393542555,
        "sender_full_name": "Robin Brown",
        "timestamp": 1695837116
    },
    {
        "content": "<p><a href=\"https://github.com/dotnet/runtimelab/issues/2409\">https://github.com/dotnet/runtimelab/issues/2409</a> is where we are currently discussing codegen if anyone wants to join in.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/issues/2409\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/821b0a031137917f29a0047e8dbf81272bf7e54e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326532623531666334393737643939326134386239306130386235613632356430653536336466383064323232323065396161363363653836626530616134362f646f746e65742f72756e74696d656c61622f6973737565732f32343039)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/issues/2409\" title=\"NativeAOT-LLVM: Question: Does dotnet/runtimelab want to host WIT code gen issues · Issue #2409 · dotnet/runtimelab\">NativeAOT-LLVM: Question: Does dotnet/runtimelab want to host WIT code gen issues · Issue #2409 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">Hi, I started a discussion on https://bytecodealliance.zulipchat.com/#narrow/stream/394175-SIG-Guest-Languages about where to host a place where the interested parties can discuss the way forward f...</div></div></div>",
        "id": 395097247,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696530132
    },
    {
        "content": "<p>Thanks! I chimed in.  Also thanks for the notes at <a href=\"https://github.com/yowl/WitCSharp\">https://github.com/yowl/WitCSharp</a>, I think you captured the trade offs well.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yowl/WitCSharp\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/87897e8c75195c238c9737233d425c35f9cc4489\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346362333032316336626333303438373031613132623534353137356639373736636134303738313434366661656534626335656363303065353465363936312f796f776c2f576974435368617270)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yowl/WitCSharp\" title=\"GitHub - yowl/WitCSharp: Holding repo for issues related to the development of C# WIT source code generation\">GitHub - yowl/WitCSharp: Holding repo for issues related to the development of C# WIT source code generation</a></div><div class=\"message_embed_description\">Holding repo for issues related to the development of C# WIT source code generation - GitHub - yowl/WitCSharp: Holding repo for issues related to the development of C# WIT source code generation</div></div></div>",
        "id": 395344350,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1696637408
    },
    {
        "content": "<p>Where is the rust implementation for the c# wit-bindgen? I couldn't find it</p>",
        "id": 395344424,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1696637496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"625613\">James Sturtevant</span> <a href=\"#narrow/stream/394175-SIG-Guest-Languages/topic/New.20C.23.2F.2Enet.20Subgroup/near/395344350\">said</a>:</p>\n<blockquote>\n<p>Thanks! I chimed in.  Also thanks for the notes at <a href=\"https://github.com/yowl/WitCSharp\">https://github.com/yowl/WitCSharp</a>, I think you captured the trade offs well.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"556206\">@Timmy Silesmo</span>  Can you give James access to the repo?</p>",
        "id": 395756257,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696881399
    },
    {
        "content": "<p>How do I run the test in <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/crates/csharp/tests/codegen.rs\">https://github.com/bytecodealliance/wit-bindgen/blob/main/crates/csharp/tests/codegen.rs</a>?</p>\n<p>I ran <code>cargo test -p wit-bindgen-cli --no-default-features -F csharp</code> but that seems to on run the tests in <code>tests/runtime</code>?</p>",
        "id": 400315155,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1699118555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span>  can you try <code>cargo test -p wit-bindgen-csharp</code></p>",
        "id": 400493832,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1699263626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"556206\">@Timmy Silesmo</span> guess you gave it the nudge it needed <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://github.com/dotnet/runtime/issues/86985\">https://github.com/dotnet/runtime/issues/86985</a> merged!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtime/issues/86985\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c820bd3aabe5ce380eb54cd183b8f0253877f834\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336263366136386234616334646563346631613634306161323835643139333532303636613731326432653037393266366565323664323764633265646430372f646f746e65742f72756e74696d652f6973737565732f3836393835)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtime/issues/86985\" title=\"maybe create WASM module export from `[UnmanagedCallersOnly]` · Issue #86985 · dotnet/runtime\">maybe create WASM module export from `[UnmanagedCallersOnly]` · Issue #86985 · dotnet/runtime</a></div><div class=\"message_embed_description\">UnmanagedCallersOnly symbols could create exports in the wasm module. Particularly if they are not resolved statically in the rest of the build.</div></div></div>",
        "id": 403471717,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1700605112
    },
    {
        "content": "<p>check this out <a href=\"https://github.com/SteveSandersonMS/wasm-component-sdk\">https://github.com/SteveSandersonMS/wasm-component-sdk</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/SteveSandersonMS/wasm-component-sdk\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a5959f6cf230b5894b8d38637f2be37c261c7c47\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653334396363336237633261616562363039623136363666326263656365363730383964313065356563383334313337376636303164316332626539343264352f537465766553616e646572736f6e4d532f7761736d2d636f6d706f6e656e742d73646b)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/SteveSandersonMS/wasm-component-sdk\" title=\"GitHub - SteveSandersonMS/wasm-component-sdk: Tooling for creating WebAssembly components from C#\">GitHub - SteveSandersonMS/wasm-component-sdk: Tooling for creating WebAssembly components from C#</a></div><div class=\"message_embed_description\">Tooling for creating WebAssembly components from C# - GitHub - SteveSandersonMS/wasm-component-sdk: Tooling for creating WebAssembly components from C#</div></div></div>",
        "id": 405903983,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1701720628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> <span class=\"user-mention\" data-user-id=\"556206\">@Timmy Silesmo</span>   I am not sure I will make it to the next meeting on Tuesday.  My update:</p>\n<ul>\n<li>fixed bug in wasmtime::component for multiple exports: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7656\">https://github.com/bytecodealliance/wasmtime/pull/7656</a></li>\n<li>added runtime tests for multiple exports: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/787\">https://github.com/bytecodealliance/wit-bindgen/pull/787</a></li>\n<li>Started on Option type but found needed other things to pass the codegen tests for options like multi-return, and some basic variant support so started to add multi-return <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/794\">https://github.com/bytecodealliance/wit-bindgen/pull/794</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7656\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/88729b6242c94c092403408287876e2d4fbadfa6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326463643761343665333736313630633637666134646632306537623133393937626535396465646432643131316434393238643130373130366665653464332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37363536)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7656\" title=\"[bindgen] Include Version in the export name if needed by jsturtevant · Pull Request #7656 · bytecodealliance/wasmtime\">[bindgen] Include Version in the export name if needed by jsturtevant · Pull Request #7656 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">When exporting multiple versions of the same package the version name needs to be included.\nBefore this change the generator would produce:\npub fn test_dep_test(&amp;self) -&gt; &amp;exports::test::dep0_1_0::...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/787\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/839bd012e42b157a2c42a42e2229c0e4dd4a888d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626266636136396166656635336632633432343366333733636564346232643066393434343664613633313636306130343338356331323561373336366332352f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f373837)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/787\" title=\"Add a runtime test for multiple versions by jsturtevant · Pull Request #787 · bytecodealliance/wit-bindgen\">Add a runtime test for multiple versions by jsturtevant · Pull Request #787 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">When working on #781 I noticed there wasn't a runtime test that had versions in the wit files.  This adds test for a wit file that has multiple versions for rust and csharp.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/794\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8aef58b1bcca8700e92b87ed408918060cd3ddd9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306666626133316462396430643738376535336162313334656664343564306135633333663233313565656630653962376165386336316431393838636661332f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f373934)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/794\" title=\"feat(c#): Multi-return support by jsturtevant · Pull Request #794 · bytecodealliance/wit-bindgen\">feat(c#): Multi-return support by jsturtevant · Pull Request #794 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This adds the codegen test for multi-return with c#. It creates an interface like:\nnamespace wit_the_world.wit.exports.foo.foo.MultiReturn;\n\npublic interface IMultiReturn {\n    static abstract void...</div></div></div>",
        "id": 408285044,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1702689800
    }
]