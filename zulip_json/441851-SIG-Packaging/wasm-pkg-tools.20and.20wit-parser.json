[
    {
        "content": "<p>I'm trying to figure out how to connect the various pieces here. I'm working on an experimental programming language project that will integrate with WASM components. The idea is that I want people to be able to just write something like <code>use wasi:cli/command</code> and then seamlessly work with it. </p>\n<p>To make this work I need to be able to go from a user-provided name like <code>wasi:io/error/error</code> to the definition it refers to, fetching any required dependencies etc along the way. I will have many such names to process in rather unreliable orders so I'd like to cache things. Basically the API I want to end up with is like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">ComponentDependencies</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ComponentDependencies</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Definition</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>As best I can tell the workflow should be something like</p>\n<ul>\n<li>instantiate a <a href=\"https://docs.rs/wasm-pkg-client/latest/wasm_pkg_client/caching/struct.CachingClient.html\"><code>CachingClient</code></a> from <code>wasm-pkg-client</code> and invoke <a href=\"https://docs.rs/wasm-pkg-client/latest/wasm_pkg_client/caching/struct.CachingClient.html#method.get_content\"><code>get_content</code></a>; save this into a file. This will be an encoded wasm content.</li>\n<li>then create a <a href=\"https://docs.rs/wit-parser/latest/wit_parser/struct.Resolve.html\"><code>wit-parser::Resolve</code></a> and <a href=\"https://docs.rs/wit-parser/latest/wit_parser/struct.Resolve.html#method.push_path\">push the path to that file</a>.</li>\n</ul>\n<p>Some questions:</p>\n<ul>\n<li>Will this manage dependencies? How can I make sure those are pushed first?</li>\n<li>Do I really have to create a temporary file?</li>\n<li>Is there some more convenient abstraction I can use that will take care of this for me?</li>\n</ul>",
        "id": 484685891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1732702991
    },
    {
        "content": "<p>I believe this is intended to be what you're looking for but I'm not sure exactly what state it is in right now: <a href=\"https://docs.rs/wasm-pkg-core/0.8.5/wasm_pkg_core/resolver/struct.DependencyResolver.html\">https://docs.rs/wasm-pkg-core/0.8.5/wasm_pkg_core/resolver/struct.DependencyResolver.html</a></p>",
        "id": 484725681,
        "sender_full_name": "Lann Martin",
        "timestamp": 1732715434
    }
]