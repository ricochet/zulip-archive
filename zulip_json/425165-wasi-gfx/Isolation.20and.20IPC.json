[
    {
        "content": "<p>Just spoke to the primary maintainer of wgpu (Connor Fitzgerald), he confirmed <span class=\"user-mention\" data-user-id=\"569660\">@Sean Isom</span>'s nightmare, wgpu doesn't isolate between gpu resources.<br>\nNow the question is if the component-model's isolation is enough.<br>\n(cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> )</p>",
        "id": 429735001,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711485262
    },
    {
        "content": "<p>Maybe this becomes the host runtime's problem (in this case, the wrapper around WebGPU). It would be difficult to implement runtime behavior in terms of the standard that is based on WIT, I would say?</p>",
        "id": 429740380,
        "sender_full_name": "Sean Isom",
        "timestamp": 1711487306
    },
    {
        "content": "<p>When wgpu is used in Firefox, how do they keep GPU resources isolated?</p>",
        "id": 429744531,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1711489300
    },
    {
        "content": "<p>My (basic) understanding is that it is cross-origin resource isolation. It checks origin ownership before allowing the content process to communicate with the GPU process. Once IPC to the GPU process occurs, everything in the GPU process is untrusted (just runs native WGPU)</p>",
        "id": 429744880,
        "sender_full_name": "Sean Isom",
        "timestamp": 1711489481
    },
    {
        "content": "<p>Would be helpful for someone from Mozilla to validate that and maybe provide more detail</p>",
        "id": 429744967,
        "sender_full_name": "Sean Isom",
        "timestamp": 1711489525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419274\">@Mendy Berger</span> The component model itself only isolates Wasm code, so it doesn't help for isolating things happening on the GPU.</p>",
        "id": 429749864,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1711492057
    },
    {
        "content": "<p>So it sounds like, in addition to the question of whether we need a GPU-process architecture, we'll also need to figure out validation.</p>",
        "id": 429753941,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1711494557
    },
    {
        "content": "<p>Is there anything in WASI previously that architecturally required IPC that could be used as a starting point? I feel like validation is a cumbersome but easier problem to solve.</p>",
        "id": 429754127,
        "sender_full_name": "Sean Isom",
        "timestamp": 1711494667
    },
    {
        "content": "<p>Not \"architecturally\", per se. In theory if someone wanted extra defense-in-depth they might want to run wasi-filesystem isolated in its own process, but I'm not aware of anyone having done that yet.</p>",
        "id": 429754344,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1711494835
    },
    {
        "content": "<p>There have been people investigating mapping WIt interefaces to IPC/RPC protocols, though at this time I don't know of anything out-of-the-box that we could use.</p>",
        "id": 429754516,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1711494928
    },
    {
        "content": "<p>I’ll drop Thomas Steiner a note and see if he has thoughts from the Chrome side. I don’t know the right point of contact at Mozilla</p>",
        "id": 429776022,
        "sender_full_name": "Sean Isom",
        "timestamp": 1711510459
    },
    {
        "content": "<p>I’m inclined to think validation is more important for an MVP than process sandboxing, as I think that is as much for host process stability as security, but I’m not an SME in browser design</p>",
        "id": 429776172,
        "sender_full_name": "Sean Isom",
        "timestamp": 1711510600
    },
    {
        "content": "<p>I asked a similar thing on the <code>wgpu</code> repo, but nobody answered. I did find <a href=\"https://github.com/gfx-rs/wgpu/discussions/2792\">this though</a>. So it seems process isolation is optional, as long as you'd stick to the safe <code>wgpu</code> APIs. I don't know about <code>wgpu-core</code> though.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/gfx-rs/wgpu/discussions/2792\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e147df2235b20f49e272e7ac6dc7f2f18cb56c1b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623665643730613538323734393437343362643636333566663339333266383534353832663462313138346636636365336461333232306362326365353361322f6766782d72732f776770752f64697363757373696f6e732f32373932)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/gfx-rs/wgpu/discussions/2792\" title=\"Suitable for use with untrusted code? · gfx-rs wgpu · Discussion #2792\">Suitable for use with untrusted code? · gfx-rs wgpu · Discussion #2792</a></div><div class=\"message_embed_description\">Hi there! 👋 I've been thinking about a use case in which a native host application creates a render target, and then exposes a rendering API to untrusted code running in a Wasm VM. However, I could...</div></div></div>",
        "id": 429787341,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711518069
    },
    {
        "content": "<p>Naga does shader validation already, and inserts bounds checks and things if needed, so that should be reasonably safe on the GPU side, too.</p>",
        "id": 429787599,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711518218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/425165-wasi-gfx/topic/Isolation.20and.20IPC/near/429754516\">said</a>:</p>\n<blockquote>\n<p>There have been people investigating mapping WIt interefaces to IPC/RPC protocols, though at this time I don't know of anything out-of-the-box that we could use.</p>\n</blockquote>\n<p><a href=\"https://github.com/rvolosatovs/wrpc/\">https://github.com/rvolosatovs/wrpc/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/wrpc/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b1ec631a1ce5faf30b8b80090d81cf737f70b32a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666230333735333634363063643939313563373634626264313436663563356163636639333663363930313338373436396230363133663463343036303934392f72766f6c6f7361746f76732f77727063)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/wrpc/\" title=\"GitHub - rvolosatovs/wrpc: Wasm component-native RPC framework\">GitHub - rvolosatovs/wrpc: Wasm component-native RPC framework</a></div><div class=\"message_embed_description\">Wasm component-native RPC framework. Contribute to rvolosatovs/wrpc development by creating an account on GitHub.</div></div></div>",
        "id": 429928900,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1711566465
    },
    {
        "content": "<p>I'm more than a little our of my depth here, and this is about security, so don't trust me more than any self important rando...</p>\n<p>IIUC wgpu does do shader code bounds checking, so we don't have to do any validation.<br>\nThey're just not doing resource checking, i.e. checking if a resource belongs to a specific caller before accessing it. But I think the runtimes are expected to do that, aren't they? </p>\n<p>Again, don't trust a word I just said!</p>",
        "id": 429942759,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711571357
    },
    {
        "content": "<p>I think not checking the caller is natural for <code>wgpu</code>: There's only one caller, the program that uses <code>wgpu</code> as a library. I looked and yes, it seems IDs are shared among all instances for a given backend, though the ID is an index into a vector (or something like it) of resources, so at least the type would be right. So the only thing to secure that would be to make the IDs opaque and inaccessible to WASM: Keep them in the host resource for each WebGPU object, and when calling <code>wgpu</code> just extract the IDs. The WASI implementation then assigns its own IDs for the \"WASI\" backend resources.</p>",
        "id": 429946020,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711572375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695664\">@Tarek Sander</span> exactly! This is why I don't think this is a real problem, the wasm module doesn't have access to the underlying wgpu IDs.</p>",
        "id": 429946541,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711572532
    },
    {
        "content": "<p>This would mean the Rust implementation of the WASI API would lie in <code>wgpu-hal</code>, that works with graphics API types instead of IDs.</p>",
        "id": 429946674,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711572567
    },
    {
        "content": "<p>Additional process isolation would be good, but I think for most uses cases being less paranoid about security that browsers is OK. It could be a vulnerability if the graphics API implementation <code>wgpu</code> in the host uses has a vulnerability for memory read/write, use that to run custom assembly or modify arguments to get access to other component's GPU resources, but seeing as these APIs are quite well tested and <code>wgpu</code> is used by Firefox, I don't think that's a big issue.</p>",
        "id": 429947767,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711572898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695664\">@Tarek Sander</span> what's the problem with sharing IDs if they're opaque to the wasm guest?</p>",
        "id": 429947829,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711572924
    },
    {
        "content": "<p>The thing about <code>wgpu-core</code> IDs is that they can be explicitly set on resource creation by the client, I don't know if an ID being already used is handled, I don't think so. So the easiest option is to go to the <code>wgpu-hal</code> level where there are  no IDs and let <code>wgpu-core</code> on top assign IDs like it wants to.</p>",
        "id": 429948252,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711573089
    },
    {
        "content": "<p>Not totally following, are you saying that we should build directly on top of wgpu-hal?</p>",
        "id": 429948533,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711573204
    },
    {
        "content": "<p>No, I say we should <em>provide</em> a wgpu HAL.</p>",
        "id": 429949861,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711573754
    },
    {
        "content": "<p>You mean 'hal-like', right?</p>",
        "id": 429950014,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711573815
    },
    {
        "content": "<p>Yeah, that level also has to be the same as the WebGPU bindings in <code>wgpu</code>, since WebGPU has no mention of IDs either.</p>",
        "id": 429950833,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711574170
    },
    {
        "content": "<p>Right.<br>\nSo I think that's what we're doing already, we don't expose any IDs to the wasm guest, only resources/types.</p>",
        "id": 429951044,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711574245
    },
    {
        "content": "<p>Then I think we should be fine isolation-wise. Configuring a sandbox where you can still access the GPU is a nightmare, at least when I tried doing it on Android. Each driver implementation can use different system calls with different ioctls and device file paths, it's not good to manage with something like seccomp filters. And the host-API to WASM was supposed to be the replacement to sandboxing anyways, if the API is secure, you don't need an additional sandbox.</p>",
        "id": 429951481,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711574416
    },
    {
        "content": "<p>Hey y'all, <span class=\"user-mention\" data-user-id=\"270639\">@Deian Stefan</span> - a security researcher - will likely be able to provide feedback here.</p>",
        "id": 431500592,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1712315201
    },
    {
        "content": "<p>Just had a conversation with <span class=\"user-mention\" data-user-id=\"270639\">@Deian Stefan</span>, here's what I learned:</p>\n<p>level 1 security:<br>\nOn a very basic level, the shader bounds check and the wasmtime resource isolation should be enough.</p>\n<p>Level 2 security:<br>\nHowever, gpu driver code is often unsafe and buggy, so for any real world use case we'd wanna isolate the gpu into it's own process. Just like browsers do.</p>\n<p>Level 3 security:<br>\nOnce we have process isolation, we should consider even further restrictions with seccomp.</p>\n<p>Level 4 security:<br>\nBrowsers have runtime checks that they do on the gpu code. We should see if we can steel or replicate that.</p>\n<p>He also told me to ask Tal Garfinkel for his opinion on the matter.</p>\n<p>Helpful link from Chromium team: <a href=\"https://chromium.googlesource.com/chromium/src/+/main/docs/security/research/graphics/webgpu_technical_report.md\">https://chromium.googlesource.com/chromium/src/+/main/docs/security/research/graphics/webgpu_technical_report.md</a></p>\n<p>He also brought up the point that GPUs often don't do a good job isolating code, especially the older ones and there's not much we can do about that. It's a risk browsers have to accept as well.</p>\n<p><span class=\"user-mention\" data-user-id=\"270639\">@Deian Stefan</span> hope I didn't butcher any of your points.</p>",
        "id": 433902011,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1713405063
    },
    {
        "content": "<p>The APIs <code>wgpu</code> is built upon have extensions for robust buffer access extensions, which ensures the driver handles out-of-bounds shader accesses: <a href=\"https://registry.khronos.org/vulkan/specs/1.3-extensions/html/chap47.html#features-robustBufferAccess\">Vulkan</a> <a href=\"https://registry.khronos.org/OpenGL/extensions/KHR/KHR_robust_buffer_access_behavior.txt\">GL</a>. The GL extension is also used to secure WebGL in browsers AFAIK. Depending on security paranoia, you could refuse running webgpu code without these extensions.</p>\n<p>Process sandboxes are tricky if you really want to drop as much privileges as you can. E.g. Chromium on Linux has a setuid <code>chromium-sandbox</code> binary, because you need root to change the process's namespaces, user and filesystem root. I wanted to build a sandbox library for Rust before, but I just couldn't find any information on how to do process sandboxing on Windows. I guess replicating/using the <a href=\"https://chromium.googlesource.com/chromium/src.git/+/refs/heads/main/sandbox/\">chromium</a> or <a href=\"https://searchfox.org/mozilla-central/source/security/sandbox\">Firefox</a> sandbox is the best bet.</p>\n<p>Seccomp is only available on Linux and Android, I don't know if other platforms have a way to restrict system calls.</p>",
        "id": 433952474,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713422382
    },
    {
        "content": "<p>An <code>--unsafe-webgpu</code> flags like browsers had for the early days of WebGPU implementations is also an option until all the sandboxing is implemented. If you're just running your own code in WASM and just use it for easy cross-platform deployment, sandboxing is not an issue.</p>",
        "id": 433952731,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713422520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/425165-wasi-gfx/topic/Isolation.20and.20IPC/near/433952474\">said</a>:</p>\n<blockquote>\n<p>The APIs <code>wgpu</code> is built upon have extensions for robust buffer access extensions, which ensures the driver handles out-of-bounds shader accesses: <a href=\"https://registry.khronos.org/vulkan/specs/1.3-extensions/html/chap47.html#features-robustBufferAccess\">Vulkan</a> <a href=\"https://registry.khronos.org/OpenGL/extensions/KHR/KHR_robust_buffer_access_behavior.txt\">GL</a>. The GL extension is also used to secure WebGL in browsers AFAIK. Depending on security paranoia, you could refuse running webgpu code without these extensions.</p>\n<p>Process sandboxes are tricky if you really want to drop as much privileges as you can. E.g. Chromium on Linux has a setuid <code>chromium-sandbox</code> binary, because you need root to change the process's namespaces, user and filesystem root. I wanted to build a sandbox library for Rust before, but I just couldn't find any information on how to do process sandboxing on Windows. I guess replicating/using the <a href=\"https://chromium.googlesource.com/chromium/src.git/+/refs/heads/main/sandbox/\">chromium</a> or <a href=\"https://searchfox.org/mozilla-central/source/security/sandbox\">Firefox</a> sandbox is the best bet.</p>\n<p>Seccomp is only available on Linux and Android, I don't know if other platforms have a way to restrict system calls.</p>\n</blockquote>\n<p>just ask! I'll find the windows person who knows and get you the answers if you want them.</p>",
        "id": 434009107,
        "sender_full_name": "Ralph",
        "timestamp": 1713433821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> I guess my question is about the permission system in Windows in general: How are the permissions of a process determined? How granular can you change them? The only documentation I can find is about the high level stuf like group policies or the Windows sandbox feature that just runs Windows inside a VM. The <a href=\"https://chromium.googlesource.com/chromium/src.git/+/refs/heads/main/docs/design/sandbox.md\">chromium page</a> gives a good overview, but has not much links the the Microsoft documentation (if any exists).</p>",
        "id": 434016839,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713436545
    },
    {
        "content": "<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\">https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights</a> is one place</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3ce17f2b2911dcb735720cc46e75758679339053\\/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f656e2d75732f6d656469612f6f70656e2d67726170682d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://learn.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\" title=\"Process Security and Access Rights - Win32 apps\">Process Security and Access Rights - Win32 apps</a></div><div class=\"message_embed_description\">The Microsoft Windows security model enables you to control access to process objects. For more information about security, see Access-Control Model.</div></div></div>",
        "id": 434017140,
        "sender_full_name": "Ralph",
        "timestamp": 1713436651
    },
    {
        "content": "<p>however, I'm not yet sure that's what you're looking for.</p>",
        "id": 434017285,
        "sender_full_name": "Ralph",
        "timestamp": 1713436696
    },
    {
        "content": "<p>the windows lead I know lives in EDT, so we can chat with him about 3 pm or so CET</p>",
        "id": 434017384,
        "sender_full_name": "Ralph",
        "timestamp": 1713436728
    },
    {
        "content": "<p>That link looks promising, at has links to the security architecture of Windows in general. Detailed information would be great! Last I checked there was no Rust process sandboxing library that supported Windows, so maybe the sandboxing solution we'll need could also benefit other projects as a library.</p>",
        "id": 434018114,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713437019
    },
    {
        "content": "<p>yeah, the windows peeps would know: they're all about rust these days</p>",
        "id": 434018217,
        "sender_full_name": "Ralph",
        "timestamp": 1713437051
    },
    {
        "content": "<p>which, good</p>",
        "id": 434018228,
        "sender_full_name": "Ralph",
        "timestamp": 1713437057
    },
    {
        "content": "<p>I browsed the sandbox tag on <a href=\"http://crates.io\">crates.io</a> again now and yep, none of the crates seem to support Windows.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 434119193,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713454139
    },
    {
        "content": "<p>Would y'all have a preference for the data format for IPC between the processes? If not I'd make a flexbuffers crate with strict bounds checks, the validation is sadly only in the C++ lib and even validation doesn't help in case we use a shared memory buffer, where the compromised side could change the offsets anytime.</p>",
        "id": 434122051,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713454362
    },
    {
        "content": "<p>Is there a reason for flexbuffers instead of flatbuffers? I imagine you'd be generating the IPC code from the Wit definitions, so you'll know all the types of everything up front.</p>",
        "id": 434127746,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1713454807
    },
    {
        "content": "<p>I'd like the sandbox library to be independent of WASI (so there is finally one that support Windows in the ecosystem), and I don't think flatbuffers would work with serde, as there's no schema with that. I could make a flatbuffers compiler that uses strict bounds checks, but integrating with serde is a better goal than support for flatbuffer schemas IMO.</p>",
        "id": 434155962,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713456244
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/425165-wasi-gfx/topic/Isolation.20and.20IPC/near/434018217\">said</a>:</p>\n<blockquote>\n<p>yeah, the windows peeps would know: they're all about rust these days</p>\n</blockquote>\n<p>Which is why it surprises me that there is no sandbox library with support for Windows. Maybe I'm just bad at searching, but I haven't found one, y'all can look too if you want, maybe you're better at searching than me.</p>",
        "id": 434161018,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713456463
    },
    {
        "content": "<p>I'm using \"y'all\" as a non-notifying replacement for something like @all by the way, I don't know of a better term.</p>",
        "id": 434163993,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713456594
    },
    {
        "content": "<p>I have also looked in the past, and not found any.</p>",
        "id": 434165216,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1713456650
    },
    {
        "content": "<p>I think if you're using flatbuffers, then you just wouldn't use serde. Remoting a WebGPU API doesn't depend on serializing arbitrary user types, or serializing to arbitrary formats, so the main strengths of serde wouldn't apply.</p>",
        "id": 434185266,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1713457536
    },
    {
        "content": "<p>It sounds like there are multiple possible goals here. If you're interested in building a Windows sandboxing library, you're certainly welcome to build that. That said, I don't think that's a critical path for wasi-gfx per se.</p>",
        "id": 434188214,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1713457672
    },
    {
        "content": "<p>I've asked a windows distinguished arch to point me to the logical solutions/information about this are, per this conversation. Let's see what he says relative to Windows.</p>",
        "id": 434190038,
        "sender_full_name": "Ralph",
        "timestamp": 1713457752
    },
    {
        "content": "<p>I agree with that Dan. I certainly see the argument and value of process sandboxing like in a web browser,  and how the wasi-gfx standard should allow for that use case, but I don’t think that needs to be a requirement or part of the core</p>",
        "id": 434192373,
        "sender_full_name": "Sean Isom",
        "timestamp": 1713457858
    },
    {
        "content": "<p>It'd be long before my library would be finished anyways.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/425165-wasi-gfx/topic/Isolation.20and.20IPC/near/434188214\">said</a>:</p>\n<blockquote>\n<p>It sounds like there are multiple possible goals here. If you're interested in building a Windows sandboxing library, you're certainly welcome to build that. That said, I don't think that's a critical path for wasi-gfx per se.</p>\n</blockquote>\n<p>I agree that library doesn't belong in this subgroup specifically, but hopefully that could be adopted as an optional layer of security in wasmtime or the wasi implementation, because such an undertaking should not be done by just one person anyways. With more WASI proposals, process sandboxing may be necessary for more proposals than this for adequate security. Should I ask in <a class=\"stream\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general\">#general</a> about thoughts for a sandboxing library/layer?</p>",
        "id": 434194443,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713457953
    },
    {
        "content": "<p>There is already a lot of implicit trust in host-side code in the wasi ecosystem (although to Deian’s point, GPU drivers may be buggier than average), so it feels like that decision should be left up to the implementer</p>",
        "id": 434194581,
        "sender_full_name": "Sean Isom",
        "timestamp": 1713457959
    },
    {
        "content": "<p>Yeah, that makes sense to me. I see this being more generic of a problem than just for gpu processes</p>",
        "id": 434195797,
        "sender_full_name": "Sean Isom",
        "timestamp": 1713458016
    },
    {
        "content": "<p>So for now if this proposal lands in wasmtime, at least the webgpu implementation (the raw framebuffer and window access would still be useful, there are CPU drawing libraries aplenty) should be gated behind a disabled-by-default enable_unsafe_webgpu config field. The host can enable it, but it signifies that the code is trusted, at least to the extent of running it on the GPU.</p>",
        "id": 434199882,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713458315
    },
    {
        "content": "<p>Definitely should be up to the implementer and not part of the actual spec.<br>\nI think Deian’s point was that most implementations that run untrusted code will <strong>want</strong> it, so we should have it in mind when designing the spec.</p>",
        "id": 434217234,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1713465025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/425165-wasi-gfx/topic/Isolation.20and.20IPC/near/434190038\">said</a>:</p>\n<blockquote>\n<p>I've asked a windows distinguished arch to point me to the logical solutions/information about this are, per this conversation. Let's see what he says relative to Windows.</p>\n</blockquote>\n<p><a href=\"https://github.com/microsoft/windows-rs/blob/master/crates/libs/sys\">https://github.com/microsoft/windows-rs/blob/master/crates/libs/sys</a> is the answer, possibly, says the windows dude.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/windows-rs/blob/master/crates/libs/sys\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/09ccd0546a789f360cc6a38328a5e16af482a821\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313462623935616662623734623838643436353732313462363830333631356332343435323766383130363963356630356439363366383938626633613564302f6d6963726f736f66742f77696e646f77732d7273)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/windows-rs/blob/master/crates/libs/sys\" title=\"windows-rs/crates/libs/sys at master · microsoft/windows-rs\">windows-rs/crates/libs/sys at master · microsoft/windows-rs</a></div><div class=\"message_embed_description\">Rust for Windows. Contribute to microsoft/windows-rs development by creating an account on GitHub.</div></div></div>",
        "id": 434232517,
        "sender_full_name": "Ralph",
        "timestamp": 1713471859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695664\">@Tarek Sander</span> the windows team is interested in finding you what you need here. They think they've got all win32 sdk apis in the windows-sys crate, but they wanna know, if there's something <em>specific</em> you're expecting to find, and they can make it easier, let me know.</p>",
        "id": 434233774,
        "sender_full_name": "Ralph",
        "timestamp": 1713472399
    },
    {
        "content": "<p>they mention:</p>",
        "id": 434234984,
        "sender_full_name": "Ralph",
        "timestamp": 1713472923
    },
    {
        "content": "<p>Windows doesn't exactly do seccomp. You can do things like it by restricting priveleges, creating a process with a limited token, etc...</p>\n<p>And there is the <a href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessmitigationpolicy\">SetProcessMitigationPolicy function (processthreadsapi.h) - Win32 apps | Microsoft Learn</a></p>\n<p>SetProcessMitigationPolicy function (processthreadsapi.h) - Win32 apps</p>\n<p>Sets a mitigation policy for the calling process. Mitigation policies enable a process to harden itself against various types of attacks.</p>\n<p>Its just not as granular or clean as Linux.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessmitigationpolicy\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3ce17f2b2911dcb735720cc46e75758679339053\\/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f656e2d75732f6d656469612f6f70656e2d67726170682d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessmitigationpolicy\" title=\"SetProcessMitigationPolicy function (processthreadsapi.h) - Win32 apps\">SetProcessMitigationPolicy function (processthreadsapi.h) - Win32 apps</a></div><div class=\"message_embed_description\">Sets a mitigation policy for the calling process. Mitigation policies enable a process to harden itself against various types of attacks.</div></div></div>",
        "id": 434235034,
        "sender_full_name": "Ralph",
        "timestamp": 1713472953
    },
    {
        "content": "<p>again, if you have specific questions, lemme know and I'll find the correct resource</p>",
        "id": 434235091,
        "sender_full_name": "Ralph",
        "timestamp": 1713472986
    },
    {
        "content": "<p>I was asking more about the process tokens themselves, and generally access control of resources, essentially what I'd need to implement what's described for the <a href=\"https://chromium.googlesource.com/chromium/src.git/+/refs/heads/main/docs/design/sandbox.md\">chromium sandbox</a>.</p>",
        "id": 434250258,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1713480376
    }
]