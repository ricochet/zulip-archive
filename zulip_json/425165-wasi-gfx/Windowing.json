[
    {
        "content": "<p>My current model for GUI applications:<br>\nThe GUI world extends the CLI world, so the program has a main function that is run first, can access arguments, etc., but after the main function returns, the instance stays alive and an exported event handler function gets called when events on windows occur (The first windows have to be created in the main function, more may be created in the event handler). I don't know if that's necessarily the best model, some languages may not like being called after the main function returns and could not work properly. My initial example in Rust works though, and that event model also works with the browser event loop. I'd like to transition that to an event stream model for preview 3, that way everything can stay in an (async) main function.</p>\n<p>Windows system capabilities are represented via bitflags that can be queried at runtime. Applications should not use unavailable functions, but actions should just be a no-op in that case and return values are invalid values or default values for the types, e.g. (0, 0) for position.</p>\n<p>I still have to figure out how to best represent key events. Are there keys with no corresponding Unicode value (e.g. media keys)? If not, sending the code point should suffice. Otherwise these keys will be handled with their own enum type for the keys.</p>\n<p>The underlying type for the window resource is currently an <code>Arc&lt;winit::Window&gt;</code>.</p>",
        "id": 423878419,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709145106
    },
    {
        "content": "<p>Also high-dpi scaling is a question, currently I'd just expose the scaling factor from winit to the applications.</p>",
        "id": 423879068,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709145313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419274\">@Mendy Berger</span> Thoughts on this?</p>",
        "id": 424826860,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709630592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695664\">@Tarek Sander</span> would love to discuss over video. Mind shooting me a DM?</p>",
        "id": 424861091,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709642852
    },
    {
        "content": "<p>Before I begin, have you had a chance to look at <a href=\"https://github.com/MendyBerger/wasi-webgpu/blob/main/wit/mini-canvas.wit\">https://github.com/MendyBerger/wasi-webgpu/blob/main/wit/mini-canvas.wit</a>? Seems to cover similar things as what you describe in MVP <a href=\"https://github.com/WebAssembly/WASI/issues/584\">here</a>. Wonder what you think of our different approaches and how we can combine efforts.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/issues/584\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/958dae1d182a316d787a64e1f7d18934682209f8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633165316530333564653865393538386566363861313464303661663666383232336436363436313731636662353736376439353937316466396134323934322f576562417373656d626c792f574153492f6973737565732f353834)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/issues/584\" title=\"Proposal: WASI Windowing 路 Issue #584 路 WebAssembly/WASI\">Proposal: WASI Windowing 路 Issue #584 路 WebAssembly/WASI</a></div><div class=\"message_embed_description\">Introduction In case windowing is deemed out-of-scope for #578, there should be a separate proposal for WASI windowing. Given that that proposal is based on bringing WebGPU to WASI and wgpu and Web...</div></div></div>",
        "id": 424903893,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709654847
    },
    {
        "content": "<blockquote>\n<p>The GUI world extends the CLI...</p>\n</blockquote>\n<p>What's the advantage of having the main function return? Why not have the main function listen for events?<br>\nAlso, I'm not sure how I feel about having a single event handler for all event types. Don't wanna force all apps to wake up for every possible event type, when it only really cares about a few. (e.g. mouse-move will fire very often, but I don't expect most apps to care about it)</p>",
        "id": 424903917,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709654854
    },
    {
        "content": "<blockquote>\n<p>Windows system capabilities are represented via...</p>\n</blockquote>\n<p>I think this can work, no strong opinions here.<br>\nI think that feature detection is needed in other places in wasi as well. Maybe make sure that everyone is taking the same  approach?</p>",
        "id": 424904017,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709654876
    },
    {
        "content": "<blockquote>\n<p>I still have to figure out how to best represent key events...</p>\n</blockquote>\n<p>Can you do something similar to what the web does with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\">KeyboardEvents</a>? I don't know very much about this, but I'm assuming that the web is the best abstraction over these kinds of things to draw from? Really not sure though.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d1458923d9e958200387f84e96afd92a33caed8b\\/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e63643663346135612e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" title=\"KeyboardEvent - Web APIs | MDN\">KeyboardEvent - Web APIs | MDN</a></div><div class=\"message_embed_description\">KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (keydown, keypress, or keyup) identifies what kind of keyboard activity occurred.</div></div></div>",
        "id": 424904052,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709654881
    },
    {
        "content": "<blockquote>\n<p>The underlying type for the window resource is currently an Arc&lt;winit::Window&gt;.</p>\n</blockquote>\n<p>Great choice! Just keep in mind that other implementations will wanna use other ways to represent windows. So make sure you don't tie the spec too much to a single library.</p>",
        "id": 424904103,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709654883
    },
    {
        "content": "<p>Finally, would you be interested in joining the webgpu effort? Don't let the name fool you, we're doing much more than webgpu.</p>",
        "id": 424904455,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709654964
    },
    {
        "content": "<p>We're meeting every Tuesday 5:30 UTC. I can shoot you an invite if you wanna join, even if just to listen in.</p>",
        "id": 424904869,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709655073
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>The GUI world extends the CLI...</p>\n</blockquote>\n<p>What's the advantage of having the main function return? Why not have the main function listen for events?<br>\nAlso, I'm not sure how I feel about having a single event handler for all event types. Don't wanna force all apps to wake up for every possible event type, when it only really cares about a few. (e.g. mouse-move will fire very often, but I don't expect most app to care about it)</p>\n</blockquote>\n<p>The Browser has its own event loop, so to support browsers before the component model gets async support, the event loop needs to lie in the host.</p>",
        "id": 424905412,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709655180
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I still have to figure out how to best represent key events...</p>\n</blockquote>\n<p>Can you do something similar to what the web does with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\">KeyboardEvents</a>? I don't know very much about this, but I'm assuming that the web is the best abstraction over these kinds of things to draw from? Really not sure though.</p>\n</blockquote>\n<p>You're probably right, the Web already needs to work on all platforms.</p>",
        "id": 424905929,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709655307
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>The underlying type for the window resource is currently an Arc&lt;winit::Window&gt;.</p>\n</blockquote>\n<p>Great choice! Just keep in mind that other implementations will wanna use other ways to represent windows. So make sure you don't tie the spec too much to a single library.</p>\n</blockquote>\n<p>There's also raw_window_handle, but all its types are non-owning. The only important thing is that the GPU proposal and the Windowing proposal need to agree on one window type for the host implementation. What type that is is for the individual implementations to decide.</p>",
        "id": 424906867,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709655552
    },
    {
        "content": "<blockquote>\n<p>Finally, would you be interested in joining the webgpu effort? Don't let the name fool you, we're doing much more than webgpu.</p>\n</blockquote>\n<p>Yeah, I'm interested in WebGPU anyways, I'm primarily using it with the wgpu crate in Rust. WebGPU + Rust finally fills the hole I had for some of my personal game projects: Low-level language with high performance and cross-platform Graphics and compute API.</p>",
        "id": 424907529,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709655738
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Windows system capabilities are represented via...</p>\n</blockquote>\n<p>I think this can work, no strong opinions here.<br>\nI think that feature detection is needed in other places in wasi as well. Maybe make sure that everyone is taking the same  approach?</p>\n</blockquote>\n<p>Is there already an existing convention for feature detection in WASI? The component model flags seem perfect for it.</p>",
        "id": 424907763,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709655805
    },
    {
        "content": "<blockquote>\n<p>Also, I'm not sure how I feel about having a single event handler for all event types. Don't wanna force all apps to wake up for every possible event type, when it only really cares about a few. (e.g. mouse-move will fire very often, but I don't expect most apps to care about it)</p>\n</blockquote>\n<p>This is for API simplicity for now. Ideally once the component model gets streams, you'd be able to get event streams for all event types and subscribe to them. So the API will need a major overhaul for the final version of the component model.</p>",
        "id": 424908693,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709656046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419274\">Mendy Berger</span> <a href=\"#narrow/stream/425165-wasi-webgpu/topic/Windowing/near/424904869\">said</a>:</p>\n<blockquote>\n<p>We're meeting every Tuesday 5:30 UTC. I can shoot you an invite if you wanna join, even if just to listen in.</p>\n</blockquote>\n<p>Just noticed I made a mistake. We meet every Tuesday <strong>5:00</strong> UTC</p>",
        "id": 424908994,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709656120
    },
    {
        "content": "<p>If you didn't come along with this proposal, I probably would have suggested something like this around now lol. I'm working on (currently: have an idea for) a game engine that works by using WebAssembly modules as the user code and mods, supporting a safe mod system through the WASM guarantees and multiple languages through compilation to WASM. Because I need graphics for that, I was thinking about writing a wgpu API to pass through all safe WebGPU functions.</p>",
        "id": 424910035,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709656400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/425165-wasi-webgpu/topic/Windowing/near/424905412\">said</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>The GUI world extends the CLI...</p>\n</blockquote>\n<p>What's the advantage of having the main function return? Why not have the main function listen for events?<br>\nAlso, I'm not sure how I feel about having a single event handler for all event types. Don't wanna force all apps to wake up for every possible event type, when it only really cares about a few. (e.g. mouse-move will fire very often, but I don't expect most app to care about it)</p>\n</blockquote>\n<p>The Browser has its own event loop, so to support browsers before the component model gets async support, the event loop needs to lie in the host.</p>\n</blockquote>\n<p>Good point.</p>\n<p>But since this is going to be a solved problem before 1.0, can you maybe build it in a way that has everything in main. And maybe have some temporary method to deal specifically with web? Something like <code>temp-event-handler</code> that will be removed before 1.0? I don't want the whole spec to be fundamentally changed just because the current beta won't work on browsers.</p>",
        "id": 424933582,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709663777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/425165-wasi-webgpu/topic/Windowing/near/424907763\">said</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>Windows system capabilities are represented via...</p>\n</blockquote>\n<p>I think this can work, no strong opinions here.<br>\nI think that feature detection is needed in other places in wasi as well. Maybe make sure that everyone is taking the same  approach?</p>\n</blockquote>\n<p>Is there already an existing convention for feature detection in WASI? The component model flags seem perfect for it.</p>\n</blockquote>\n<p>Dunno. Bug I know that there was discussion about it.</p>",
        "id": 424933742,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709663843
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/425165-wasi-webgpu/topic/Windowing/near/424905412\">said</a>:</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>The GUI world extends the CLI...</p>\n</blockquote>\n<p>What's the advantage of having the main function return? Why not have the main function listen for events?<br>\nAlso, I'm not sure how I feel about having a single event handler for all event types. Don't wanna force all apps to wake up for every possible event type, when it only really cares about a few. (e.g. mouse-move will fire very often, but I don't expect most app to care about it)</p>\n</blockquote>\n<p>The Browser has its own event loop, so to support browsers before the component model gets async support, the event loop needs to lie in the host.</p>\n</blockquote>\n<p>Good point.</p>\n<p>But since this is going to be a solved problem before 1.0, can you maybe build it in a way that has everything in main. And maybe have some temporary method to deal specifically with web? Something like <code>temp-event-handler</code> that will be removed before 1.0? I don't want the whole spec to be fundamentally changed just because the current beta won't work on browsers.</p>\n</blockquote>\n<p>The component model types I'd use aren't finished though. Can I just use WASI IO pollable? Also I'm not sure if/when browsers will support async WASM. The events will stay the same, the window interaction, too, only the way the events are delivered would change in the final version with the async component model.</p>",
        "id": 424952085,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709670671
    },
    {
        "content": "<p>I'm actually using pullables in my mini-canvas example. Have you had a chance to look at it?</p>",
        "id": 424952355,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709670807
    },
    {
        "content": "<p>Yeah. Does it work good with pollables?</p>",
        "id": 424952535,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709670878
    },
    {
        "content": "<p>Yes</p>",
        "id": 424952554,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709670889
    },
    {
        "content": "<p><a href=\"https://github.com/MendyBerger/wasi-webgpu/blob/b20c0ec4eb20851dcd6c535af30757a45b8968af/wit/key-events.wit#L11\">https://github.com/MendyBerger/wasi-webgpu/blob/b20c0ec4eb20851dcd6c535af30757a45b8968af/wit/key-events.wit#L11</a></p>",
        "id": 424952618,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709670925
    },
    {
        "content": "<p>I looked a bit at the component model issues, and for now it seems my approach of a mandatory exported function is the standard approach for callbacks. I think proper browser support has to wait for the async component model if you want to stick everything into main, and for browser support for the component model. But given that the component model is the current pathway to supporting WASM as ES modules, browsers should jump on it pretty quickly once it's finished.</p>",
        "id": 425057574,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709722422
    },
    {
        "content": "<p>So what do you think? Should my Windowing proposal be merged with this one, or should it stay separate? Since I plan to make almost everything optional through capabilities, including it shouldn't have issues for headless compute applications.</p>",
        "id": 425063920,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709724392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"419274\">@Mendy Berger</span> ?</p>",
        "id": 425064663,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709724643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/425165-wasi-webgpu/topic/Windowing/near/425063920\">said</a>:</p>\n<blockquote>\n<p>So what do you think? Should my Windowing proposal be merged with this one, or should it stay separate? Since I plan to make almost everything optional through capabilities, including it shouldn't have issues for headless compute applications.</p>\n</blockquote>\n<p>Yes. I would love to join forces!</p>",
        "id": 425183028,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709761491
    },
    {
        "content": "<p>The windowing proposal would probably replace the mini-canvas in wasi-webgpu since both do the same thing</p>",
        "id": 425183240,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709761564
    },
    {
        "content": "<p>Have you had a chance to look at the <code>graphics-context</code> in our repo? It's how we connect the gpu or frame-buffer to the canvas/window.</p>",
        "id": 425183394,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709761646
    },
    {
        "content": "<p><code>graphics-context-buffer</code> would be a TextureView to draw into? <code>mini-canvas</code> itself would then be a Canvas element's <code>GPUCanvasContext</code>? <code>graphics-context</code> seems weird, because it's sort of an intermediary, you create it independently of a WebGPU device or Canvas and just need to connect both and it magically works?</p>",
        "id": 425235967,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709793105
    },
    {
        "content": "<p>Why is there a need for <code>graphics-context</code> anyways? Can't you just draw to the Texture of a Canvas/window, or do you want to support the 2d graphics context in the browser, too?</p>",
        "id": 425236577,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709793479
    },
    {
        "content": "<p>I asked a bit about the Component Model and it's expected for <code>jco</code> to polyfill async support, too, so keeping everything inside main is a good option.</p>",
        "id": 425237074,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709793776
    },
    {
        "content": "<p>I just saw there's also the framebuffer you can draw into using the CPU. In that case, wouldn't you just create a <code>frame-buffer</code> from a method in <code>mini-canvas</code>? So <code>mini-canvas</code> can either have an active <code>frame-buffer</code> or an active WebGPU Texture lend out (so they don't get in each others way during presentation).</p>",
        "id": 425237477,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709793992
    },
    {
        "content": "<p>Graphics context exists to keep graphics api and presentation layer separate. For now we're only considering two graphics apis (webgpu and frame-buffer) and one windowing api, but that's likely to change over time. New graphics apis show up every few years, and new display types also show up every few years. </p>\n<p>On the graphics side:</p>\n<ul>\n<li>Vulkan might be a candidate at some point, as it gives you much more control.</li>\n<li>OpenGL might be a candidate because so many applications are written for it.</li>\n<li>There will almost certainly be new and better graphics apis that show up over time.</li>\n</ul>\n<p>On the presentations side:</p>\n<ul>\n<li>AR/VR might need a new and different windowing api.</li>\n<li>I expect new types of display types to show up over the years.<br>\n(just imagine if we would design this in year 2000, we would probably make assumptions about mice and keyboards that don't hold true for touch devices).</li>\n</ul>\n<p>So graphics-context exists to decouple the api from the presentation, so that one can evolve without the other.</p>\n<p>Makes sense?</p>",
        "id": 425308384,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1709820025
    },
    {
        "content": "<p>Ok, but many abstractions wouldn't hold true for other display types anyways. E.g. in VR, you need essentially 2 buffers for the screens of both eyes. <code>frame-buffer</code> seems only concerned with one buffer at the moment, and if you want proper 3D, don't you need to vary the camera position for each eye? WebGPU can't do that on it's own, so doing that also needs special support. I think a common \"Surface\" primitive for a presentable buffer that a graphics API can use would be enough. The surface configuration should be immutable, and if the application wants to change it, it needs to go through the display API, e.g. applications in car infotainment systems may only support one specific resolution and provide no way of changing it. One other display API could be  the raw presented framebuffer, like it's common on embedded systems. The VR display would have 2 surfaces in that case, with both the same size and type, a desktop window or a Canvas element has a single surface.</p>",
        "id": 425311466,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1709820771
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"419274\">Mendy Berger</span> <a href=\"#narrow/stream/425165-wasi-gfx/topic/Windowing/near/424933582\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>The Browser has its own event loop, so to support browsers before the component model gets async support, the event loop needs to lie in the host.</p>\n</blockquote>\n</blockquote>\n<p>Just thinking out loud: can we require <strong><em>for now</em></strong> that it's run in a service worker, where we can just block?</p>",
        "id": 429773236,
        "sender_full_name": "Mendy Berger",
        "timestamp": 1711507950
    },
    {
        "content": "<p>Yes, that would be an option. Some runtimes like the WASI implementation in VSCode that are purely in JS have to go that route because blocking APIs are impossible otherwise in JS.</p>",
        "id": 429786669,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711517702
    }
]