[
    {
        "content": "<p>Hi all, I'm trying to better understand the component model and how it relates to \"modules\". I have some questions:</p>\n<ol>\n<li>The docs sometimes talk about \"webassembly core modules\". Does this refer to \"modules as described in the webassembly core specification\"?</li>\n<li>Will components typically have multiple modules inside of them; or do you expect all composition to happen on the component level instead of on the module level in the future?</li>\n</ol>\n<p>I'm a bit confused by the statement of \"modules are shared libraries, components are executables\". Do we expect some runtimes to provide some shared functionality using modules, like how shared libraries work on Linux? Or do we expect them to only provide such functionality using components?</p>",
        "id": 384012292,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691768143
    },
    {
        "content": "<p>Hi. <span class=\"user-mention\" data-user-id=\"639836\">@Merlijn Sebrechts</span>.</p>\n<ol>\n<li>Yes, that's exactly what is meant by \"wasm core module\".</li>\n<li>There's nothing prohibiting having a \"standalone\" (my term meaning not composed with other components) component that is comprised of multiple modules, only that generally the language-specific tooling produces a single implementation module and thus is \"componentized\" with that single module. Technically, even these components have more than one module defined in them, but the extra modules are tooling-created to facilitate in the lowering of imports and contain no executable functions. But that's different from having multiple implementation modules.</li>\n</ol>",
        "id": 384012661,
        "sender_full_name": "Peter Huene",
        "timestamp": 1691768196
    },
    {
        "content": "<p>I'm not sure what describes modules as shared libraries and components as executables, as that's not quite apt</p>",
        "id": 384012875,
        "sender_full_name": "Peter Huene",
        "timestamp": 1691768241
    },
    {
        "content": "<p>This blog post makes that analogy: <a href=\"https://www.fermyon.com/blog/webassembly-component-model\">https://www.fermyon.com/blog/webassembly-component-model</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.fermyon.com/blog/webassembly-component-model\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e86750ebf6befd7986644947bdfe5000ae56154d\\/68747470733a2f2f7777772e6665726d796f6e2e636f6d2f7374617469632f696d6167652f7477632d6665726d796f6e2d64656661756c742e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.fermyon.com/blog/webassembly-component-model\" title=\"The WebAssembly Component Model\">The WebAssembly Component Model</a></div><div class=\"message_embed_description\">The WebAssembly Component Model proposal aims to make module composition easy and efficient.  In this post, we'll build an intuition for how it works by analogy with how native code is linked, loaded, and run on popular operating systems.</div></div></div>",
        "id": 384013018,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691768269
    },
    {
        "content": "<p>Regarding #2: you can now also compose application-defined modules in a component:<br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md</a><br>\n<a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\">https://github.com/bytecodealliance/wasm-tools/pull/1133</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/92e6c46d8e2ac67921e6d2029e0768a1d7e2f33a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373333656237353738316632626435616663333533373738383134366538383865353136613038343033356661636235666333663838343630633135326638382f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31313333)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\" title=\"[wit-component] add shared-everything linking support by dicej 路 Pull Request #1133 路 bytecodealliance/wasm-tools\">[wit-component] add shared-everything linking support by dicej 路 Pull Request #1133 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Per https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md and https://hackmd.io/IlY4lICRRNy9wQbNLdb2Wg.\nThis adds a new component link subco...</div></div></div>",
        "id": 384013435,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691768344
    },
    {
        "content": "<p>I think the confusing term there is \"shared\"; unlike shared libraries, module instances <strong>can't</strong> be shared between components (though module code can be)</p>",
        "id": 384013807,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691768408
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639836\">Merlijn Sebrechts</span> <a href=\"#narrow/stream/219900-wasi/topic/understanding.20component.20model/near/384013018\">said</a>:</p>\n<blockquote>\n<p>This blog post makes that analogy: <a href=\"https://www.fermyon.com/blog/webassembly-component-model\">https://www.fermyon.com/blog/webassembly-component-model</a></p>\n</blockquote>\n<p>Ha, I wrote that blog.  Like all analogies, it's imprecise, but I _think_ it provides a decent intuition.</p>",
        "id": 384013922,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691768431
    },
    {
        "content": "<p>So does that mean that in the future, \"modules\" will become more or less a hidden implementation details for app developers (like object files are nowadays)? So devs in the future will mostly interact with components instead?</p>",
        "id": 384013989,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691768443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639836\">Merlijn Sebrechts</span> <a href=\"#narrow/stream/219900-wasi/topic/understanding.20component.20model/near/384013989\">said</a>:</p>\n<blockquote>\n<p>So does that mean that in the future, \"modules\" will become more or less a hidden implementation details for app developers (like object files are nowadays)? So devs in the future will mostly interact with components instead?</p>\n</blockquote>\n<p>I think that's the hope, at least; interacting with components provides interoperability and composability that's just not possible when dealing with core modules.</p>",
        "id": 384014382,
        "sender_full_name": "Peter Huene",
        "timestamp": 1691768516
    },
    {
        "content": "<p>Situations where module composition can be desirable are e.g. porting existing libraries and FFI systems.  For example: supporting Python native extensions, which has been one of my recent projects.</p>",
        "id": 384015362,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691768676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/219900-wasi/topic/understanding.20component.20model/near/384013435\">said</a>:</p>\n<blockquote>\n<p>Regarding #2: you can now also compose application-defined modules in a component:<br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md</a><br>\n<a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1133\">https://github.com/bytecodealliance/wasm-tools/pull/1133</a></p>\n</blockquote>\n<p>I have to admit, I've already read through the shared everything dynamic linking doc, and I'm still having a hard time to understand it. Is it something like this?</p>\n<ul>\n<li>So by default, component model linking means shared-nothing linking: interaction between modules happens across component boundaries using the defined interfaces.</li>\n<li>This means that if multiple modules use common functionality like <code>libc</code>, and <code>libc</code> is a module instead of a component, it will be copied across multiple components (by the compiler).</li>\n<li>With shared-everything linking, the compiler doesn't actually add the <code>libc</code> module to the component. Instead, the runtime does this.</li>\n</ul>\n<p>Am I understanding this correctly?</p>",
        "id": 384017412,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691769032
    },
    {
        "content": "<p>That sounds right to me.  When you link <code>libc.a</code> into your app when building a core module (which may or may not end up wrapped in a component), it can't be shared with other modules or components.  When you link <code>libc.so</code> using shared-everything linking, it can be used by multiple modules and even multiple subcomponents within the resulting component, which results in less code duplication.</p>",
        "id": 384020142,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691769518
    },
    {
        "content": "<p>That becomes a big deal when the library is big, like <code>libpython3.11.so</code> or the .NET runtime.</p>",
        "id": 384020470,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691769580
    },
    {
        "content": "<p>Oh, so the \"shared\" means \"two components share the same module\" instead of \"two modules share the same address space\"?</p>",
        "id": 384020749,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691769626
    },
    {
        "content": "<p>yeah, kind of like how two native processes can use the same .so, but not share memory</p>",
        "id": 384020945,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691769658
    },
    {
        "content": "<p>ok, makes sense!</p>",
        "id": 384021069,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691769678
    },
    {
        "content": "<p>but to be clear, you can _also_ have two modules share the same address space (i.e. when one imports a memory from the other)</p>",
        "id": 384021268,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691769709
    },
    {
        "content": "<p>Indeed</p>",
        "id": 384021435,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691769733
    },
    {
        "content": "<p>Right now, wasmtime seems to have two linkers; one for modules and one for components. Is this expected to be the case in the future? Or will we end up in a situation where there is one conceptual \"linker\" that links both components and modules?</p>",
        "id": 384021974,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691769830
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is probably the one to answer that.  I suspect we'll have both kinds of linker for a while, at least, since they each have unique capabilities and abstractions.</p>",
        "id": 384023153,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691770041
    },
    {
        "content": "<p>Ok, another question about the component model itself:</p>\n<p>I haven't found much documentation about \"worlds\". I understand the use-case for the <code>command</code>/CLI world, for example. App and compiler devs can target this world, and know their app will work in any runtime that supports it.</p>\n<p>But does a guest component need to explicitly declare what world they target? Or can they just declare to use a set of interfaces without defining a world?</p>",
        "id": 384026292,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691770679
    },
    {
        "content": "<p>Generally speaking, we can refer to the union of interfaces which a component imports and exports as the \"world\" it targets.  That world could be defined in a single .wit file like the CLI world or the <a href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit/proxy.wit\">wasi-http</a> one, for example -- or it could be a combination of several worlds (e.g. both CLI and wasi-http, in which case the either the host would need to support both or parts would need to be virtualized in terms of the world(s) the host _does_ support).</p>",
        "id": 384030183,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691771514
    },
    {
        "content": "<p>But since <code>wit-bindgen</code> and related tools require a world as input, you generally start with at least one world defined in a .wit file (which you might have written yourself or else downloaded from somewhere else).</p>",
        "id": 384030466,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691771568
    },
    {
        "content": "<p>How are guest worlds matched to host worlds? If the interfaces in a guest world are a subset of the interfaces in the host world, but they have different (world) names. Would that give any issues?</p>",
        "id": 384032484,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691771990
    },
    {
        "content": "<p>No, that wouldn't be a problem.  The name(s) of the world(s) are not included in the component type -- just the name(s) of the interfaces.</p>",
        "id": 384032844,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691772067
    },
    {
        "content": "<p>Oh, I think I misread your comment.</p>",
        "id": 384032909,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691772086
    },
    {
        "content": "<p>Yes, the names of the interfaces _do_ matter.</p>",
        "id": 384032950,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691772100
    },
    {
        "content": "<p>I think your first interpretation of my comment was correct</p>",
        "id": 384032990,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772112
    },
    {
        "content": "<p>I meant different world names, not interface names</p>",
        "id": 384033021,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772119
    },
    {
        "content": "<p>Okay, yeah, world names don't matter (to my knowledge).</p>",
        "id": 384033128,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691772137
    },
    {
        "content": "<p>Ok, that makes sense, thanks!</p>",
        "id": 384033540,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/219900-wasi/topic/understanding.20component.20model/near/384030183\">said</a>:</p>\n<blockquote>\n<p>Generally speaking, we can refer to the union of interfaces which a component imports and exports as the \"world\" it targets.  That world could be defined in a single .wit file like the CLI world or the <a href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit/proxy.wit\">wasi-http</a> one, for example -- or it could be a combination of several worlds (e.g. both CLI and wasi-http, in which case the either the host would need to support both or parts would need to be virtualized in terms of the world(s) the host _does_ support).</p>\n</blockquote>\n<p>How would such virtualization happen? Could the runtime add a component that bridges the gap between the guest world and runtime world?</p>",
        "id": 384034508,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772364
    },
    {
        "content": "<p>(like a polyfill for wasm)</p>",
        "id": 384035351,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772494
    },
    {
        "content": "<p>Yes, the runtime _could_ do it, but usually the app developer would do it ahead of time using e.g. <code>wasm-tools compose</code> to combine the original component with a virtualizing component.  See <a href=\"https://github.com/bytecodealliance/WASI-Virt\">https://github.com/bytecodealliance/WASI-Virt</a> for example.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b903bc7686142f11f2e86835fde6927dd33d4ee9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373031376436316665313962643135356161363433616239313162303464636130613339356466626635323462313961303937373132373336633062393233372f62797465636f6465616c6c69616e63652f574153492d56697274)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt\" title=\"GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs\">GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs</a></div><div class=\"message_embed_description\">Virtual implementations of WASI APIs. Contribute to bytecodealliance/WASI-Virt development by creating an account on GitHub.</div></div></div>",
        "id": 384035663,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691772550
    },
    {
        "content": "<p>Another example where this is useful: the host _does_ support the required interfaces, but you're using a third-party subcomponent which you want to quarantine off and not give access to system resources.</p>",
        "id": 384036137,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691772634
    },
    {
        "content": "<p>Ah, that's interesting!</p>",
        "id": 384037287,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772847
    },
    {
        "content": "<p>I'm not clear on how access rights are supposed to work in the component model in general. Can a runtime run a component that declares to use interfaces which the runtime disallows?</p>",
        "id": 384037685,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691772911
    },
    {
        "content": "<p>A host runtime can do whatever it wants <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, which could include inserting a virtualizing shim, providing no-op (or trapping) stubs as native host functions, or refusing to instantiate the component.</p>",
        "id": 384038534,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691773073
    },
    {
        "content": "<p>Ok, cool! Do I understand it correctly then that the permissions system is currently ad-hoc and runtime-specific? Like, one runtime might support giving an app granular access to files, while another only supports binary all-or-nothing full filesystem access?</p>",
        "id": 384040344,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691773407
    },
    {
        "content": "<p>Yes, that sounds correct.</p>",
        "id": 384041349,
        "sender_full_name": "Joel Dice",
        "timestamp": 1691773607
    },
    {
        "content": "<p>Awesome, thanks a lot for helping me through this! :)</p>",
        "id": 384042443,
        "sender_full_name": "Merlijn Sebrechts",
        "timestamp": 1691773844
    }
]