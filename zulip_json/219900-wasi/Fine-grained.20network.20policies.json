[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Badeend</span> I really love how things are coming together in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681\">https://github.com/bytecodealliance/wasmtime/issues/7681</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7694\">https://github.com/bytecodealliance/wasmtime/issues/7694</a>. How do you want to go about implementing this since the design (at least at a high-level) seems pretty clear? I'm keen on diving into this, but I don't want to step on toes or increase risk of duplicate work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7681\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4183fe436ee91e1e7182b078f1cfad6373fc6a00\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343539653164343266633663643766626430323339306632623234643030626464663565343437383634613833306332376261663933653334316166633237632f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37363831)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681\" title=\"WASI: Fine-grained network policies · Issue #7681 · bytecodealliance/wasmtime\">WASI: Fine-grained network policies · Issue #7681 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">#7662 is a good first step towards letting users of the wasmtime library customize network behavior. After that change, library users have two options: either use inherit_network which grants acces...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7694\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5e8b72bcd2641807ef1628502d035f32c2b938b1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646563353838356134336432313264373830336433353166363438346337366531663839356165393331353731333464386238313764643433626330373832352f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37363934)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7694\" title=\"[`wasi:sockets/ip-name-lookup#resolve_addresses`] way to track name to `IpAddress` resolution · Issue #7694 · bytecodealliance/wasmtime\">[`wasi:sockets/ip-name-lookup#resolve_addresses`] way to track name to `IpAddress` resolution · Issue #7694 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">My use case is essentially to allow any socket operation as long as the IP addressed used for that operation was resolved in the last call to wasi:sockets/ip-name-lookup#resolve_addresses. Given th...</div></div></div>",
        "id": 408582827,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1702896464
    },
    {
        "content": "<p>I think the first step will be to introduce all the required extension points. I posted an idea for that in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1860560055\">https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1860560055</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1860560055\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6e6d82e828306d1d4599deaf78d0440eeb6a71f2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313830323438363532336132393931366438346438663961623065653039636236383239366235323131303832336431626532653837616661636433353064662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37363831)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1860560055\" title=\"WASI: Fine-grained network policies · Issue #7681 · bytecodealliance/wasmtime\">WASI: Fine-grained network policies · Issue #7681 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">#7662 is a good first step towards letting users of the wasmtime library customize network behavior. After that change, library users have two options: either use inherit_network which grants acces...</div></div></div>",
        "id": 408637453,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1702914280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> your approach laid out <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1861509496\">here</a> seems reasonable. Would you mind if I started on trying out the implementation?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1861509496\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4db1db1d051bf27c1257f141ca4c2b4163a7189f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353437386262326638363433313839393965666264613239336331663861346532396237356163643963363831626338386436353833656265393364303161642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37363831)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7681#issuecomment-1861509496\" title=\"WASI: Fine-grained network policies · Issue #7681 · bytecodealliance/wasmtime\">WASI: Fine-grained network policies · Issue #7681 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">#7662 is a good first step towards letting users of the wasmtime library customize network behavior. After that change, library users have two options: either use inherit_network which grants acces...</div></div></div>",
        "id": 408904111,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1702984585
    },
    {
        "content": "<p>Yeah, sure. No problem!<br>\nMaybe start out with UDP and/or domain name lookup? I already started tinkering with TCP</p>",
        "id": 408909965,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1702985602
    },
    {
        "content": "<p>Cool. I’ll start with domain names then.</p>",
        "id": 408911785,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1702985917
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">https://github.com/bytecodealliance/wasmtime/pull/7705</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d68b98440a4c56485c69f8247df402ff71ee4231\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323430613631613231343830396230396562666464643238653663343930346564346665303435353635336261303431373033306633326162323738346463322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37373035)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\" title=\"Abstract out IpNameLookup core functionality so that users can override it by rylev · Pull Request #7705 · bytecodealliance/wasmtime\">Abstract out IpNameLookup core functionality so that users can override it by rylev · Pull Request #7705 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This follows the design outlined in #7681 for IpNameLookup.\nA new trait IpNameLookup is introduced that factors out the conversion from a String to a list of IP addresses. Another trait, WasiIpName...</div></div></div>",
        "id": 408960973,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1703000968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590805\">@Ryan Levick (rylev)</span> I've spent a day trying to get wasi-io's InputStream &amp; OutputStream working on top of tokio's AsyncRead &amp; AsyncWrite, but getting that to work would require a lot more work than I'm willing to put in right now. So if you don't mind I'm going to continue on with custom traits:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[async_trait]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TcpReader</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">try_read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Bytes</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">readable</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[async_trait]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TcpWriter</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">try_write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span>: <span class=\"nc\">Bytes</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">writable</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 409208577,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1703085878
    },
    {
        "content": "<p>Works for me! Just out of curiosity, do you imagine you would run into the same issues with the futures crate’s AsyncRead and AsyncWrite?</p>",
        "id": 409214863,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1703087884
    },
    {
        "content": "<p>Yeah, they're the same general design</p>",
        "id": 409223888,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1703090899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> Happy New Year - I wanted to check in with you on this. Are you still hoping to have a PR for TCP support similar to the one I have for IP name lookups? I was thinking about jumping into UDP soon.</p>",
        "id": 411018592,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1704290254
    },
    {
        "content": "<p>Happy new year to you too. <span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span> I haven't worked on WASI at all the past week, but expect to continue somewhere this week</p>",
        "id": 411023167,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1704291935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590805\">@Ryan Levick (rylev)</span> To keep you up to date on my progress, I've opened a <a href=\"https://github.com/rylev/wasmtime/pull/2\">draft PR</a>. To my estimation it is about ~70% done.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/wasmtime/pull/2\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8d354b8893e834dccfcbbdd71861d60c59bf08e8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623962323161333831323664656631396632313164333833346564336662393232306330323230616161313535376566396561393439336337313466396664312f72796c65762f7761736d74696d652f70756c6c2f32)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/wasmtime/pull/2\" title=\"TCP overrides by badeend · Pull Request #2 · rylev/wasmtime\">TCP overrides by badeend · Pull Request #2 · rylev/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - TCP overrides by badeend · Pull Request #2 · rylev/wasmtime</div></div></div>",
        "id": 412407204,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705001259
    },
    {
        "content": "<p>Alright, I'm done. I've updated the PR. Let me know what you think</p>",
        "id": 412848192,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705267969
    },
    {
        "content": "<p>Looks great! I think we should merge this ASAP so that I can get in a PR for UDP.</p>",
        "id": 412992524,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1705335980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> I finally had time to sit down today and do the UDP work. It's not quite done, and I haven't actually tested it, but if you're curious for a preview, you can find it here: <a href=\"https://github.com/rylev/wasmtime/pull/4\">https://github.com/rylev/wasmtime/pull/4</a>. I'll move the PR out of draft state early next week.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/wasmtime/pull/4\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4cb64854fd909c19a336931010a6276a7d2589ef\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336165663735393834646237623234303430646630396632646531303234386263346138363034653963616334363263366132623033393736333434366165392f72796c65762f7761736d74696d652f70756c6c2f34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/wasmtime/pull/4\" title=\"UDP override by rylev · Pull Request #4 · rylev/wasmtime\">UDP override by rylev · Pull Request #4 · rylev/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - UDP override by rylev · Pull Request #4 · rylev/wasmtime</div></div></div>",
        "id": 416827337,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1705684450
    },
    {
        "content": "<p>Already looking great! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> I only skimmed the PR , but I have two thoughts so far:</p>\n<ol>\n<li>You've implemented <code>UdpSocketResource::inner</code> as an Arc. This forces implementors to use a Mutex if they want to maintain additional state. Is there any way to get around this?</li>\n<li>Perhaps we can merge <code>send_data_to</code>, <code>send_data</code> &amp; <code>await_writable</code> into a single <code>fn poll_send(&amp;self, cx: &amp;mut Context&lt;'_&gt;, buf: &amp;[u8], target: SocketAddr) -&gt; Poll&lt;Result&lt;usize&gt;&gt;</code> similar to how <a href=\"https://docs.rs/tokio/latest/tokio/net/struct.UdpSocket.html#method.poll_send_to\">tokio</a> does it?</li>\n</ol>",
        "id": 416850132,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705691744
    },
    {
        "content": "<p>and the same for receive.<br>\nThat would be similar to <code>TcpSocket::poll_accept</code></p>",
        "id": 416850399,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705691829
    },
    {
        "content": "<blockquote>\n<p>You've implemented UdpSocketResource::inner as an Arc. This forces implementors to use a Mutex if they want to maintain additional state. Is there any way to get around this?</p>\n</blockquote>\n<p>Yea, that's not ideal. Unfortunately, at least in the naive implementation I don't know if we can avoid it. The <code>dyn UdpSocket</code> lives both in the <code>SocketResource</code>, the <code>IncomingDatagramStream</code>, and the <code>OutgoingDatagramStream</code>. So in order to support multiple owners we need to use reference counting. We could of course change things to that the two stream types don't own a <code>dyn UdpSocket</code> but rather get some ownership over different handle types.</p>\n<blockquote>\n<p>Perhaps we can merge send_data_to, send_data &amp; await_writable into a single fn poll_send(&amp;self, cx: &amp;mut Context&lt;'_&gt;, buf: &amp;[u8], target: SocketAddr) -&gt; Poll&lt;Result&lt;usize&gt;&gt; similar to how tokio does it?</p>\n</blockquote>\n<p>I thought the same about this and only avoided it since it's not quite a simple as the current naive implementation. I'll play around with this and the idea of different handle types discussed above, and we'll see what happens.</p>",
        "id": 417219735,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1705926942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> I unfortunately couldn't come up with a way to both signal readiness and allow for reading and writing data within the same function. Perhaps you have an idea for how to do this elegantly. In any case, it might be best to have you review <a href=\"https://github.com/rylev/wasmtime/pull/4\">https://github.com/rylev/wasmtime/pull/4</a> and if you're generally ok with the direction, we can merge it, and then start doing final tweaks before we get Alex to review the whole thing for merging into Wasmtime main.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/wasmtime/pull/4\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/37c136d94cb2cc0acb00503117fbaf3bc77310b0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643363653239613435663163653333343835656662373137386665373530306161613639623566393962633039353130383136336561656239356239666161662f72796c65762f7761736d74696d652f70756c6c2f34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/wasmtime/pull/4\" title=\"UDP override by rylev · Pull Request #4 · rylev/wasmtime\">UDP override by rylev · Pull Request #4 · rylev/wasmtime</a></div><div class=\"message_embed_description\">This PR moves UDP to a similar architecture to how TCP works after #2.\nThe UdpSocket trait sets out all of the overrideable features for UDP including the ability to generate outgoing and incoming ...</div></div></div>",
        "id": 417284803,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1705946007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> I tried to do a rebase against the latest main and it was pretty painful. I'm thinking I might squash all the commits on the branch so that only one commit needs to be rebased. Would you object to this?</p>",
        "id": 418669076,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1706544161
    },
    {
        "content": "<p>Go ahead</p>",
        "id": 418703485,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1706555878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> I'd like to try to see if we can land all of this work. Unless you object I'll start breaking up <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\">https://github.com/bytecodealliance/wasmtime/pull/7705</a> (like you suggested <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1937766696\">here</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/acd313565b7749985309ec6db76571b0502f88d2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616163643532653830303034363032393737616130636335313039656133343838333864366534636233396633363235396639376266393437336366333566302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37373035)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705\" title=\"Fine-grained network policies by rylev · Pull Request #7705 · bytecodealliance/wasmtime\">Fine-grained network policies by rylev · Pull Request #7705 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This follows the design outlined in #7681 for IpNameLookup.\nA new trait IpNameLookup is introduced that factors out the conversion from a String to a list of IP addresses. Another trait, WasiIpName...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1937766696\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/acd313565b7749985309ec6db76571b0502f88d2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616163643532653830303034363032393737616130636335313039656133343838333864366534636233396633363235396639376266393437336366333566302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37373035)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7705#issuecomment-1937766696\" title=\"Fine-grained network policies by rylev · Pull Request #7705 · bytecodealliance/wasmtime\">Fine-grained network policies by rylev · Pull Request #7705 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This follows the design outlined in #7681 for IpNameLookup.\nA new trait IpNameLookup is introduced that factors out the conversion from a String to a list of IP addresses. Another trait, WasiIpName...</div></div></div>",
        "id": 430022248,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1711616380
    },
    {
        "content": "<p>I won't be able to work on WASI for at least a couple of weeks, so go ahead! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 430023064,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1711616667
    },
    {
        "content": "<p>Absolutely no worries! That's why there's one than one of us :-)</p>",
        "id": 430031934,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1711619913
    },
    {
        "content": "<p>Started this process with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8282\">https://github.com/bytecodealliance/wasmtime/pull/8282</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8282\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a823b0d833373dd2be90f4230aef7d84713938ed\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666562613631623435363830303236313264396530376264373538373935623539356331646662373930666434313264383966653833336264343836363335332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38323832)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8282\" title=\"Separate TCP implementation from the host bindings by rylev · Pull Request #8282 · bytecodealliance/wasmtime\">Separate TCP implementation from the host bindings by rylev · Pull Request #8282 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Part of #7705 was moving the implementation of TCP (and UDP) out of the host bindings and into their own types. This PR starts this process (only for TCP) by doing a simple lift and shift of the co...</div></div></div>",
        "id": 430785869,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1712062992
    }
]