[
    {
        "content": "<p>Is there any intention or desire to directly update <code>wasm-ld</code> to emit components directly? I saw <a href=\"https://github.com/alexcrichton/wasm-component-ld\">https://github.com/alexcrichton/wasm-component-ld</a> and wondered if some or all of it could be backported to wasm-ld.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasm-component-ld\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0f11b0e97ec3b37ec6feff43f156227e4007884c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316437353330613532643635346237373561366430393335303632306164393031376232616230326163396233383665343436326238343338363433613137642f616c65786372696368746f6e2f7761736d2d636f6d706f6e656e742d6c64)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasm-component-ld\" title=\"GitHub - alexcrichton/wasm-component-ld: Command line linker for creating WebAssembly components\">GitHub - alexcrichton/wasm-component-ld: Command line linker for creating WebAssembly components</a></div><div class=\"message_embed_description\">Command line linker for creating WebAssembly components - alexcrichton/wasm-component-ld</div></div></div>",
        "id": 426400674,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710353663
    },
    {
        "content": "<p>Asking because I’m looking at the Go wasm linker, which doesn’t use LLVM, to figure out how to modify it to directly emit a component.</p>",
        "id": 426400766,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710353712
    },
    {
        "content": "<p>At this time, no, I don't think anyone's looking to port this to wasm-ld. The main complication is the <code>wit-component</code> crate which performs the componentization process. While that can certainly be written in any language it's a pretty tricky piece of code to port so it's not one I think anyone wants to port to C++ yet. </p>\n<p>Other than that though it's a trivial wrapper so that's the only hard part</p>",
        "id": 426401499,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710353958
    },
    {
        "content": "<p>(sorry sent soon so updated previous message with what I fully wanted to say)</p>",
        "id": 426401605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710353997
    },
    {
        "content": "<p>We want to port that logic to Go.</p>",
        "id": 426401670,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354006
    },
    {
        "content": "<p>Essentially this is a requirement for mainline Go to support WASI Preview 2, which means natively supporting the component model.</p>",
        "id": 426401900,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354092
    },
    {
        "content": "<p>Sure! In that case the work item is basically the <code>wit-component</code> crate and what it does internally</p>",
        "id": 426402077,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354161
    },
    {
        "content": "<p>How much (if any) of what wit-component does could be moved to wit-bindgen?</p>",
        "id": 426402101,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354169
    },
    {
        "content": "<p>nothing, unfortunately, because it all operates after the wasm module has been created, whereas wit-bindgen works on things before a wasm module has been created</p>",
        "id": 426402152,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354192
    },
    {
        "content": "<p>I'll caution you that wit-component is a notoriously subtle crate and does quite a lot internally, but that being said the inputs and outputs are pretty clear so it's also ripe for a second implementation</p>",
        "id": 426402261,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354237
    },
    {
        "content": "<p>What’s the best way to understand the work that wit-component performs?</p>",
        "id": 426402263,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354238
    },
    {
        "content": "<p>Is the process documented outside of the Rust implementation?</p>",
        "id": 426402325,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354250
    },
    {
        "content": "<p>Heh unfortunately I don't think I have a great answer other than reading the implementation yeah</p>",
        "id": 426402348,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354258
    },
    {
        "content": "<p>little of what it does is \"standard\" per se, but it's becoming sort of defacto standard nowadays</p>",
        "id": 426402403,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354285
    },
    {
        "content": "<p>Related: is there a second standalone runtime that supports the CM?</p>",
        "id": 426402408,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354287
    },
    {
        "content": "<p>the closest equivalent I'm aware of is jco running components on node</p>",
        "id": 426402437,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354303
    },
    {
        "content": "<p>Jco leans on the Rust tooling (warm-tools, wit-component) right?</p>",
        "id": 426402525,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354344
    },
    {
        "content": "<p>It does, yes.</p>",
        "id": 426402693,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354409
    },
    {
        "content": "<p>jco compiles all the rust tooling itself to wasm and then runs that in node to generate code that runs in node</p>",
        "id": 426402755,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354427
    },
    {
        "content": "<p>(sort of self-hosting I believe)</p>",
        "id": 426402771,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354432
    },
    {
        "content": "<p>Oh interesting.</p>",
        "id": 426402995,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354523
    },
    {
        "content": "<p>Observation: the name mangling and metadata added in <code>wasm-tools component embed</code> and <code>component new</code> are workarounds for limitations in LLVM tooling for C/C++/Rust?</p>",
        "id": 426403164,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354597
    },
    {
        "content": "<p>How much of the subtlety/complexity of <code>wit-component</code> has to do with adapters?</p>",
        "id": 426403414,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354694
    },
    {
        "content": "<p>sort of and sort of not, the decision with wit-component was to use a core wasm module as the unit of abstraction for creation of a component, so you feed in a core wasm and then out pops a component. Decisions around mangling/metadata were made within that context, everything was about how do we use a core wasm module to represent what a component ought to be.</p>\n<p>On one hand that's all a limitation of LLVM in that it can't output components, but it's also an acknowledgement of reality of we didn't want to create a whole brand new \"everything\" in LLVM centered around components when it's all more-or-less modules anyway.</p>\n<p>So sort of a workaround, but also even if it weren't a workaround I think we'd likely settle on this as well</p>",
        "id": 426403636,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354774
    },
    {
        "content": "<blockquote>\n<p>How much of the subtlety/complexity of wit-component has to do with adapters?</p>\n</blockquote>\n<p>My gut would be 20%, so some, but not all</p>",
        "id": 426403667,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354788
    },
    {
        "content": "<p>The major tasks are, off the top of my head:</p>\n<ul>\n<li>Deserializing a component into a WIT document - especially with respect to resources this is not easy</li>\n<li>Merging WIT documents together (the core wasm might have multiple pieces in it that all have component metadata)</li>\n<li>Auto-gc'ing WIT in a sense where if you have metadata for importing a/b/c but your module only imports a/b then you don't emit \"c\" in the output</li>\n<li>Handling circular dependencies between lowering imports and the core wasm module</li>\n</ul>",
        "id": 426404011,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354915
    },
    {
        "content": "<p>OK I have the deserializing of a <code>Resolve</code> back into WIT working today</p>",
        "id": 426404186,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710354965
    },
    {
        "content": "<p>Ah this is a very different operation, it's basically taking a binary component and deserializing it into a Resolve</p>",
        "id": 426404273,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710354995
    },
    {
        "content": "<p>Ah, OK.</p>",
        "id": 426404312,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355011
    },
    {
        "content": "<p>In the case of mainline Go, we’d be able to have all this metadata around anyway, when outputting the .wasm file.</p>",
        "id": 426404362,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355035
    },
    {
        "content": "<p>So we wouldn’t need to stash WIT metadata somewhere for post-processing a module</p>",
        "id": 426404407,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355055
    },
    {
        "content": "<p>you can see this with <code>wasm-tools component wit -t ./my-wit-folder</code> -- that'll output a wasm component, in its text format, and that's what you would need to parse to get back into the WIT (you'd parse the binary, which you can see with <code>--wasm</code>)</p>",
        "id": 426404434,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355065
    },
    {
        "content": "<p>Yeah the \"smuggle through custom sections\" workaround sounds like you could remove, which would be nice</p>",
        "id": 426404535,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355095
    },
    {
        "content": "<p>Since we’re starting with TinyGo, I do need to do some smuggling as a starting point</p>",
        "id": 426404697,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355161
    },
    {
        "content": "<p>Do we have sufficient information in the <code>Resolve</code> to embed metadata sections in the generated Go code?</p>",
        "id": 426404778,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355194
    },
    {
        "content": "<p>That the TinyGo compiler could add as specific sections to the emitted .wasm file?</p>",
        "id": 426404839,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355205
    },
    {
        "content": "<p>The approach I'm thinking is to emulate the <code>wasm-tools component embed</code> step directly, before trying to emulate <code>warm-tools component new</code></p>",
        "id": 426404967,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355254
    },
    {
        "content": "<p>yes that's <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/980104673e6d91cb15b56b3375f1e75764b5f8f6/crates/wit-component/src/lib.rs#L91-L107\">this function</a>, where all you need is a <code>Resolve</code> and a <code>WorldId</code> and then you can make the custom section</p>",
        "id": 426405017,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355280
    },
    {
        "content": "<p>What’s the format of that custom section?</p>",
        "id": 426405069,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355298
    },
    {
        "content": "<p>you can find the creation <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/980104673e6d91cb15b56b3375f1e75764b5f8f6/crates/wit-component/src/metadata.rs#L159-L198\">here</a> as well as documentation in that module</p>",
        "id": 426405111,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355321
    },
    {
        "content": "<p>aka it's a component with a custom section where the custom section has I think maybe 2 or 3 bytes and that's it</p>",
        "id": 426405187,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355337
    },
    {
        "content": "<p>the component is the \"big piece\"</p>",
        "id": 426405201,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355342
    },
    {
        "content": "<p>So it’s the binary representation of <code>wasm-tools component wit -t</code>?</p>",
        "id": 426405253,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355367
    },
    {
        "content": "<p>indeed yeah</p>",
        "id": 426405274,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710355378
    },
    {
        "content": "<p>OK thanks</p>",
        "id": 426405360,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1710355413
    }
]