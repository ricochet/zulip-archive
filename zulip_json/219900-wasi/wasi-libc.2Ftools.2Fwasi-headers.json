[
    {
        "content": "<p>so, just before break my witx-test tool (a proptest generator for witx specs, plus a driver to use wasi-headers to generate a header and validate the header with clang) found some parts of the witx grammar that wasi-headers couldn't handle correctly</p>",
        "id": 185626043,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579027490
    },
    {
        "content": "<p>most of it is easy to fix, the tough part to crack is that the representation of witx arrays in C is tricky/inconstient</p>",
        "id": 185626096,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579027525
    },
    {
        "content": "<p>we currently don't have any way to deal with an array as a member of a struct, or a variant in a union</p>",
        "id": 185626231,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579027603
    },
    {
        "content": "<p>i think the correct way to deal with arrays in either of those cases is to define a <code>struct array_$typename { $typename *ptr; size_t len; };</code></p>",
        "id": 185626450,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579027742
    },
    {
        "content": "<p>this is going to complicate the one-pass nature of the tool, but i dont think theres any other way to handle it correctly. does anyone have objections?</p>",
        "id": 185626569,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579027804
    },
    {
        "content": "<p>along those same lines - right now the wasi-headers tool hard codes its input files and output files. im going to extend the main to take an optional input and output path - if both are blank it will do what it does now, which is use the latest snapshot and output to the right spot in the libc. but in general i think its a pretty useful tool to use elsewhere</p>",
        "id": 185626895,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028015
    },
    {
        "content": "<p>One option is just to return an error; WASI itself has no arrays inside of structs or unions</p>",
        "id": 185627143,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1579028129
    },
    {
        "content": "<p>id argue that it already does have arrays inside structs, <code>$iovec</code> and <code>$ciovec</code></p>",
        "id": 185627299,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028203
    },
    {
        "content": "<p>which are a pair of pointer and len</p>",
        "id": 185627308,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028208
    },
    {
        "content": "<p>those should be arrays, i think, in order to get rid of pointers in witx. i dont want to figure out how to get rid of pointers today, but i want to eventaully :)</p>",
        "id": 185627504,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028315
    },
    {
        "content": "<p>(reason being that pointers arent an interface type, but arrays are)</p>",
        "id": 185627528,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028332
    },
    {
        "content": "<p>also, i just realized this issue would happen if you ever put a <code>string</code> inside a struct or union as well</p>",
        "id": 185627602,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028381
    },
    {
        "content": "<p>Yeah, that does make sense. I guess I'm just feeling a little conservative about supporting \"arrays\" which become pointers with not-entirely-obvious lifetimes outside of function parameters.</p>",
        "id": 185627674,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1579028404
    },
    {
        "content": "<p>hmm. thats a fair concern</p>",
        "id": 185627751,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028447
    },
    {
        "content": "<p>well, we can punt on it for now.</p>",
        "id": 185627765,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028460
    },
    {
        "content": "<p>ill make a PR that fixes some simpler stuff, and panics in the code generator in these unsupported cases</p>",
        "id": 185627863,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028510
    },
    {
        "content": "<p>Admittadly, the existing <code>pointer</code> type isn't exactly watertight either.</p>",
        "id": 185628219,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1579028708
    },
    {
        "content": "<p>But it feels different -- with interface types focusing on by-value semantics, if we have something that we describe as an \"array\", the value of the array should be passed by copy.</p>",
        "id": 185628264,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1579028747
    },
    {
        "content": "<p>Also, there are ongoing discussions at the interface types level about the possibilty of making memory slices a proper thing in interface types, and if we get that, that could change how all of these things work.</p>",
        "id": 185628522,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1579028898
    },
    {
        "content": "<p>i havent kept up to date on those discussions</p>",
        "id": 185628539,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028910
    },
    {
        "content": "<p>So my instinct here is to not get too far ahead of those discussions.</p>",
        "id": 185628542,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1579028912
    },
    {
        "content": "<p>ok, works for me</p>",
        "id": 185628553,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579028921
    }
]