[
    {
        "content": "<p>this is mostly for <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"263195\">@Jakub Konka</span> but didnt seem like the right discussion for a github issue - i'd like feedback on possibly changing the logging macros emitted by wiggle and used in wasi-common to use the tracing crate <a href=\"https://docs.rs/tracing/0.1.14/tracing/\">https://docs.rs/tracing/0.1.14/tracing/</a></p>",
        "id": 199281210,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590881881
    },
    {
        "content": "<p>we use tracing all over the place at fastly, which is my primary motivation, but in general i think <code>tracing</code> has a couple of advantages over <code>log</code>that make it worth using</p>",
        "id": 199281250,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590881925
    },
    {
        "content": "<p>the first is the concept of spans, which are natural to use in wiggle-generated functions where we want to log the arguments of a function, then later when an inner func returns we want to log the return values. the argument values and return value s are part of the same span, which means the backend can automatically correlate them, rather than have to associate them by searching on some common part of the text</p>",
        "id": 199281310,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590882033
    },
    {
        "content": "<p>the second is (stable) support for structured fields (in log this is noted as unstable and called kv support)</p>",
        "id": 199281324,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590882072
    },
    {
        "content": "<p>which also naturally matches to the names of arguments / return values we already have in witx, and keeps that structure around longer so that it can be e.g. encoded in json by the backend that sends it to some logging endpoint that understands json</p>",
        "id": 199281367,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590882156
    },
    {
        "content": "<p>also, trace hooks that are disabled (marked as uninteresting, essentially) by the backend are very low overhead - its one atomic load to determine whether a hook is disabled.</p>",
        "id": 199281429,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590882282
    },
    {
        "content": "<p>anyway, im going to prepare a patch to make tracing an additional opt-in logging facility, because we'd like to use that at fastly, but if it ends up being alright with all of you, we can drop the <code>log</code> based one afterwards.</p>",
        "id": 199281440,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1590882336
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>, who's also looked into tracing</p>",
        "id": 199300527,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1590921241
    },
    {
        "content": "<p>Yeah, my plan was to integrate the <code>tracing</code> crate throughout wasmtime and cranelift, so big +1 from me!</p>\n<p>A little bit of an aside, but it would be super sweet if someone made a tracing subscriber that outputted chrome traces, so they could be viewed in the chrome:tracing UI or the firefox profiler</p>",
        "id": 199390598,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591028958
    },
    {
        "content": "<p>excellent, thank you fitzgen!</p>",
        "id": 199405758,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1591036378
    }
]