[
    {
        "content": "<p>I've been working on the <a href=\"https://github.com/bytecodealliance/preview2-prototyping/tree/main/host\">Preview 2 host implementation</a> and have been thinking about how to support environment variables.  <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> reminded me that the current plan is to use WIT star imports to represent env variables so that each variable is represented by a zero-argument function to be exported by the host.  Thus a guest component will need to indicate which variables it will need by importing a function for each, and the host will match those up with the variables it has, throwing an instantiation error if it can't meet the guest's needs.  I have two questions about this:</p>\n<ul>\n<li>Is my description above accurate?</li>\n<li>How will will the preview1-&gt;preview2 adapter work?  A preview1-based module doesn't advertise which variables it needs, and it might not even know what it needs; e.g. it might just load them into a map and ship them off somewhere dynamically.</li>\n</ul>\n<p>I seem to recall a discussion that there would be two Preview 2 APIs for getting variables: a static one as described above, and a dynamic one to handle other cases.  Perhaps that latter is what I'm looking for here.  Something like <code>dynamic-environ-get: func() -&gt; list&lt;(string, string)&gt;</code>?  And presumably the preview1-&gt;preview2 adapter would use that instead of the static, star-import-based API?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping/tree/main/host\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/677ac25587430f28845f41527e8fbcd4e076f86a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333861653431386262323864356362626463343563616630393962393661623065653935373232343030323733353161353661333733303834653530633533312f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping/tree/main/host\" title=\"preview2-prototyping/host at main · bytecodealliance/preview2-prototyping\">preview2-prototyping/host at main · bytecodealliance/preview2-prototyping</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - preview2-prototyping/host at main · bytecodealliance/preview2-prototyping</div></div></div>",
        "id": 315849828,
        "sender_full_name": "Joel Dice",
        "timestamp": 1671032677
    },
    {
        "content": "<p>My personal current plan has been to not implement star imports at this time as while they sound nice I don't have any idea how to implement them concretely, so for the near-term in the same manner as we don't have async quite yet I think it would be better to plan to not have star imports. How that affects the adapter though I'm not certain.</p>",
        "id": 315850792,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1671032963
    },
    {
        "content": "<p>Not to say that star imports can't be implemented of course, but someone would need to champion it end-to-end to have WASI depend on it</p>",
        "id": 315850853,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1671032983
    },
    {
        "content": "<p>Dynamic access to environment variables seems pretty necessary to me.</p>",
        "id": 315851953,
        "sender_full_name": "Lann Martin",
        "timestamp": 1671033246
    },
    {
        "content": "<p>I wrote a bit of code <em>yesterday</em> that needed to iterate over environ to pattern match keys.</p>",
        "id": 315852142,
        "sender_full_name": "Lann Martin",
        "timestamp": 1671033305
    },
    {
        "content": "<p>Personally I don't have  an issue with <code>dynamic-environ-get</code> as you've proposed. A halfway alternative is to pass env vars to the <code>command</code> export in the same manner as <code>argv</code> but I say halfway since env vars I think are important for non-commands and there's otherwise no mechanism for non-commands to get their env vars</p>",
        "id": 315853086,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1671033556
    },
    {
        "content": "<p>OK, so sounds like we need a dynamic function to get all the env vars no matter what, and someday we'll add a static, star-import-based API too, but probably not in time for Preview 2 unless someone champions it.  I'll go ahead and add the dynamic function to wasi.wit.</p>",
        "id": 315853429,
        "sender_full_name": "Joel Dice",
        "timestamp": 1671033636
    },
    {
        "content": "<p>bikesheding the name: maybe just <code>environ-get</code>? It is pretty clearly \"dynamic\"...</p>",
        "id": 315853603,
        "sender_full_name": "Lann Martin",
        "timestamp": 1671033682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I can pass them in via WasiCtx for the time being.  Happy to add another argument to <code>command</code> too, if desired.</p>",
        "id": 315853734,
        "sender_full_name": "Joel Dice",
        "timestamp": 1671033714
    },
    {
        "content": "<p>To clarify though Dan's had the most thoughts on this I think historically, so I'd recommend double-checking with at least him before fully committing</p>",
        "id": 315853931,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1671033761
    },
    {
        "content": "<p>but yeah I think configuring env vars in <code>WasiCtx</code> is fine for now</p>",
        "id": 315854030,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1671033784
    }
]