[
    {
        "content": "<p>I'm in the process of implementing some WASI calls and noticed that calls are implemented using YANIX and WINX (which are low level C abstractions) rather than using the Rust std library. May I ask as to why this is the way it is? Is this because we want to compile WASM to native code without having to depend on the Rust std runtime?</p>",
        "id": 198675460,
        "sender_full_name": "Emiliano Lesende",
        "timestamp": 1590417494
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"263195\">@Jakub Konka</span></p>",
        "id": 198681224,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1590421336
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"305220\">@Emiliano Lesende</span> ! That's an excellent question! If you look closely, some of the syscalls use <code>libstd</code> directly; however, some of the more intricate calls (looking at <code>path_*</code> syscalls in particular), are an example of handle-oriented API which Rust <code>libstd</code> simply doesn't provide. Rust's <code>libstd</code> is predominantly path-oriented, much like all (?) <code>libc</code>s out there. Therefore, for those, it seemed appropriate to use POSIX equivalents directly on *nix such as <code>fstatat</code> as opposed to <code>fstat</code> for instance (the latter being bound to by <code>libstd</code> in appropriate calls). However, our Windows implementation still relies mainly on <code>libstd</code> which a few exceptions such as figuring out the file type, etc. I hope that makes sense. Lemme know if anything is unclear and I'll hopefully be able to shed some more light on! :-)</p>",
        "id": 198684435,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1590423685
    },
    {
        "content": "<p>Oh, and to provide an even fuller context, we used to use <code>nix</code> crate on *nixes, but it was basically too big for our purposes, plus it was defining/binding stuff we simply would never support. Oh, and at the time of writing, it didn't really cross-compile to <code>wasm32-unknown-emscripten</code>, which is a bit of a pain. Hence, we decided we'd rather focus on a more tailored to our use case, in-house crate, hence <code>yanix</code> was born ;-)</p>",
        "id": 198684659,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1590423848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263195\">@Jakub Konka</span> Thanks for that detail answer. I guess I need some guidance here. I am in the process of implementing WASI equivalents for <code>getaddrinfo</code>, <code>connect</code>, <code>setsockopt</code>, etc. Basic outbound socket connections (no <code>listen</code>/<code>bind</code> yet). I am unsure as to if I should use Rust std or libc for them. Socket are handle oriented, so I am guessing I need to implement them in <code>libc</code>. <code>getaddrinfo</code> can be an exception here and could be implemented in Rust std I guess since it doesn't deal with handles at all.</p>",
        "id": 198684697,
        "sender_full_name": "Emiliano Lesende",
        "timestamp": 1590423894
    },
    {
        "content": "<p>Oh, right, gotcha! Uhm, so first of, I'll be more than happy to answer any questions, and provide any necessary guidance. Secondly, I'd start off with trying to offload as much to <code>libstd</code> as possible, and if we basically bump into a wall that needs some host-specific addressing, then we can add the necessary bindings to <code>yanix</code>/<code>winx</code>. Does that make sense?</p>",
        "id": 198684960,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1590424070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263195\">@Jakub Konka</span> Makes sense. Thanks again.</p>",
        "id": 198685834,
        "sender_full_name": "Emiliano Lesende",
        "timestamp": 1590424728
    },
    {
        "content": "<p>Sure thing! Fire away if something is still unclear or you'd like to discuss something!</p>",
        "id": 198685892,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1590424792
    }
]