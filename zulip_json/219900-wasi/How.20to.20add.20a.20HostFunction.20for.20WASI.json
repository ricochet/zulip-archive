[
    {
        "content": "<p>Hi, I'm playing with my own wasm libc, and want to add a new HostFunction to maybe <code>wasi_snapshot_preview1</code> for testing purpose. What are the steps should be taken?</p>\n<p>Seems like I need to change <code>wasi_snapshot_preview1.witx</code> and also update these two lists?<br>\n<a href=\"/user_uploads/15107/MMCRsVbgOXZ4T3bVwgaPF9zW/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/MMCRsVbgOXZ4T3bVwgaPF9zW/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/MMCRsVbgOXZ4T3bVwgaPF9zW/image.png\"></a></div>",
        "id": 444545205,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1718306876
    },
    {
        "content": "<p>Can you clarify what you mean by \"HostFunction\"?</p>",
        "id": 444546659,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307346
    },
    {
        "content": "<p>Oh sorry, I just mean functions like <code>fd_write</code> and <code>path_open</code>, the functions provisioned by the runtime and can be imported in the wasm module.</p>",
        "id": 444547651,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1718307663
    },
    {
        "content": "<p>You'll probably want to use <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html#method.func_wrap\">https://docs.rs/wasmtime/latest/wasmtime/struct.Linker.html#method.func_wrap</a>.  I'd recommend <em>not</em> using the <code>wasi_snapshot_preview1</code> namespace for new functions not defined as part of WASIp1.  Instead, just make up your own module name, like <code>nyu_wasm_experiment</code> or whatever.</p>",
        "id": 444548407,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718307952
    },
    {
        "content": "<p>Thanks, will go with that. Btw, why in the source code of preview1, all the <code>fd_write</code> <code>path_open</code> functions are \"async\"? I thought these IO operations are usually to be blocking by default.</p>",
        "id": 444551457,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1718309085
    },
    {
        "content": "<p>Do you mean the implementations in the <code>wasmtime-wasi</code> crate?</p>",
        "id": 444551731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718309167
    },
    {
        "content": "<p>Functions like <code>fd_write</code> should block the <em>guest</em> but not block the <em>host</em>.  So <code>wasmtime-wasi</code> makes them async, allowing the <code>fd_write</code> implementation to yield and allow the host to do other work while the write is happening.</p>",
        "id": 444551774,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718309184
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/How.20to.20add.20a.20HostFunction.20for.20WASI/near/444551731\">said</a>:</p>\n<blockquote>\n<p>Do you mean the implementations in the <code>wasmtime-wasi</code> crate?</p>\n</blockquote>\n<p>Yeah yeah!</p>",
        "id": 444552111,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1718309304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> Oh yeah, this makes perfect sense thanks!</p>",
        "id": 444552169,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1718309327
    },
    {
        "content": "<p>basically the two functions add_to_linkers_{sync,async} expose the exact same host functionality to two different ways of using the wasmtime engine - if you use the sync option, that means you use plain old <code>.instantiate</code> and <code>.call</code>functions to invoke wasmtime, async means you use <code>.instantiate_async</code> and <code>.call_async</code> which are <code>async fn</code></p>",
        "id": 444552422,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718309421
    },
    {
        "content": "<p>(those being the methods on a Module or Component, and the instances)</p>",
        "id": 444552499,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718309447
    },
    {
        "content": "<p>but internally, the host functions that the wasm calls out to are fundamentally async rust. if you use them from a sync context, the sync add_to_linker just performs a little wrapping that uses an ambient tokio runtime to <code>block_on</code>, which takes an <code>async fn</code> and executes it as a <code>fn</code> (to a first approximation)</p>",
        "id": 444552713,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718309525
    },
    {
        "content": "<p>this is my hobby horse, that the whole crux of wasi is scheduling, because it was hard and i worked on it for way too long. you probably dont have to care about it</p>",
        "id": 444552834,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718309607
    },
    {
        "content": "<p>Yeah thank you for the details. I see, the options depends on if we want to use wasmtime engine synchronously or not. And to the _guest_, i.e. the caller wasm module, these are all blocking.</p>",
        "id": 444556440,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1718310841
    }
]