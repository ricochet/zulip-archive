[
    {
        "content": "<p>I'm recently trying to upgrade from wasmtime-cli 17.0.0 (7201935fc 2023-12-14) to wasmtime-cli 20.0.0 (c6d923ae3 2024-03-21), the current Wasmtime main branch.</p>\n<p>This includes upgrading my wasi-http from wasi:http@0.2.0-rc-2023-12-05 to wasi:<a href=\"mailto:http@0.2.0\">http@0.2.0</a>.</p>\n<p>I have a simple get request function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Request</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"n\">url</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">headers</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Response</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">authority</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path_with_query</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Request</span>::<span class=\"n\">parse_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">additional_headers</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">add_headers</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">headers</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">add_headers</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">additional_headers</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">((</span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">into_bytes</span><span class=\"p\">()));</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"n\">http</span>::<span class=\"n\">request</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">Method</span>::<span class=\"n\">Get</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">scheme</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">authority</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">path_with_query</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">additional_headers</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>which utilizes <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/http.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/http.rs</a>. I've taken a look and there appear to be virtually no changes to this file between versions.</p>\n<p>However now when I make a get request, the code hangs here in <a href=\"http://http.rs\">http.rs</a> with no errors returned:   </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">incoming_response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">future_response</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"response already taken\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pollable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">future_response</span><span class=\"p\">.</span><span class=\"n\">subscribe</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">pollable</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">future_response</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"incoming response available\"</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"response already taken\"</span><span class=\"p\">))</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>I am using <code>wit-bindgen = { version = \"0.18.0\", default-features = false, features = [\"realloc\"] }</code></p>\n<p>I have a pretty extensive test suite and all http requests are failing since upgrading my Wasmtime and wit file versions to current main, however can confirm that they all pass in the previous version. Any ideas on what could be causing this would be much appreciated?</p>",
        "id": 428323530,
        "sender_full_name": "Gareth",
        "timestamp": 1711111957
    },
    {
        "content": "<p>Would you be able to share an example to reproduce this perhaps?</p>",
        "id": 428342369,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711117865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/Wasi-http.20requests.20hang/near/428342369\">said</a>:</p>\n<blockquote>\n<p>Would you be able to share an example to reproduce this perhaps?</p>\n</blockquote>\n<p>Sure Alex, here's  an example that reproduces the issue : <a href=\"https://github.com/GarethEgerton/http_wasmtime\">https://github.com/GarethEgerton/http_wasmtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/GarethEgerton/http_wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/16f5ad5ab5bff9a36e75ad5dab0c75b36edd0918\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363434343561356436323534303361326338613838613639313835656336356634653836323739643363346135623339616639393863633537306264633533632f47617265746845676572746f6e2f687474705f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/GarethEgerton/http_wasmtime\" title=\"GitHub - GarethEgerton/http_wasmtime: Testing wasi-http in wasmtime\">GitHub - GarethEgerton/http_wasmtime: Testing wasi-http in wasmtime</a></div><div class=\"message_embed_description\">Testing wasi-http in wasmtime. Contribute to GarethEgerton/http_wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 428373081,
        "sender_full_name": "Gareth",
        "timestamp": 1711126547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"686440\">@Gareth</span> can you clarify what the failure mode for that looks like? Running that project with 17 and 19 the program doesn't hang for me</p>",
        "id": 428397767,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711136081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/Wasi-http.20requests.20hang/near/428397767\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"686440\">Gareth</span> can you clarify what the failure mode for that looks like? Running that project with 17 and 19 the program doesn't hang for me</p>\n</blockquote>\n<p>Oh really, did you run it from the wasmtime binary that was in my repo? I built this from wasmtime main using <code>cargo build --features component-model,wasi-nn,wasi-http</code>.  I'm using cargo-component version 0.8.0, not sure if this has any effect. </p>\n<p>The output I get when running is: <br>\n<a href=\"/user_uploads/15107/iDiPopMJ4YRX0tNRiOj46EWR/image.png\">image.png</a><br>\nWith no errors, just hangs here indefinitely.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/iDiPopMJ4YRX0tNRiOj46EWR/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/iDiPopMJ4YRX0tNRiOj46EWR/image.png\"></a></div><p>I've just tried using wasmtime-v19.0.0-x86_64-linux.tar and this did run to completion, thanks :)   I'm just wondering what would be the difference and why it didn't work when I compiled wasmtime myself?</p>",
        "id": 428405301,
        "sender_full_name": "Gareth",
        "timestamp": 1711139471
    },
    {
        "content": "<p>I didn't use the binary in the repo, no (sorry wasn't able to verify it was something I should run)</p>\n<p>I used the wasmtime release binaries of 17/19 to test that</p>",
        "id": 428405865,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711139765
    },
    {
        "content": "<p>and yeah it prints more after \"Runs up to incoming_response and then hangs\" for me</p>",
        "id": 428405943,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711139802
    },
    {
        "content": "<p>you may want to try updating cargo-component? and/or wit-bindgen?</p>",
        "id": 428406041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711139858
    },
    {
        "content": "<p>I think there's been a few bug fixes which may affect this</p>",
        "id": 428406056,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711139867
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/Wasi-http.20requests.20hang/near/428405865\">said</a>:</p>\n<blockquote>\n<p>I didn't use the binary in the repo, no (sorry wasn't able to verify it was something I should run)</p>\n<p>I used the wasmtime release binaries of 17/19 to test that</p>\n</blockquote>\n<p>That makes sense :)  Have tried to run my full project with this v19 of wasmtime and the issue is that I need to use wasi-nn for onnx inference, so I think I need to compile wasmtime myself to include wasi-nn in the wasmtime binary.  </p>\n<p>I was using the example of onnx runtime with wasi-nn here as my basis  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-nn/examples/classification-component-onnx/Cargo.toml\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-nn/examples/classification-component-onnx/Cargo.toml</a> as a base, this uses wit-bindgen version 0.16.0, but up to 0.18.0 works for me. If I increase the wit bindgen version any higher, I get other errors: </p>\n<p>error[E0599]: no function or associated item named <code>into_handle</code> found for struct <code>Resource&lt;_&gt;</code> in the current scope<br>\n     --&gt; src/bindings.rs:11963:38<br>\n      |<br>\n11963 |           wit_bindgen::rt::Resource::into_handle(self.handle)<br>\n      |                                      ^^^^^^^^^^^ function or associated item not found in <code>Resource&lt;_&gt;</code></p>",
        "id": 428406762,
        "sender_full_name": "Gareth",
        "timestamp": 1711140199
    },
    {
        "content": "<p>ah yes, you'll need to compile from source to have onnx</p>",
        "id": 428406946,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711140279
    },
    {
        "content": "<p>I think that may be a case where cargo-component is generating the bindings for you and it's getting out of sync with the wit-bindgen bindings perhaps?</p>",
        "id": 428406981,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711140303
    },
    {
        "content": "<p>I'll admit though I don't know exactly what cargo-component does to manage src/bindings.rs for you</p>",
        "id": 428407010,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711140318
    },
    {
        "content": "<p>Yeah that makes sense that these could be out of sync... I also tried upgrading to latest cargo component 0.10.1 , with latest </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.22.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"realloc\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">rt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.22.0\"</span>\n</code></pre></div>\n<p>When I try and compile I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span>#<span class=\"n\">run</span><span class=\"err\">`</span>\n</code></pre></div>",
        "id": 428407652,
        "sender_full_name": "Gareth",
        "timestamp": 1711140647
    },
    {
        "content": "<p>if you're running a command with a <code>main</code> function you'll want to remove <code>[lib]</code> in your <code>Cargo.toml</code>, rename <code>src/lib.rs</code> to <code>src/main.rs</code>, and add a <code>fn main() {}</code></p>",
        "id": 428408328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711140988
    },
    {
        "content": "<p>oh sorry, no disregard that</p>",
        "id": 428408356,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711141008
    },
    {
        "content": "<p>well, what you're doing right now is an alternative to all of that</p>",
        "id": 428408376,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711141017
    },
    {
        "content": "<p>with the new version of wit-bindgen you'll need to do <code>export!(Component);</code></p>",
        "id": 428408402,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711141031
    },
    {
        "content": "<p>or some macro name, I forget the exact name</p>",
        "id": 428408412,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711141036
    },
    {
        "content": "<p>Please see the release notes for breaking changes: <a href=\"https://github.com/bytecodealliance/cargo-component/releases/tag/v0.9.0\">https://github.com/bytecodealliance/cargo-component/releases/tag/v0.9.0</a> (there's no breaking changes in 0.10.0)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/releases/tag/v0.9.0\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ea705d9e144f4f0e329c446384926827109b9b9e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383530636664303933613661613466666230383937366533383238653236336565333035373739313433666538393438363035306364653032306562336433342f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f72656c65617365732f7461672f76302e392e30)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/releases/tag/v0.9.0\" title=\"Release v0.9.0 · bytecodealliance/cargo-component\">Release v0.9.0 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">⚠️ Breaking Changes ⚠️\nThere are a few breaking changes in this release that impact existing cargo-component projects.\nThe reintroduction of the export! macro\nThe latest generated bindings has rein...</div></div></div>",
        "id": 428409823,
        "sender_full_name": "Peter Huene",
        "timestamp": 1711141781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/Wasi-http.20requests.20hang/near/428408402\">said</a>:</p>\n<blockquote>\n<p>with the new version of wit-bindgen you'll need to do <code>export!(Component);</code></p>\n</blockquote>\n<p>Thanks both for the help :) It looks like this is what I need to implement, <br>\nAdded <code>bindings::export!(Component with_types_in bindings);</code> and this builds now.</p>",
        "id": 428411510,
        "sender_full_name": "Gareth",
        "timestamp": 1711142668
    },
    {
        "content": "<p>you should also no longer need the dep on <code>wit-bindgen</code> (but will need the replacement <code>wit-bindgen-rt</code>)</p>",
        "id": 428412941,
        "sender_full_name": "Peter Huene",
        "timestamp": 1711143404
    },
    {
        "content": "<p>Thanks, this also builds. However I do still have the issue of the http request hanging when I am building Wasmtime myself. But it works when using prebuilt Wasmtime v19.</p>",
        "id": 428413174,
        "sender_full_name": "Gareth",
        "timestamp": 1711143533
    },
    {
        "content": "<p>Thanks again for the help. </p>\n<p>I've been trying further to fix the issue of the http request hanging. As mentioned, when I use v19 Wasmtime compiled here <code>wasmtime-v19.0.0-x86_64-linux.tar</code>,  I can run this project <a href=\"https://github.com/GarethEgerton/http_wasmtime\">https://github.com/GarethEgerton/http_wasmtime</a> and the http get request completes. However when I compile Wasmtime from source, the current main branch, and I've also tried release <a href=\"https://github.com/bytecodealliance/wasmtime/tree/v19.0.0\">https://github.com/bytecodealliance/wasmtime/tree/v19.0.0</a>, my own compiled Wasmtime (which i need for wasi-nn) still has the http request hang. </p>\n<p>I'm wondering if I am not compiling this correctly. The command I am using is <code>cargo build --features component-model,wasi-nn,wasi-http</code> from Wasmtime repo. Can you confirm if this is correct?</p>\n<p>Then to run my wasm module: <code>./bin/wasmtime run --wasi http --wasm component-model target/wasm32-wasi/debug/http_test.wasm</code></p>\n<p>To clarify, I am now using the latest version of cargo component 0.10.1 and <code>wit-bindgen-rt = \"0.22.0\"</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/GarethEgerton/http_wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/16f5ad5ab5bff9a36e75ad5dab0c75b36edd0918\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363434343561356436323534303361326338613838613639313835656336356634653836323739643363346135623339616639393863633537306264633533632f47617265746845676572746f6e2f687474705f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/GarethEgerton/http_wasmtime\" title=\"GitHub - GarethEgerton/http_wasmtime: Testing wasi-http in wasmtime\">GitHub - GarethEgerton/http_wasmtime: Testing wasi-http in wasmtime</a></div><div class=\"message_embed_description\">Testing wasi-http in wasmtime. Contribute to GarethEgerton/http_wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/v19.0.0\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0032ff1acf5e86fc26c2bd6cc253d641adc5f19e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333761316264323065663235646635656138353432343936383638653236363132626530373930373463383063643161636130346530613934633061353962632f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/v19.0.0\" title=\"GitHub - bytecodealliance/wasmtime at v19.0.0\">GitHub - bytecodealliance/wasmtime at v19.0.0</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 429187256,
        "sender_full_name": "Gareth",
        "timestamp": 1711279247
    },
    {
        "content": "<p>Apologies I should have checked <code>main</code> when I only checked the 19.0.0 release. I believe you've found a bug in a recent commit to <code>main</code> which I've posted a fix for at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8229\">https://github.com/bytecodealliance/wasmtime/pull/8229</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8229\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c15f7cd37ba43410d01034e412673c3f289aa9f0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313036336266386233373865636365366364363664616632373865306537323830386533323263643436356239396161636232353234356130626235316635342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38323239)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8229\" title=\"Use a multi-threaded Tokio runtime as a fallback by alexcrichton · Pull Request #8229 · bytecodealliance/wasmtime\">Use a multi-threaded Tokio runtime as a fallback by alexcrichton · Pull Request #8229 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit fixes a bug that was introduced in #8190 and brought up on Zulip. In #8190 there was a subtle change in how Tokio and the CLI are managed, namely that a Tokio runtime is installed at th...</div></div></div>",
        "id": 429236624,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711306461
    },
    {
        "content": "<p>Great, thanks Alex, was able to upgrade and everything is working now :)</p>",
        "id": 429501200,
        "sender_full_name": "Gareth",
        "timestamp": 1711397549
    }
]