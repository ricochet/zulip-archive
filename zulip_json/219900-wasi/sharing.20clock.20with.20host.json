[
    {
        "content": "<p>I am trying to do some measurements where I would like to take a timestamp in the runtime and then relate that to a timestamp in the webassembly code. However, it seems as the CLOCK_REALTIME with <code>clock_gettime</code>  does not return the struct timespec in relation to Epoch as I get much lower value in the WebAssembly code than on the host. </p>\n<p>What would be the best way to get a sane absolute timing measurement from WebAssembly? Should I write host functions for that?</p>",
        "id": 376925280,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1689849155
    },
    {
        "content": "<p>wasmtime's clock_realtime is implemented by the system clock by default - the timestamp should indeed be relative to the unix epoch</p>",
        "id": 377048831,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1689871594
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">phickey</span><span class=\"o\">@</span><span class=\"n\">pch</span><span class=\"o\">-</span><span class=\"n\">tower</span>:<span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"p\">]</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clock_time_get</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clock_time_get</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">fcfcd582d</span><span class=\"o\">..</span><span class=\"n\">de2f7bf0b</span><span class=\"w\"> </span><span class=\"mi\">100644</span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clock_time_get</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">clock_time_get</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test_clock_time_get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"c1\">// clock_res_get is where information about precision can be provided.</span>\n<span class=\"w\">     </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_MONOTONIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"precision 1 should work\"</span><span class=\"p\">);</span>\n\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first_time</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"o\">-</span><span class=\"w\">        </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_MONOTONIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"precision 0 should work\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_MONOTONIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"precision 0 should work\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"monotonic 1: {m1:?}\"</span><span class=\"p\">);</span>\n\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_MONOTONIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"re-fetch time should work\"</span><span class=\"p\">);</span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">first_time</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">time</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"CLOCK_MONOTONIC should be monotonic\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_MONOTONIC</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"re-fetch time should work\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">m1</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">m2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"CLOCK_MONOTONIC should be monotonic\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"monotonic 2: {m2:?}\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_REALTIME</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"realtime precision 1 should work\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"realtime 1: {r1:?}\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"n\">wasi</span>::<span class=\"n\">clock_time_get</span><span class=\"p\">(</span><span class=\"n\">wasi</span>::<span class=\"n\">CLOCKID_REALTIME</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"realtime precision 0 should work\"</span><span class=\"p\">);</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"realtime 2: {r2:?}\"</span><span class=\"p\">);</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"p\">[</span><span class=\"n\">phickey</span><span class=\"o\">@</span><span class=\"n\">pch</span><span class=\"o\">-</span><span class=\"n\">tower</span>:<span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"p\">]</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">test_programs</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">cap</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">clock_time_get</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">nocapture</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.17</span><span class=\"n\">s</span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">cap</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"n\">sync</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">phickey</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">wasi_cap_std_sync</span><span class=\"o\">-</span><span class=\"mi\">340</span><span class=\"n\">d657262687994</span><span class=\"p\">)</span>\n\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"n\">preopen</span>: <span class=\"nc\">TempDir</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/tmp/wasi_cap_std_sync_clock_time_get_ExKBMv\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">monotonic</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"mi\">1226758002</span>\n<span class=\"n\">monotonic</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"mi\">1226815901</span>\n<span class=\"n\">realtime</span><span class=\"w\"> </span><span class=\"mi\">1</span>: <span class=\"mi\">1689872051387151567</span>\n<span class=\"n\">realtime</span><span class=\"w\"> </span><span class=\"mi\">2</span>: <span class=\"mi\">1689872051387163937</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">clock_time_get</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">finished</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">1.23</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 377051016,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1689872073
    },
    {
        "content": "<p><code>1689872051387151567</code> is GMT: Thursday, July 20, 2023 4:54:11.387 PM</p>",
        "id": 377051243,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1689872130
    },
    {
        "content": "<p>Thanks, There is, however, something strange happening. Here is a sample output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">✔</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">wabench</span><span class=\"o\">/</span><span class=\"n\">calibrate</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Timestamps</span><span class=\"w\"> </span><span class=\"err\">↓·</span><span class=\"mi\">7</span><span class=\"o\">|</span><span class=\"err\">✚</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"err\">…</span><span class=\"mi\">2</span><span class=\"err\">⚑</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"mi\">19</span>:<span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">calibrate</span>\n<span class=\"n\">Read</span><span class=\"w\"> </span><span class=\"n\">time</span>: <span class=\"mi\">1689873255</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">858222508</span>\n<span class=\"n\">Read</span><span class=\"w\"> </span><span class=\"n\">millis</span>: <span class=\"mi\">1689873255000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">858</span>\n<span class=\"err\">✔</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">wabench</span><span class=\"o\">/</span><span class=\"n\">calibrate</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Timestamps</span><span class=\"w\"> </span><span class=\"err\">↓·</span><span class=\"mi\">7</span><span class=\"o\">|</span><span class=\"err\">✚</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"err\">…</span><span class=\"mi\">2</span><span class=\"err\">⚑</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"mi\">19</span>:<span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">calibrate</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Read</span><span class=\"w\"> </span><span class=\"n\">time</span>: <span class=\"mi\">1689873258</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"n\">Read</span><span class=\"w\"> </span><span class=\"n\">millis</span>: <span class=\"mi\">1951110672</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">732</span>\n</code></pre></div>\n<p>The row beginning with \"Read time\" prints the values of ts.tv_sec and ts.tv_nsec.  They look reasonable in both cases except that the nsec value is 0 when running in wasmtime.<br>\nIn the row beginning with \"Read millis\" I am multiplying seconds with 1000 and dividing nanoseconds with 1000000 to get milliseconds. The idea is to add them to get a millisecond value of time. However, the multiplication of seconds doesn't seem to be made for the seconds value and weirdly enough although the nano seconds value is 0, I get some value when dividing with 1000000. I am assuming this has something to do with limited bit-field values in WebAssembly.</p>",
        "id": 377058124,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1689873623
    },
    {
        "content": "<p>i dont know what a limited bit field value in webassembly would be. wasi is passing the timestamp as a u64 of nanoseconds to the guest, and as shown in my print those nanoseconds have non-zero digits all the way down</p>",
        "id": 377061219,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1689874277
    },
    {
        "content": "<p>I found the issue. In C for WASI <code>time_t</code> has to be <code>long long</code> while it was sufficient for it to be <code>long</code> on an x64 platform.</p>",
        "id": 377202084,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1689925397
    },
    {
        "content": "<p>glad you found that; doc it somewhere!</p>",
        "id": 377224402,
        "sender_full_name": "Ralph",
        "timestamp": 1689930493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506554\">@Mats Brorsson</span>, I ran across something similar recently: does wasi-libc need this updated type?</p>",
        "id": 377425558,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1689972734
    }
]