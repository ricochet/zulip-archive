[
    {
        "content": "<p>We wanted to implement basic WASI functionality into the <code>wasmi</code> Wasm interpreter to make it more useful to people outside of our bubble. We found that the <code>wasi-common</code> crate was a perfect building ground for this WASI implementation. Always great to reuse previous work instead of reinventing the wheel all over. The README also reads that it is meant as a general WASI implementation and non-runtime specific. However, with this recent commit (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/0290a83502d3778d460a6ee131294603bd575efd\">https://github.com/bytecodealliance/wasmtime/commit/0290a83502d3778d460a6ee131294603bd575efd</a>) this is no longer the case since <code>wiggle</code> now hard depends on Wasmtime and since <code>wasi-common</code> builds on <code>wiggle</code> now <code>wasi-common</code> is actually a Wasmtime specific WASI implementation.</p>\n<p>We already have a <code>wasmi-wasi</code> implementation based on <code>wiggle</code> and <code>wasi-common</code> (<a href=\"https://github.com/paritytech/wasmi/tree/master/crates/wasi\">https://github.com/paritytech/wasmi/tree/master/crates/wasi</a>) but since those will hard-depend on Wasmtime it is no longer a really useful building block for us. Did I get this right or have I overlooked something? What would you guys recommend us at <code>wasmi</code> side to do ideally? The next best thing I see is to fork <code>wasi-common</code> and perhaps <code>wiggle</code> and make them <code>wasmi</code> specific but that would be a very similar amount of maintenance work than to have our own WASI implementation.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/0290a83502d3778d460a6ee131294603bd575efd\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bbaa851d7752bc2539a464a4222360c50324196f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656630303163316165336533323938333063326232633065386238386231613638646364333135646536356337316330303839313832633731383962343166652f62797465636f6465616c6c69616e63652f7761736d74696d652f636f6d6d69742f30323930613833353032643337373864343630613665653133313239343630336264353735656664)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/0290a83502d3778d460a6ee131294603bd575efd\" title=\"wiggle: make wasmtime a mandatory dep, get rid of own Trap enum (#5137) · bytecodealliance/wasmtime@0290a83\">wiggle: make wasmtime a mandatory dep, get rid of own Trap enum (#5137) · bytecodealliance/wasmtime@0290a83</a></div><div class=\"message_embed_description\">* wiggle: no longer need to guard wasmtime integration behind a feature\r\n\r\nthis existed so we could use wiggle in lucet, but lucet is long EOL\r\n\r\n* replace wiggle::Trap with wiggle::wasmtime_crate:...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/paritytech/wasmi/tree/master/crates/wasi\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0e785d72a65bc99fbbadb0403adc85116ff924b6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333566336537393235306239663964633636613464323862346233363263656639366433623366633930376261646563376534613861366139313239616137312f706172697479746563682f7761736d69)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/paritytech/wasmi/tree/master/crates/wasi\" title=\"wasmi/crates/wasi at master · paritytech/wasmi\">wasmi/crates/wasi at master · paritytech/wasmi</a></div><div class=\"message_embed_description\">WebAssembly (Wasm) interpreter. Contribute to paritytech/wasmi development by creating an account on GitHub.</div></div></div>",
        "id": 310424189,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1668609345
    },
    {
        "content": "<p>This was intentionally done to clean up the internals of <code>wasi-common</code> and <code>wiggle</code> as supporting multiple runtimes was done for Lucet/Wasmtime but was quite a drag historically. The days of <code>wiggle</code> are also numbered as we're looking to transition to <code>*.wit</code>-based tooling as the WASI standard gets defined in terms of the component model rather than the current <code>*.witx</code>-based definitions</p>",
        "id": 310430929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668611307
    },
    {
        "content": "<p>Not to say that there's not a path to having a <code>wasmtime</code>-less <code>wasi-common</code> again, but it's not clear what such a refactoring would look like to me at least</p>",
        "id": 310431016,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668611338
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> for your reply. So would you agree that <code>wasi-common</code> and <code>wiggle</code> are no longer useful building blocks for other runtimes and therefore we ideally need to build our own WASI implementation from ground up or are there less work-intense alternatives?</p>",
        "id": 310432931,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1668611919
    },
    {
        "content": "<p>I don't believe we have a less work-intensive alternative right now, no</p>",
        "id": 310433081,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668611960
    },
    {
        "content": "<p>okay gotcha, thanks!</p>",
        "id": 310433115,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1668611969
    },
    {
        "content": "<p>Sorry, one thing: As a short term solution it seems that <code>wiggle 1.0.0</code> and <code>wasi-common 1.0.0</code> are the last versions to be non-Wasmtime specific. So I guess it would be the best decision for <code>wasmi</code> for now to build ontop of those outdated versions until we find a better design/idea.</p>",
        "id": 310435866,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1668612613
    },
    {
        "content": "<p>Sorry, I had no idea that there were other users of wiggle and wasi-common. Agree with what Alex said, as we move towards components it’s pretty difficult to see how to keep the implementation and interfaces factored separately. It may be possible again once we get to a steady state but it as we transition it would make things considerably more difficult. If you are happy with the features in wasi-common 1.0 I think that using that package for should be fine, and if you need to fork it to bump dependencies hopefully that isn’t too much trouble</p>",
        "id": 310656158,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1668705059
    },
    {
        "content": "<p>by the time components (with resource types) land in wasi-common, I basically expect the crate to be an adapter between the way various std/cap-std/cap-rand etc crates provide appropriately sandboxed interfaces to syscalls, and the types that WASI uses to specify those interfaces. basically, it will be a bunch of glue to convert back and forth between those types. at that stage, I don't think there will be much logic left in there that is \"runtime independent\" in a meaningful way - the WASI types will be the ones generated by <code>wit-bindgen-host-wasmtime-rust</code> today (that crate will be made part of the <code>wasmtime</code> crate itself soon), and they will be structured according to the exact way the wasmtime component runtime works</p>",
        "id": 310664182,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1668707328
    },
    {
        "content": "<p>the good news is, since cap-std came into being, the really challenging filesystem sandboxing logic is not even wasi-specific anymore. the cap-std family is pretty stable and wont ever grow a dep on any sort of wasi/wasm specific runtime</p>",
        "id": 310664428,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1668707408
    },
    {
        "content": "<p>so, wasmi is welcome of course to continue using wiggle and wasi-common 1.0 as long as it suits you, and fork those as <code>wiggle-wasmi</code>/ <code>wasi-wasmi</code> if/when it becomes necessary. and then if/when you implement a component runtime, I imagine you will end up replacing the wiggle parts with your own wasmi equivalent of  <code>wit-bindgen-host-wasmtime-rust</code>, and at that point the remaining parts of wasi-common will just be that translation layer.</p>",
        "id": 310664967,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1668707572
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> and thanks a lot for your response. Sorry to answer you so lately but I just have not noticed your response until recently. Fortunately we found out that it is even possible to use <code>wasi-common</code> and <code>wiggle</code> version <code>2.0.0</code> but we are going to have to stay on those versions for some time. I agree with your roadmap and vision and I can totally understand the decision of the BytecodeAlliance to make <code>wiggle</code> and other WASI related crate Wasmtime specific. Your tech stack is already complex enough! Until the future that you envisioned in your response exists we are probably going to do what you suggested with forking <code>wiggle</code> and <code>wasi-common</code> and hope that maybe in the far future we can have a common shared base implementation again. :)</p>",
        "id": 311553404,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1669110023
    }
]