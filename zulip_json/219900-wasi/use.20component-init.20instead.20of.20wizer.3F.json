[
    {
        "content": "<p>I was wondering whether I should use <a href=\"https://github.com/dicej/component-init\">https://github.com/dicej/component-init</a> instead of wizer for my project, is component-init meant to stay or is that a temporary proof of concept repo?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/component-init\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4b10a7b3f222ab5ff1ab486cef8d9b1882158e77\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626365633331666331626231316266323535613336343839666533313065643262616433323963656363346631376163383331346430656533646134626137392f646963656a2f636f6d706f6e656e742d696e6974)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/component-init\" title=\"GitHub - dicej/component-init: WebAssembly Component Pre-initializer\">GitHub - dicej/component-init: WebAssembly Component Pre-initializer</a></div><div class=\"message_embed_description\">WebAssembly Component Pre-initializer. Contribute to dicej/component-init development by creating an account on GitHub.</div></div></div>",
        "id": 378108599,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690199590
    },
    {
        "content": "<p>I'll try using it and see how far I get :)</p>",
        "id": 378111085,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690199999
    },
    {
        "content": "<p>I wrote that specifically for <a href=\"https://github.com/dicej/componentize-py\">https://github.com/dicej/componentize-py</a>, but <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> is interested in using it elsewhere, so I moved it into its own repo.  So yes, it's meant to stay and evolve into something more general.  Let me know if I can help make it work better for your use case.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/componentize-py\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/afa1dd8816ef3bcb73be472d52a0195a57f9de4e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323364356563306632356136353162343730633061666438666130653863633064643832666539376639306665663238613162383066326663613764303362352f646963656a2f636f6d706f6e656e74697a652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/componentize-py\" title=\"GitHub - dicej/componentize-py\">GitHub - dicej/componentize-py</a></div><div class=\"message_embed_description\">Contribute to dicej/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 378161482,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690208391
    },
    {
        "content": "<p>thank you for answering :)<br>\nso the product I want to port to wasm consists of a python library for legacy reasons and customer-facing js.<br>\nI got rquickjs to compile for wasi with a few patches and used wlr-libpy to get pyo3 linked too, I tried to use the same approach as the main branch of componentize-py for my module but I got stuck at preopening the Dir, my wizer.initialize function does not see the mapped directories, so I thought maybe it's better to switch to the component model too</p>\n<p>the wasm component is already statically linked so I think I only need to adapt the component and then basically use component_init as in the componentize-py snapshot branch, I think?</p>",
        "id": 378164875,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690208946
    },
    {
        "content": "<p>Not sure why your wizer.initialize function couldn't see the mapped directories -- I've never had an issue with that.  You might want to double-check that you configured Wizer correctly (i.e. used <code>Wizer::map_dir</code> and specified the correct guest path(s)).</p>",
        "id": 378175692,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690210934
    },
    {
        "content": "<p><a href=\"https://github.com/dicej/componentize-py/blob/main/src/lib.rs#L152\">https://github.com/dicej/componentize-py/blob/main/src/lib.rs#L152</a><br>\nI tried to do exactly what the main branch does here</p>",
        "id": 378176220,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690211030
    },
    {
        "content": "<p>oh also, is my assumption correct that wizer or component-init includes the preopened files in the final output component? Or does that happen somewhere else?</p>",
        "id": 378177020,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690211164
    },
    {
        "content": "<p>Yeah, <code>componentize-py</code>'s main branch uses a hacky workaround for the fact that Wizer doesn't provide fine-grained control over the WASI context.  Specifically, I wanted specific control over the set of environment variables passed to the guest, whereas Wizer only provides an <code>inherit_env</code> function.  But yeah, that hack should work in your case, too.</p>\n<p>Regarding preopened files: neither Wizer nor component-init will make the preopened files available in the output -- you need to use e.g. <code>wasi-vfs</code> (or <code>wasi-virt</code>, when it's ready) for that.  <code>componentize-py</code> is currently cheating a little by assuming that the app being pre-initialized will read and parse all the files it needs during pre-init and not need to read from the filesystem again at runtime (or at least not from the same set of files that were available during pre-init).  That won't work in general, so eventually I expect <code>componentize-py</code> will use <code>wasi-virt</code>.</p>",
        "id": 378179844,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690211673
    },
    {
        "content": "<p>ah ok, so to get my current thing running I need to provide the dir to be mapped during runtime but I'll definitely look into wasi-virt and vfs, thanks a lot, I wouldn't have got this far without your code as reference :)</p>",
        "id": 378180910,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690211859
    }
]