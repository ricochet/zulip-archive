[
    {
        "content": "<p>Perhaps this is obvious in hindsight, but it took me a while to debug in practice:</p>\n<p>I've been working on WASIp2 support for the .NET runtime recently, which is currently based on the WASI 0.2.1 WIT files.  In order to provide an ergonomic <code>async</code>/<code>await</code> experience without creating an API compatibility hazard, we've added a couple of <code>internal</code> functions to the runtime: <code>RegisterWasiPollableHandle</code> (for registering a <code>wasi:io/poll#pollable</code> to be polled when all tasks are blocked) and <code>PollWasiEventLoopUntilResolved</code>(for running the top-level event loop, i.e. running any tasks and polling any <code>pollable</code>s).  Although they are <code>internal</code>, they can be called via the <code>UnsafeAccessor</code> attribute, which allows e.g. <code>wit-bindgen</code>-generated code to call them even though they're not part of the public API.  One consequence of that design is that application code must pass <code>pollable</code> handles as raw integers, which can lead to confusion if the app passes a 0.2.0 <code>pollable</code> handle instead of a 0.2.1 <code>pollable</code> handle; the host (e.g. Wasmtime) treats those as unrelated types and will trap the guest with an <code>unknown handle index</code> error if the former is passed where the latter is expected.</p>\n<p>The issue was easy enough to resolve: update the application code to use 0.2.1 so it matches what the .NET runtime is using.  However, I'm concerned that others may run into this both for .NET and other language toolchains.  It's not going to be obvious to users that <code>unknown handle index</code> traps may mean multiple <code>wasi:io</code> versions are in use, and that the guest confused them somehow, which might, in turn, be due to a mismatch between e.g. the <code>wit-bindgen</code>-generated code they're using (possibly indirectly, via an SDK) and the version their toolchain and/or runtime is using.  And this will become increasingly likely if we release new minor versions every two months or so.</p>\n<p>In hindsight, I wonder if we should have left <code>wasi:io</code> at 0.2.0 indefinitely given its \"special\" status as part of the connective tissue of WASIp2.  The problem will presumably go away with WASIp3, since most or all of <code>wasi:io</code> will be pushed down into the component model ABI, but we need to deal with it in the meantime.</p>\n<p>Wild idea: consider making <code>wasi:io</code> resources of any 0.2.x version interchangeable with other 0.2.x versions.</p>\n<p>Less wild idea: add special support to <code>wasmtime</code> and/or <code>wasmtime-wasi</code> to recognize when the guest has passed a resource handle of the wrong version and provide a detailed diagnostic, e.g. \"expected handle of type <code>wasi:io@0.2.1/poll#pollable</code>; got <code>wasi:io@0.2.0/poll#pollable</code>\".</p>\n<p>For .NET specifically, the core issue is passing handles as integers and thereby losing critical type information, so we'll have to think about how to do that better.  One idea I had was to split <code>RegisterWasiPollableHandle</code> into <code>RegisterWasiPollableHandle_v0_2_0</code>, <code>RegisterWasiPollableHandle_v0_2_1</code>, and so on as new versions are added.  That would help provide early diagnostics in cases where application code is incompatible with the .NET runtime (i.e. catch it in the guest before we get to the host, at which point the only option is to trap).   However, a given build of the .NET runtime could only support at most one of those functions since there's no way for the runtime to poll a mix of pollables of different versions concurrently.  Hence my wild idea above.</p>\n<p>Other thoughts?</p>",
        "id": 469159187,
        "sender_full_name": "Joel Dice",
        "timestamp": 1725988342
    },
    {
        "content": "<p>thanks for documenting this issue. <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  can we teach the resolver to resolve these two pollables to the same resource? I don't think this should even be wasi-specific, I'd hope this would work for any interface/resource thats depended on at a newer version than it was introduced at</p>",
        "id": 469174254,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1725991745
    },
    {
        "content": "<p>i suspect this works for interfaces and functions today but maybe it doesnt for resources?</p>",
        "id": 469174306,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1725991764
    },
    {
        "content": "<p>I think this is not dotnet specific problem, but I'm glad we discovered it soon enough.</p>\n<p>When we generate C# proxies with wit-bindgen, they could be compiled into</p>\n<ul>\n<li>dotnet runtime library (HTTP client, Timers, Sockets, FS, libc)</li>\n<li>be part of 3rd party library in Nuget repository</li>\n<li>be part of the final application.</li>\n</ul>\n<p>Each of those dotnet (inner) components (of single dotnet WASI outer component) could be generated at different time, by different version of wit-bindgen, from different version of the same WIT world.<br>\nEven compiled by different version of C# compiler.</p>\n<p>C#/dotnet is strongly typed language even at runtime. Class of the same namespace and same name in different assembly is not the same type. </p>\n<p>We will be forced to use proxies generated from coherent set of WIT versions.<br>\nIf we want to pass WASI resources between different dotnet (inner) components.<br>\nWe can make that little bit simpler if we generate C# code just once and produce and publish binary dotnet assemblies as Nuget packages, that would be common to all apps.</p>\n<p>That still makes the application development difficult but not impossible. One dotnet app would have to use coherent versions of (transitive) dotnet dependencies.</p>\n<p>The runtime library itself could use different (private) coherent set, given that we don't need to expose WASI resources directly on runtime library C# APIs.</p>\n<p>Right now <code>Pollable</code> is breaching that boundary between application code and dotnet runtime code.<br>\nIt's because we need to block on all <code>pollable</code>s, regardless if they are runtime owned or application owned.<br>\nIt needs to be dotnet runtime function, because of the way how dotnet processes jobs and continuations.</p>\n<p>I still need to learn more about WASIp3 promises, to see what happens when we have their C# proxies generated multiple times.</p>\n<p>For the dotnet context: The reason why <code>RegisterWasiPollableHandle</code> and passing numeric handle is just temporary way ho to solve those strong-typing problems without too much dance about public API contract of the dotnet runtime.<br>\nWhen/if we expose such public APIs eventually, and it would have to be strongly typed and the types would be owned by the dotnet runtime, not by the wit-bindgen or external Nuget.<br>\nAnd it would become backward compatibility burden from that point on, so it's better to postpone that using those trick Joel described.</p>",
        "id": 469184282,
        "sender_full_name": "Pavel Å avara",
        "timestamp": 1725994392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> and I chatted about this a bit today.  Alex suggested that we can update <code>wit-component</code> (and also tools that use it, e.g. <code>wasm-component-ld</code>) to combine imports that span multiple minor versions.  For example, if the input module imports both <code>wasi:io@0.2.0</code> and <code>wasi:io@0.2.1</code>, the output component will only import <code>wasi:io@0.2.1</code>, and that import will satisfy the module-level imports for both versions.  The upshot is that the host will only see one version of that import, in which case the issue above goes away.</p>",
        "id": 469186807,
        "sender_full_name": "Joel Dice",
        "timestamp": 1725994958
    },
    {
        "content": "<p>We use the same strategy for WAC, BTW.  For example: when composing a component that imports <code>wasi:io@0.2.0</code> with one that imports <code>wasi:io@0.2.1</code>, the output component can just import <code>wasi:io@0.2.1</code> and use that to satisfy both inner components' imports.</p>",
        "id": 469187534,
        "sender_full_name": "Joel Dice",
        "timestamp": 1725995160
    },
    {
        "content": "<p>to expand a bit more on what Joel said:</p>\n<blockquote>\n<p>can we teach the resolver to resolve these two pollables to the same resource?</p>\n</blockquote>\n<p>This is basically what we're going to try to do with the subtelty that this is already happening in wasmtime itself but we're going to be changing the component building process to do this and produce a different shape component.</p>\n<blockquote>\n<p>I don't think this should even be wasi-specific</p>\n</blockquote>\n<p>Indeed! The thinking is that this'll be at the generic \"any WIT interface level\" to unify and \"pick the biggest\" in a semver track as part of wit-component when wit-component sees duplicates.</p>\n<blockquote>\n<p>I think this is not dotnet specific problem</p>\n</blockquote>\n<p>Very much agree with this! Was going to be a problem for all other languages and runtimes too.</p>\n<blockquote>\n<p>I still need to learn more about WASIp3 promises, to see what happens when we have their C# proxies generated multiple times.</p>\n</blockquote>\n<p>At least for me WASIp3 is far enough away that I think it's tough to say exactly how it will shape up. The default is probably that it'll be a \"break the world event\", but I also suspect that by the time we get there that won't be suitable so we'll probably need to figure out alternatives to problems like this</p>",
        "id": 469188278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725995290
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1774\">https://github.com/bytecodealliance/wasm-tools/issues/1774</a> for this and I'll try to get that done this week</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1774\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b2b05baffcca89a2e35b56c1282545210d8401a7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396363623266656663393839366635356636663633326461616461303430623136366631336336383861626666396236323634366334633132306532393832642f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31373734&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1774\" title=\"Deduplicate interfaces by version in wit-component instead of importing multiple versions Â· Issue #1774 Â· bytecodealliance/wasm-tools\">Deduplicate interfaces by version in wit-component instead of importing multiple versions Â· Issue #1774 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">For example if wasi:io/poll@0.2.0 and wasi:io/poll@0.2.1 are both imported only import the latter in the final component and use that to satisfy the imports of the core wasm module. Motivated by th...</div></div></div>",
        "id": 469189394,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725995633
    },
    {
        "content": "<blockquote>\n<p>We use the same strategy for WAC, BTW</p>\n</blockquote>\n<p>Meant to say \"We <em>can</em> use...\" here.</p>",
        "id": 469191656,
        "sender_full_name": "Joel Dice",
        "timestamp": 1725996326
    },
    {
        "content": "<p>I've done some work on this this week and I've hit a snag. This is a big enough snag that I don't believe this strategy is going to work out, and I think we may need to readjust other parts of WASI/versioning/etc to accommodate this possibly.</p>\n<p>A basic recap of the problem: within a single component or application we don't want to require that everything is in sync all the time. For example the adapter may use one version of WASI, wasi-libc another, and custom bindings yet another. The concrete case Joel ran into was wasi-libc and the adapter use 0.2.0 and the custom http bindings use 0.2.1. This is a situation we want to work.</p>\n<p>The reason this doesn't work today is because of how components work. The best way to phrase this is that eventually the application is going to want to block. The application, however, is blocking over a set of 0.2.0 and 0.2.1 pollables (e.g. think sockets from wasi-libc and http bits from the custom bindings). There's not actually a function to block over 0.2.0 and 0.2.1 pollables simultaneously, that just doesn't exist.</p>\n<p>The shape of this problem means that the host has little recourse to fix this. The host cannot detect what the guest component is trying to do without violating the semantics one way or another of the component model. This is where the <code>unknown handle index</code> error Joel mentioned came from. That happened because an 0.2.0 pollable index was passed to a function that wants 0.2.1, and Wasmtime raised a trap (according to component model semantics) in this situation.</p>\n<p>This led to the original idea of solving this. Change <code>wasm-component-ld</code> to unify the imports here where only 0.2.1 pollables are imported into the application. The idea though was that this solution would be implemented at the WIT level (where <code>wit-component</code> merges worlds together) rather than being WASI-specific. This brings us to the snag that I have now encountered.</p>\n<p>The basic idea of the solution was that there's an operation in <code>wit_parser::Resolve</code> where worlds are merged together. This happens when you take the world of the adapter, the world of wasi-libc, and the world of the custom bindings, and merge them all together to produce a final world which is what ends up being the interface of the component (e.g. all of what the component could import). This merging operation was where I was hoping to insert logic to say \"ok let's just import 0.2.1, not 0.2.0\"</p>\n<p>In this function though we are now faced with a situation of let's say we're merging worlds A and B. World A has pollable 0.2.0, but it also has <code>wasi:filesystem/types@0.2.0</code>. World B has pollable 0.2.1 and also has <code>wasi:http/types@0.2.1</code>. Note that <code>wasi:{filesystem,http}/types</code> both depend on pollables. GIven this situation it's not actually possible to delete the 0.2.0 pollable import. That breks the import that <code>wasi:filesystem/types@0.2.0</code> has. There's no way to upgrade <code>wasi:filesystem/types@0.2.0</code>. Put another way this situation gives rise to a problem where it's not possible to create a world which is derivative of the actual original WITs.</p>\n<p>Various possible solutions to this:</p>\n<ul>\n<li>\"Just replace 0.2.0 with 0.2.1\". While this would work in this specific case it's also akin to just ignoring versions altogether. I'm worried that this additionally creates worlds which aren't actually connected to WIT at all. Today all component types and such can be traced back to original WIT files but if rewriting happens then that is no longer connected to any WIT files.</li>\n<li>Rewrite the dependency of <code>wasi:filesystem/types@0.2.0</code> to <code>wasi:io/poll@0.2.1</code>. This is similar to the previous point to me where we're inventing WIT that doesn't actually exist. I don't feel that this is the right operation because it's working at the wrong abstraction level.</li>\n<li>Bake custom knowledge of WASI into <code>wasm-component-ld</code>. Basically it would always have the latest copy of WITs for WASI (or maybe all versions? I don't know). That would mean that there's a way to upgrade <code>wasi:filesystem/types@0.2.0</code> to 0.2.1 or whatever version is desired, even if the component doesn't refer to it.</li>\n<li>Consider more radical alternative such as changing what's versioned. Maybe only version functions/types instead of interfaces? This is not really clear to me how it would work though as it would require basically removing versions from the component model.</li>\n<li>Remove versions entirely from WASI? That would solve the issue here because then there's no conflict. In some sense this is along the lines of what we're already doing where everything is basically considered frozen and we can only add things.</li>\n</ul>\n<p>Personally I'm sort of out of ideas. I don't know how best to solve this. Until this is solved though I think we should put the brakes on WASI releases and not release 0.2.2 until we have a strategy for what to do.</p>\n<hr>\n<p>As a small aside, I've realized that this is also a problem with <code>BuildTargets.md</code>, although a bit worse since the core module doesn't even know it's happening. For example the core module might import a poll function for 0.2.0 and 0.2.1 but the actual import string is the same to <code>wasm-ld</code> will deduplicate them into a single import (I think). That then has no way of actually getting routed to the correct <code>wasi:io/poll</code> function which would mean it'd be impossible to componentize the component.</p>\n<p>This in turn sort of gives rise to me thinking that it's not right that functions which all have the same definition are available under multiple versions. That seems to be causing more headaches than it's solving so it may be the crux of what needs solving? Unsure.</p>",
        "id": 470034285,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726254504
    },
    {
        "content": "<p>Half-baked idea: truncate import name versions to the \"semver compatible part\" i.e. <code>0.2.0</code> -&gt; <code>0.2</code>, <code>1.2.3</code> -&gt; <code>1</code> and stick the full version in a <code>names</code>-like custom section.</p>",
        "id": 470039310,
        "sender_full_name": "Lann Martin",
        "timestamp": 1726256867
    },
    {
        "content": "<p>Yeah that was sort of the idea of <code>BuildTargets.md</code> where the truncated name is the actual wasm import name, but bridging the truncation with the semantics of the component model is the problem because the two are mismatched at that point and it's what I'm having trouble resolving</p>",
        "id": 470040471,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726257442
    },
    {
        "content": "<p>IIUC, I think bullet 2 is a principled solution to the problem (or at least I can't yet think of a problem with it).  In particular: when <code>wasi:filesystem/types@0.2.0</code> depends on <code>wasi:io/poll@0.2.0</code> via <code>use</code>, semantically this means that the <code>instance</code>-type defined by <code>wasi:filesystem/types@0.2.0</code> is <em>parameterized</em> by some <em>abstract</em> (unknown) implementation of the <code>wasi:io/poll.pollable@0.2.0</code> semantic contract.  Because semver, we know that <code>wasi:io/poll.pollable@0.2.1</code> must be a valid implementation of the semantic contract of <code>wasi:io/poll.pollable@0.2.0</code> (in the same way that justifies the host in supplying <code>0.2.1</code> to a component that imports <code>0.2.0</code>), so it seems totally valid, in the final resolved C-M <code>component</code> type produced by the merge operation, to have the C-M <code>alias</code> inside the <code>instance</code> type of the imported <code>wasi:filesystem/types@0.2.0</code> resolve to the <code>pollable</code> resource type exported by the imported <code>wasi:io/poll@0.2.1</code> <code>instance</code> type.</p>\n<p>As further supporting details: in the \"standalone\" representation of an <code>interface</code>, the <code>instance</code> type that contains the fields of the <code>interface</code> is wrapped with a <code>component</code> type containing one type <code>import</code> for each <code>use</code>d resource type.  When we resolve multiple interfaces together, these wrapping <code>component</code> types are removed because we are logically performing a <em>substitution</em>, replacing the <code>import</code> in the wrapping <code>component</code> type with the <em>substitution argument</em> determined by the resolution algorithm, and in this case, it so happens that be a resource type from a <code>0.2.1</code> import.  This is really just a special case of the <code>with</code> clause we've discussed (<a href=\"https://github.com/WebAssembly/component-model/pull/308#issuecomment-1969425863\">here</a> and <a href=\"https://github.com/WebAssembly/wasi-http/issues/4#issuecomment-2099126608\">here</a>), which allows not just tweaking version numbers, but replacing a <code>foo</code> with a <code>bar</code> entirely).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/308#issuecomment-1969425863\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0df2733dc7b88d03ae5399fc236ba8aa75b763f1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326238376139386538313662666639313761366333326431393366656235376638366262336336646332356135386361666262313062663930306161333438332f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f333038&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/308#issuecomment-1969425863\" title=\"Split 'use' inside worlds into 'use import' and 'use export' by lukewagner Â· Pull Request #308 Â· WebAssembly/component-model\">Split 'use' inside worlds into 'use import' and 'use export' by lukewagner Â· Pull Request #308 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">This PR proposes to change how use works inside WIT worlds, based on some initial discussion in wit-bindgen/#822.\nCurrently, use can be used with the same syntax in both interfaces and worlds.  For...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/issues/4#issuecomment-2099126608\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cf97c0d752f9ad6cd8a5db01779a852f149c0974/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356363613134613930363366653635303538383536363137353732306165343564383965613432333165333265386362316335366562646363396539383139622f576562417373656d626c792f776173692d687474702f6973737565732f34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/issues/4#issuecomment-2099126608\" title=\"[v0.3] Request metadata Â· Issue #4 Â· WebAssembly/wasi-http\">[v0.3] Request metadata Â· Issue #4 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Original context: #3 (comment) There are certain pieces of metadata that are commonly associated with requests but aren't part of HTTP itself, e.g.: Peer IP address TLS session details (certificate...</div></div></div>",
        "id": 470043752,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1726258931
    },
    {
        "content": "<p>I'm not sure how to square this with all the other tooling we have though. For example right now if you import a resource in an interface you're not importing just any resource with a particular signature but the exact resource from that exact interface at that exact version. The interface can then be satisfied with whatever, but from a WIT-to-component-model-and-back perspective I don't understand how the version would be optional in a sense.</p>\n<p>What I'm worried about is that if you were to infer the WIT from such a component where substitution occurred you'd see that wasi:filesystem/types would import from wasi:io/poll@0.2.1, which to me feels weird in that it's creating something that no one ever wrote down anywhere. I'm worried that it'll have knock-on effects that we can't predict at this time and causes even more trouble down the road</p>",
        "id": 470044856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726259477
    },
    {
        "content": "<p>I think it's ok for the operation of \"resolving WIT together into a final C-M <code>component</code> type\" to be a lossy operation that essentially loses what you wrote in the <code>use</code>.  (This was already true since dead-code elimination is allowed to delete unused imports.)  If you want to see the original WIT that produce some <code>(import \"ns:foo/bar\" (instance ...))</code>, you just have to go fetch the WIT package <code>ns:foo</code> and to find the full <code>bar</code> type.</p>",
        "id": 470045516,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1726259835
    },
    {
        "content": "<p>Just to sketch out what I'm imagining the resolved C-M type to be to see if we're imagining the same thing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"cp\">$Resolved</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi:io/poll@0.2.1\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"cp\">$poll</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"pollable\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"cp\">$P</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">sub</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"cp\">$poll</span><span class=\"w\"> </span><span class=\"s\">\"pollable\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"cp\">$pollable</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi:filesystem/types@0.2.0\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">outer</span><span class=\"w\"> </span><span class=\"cp\">$Resolved</span><span class=\"w\"> </span><span class=\"cp\">$pollable</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"cp\">$pollable</span><span class=\"o\">'</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"some-operation\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">borrow</span><span class=\"w\"> </span><span class=\"cp\">$pollable</span><span class=\"o\">'</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>So here, you get to see the original imported versions of <code>wasi:io/poll</code> and <code>wasi:filesystem/types</code>, and it's only the aliases that cross the chasm.  And indeed the fact that <code>use wasi:io/poll@0.2.0.{pollable}</code> was written was lost, but I think that's unavoidably lost by the abovementioned substitution (and for more reasons, in general, than just this one relating to versioning, once we have <code>with</code>).</p>",
        "id": 470046767,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1726260469
    },
    {
        "content": "<p>(I have to head out in a bit, but happy to discuss more next week!)</p>",
        "id": 470047012,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1726260596
    },
    {
        "content": "<p>oh that's a good point about dead code elimitation already causing WITs to diverge</p>",
        "id": 470640327,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726499129
    },
    {
        "content": "<p>ok I'll work on getting this route implemented</p>",
        "id": 470640465,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726499153
    },
    {
        "content": "<p>Also, on a somewhat orthogonal note, if others are interested in this thread I opened up <a href=\"https://github.com/WebAssembly/component-model/issues/395\">https://github.com/WebAssembly/component-model/issues/395</a> after some discussions last week to assist in debugging the original issue in this thread by tweaking the component model ABI semantics to enable better error messages from the host</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/395\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/35e73863ac6f98d0c07a5a7e48659a811d005473/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383566353434353163623439653161376463653235373434636433613761353338653536343538633338373362656232663033386333326435383564326131382f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f333935&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/395\" title=\"Relax requirements on assigning integers to resource handles Â· Issue #395 Â· WebAssembly/component-model\">Relax requirements on assigning integers to resource handles Â· Issue #395 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">Currently in the canonical ABI resources (own&lt;T&gt; and borrow&lt;T&gt;) are required to strictly follow the specification in terms of how integers are assigned to handles as they are created. Specifically ...</div></div></div>",
        "id": 470648471,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726500852
    },
    {
        "content": "<p>I tried this with the latest wasi-sdk packaged from <a href=\"https://github.com/WebAssembly/wasi-sdk/actions/runs/11129514597\">https://github.com/WebAssembly/wasi-sdk/actions/runs/11129514597</a> with wasmtime 25.  And I am still getting </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"p\">:</span>\n<span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mh\">0xe28ffb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">shim</span><span class=\"o\">!</span><span class=\"n\">indirect</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">@</span><span class=\"mf\">0.2.1</span><span class=\"o\">-</span><span class=\"n\">poll</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>Part of the code is using wasi-lic which still uses 0.2.0. Other parts are generated from wit-bindgen  with 0.2.1.   </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">VERSION</span>\n<span class=\"mf\">24.9</span><span class=\"n\">gcec5cf4f6cf3</span>\n<span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">libc</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">b19fc65ad84</span>\n<span class=\"n\">llvm</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">a4bf6cd7cfb1</span>\n<span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">version</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">19.1.0</span>\n<span class=\"n\">config</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">f992bcc08219</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sdk/actions/runs/11129514597\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7e6d4b8915a165b9fd83db877bdeefc576788eb3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613238336663333534613363326164323933646334623962636139326139386363353533326532623336306339353938666133346362646334363635393865322f576562417373656d626c792f776173692d73646b&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sdk/actions/runs/11129514597\" title=\"Update wasm-component-ld to 0.5.9 (#491) Â· WebAssembly/wasi-sdk@cec5cf4\">Update wasm-component-ld to 0.5.9 (#491) Â· WebAssembly/wasi-sdk@cec5cf4</a></div><div class=\"message_embed_description\">WASI-enabled WebAssembly C/C++ toolchain. Contribute to WebAssembly/wasi-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 475304488,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728309600
    },
    {
        "content": "<p>Would you please post the .wasm file that's giving you that error backtrace?</p>",
        "id": 475305076,
        "sender_full_name": "Joel Dice",
        "timestamp": 1728309744
    },
    {
        "content": "<p>sorry for the delay, <br>\n<a href=\"/user_uploads/15107/oHyQeUQOnTAP189BmXMOhQeQ/dotnet.wasm\">dotnet.wasm</a></p>",
        "id": 475364073,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728325853
    },
    {
        "content": "<p>interestingly, When I try to build a single binary I get: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">output</span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">duplicate</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"mi\">31</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">already</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x8c3e9f</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Which seems to be related if I understand properly</p>",
        "id": 475364188,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728325910
    },
    {
        "content": "<p>In that component I see <code>(processed-by \"wit-component\" \"0.215.0\")</code> for <code>@producers</code>, so I think there's a tooling/version mismatch in production there?</p>",
        "id": 475364430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728325996
    },
    {
        "content": "<p>(it should be 217 for the fix)</p>",
        "id": 475364460,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728326007
    },
    {
        "content": "<p>er, 218 is the fix, sorry</p>",
        "id": 475364526,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728326032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625613\">@James Sturtevant</span> what does <code>wasm-component-ld --version</code> say?</p>",
        "id": 475364538,
        "sender_full_name": "Joel Dice",
        "timestamp": 1728326035
    },
    {
        "content": "<p>And have you double-checked you're using WASI-SDK 25?  And don't have <code>WASI_SDK_PATH</code> pointing to an old location by accident?</p>",
        "id": 475364817,
        "sender_full_name": "Joel Dice",
        "timestamp": 1728326121
    },
    {
        "content": "<p>I am seeing the build output use my path that has the build from the latest wasi-sdk branch:</p>\n<p>Running clang: -target wasm32-unknown-wasip2 --sysroot /home/jstur/wasi-sdk-nightly/share/wasi-sysroot -std=gnu11 -DMONO_GENERATING_OFFSETS -isystem /home/jstur/wasi-sdk-nightly/share/wasi-sysroot/include</p>\n<p>cat /home/jstur/wasi-sdk-nightly/VERSION<br>\n24.9gcec5cf4f6cf3<br>\nwasi-libc: 1b19fc65ad84<br>\nllvm: a4bf6cd7cfb1<br>\nllvm-version: 19.1.0<br>\nconfig: f992bcc08219</p>",
        "id": 475365633,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728326402
    },
    {
        "content": "<p>how about <code>/home/jstur/wasi-sdk-nightly/share/wasi-sysroot/bin/wasm-component-ld --version</code>?</p>",
        "id": 475365827,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728326460
    },
    {
        "content": "<p>there is no <code>bin</code> folder there</p>",
        "id": 475366211,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728326608
    },
    {
        "content": "<p>oh maybe <code>/home/jstur/wasi-sdk-nightly/bin/wasm-component-ld</code> then?</p>",
        "id": 475366293,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728326635
    },
    {
        "content": "<p>ls bin/wasm-component-ld --version<br>\nls (GNU coreutils) 9.4<br>\nCopyright (C) 2023 Free Software Foundation, Inc.<br>\nLicense GPLv3+: GNU GPL version 3 or later &lt;<a href=\"https://gnu.org/licenses/gpl.html\">https://gnu.org/licenses/gpl.html</a>&gt;.<br>\nThis is free software: you are free to change and redistribute it.<br>\nThere is NO WARRANTY, to the extent permitted by law.<br>\nWritten by Richard M. Stallman and David MacKenzie.</p>",
        "id": 475366470,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728326688
    },
    {
        "content": "<p>doh...</p>",
        "id": 475366560,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728326714
    },
    {
        "content": "<p>bin/wasm-component-ld --version<br>\nwasm-component-ld 0.5.9</p>",
        "id": 475366607,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728326734
    },
    {
        "content": "<p>ok that's the expected version, so that's not executing for some reason</p>",
        "id": 475366664,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728326760
    },
    {
        "content": "<p>maybe try deleting the previous wasi-sdk version? just to make sure it's not accidentally getting used? (or moving it to a different location temporarily)</p>",
        "id": 475366900,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728326819
    },
    {
        "content": "<p>so I cleared the build output folder and now, I get</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">python3</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">offsets</span><span class=\"o\">-</span><span class=\"n\">tool</span><span class=\"o\">/</span><span class=\"n\">offsets</span><span class=\"o\">-</span><span class=\"n\">tool</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">abi</span><span class=\"o\">=</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">netcore</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">targetdir</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/projects/runtime/artifacts/obj/mono/wasi.wasm.Debug\"</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">monodir</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/projects/runtime/src/mono\"</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">nativedir</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/projects/runtime/src/native\"</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">outfile</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/projects/runtime/artifacts/obj/mono/wasi.wasm.Debug/cross/offsets-wasm32-unknown-none.h\"</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">libclang</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/projects/runtime/artifacts/obj/mono/wasi.wasm.Debug/llvm//x64/lib/libclang.so\"</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/wasi-sdk-nightly/share/wasi-sysroot\"</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">=</span><span class=\"s\">\"/home/jstur/wasi-sdk-nightly\"</span><span class=\"o\">'</span>\n<span class=\"w\">  </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">clang</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"n\">gnu11</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">DMONO_GENERATING_OFFSETS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">isystem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">isystem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"o\">/</span><span class=\"mi\">18</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">isystem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">-</span><span class=\"n\">include</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">eglib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">/</span><span class=\"n\">public</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">eglib</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">DTARGET_WASI</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">DTARGET_WASM</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_PROCESS_CLOCKS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_SIGNAL</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D_WASI_EMULATED_MMAN</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">DHAVE_SGEN_GC</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">DHAVE_MOVING_COLLECTOR</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">metadata</span><span class=\"o\">/</span><span class=\"n\">metadata</span><span class=\"o\">-</span><span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">helpers</span><span class=\"p\">.</span><span class=\"n\">c</span>\n\n<span class=\"w\">  </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">include</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">__struct_iovec</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fatal</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">stddef</span><span class=\"p\">.</span><span class=\"n\">h</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n</code></pre></div>\n<p>If I build it with 24 It builds, then it builds when I switch to nightly.    Something looks off in the way its putting it all togther with the caching.  I'll dig deeper here...</p>",
        "id": 475368052,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728327044
    },
    {
        "content": "<p>is this using the system <code>clang</code> perhaps? As opposed to the wasi-sdk clang?</p>",
        "id": 475368294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728327097
    },
    {
        "content": "<p>had a few meetings.  I am past the missing file header: one of the build scripts had hard coded the clang includes to point to a path to 18.   <code>-isystem /home/jstur/wasi-sdk-nightly/lib/clang/18/include</code>,  the new wasi-sdk is v19.</p>",
        "id": 475416696,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728342147
    },
    {
        "content": "<p>now it gives me: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Build</span><span class=\"w\"> </span><span class=\"n\">files</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">written</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">/</span><span class=\"n\">net10</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">Debug</span><span class=\"o\">-</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Linking</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">executable</span><span class=\"w\"> </span><span class=\"n\">dotnet</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">EXEC</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">projects</span><span class=\"o\">/</span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mono</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">proj</span><span class=\"p\">]</span>\n\n<span class=\"w\">  </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">      </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">output</span>\n<span class=\"w\">      </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">duplicate</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"mi\">57</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">already</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0xdf82f5</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 475416750,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728342175
    },
    {
        "content": "<p>verifing, it is actually executing the corect versions...</p>",
        "id": 475417396,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728342471
    },
    {
        "content": "<p>I found log files that seem to indicate that it is using the version expected:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">link</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\"> </span><span class=\"s\">\"/home/jstur/wasi-sdk-nightly/bin/wasm-component-ld\"</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"o\">-</span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">crt1</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">cmTC_7ad0d</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">CMakeCCompilerABI</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">lc</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"o\">/</span><span class=\"mi\">19</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">libclang_rt</span><span class=\"p\">.</span><span class=\"n\">builtins</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">cmTC_7ad0d</span><span class=\"p\">]</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">wasm32</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"o\">-</span><span class=\"n\">path</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">L</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"p\">]</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">crt1</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">obj</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sysroot</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">crt1</span><span class=\"o\">-</span><span class=\"n\">command</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">]</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">CMakeFiles</span><span class=\"o\">/</span><span class=\"n\">cmTC_7ad0d</span><span class=\"p\">.</span><span class=\"n\">dir</span><span class=\"o\">/</span><span class=\"n\">CMakeCCompilerABI</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">obj</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">lc</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"o\">/</span><span class=\"mi\">19</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">libclang_rt</span><span class=\"p\">.</span><span class=\"n\">builtins</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">jstur</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">sdk</span><span class=\"o\">-</span><span class=\"n\">nightly</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"o\">/</span><span class=\"mi\">19</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">wasip2</span><span class=\"o\">/</span><span class=\"n\">libclang_rt</span><span class=\"p\">.</span><span class=\"n\">builtins</span><span class=\"o\">-</span><span class=\"n\">wasm32</span><span class=\"p\">.</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n<span class=\"w\">          </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">cmTC_7ad0d</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">==&gt;</span><span class=\"w\"> </span><span class=\"n\">ignore</span>\n</code></pre></div>",
        "id": 475418803,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728342842
    },
    {
        "content": "<p>/home/jstur/wasi-sdk-nightly/bin/wasm-component-ld --version<br>\nwasm-component-ld 0.5.9</p>",
        "id": 475418918,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728342864
    },
    {
        "content": "<p>Interesting! That looks like a bug in wit-component I think. Can you capture the input core wasm module and arguments to the command here?</p>",
        "id": 475419100,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728342904
    },
    {
        "content": "<p>Oh you know just thinking about this I think I know where the issue is</p>",
        "id": 475419278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728342949
    },
    {
        "content": "<p>If you could file an issue on wasm-tools about this I'll debug further tomorrow, I think I know how to reproduce</p>",
        "id": 475419348,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728342979
    },
    {
        "content": "<p>(also thanks for testing this is great to find before a full wasi sdk release!)</p>",
        "id": 475419387,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1728343014
    },
    {
        "content": "<p>I am not sure I know how to capture the input core module</p>",
        "id": 475420354,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728343660
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1850\">https://github.com/bytecodealliance/wasm-tools/issues/1850</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1850\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/759649d075f18a65fbbf4fe03c5adf17c67812c7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376635393036346533656661346562393466613031333861373334656439323631323237323736616266633030633234393437323234363563386537323730392f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31383530&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1850\" title=\"duplicate export name `57` already defined when importing multiple semver versions Â· Issue #1850 Â· bytecodealliance/wasm-tools\">duplicate export name `57` already defined when importing multiple semver versions Â· Issue #1850 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Using the latest wasi-sdk pacakge built with the fix from #1774 (https://github.com/WebAssembly/wasi-sdk/actions/runs/11129514597) I still get an error when building a wasm component with wasi:io/p...</div></div></div>",
        "id": 475420402,
        "sender_full_name": "James Sturtevant",
        "timestamp": 1728343679
    }
]