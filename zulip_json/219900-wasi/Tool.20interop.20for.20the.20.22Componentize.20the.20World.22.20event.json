[
    {
        "content": "<p>As mentioned in the component model meeting earlier today, <span class=\"user-mention\" data-user-id=\"582009\">@Kate G</span> and <span class=\"user-mention\" data-user-id=\"570909\">@Ivan Towlson</span> have been working on documenting Component Model tooling for various languages, and they'd like to have something useful ready for the <a href=\"https://www.eventbrite.com/e/bytecode-alliance-componentize-the-world-tickets-681895717447\">Componentize the World</a> event co-located with WasmCon at the beginning of September.  One thing that would make their job easier -- as well as help make that event go smoothly -- is if we can agree on a set of versions of tools to recommend that are known to be compatible with each other.</p>\n<p>Specifically, I'm thinking of <code>wasmtime</code>, <code>wasm-tools</code>, <code>wit-bindgen</code>, <code>cargo-component</code>, <code>jco</code>, and <code>componentize-py</code>.  The component binary format has been stable for a while now, so that should be easy, but <code>wasi-cli</code> and the WIT syntax have seen a lot of changes lately, so it would be great to get all those tools aligned.</p>\n<p>I recall that <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> had been keeping track of this kind of thing on GitHub, but I can't seem to find it now, and I don't know how up-to-date it is.  Guy, would you mind reminding me where it is?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.eventbrite.com/e/bytecode-alliance-componentize-the-world-tickets-681895717447\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c43abfc618026a7734b82185cc5cf9ade0b05728\\/68747470733a2f2f696d672e65766275632e636f6d2f687474707325334125324625324663646e2e65766275632e636f6d253246696d61676573253246353631303436353539253246363038353638393739323633253246312532466f726967696e616c2e6a70673f773d31303030266175746f3d666f726d6174253243636f6d707265737326713d37352673686172703d313026726563743d3025324330253243323136302532433130383026733d6566306235376633613935363164323366666632663162306637303663386333)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.eventbrite.com/e/bytecode-alliance-componentize-the-world-tickets-681895717447\" title=\"Bytecode Alliance &quot;Componentize the World&quot;\">Bytecode Alliance \"Componentize the World\"</a></div><div class=\"message_embed_description\">Join us for the WebAssembly \"Componentize the World\" hackathon &amp; documentathon!  All are welcome for this hands-on event!</div></div></div>",
        "id": 385549913,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692223602
    },
    {
        "content": "<p>Thanks for picking this up. I was maintaining <a href=\"https://github.com/bytecodealliance/wasm-tools/wiki/Component-Model-Tooling-Compatibility\">https://github.com/bytecodealliance/wasm-tools/wiki/Component-Model-Tooling-Compatibility</a> but haven't done so for the past couple of releases, especially since we haven't had particularly clear release cadences recently.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/wiki/Component-Model-Tooling-Compatibility\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6548620d050004828d6e4a0d6f751de0c310eb8c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663134343365343330383766353735653637303166383833313032336665373166613539336466313936613439323864383164303831626434373635363131372f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/wiki/Component-Model-Tooling-Compatibility\" title=\"Component Model Tooling Compatibility\">Component Model Tooling Compatibility</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 385550036,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692223680
    },
    {
        "content": "<p>the last couple of releases should really be added though</p>",
        "id": 385550134,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692223730
    },
    {
        "content": "<p>at least to get this next one before the conf would be great</p>",
        "id": 385550150,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692223738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> Ideally we'd start with a known good version of the Wasmtime WASI Preview 2 implementation and have everything else standardize on that.  Do we think we're close to having something like that, or alternatively, could we call Wasmtime 11's implementation \"good enough\" and just document known issues?</p>",
        "id": 385550522,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692223973
    },
    {
        "content": "<p>I don't think the wasmtime 11 wasi is a great implementation, it didnt have the streams/pollable rewrite</p>",
        "id": 385550973,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224267
    },
    {
        "content": "<p>that landed in the release branch for 12, which will go out in 4 more days, but that implementation also has some problems</p>",
        "id": 385551028,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224284
    },
    {
        "content": "<p>i expect we'll need to tell folks to use whatever is in <code>main</code></p>",
        "id": 385551055,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224301
    },
    {
        "content": "<p>I see that <code>cargo-component</code> is using a pretty bleeding-edge version of the Preview 1 adapter (using a Wasmtime tag from a few days ago), so we probably don't want to go backwards from there.</p>",
        "id": 385551088,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692224328
    },
    {
        "content": "<p>right, thats the other wrinkle</p>",
        "id": 385551097,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224337
    },
    {
        "content": "<p>we need to all be on the same versions of the wits</p>",
        "id": 385551110,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224342
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\">https://github.com/bytecodealliance/wasmtime/pull/6846</a> is a breaking change that will hopefully land today, getting rid of the stream error dummy type</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/feb6d97ccbbbf0da8d5c17eb8d7ff436e49e2941\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353562356531666631373436363831636265626532356163663963336536346433376532633533383435303635666463393731353864393365326134316566322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f36383436)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6846\" title=\"stream wit definition eliminates stream-error by pchickey 路 Pull Request #6846 路 bytecodealliance/wasmtime\">stream wit definition eliminates stream-error by pchickey 路 Pull Request #6846 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In WebAssembly/wasi-io#38 we got review feedback to eliminate the stream-error in favor of the empty error (wit result&lt;a&gt;). Although upstream PR 38 is not merged yet, we are downstreaming this inte...</div></div></div>",
        "id": 385551168,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224385
    },
    {
        "content": "<p>and the fixes to the backpressure / flushing situation (which is why wasmtime-wasi 12 will be fairly hosed) are still not in. i would be pretty bummed if we didnt finish that in time for componentize the world, i hope it will be in next week</p>",
        "id": 385551273,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224423
    },
    {
        "content": "<p>I just don't want to get to September 8th and have all the tools using slightly different, incompatible versions (plus already-obsolete docs), so I'm trying to figure if we can pick a commit and rally around it.</p>",
        "id": 385551295,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692224437
    },
    {
        "content": "<p>i guess we will have the wasmtime 13 release branch cut before componentize the world, maybe thats the best target.</p>",
        "id": 385551297,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224440
    },
    {
        "content": "<p>that will cut on the 4th.</p>",
        "id": 385551303,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224444
    },
    {
        "content": "<p>if we need more lead time, then i guess lets pick a date and try to hit it.</p>",
        "id": 385551327,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224463
    },
    {
        "content": "<p>im not thrilled that its late august and im still fixing streams, i started on these in june</p>",
        "id": 385551345,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224477
    },
    {
        "content": "<p>yeah, turns out it was a tough problem</p>",
        "id": 385551378,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692224501
    },
    {
        "content": "<p>lets say this: ill do everything i can to have backpressure done and landed by friday, aug 25th.</p>",
        "id": 385551566,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224596
    },
    {
        "content": "<p>we're also (thanks to eduardo!) close to landing a significant update to the http impl, syncing it up with the other wits</p>",
        "id": 385551692,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224653
    },
    {
        "content": "<p>trevor is planning to hammer on that and get it fully integrated with streams and pollable asap</p>",
        "id": 385551762,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224696
    },
    {
        "content": "<p>btw our conclusion there was that you and eduardo converged on writing nearly the precise same code: differences were just streams and pollables, and some minor style nits. that seems like a good sign that the spec has an \"obvious\" implementation...</p>",
        "id": 385551823,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224748
    },
    {
        "content": "<p>August 25th sounds great.  <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> any anyone else working on the tools I listed above: can we agree to pick a Wasmtime commit sometime after August 25th (or whenever Pat feels it's ready) and align all those tools?</p>",
        "id": 385552026,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692224878
    },
    {
        "content": "<p>that would be great, having a good week to get all the upgrade paths in will help</p>",
        "id": 385552147,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692224931
    },
    {
        "content": "<p>the other big q is whether we can land timmys resources bindgen by then?</p>",
        "id": 385552168,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224945
    },
    {
        "content": "<p>we wont be switched to resources in wasi, but theyll at least be available in new wits?</p>",
        "id": 385552182,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692224965
    },
    {
        "content": "<p>as long as they're not in wasi yet, as I definitely won't have time to update wasi virt to resources</p>",
        "id": 385552225,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692224997
    },
    {
        "content": "<p>but JS resources implementation should just be ready</p>",
        "id": 385552281,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692225009
    },
    {
        "content": "<p>yeah we definitely wont have them in wasi by then</p>",
        "id": 385552295,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692225022
    },
    {
        "content": "<p>I've been assuming resources won't be ready (or at least fully baked), and I'm not sure I'll get to adding them to componentize-py by WasmCon, but we could create a little demo that works for some combination of tools, perhaps.</p>",
        "id": 385552337,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692225047
    },
    {
        "content": "<p>I'm shooting to at least demonstrate them in jco and componentize-js by then, but will see how it goes</p>",
        "id": 385552417,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692225099
    },
    {
        "content": "<p>it may be best to wait to introduce them to new people until they are fully baked</p>",
        "id": 385552428,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692225107
    },
    {
        "content": "<p>i don't anticipate any significant changes to <code>cargo-component</code> until the end of august; can sync on the WASI adapters to use</p>",
        "id": 385552433,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225110
    },
    {
        "content": "<p>but idk i have sorta just been leaving the resources roll out to yall, because ive been mired in other stuff</p>",
        "id": 385552515,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692225142
    },
    {
        "content": "<p>as timmy's example shows, we should at a minimum have an example working with cargo-component</p>",
        "id": 385552535,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225163
    },
    {
        "content": "<p>I'd say we call resources \"nice to have\" for WasmCon, but not _require_ them to make stuff work.</p>",
        "id": 385552592,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692225201
    },
    {
        "content": "<p>the registry subgroup is also hoping to have a \"for the event\" registry set up for people to push packages to</p>",
        "id": 385552594,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225202
    },
    {
        "content": "<p>which it'd be nice to prepopulate with corresponding WASI packages</p>",
        "id": 385552649,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225237
    },
    {
        "content": "<p>i guess that means we gotta publish the wasi snapshot as of the 25th as a prerelease to that registry</p>",
        "id": 385552773,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692225305
    },
    {
        "content": "<p>so that stuff can depend on it</p>",
        "id": 385552785,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692225314
    },
    {
        "content": "<p>yeah, i can help out with that</p>",
        "id": 385552804,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225331
    },
    {
        "content": "<p>the registry will be writable only for the weekend probably, with the intention of it going read-only after the event and then decomissioned in the future</p>",
        "id": 385552861,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225364
    },
    {
        "content": "<p>(writable by anyone; writable by us pre-event)</p>",
        "id": 385552904,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692225379
    },
    {
        "content": "<p>cool</p>",
        "id": 385553393,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692225726
    },
    {
        "content": "<p>wouldn't it be useful for the event but also moving forward to have a \"caniuse\" table for components?</p>\n<ul>\n<li>projects in the left (may be two columns. latest release, HEAD)</li>\n<li>features at the top</li>\n<li>at the intersection the status of the feature</li>\n</ul>\n<p>pinging projects weekly or similar should be enough to get started.</p>\n<p>I can help set it up :)</p>",
        "id": 385658759,
        "sender_full_name": "Mariano Guerra",
        "timestamp": 1692273494
    },
    {
        "content": "<p>As a reminder, we discussed monthly tagging using a <code>major.minor.patch-rc-YYYY-MM-DD.N</code> format in <a href=\"https://github.com/WebAssembly/meetings/blob/4d8497ce344966eb402ead8c3d98262cf589ac9a/wasi/2023/WASI-06-29.md\">a recent WASI meeting</a>.  I'm not sure if that's been happening, but if not perhaps the snapshot on the 25th(ish) would be a good time to start.  <span class=\"user-mention\" data-user-id=\"543036\">@Mariano Guerra</span> 's \"caniuse\" table could label features based on that tag.</p>",
        "id": 385700351,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692286281
    },
    {
        "content": "<p>Also, we could offer more user-friendly messages if the versions were in the WIT files (and thus the preview1-&gt;preview2 adapters) themselves (e.g. \"This version of Wasmtime supports <code>wasi-cli@0.2.0-rc-2023-08-25.0</code> but the component you're trying to run targets <code>wasi-cli@0.2.0-rc-2023-09-25.0</code> -- please consider using a newer version of Wasmtime\").</p>",
        "id": 385701257,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692286542
    },
    {
        "content": "<p>it hasnt been happening because (at least, in my view) things havent been stable enough to warrant it. the big round of syncing wasmtime to standards repos was with a goal of stabilizing things</p>",
        "id": 385710034,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692289090
    },
    {
        "content": "<p>but yes, i would like to use the version tag on the 25thish.</p>",
        "id": 385710129,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692289132
    },
    {
        "content": "<p>one wrinkle i found: the <code>wit publish</code> tool expects the version to be present in wit.toml and not in the package/use declarations themselves, but if someone copies the files out of the repo theyll expect the opposite</p>",
        "id": 385710268,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692289182
    },
    {
        "content": "<p>but thats based on me just messing around trying things and maybe <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> has some better solution</p>",
        "id": 385710413,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692289219
    },
    {
        "content": "<p>i can certainly change it so that <code>wit</code> requires the <code>package</code> directive to have a version on it to publish instead and we remove the <code>version</code> field in <code>wit.toml</code>; i'm holding out hope that we can kill the <code>package</code> directive as i don't like having versions in \"source code\", but until then we can improve the <code>wit</code> tool DX</p>",
        "id": 385711738,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692289672
    },
    {
        "content": "<p>same goes for specifying versions on foreign interface references in worlds, they don't belong in source; they belong externally specified from the tool that resolved the versions from a registry</p>",
        "id": 385711929,
        "sender_full_name": "Peter Huene",
        "timestamp": 1692289733
    },
    {
        "content": "<p>yeah i agree with you that keeping versions in a single spot rather than scattered all over the source code is a better dx.</p>",
        "id": 385714558,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692290708
    },
    {
        "content": "<p>Thanks for starting this thread <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> and everyone for putting together this great tooling! For context on docs for Componentize the World, I've drafted up <a href=\"https://github.com/bytecodealliance/component-docs/pull/17\">documentation</a> that takes a simple example world shows how to implement a component of that world using the Rust (<code>cargo component</code>), JS (<code>jco</code>), and Python (<code>componentize py</code>) toolchains. It also has a host application that can run all of them, regardless of the toolchain that created the component, so the tooling as is is already a powerful example. The work to align all the tools on WASI versioning and WIT will probably prevent some issues folks may run into if they go beyond the document and start playing with more complex worlds.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/component-docs/pull/17\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4e044f3357f0227ad353a7d8d53ac6de49f77887\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333863363138653130313261303030343334636461373536363966396131306438653466636233623939326238316333386231613531386235303633613631312f62797465636f6465616c6c69616e63652f636f6d706f6e656e742d646f63732f70756c6c2f3137)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/component-docs/pull/17\" title=\"Language Support Guide for Components by kate-goldenring 路 Pull Request #17 路 bytecodealliance/component-docs\">Language Support Guide for Components by kate-goldenring 路 Pull Request #17 路 bytecodealliance/component-docs</a></div><div class=\"message_embed_description\">ref #8</div></div></div>",
        "id": 385752205,
        "sender_full_name": "Kate Goldenring",
        "timestamp": 1692306265
    },
    {
        "content": "<blockquote>\n<p>can we agree to pick a Wasmtime commit sometime after August 25th (or whenever Pat feels it's ready) and align all those tools?</p>\n</blockquote>\n<p>I personally liked the idea of the Wasmtime 13 branch point being used for this, was that happening too late in the game though? We could perhaps update the release process to manually perform the Wasmtime 13 branch on Aug 25 instead of Sep 5 if necessary, but having a concrete branch (and eventual release artifact) to point to I think would be quite useful as opposed to a commit. (e.g. I'd prefer to avoid recommending <code>rev = '...'</code> in <code>Cargo.toml</code></p>",
        "id": 385931469,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692369492
    },
    {
        "content": "<p>Yeah, I guess we could treat whatever we have on the 25th as a \"release candidate\", but then point everything to the Wasmtime 13 branch on the 5th.  I just want to make sure everyone has time to test and tweak before WasmCon, but if all we have left to do on the 5th is update some Cargo.toml files, that should be fine.</p>",
        "id": 385936053,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692370656
    },
    {
        "content": "<p>I'm also ok yeah with having a loose understanding of \"no more major changes after the 25th\"</p>",
        "id": 385937392,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692370911
    },
    {
        "content": "<p>and the 25th-to-the-5th is \"let's get everything sync'd\" e.g. publish the <code>wasm-tools</code> crates and integrate them into Wasmtime to ensure everything's at the same version</p>",
        "id": 385937489,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692370934
    },
    {
        "content": "<p>yes, we can at least declare no more wit changes landing between the 25th and 5th</p>",
        "id": 385953786,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692377200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553681\">Guy Bedford</span> <a href=\"#narrow/stream/219900-wasi/topic/Tool.20interop.20for.20the.20.22Componentize.20the.20World.22.20event/near/385552417\">said</a>:</p>\n<blockquote>\n<p>I'm shooting to at least demonstrate them in jco and componentize-js by then, but will see how it goes</p>\n</blockquote>\n<p>I found that host support for resources in jco already works nicely - guest needs your ongoing work in componentize-js.<br>\nSee <a href=\"https://github.com/cpetig/resource-demo/\">https://github.com/cpetig/resource-demo/</a> for a matrix (a three guest languages, two host environments working demo)</p>\n<p>Disclaimer: I still need to improve my C++ code generation to include the fixes I made by hand in this repo.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/resource-demo/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/371764e8f1d49ede91ea79278afbd58ec1e92ae0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636137386631653261616233336563656132333862323834656531363930386639353537653937303532393161623361353961383430393439366563653534322f6370657469672f7265736f757263652d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/resource-demo/\" title=\"GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments\">GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</a></div><div class=\"message_embed_description\">A demo showing WASM component model resources in various environments - GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</div></div></div>",
        "id": 386207660,
        "sender_full_name": "Christof Petig",
        "timestamp": 1692526446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> nice to see it's working for you, yes got it shipped out last week for jco, guest side may take a little longer but will see</p>",
        "id": 386433795,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692635649
    },
    {
        "content": "<p>the streams work will not be ready by the 25th.</p>",
        "id": 387006724,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692859315
    },
    {
        "content": "<p>hopefully next week. plan to do demos without it.</p>",
        "id": 387006800,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692859348
    },
    {
        "content": "<p>the short story on why is: porting sockets to the new scheme (which landed since we started working on it) will be some work, and also we have to mess with poll oneoff again because now we could be polling on both the ready-for-writing future and the flush-completed future from the same output-stream.</p>",
        "id": 387006943,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692859458
    },
    {
        "content": "<p>Thanks for the update, <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>, and thanks for all the work you've been putting into this.<br>\nI think we should still aim to align the tools with whatever we have on September 5th, even if streams aren't ready by then.  The main point is that all the tools produce and consume compatible files.</p>",
        "id": 387076485,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692884244
    },
    {
        "content": "<p>As a reminder the 25th is tomorrow, so a heads up to try to hold off on breaking changes after tomorrow and/or get them in tomorrow. The next week or so should then focus on getting everything up-to-date with each other and such.</p>",
        "id": 387171062,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692916372
    },
    {
        "content": "<p>the streams fixes wont be in tomorrow. they might be possible to get in on monday?</p>",
        "id": 387201415,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692934826
    },
    {
        "content": "<p>my concern right now is that if we freeze before we get them in, they wont ship as part of wasmtime 13, and will need to wait until 14. (unless we change the cut and release dates for 13)</p>",
        "id": 387201501,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692934905
    },
    {
        "content": "<p>is it going to ruin anyone's week if streams land on monday?</p>",
        "id": 387329074,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692990111
    },
    {
        "content": "<p>Works for me.</p>",
        "id": 387329997,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692990494
    },
    {
        "content": "<p>The \"final\" wasm-tools publish just went out so I'm going to try to consider that frozen until after wasmcon except for bugfixes</p>",
        "id": 387330279,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692990600
    },
    {
        "content": "<p>alright folks, trevor and i have both been working on the streams revisions all day and theyre not ready yet</p>",
        "id": 387768488,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1693262498
    },
    {
        "content": "<p>i am going to keep plugging away at these for as long as it takes to get them done. its up to yall whether we land them as soon as theyre ready, or whether we extend the wasmtime 13 cut date to after wasmcon and land them then.</p>",
        "id": 387768584,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1693262535
    },
    {
        "content": "<p>so please lmk here what your preferences are. <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  <span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> <span class=\"user-mention\" data-user-id=\"582009\">@Kate Goldenring</span> <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span></p>",
        "id": 387768775,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1693262659
    },
    {
        "content": "<p>i have no preference and it's fairly easy to update <code>cargo-component</code> any at point to updated adapters</p>",
        "id": 387768886,
        "sender_full_name": "Peter Huene",
        "timestamp": 1693262743
    },
    {
        "content": "<p>Pretty much all I need for WasmCon regarding wasi-cli I/O is for stdio to work at least as well as it currently does in <code>main</code>, so if there's danger of regressions there I'd prefer to wait until after.  Otherwise, either is fine with me.</p>",
        "id": 387769192,
        "sender_full_name": "Joel Dice",
        "timestamp": 1693262917
    },
    {
        "content": "<p>stdout and stderr in <code>main</code> run the risk of being swallowed if the table is dropped before the AsyncWriteStream worker gets a chance to run. my patch will definitely fix that problem, but it will do so at the cost of a breaking wit change for streams.wit</p>",
        "id": 387769314,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1693263004
    },
    {
        "content": "<p>no major preference from me, although I would prefer to not be fiddling with demos last minute, so will likely lock down at the current state myself, only upgrading if it's easy to do / I have the time.</p>",
        "id": 387769561,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1693263144
    },
    {
        "content": "<p>One of my demos is locked in now. I was considering creating another demo that's a what's next and would have to run off of branches anyways to highlight resources.</p>\n<p>Since this is a breaking change to <code>streams.wit</code> my preference is that we do not change any of the in place processes. That means missing the wasmtime 13 cut date and giving streams time to salient in dev. That will also give us time to align upstream WebAssembly WASI repos with an updated <code>streams.wit</code></p>",
        "id": 387771891,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1693264469
    },
    {
        "content": "<p>the time between tagging the release branch and making the release is to give time for cranelift &amp; related fuzzers to find a bug. there is no testing of anything wasi related that goes on during that time</p>",
        "id": 387772144,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1693264654
    },
    {
        "content": "<p>wasmtime 12 streams are fairly broken for users, and i dont want to make them broken until wasmtime 14</p>",
        "id": 387772253,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1693264720
    },
    {
        "content": "<p>How about we get it ready to land a make a decision at that time? That'll give us a more concrete idea in terms of the time frame</p>",
        "id": 387772339,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693264791
    },
    {
        "content": "<p>I'm worried that things feel broken now with output being swallowed by default almost, so id err on the side of landing personally</p>",
        "id": 387772427,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693264825
    },
    {
        "content": "<p>But that's assuming that updating most demos is a matter of downloading a new adapter and not much else</p>",
        "id": 387772453,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693264843
    },
    {
        "content": "<p>I imagine most demos are locked in either way which I guess is a pro for taking a risk now to unbreak</p>",
        "id": 387772561,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1693264924
    },
    {
        "content": "<p>I think the main thing is what Guy said: we need to have enough time to align all the tools and test that they work together.  If we can have it ready to land in the next couple of days, great.  Otherwise, we need to pick a revision prior to landing the stream changes and align on that.</p>",
        "id": 387772610,
        "sender_full_name": "Joel Dice",
        "timestamp": 1693264951
    },
    {
        "content": "<p>I'm less concerned about whatever demos people are doing for WasmCon presentations -- presenters can hand-select whatever combination of tools they like (and probably already have).  I'm thinking of the Componentize the World event, where ideally we can give people a list of tools that are known to work together, without leaving them to figure it out themselves.</p>",
        "id": 387773325,
        "sender_full_name": "Joel Dice",
        "timestamp": 1693265405
    },
    {
        "content": "<p>as of right now wasm-tools/wit-bindgen I think are considered frozen til wasmcon, at their latest publications on <a href=\"http://crates.io\">crates.io</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 387774083,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693265893
    },
    {
        "content": "<p>for wasmtime I think we should nominally consider main as-is, the upcoming release-13.0.0 branch, as what we should use</p>",
        "id": 387774099,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693265910
    },
    {
        "content": "<p>so no more breaking changes at all on main except possibly streams</p>",
        "id": 387774121,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693265924
    },
    {
        "content": "<p>I suppose I should say I'm less worried about an exact revision everyone's sharing as opposed to making sure no more breaking changes happen until release-13.0.0 is branched</p>",
        "id": 387774155,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693265951
    },
    {
        "content": "<p>e.g. if we fix a bug I think it'd be good to have that picked up</p>",
        "id": 387774183,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693265970
    },
    {
        "content": "<p>To copy over and write down what we discussed today:</p>\n<ul>\n<li>streams changes will NOT be landed before wasmcon</li>\n<li>streams changes may still be considered for a backport to the release-13.0.0 branch after wasmcon</li>\n</ul>\n<p>So everyone should be able to continue as-is with current tooling and versions to ensure everything all works in concert</p>",
        "id": 388157874,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693414672
    },
    {
        "content": "<p>What version of adapters should we settle on, then?</p>",
        "id": 388164396,
        "sender_full_name": "Peter Huene",
        "timestamp": 1693417084
    },
    {
        "content": "<p>The <code>dev</code> tag on wasmtime right now should work, and the WITs they use should be frozen until after wasmcon</p>",
        "id": 388164963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693417309
    },
    {
        "content": "<p>this makes me thing we should have a prerelease tag created as part of the wasmtime release process for prerelease artifacts, but perhaps another time!</p>",
        "id": 388165061,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693417335
    }
]