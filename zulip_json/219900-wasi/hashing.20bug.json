[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, I think I found a bug but I don't know exactly where things are going wrong: I hash the contents of a file and emit the result, but the result is different when I run the program as a rustc-compiled binary and as a wasm32-wasi file run in Wasmtime. Any ideas?</p>",
        "id": 217169384,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605720837
    },
    {
        "content": "<p>I created an example here: <a href=\"https://github.com/abrown/hashing-example\">https://github.com/abrown/hashing-example</a></p>",
        "id": 217169455,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605720856
    },
    {
        "content": "<p>hm that repo is a 404, but what hash algorithm are you using?</p>",
        "id": 217169487,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605720877
    },
    {
        "content": "<p>sorry, just made it public</p>",
        "id": 217169564,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605720922
    },
    {
        "content": "<p>ah yeah the <code>Hash</code> trait is not architecture-independent</p>",
        "id": 217169704,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605720976
    },
    {
        "content": "<p>it hashes <code>usize</code> differently on 32 and 64-bit platforms</p>",
        "id": 217169725,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605720988
    },
    {
        "content": "<p>ooooh</p>",
        "id": 217169732,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605720991
    },
    {
        "content": "<p>so if I get rid of the trait and do the hashing manually I should get the same result, right?</p>",
        "id": 217169795,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605721027
    },
    {
        "content": "<p>you should yeah</p>",
        "id": 217169999,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605721114
    },
    {
        "content": "<p>hooray! solved.</p>",
        "id": 217170064,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605721149
    },
    {
        "content": "<p>thanks, deleting the repo now <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 217170146,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1605721196
    },
    {
        "content": "<p>Where does it hash a <code>usize</code>? Does <code>Hash</code> implicitly hash the length of a slice?</p>",
        "id": 217170250,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605721231
    },
    {
        "content": "<p>Aha, perhaps it does: <a href=\"https://doc.rust-lang.org/stable/src/core/hash/mod.rs.html#669\">https://doc.rust-lang.org/stable/src/core/hash/mod.rs.html#669</a></p>",
        "id": 217170524,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605721331
    },
    {
        "content": "<p>Which suggests that a way to avoid that would be to call <a href=\"https://doc.rust-lang.org/stable/std/hash/trait.Hash.html#method.hash_slice\"><code>hash_slice</code></a> instead.</p>",
        "id": 217170734,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605721426
    },
    {
        "content": "<p>ah yeah it's in hashing slices which hashes the length</p>",
        "id": 217173026,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605722403
    }
]