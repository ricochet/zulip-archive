[
    {
        "content": "<p>When I started using resources I assumed that it would be mostly symmetric for guest import and export, but I just <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#canonical-built-ins\">learned</a> about the need for <code>canon resource.new</code>, <code>.rep</code> and <code>.drop</code> in a strangely named <code>[exports]ns</code>module, which is only used for exported resources. Also when calling a <code>[method]</code> guest import passes ids (s32), but export receives the rep (likely s64 with wasm64).</p>\n<p>Now I found <code>[resource-drop]type</code> (guest import) vs <code>[dtor]type</code> (guest export) but struggle to find a description. As Rust and C bindgen disagree here, I tend to follow Rust, but a document link would be most helpful.</p>",
        "id": 423152285,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708765643
    },
    {
        "content": "<p>Naming of symbols and such doesn't currently have documentation as it's \"just\" a convention of the <code>wit-component</code> tool which turns core wasms into components. That's not part of any standard at this time, but we've had historical talk of it becoming more standardized in the future.</p>\n<blockquote>\n<p>likely s64 with wasm64</p>\n</blockquote>\n<p>Note that this is not currently the case, the <code>rep</code> of resources only supports the wasm i32 type right now, i64 is not supported.</p>\n<blockquote>\n<p>As Rust and C bindgen disagree here</p>\n</blockquote>\n<p>Do you have an example of where they disagree? That's probably a bug...</p>\n<hr>",
        "id": 423419161,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708960928
    },
    {
        "content": "<p>As for the symbol names, I can try to at least explain this briefly here:</p>\n<ul>\n<li>The \"module\" in the core wasm exports is the interface/world name that defines the resource. Exports get <code>[export]</code> \"mangling\" since you can import and export the same interface.</li>\n<li>The <code>[resource-drop]...</code> function is the <code>canon resource.drop</code> intrinsic</li>\n<li>The <code>[resource-new]...</code> function is the <code>canon resource.new</code> intrinsic.</li>\n<li>Similarly for <code>[resource-rep]...</code></li>\n</ul>\n<p>For more information about what those intrinsics to you'd want to consult the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">canonical abi documentation</a></p>",
        "id": 423421735,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708961506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/Resource.20symbol.20documentation/near/423419161\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>likely s64 with wasm64</p>\n</blockquote>\n<p>Note that this is not currently the case, the <code>rep</code> of resources only supports the wasm i32 type right now, i64 is not supported.</p>\n</blockquote>\n<p>Because it is so hard to distinguish rep and id, as both map to i32, I went for the hypothetical wasm64 rep of usize/i64 to tell rep and id apart. (In parallel I work on supporting wasm64, but that is a larger and separate task)</p>\n<blockquote>\n<blockquote>\n<p>As Rust and C bindgen disagree here</p>\n</blockquote>\n<p>Do you have an example of where they disagree? That's probably a bug...</p>\n</blockquote>\n<p>At first I thought that only Rust bindgen exports the <code>[dtor]</code> symbol for guest defined resources, because the <code>[resource-drop]</code> symbol is easier to spot. Now I found that C bindgen defines <code>[dtor]</code> which, if I guess correctly, should call the <code>[export]ns</code> <code>[resource-drop]type</code> function to deregister the resource by its id from the host.</p>\n<p>But the C bindgen calls the non-<code>[export]</code> resource-drop from both <code>__wasm_import_test_example_my_interface_my_object_drop</code> and <code>__wasm_import_exports_test_example_my_interface_my_object_drop</code>. So I guess the second one should refer to the <code>[export]</code> function.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__import_module__</span><span class=\"p\">(</span><span class=\"s\">\"test:example/my-interface\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">__import_name__</span><span class=\"p\">(</span><span class=\"s\">\"[resource-drop]my-object\"</span><span class=\"p\">)))</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">__wasm_import_test_example_my_interface_my_object_drop</span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">);</span>\n\n<span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">test_example_my_interface_my_object_drop_own</span><span class=\"p\">(</span><span class=\"n\">test_example_my_interface_own_my_object_t</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">__wasm_import_test_example_my_interface_my_object_drop</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"n\">__handle</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__import_module__</span><span class=\"p\">(</span><span class=\"s\">\"test:example/my-interface\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">__import_name__</span><span class=\"p\">(</span><span class=\"s\">\"[resource-drop]my-object\"</span><span class=\"p\">)))</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">__wasm_import_exports_test_example_my_interface_my_object_drop</span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">);</span>\n\n<span class=\"n\">void</span><span class=\"w\"> </span><span class=\"n\">exports_test_example_my_interface_my_object_drop_own</span><span class=\"p\">(</span><span class=\"n\">exports_test_example_my_interface_own_my_object_t</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">__wasm_import_exports_test_example_my_interface_my_object_drop</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">.</span><span class=\"n\">__handle</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 423485355,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708982460
    },
    {
        "content": "<p>Ah good point! That looks like a bug in the C generator yeah</p>",
        "id": 423485698,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708982605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/Resource.20symbol.20documentation/near/423421735\">said</a>:</p>\n<blockquote>\n<p>As for the symbol names, I can try to at least explain this briefly here:</p>\n<p>For more information about what those intrinsics to you'd want to consult the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">canonical abi documentation</a></p>\n</blockquote>\n<p>This symmetry-at-first-glance confused me because these functions are not defined by the guest. The undocumented? <code>[dtor]</code> - which isn't even type symmetric (dtor gets rep, ctor returns id, both with good reasons) to the <code>[constructor]</code> confused me at first. Now having studied Rust and C codegen I am confident that I can re-implement it right for C++.</p>",
        "id": 423487053,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708983165
    },
    {
        "content": "<p>By the way, seeing <code>[dtor]</code> next to <code>[constructor]</code> looks odd to me. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 423487365,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708983292
    },
    {
        "content": "<p>So that inconsistency should probably get fixed before standardizing it, unless the existence of WASI 0.2 has already made this a de-facto standard â€¦</p>",
        "id": 423488034,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708983530
    }
]