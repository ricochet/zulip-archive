[
    {
        "content": "<p>something I just ran into - the <code>wiggle</code> proc macro that i'm working on with @kubkon, as an eventual replacement for <code>wig</code>, needs to be rerun if the witx file it reads in changes.</p>",
        "id": 186453151,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579827234
    },
    {
        "content": "<p>the suggested solution here is to use <code>include_str</code> <a href=\"https://users.rust-lang.org/t/equivalent-of-cargo-rerun-if-changed-for-procedural-macros/37036\" target=\"_blank\" title=\"https://users.rust-lang.org/t/equivalent-of-cargo-rerun-if-changed-for-procedural-macros/37036\">https://users.rust-lang.org/t/equivalent-of-cargo-rerun-if-changed-for-procedural-macros/37036</a>  - however I cant rewrite the file loading logic in terms of <code>include_str</code> because witx contains <code>use</code> directives that point to other files.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://users.rust-lang.org/t/equivalent-of-cargo-rerun-if-changed-for-procedural-macros/37036\" style=\"background-image: url(https://aws1.discourse-cdn.com/business5/uploads/rust_lang/original/2X/8/83e41956eccfd67ad6ff76f15a2c22e58db31d4f.svg)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://users.rust-lang.org/t/equivalent-of-cargo-rerun-if-changed-for-procedural-macros/37036\" target=\"_blank\" title=\"Equivalent of cargo:rerun-if-changed for procedural macros?\">Equivalent of cargo:rerun-if-changed for procedural macros?</a></div><div class=\"message_embed_description\">Hello there ðŸ‘‹  I'm currently writing a procedural macro that looks like my_macro!(\"../foo/bar\").  It performs some computation on the files within the ../foo/bar directory, then \"returns\" the outcome.  It works fine, except that I would like the code that calls this macro to be recompiled if the content of foo/bar changes.  In other words, I would like an equivalent to printing cargo:rerun-if-changed from a build script but for procedural macros.  As a tentative solution, I've tried tweakin...</div></div></div>",
        "id": 186453234,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579827292
    },
    {
        "content": "<p>is this issue on the radar for cargo / rustc teams? <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"254178\">@Josh Triplett</span></p>",
        "id": 186453355,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579827394
    },
    {
        "content": "<p>and on the same lines - is any work underway on making proc macro error messages show the actual tokens that caused it? basically my workflow now is to get an error out of <code>cargo build</code> and then go hunting through <code>cargo expand</code>'s output to guess what may have caused it</p>",
        "id": 186454612,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579828872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> this isn't currently on the radar, no, unfortunately</p>",
        "id": 186456085,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830620
    },
    {
        "content": "<p>currently if the tokens are purely synthesized by a macro I don't think there's a way to get spans to point at those tokens</p>",
        "id": 186456099,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830642
    },
    {
        "content": "<p>but calling .to_string().parse() may be a lil better, in general debugging proc macros isn't a great experience :(</p>",
        "id": 186456104,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830660
    },
    {
        "content": "<p>the sol'n for rerunning would actually probably be on the rustc side of things, a function in the <code>proc_macro</code> crate itself most likely</p>",
        "id": 186456116,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830676
    },
    {
        "content": "<p>(or something like that)</p>",
        "id": 186456119,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830681
    },
    {
        "content": "<p>i read something in the cargo expand docs that basically said that the string repr it gives is lossy, and may not even show the same error</p>",
        "id": 186456121,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579830684
    },
    {
        "content": "<p>that is true yeah, primarily b/c of hygiene I believe</p>",
        "id": 186456132,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830701
    },
    {
        "content": "<p>although there may be other subtelties I'm forgetting</p>",
        "id": 186456133,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830707
    },
    {
        "content": "<p>yeah its probably something like that but i dont fully understand the hygiene story... this is my first time really using proc macros</p>",
        "id": 186456176,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579830739
    },
    {
        "content": "<p>unforutnately I don't know a great workaround for the \"rerun on witx file change\"</p>",
        "id": 186456182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830751
    },
    {
        "content": "<p>and yeah the debug experience is less than great presently. not quite bad enough to switch to just printing a syntax tree... but not great</p>",
        "id": 186456185,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579830758
    },
    {
        "content": "<p>other than having the proc-macro <em>also</em> have a build script which prints the various directives</p>",
        "id": 186456186,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830760
    },
    {
        "content": "<p>you can typically fiddle around with spans enough to get <em>user</em> input to show the right errors</p>",
        "id": 186456193,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830784
    },
    {
        "content": "<p>but not afaik for code synthesized by the macro tiself</p>",
        "id": 186456195,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1579830790
    },
    {
        "content": "<p>right</p>",
        "id": 186456200,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579830805
    },
    {
        "content": "<p>well, ill keep at it for now</p>",
        "id": 186456254,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579830862
    },
    {
        "content": "<p>too many things on my plate to take any side tracks into rustc to see if i can make the debug experience better</p>",
        "id": 186456266,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1579830892
    }
]