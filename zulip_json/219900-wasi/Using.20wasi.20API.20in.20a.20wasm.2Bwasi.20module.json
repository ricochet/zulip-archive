[
    {
        "content": "<p>I'm writing, in Rust, a wasm+wasi (wasm32-wasi) module that's run with <code>wasmtime</code>. In this module, I'd like to use <a href=\"https://docs.wasmtime.dev/api/wasmtime_wasi/preview2/command/sync/wasi/sockets/ip_name_lookup/index.html\">https://docs.wasmtime.dev/api/wasmtime_wasi/preview2/command/sync/wasi/sockets/ip_name_lookup/index.html</a>. Where in the wasm book, examples, or elsewhere most closely demonstrates how? The main disconnect I have is, how do I 'use' wasi API in Rust code that'll itself become wasm+wasi.</p>",
        "id": 399228103,
        "sender_full_name": "kellytk",
        "timestamp": 1698643769
    },
    {
        "content": "<p>*wasmtime book. I attempted to edit my original message however that doesn't appear to be allowed.</p>",
        "id": 399232692,
        "sender_full_name": "kellytk",
        "timestamp": 1698646861
    },
    {
        "content": "<p>(I think you can edit your messages for a few minutes and then they become locked, general Zulip feature)</p>",
        "id": 399260566,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1698658459
    },
    {
        "content": "<p>I'm not entirely sure what you mean with wasm+wasi</p>",
        "id": 399260711,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1698658520
    },
    {
        "content": "<p>Well, wasm that uses wasi API</p>",
        "id": 399260776,
        "sender_full_name": "kellytk",
        "timestamp": 1698658551
    },
    {
        "content": "<p>in general you just use the libc functions, as in, rust's builtin name lookup calls, wasi translates that to use wasi_sockets and then the runtime either allows the calls or blocks them</p>",
        "id": 399261339,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1698658709
    },
    {
        "content": "<p>I haven't worked with wasi_sockets at all yet, so I can't help with specifics</p>",
        "id": 399261615,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1698658783
    },
    {
        "content": "<p>Makes sense! I'll try that, thank you :-)</p>",
        "id": 399261863,
        "sender_full_name": "kellytk",
        "timestamp": 1698658834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"550770\">@Ramon Klass</span> Which Rust builtin name lookup calls did you have in mind?</p>",
        "id": 399289404,
        "sender_full_name": "kellytk",
        "timestamp": 1698668192
    },
    {
        "content": "<p>Neither <code>wasi-libc</code> nor the Rust standard library (which is based on <code>wasi-libc</code> when targeting <code>wasm32-wasi</code>) have <code>wasi-sockets</code> support yet.  I'm planning to start working on that in a few weeks if nobody beats me to it.<br>\nMeanwhile, you could consider calling the <code>wasi-sockets</code> host functions directly using bindings generated by <code>wit-bindgen</code>; I haven't tried that myself, though.</p>",
        "id": 399303567,
        "sender_full_name": "Joel Dice",
        "timestamp": 1698673168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> Oh and so there's no Rust API available, whether in std or a crate, to perform host name resolving to addresses in a wasm module? The wit-bindgen bindings are currently the only possible option?</p>",
        "id": 399304219,
        "sender_full_name": "kellytk",
        "timestamp": 1698673360
    },
    {
        "content": "<p>To my knowledge, yes, that's correct.  <code>wasi-sockets</code> is quite new, and the infrastructure and implementations are still being built.</p>",
        "id": 399304384,
        "sender_full_name": "Joel Dice",
        "timestamp": 1698673418
    },
    {
        "content": "<p>Would you happen to know if that approach is documented somewhere, say, in the wasmtime book?</p>",
        "id": 399305627,
        "sender_full_name": "kellytk",
        "timestamp": 1698673799
    },
    {
        "content": "<p>I'm not aware of any docs specific to <code>wasi-sockets</code>, but there is general documentation about importing host interfaces with <code>wit-bindgen</code>/<code>cargo-component</code> at <a href=\"https://component-model.bytecodealliance.org/language-support/rust.html#importing-an-interface-with-cargo-component\">https://component-model.bytecodealliance.org/language-support/rust.html#importing-an-interface-with-cargo-component</a>.  In this case, you'll want to copy the WIT files from the crates/wasi/wit directory of the version of Wasmtime you plan to use.  You'll want to make sure it's the exact same (and fairly recent) version since the interfaces have not yet stabilized and have changed from version to version.</p>",
        "id": 399306844,
        "sender_full_name": "Joel Dice",
        "timestamp": 1698674165
    },
    {
        "content": "<p>Thank you for the helpful primer</p>",
        "id": 399308276,
        "sender_full_name": "kellytk",
        "timestamp": 1698674546
    }
]