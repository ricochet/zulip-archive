[
    {
        "content": "<p>A random thought I just had: from a module-linking perspective, you can always add extra exports to a module and it can still be used wherever it could have been used before due to module-level subtyping. However, with WASI commands, we explicitly check for and disallow (or sometimes just warn) extra exports other than <code>_start</code>.</p>\n<p>It might make sense to switch to the subtyping paradigm for WASI commands.</p>\n<p>I understand we don't want to encourage random code shapes turning into de facto standards, but I don't see how that is an issue if we are ignoring the extra exports. Mostly I've just found these restrictions to be annoying when trying to benchmark/run existing Wasm modules that happen to have some extra exports but which don't rely on them being used/called at all.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span></p>",
        "id": 252358652,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1631042635
    },
    {
        "content": "<p>Part of the context is that with module linking, the vision is more \"user designs an interface in a witx file\" and less \"user adds -Wl,-export-dynamic which isn't really meant for this, but it's a way to export all their symbols because they want to call some of them\".</p>",
        "id": 252359084,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1631042836
    },
    {
        "content": "<p>So as we transition into module linking, I expect it'll make sense to be careful about module linking ABIs, and to relax the restrictions on core-wasm ABIs.</p>",
        "id": 252359246,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1631042914
    }
]