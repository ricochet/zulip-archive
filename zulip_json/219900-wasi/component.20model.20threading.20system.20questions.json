[
    {
        "content": "<p>why is threading limited to threads?</p>",
        "id": 472747520,
        "sender_full_name": "Soni L.",
        "timestamp": 1727286602
    },
    {
        "content": "<p>why are threads provided by component model?</p>",
        "id": 472749603,
        "sender_full_name": "Soni L.",
        "timestamp": 1727287433
    },
    {
        "content": "<p>can't we make an API that provides for a host to provide an API for threads?</p>",
        "id": 472749728,
        "sender_full_name": "Soni L.",
        "timestamp": 1727287470
    },
    {
        "content": "<p>(or even like popen or async-signal safety)</p>",
        "id": 472749784,
        "sender_full_name": "Soni L.",
        "timestamp": 1727287489
    },
    {
        "content": "<p>there's this amazing paper we've been reading that in our opinion basically does away with the need of language support for threads <a href=\"http://tom7.org/papers/modal-types-for-mobile-code.pdf\">http://tom7.org/papers/modal-types-for-mobile-code.pdf</a></p>",
        "id": 472749911,
        "sender_full_name": "Soni L.",
        "timestamp": 1727287544
    },
    {
        "content": "<p>There are a bunch of questions here but to add a note on the last: tom7's dissertation is certainly interesting, but the goal of WASI is (I think) not to pull in advanced type system features and do something radically different -- there is only so much innovation budget to take in one step</p>",
        "id": 472750187,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1727287660
    },
    {
        "content": "<p><del>we need interrupt handling in component model if we wanna be able to stick component model in microcontrollers</del></p>",
        "id": 472750784,
        "sender_full_name": "Soni L.",
        "timestamp": 1727287913
    },
    {
        "content": "<p><del>someone recently made a custom-page-sizes proposal that makes wasm far more viable in microcontrollers than it's ever been, it'd be unfortunate if we couldn't use it due to lack of support for interrupt handling</del></p>",
        "id": 472751017,
        "sender_full_name": "Soni L.",
        "timestamp": 1727288029
    },
    {
        "content": "<p>I'm not sure why you have strikeout over all your text, and interrupt handling is a different question than either threading or modal types above, but re: embedded use-cases, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> has done some thinking around this</p>",
        "id": 472751152,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1727288078
    },
    {
        "content": "<p>the reason is that modal types solve both threading and interrupt handling</p>",
        "id": 472751251,
        "sender_full_name": "Soni L.",
        "timestamp": 1727288125
    },
    {
        "content": "<p>Ah, OK. You're certainly welcome to propose a design based around that in more detail (linking to a dissertation alone is not enough), but keep in mind what I said above: there's only so much innovation budget we can spend; something that diverges radically from the way these use-cases are usually solved will have an uphill battle</p>",
        "id": 472751760,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1727288344
    },
    {
        "content": "<p>it's the concept of worlds (not to be confused with component model worlds - also why are component model worlds called worlds if they don't seem to provide any actual isolation? but anyway) that makes it work for these things</p>",
        "id": 472751767,
        "sender_full_name": "Soni L.",
        "timestamp": 1727288346
    },
    {
        "content": "<p>Design proposals would be interesting but I'd encourage you to keep a few principles in mind:</p>\n<ul>\n<li>Black-and-white thinking based on \"this idea will solve the problem, why do it any other way\" is generally not as convincing or helpful to others; try to frame things in terms of tradeoffs. It's clear to me we could solve interrupts in a bunch of different ways: reentrant calls into Wasm, messages to an event loop, etc. Latching onto one idea and discarding all others prematurely is a bad way to come to consensus in a standards context</li>\n<li>Extremely vague statements (\"why are threads limited to threads\") are generally unhelpful: others don't have the context that you do, and we can't read your mind, nor do most folks want to sit down and read a whole dissertation. Examples and succinct explanations go a long way</li>\n<li>I'd again (similar to the thread the other day) encourage you to hold the existing design with a bit more curiosity and humility: \"why is it X if it doesn't actually...\" \"it's a bad scripting language\" \"it's just RPC\" etc... there has been a lot of thinking into the current architecture and there are good reasons for most of the choices, if something is perplexing to you it's worthwhile trying to understand what design tradeoffs may have led folks to the choices they made. That can also help inform further thinking about new solutions. It's <em>usually</em> the case that systems are not designed so poorly that one can jump in, instantly know better, discard everything and propose a radically better approach -- or if that is the case, let's see a detailed explanation why</li>\n</ul>",
        "id": 472752675,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1727288683
    },
    {
        "content": "<p>the reason we're bringing it up now is that we believe it's not yet too late to discuss it, unlike... the unfortunate fact that the GC proposal allows cyclic references, which we're slightly upset about. well anyway, no point in discussing that.</p>\n<p>the simple fact is that spawning a thread, a process, or setting up interrupt handlers, are more or less the same APIs (with varying levels of \"things you're allowed to share\" and \"how simultaneous these things are\"), but hooked up to different backends. what we wanna see is an API that allows a component, like <code>wasi-threads</code> to <em>export</em> a function that spawns threads, instead of baking it into component model. likewise we could have <code>wasi-signals</code> and <code>wasi-popen</code> using the same principle.</p>\n<p>there are huge benefits to using \"more or less the same API\" instead of doing the same thing multiple times. like yeah, we could probably shove popens and interrupts into component model separately, but then you'd have to come up with <em>3</em> separate \"how does this interact with the rest of the API\", one for each of them, and if you overlook anything then things can go really wrong and you get unsoundness. having a model that describes what they're allowed to do and using the same model for all of them lets you get away with a lot more, even if it does take a little more upfront work.</p>\n<p>does this make sense?</p>",
        "id": 472755123,
        "sender_full_name": "Soni L.",
        "timestamp": 1727289696
    },
    {
        "content": "<p>In general, threading (and similarly: forking) is not \"just\" a function like any other. It affects many aspects of the runtime semantics.</p>",
        "id": 472755761,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1727289968
    },
    {
        "content": "<p>I recall there being a detailed blogpost about this in the context of WASM/WASI. But can find it right now</p>",
        "id": 472755896,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1727290048
    },
    {
        "content": "<p>I don't think GC would be terribly useful if it didn't allow cycles (at least I can't think of a GC'd language that would be able to use it if that were the case)</p>",
        "id": 472756338,
        "sender_full_name": "David Lloyd",
        "timestamp": 1727290223
    },
    {
        "content": "<p>another use-case (and this one may be of interest to the serverless folks) is the ability to seamlessly use wasm in the database, with the embedder automatically handling the whole \"sending the relevant core modules to the database\" and stuff</p>\n<p>should we stick that in the component model itself, like we're doing with threads?</p>",
        "id": 472756505,
        "sender_full_name": "Soni L.",
        "timestamp": 1727290310
    },
    {
        "content": "<p>it's more or less the same problem domain</p>",
        "id": 472756636,
        "sender_full_name": "Soni L.",
        "timestamp": 1727290355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"495925\">David Lloyd</span> <a href=\"#narrow/stream/219900-wasi/topic/component.20model.20threading.20system.20questions/near/472756338\">said</a>:</p>\n<blockquote>\n<p>I don't think GC would be terribly useful if it didn't allow cycles (at least I can't think of a GC'd language that would be able to use it if that were the case)</p>\n</blockquote>\n<p>(erlang/elixir)</p>",
        "id": 472756662,
        "sender_full_name": "Soni L.",
        "timestamp": 1727290371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703786\">Soni L.</span> <a href=\"#narrow/stream/219900-wasi/topic/component.20model.20threading.20system.20questions/near/472756505\">said</a>:</p>\n<blockquote>\n<p>another use-case (and this one may be of interest to the serverless folks) is the ability to seamlessly use wasm in the database, with the embedder automatically handling the whole \"sending the relevant core modules to the database\" and stuff</p>\n<p>should we stick that in the component model itself, like we're doing with threads?</p>\n</blockquote>\n<p>and here's the thing - we think wasm should be supporting such use-cases. not via \"stick an API for each use-case into the component model specification (or some extension)\" but \"provide an API for the general class of these use-cases\".</p>",
        "id": 472757117,
        "sender_full_name": "Soni L.",
        "timestamp": 1727290585
    },
    {
        "content": "<p>As Chris said above; Feel free to write up a proposal for a generic mechanism that unifies threading and \"sending the relevant core modules to the database and stuff\"</p>",
        "id": 472757867,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1727290886
    }
]