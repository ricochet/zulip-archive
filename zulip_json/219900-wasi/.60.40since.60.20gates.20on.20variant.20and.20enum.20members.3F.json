[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> question: should individual members on variants/enums be tagged with a <code>@since</code> gate? - If this was Rust I'd say: \"yes\", since we have the <code>#[non_exhaustive]</code> attribute which sets enums up to be forward-compatible. But I'm not sure what the thinking is for WIT around this. I don't think we have an equivalent attribute right now?</p>",
        "id": 440880604,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716824973
    },
    {
        "content": "<p>I can see this being relevant for things like error cases which we may want to extend later. Or for example in the case of HTTP there have been a number of new verbs added via RFCs over the years.</p>",
        "id": 440880815,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716825050
    },
    {
        "content": "<p>Right now the <code>wit-tools</code> patch adding the <code>@since</code> gates does not seem to support it, so I guess I was wondering what our thinking here was.</p>",
        "id": 440880964,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716825116
    },
    {
        "content": "<p>Oh I guess <code>@since</code> also can't be added to individual struct fields right now either</p>",
        "id": 440885431,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716826701
    },
    {
        "content": "<p>Yep, that's right</p>",
        "id": 440885535,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1716826753
    },
    {
        "content": "<p>Uh oh, I should have re-read the doc you wrote, shouldn't I?</p>",
        "id": 440885682,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716826813
    },
    {
        "content": "<p>(I'll go do that now haha)</p>",
        "id": 440885696,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716826823
    },
    {
        "content": "<p>I think the difference between Rust and WIT types here means that it doesn't make sense to put individual annotations on variants/fields because subtyping in the component model considers two structurally-the-same types equivalent, meaning that you don't have the same level of privacy in WIT that you can get in Rust</p>",
        "id": 441073091,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716912996
    },
    {
        "content": "<p>In other words, adding a variant is never backward compatible today, right?</p>",
        "id": 441073798,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716913237
    },
    {
        "content": "<p>correct, yeah</p>",
        "id": 441073829,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716913250
    },
    {
        "content": "<p>okk, I see! ty</p>",
        "id": 441077897,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716914752
    },
    {
        "content": "<p>that does seem tough though - If I'm understanding it correctly, that would then mean that post-WASI 1.0, if a new HTTP verb would be published, we wouldn't have a way to add it to <code>wasi:http</code> without breaking the interface. I guess I was expecting at least some form of forward-compatibility?</p>",
        "id": 441078368,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716914949
    },
    {
        "content": "<p>that's correct, and that's more-or-less just how the component model works</p>",
        "id": 441078445,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716914988
    },
    {
        "content": "<p>we'd have to add new types for extenable-enums or extenable-structs to the component model to allow for such a use case</p>",
        "id": 441078493,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915003
    },
    {
        "content": "<p>and/or a different versioning story</p>",
        "id": 441078541,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/.60.40since.60.20gates.20on.20variant.20and.20enum.20members.3F/near/441078541\">said</a>:</p>\n<blockquote>\n<p>and/or a different versioning story</p>\n</blockquote>\n<p>by that you mean: \"WASI 1.0 doesn't mean no breaking changes forever after\"? - e.g. folks would expect to work with potentially a 2.0, 3.0, etc.</p>",
        "id": 441078959,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716915183
    },
    {
        "content": "<p>IMO we're not far enough along to really answer that</p>",
        "id": 441079236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915302
    },
    {
        "content": "<p>no one wants continual breaking changes after a \"one dot oh\" no matter what</p>",
        "id": 441079262,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915313
    },
    {
        "content": "<p>so that's at least the guiding light to me</p>",
        "id": 441079277,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915319
    },
    {
        "content": "<p>yeah yeah yeah, that was my expectation too - I'm glad we're on the same page ^^</p>",
        "id": 441079293,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716915331
    },
    {
        "content": "<p>I was mostly trying to understand what you were saying - when you said: \"different versioning story\" my mind immediately went to: \"oh, so.. breaking changes?\"</p>",
        "id": 441079437,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716915376
    },
    {
        "content": "<p>The component-model repo used to have a \"subtyping\" section. The idea is/was that new fields (structs), cases (variants) and parameters (functions) could be added in a backwards-compatible way. I don't know where that section went, though.</p>",
        "id": 441079460,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1716915390
    },
    {
        "content": "<p>oh interesting!</p>",
        "id": 441079721,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716915496
    },
    {
        "content": "<p>Found it. It was removed in <a href=\"https://github.com/WebAssembly/component-model/pull/255\">Clarify what's in Preview 2</a>. So I don't know if it was just temporarily removed for the preview 2 launch, or if it is a permanent change.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/255\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fc77a7df7068b87049e8f7df30417993c59fcbd2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363462386334396165343365316237313466366333326464656463373462306130316564303430633636393461333861653464643237626237346531346238302f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f323535&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/255\" title=\"Clarify what's in Preview 2 by lukewagner · Pull Request #255 · WebAssembly/component-model\">Clarify what's in Preview 2 by lukewagner · Pull Request #255 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This PR implements the idea in #229 of qualifying the parts of the current proposal that are not included in the upcoming 'Preview 2' stability milestone.  Subtyping wasn't really written, so I sim...</div></div></div>",
        "id": 441079812,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1716915538
    },
    {
        "content": "<blockquote>\n<p>a new HTTP verb</p>\n</blockquote>\n<p>There is a solution for this <em>specific</em> problem in place (along with any nonstandard verbs): <a href=\"https://github.com/WebAssembly/wasi-http/blob/a81c61fc584278f801393b22289840a439e51f50/wit/types.wit#L21\">https://github.com/WebAssembly/wasi-http/blob/a81c61fc584278f801393b22289840a439e51f50/wit/types.wit#L21</a></p>\n<blockquote>\n<p><code>other(string)</code></p>\n</blockquote>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/blob/a81c61fc584278f801393b22289840a439e51f50/wit/types.wit#L21\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e195fce7a24aabab813b2d7b69d1aae4499baeb9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313965336465616663653164313965346362343564656531666335376438366233393736373461356235316535343635623761653133313965356464623364652f576562417373656d626c792f776173692d68747470&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/blob/a81c61fc584278f801393b22289840a439e51f50/wit/types.wit#L21\" title=\"wasi-http/wit/types.wit at a81c61fc584278f801393b22289840a439e51f50 · WebAssembly/wasi-http\">wasi-http/wit/types.wit at a81c61fc584278f801393b22289840a439e51f50 · WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 441079909,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716915591
    },
    {
        "content": "<p>yeah I can expand by saying that there's a few different ways we could go about making things extensible</p>",
        "id": 441080601,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915865
    },
    {
        "content": "<p>e.g. a different way to update versions, a subtyping story, something more general like <code>other(string)</code>, all of these are possible in theory</p>",
        "id": 441080632,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915881
    },
    {
        "content": "<p>it's moreso that right now no such story exists and one needs to be created to enable a story for backwards-compatibly adding variants/fields</p>",
        "id": 441080696,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1716915910
    },
    {
        "content": "<p>ok, yeah that makes sense to me</p>",
        "id": 441080938,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716916007
    },
    {
        "content": "<p>knowing that we've got options we can explore in the future is probably the higher-order bit in my question</p>",
        "id": 441080966,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716916021
    },
    {
        "content": "<p>ty for elaborating ^^</p>",
        "id": 441081000,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1716916031
    },
    {
        "content": "<p>I still very much want to re-add subtyping so that it's possible to, in particular, add cases to variants in a non-breaking fashion.  I initially added the Subtyping section because it seemed easy enough at the component-type level.  But the problem is that just because a component-function-type <code>f1</code> is a subtype of <code>f2</code>, that doesn't mean that the source-level bindings are a subtype (or the Canonical ABI which sometimes shows through directly in the source-leve bindings), and thus if we say that a WIT-level change is semver-compatible, it may actually produce source-incompatible, and thus breaking, changes.  So in the short-term we just disabled subtyping so we could sort it out more carefully later.</p>",
        "id": 441081505,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1716916250
    },
    {
        "content": "<p>what's the upshot of the current situation? right now, we just need to define a new type?</p>",
        "id": 441081817,
        "sender_full_name": "Ralph",
        "timestamp": 1716916400
    },
    {
        "content": "<p>Yeah, new type used by new function (or make a breaking version change and change the type/function in-place)</p>",
        "id": 441082120,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1716916539
    },
    {
        "content": "<p>Part of the reason to take some time to figure out the right solution is that there are a couple of different paths:</p>\n<p>There's one path where we try to support maximal subtyping (and thus API Evolution flexibility) by doing magic in the toolchain to capture the version you compiled against so that from \"inside\" the component, your bindings stay with a fixed type (even if the interface itself changes) until you intentionally bump it (and then opt into any source-level breaking changes).  This seems like a cool sci-fi thing we could do, but it adds a new dimension of versioning and complexity to think about and so perhaps is too magic.</p>\n<p>There's a more conservative path of only allowing subtyping when we have a reasonably-thought-out answer for how this form of subtyping can be implemented source-compatibly in all the languages we can think of, so that if source bindings always use the latest minor version, client source code never breaks.  But this is a pretty stringent requirement when you consider, e.g., C, which is going to pretty much lay bare the whole Canonical ABI and thus the size of variants/records is an observable part of the interface; in the limit this rules out almost all subtyping.  But perhaps there's some smart things we can do here to carve out just enough wiggle room for the cases we need.</p>\n<p>Also, a built-in <code>error</code> type (which might be a necessary part of the overall <code>stream</code> feature) that supports a more dynamically-typed form of error case analysis (like <code>anyhow::Error</code>) could subsume a bunch (but definitely not all all) use cases for extensibility in the 0.3 timeframe.</p>",
        "id": 441084602,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1716917590
    },
    {
        "content": "<blockquote>\n<p>But this is a pretty stringent requirement when you consider, e.g., C, which is going to pretty much lay bare the whole Canonical ABI and thus the size of variants/records is an observable part of the interface</p>\n</blockquote>\n<p>If a function returns a struct with 3 fields and you are subtyping this function to one that returns only two fields, as far as the canonical ABI is concerned on the callee side only those two fields really exist and thus contribute to the observable size, right? Both the caller and callee can have a different view of what fields exist. The glue code between components is responsible for adding/removing fields as necessary when translating.</p>",
        "id": 441085116,
        "sender_full_name": "bjorn3",
        "timestamp": 1716917806
    }
]