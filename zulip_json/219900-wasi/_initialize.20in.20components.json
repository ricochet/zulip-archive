[
    {
        "content": "<p>We’re working on wasip2 for Go (and TinyGo), and generate a component from a module using <code>wasm-tools component new</code>. When the same program is compiled and run in wasmtime under <code>wasip1</code>, the host calls <code>_initialize</code>. Under <code>wasip2</code>, when the generated component is executed, the <code>_initialize</code> export is <em>not</em> called.</p>\n<p>What is the best/right way to have the runtime initialized when running as a component? What function can the module export that is guaranteed to be called before any other exports?</p>\n<p>Also, how would this interact with the <code>*-module</code> compilation target? <a href=\"https://github.com/WebAssembly/component-model/pull/378\">https://github.com/WebAssembly/component-model/pull/378</a> </p>\n<p>Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/378\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c45068c340bd8f6e4b75a028a6252f484d561035/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613633343865633535623462343831363038653936373166653737623464373536326266353337323238303964663262656130306264306535343733323430372f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f333738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/378\" title=\"Add BuildTargets.md by lukewagner · Pull Request #378 · WebAssembly/component-model\">Add BuildTargets.md by lukewagner · Pull Request #378 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This PR adds BuildTargets.md to define this new concept of &quot;build targets&quot; as presented in both CG-06 and WASI-06-12, which itself was a revision of the earlier &quot;wasit2&quot; idea th...</div></div></div>",
        "id": 465818886,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724866201
    },
    {
        "content": "<p>A <code>start</code> function would certainly work, as long as your init function doesn't need to call any imports.  If it <em>does</em> need to call imports, I don't know that there's currently a component-level equivalent to <code>_initialize</code>.  I know there's been talk about such a thing, but I don't know of anything official, yet.</p>",
        "id": 465822044,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724867343
    },
    {
        "content": "<p>The component tooling I'm familiar with for e.g. C, Rust, Python, and .NET either uses lazy initialization or build-time pre-initialization and snapshotting (via e.g. Wizer).</p>",
        "id": 465822533,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724867525
    },
    {
        "content": "<p><code>_start</code>?</p>",
        "id": 465823171,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724867820
    },
    {
        "content": "<p><a href=\"https://webassembly.github.io/spec/core/valid/modules.html?highlight=start#start-function\">https://webassembly.github.io/spec/core/valid/modules.html?highlight=start#start-function</a></p>",
        "id": 465823341,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724867890
    },
    {
        "content": "<p>_start is the (unfortunately named, because of frequent confusion) entry point for wasi p1 commands</p>",
        "id": 465823605,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724868014
    },
    {
        "content": "<p>whereas <code>start</code> is the wasm core spec construct</p>",
        "id": 465823648,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1724868030
    },
    {
        "content": "<p>Hm, tried <code>start</code> and <code>_start</code> and neither are called in wasip2 context</p>",
        "id": 465829556,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724870600
    },
    {
        "content": "<p>I could totally be misremembering but <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I vaguely recall that the <code>&lt;prefix&gt;_initialize</code> function in the BuildTargets.md PR was a variation on something already implemented by <code>wasm-tools component new</code>... is that the case and, if so, is it not <code>_initialize</code>?</p>",
        "id": 465833382,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1724872209
    },
    {
        "content": "<p>ah no this is just in BuildTargets.md for now, <code>wasm-tools component new</code> doesn't have support for <code>_initialize</code> right now</p>",
        "id": 465834099,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724872550
    },
    {
        "content": "<p>that being said it would be pretty easy to add support for it, basically just instantiate the \"main module\", setup tables, then have a core wasm start sectoin pointing to <code>_initialize</code> get instantiated</p>",
        "id": 465834190,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724872577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639636\">Randy Reddig</span> <a href=\"#narrow/stream/219900-wasi/topic/_initialize.20in.20components/near/465829556\">said</a>:</p>\n<blockquote>\n<p>Hm, tried <code>start</code> and <code>_start</code> and neither are called in wasip2 context</p>\n</blockquote>\n<p>Just to be clear: I was referring to a core Wasm start function, not an export named <code>start</code> or <code>_start</code>.  I'm having trouble finding a link in the spec the describes the semantics, but a module's start function, if present, is guaranteed to be run before any export is called.</p>",
        "id": 465835481,
        "sender_full_name": "Joel Dice",
        "timestamp": 1724873133
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/219900-wasi/topic/_initialize.20in.20components/near/465834190\">said</a>:</p>\n<blockquote>\n<p>that being said it would be pretty easy to add support for it, basically just instantiate the \"main module\", setup tables, then have a core wasm start sectoin pointing to <code>_initialize</code> get instantiated</p>\n</blockquote>\n<p>That’d be great. It’d map to the WASI 0.1 behavior we see now. Are there any restrictions on what _initialize can do?</p>",
        "id": 465839980,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724874955
    },
    {
        "content": "<p>I’m happy to try to make this work in <code>wasm-tools</code> if I know roughly where to start. Where would the call to _initialize be inserted?</p>",
        "id": 465851303,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724879790
    },
    {
        "content": "<p>Oh that'd be awesome, thanks! I actually had just started to take a look at this and whipped up <a href=\"https://github.com/alexcrichton/wasm-tools/commit/a111b057d7c4b45ee2c1f501903cbcf66dd6382f\">https://github.com/alexcrichton/wasm-tools/commit/a111b057d7c4b45ee2c1f501903cbcf66dd6382f</a> so far, but that could use some double-checking and some real-world testing too (e.g. making sure it's working for Go modules). Would you be up for starting from that diff and finishing it up?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasm-tools/commit/a111b057d7c4b45ee2c1f501903cbcf66dd6382f\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/76bcb55113c6e6d1820239bdf7f9ab3c8c77327a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383565616361313361326136613839356134653132316362363134353631626363346561643730326134393039346138383834643563343361373538393532372f616c65786372696368746f6e2f7761736d2d746f6f6c732f636f6d6d69742f61313131623035376437633462343565653263316635303139303363626366363664643633383266&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasm-tools/commit/a111b057d7c4b45ee2c1f501903cbcf66dd6382f\" title=\"wip · alexcrichton/wasm-tools@a111b05\">wip · alexcrichton/wasm-tools@a111b05</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly . Contribute to alexcrichton/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 465851646,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724879946
    },
    {
        "content": "<p>Can confirm this works with TinyGo + wasip2! <br>\n<a href=\"/user_uploads/15107/MMbHQqYFV5SpYewPn9y6B5CO/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/MMbHQqYFV5SpYewPn9y6B5CO/image.png\" title=\"image.png\"><img data-original-dimensions=\"1440x982\" src=\"/user_uploads/thumbnail/15107/MMbHQqYFV5SpYewPn9y6B5CO/image.png/840x560.webp\"></a></div>",
        "id": 465861429,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724885195
    },
    {
        "content": "<p>ok great! I'll look to clean up and send a PR today</p>",
        "id": 466035824,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724942666
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1747\">https://github.com/bytecodealliance/wasm-tools/pull/1747</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1747\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2c6ea9249add3c986d588009225e0f1ed93ff7bd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663139336564343063653362333865303034616535343736663661366166316333356533363930383239366365316636373137646633636138386462303538352f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31373437&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1747\" title=\"Recognize `_initialize` in `wasm-tools component new` by alexcrichton · Pull Request #1747 · bytecodealliance/wasm-tools\">Recognize `_initialize` in `wasm-tools component new` by alexcrichton · Pull Request #1747 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This commit implements recognition of the _initialize function from WASIp1 in the componentization process of wasm-tools component new. This additionally corresponds to the same function in the pro...</div></div></div>",
        "id": 466041986,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724943840
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 466112555,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1724965528
    }
]