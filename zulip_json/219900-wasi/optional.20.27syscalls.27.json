[
    {
        "content": "<p>i probably asked something similar in the past, but i'll try again in light of p2:</p>\n<p>i'd like to have the same binary work in- and out of browser, but have access to additional functionality in the former case, and detect its absence at runtime in the latter case.</p>\n<p>at least in the past i think there was no equivalent to weak symbols or unimplemented syscalls, so i've seen people resort to some rather fanciful hacks like hardcoded virtual files for communication.</p>\n<p>has the state of the art moved in p2?</p>",
        "id": 426505671,
        "sender_full_name": "ovf",
        "timestamp": 1710410316
    },
    {
        "content": "<p>In a runtime, you can provide implementations for a WIT interface, and in the browser you can let <code>jco</code> map it to a JS implementation, and that can also just be a no-op implementation that returns an error. I don't know how exactly it's done though.</p>",
        "id": 426508666,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1710411340
    },
    {
        "content": "<p>I believe OP wants to provide extra interfaces in the browser while still working outside of the browser in an existing wasi runtime, not the other way around.</p>",
        "id": 426512389,
        "sender_full_name": "bjorn3",
        "timestamp": 1710412570
    },
    {
        "content": "<p>The process to do that is the same though.</p>",
        "id": 426512482,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1710412607
    },
    {
        "content": "<p>You can't have the extra syscalls return an error outside the browser without modifying the wasi runtime (eg writing your own executable which uses wasmtime-wasi as crate). As I understand OP wants it to work with an unchanged wasi runtime (eg the official wasmtime builds).</p>",
        "id": 426512781,
        "sender_full_name": "bjorn3",
        "timestamp": 1710412721
    },
    {
        "content": "<p>yes, thanks <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span></p>",
        "id": 426512878,
        "sender_full_name": "ovf",
        "timestamp": 1710412766
    },
    {
        "content": "<p>In that case, virtual files would be one option. I think the nicer thing would be another preopen in addition to stdin, stdout and stderr. That way you can have a pipe to connect with whatever other side. On the web you can have a handler for reads and writes to the stream, and for a runtime you can pass the path to a filesystem pipe.</p>",
        "id": 426513837,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1710413053
    },
    {
        "content": "<p>Currently there is no implementation or design for optional imports, so I believe that the state of the world is the same as before. Lots of folks still interested in it, just no implementation/design yet</p>",
        "id": 426550171,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710425472
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>! i suspect my use case could also be served by dynamically loaded (modules? components?), but i understand their implementation is roughly in the same state, per <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md</a></p>",
        "id": 426556622,
        "sender_full_name": "ovf",
        "timestamp": 1710427202
    },
    {
        "content": "<p>shared everything dynamic linking is I don't think implemented exactly as specified there but componentize-py is built on a more-or-less equivalent, so that part is more \"real\" of sorts today</p>",
        "id": 426556789,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710427254
    },
    {
        "content": "<p>sorry, completely forgot to say thanks! haven't had a chance to fully understand what componentize-py is doing, but still i'm quite interested in improving these things (i understand you guys are busy with p2 at the moment)</p>",
        "id": 431566409,
        "sender_full_name": "ovf",
        "timestamp": 1712335566
    }
]