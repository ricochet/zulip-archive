[
    {
        "content": "<p>Hi everyone. Have been following wasm for a while (since the asm.js days), but am new to working with it hands on.</p>\n<p>I am a co-author on the hasktorch (torch-based NN) library for Haskell <a href=\"https://github.com/hasktorch/hasktorch\">https://github.com/hasktorch/hasktorch</a> and am keen to get machine learning capabilities into wasm and wasi, starting with the C++ library that PyTorch (and hasktorch) uses.</p>\n<p>(not directly related to wasi-nn but once i get more familiar with the basics and design I hope to contribute in some way there too)</p>\n<p>So far we've have had some success - thanks to help from my hasktorch collaborator Junji Hashimoto, am able to get libtorch built and running a small program.</p>\n<p><a href=\"/user_uploads/15107/SG2OzmfXPn8YSAY9eKytuffI/Screen-Shot-2020-11-16-at-8.04.02-AM.png\">Screen-Shot-2020-11-16-at-8.04.02-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/SG2OzmfXPn8YSAY9eKytuffI/Screen-Shot-2020-11-16-at-8.04.02-AM.png\" title=\"Screen-Shot-2020-11-16-at-8.04.02-AM.png\"><img src=\"/user_uploads/15107/SG2OzmfXPn8YSAY9eKytuffI/Screen-Shot-2020-11-16-at-8.04.02-AM.png\"></a></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/hasktorch/hasktorch\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/27371826?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/hasktorch/hasktorch\" title=\"hasktorch/hasktorch\">hasktorch/hasktorch</a></div><div class=\"message_embed_description\">Tensors and neural networks in Haskell. Contribute to hasktorch/hasktorch development by creating an account on GitHub.</div></div></div>",
        "id": 216867793,
        "sender_full_name": "Austin Huang",
        "timestamp": 1605532005
    },
    {
        "content": "<p>However, trying to get the same .wasm binary to run in wasmtime, I get the following error:</p>\n<p><a href=\"/user_uploads/15107/v1QIi4d7bBmubU35qRpI9V3e/image.png\">image.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/v1QIi4d7bBmubU35qRpI9V3e/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/v1QIi4d7bBmubU35qRpI9V3e/image.png\"></a></div><p>Any ideas/pointers?</p>",
        "id": 216867876,
        "sender_full_name": "Austin Huang",
        "timestamp": 1605532074
    },
    {
        "content": "<p>If WebAssembly is an ISA, Emscripten and WASI are a little like two different operating systems which can run on it.</p>",
        "id": 216873397,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605535003
    },
    {
        "content": "<p>Emscripten's compiler produces code which relies on JS support code and is designed to run in a JS engine, such as in a browser or Node</p>",
        "id": 216873572,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605535093
    },
    {
        "content": "<p>Pure-Wasm engines like Wasmtime don't have JS, and in general aren't able to run code which depends on it.</p>",
        "id": 216873667,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605535160
    },
    {
        "content": "<p>So today, the main way to compile C++ code to run in non-Web non-JS WebAssembly engines is to compile it with <a href=\"https://github.com/WebAssembly/wasi-sdk/\">wasi-sdk</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-sdk/\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-sdk/\" title=\"WebAssembly/wasi-sdk\">WebAssembly/wasi-sdk</a></div><div class=\"message_embed_description\">WASI-enabled WebAssembly C/C++ toolchain. Contribute to WebAssembly/wasi-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 216873828,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605535226
    },
    {
        "content": "<p>Thanks for the background  <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, that's very helpful. emscripten has an emcmake tool that's a drop-in replacement for cmake. Is there an equivalent in wasi-sdk? Or what would you recommend for migrating a cmake build system to use wasi-sdk?</p>",
        "id": 216913390,
        "sender_full_name": "Austin Huang",
        "timestamp": 1605551978
    },
    {
        "content": "<p>related basic question - emscripten produces javascript scaffolding for execution, that makes sense... does the lack of compatibility include to a library builds as well? or is there some way of calling out to emscripten-built library object files from a wasi-sdk built executable? thanks for bearing with me on this simple stuff.</p>",
        "id": 216939701,
        "sender_full_name": "Austin Huang",
        "timestamp": 1605564600
    },
    {
        "content": "<p>Nothing official yet, though you may find the scripts here helpful: <a href=\"https://github.com/bcoin-org/libtorsion/tree/master/scripts\">https://github.com/bcoin-org/libtorsion/tree/master/scripts</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bcoin-org/libtorsion/tree/master/scripts\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/17676391?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bcoin-org/libtorsion/tree/master/scripts\" title=\"bcoin-org/libtorsion\">bcoin-org/libtorsion</a></div><div class=\"message_embed_description\">C crypto library. Contribute to bcoin-org/libtorsion development by creating an account on GitHub.</div></div></div>",
        "id": 216944640,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605567472
    },
    {
        "content": "<p>There are ways to make library use cases like what you mention work, though they're not very ergonomic right now.</p>",
        "id": 216944990,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605567669
    },
    {
        "content": "<p>To clarify re: emscripten and wasi, from this article <a href=\"https://v8.dev/blog/emscripten-standalone-wasm\">https://v8.dev/blog/emscripten-standalone-wasm</a> it seems like emscripten should be capable of generating standalone wasm builds that can run in wasmtime just using the extension - \"Another nice thing about standalone Wasm files is that you can run them in Wasm runtimes like wasmer, wasmtime, or WAVM.\"</p>\n<p>Is this article incorrect? Or maybe I'm not understanding something?</p>",
        "id": 217219047,
        "sender_full_name": "Austin Huang",
        "timestamp": 1605748733
    },
    {
        "content": "<p>It's partly true. If you use Emscripten and limit yourself to the features that Emscripten can implement with WASI calls and nothing else, then it works.</p>",
        "id": 217219229,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605748938
    },
    {
        "content": "<p>But, Emscripten doesn't offer any help and will happily mix in calls to its own runtime which aren't present in all non-Web wasm runtimes.</p>",
        "id": 217219236,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605748947
    },
    {
        "content": "<p>And, wasi-sdk has several compatibility features, such as allowing functions like <code>open</code> to work using WASI. In Emscripten, if you call <code>open</code>, you get a call to an Emscripten-specific library function.</p>",
        "id": 217219274,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605748992
    },
    {
        "content": "<p>wasi-sdk is dedicated to the non-Web use case. Emscripten treats the non-Web use case as an awkward subset of its main functionality.</p>",
        "id": 217219428,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1605749159
    }
]