[
    {
        "content": "<p>Reading the comment of issue <a href=\"https://github.com/WebAssembly/WASI/issues/247#issuecomment-610683399\" title=\"https://github.com/WebAssembly/WASI/issues/247#issuecomment-610683399\">https://github.com/WebAssembly/WASI/issues/247#issuecomment-610683399</a>, I found I should know the background well: Why do <code>read</code> and <code>write</code> receive array of strings (<code>iovec</code>s), instead of just a string?<br>\nDoesn't providing only simpler APIs suffice?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/issues/247#issuecomment-610683399\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/issues/247#issuecomment-610683399\" title=\"Proposal:  rename $ciovec and $iovec · Issue #247 · WebAssembly/WASI\">Proposal:  rename $ciovec and $iovec · Issue #247 · WebAssembly/WASI</a></div><div class=\"message_embed_description\">When I saw the name &quot;ciovec&quot; for the first time, I couldn&#39;t find what the prefix c stood for. As long as I look up, there are no other names by such a convention. So how about renamin...</div></div></div>",
        "id": 193545284,
        "sender_full_name": "YAMAMOTO Yuji",
        "timestamp": 1586504491
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span></p>",
        "id": 193560016,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1586518175
    },
    {
        "content": "<p>The short answer is, CloudABI chose to do it this way, and we haven't changed it yet.</p>",
        "id": 193578785,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586531229
    },
    {
        "content": "<p>The longer answer is:</p>",
        "id": 193579030,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586531359
    },
    {
        "content": "<p>readv/writev have better performance than copying everyting into one big buffer or than making multiple read/write calls, and in some cases there are subtle semantic reasons where one wants to read/write with multiple buffers and have the OS treat it like a single system call.</p>",
        "id": 193579070,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586531395
    },
    {
        "content": "<p>And then the observation is, given that we want readv/writev, and that they provide a superset of the functionality and performance of read/write, do we also need read/write?</p>",
        "id": 193579184,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586531439
    },
    {
        "content": "<p>The main thing plain read/write provide is convenience for people writing code by hand. That's not super important in a system like CloudABI because very few people write system calls by hand. But in WASI, we seem to have a lot higher proportion of people coding to the raw WASI APIs by hand, especially right now as people are experimenting with it.</p>",
        "id": 193579335,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586531543
    },
    {
        "content": "<p>I got it. Thank you!</p>",
        "id": 193739036,
        "sender_full_name": "YAMAMOTO Yuji",
        "timestamp": 1586741611
    },
    {
        "content": "<p>I found an interesting rule of readv/writev related to this topic: From man of readv(2) <a href=\"http://man7.org/linux/man-pages/man2/readv.2.html\" title=\"http://man7.org/linux/man-pages/man2/readv.2.html\">http://man7.org/linux/man-pages/man2/readv.2.html</a></p>\n<blockquote>\n<p>The data transfers performed by readv() and writev() are atomic: the<br>\ndata written by writev() is written as a single block that is not<br>\nintermingled with output from writes in other processes (but see<br>\npipe(7) for an exception); analogously, readv() is guaranteed to read<br>\na contiguous block of data from the file, regardless of read opera‐<br>\ntions performed in other threads or processes that have file descrip‐<br>\ntors referring to the same open file description (see open(2)).</p>\n</blockquote>\n<p>Should this rule be documented also in WASI? If so, the difference between readv/writev and read/write might be clearer. And read/write could be implemented with relatively lower overhead.</p>",
        "id": 193754213,
        "sender_full_name": "YAMAMOTO Yuji",
        "timestamp": 1586767274
    },
    {
        "content": "<p>Yes, it should be documented in WASI. If you're interested in submitting a PR for this, it should go in <code>wasi_ephemeral_fd.witx</code>.</p>",
        "id": 193900318,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586872580
    },
    {
        "content": "<p>There are a few subtleties to watch out for:</p>",
        "id": 193900378,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586872603
    },
    {
        "content": "<p>The document you quoted above is the Linux man page; in POSIX, the atomicity guarantee only applies to normal files and symbolic links, and not other types of streams like pipes, terminals, or sockets. It's unclear if Linux really intends to make a stronger guarantee here or if Linux's wording is just imprecise.</p>",
        "id": 193900816,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586872772
    },
    {
        "content": "<p>POSIX reference: <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_09_07\" title=\"https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_09_07\">https://pubs.opengroup.org/onlinepubs/9699919799/functions/V2_chap02.html#tag_15_09_07</a></p>",
        "id": 193900841,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586872782
    },
    {
        "content": "<p>WASI should probably follow POSIX here, unless we happen to know that other OS's provide stronger guarantees as well.</p>",
        "id": 193901028,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586872826
    },
    {
        "content": "<p>And, in POSIX, the same guarantees are applied to <code>read</code> and <code>write</code> as well, so <code>read</code> and <code>write</code> really are equivalent to <code>readv</code> and <code>writev</code> with one buffer.</p>",
        "id": 193901413,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586872970
    }
]