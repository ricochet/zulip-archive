[
    {
        "content": "<p>I made a prototype/polyfill for composable, Preview 3-style async: <a href=\"https://github.com/dicej/isyswasfa\">https://github.com/dicej/isyswasfa</a><br>\nIt's still very experimental (I just got composition working this afternoon), but it's rapidly approaching usability.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/isyswasfa\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c6b562fb27a2771c9f454789b8ce72e36b57e094\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396531623964366338316562333931343735653663623362656663616233326130643039313330313566323165633730373563316534313439333635383735312f646963656a2f697379737761736661)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/isyswasfa\" title=\"GitHub - dicej/isyswasfa: I sync, you sync, we all sync for async!\">GitHub - dicej/isyswasfa: I sync, you sync, we all sync for async!</a></div><div class=\"message_embed_description\">I sync, you sync, we all sync for async! Contribute to dicej/isyswasfa development by creating an account on GitHub.</div></div></div>",
        "id": 418970916,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706679044
    },
    {
        "content": "<p>That is absolutely great!</p>",
        "id": 419004587,
        "sender_full_name": "Ralph",
        "timestamp": 1706695413
    },
    {
        "content": "<p>that name is great :)</p>",
        "id": 419023885,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1706702238
    },
    {
        "content": "<p>Interesting. How does it handle child components that call out to <code>pollable::block</code> or <code>poll::poll</code>? Would that be game-over for concurrency in the parent?</p>",
        "id": 419038476,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1706707460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"378155\">Dave Bakker (badeend)</span> <a href=\"#narrow/stream/219900-wasi/topic/isyswasfa/near/419038476\">said</a>:</p>\n<blockquote>\n<p>Interesting. How does it handle child components that call out to <code>pollable::block</code> or <code>poll::poll</code>? Would that be game-over for concurrency in the parent?</p>\n</blockquote>\n<p>Correct -- none of the components in a composition should do blocking calls, just like with e.g. async functions in Rust.  In practice, they can probably write to stdout (which technically involves a call to <code>blocking_write_and_flush</code>) since it won't block \"much\", but in general blocking  hostcalls <em>will</em> block everything.</p>\n<p>However, we <em>do</em> have a plan for composing async components with sync components (or more specifically, allowing async calls to synchronous, blocking, non-reentrant components).  There's no way to do this with e.g. <code>wasm-compose</code> since the component model has no way to express this (yet!), but we <em>can</em> do it in the host at runtime.  That's what this item in the \"Planned features\" section of README.md is about:</p>\n<blockquote>\n<p>Host-side code generation for bridging async and sync components using backpressure to serialize async-&gt;sync calls without blocking the caller</p>\n</blockquote>\n<p>The idea is to allow the host to mediate access to a sync component, providing backpressure to any and all async components which have made calls into that sync component.</p>",
        "id": 419050175,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706710913
    },
    {
        "content": "<p>To clarify: this would be <em>non-blocking</em> backpressure -- i.e. the async component(s) would still be able to make progress on other things while <code>await</code>ing the synchronous call.  They can even make <em>more</em> calls to the same synchronous component concurrently, with the host serializing the calls automatically.  The key to making that work would be to run each synchronous component in its own fiber, independent of the fiber running the async component(s).</p>",
        "id": 419055309,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706712230
    },
    {
        "content": "<p>I expect <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> will have more to say about that during the async session at the contributor summit.</p>",
        "id": 419055648,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706712326
    },
    {
        "content": "<p>Alright. Got it. <br>\nGreat work, BTw</p>",
        "id": 419058482,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1706713118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> can you elaborate on this a tad: <code>Host-side code generation for bridging async and sync components using backpressure to serialize async-&gt;sync calls without blocking the caller</code> from the readme?</p>",
        "id": 419062742,
        "sender_full_name": "Ralph",
        "timestamp": 1706714318
    },
    {
        "content": "<p>no hurry, of course, just wanna be sure I know what you're saying about this.</p>",
        "id": 419062781,
        "sender_full_name": "Ralph",
        "timestamp": 1706714334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> please see my response to Dave above and let me know if it needs more clarification</p>",
        "id": 419063713,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706714584
    },
    {
        "content": "<p>I'm looking forward to Luke speaking today, of course. THIS was the phrase I meant: <code>since the component model has no way to express this (yet!)</code>. I'm assuming you mean the async work we'll need in the expressions the model supports....?</p>",
        "id": 419064184,
        "sender_full_name": "Ralph",
        "timestamp": 1706714711
    },
    {
        "content": "<p>but in any case, I'll keep this in mind as luke's chat comes.....</p>",
        "id": 419064240,
        "sender_full_name": "Ralph",
        "timestamp": 1706714727
    },
    {
        "content": "<blockquote>\n<p>but we can do it in the host at runtime</p>\n</blockquote>\n<p>I think this is referring to wasmtime's trampoline <code>async_support</code>, where \"blocking\" client calls are exposed as async to the host.</p>",
        "id": 419065394,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1706715063
    },
    {
        "content": "<p>I think the main discussion about async, led by Luke, is tomorrow if I'm reading the agenda correctly.</p>\n<p>The goal with <code>isyswasfa</code> is to do as much as possible with guest- and host-side code generation to compensate for the lack of async support in the component model as it exists today.  In the future, such hackery will not be necessary, and any component-model-capable host or composition tool will understand what it means to do an asynchronous call to a synchronous, non-reentrant component.  For the time being, we need to build that on top of Wasmtime and it's fiber support, creating a fiber per synchronous component and communicating between them using e.g. async channels.</p>",
        "id": 419065670,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706715129
    },
    {
        "content": "<p>A few quick updates on <a href=\"https://github.com/dicej/isyswasfa\"><code>isyswasfa</code></a>:</p>\n<ul>\n<li>I've added Python guest language support, so now you can do composable concurrency in both Rust and Python</li>\n<li>I've implemented the latest version of <a href=\"https://github.com/WebAssembly/wasi-http/tree/main/wit-0.3.0-draft\"><code>wasi:http@0.3.0-draft</code></a></li>\n<li>I've added a few more examples in both Python and Rust using <code>wasi:http@0.3.0-draft</code> to demonstrate concurrent outbound requests, streaming and forwarding request and response bodies, etc.</li>\n<li>There's now a CLI interface for running <code>isyswasfa</code>-flavored <code>wasi:http@0.3.0-draft</code> components using <code>isyswasfa serve</code>; see the README.md for examples that use it.</li>\n</ul>\n<p>Next, I'll be shifting my focus to making <code>isyswasfa</code> obsolete as quickly as possible by implementing proper CM async support in <code>wasm-tools</code>, <code>wasmtime</code>, etc, working with Luke to nail down the design details as necessary.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/isyswasfa\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8236b66db57acf5ddb6ec8a84a8d7abfc00872ff\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396464653031613562616138633139306666616231353166643833316336346266303533336332666233623338666364623265613834376637393966303561662f646963656a2f697379737761736661)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/isyswasfa\" title=\"GitHub - dicej/isyswasfa: I sync, you sync, we all sync for async!\">GitHub - dicej/isyswasfa: I sync, you sync, we all sync for async!</a></div><div class=\"message_embed_description\">I sync, you sync, we all sync for async! Contribute to dicej/isyswasfa development by creating an account on GitHub.</div></div></div>",
        "id": 426214204,
        "sender_full_name": "Joel Dice",
        "timestamp": 1710278287
    },
    {
        "content": "<p>yeoperson work here, <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>",
        "id": 426214300,
        "sender_full_name": "Ralph",
        "timestamp": 1710278333
    },
    {
        "content": "<p>This is all unbelievably cool. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/219900-wasi/topic/isyswasfa/near/426214204\">said</a>:</p>\n<blockquote>\n<p>Next, I'll be shifting my focus to making <code>isyswasfa</code> obsolete as quickly as possible by implementing proper CM async support in <code>wasm-tools</code>, <code>wasmtime</code>, etc, working with Luke to nail down the design details as necessary.</p>\n</blockquote>\n<p>I've been kinda half paying attention. Would you mind clarifying: is the general idea that this would theoretically be able to eventually be compatible with / make use of the core Wasm stack switching work, but for now not be blocked on any particular design emerging as the winner on that side of things?</p>",
        "id": 426429697,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1710365294
    },
    {
        "content": "<p>My opinion is that the MVP for composable async should <em>not</em> require or make use of stack switching, hence the focus on stackless coroutines (which should cover Rust, Python, JS, C#, etc. but not e.g. Go or Java).  Eventually, we'll obviously want to support stackful coroutines as well, but I don't think that needs to be part of an MVP.</p>\n<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> has pointed out that we don't necessarily need to wait for core stack switching to provide stackful coroutines -- we just need language toolchains to support reentrancy (i.e. allow the host to create multiple stacks for a single instance and use those stacks to support multiple concurrent calls).  Core stack switching would presumably allow guests to also create multiple stacks, but we don't necessarily need that here.</p>",
        "id": 426430734,
        "sender_full_name": "Joel Dice",
        "timestamp": 1710365820
    },
    {
        "content": "<p>In a nutshell: I think we can do a lot with what toolchains produce today (i.e. non-reentrant modules), so we should go ahead and do that, and when toolchains start supporting reentrancy we'll be able to do even more.</p>",
        "id": 426431251,
        "sender_full_name": "Joel Dice",
        "timestamp": 1710366063
    },
    {
        "content": "<blockquote>\n<p>Next, I'll be shifting my focus to making isyswasfa obsolete as quickly as possible by implementing proper CM async support in wasm-tools, wasmtime, etc, working with Luke to nail down the design details as necessary.</p>\n</blockquote>\n<p>That's awesome! When do you expect there will be an experimental <code>stream</code> type to try? I'd like that for a proposed API, and since preview 2 is already released, preview 3 would be the earliest possible point of inclusion anyways.</p>",
        "id": 426483922,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1710401563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/219900-wasi/topic/isyswasfa/near/426483922\">said</a>:</p>\n<blockquote>\n<p>I'd like that for a proposed API, and since preview 2 is already released, preview 3 would be the earliest possible point of inclusion anyways.</p>\n</blockquote>\n<p>As I understand it, there will be some backwards compatible 0.2.* versions with additional APIs before 0.3. Breaking changes would go in 0.3. That means there might be opportunities for new APIs before stream types are released.</p>",
        "id": 426494018,
        "sender_full_name": "IFcoltransG",
        "timestamp": 1710406380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"695664\">Tarek Sander</span> <a href=\"#narrow/stream/219900-wasi/topic/isyswasfa/near/426483922\">said</a>:</p>\n<blockquote>\n<p>That's awesome! When do you expect there will be an experimental <code>stream</code> type to try? I'd like that for a proposed API, and since preview 2 is already released, preview 3 would be the earliest possible point of inclusion anyways.</p>\n</blockquote>\n<p>You can use <code>stream&lt;u8&gt;</code> in <code>isywasfa</code> today -- I had to implement (a polyfill of) it to support <code>wasi:http@0.3.0-draft</code>.  The <code>isyswasfa</code> implementation is basically just syntactic sugar for <code>wasi:io/streams@0.2.0#input-stream</code>, plus a polyfill for the planned <code>stream.new</code> canon builtin which returns writable and readable handles as <code>output-stream</code> and <code>input-stream</code> instances, respectively.  I.e. it's morally equivalent to what we're planning for real <code>stream</code>s, modulo the use of <code>isyswasfa</code> in the names of things.  If desired, we could generalize that to support <code>stream&lt;T&gt;</code> for arbitrary <code>T</code> using the same approach I used to implement <code>future&lt;T&gt;</code> for arbitrary <code>T</code>: synthesize a resource type for each unique <code>T</code> as needed.</p>\n<p>But perhaps your question is not so much \"when can I try this?\", but rather \"when can I use the real version, not the polyfill?\".  If so, the answer is: as soon as I've implemented it in <code>wasm-tools</code>, <code>wasmtime</code>, <code>wit-bindgen</code>, which I'm planning to do over the next few months.</p>\n<p>And yes, per <span class=\"user-mention\" data-user-id=\"570431\">@IFcoltransG</span>'s comment: I suppose we could theoretically start using <code>stream&lt;T&gt;</code>, <code>future&lt;T&gt;</code>, and APIs which are meant to be lifted/lowered async in WASI 0.2.x releases, as long as it's done in a backwards compatible way.  I'm not sure what the implications are of using new CM features in a WASI 0.2.x release, though; at a minimum we'd need to educate users that such a release has extra host implementation requirements that did not exist when WASI 0.2.0 was released.</p>",
        "id": 426542329,
        "sender_full_name": "Joel Dice",
        "timestamp": 1710423209
    },
    {
        "content": "<p>Yes, stream&lt;T&gt; is what it'd like to use. Would awaiting work for multiple streams at once, or only one?</p>",
        "id": 426543665,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1710423600
    },
    {
        "content": "<p>Awaiting multiple streams concurrently would work just fine.</p>",
        "id": 426545513,
        "sender_full_name": "Joel Dice",
        "timestamp": 1710424134
    },
    {
        "content": "<p>After trying out this out over the weekend, I'm also looking forward to a <code>stream&lt;T&gt;</code></p>",
        "id": 427741366,
        "sender_full_name": "Simon",
        "timestamp": 1710860142
    },
    {
        "content": "<p>Mainline Go already uses multiple stacks per goroutine, separate from the wasm call stack. It <em>should</em> already be reentrant.</p>",
        "id": 429171803,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711269163
    },
    {
        "content": "<p>Cool - that's great news.  Does it also support Cgo, and if so, how does the C side of things manage multiple shadow stacks (i.e. the places where stack-allocated objects whose addresses have been taken reside)?</p>",
        "id": 429193286,
        "sender_full_name": "Joel Dice",
        "timestamp": 1711282345
    },
    {
        "content": "<p>It doesn’t interact with Cgo at all.</p>",
        "id": 429238260,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711307698
    },
    {
        "content": "<p>Note: you might need a specific fork of TinyGo to use the output of this at the moment. We hope to land Component Model and WASI Preview 2 support in TinyGo soon.</p>",
        "id": 429238290,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711307742
    },
    {
        "content": "<p>Hi there  everyone , Is iasyswasma fs ready to use ?<br>\nI have a requirement to run concurrent programming on guest side in component model .</p>",
        "id": 439956946,
        "sender_full_name": "Afshan Ahmed Khan",
        "timestamp": 1716353561
    },
    {
        "content": "<p>Also which is the most simple test case in rust-cases to understand how I can use the guest and host for concurrent processing on guest side ? <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>",
        "id": 439957836,
        "sender_full_name": "Afshan Ahmed Khan",
        "timestamp": 1716354187
    },
    {
        "content": "<p>I think the simplest example is round trip - I modified that example to get what I wanted to achieve . But got an error , I have filed an issue - <a href=\"https://github.com/dicej/isyswasfa/issues/4\">https://github.com/dicej/isyswasfa/issues/4</a>.<br>\nCan you guys help ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/isyswasfa/issues/4\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b27023d1fc6869ee1ea716c010eab5f993527788/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653038313931623233303666353536366563343336386362653337613831663431653464303633326133366538636635363935313961323233613666356635652f646963656a2f6973797377617366612f6973737565732f34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/isyswasfa/issues/4\" title=\"wasm trap: cannot enter component instance · Issue #4 · dicej/isyswasfa\">wasm trap: cannot enter component instance · Issue #4 · dicej/isyswasfa</a></div><div class=\"message_embed_description\">I modified the round trip example like follows but I am getting error - wasm trap: cannot enter component instance I added below two static variables - // test/src/lib.rs static mut ROUND_TRIP: Opt...</div></div></div>",
        "id": 440030272,
        "sender_full_name": "Afshan Ahmed Khan",
        "timestamp": 1716362412
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"721863\">@Afshan Ahmed Khan</span>.  <code>isyswasfa</code> is an experimental project which will become obsolete once proper async support has been added to the component model, which is what Luke Wagner and I have been working on (see my recent update <a href=\"#narrow/stream/223391-wasm/topic/Component.20Model.20Implementation.20Bi-Weekly/near/439301362\">here</a>).  Feel free to use it and report any issues you find, but keep in mind that I'll stop supporting it once the component model features are in a usable state.</p>\n<p>Also note that you don't need <code>isyswasfa</code> or CM async if you only need to run simple components (i.e. components which have not been composed with other components).  Instead you can just use a WASIp2-compatible runtime such as <a href=\"https://crates.io/crates/wasi-async-runtime\">https://crates.io/crates/wasi-async-runtime</a> or <a href=\"https://crates.io/crates/spin-executor\">https://crates.io/crates/spin-executor</a> if you're using Rust for the guest (and <code>componentize-py</code> has a built-in <code>asyncio</code> event loop for WASIp2 if you're using Python).</p>\n<p>I'll leave a comment on the issue you opened, but the short answer is that the component model currently disallows reentering a component, meaning you can't call a guest export from a host import called by the guest.  That's true for synchronous functions in the component model today and will continue to be true (AFAIK) for asynchronous functions as well.  It's an interesting use case, though, so I'll discuss some alternative approaches in the issue.</p>",
        "id": 440095765,
        "sender_full_name": "Joel Dice",
        "timestamp": 1716385611
    }
]