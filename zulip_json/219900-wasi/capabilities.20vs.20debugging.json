[
    {
        "content": "<p><a href=\"https://github.com/wasm3/wasm-trace\" target=\"_blank\" title=\"https://github.com/wasm3/wasm-trace\">https://github.com/wasm3/wasm-trace</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wasm3/wasm-trace\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/58013131?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wasm3/wasm-trace\" target=\"_blank\" title=\"wasm3/wasm-trace\">wasm3/wasm-trace</a></div><div class=\"message_embed_description\">Instruments wasm files and traces execution, using Binaryen.js and Wasmer.js - wasm3/wasm-trace</div></div></div>",
        "id": 188930983,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582554903
    },
    {
        "content": "<p>Is a fun tool, and I'm considering asking the authors if they want to add the import API to WASI</p>",
        "id": 188931035,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582554943
    },
    {
        "content": "<p>However, the trace functions don't have handles, which would make tracing an \"ambient authority\", in capability lingo</p>",
        "id": 188931168,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582554997
    },
    {
        "content": "<p>I'm contemplating whether or not this is something that matters here.</p>",
        "id": 188931259,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582555045
    },
    {
        "content": "<p>Requiring a handle would be a hassle here. And arguably, these trace functions are relatively inert -- we could define the behavior such that implementations could choose to implement all the functions as no-ops.</p>",
        "id": 188931616,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582555265
    },
    {
        "content": "<p>How crazy would it be to say that some APIs in WASI are \"debugging\" APIs, which are expected to be no-ops in any default or production setting, but which may emit tracing or other debugging things under a flag? And therefore ambient authorities are ok there?</p>",
        "id": 188932271,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582555681
    },
    {
        "content": "<p>Or maybe instead of no-ops, they'd fail to link in default/production settings.</p>",
        "id": 188932383,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582555736
    },
    {
        "content": "<p>In my very limited experience with this, I think that having debugging \"superpowers\" sounds OK.</p>",
        "id": 188932784,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1582555959
    },
    {
        "content": "<p>In fact, I reckon it would be desirable when developing any nontrivial WASI app. You know, quicker prototyping, etc.</p>",
        "id": 188932817,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1582555992
    },
    {
        "content": "<p>I have had some experience with \"anyone can print\" APIs, and I've found it a little annoying that I can't remove that ability from parts of the code.</p>",
        "id": 188938121,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582559607
    },
    {
        "content": "<p>I'm not arguing <em>hard</em> against it, but consider (for instance) whether you want that ambient authority to extend to a piece of code that's intentionally being disruptive towards debugging?</p>",
        "id": 188938241,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582559697
    },
    {
        "content": "<p>At the very least, a module might want to control whether those functions are available to another module.</p>",
        "id": 188938300,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582559733
    },
    {
        "content": "<p>(Or, for that matter, substitute in its own versions.)</p>",
        "id": 188938321,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582559753
    },
    {
        "content": "<p>Nobody should be able to just pull the \"real\" debugging function out of thin air without obtaining it by the linking process.</p>",
        "id": 188938983,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582560194
    },
    {
        "content": "<p>if we were to do this, probably good to not expose stdout/stderr to everyone, but instead some kind of dedicated debug logging streams. some programs (cough RLS cough) communicate via a protocol over stdout and any errant printing can break the whole program</p>\n<p>also, fwiw:</p>\n<ul>\n<li><a href=\"https://github.com/sliminality/wasm-trace\" target=\"_blank\" title=\"https://github.com/sliminality/wasm-trace\">https://github.com/sliminality/wasm-trace</a></li>\n<li><a href=\"https://gist.github.com/fitzgen/34073d61f2c358f2b35038fa263b74a3\" target=\"_blank\" title=\"https://gist.github.com/fitzgen/34073d61f2c358f2b35038fa263b74a3\">https://gist.github.com/fitzgen/34073d61f2c358f2b35038fa263b74a3</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sliminality/wasm-trace\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/57372?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sliminality/wasm-trace\" target=\"_blank\" title=\"sliminality/wasm-trace\">sliminality/wasm-trace</a></div><div class=\"message_embed_description\">instrumenting wasm binaries to trace function execution - sliminality/wasm-trace</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/fitzgen/34073d61f2c358f2b35038fa263b74a3\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/fitzgen/34073d61f2c358f2b35038fa263b74a3\" target=\"_blank\" title=\"Brain dump of an instrumentation-based wasm tracing tool.\">Brain dump of an instrumentation-based wasm tracing tool.</a></div><div class=\"message_embed_description\">Brain dump of an instrumentation-based wasm tracing tool. - wasm-tracing.md</div></div></div>",
        "id": 188946283,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582564797
    },
    {
        "content": "<p>Yeah, making these dedicated imports makes sense, so that applications can do interposition to control what they do, and so that implementations can safely keep them separate from stdout/stderr.</p>",
        "id": 188948233,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582566036
    },
    {
        "content": "<p>another thing is, what benefit do we get by standardizing them vs implementing support for <code>wasmtime --trace</code> or something directly in the engine?</p>",
        "id": 188948377,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582566129
    },
    {
        "content": "<p>that would allow us to side step the question of ambient authority, and also have something similar to RUST_LOG where you can turn various tracing things on/off at the level of different wasm modules</p>",
        "id": 188948433,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582566179
    },
    {
        "content": "<p>I think it comes down to developer UI. As a developer, do you want a wasmtime command-line API way to enable tracaing, or a tooling way to enable tracing?</p>",
        "id": 188948944,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582566570
    },
    {
        "content": "<p>yeah, points to be made each way.</p>\n<p>fwiw, I think the trade off is different depending on the use case and particulars of the debugging APIs</p>\n<p>for example, if we are tracing particular Wasm semantics level events, it doesn't make sense to let the user modify them because they can only mess it up. either they use a tool that does it correctly or the engine does it correctly. tracing things like <code>memory.grow</code>s would fall into this bucket. I would argue that tracing these should probably be built into the engine. </p>\n<p>but for tracing app- or module-specific custom events, it makes sense to have a custom imported tracing function. I think such an imported tracing function makes sense at a WASI level.</p>\n<blockquote>\n<p>As a developer, do you want a wasmtime command-line API way to enable tracaing, or a tooling way to enable tracing?</p>\n</blockquote>\n<p>Adding <code>--trace</code> to something I'm already using seems a lot easier to me, than adding and configuring a whole 'nother tool to my build...</p>\n<p>Of course, this is just for wasi outside the web. on the web, you'll need another tool and some associated JS, unless browser devtools build this kind of thing in</p>",
        "id": 188949669,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582567121
    }
]