[
    {
        "content": "<p>mmap seems to be in both the top half and bottom half of wasi-sdk's muslc <a href=\"https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-top-half/musl/src/mman/mmap.c\">https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-top-half/musl/src/mman/mmap.c</a> and <a href=\"https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-bottom-half/mman/mman.c\">https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-bottom-half/mman/mman.c</a> .  The top half is a weak reference so does that means it's not used, in which case why does it exist?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-top-half/musl/src/mman/mmap.c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fba421b4d6f149d12abd3d772589413ee9a6710b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646432373466353635336465396336636637653332323938363563393433393838393866613733356332643030333331313461313636613665363530616634312f576562417373656d626c792f776173692d6c696263)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-top-half/musl/src/mman/mmap.c\" title=\"wasi-libc/mmap.c at 1dfe5c302d1c5ab621f7abf04620fae92700fd22 · WebAssembly/wasi-libc\">wasi-libc/mmap.c at 1dfe5c302d1c5ab621f7abf04620fae92700fd22 · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-bottom-half/mman/mman.c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fba421b4d6f149d12abd3d772589413ee9a6710b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646432373466353635336465396336636637653332323938363563393433393838393866613733356332643030333331313461313636613665363530616634312f576562417373656d626c792f776173692d6c696263)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/1dfe5c302d1c5ab621f7abf04620fae92700fd22/libc-bottom-half/mman/mman.c\" title=\"wasi-libc/mman.c at 1dfe5c302d1c5ab621f7abf04620fae92700fd22 · WebAssembly/wasi-libc\">wasi-libc/mman.c at 1dfe5c302d1c5ab621f7abf04620fae92700fd22 · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 355903465,
        "sender_full_name": "Scott Waye",
        "timestamp": 1683243119
    },
    {
        "content": "<p>The top half code is there because we didn't go through musl and delete everything that we're not using. It's disabled either via <code>#ifdef</code> or via the Makefile.</p>",
        "id": 355903582,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1683243188
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 355903629,
        "sender_full_name": "Scott Waye",
        "timestamp": 1683243242
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 355903670,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683243247
    },
    {
        "content": "<p>WASI and Wasm don't have a real <code>mmap</code>, so <code>musl</code>'s mmap code which just expects to invoke a system call isn't usable. In the bottom half code, we have code that emulates some amount of <code>mmap</code> functionality using <code>malloc</code> + <code>read</code></p>",
        "id": 355903701,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1683243273
    },
    {
        "content": "<p>Yes, I'm looking at the bottom half and the fact that it injects a struct at the start, which presumably is why it doesn't attempt to do the page aligning</p>",
        "id": 355904235,
        "sender_full_name": "Scott Waye",
        "timestamp": 1683243664
    },
    {
        "content": "<p>It could align internally, but the value returned would not be aligned as the struct would offset the usable space.</p>",
        "id": 355904261,
        "sender_full_name": "Scott Waye",
        "timestamp": 1683243703
    },
    {
        "content": "<p>I guess it could, wastefully, allocate an extra page which just contained the struct.</p>",
        "id": 355904335,
        "sender_full_name": "Scott Waye",
        "timestamp": 1683243736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> , yes, that's it. Getting non-aligned memory can be problematic or not depending on your needs. Also, the page size in Wasm is 64KiB (vs. 4KiB in x86_64), so the amount of wasted memory would be quite big.</p>",
        "id": 357206197,
        "sender_full_name": "Jesús González",
        "timestamp": 1683707967
    }
]