[
    {
        "content": "<p>The wasi-nn specification has been moving along, slowly adding adding and modifying functionality, all based on WIT-defined features that imply the component model. But now we're trying to decide: how long should we keep the old preview1-ABI implementations alive? (I'll use preview1-ABI to refer to the WITX-defined version and preview2-ABI to refer to the WIT-defined version, since wasi-nn was not included in either preview). The problem is that, as I tried to implement new features based on the preview2-ABI in Wasmtime, it became clear that the old preview1-ABI implementation could not support them. So I proposed simply removing this older code in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8530\">#8530</a>. In <a href=\"https://github.com/bytecodealliance/meetings/blob/main/machine-learning/2024/ML-05-13.md\">discussions</a> about this in the ML working group, we wanted to match what the rest of the community is doing here. I mentioned that currently Wasmtime has an adapter that can be used to compose a preview1 core Wasm module into a preview2 component; maybe wasi-nn could do something similar to bridge the gap between existing modules and the Wasmtime implementation, which is moving forward. But this brought up questions about matching the _timeline_ of WASI implementations:</p>\n<ul>\n<li>how long does Wasmtime intend to keep preview1 support available in-tree?</li>\n<li>how soon do other runtimes intend to support preview2 in-tree?</li>\n<li>how long does Wasmtime intend to maintain the adapter? Is it feasible to add wasi-nn support to it?</li>\n</ul>\n<p>I'm interested in hearing from some of the WASI community on what the best path forward is here.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8530\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f2676833eec15f08cc388d6e5e66243aa44d93ed/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616561323062653365333966346634343438303265663230326361663164623435303539663938353162663432333134333131636131646335393166633861632f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38353330&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8530\" title=\"wasi-nn: only support components by abrown · Pull Request #8530 · bytecodealliance/wasmtime\">wasi-nn: only support components by abrown · Pull Request #8530 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a relatively drastic change to remove all the preview1, WITX-based support from Wasmtime's wasi-nn implementation. This has ramifications:\n\nWasmtime will not be able to run core modules tha...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/meetings/blob/main/machine-learning/2024/ML-05-13.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/45bdb8b89e5af160cead4555de32b21c890cbd5a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326233656130356432306130303137663634643232346164396135383964313362316339363730663534666531653665643039636133633732643166373535382f62797465636f6465616c6c69616e63652f6d656574696e6773&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/meetings/blob/main/machine-learning/2024/ML-05-13.md\" title=\"meetings/machine-learning/2024/ML-05-13.md at main · bytecodealliance/meetings\">meetings/machine-learning/2024/ML-05-13.md at main · bytecodealliance/meetings</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/meetings development by creating an account on GitHub.</div></div></div>",
        "id": 438409722,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1715620105
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>, <span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span>, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, etc...</p>",
        "id": 438410611,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1715620436
    },
    {
        "content": "<p>The adapter strategy is not one I might recommend pursuing here. The rationale for the existence of the current adapter is primarily because updating languages to support preview2 natively was a no-go when preview2 did not exist. It provided a transitionary bridge from \"nothing\" to \"ok preview2 is done and here's exactly what it is\". Without it we more-or-less couldn't have demo'd anything along the way in a way that's possible for someone other than a developer working on it to implement.</p>\n<p>The adapter itself is pretty awful to maintain. Ongoing maintenance isn't the worst but writing it \"looks like Rust\" but it definitely does not feel like Rust. It's not as simple as \"oh just throw some stuff in there\" but it instead needs to be very specially crafted against very specific rules which aren't exactly all written down. In that sense it may not even be possible to do an adapter for wasi-nn.</p>\n<p>I also think that the calculus is different for wasi-nn. There's a precise definition of the witx-based version and the WIT-based version. In that sense there's no need for a transitionary period. There's additionally no built-in standard library support for wasi-nn (unlike for example the fs-related WASI APIs) which means that it's theoretically much easier to upgrade existing support from witx to wit with some source changes and dependency updates.</p>\n<p>The one thing the adapter does buy you is the ability to run unmodified historical binaries as components. Whether or not that's critical to wasi-nn is something I'm not sure of though.</p>\n<hr>\n<p>That's a bit of background, but I can try to answer some of the specifics here as well:</p>\n<blockquote>\n<p>how long does Wasmtime intend to keep preview1 support available in-tree?</p>\n</blockquote>\n<p>If by preview1 you mean wasi_snapshot_preview1 support the answer is \"probably quite some time\". There are no plans to remove it and it's likely going to stick around for many years to come as it'll be a long time before those binaries all disappear and/or become irrelevant.</p>\n<blockquote>\n<p>how long does Wasmtime intend to maintain the adapter? Is it feasible to add wasi-nn support to it?</p>\n</blockquote>\n<p>The current adapter will likely be maintained as long as the wasi_snapshot_preview1 support, so probably quite awhile</p>",
        "id": 438413097,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715621259
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, that's helpful. In Wasmtime then, what should the plan be moving forward:</p>\n<ul>\n<li>do we plan to remove Wiggle? If so, where does <code>add_to_linker</code> come from: (a) manually re-implement or (b) dynamic \"adapt-to-component\" (<span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> and I were discussing this)</li>\n<li>should we test the preview1-ABI _and_ the preview2-ABI functionality? It's unclear to me how to do this easily with single-source tests (i.e., using a single test for both ABIs) because I'm concerned how the guest language accesses the API may be different (e.g., dynamic wit-bindgen bindings vs static witx bindings)</li>\n</ul>",
        "id": 438423511,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1715625038
    },
    {
        "content": "<p>No plans to remove wiggle at this time, no, it'll probably stick around as long as preview1 things. For testing the number of wasi-nn tests is small enough I think it'd be fine to write them twice and/or have a runtime bool selecting which api is used and call them twice</p>",
        "id": 438425001,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715625648
    },
    {
        "content": "<p>We've seen prototypes for a p2 -&gt; p1 adapter. It seems like this would be good path for delivering newer wasi-nn specs to wasip1 runtimes.</p>",
        "id": 438835072,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1715788213
    }
]