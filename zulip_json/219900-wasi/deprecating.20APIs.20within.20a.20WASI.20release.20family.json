[
    {
        "content": "<p>Hey all; I just found some terminology used in <code>wasi:http</code> which seems to deviate from the terminology used in the specifications. By itself it's a pretty minor thing, but assuming it's something we'd want to change it leads to a much broader question: How do we want to navigate API changes within a WASI release family (e.g. WASI <code>0.2.x</code>)?</p>\n<p><a href=\"https://github.com/WebAssembly/wasi-http/issues/107\">https://github.com/WebAssembly/wasi-http/issues/107</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/issues/107\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6b7ea65ce2fbc64879040d2f34f5aa0a958495d9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343638383131366162323565306464643461313431323836356530303765616338343033333631373865346238343338323662613365303364363232386337332f576562417373656d626c792f776173692d687474702f6973737565732f313037)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/issues/107\" title=\"Terminology: &quot;field key&quot; vs &quot;field name&quot; · Issue #107 · WebAssembly/wasi-http\">Terminology: \"field key\" vs \"field name\" · Issue #107 · WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Preface Hi hi, I've been working with wasi:http a fair bit recently and have been enjoying it a lot. Thank you for that! Given we're currently still in a preview and we intend to make breaking chan...</div></div></div>",
        "id": 425870313,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1710150001
    },
    {
        "content": "<p>At the bottom of that issue I've laid out a rough flow I think we could adopt for changes like these. Ensuring we can adopt changes as we go, but ensure we do not violate our backwards-compatibility guarantees for WASI 0.2.x either. This would depend on having some WIT-native mechanism to mark APIs as deprecated, which I'm not sure has come up before?</p>",
        "id": 425870833,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1710150185
    },
    {
        "content": "<p>This seems like a pretty broad issue as it comes to the evolution of our WASI worlds, and so I wanted to broach that topic with this issue as a motivating example. I'm sure this will come up more often in the future, so I figured it would be worth raising sooner. Keen to hear what folks think!</p>",
        "id": 425871237,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1710150351
    },
    {
        "content": "<p>hey Yosh! I think what you laid out there makes sense for this kind of case. For another, somewhat broader kind, I recently filed <a href=\"https://github.com/WebAssembly/component-model/issues/312\">an issue</a> for the component model about introducing support for aliases. Would be interested in hearing your take on that!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/312\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1bab656240c43944fa5e2683e77dd09bb45eea3f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393361376330663861643837613333633632313463376332393139353061646136323834373766666433623532363231346563303633656137356430353032312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f333132)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/312\" title=\"Consider adding support for identifier aliases · Issue #312 · WebAssembly/component-model\">Consider adding support for identifier aliases · Issue #312 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Over in #311, @oovm points out that the fact that components broadly include identifiers in their public interfaces means that it's hard to fix naming mistakes in stable APIs. I wonder if it might ...</div></div></div>",
        "id": 426099272,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1710241119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> oh yeah that makes sense to me - it sounds like having something like that could indeed be used to implement the solution for the issue I filed</p>",
        "id": 426114202,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1710246617
    },
    {
        "content": "<p>Do we have a sense yet for what we'd like the notation to look for this? I assume aliasing would be one use case, but generally notations might even be broader than that?</p>",
        "id": 426114370,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1710246682
    },
    {
        "content": "<p>(not to expand the scope further haha - but that seems like it might be the first thing missing which we'd need a solution to?)</p>",
        "id": 426114533,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1710246730
    },
    {
        "content": "<p>I agree that this would ideally want to be part of a larger annotations solution, yes. IMO it'd make sense to do something informed by existing annotations syntax—be it Rust's, TypeScripts, or whatever. I haven't really dug into the syntax design myself though</p>",
        "id": 426116375,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1710247396
    }
]