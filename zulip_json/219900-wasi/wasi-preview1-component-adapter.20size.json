[
    {
        "content": "<p>wasi-preview1-component-adapter currently results in a 78K wasm file. While pretty small already, it would be nice to get it even smaller. Some (relatively) easy wins may be:</p>",
        "id": 446083159,
        "sender_full_name": "bjorn3",
        "timestamp": 1718976343
    },
    {
        "content": "<ul>\n<li>Using the bulk-memory proposal instead of including a copy of memcpy, memmove and memset.</li>\n</ul>",
        "id": 446083254,
        "sender_full_name": "bjorn3",
        "timestamp": 1718976367
    },
    {
        "content": "<ul>\n<li>Reducing the size of <code>trapping_unwrap</code> by replacing <code>unreachable!()</code> with a direct trap instruction.</li>\n</ul>",
        "id": 446083754,
        "sender_full_name": "bjorn3",
        "timestamp": 1718976525
    },
    {
        "content": "<ul>\n<li>Replace all <code>unreachable!()</code> inside exports like <code>sock_recv</code> with calls to a single function which prints to stderr using raw syscalls followed by a direct trap to skip the panicking and formatting machinery and to deduplicate everything else.</li>\n</ul>",
        "id": 446084288,
        "sender_full_name": "bjorn3",
        "timestamp": 1718976701
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"344849\">@Yoshua Wuyts</span> to increase the gap between native and wasip2 for your TCP echo server even more.</p>",
        "id": 446084744,
        "sender_full_name": "bjorn3",
        "timestamp": 1718976859
    },
    {
        "content": "<p>I've been thinking about adapter size recently; having a standard approach to trapping with some output <em>without</em> <code>std::fmt</code> would be really helpful.</p>",
        "id": 446085091,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718976986
    },
    {
        "content": "<p>Would it make sense to have an e.g. <code>wasi-nostd-helpers</code> crate or something?</p>",
        "id": 446085342,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718977066
    },
    {
        "content": "<p>Re using bulk-memory: <code>RUSTFLAGS=\"-Ctarget-feature=+bulk-memory\"</code> saves 1481 bytes total (79409 -&gt; 77928).</p>",
        "id": 446085587,
        "sender_full_name": "bjorn3",
        "timestamp": 1718977167
    },
    {
        "content": "<p>I think these would all be quite reasonable to implement, even bulk-memory is so widespread nowadays I don't think there's any particular reason to leave it turned off</p>",
        "id": 446085989,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718977295
    },
    {
        "content": "<p>Replacing the <code>unreachable!()</code> in <code>trapping_unwrap</code> with <code>core::arch::wasm32::unreachable()</code> reduces the size by another 2925 bytes (77928 -&gt; 75003).</p>",
        "id": 446086107,
        "sender_full_name": "bjorn3",
        "timestamp": 1718977326
    },
    {
        "content": "<p>Enabling LTO another 2247 bytes (75003 -&gt; 72756).</p>",
        "id": 446086337,
        "sender_full_name": "bjorn3",
        "timestamp": 1718977417
    },
    {
        "content": "<p>I just noticed that <code>unreachable!()</code> is already not the libstd version, but one provided by the component adapter itself, so all the wins for the <code>unreachable!()</code> replacement change are likely just caused by skipping the pretty failure message using <code>eprint!()</code>.</p>",
        "id": 446087516,
        "sender_full_name": "bjorn3",
        "timestamp": 1718977832
    },
    {
        "content": "<p>Most of the <code>unreachable!()</code> macro can probably be moved to a new function to deduplicate the code between call sites.</p>",
        "id": 446087826,
        "sender_full_name": "bjorn3",
        "timestamp": 1718977923
    },
    {
        "content": "<p>We could still have pretty output without <code>std</code> I think since wasi stderr doesn't require a lock?</p>",
        "id": 446087980,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718977982
    },
    {
        "content": "<p>Also the <code>eprint!(\"unreachable executed at adapter line \"); crate::macros::eprint_u32(line!());</code> can be replaced with <code>eprint!(concat!(\"unreachable executed at adapter line \", line!()))</code> to remove the <code>eprint_u32</code> function.</p>",
        "id": 446088150,
        "sender_full_name": "bjorn3",
        "timestamp": 1718978037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/219900-wasi/topic/wasi-preview1-component-adapter.20size/near/446087980\">said</a>:</p>\n<blockquote>\n<p>We could still have pretty output without <code>std</code> I think since wasi stderr doesn't require a lock?</p>\n</blockquote>\n<p>Turns out that is exactly what is done already. It is just that most of this code is duplicated at each <code>unreachable!()</code> call site.</p>",
        "id": 446088284,
        "sender_full_name": "bjorn3",
        "timestamp": 1718978069
    },
    {
        "content": "<p>Oh sure enough...I didn't scroll up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 446088436,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718978114
    },
    {
        "content": "<p>Just bulk-memory + LTO saves 4573 bytes.</p>",
        "id": 446088847,
        "sender_full_name": "bjorn3",
        "timestamp": 1718978246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> out of curiosity: does this save anything on the base binary too - or just on the adapter?</p>",
        "id": 446089089,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1718978327
    },
    {
        "content": "<p>beware, many of the macro (and other) shenanigans in the adapter are done the not obvious or idiomatic way in order to dance around llvm creating anything that ends up in the data section</p>",
        "id": 446089196,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718978363
    },
    {
        "content": "<p>One thing I'll note as well is that the adapter is automatically GC'd, e.g. it exports every single wasip1 function but most modules don't import all of them. The <code>wit-component</code> adapter process will remove all exports that aren't needed and then GC the wasm module itself, so the full size of the adapter is unlikely to go into a final component. Either that or if the importing component reduces its imports as well that's a way to shrink the adapter.</p>",
        "id": 446089396,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718978415
    },
    {
        "content": "<p>One thing that might be worth testing is that LLVM is known to produce pretty suboptimal binaries size-wise and running through <code>wasm-opt</code> can probably shave off 30-40%</p>",
        "id": 446089513,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718978449
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/219900-wasi/topic/wasi-preview1-component-adapter.20size/near/446084744\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"344849\">Yoshua Wuyts</span> to increase the gap between native and wasip2 for your TCP echo server even more.</p>\n</blockquote>\n<p>by the way, for context on this - <a href=\"https://toot.yosh.is/@yosh/112645087073039186\">here are the numbers I found</a> the other day</p>",
        "id": 446089518,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1718978452
    },
    {
        "content": "<blockquote>\n<p>The results: async-std comes in at half a Megabyte for the echo server. WASI 0.2 comes in at just 100 Kilobytes. And in even better news: it currently still uses a WASI 0.1 adapter that weighs 80 Kilobytes. WASI binaries are <em>small</em>.</p>\n</blockquote>",
        "id": 446089622,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1718978485
    },
    {
        "content": "<p>if you want to optimize the adapter down to 0, there is the remaining work in wasi-libc to use p2 for filesystem and everything else. the p2 support in there is right now limited to sockets</p>",
        "id": 446089987,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718978586
    },
    {
        "content": "<p>that would additionally unlock using rust, c, c++ to target the new single-module representation of a component that luke has been presenting</p>",
        "id": 446090363,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718978711
    },
    {
        "content": "<p>which saves even more bytes by not encoding any of the component type information</p>",
        "id": 446090433,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718978735
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8858\">https://github.com/bytecodealliance/wasmtime/pull/8858</a> for LTO + bulk-memory</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8858\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a62c6ac3ba968f7787f283912194e65bbec7c9dd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396364633063346136666536326466623263396263343437353966663564633762326232336331643061353766363563656565353061333735373563396362662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38383538&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8858\" title=\"Reduce the size of the wasp1 component adapter by 4.6k by bjorn3 · Pull Request #8858 · bytecodealliance/wasmtime\">Reduce the size of the wasp1 component adapter by 4.6k by bjorn3 · Pull Request #8858 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This reduces the size of wasi_snapshot_preview1.command.wasm from 79625 bytes to 75029 bytes for a total win of 4596 bytes. Of this reduction enabling LTO is responsible for 3103 bytes, while enabl...</div></div></div>",
        "id": 446109831,
        "sender_full_name": "bjorn3",
        "timestamp": 1718984772
    },
    {
        "content": "<p>Managed to save another 21154 bytes (75029 -&gt; 53875) by changing the unreachable!() and assert!() macros. This is without losing any information that may be useful for debugging, but with a slight tweak to the assertion failure message from \"unreachable executed at adapter line ...: assertion failure\" to \"assertion failed at adapter line ...\", which is slightly shorter. This tweak is only a small part of the saved bytes, but I figured I did still make it.</p>",
        "id": 446119693,
        "sender_full_name": "bjorn3",
        "timestamp": 1718987379
    },
    {
        "content": "<p>wow that's a huge reduction of 30%?!</p>",
        "id": 446120141,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718987489
    },
    {
        "content": "<p>Yeah!</p>",
        "id": 446120320,
        "sender_full_name": "bjorn3",
        "timestamp": 1718987532
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8859\">https://github.com/bytecodealliance/wasmtime/pull/8859</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8859\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4ac4d8afa9342b76823b993e25af476cf7a092e8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666265313937663039353964626533353230343862646664373931303337343439393834303266383938663466393639633836633464353137356532353036322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38383539&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8859\" title=\"Reduce the size of the wasp1 component adapter by 21k by bjorn3 · Pull Request #8859 · bytecodealliance/wasmtime\">Reduce the size of the wasp1 component adapter by 21k by bjorn3 · Pull Request #8859 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This reduces the size of wasi_snapshot_preview1.command.wasm from 75029 bytes to 53875 bytes for a total win of 21154 bytes. This is done by deduplicating most of the trap messages and the code for...</div></div></div>",
        "id": 446120655,
        "sender_full_name": "bjorn3",
        "timestamp": 1718987637
    },
    {
        "content": "<p>Got another easy 1.6k win, will push in a bit.</p>",
        "id": 446121856,
        "sender_full_name": "bjorn3",
        "timestamp": 1718987971
    },
    {
        "content": "<p>Pushed</p>",
        "id": 446122437,
        "sender_full_name": "bjorn3",
        "timestamp": 1718988128
    },
    {
        "content": "<p>awesome!</p>",
        "id": 446123027,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718988313
    },
    {
        "content": "<p>For reference removing all unreachable and assertion message printing brings the size down to 47162 bytes, which is only 5050 bytes less than with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8859\">wasmtime#8859</a>. IMHO winning 5050 bytes is not enough to justify making it harder to find the root cause when someone reports an issue caused by the adapter.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8859\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4ac4d8afa9342b76823b993e25af476cf7a092e8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666265313937663039353964626533353230343862646664373931303337343439393834303266383938663466393639633836633464353137356532353036322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38383539&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8859\" title=\"Reduce the size of the wasp1 component adapter by 21k by bjorn3 · Pull Request #8859 · bytecodealliance/wasmtime\">Reduce the size of the wasp1 component adapter by 21k by bjorn3 · Pull Request #8859 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This reduces the size of wasi_snapshot_preview1.command.wasm from 75029 bytes to 53875 bytes for a total win of 21154 bytes. This is done by deduplicating most of the trap messages and the code for...</div></div></div>",
        "id": 446124131,
        "sender_full_name": "bjorn3",
        "timestamp": 1718988607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/stream/219900-wasi/topic/wasi-preview1-component-adapter.20size/near/446090363\">said</a>:</p>\n<blockquote>\n<p>that would additionally unlock using rust, c, c++ to target the new single-module representation of a component that luke has been presenting</p>\n</blockquote>\n<p>I hadn't heard of that before and I'm intrigued - could you please point me to an explanation of the proposal? Thanks :)</p>",
        "id": 446363598,
        "sender_full_name": "Juniper Tyree",
        "timestamp": 1719114465
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/meetings/blob/main/wasi/2024/WASI-06-13.md#adding-core-wasm-build-targets-to-the-component-model\">https://github.com/WebAssembly/meetings/blob/main/wasi/2024/WASI-06-13.md#adding-core-wasm-build-targets-to-the-component-model</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/meetings/blob/main/wasi/2024/WASI-06-13.md#adding-core-wasm-build-targets-to-the-component-model\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/26243aec37edc0015d045c1019e35a9be026b60a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393238376132653861353636353266343333393764386238653930383236363430613266366430653233656635363936666462626133363532383263353362642f576562417373656d626c792f6d656574696e6773&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/meetings/blob/main/wasi/2024/WASI-06-13.md#adding-core-wasm-build-targets-to-the-component-model\" title=\"meetings/wasi/2024/WASI-06-13.md at main · WebAssembly/meetings\">meetings/wasi/2024/WASI-06-13.md at main · WebAssembly/meetings</a></div><div class=\"message_embed_description\">WebAssembly meetings (VC or in-person), agendas, and notes - WebAssembly/meetings</div></div></div>",
        "id": 446893301,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1719324081
    },
    {
        "content": "<p>So that would work in the browser with a shim similar to browser_wasi_shim without requiring a wasm component parser like jco?</p>",
        "id": 446978820,
        "sender_full_name": "bjorn3",
        "timestamp": 1719344444
    },
    {
        "content": "<p>presumably</p>",
        "id": 446982792,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1719345718
    },
    {
        "content": "<p>That would be great!</p>",
        "id": 446987870,
        "sender_full_name": "bjorn3",
        "timestamp": 1719347274
    },
    {
        "content": "<p>Somewhat relatedly, is there any plan to write a tool going from a wasm component to a (possibly multi-memory) core wasm module with the same kind of custom section as would be used for building a wasm component from a core wasm module?</p>",
        "id": 446988581,
        "sender_full_name": "bjorn3",
        "timestamp": 1719347455
    },
    {
        "content": "<p>that could be done, yes. i think when we last discussed it in early 2023, the reason it wasnt pursued was that multi memory hadnt shipped enough places to make it worthwhile</p>",
        "id": 446990216,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1719347923
    },
    {
        "content": "<p>its still behind a flag in chrome</p>",
        "id": 446990358,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1719347967
    },
    {
        "content": "<p>at any rate, since jco provides something equivalent implemented in JS rather than multi-memory wasm, id consider it just an implementation detail that jco could use to optimize binary size</p>",
        "id": 446990679,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1719348056
    }
]