[
    {
        "content": "<p>So there are variants of wasi-libc supporting threading now, I'm curious how are Thread Local Storage (TLS) implemented for WebAssembly.<br>\nTraditionally, the TLS are managed in the user space by the libpthread, but TLS model like <code>initial-exec</code> won't work for WASM since absolute addressing is not supported in WASM. So I'm curious how currently wasi-libc and the runtime implements TLS, using a dynamic model?</p>",
        "id": 442351857,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717443193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> might know the answer to this.</p>",
        "id": 442368198,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717447468
    },
    {
        "content": "<p>you might want to take a look at <a href=\"https://github.com/WebAssembly/wasi-libc/blob/main/libc-top-half/musl/src/env/__init_tls.c\">https://github.com/WebAssembly/wasi-libc/blob/main/libc-top-half/musl/src/env/__init_tls.c</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/main/libc-top-half/musl/src/env/__init_tls.c\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91de96e1642475e047e26a518e23292aa7dd34f3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653636333133323035613731623265636265636139616366633437313463366437323431366537396137373139613561376139383830643964383732616137302f576562417373656d626c792f776173692d6c696263&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/main/libc-top-half/musl/src/env/__init_tls.c\" title=\"wasi-libc/libc-top-half/musl/src/env/__init_tls.c at main · WebAssembly/wasi-libc\">wasi-libc/libc-top-half/musl/src/env/__init_tls.c at main · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 442370540,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1717448127
    },
    {
        "content": "<p>Thank you for pointing this out, I just skim through the code, it seems like the critical tls init functions <code>__builtin_wasm_tls_base()</code> and <code>__wasm_init_tls</code> are not present in this repo. Do you know where are these defined?</p>",
        "id": 442378557,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717450712
    },
    {
        "content": "<p><code>__builtin_wasm_tls_base()</code> is just <code>global.get  __tls_base</code>, see <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#thread-local-storage\">https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#thread-local-storage</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#thread-local-storage\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6c381b379d77055e684059576de71a5065f6137f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333833353335613230366539343763636565376539616531643131633632653166363236613832383730393962653036623062653336353935636631313838372f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#thread-local-storage\" title=\"tool-conventions/Linking.md at main · WebAssembly/tool-conventions\">tool-conventions/Linking.md at main · WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - WebAssembly/tool-conventions</div></div></div>",
        "id": 442380143,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1717451268
    },
    {
        "content": "<p>Thank you! I think I have a basic notion of how the wasi-libc and llvm linker work in TLS scenario.<br>\nBut I still have a confusion that, is the runtime also involved in this process? Is the runtime involved to be aware of the allocation / free of TLS segments,  or these are managed transparent to the runtime?</p>",
        "id": 442401812,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717459104
    },
    {
        "content": "<p>In wasi-threads, all of the TLS machinery is handled by wasi-libc, not the runtime. That being said, TLS is probably one of the most experimental parts of the experimental wasi-threads target, so don't be surprised if things aren't fully fleshed out. There's a better story being developed now in the shared-everything-threads proposal.</p>",
        "id": 442580654,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1717520825
    },
    {
        "content": "<p>Oh okay thank you, that sounds promising! Btw, in the current wasi-libc repo, is there examples of how tls variables are accessed and set?</p>",
        "id": 442600774,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717526801
    },
    {
        "content": "<p>Nah, but that's fixable: I think if you wanted to experiment with this you could write C code that uses <code>__thread</code> or <code>_ThreadLocal</code> or <code>thread_local</code> (etc.) and try to compile it to WebAssembly. Essentially you could write some tests to show what parts of this experimental support and what parts do not. I started this in <a href=\"https://github.com/WebAssembly/wasi-libc/pull/369\">#369</a> but I didn't like something about <code>Makefile</code> integration so I abandoned that approach. But any tests you want to upstream around this would be welcome!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/pull/369\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/42a886f28fd82f2a8b5febd34d2229d351702e7d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376161343432336462626430336131663832306136303064653238656562626366643963353838663334376637363963353761333862396333653832396439662f576562417373656d626c792f776173692d6c6962632f70756c6c2f333639&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/pull/369\" title=\"test: add tests for pthread API by abrown · Pull Request #369 · WebAssembly/wasi-libc\">test: add tests for pthread API by abrown · Pull Request #369 · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">This change runs the pthread tests available in libc-test when THREAD_MODEL=posix. This is currently a work-in-progress, since there are custom build steps necessary to get this all to (mostly) wor...</div></div></div>",
        "id": 442604290,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1717527922
    },
    {
        "content": "<p>(on second thought, looking at <a href=\"https://github.com/WebAssembly/wasi-libc/pull/369\">#369</a> again, it might be worthwhile to revive that to test the TLS side of things!)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/pull/369\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/42a886f28fd82f2a8b5febd34d2229d351702e7d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376161343432336462626430336131663832306136303064653238656562626366643963353838663334376637363963353761333862396333653832396439662f576562417373656d626c792f776173692d6c6962632f70756c6c2f333639&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/pull/369\" title=\"test: add tests for pthread API by abrown · Pull Request #369 · WebAssembly/wasi-libc\">test: add tests for pthread API by abrown · Pull Request #369 · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">This change runs the pthread tests available in libc-test when THREAD_MODEL=posix. This is currently a work-in-progress, since there are custom build steps necessary to get this all to (mostly) wor...</div></div></div>",
        "id": 442604765,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1717528067
    },
    {
        "content": "<p>here's one quick example of wasm tls on godbolt, hope it helps: <a href=\"https://godbolt.org/z/bf5jn6sdT\">https://godbolt.org/z/bf5jn6sdT</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/bf5jn6sdT\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4bf336f7597f851df0732b12f8d4b7b383508ec8/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/bf5jn6sdT\" title=\"Compiler Explorer - C (WebAssembly clang (trunk))\">Compiler Explorer - C (WebAssembly clang (trunk))</a></div><div class=\"message_embed_description\">_Thread_local int foo = 233;\n\nint get_foo(void) { return foo; }\n\nvoid set_foo(int x) { foo = x; }</div></div></div>",
        "id": 442609119,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1717529336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> Hi so when I write code with <code>__thread</code> or <code>thread_local</code>, what compiler should I use? The clang in wasi-sdk <code>wasi-sdk-22.0/bin/clang-18 --target=wasm32-unknown-wasi</code> doesn't seem to understand any of these symbols</p>",
        "id": 442834890,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717604893
    },
    {
        "content": "<p>I'm guessing you'll want to use <code>--target=wasm32-wasi-threads</code> at least; not sure if there are other flags you also need to specify.</p>",
        "id": 442853094,
        "sender_full_name": "Joel Dice",
        "timestamp": 1717609340
    },
    {
        "content": "<p>you need to pass <code>-pthread</code> as well</p>",
        "id": 442854788,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1717609875
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__wasm_init_tls</span><span class=\"p\">(</span><span class=\"n\">mem</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">__asm__</span><span class=\"p\">(</span><span class=\"s\">\"local.get %0</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">            </span><span class=\"s\">\"global.set __tls_base</span><span class=\"se\">\\n</span><span class=\"s\">\"</span>\n<span class=\"w\">            </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"s\">\"r\"</span><span class=\"p\">(</span><span class=\"n\">tls_base</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>This part of the wasi-libc __init_tls.c made me somehow confused. I understand what <code>__wasm_init_tls</code> and <code>__tls_base</code> do, but aren't we setting up the TLS for a new thread, and the <code>__tls_base</code> itself is also a thread-specific symbol. Then I'm confused by this \"Chicken or the egg\" paradox.</p>",
        "id": 443150429,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717704338
    },
    {
        "content": "<p>Or  <code>__tls_base</code> isn't in the TLS block?</p>",
        "id": 443195553,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717727961
    },
    {
        "content": "<p>In that asm __tls_base is LLVM’s symbol for a wasm global. Globals do not reside in linear memory, and there is one created per module instance, and one module instance per thread (in wasi-threads, this story will change one day but it’s not important now). There is one common linear memory that is imported by each thread instance.</p>",
        "id": 443199799,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1717730418
    },
    {
        "content": "<p>The llvm memory model is such that you can’t write Rust or C code that touches wasm globals, they can only manipulate linear memory, so to manipulate the global it needs that inline assembly. That assembly code is related to wat, but it’s different for historical reasons</p>",
        "id": 443199928,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1717730523
    },
    {
        "content": "<p>Thank you, I see, the <code>__tls_base</code> reside outside the linear memory as module globals.</p>\n<p>I still have some confusion with the <code>wasi-libc</code> codebase. I see the <code>__tls_base</code> is defined in the file<br>\nlibc-top-half/musl/src/thread/wasm32/wasi_thread_start.s, along with a function <code>wasi_thread_start</code>. But I didn't see the pthread_create function call it, I didn't see anything calling it, which is weird.</p>\n<p>Rather, the pthread_create is calling  <code>wasi-thread-spawn</code>, which is an imported host function. But I didn't see the definition of this host function in wasmtime repo, where can I find it?</p>",
        "id": 443519522,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1717878718
    }
]