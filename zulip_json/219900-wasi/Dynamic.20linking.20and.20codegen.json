[
    {
        "content": "<p>JITs like LuaJIT and SpiderMonkey need to be able to generate code at runtime, which runs into the limits of wasm. (Chris Fallin has an excellent blog series on how StarlingMonkey gets high performance using AOT or pre-generated stubs, but a full JIT that can link new wasm code would help get maximum performance for some jobs.)<br>\nHow might dynamic linking of new code at runtime work as a WASI API?<br>\nSupposing this dynamic linking added a new function to a table, my guess would be that the new functions would be expressed as component model types — but if performance is a concern, hosts may not want the overhead of a component linker and validator when they can get away with core wasm. Could there be a way to import newly generated core modules at runtime without having to wrap them in a component first?<br>\nGenerally, would a \"<code>wasi-codegen</code>\" world be in scope, and what might it look like?</p>",
        "id": 471104582,
        "sender_full_name": "IFcoltransG",
        "timestamp": 1726610150
    },
    {
        "content": "<p>There's at least some discussion of this in the original Wasm design docs (see <a href=\"https://github.com/WebAssembly/design/blob/main/FutureFeatures.md#platform-independent-just-in-time-jit-compilation\">here</a> and <a href=\"https://github.com/WebAssembly/design/blob/main/JITLibrary.md\">here</a> for example); I suspect an API that allows one to add individual functions, given the bytecode, is probably about the right abstraction and overhead level</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/design/blob/main/FutureFeatures.md#platform-independent-just-in-time-jit-compilation\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1f0d4ff931bf9713ad98252fd049a7597cbcd267/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653364333937383134313735386235396565376538336130386562326637373939353534396261346338623335616333626233313066336330383064343635642f576562417373656d626c792f64657369676e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/design/blob/main/FutureFeatures.md#platform-independent-just-in-time-jit-compilation\" title=\"design/FutureFeatures.md at main · WebAssembly/design\">design/FutureFeatures.md at main · WebAssembly/design</a></div><div class=\"message_embed_description\">WebAssembly Design Documents. Contribute to WebAssembly/design development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/design/blob/main/JITLibrary.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1f0d4ff931bf9713ad98252fd049a7597cbcd267/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653364333937383134313735386235396565376538336130386562326637373939353534396261346338623335616333626233313066336330383064343635642f576562417373656d626c792f64657369676e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/design/blob/main/JITLibrary.md\" title=\"design/JITLibrary.md at main · WebAssembly/design\">design/JITLibrary.md at main · WebAssembly/design</a></div><div class=\"message_embed_description\">WebAssembly Design Documents. Contribute to WebAssembly/design development by creating an account on GitHub.</div></div></div>",
        "id": 471105208,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726610333
    },
    {
        "content": "<p>One can more-or-less do this by trampolining through JS on a web Wasm host (browser) today, and AFAIK some folks are already doing this (it's technically a new module with one function, and one has to use exports/imports to allow the new code to access the memory and functions of the existing module)</p>",
        "id": 471105336,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726610381
    },
    {
        "content": "<p>whether a new proposal is an API or a core Wasm instruction is a subjective design question, I'm sure folks would have opinions but it doesn't seem to matter too much technically (IMHO)</p>",
        "id": 471105471,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726610407
    },
    {
        "content": "<p>Also, Emscripten has been supporting module-level dynamic loading via <code>dlopen</code>/<code>dlsym</code> based on <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\">https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md</a> for a while now.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/688c4ee8016b6126f53c4d45085bbc5557a3594f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326639656561656363643061346338613063636132663636313664643065336464353237323961633164333063373833656639373561623335663939353861362f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\" title=\"tool-conventions/DynamicLinking.md at main · WebAssembly/tool-conventions\">tool-conventions/DynamicLinking.md at main · WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - WebAssembly/tool-conventions</div></div></div>",
        "id": 471105579,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726610435
    },
    {
        "content": "<p>the big social/political aspect here would be convincing folks that this is needed with some concrete example/prototype -- performance data speaks loudest to engine implementers who have lots of options of extensions to work on :-)</p>",
        "id": 471105626,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726610451
    },
    {
        "content": "<p>Performance is one motivation; another is compatibility with ecosystems such as Python's, where <code>dlopen</code>ing native extensions at runtime is commonplace.</p>",
        "id": 471105955,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726610544
    },
    {
        "content": "<p>(although in that case the code isn't usually being generated at runtime)</p>",
        "id": 471106141,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726610607
    },
    {
        "content": "<p>Thanks for those resources on existing work.</p>",
        "id": 471107646,
        "sender_full_name": "IFcoltransG",
        "timestamp": 1726611069
    },
    {
        "content": "<p>My (uninformed) impression of Python for wasm is that it's difficult with a dynamic language to know what native extensions you'd need in advance. I was mentally grouping it with the runtime-generated situation, because I don't know whether you'd be able to enumerate the native extensions beforehand. Perhaps that's a question for Pyodide and CPython though.</p>",
        "id": 471108229,
        "sender_full_name": "IFcoltransG",
        "timestamp": 1726611246
    },
    {
        "content": "<p><code>componentize-py</code> currently uses a conservative approach when constructing a component that uses native extensions: it searches the Python search path at build time for WASI-compatible extensions and bundles them into the component, synthesizing lookup tables which may be used at runtime to resolve the exports via <code>dlopen</code>/<code>dlsym</code>.  See <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-component/src/linking.rs\">here</a> for details.</p>\n<p>You're right, though, that the conservative approach potentially bundles extensions that won't necessarily be used at runtime.  And it wouldn't support code that e.g. downloads and loads extensions at runtime rather than including them as part of the package.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-component/src/linking.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0801ee8b81fefa335fc80a754f2d761fd77139e1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363937366438316639626262363761616233626132383234383239333431313831383939666663366266663339616238636563663538666133626433386636612f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-component/src/linking.rs\" title=\"wasm-tools/crates/wit-component/src/linking.rs at main · bytecodealliance/wasm-tools\">wasm-tools/crates/wit-component/src/linking.rs at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 471110041,
        "sender_full_name": "Joel Dice",
        "timestamp": 1726612002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/219900-wasi/topic/Dynamic.20linking.20and.20codegen/near/471105336\">said</a>:</p>\n<blockquote>\n<p>One can more-or-less do this by trampolining through JS on a web Wasm host (browser) today, and AFAIK some folks are already doing this (it's technically a new module with one function, and one has to use exports/imports to allow the new code to access the memory and functions of the existing module)</p>\n<p>the big social/political aspect here would be convincing folks that this is needed with some concrete example/prototype -- performance data speaks loudest to engine implementers who have lots of options of extensions to work on :-)</p>\n</blockquote>\n<p>We do it via JS in dotnet in the browser. You can read some details here <a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/mono/jiterpreter.md\">https://github.com/dotnet/runtime/blob/main/docs/design/mono/jiterpreter.md</a></p>\n<p>This is not normal dotnet JIT. It's rather letting the browser's JIT to optimize sequence of instructions of the Mono interpreter. </p>\n<p>It gives us significant perf boost in hot path scenarios. To quantify it to single number is not good idea, because it heavily depends on the use-case. But overall it's definitely worth it. </p>\n<p>Compared to Mono AOT -&gt;  .wasm,  the final app has much smaller download size, which matters a lot in a web page.</p>\n<p>It would be technically possible to implement WASM backend for RiuJIT and use this JS escape hatch too. But that's multi year project.</p>\n<p>It would be even better if WASI runtimes allowed for something similar.<br>\nWhat kind of metric would convince wasmtime to implement support for it ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtime/blob/main/docs/design/mono/jiterpreter.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a4bd60a9639d016da9f83a1c7c9edaf414a4ffcc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393563633965663733333664356665383333623864623035343035636238373464363537373666663631333865346564376461346233386530336663613338612f646f746e65742f72756e74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtime/blob/main/docs/design/mono/jiterpreter.md\" title=\"runtime/docs/design/mono/jiterpreter.md at main · dotnet/runtime\">runtime/docs/design/mono/jiterpreter.md at main · dotnet/runtime</a></div><div class=\"message_embed_description\">.NET is a cross-platform runtime for cloud, mobile, desktop, and IoT apps. - dotnet/runtime</div></div></div>",
        "id": 471178277,
        "sender_full_name": "Pavel Šavara",
        "timestamp": 1726640618
    },
    {
        "content": "<p>Ah, I think for wasmtime specifically, we're already pretty convinced it can be a good idea in the right cases; the limiting factor is engineering time (we are an extremely small team and very overburdened already). So if others (especially at large companies with lots of engineering resources!) want it, we'd be happy to help design it and review PRs</p>\n<p>There's also the standards-compliance angle; we'd want to build it as hostcalls and not call it \"wasi-\" anything unless/until it went before the relevant standards groups</p>",
        "id": 471300136,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726676406
    }
]