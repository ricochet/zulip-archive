[
    {
        "content": "<p>What's the current status of the Reactor vs Command distinction in Preview 2? My vague understanding for Commands was that a Command instance would have its \"main\" function (and no other exports) called exactly once. Is that the expectation for <code>wasi:cli/run</code>? (and if so it seems like that should be documented in either that interface or the <code>wasi:cli/command</code> world)</p>",
        "id": 411237688,
        "sender_full_name": "Lann Martin",
        "timestamp": 1704392027
    },
    {
        "content": "<p>Related to this question, is wasi:http using the reactor mode? If so, could we add an exported <code>setup()</code> function to wasi:http/proxy that register callbacks at the initialization phase?</p>",
        "id": 411252707,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1704398423
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span>  This is actually (part of) the context for my question: how should reactor initialization be done prior to the implementation of start defs.</p>",
        "id": 411253076,
        "sender_full_name": "Lann Martin",
        "timestamp": 1704398552
    },
    {
        "content": "<p>re: <a href=\"https://github.com/golang/go/issues/65199#issuecomment-1905205827\">https://github.com/golang/go/issues/65199#issuecomment-1905205827</a> </p>\n<blockquote>\n<p>there isn't an export for reactor-style wasm programs</p>\n</blockquote>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/golang/go/issues/65199#issuecomment-1905205827\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/84f7dcf3a1ff27fac7276b93bda89da7932a5f25\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396365383436636134373331343363343231323135636237346134623834323462656334386339666366323963316631396262626533383762666638613639352f676f6c616e672f676f2f6973737565732f3635313939)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/golang/go/issues/65199#issuecomment-1905205827\" title=\"proposal: cmd/compile: add go:wasmexport directive · Issue #65199 · golang/go\">proposal: cmd/compile: add go:wasmexport directive · Issue #65199 · golang/go</a></div><div class=\"message_embed_description\">Background #38248 defined a new compiler directive, go:wasmimport, for interfacing with host defined functions. This allowed calling from Go code into host functions, but it’s still not possible to...</div></div></div>",
        "id": 417546304,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1706051978
    },
    {
        "content": "<p>What I wrote there is actually wrong; there currently is no initialization mechanism for user code; we can't use the component-model start function, and there is discussion of WASI adding an export for this purpose.</p>",
        "id": 417551842,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706055086
    },
    {
        "content": "<blockquote>\n<p>\"no initialization mechanism for user code\" <br>\nIs there an initialization mechanism for the runtime or non-user code?</p>\n</blockquote>",
        "id": 417694534,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706117540
    },
    {
        "content": "<p>There is a component-model start function, that runs on instantiation. Code that doesn't need to call imports can use it. The thing I had forgotten was, that start function is not currently permitted to call imports, which means it wouldn't be friendly to give it to users and say \"here, write your init code!\" if it's going to trap as soon as they call an import.</p>",
        "id": 417695101,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706117760
    },
    {
        "content": "<p>But, I just talked about this with Luke yesterday, and he's now thinking we can remove the restriction on calling imports. Assuming we do do this, then what I wrote in that issue would become correct again, and we could use the component-model start function for any purpose.</p>",
        "id": 417695317,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706117829
    },
    {
        "content": "<p>Got it, so the component-model start happens too early in the lifecycle to be used by a runtime which is likely to call imports.</p>",
        "id": 417695339,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706117838
    },
    {
        "content": "<p>What are the considerations if that constraint is relaxed?</p>",
        "id": 417695398,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706117857
    },
    {
        "content": "<p>The start function runs automatically on instantiation, so if it can call imports, it means that component instantiation can evoke I/O. The thinking was, there may be situations where users want to instantiate a component, but without letting it do any I/O until a later step.</p>",
        "id": 417695688,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706117950
    },
    {
        "content": "<p>In Go’s case, the runtime picks up a few things from the local filesystem (assuming it’s readable), and user <code>init</code> code can do I/O</p>",
        "id": 417696009,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706118054
    },
    {
        "content": "<p>Assuming that <code>wasi:filesystem</code> and <code>wasi:cli</code> and its dependents would be initialized prior to a user component?</p>",
        "id": 417696093,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706118083
    },
    {
        "content": "<p>In many cases, \"the filesystem\" is likely to be virtualized, so the resulting component wouldn't actually do that I/O. But yes, not everything will work that way.</p>",
        "id": 417696293,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706118146
    },
    {
        "content": "<p>Maybe a better question is: are components initialized in order of dependence?</p>",
        "id": 417696386,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706118183
    },
    {
        "content": "<p>Also yes, component dependencies are acyclic, and initialized topologically.</p>",
        "id": 417696392,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706118185
    },
    {
        "content": "<p>Somewhat related to Go and the Component Model: we’re currently using <code>wasm-tools component embed</code> and <code>wasm-tools component new</code> to create a component from a Wasm module generated by the TinyGo compiler.</p>\n<p>Is there a way to differentiate which <code>realloc</code> gets called a component export or import?</p>",
        "id": 417696819,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706118346
    },
    {
        "content": "<p>I don't think so; the canonical ABI just has one <code>realloc</code>.</p>",
        "id": 417697047,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706118431
    },
    {
        "content": "<p>I’ve spoken with Luke about this, how <code>cabi_realloc</code> might interact with the Go GC, given that it allocates byte slabs, which might not be the correct GC shape for say something like a <code>string</code> which contains a pointer.</p>",
        "id": 417698577,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706119027
    },
    {
        "content": "<p>the canonical abi has one realloc per import or export function - you can assign a different realloc function to each</p>",
        "id": 417698912,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119180
    },
    {
        "content": "<p>we have some \"cheat codes\" to do this for us for the preview 1 adapter in <code>wasm-tools component new</code> but no generalized support fori t</p>",
        "id": 417698952,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119196
    },
    {
        "content": "<p>Luke commented about a cheat code for making allocations cheaper for I/O, e.g. hijacking the next call to <code>realloc</code> before calling <code>read</code> on a stream, to enable BYO buffer.</p>",
        "id": 417699117,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706119245
    },
    {
        "content": "<p>so, if specializing per import/export fn is enough, that may be possible without spec changes, and we just have to encode it somehow in the module and teach <code>component new</code> to do that</p>",
        "id": 417699126,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119249
    },
    {
        "content": "<p>oh, hmm, thats more/different than i was thinking</p>",
        "id": 417699178,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119272
    },
    {
        "content": "<p>but it may also be possible</p>",
        "id": 417699221,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119288
    },
    {
        "content": "<p>thats some bookkeeping youd need to do inside your module</p>",
        "id": 417699251,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119300
    },
    {
        "content": "<p>vs exposing many distinct reallocs and assigning them to different import/export lift/lowers is something your module would expose and <code>component new</code> would do the wiring for</p>",
        "id": 417699355,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119325
    },
    {
        "content": "<p>Going back to the Component Model start for a sec, can <code>wasm-tools</code> wire up a module <code>_initialize</code> to the Component Model start section?</p>",
        "id": 417699371,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706119332
    },
    {
        "content": "<p>in theory yes</p>",
        "id": 417699401,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119343
    },
    {
        "content": "<p>but ill admit i dont fully understand the implications of doing so at the moment, some things in the above conversation were new to me so id need to make sure i really understood what was going on first</p>",
        "id": 417699484,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119374
    },
    {
        "content": "<p>(maybe <code>cabi_initialize</code> is a better name than <code>_initialize</code> but thats bikeshedding)</p>",
        "id": 417699707,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706119462
    },
    {
        "content": "<blockquote>\n<p>Going back to the Component Model start for a sec, can wasm-tools wire up a module _initialize to the Component Model start section?</p>\n</blockquote>\n<p>Yes, that's something <code>wasm-encoder</code> can do if one were encoding a component manually, but it's not implemented in <code>wit-component</code> when converting a core module to a component.</p>\n<p>Additionally, I'll point out that component start sections aren't implemented in Wasmtime as they require fully supporting value import and exports to implement, which are also currently not implemented.</p>",
        "id": 417703376,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706120849
    },
    {
        "content": "<p>can we make a restriction on the spec to eliminate the value imports/exports for now?</p>",
        "id": 417703610,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706120964
    },
    {
        "content": "<p>i don't see why not, something like limiting it to <code>arg*</code> of 0 length and <code>r</code> of zero (no result)?</p>",
        "id": 417703687,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706121002
    },
    {
        "content": "<p>so easily calling something like <code>_initialize</code></p>",
        "id": 417703738,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706121011
    },
    {
        "content": "<p>could probably just make that limitation in wasmtime and have it non-conforming on start section implementation like it is now (until values are implemented)</p>",
        "id": 417704142,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706121157
    },
    {
        "content": "<p>We should probably put this limitation in the spec.</p>",
        "id": 417704497,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706121300
    },
    {
        "content": "<p>yes we should bubble it up to the spec level with the preview2 emoji as a qualifier</p>",
        "id": 417704580,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706121328
    },
    {
        "content": "<p>Thanks. I think that will help ease the implementation of the <code>go:wasmexport</code> proposal in Go, and simplify our work implementing the Component Model and Preview 2</p>",
        "id": 417708350,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706122756
    },
    {
        "content": "<p>Ideally the Go (and TinyGo) toolchains will be able to emit a component directly, once the spec is formalized.</p>",
        "id": 417708401,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706122778
    },
    {
        "content": "<p>I filed <a href=\"https://github.com/WebAssembly/component-model/pull/297\">https://github.com/WebAssembly/component-model/pull/297</a> to remove the restriction on imports, and to add the no-args-no-returns restriction.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/297\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/281a03b3697f7fb4b0c0fed74e40b6ce14a60b3c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626565313162643764336132343338663038376637363638393733316532323162353331353732353634333064663464343833663130663366343466393161392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f323937)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/297\" title=\"Allow start functions to call imports, and restrict args/returns. by sunfishcode · Pull Request #297 · WebAssembly/component-model\">Allow start functions to call imports, and restrict args/returns. by sunfishcode · Pull Request #297 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Remove the restriction on component start functions calling imports. This allows start functions to run artbitrary user code.\nAnd, adjust the 🪙 to include start functions in the MVP, and add a rest...</div></div></div>",
        "id": 417708560,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706122821
    },
    {
        "content": "<p>Possibly interesting tidbit: <code>componentize-py</code> relies on <code>wasm-tools component link</code> to create a component using shared-everything linking.  Part of that process involves synthesizing an \"init\" module which has a <code>start</code> function that calls any <code>__wasm_call_ctors</code> or <code>_initialize</code> functions found in the input modules.  Some of those functions call host imports, and that succeeds because of the order of instantiation inside the component.  So calling imports from a (module-level) <code>start</code> function <em>is</em> possible in certain cases, and <code>componentize-py</code> has been relying on that for a while.</p>",
        "id": 417709173,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706123053
    },
    {
        "content": "<p>that's implemented with a component start section?</p>",
        "id": 417710077,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706123406
    },
    {
        "content": "<p>No, it's a module start section inside the last module to be instantiated inside the component.</p>",
        "id": 417796402,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706126353
    },
    {
        "content": "<p>relevant code: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/6470aa9df1782b4e7a21e5f065d0b991e0797862/crates/wit-component/src/linking.rs#L727-L759\">https://github.com/bytecodealliance/wasm-tools/blob/6470aa9df1782b4e7a21e5f065d0b991e0797862/crates/wit-component/src/linking.rs#L727-L759</a></p>",
        "id": 417796657,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706126434
    },
    {
        "content": "<p>ah, gotcha!</p>",
        "id": 417796849,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706126516
    },
    {
        "content": "<p>Here's the code that ensures the desired instantiation order, FWIW: <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-component/src/encoding.rs#L604-L630\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-component/src/encoding.rs#L604-L630</a></p>",
        "id": 417955551,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706126948
    },
    {
        "content": "<p>Can that code call component imports?</p>",
        "id": 417957023,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706127490
    },
    {
        "content": "<p>Yes</p>",
        "id": 417958278,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706128001
    },
    {
        "content": "<p>oh! do we even need a component start section if, for the case without argument or return values, module start functions do the trick?</p>",
        "id": 417958442,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706128076
    },
    {
        "content": "<p>Well you need to split your code over at least two modules in order for the above trick to work (or have <code>wasm-tools compoonent link</code> do that for you, based on an input shared library).</p>",
        "id": 417958586,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706128127
    },
    {
        "content": "<p>It's easy enough for <code>componentize-py</code> since it controls the whole toolchain, but I'm not sure how generalizable it is to other languages and toolchains.</p>",
        "id": 417958768,
        "sender_full_name": "Joel Dice",
        "timestamp": 1706128205
    },
    {
        "content": "<p>Interesting. I wasn't aware we could do that. So yeah, I'd still like to have component start functions, so the core-wasm toolchain story can just be to export a function with a designated name, and wit-component can put it in the component-model start section.</p>",
        "id": 417959079,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706128339
    },
    {
        "content": "<p><del>While investigating this, I noticed that while you can call imports from the core-wasm start function, the function table isn't always initialized at that time. I was able to call <code>write(1, ...)</code> and it worked, but <code>printf</code> didn't work because it does a call_indirect internally.</del></p>",
        "id": 417963093,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706130126
    },
    {
        "content": "<p>Or, wait, the table is initialized, but the adapter's table isn't initialized yet.</p>",
        "id": 417963481,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1706130270
    },
    {
        "content": "<p>Question regarding the Go <code>wasmexport</code> proposal and how it might interact with <code>cabi_realloc</code>:</p>\n<ol>\n<li>Is a guest allowed to make host calls inside of a call to <code>cabi_realloc</code>?</li>\n<li>The Go <code>wasmexport</code> proposal presumes that the Go scheduler will be activated and run while the exported function runs, and pause other goroutines when the called func completes. My guess is that might not be desirable in a <code>cabi_realloc</code> call.</li>\n</ol>",
        "id": 418463849,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706407953
    },
    {
        "content": "<blockquote>\n<p>Is a guest allowed to make host calls inside of a call to cabi_realloc?</p>\n</blockquote>\n<p>Short answer: no.</p>\n<p>Long answer: You'll want to take a look at <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">CanonicalABI.md</a> which outlines all of this. Specifically what you'll be interested in here is the <code>may_leave</code> flag. This is notably set to <code>False</code> while <code>lower_values</code> is called, meaning that when values are being lowered into a component (which is when <code>cabi_realloc</code> would be called) the flag is false which means that an import would trap. More-or-less <code>cabi_realloc</code> is expected to be a \"stay inside the module\" kind of thing.</p>\n<blockquote>\n<p>My guess is that might not be desirable in a cabi_realloc call.</p>\n</blockquote>\n<p>If activating the schedule has high overhead, then yes you probably don't want to do that. If there's low overhead though it may not be an issue. It's worth pointing out that there are no threads in components at this time, and it'll be awhile before there are. That means that in a single-threaded world where you're calling <code>malloc</code> there's not much use for the scheduler, especially if imports can't be called</p>",
        "id": 418464331,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706408517
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 418464517,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706408723
    },
    {
        "content": "<p>I suspect if the Go runtime is adapted for this, then anytime it’s not allowed to call imports, it could block the calling goroutine until it can, and go to another goroutine</p>",
        "id": 418464631,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706408849
    }
]