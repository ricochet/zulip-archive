[
    {
        "content": "<p>I've been experimenting with having a Guest component create a resource that is then accessed by the Host. I'm struggling with what is the correct way for the Host to do that.</p>\n<p>Here is my wit definition</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">:</span><span class=\"nc\">guestresource</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">bootstrap</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">myresource</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">dosomething</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">myresource</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">guestresource</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">bootstrap</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This is the Guest code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">::</span><span class=\"n\">cell</span><span class=\"p\">::</span><span class=\"n\">RefCell</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">test</span><span class=\"p\">::</span><span class=\"n\">guestresource</span><span class=\"p\">::</span><span class=\"n\">bootstrap</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">test</span><span class=\"p\">::</span><span class=\"n\">guestresource</span><span class=\"p\">::</span><span class=\"n\">bootstrap</span><span class=\"p\">::</span><span class=\"n\">GuestMyresource</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">test</span><span class=\"p\">::</span><span class=\"n\">guestresource</span><span class=\"p\">::</span><span class=\"n\">bootstrap</span><span class=\"p\">::</span><span class=\"n\">Myresource</span><span class=\"p\">;</span>\n\n<span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"guestresource\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"../../wit\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MyresourceImpl</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestMyresource</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyresourceImpl</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">MyresourceImpl</span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">data</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">RefCell</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[])</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">dosomething</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Impl</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Impl</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Impl</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">Myresource</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyresourceImpl</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Myresource</span><span class=\"p\">,()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mri</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyresourceImpl</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Myresource</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">mri</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">mr</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The Host code that loads and instantiates the Guest looks like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::{</span><span class=\"n\">component</span><span class=\"p\">::{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::{</span><span class=\"n\">DirPerms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FilePerms</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">myresource</span><span class=\"p\">;</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime_wasi</span><span class=\"p\">::</span><span class=\"n\">add_to_linker_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"p\">::</span><span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./guest.component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"./\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"/\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">DirPerms</span><span class=\"p\">::</span><span class=\"n\">all</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"n\">FilePerms</span><span class=\"p\">::</span><span class=\"n\">all</span><span class=\"p\">(),</span>\n<span class=\"w\">    </span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasi</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">table</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Ctx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">ctx</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">myresource</span><span class=\"p\">::</span><span class=\"n\">GuestresourcePre</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_pre</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pre</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">test_guestresource_bootstrap</span><span class=\"p\">().</span><span class=\"n\">call_init</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">gmr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"p\">.</span><span class=\"n\">try_into_resource</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">myresource</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">test</span><span class=\"p\">::</span><span class=\"n\">guestresource</span><span class=\"p\">::</span><span class=\"n\">bootstrap</span><span class=\"p\">::</span><span class=\"n\">GuestMyresource</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">gm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">table</span><span class=\"p\">().</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">gmr</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">gm</span><span class=\"p\">.</span><span class=\"n\">call_dosomething</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>With the referenced myresource module simply containing the wit bindgen</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"./wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"guestresource\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>The problem I'm running into is with the double borrow on the store</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">gm</span><span class=\"p\">.</span><span class=\"n\">call_dosomething</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ra</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>\"cannot borrow <code>store</code> as mutable more than once at a time\"</p>\n<p>This maybe more of Rust problem that is showing my novice Rust skills but would appreciate some suggestions on how this show work</p>",
        "id": 456519749,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1722857843
    },
    {
        "content": "<p>It appears to me the mistake here is using the ResourceTable to store the resource. ResourceTable is a way for host code to map a Resource&lt;T&gt; to its T (the table owns the T), but thats not the right model for the way a resource implemented in the guest works.</p>",
        "id": 456657217,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722878050
    },
    {
        "content": "<p>really, you just want to keep the <code>Myresource</code> value, and you should put it somewhere that isnt part of the Store - don't put it into a ResourceTable if you can help it</p>",
        "id": 456659098,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722878506
    },
    {
        "content": "<p>or if you do put it in there, you can Clone to get the value out. Myresource is basically just an integer - its trivial to \"clone\" one</p>",
        "id": 456659189,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722878523
    },
    {
        "content": "<p>afaict, theres no real use of having a Resource&lt;Myresource&gt; in your code example, the GuestMyresource struct provides the methods in terms of just Myresource arguments (which is a type alias for ResourceAny)</p>",
        "id": 456659946,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722878714
    },
    {
        "content": "<p>Thanks Pat that makes sense</p>",
        "id": 456824094,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1722942155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634674\">Richard Backhouse</span> has marked this topic as resolved.</p>",
        "id": 456824125,
        "sender_full_name": "Notification Bot",
        "timestamp": 1722942166
    }
]