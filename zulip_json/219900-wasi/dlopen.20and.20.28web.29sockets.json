[
    {
        "content": "<p>i'm working on porting our application to wasi, and i'm interested in what the plans are for two interfaces that would be useful for us:</p>\n<ul>\n<li>module loading (a la dlopen). that seems, at a first glance, pretty straightforward to implement</li>\n<li>tcp sockets or perhaps websockets. we have a simple message-based protocol over tcp or websockets, and when running in a browser, there's some definite allure to using the host websockets and ripping out all tcp-related code.</li>\n</ul>\n<p>as discussed earlier in <a class=\"stream\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general\">#general</a>, i wouldn't be so dependent on wasi for these if it wasn't for the fact that i can't have a wasi-compatible application with optional non-wasi imports.</p>",
        "id": 370877271,
        "sender_full_name": "ovf",
        "timestamp": 1688061825
    },
    {
        "content": "<p>re: dlopen, it isn't at all straightforward to implement, but <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> is doing it anyway <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 370878383,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688062035
    },
    {
        "content": "<p>There is a sockets proposal in wasi<br>\n<a href=\"https://github.com/WebAssembly/wasi-sockets/\">https://github.com/WebAssembly/wasi-sockets/</a></p>",
        "id": 370878563,
        "sender_full_name": "Robin Brown",
        "timestamp": 1688062071
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/219900-wasi/topic/dlopen.20and.20.28web.29sockets/near/370878383\">said</a>:</p>\n<blockquote>\n<p>re: dlopen, it isn't at all straightforward to implement, but <span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> is doing it anyway <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>thanks! any pointers?</p>",
        "id": 370878892,
        "sender_full_name": "ovf",
        "timestamp": 1688062125
    },
    {
        "content": "<p>See <a href=\"https://github.com/dicej/component-linking-demo\">https://github.com/dicej/component-linking-demo</a> (when GitHub is back up) for an example of using <code>dlopen</code> with WASI.  It currently requires patched versions of <code>wasi_sdk</code> and <code>wasm-tools</code>, which I'm in the process of getting upstreamed.</p>",
        "id": 370879038,
        "sender_full_name": "Joel Dice",
        "timestamp": 1688062154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/219900-wasi/topic/dlopen.20and.20.28web.29sockets/near/370878563\">said</a>:</p>\n<blockquote>\n<p>There is a sockets proposal in wasi<br>\n<a href=\"https://github.com/WebAssembly/wasi-sockets/\">https://github.com/WebAssembly/wasi-sockets/</a></p>\n</blockquote>\n<p>what's the status of that in layman's terms (i.e. it's making its way into preview2, etc.)? sorry to say the wasi spec process appears a little opaque from an outsider's perspective</p>",
        "id": 370880043,
        "sender_full_name": "ovf",
        "timestamp": 1688062331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/219900-wasi/topic/dlopen.20and.20.28web.29sockets/near/370879038\">said</a>:</p>\n<blockquote>\n<p>See <a href=\"https://github.com/dicej/component-linking-demo\">https://github.com/dicej/component-linking-demo</a> (when GitHub is back up) for an example of using <code>dlopen</code> with WASI.  It currently requires patched versions of <code>wasi_sdk</code> and <code>wasm-tools</code>, which I'm in the process of getting upstreamed.</p>\n</blockquote>\n<p>that seems to rely on the runtime supplying a static set of libraries/symbols at startup?</p>",
        "id": 370883548,
        "sender_full_name": "ovf",
        "timestamp": 1688062958
    },
    {
        "content": "<p>Ya, I like to call it \"not-quite-dynamic\" linking because it hooks into dynamic linking/loading APIs but does require you to have them all at build time.</p>",
        "id": 370885966,
        "sender_full_name": "Robin Brown",
        "timestamp": 1688063488
    },
    {
        "content": "<p>I'm not sure the exact status of the proposal. <span class=\"user-mention\" data-user-id=\"378155\">@Badeend</span>  who is its champion may be able to help summarize.</p>",
        "id": 370886243,
        "sender_full_name": "Robin Brown",
        "timestamp": 1688063546
    },
    {
        "content": "<blockquote>\n<p>that seems to rely on the runtime supplying a static set of libraries/symbols at startup?</p>\n</blockquote>\n<p>Yes, that's correct.  I've been calling it pseudo-dynamic linking.  Truly dynamic linking is out of scope for the time being.  You could probably rig something up on your own, e.g. via trampoline functions using Wasmtime's embedding API.</p>",
        "id": 370887066,
        "sender_full_name": "Joel Dice",
        "timestamp": 1688063707
    },
    {
        "content": "<p>I'm not sure what a standardized form of true dynamic linking would look like; it's not something I've thought about much, yet.</p>",
        "id": 370887581,
        "sender_full_name": "Joel Dice",
        "timestamp": 1688063805
    },
    {
        "content": "<p>i guess if done unix-style, there effectively be all the complexity of a dynamic linker including recursive dependencies</p>",
        "id": 370889404,
        "sender_full_name": "ovf",
        "timestamp": 1688064153
    }
]