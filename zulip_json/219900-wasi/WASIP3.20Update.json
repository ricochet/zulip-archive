[
    {
        "content": "<p>Late last year we decided that we'd like to start running a standup style update and to use the <a href=\"https://github.com/orgs/bytecodealliance/projects/16\">Ship WASIp3 project board</a>  (see topic <a class=\"message-link\" href=\"/#narrow/channel/219900-wasi/topic/WASIp3.20project.20board/near/479915405\">#wasi &gt; WASIp3 project board @ ðŸ’¬</a> for background) to coordinate work.</p>\n<p>Let's kick things off with an async style standup for this week!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div>",
        "id": 493965033,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736958026
    },
    {
        "content": "<p>Folks that have active work streams, will you post a quick update?<br>\ncc <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span></p>",
        "id": 493965388,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736958123
    },
    {
        "content": "<h2>Jan 15, 2025</h2>\n<p><strong>Bailey Hayes</strong>: WASI clocks and random 0.3.0-draft WIT definitions have been reviewed and merged. We adjusted the API for wasi-clocks now that fn's are async, see: <a href=\"https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44\">https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44</a></p>\n<p>We decided to rev the <code>since</code> versions as 0.3.0 will make breaking changes to the 0.2.x series. Expect all 0.3.0-draft WIT's to align to this. Once <span class=\"user-mention\" data-user-id=\"484032\">@Roman Volosatovs</span> PR's for filesystem and sockets merge, wasi-cli is the next target. I believe we're very close to having a draft for WASIP2 interfaces (http draft already exists but will be updated once deps land).</p>\n<p>Once the above is complete, adding support for WASIP3 interfaces in <a href=\"https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=85549251\">wasmtime</a> and JCO can begin</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e92b42eaf014394d5c4109fb85278027ffe6bf29/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316333383865326530633363336335316234626534333232666265363935663061386534356139643635313939653938376538626331616631663031353732342f576562417373656d626c792f776173692d636c6f636b73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-clocks/blob/main/wit-0.3.0-draft/monotonic-clock.wit#L34-L44\" title=\"wasi-clocks/wit-0.3.0-draft/monotonic-clock.wit at main Â· WebAssembly/wasi-clocks\">wasi-clocks/wit-0.3.0-draft/monotonic-clock.wit at main Â· WebAssembly/wasi-clocks</a></div><div class=\"message_embed_description\">Clocks API for WASI. Contribute to WebAssembly/wasi-clocks development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=85549251\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16/views/1?pane=issue&amp;itemId=85549251\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div>",
        "id": 493967654,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736958739
    },
    {
        "content": "<h2>Items Ready for Work</h2>\n<p>If you're interested in jumping in, I see a couple items that could begin now:</p>\n<ul>\n<li>Add a <code>non-blocking</code> attribute <a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=89740278\">issue on board</a>. Before starting this one, check-in with <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> </li>\n<li><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=86852507\">Doc work in component model book</a></li>\n</ul>\n<p>When picking up a new issue on the board, set yourself as the assignee.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=89740278\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=89740278\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=86852507\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=86852507\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div>",
        "id": 493969444,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1736959211
    },
    {
        "content": "<p>Async/future/stream/error-context support has been merged into <code>wasm-tools</code> and <code>wit-bindgen</code> and is available in their latest releases.  Still iterating on the Wasmtime PR, knocking out todo items one by one.  Hoping to move that one to \"ready-for-review\" by the end of the month.  Meanwhile, it is feature-complete (modulo the <code>error-context</code> work Victor is doing, which I'm reviewing now), so feel free to clone the branch, kick the tires, and start adding WASIp3 support to <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code>.</p>",
        "id": 493969697,
        "sender_full_name": "Joel Dice",
        "timestamp": 1736959275
    },
    {
        "content": "<p>Hey all, here's what I'm working on right now: </p>\n<ul>\n<li>P3 Error impl<ul>\n<li>Progress on implementation of Error, working implementation right now, w/ a PR to <code>wit-bindgen-rt</code> and a draft to Joel's wasmtime branch (immense thanks to <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> who walked me through this)</li>\n</ul>\n</li>\n<li>Jco async host imports<ul>\n<li>Tests for CLI stuff and HTTP</li>\n<li>Adding more tests for the other new implementations</li>\n<li>Doing a bit of exploration on how we can build <code>asyncify</code> faster (unlikely to pan out)</li>\n</ul>\n</li>\n</ul>\n<p>CC <span class=\"user-mention\" data-user-id=\"479055\">@Calvin Prewitt</span> who is doing the actual bulk of the work of jco host async imports</p>",
        "id": 493969815,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1736959302
    },
    {
        "content": "<p><code>wasi-sockets</code> and <code>wasi-filesystem</code> WIT update PRs are ready for review</p>\n<p>will work on removing <code>wasi:io/error.error</code> dep from <code>wasi:http</code> and after that start WASI implementation in Wasmtime</p>",
        "id": 494165334,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737039030
    },
    {
        "content": "<p>Thanks. I've got a few remarks on the wasi-sockets part. Hope to get it written down soon</p>",
        "id": 494165945,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1737039154
    },
    {
        "content": "<p>Whatâ€™s the status of implementing P3 streams and futures in wasmtime::component? Thatâ€™s a prerequisite to a wasi impl, correct?</p>",
        "id": 494182802,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737043556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> see my update above; that's feature-complete and has decent test coverage.  Working to get that PR in a reviewable state (hopefully in the next week or two), but meanwhile you can use my PR branch.</p>",
        "id": 494184786,
        "sender_full_name": "Joel Dice",
        "timestamp": 1737044091
    },
    {
        "content": "<p>Thanks. I will take a look. Iâ€™ve been factoring out wasi-io from wasmtime-wasi so that at least that much can be built nostd, idk how that will intersect with these new streams and futures but hopefully they can plug together</p>",
        "id": 494187922,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1737044927
    },
    {
        "content": "<p>Just a heads-up, I've started working on <code>stream</code> types with no <code>&lt;T&gt;</code>, added this ticket to the board: <a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967\">https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967</a><br>\ni.e. implementing the spec change from <a href=\"https://github.com/WebAssembly/component-model/pull/440\">https://github.com/WebAssembly/component-model/pull/440</a> in wasm-tools and wit-bindgen</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5ce2a01c3fe27d4bc753d1525377bb941d733be2/68747470733a2f2f6769746875622e636f6d2f6f70656e67726170682e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/orgs/bytecodealliance/projects/16?pane=issue&amp;itemId=94157967\" title=\"Ship WASIp3 â€¢ bytecodealliance\">Ship WASIp3 â€¢ bytecodealliance</a></div><div class=\"message_embed_description\">Ship WASIp3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/440\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a596bbaf51cf1d0a87b3f8a19176419b1bb874e1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646464653365643466643162666238326430643039613363373938623463303934373262386461336163633737333561646536366362393737386661626638332f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f343430&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/440\" title=\"Make future and stream element types optional by lukewagner Â· Pull Request #440 Â· WebAssembly/component-model\">Make future and stream element types optional by lukewagner Â· Pull Request #440 Â· WebAssembly/component-model</a></div><div class=\"message_embed_description\">For the same reason that variant and result case payloads and func results are optional, it seems like the element types of future and stream should be optional, allowing them to convey (single-sho...</div></div></div>",
        "id": 494344574,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737115142
    },
    {
        "content": "<p>Opened a draft PR to <code>wasi:cli</code> for 0.3.0 <a href=\"https://github.com/WebAssembly/wasi-cli/pull/52\">https://github.com/WebAssembly/wasi-cli/pull/52</a><br>\na few smaller-scoped <code>wasi:http</code> updates to 0.3.0 <a href=\"https://github.com/WebAssembly/wasi-http/pull/143\">https://github.com/WebAssembly/wasi-http/pull/143</a> <a href=\"https://github.com/WebAssembly/wasi-http/pull/142\">https://github.com/WebAssembly/wasi-http/pull/142</a><br>\n<code>wasi:random</code> fix <a href=\"https://github.com/WebAssembly/wasi-random/pull/52\">https://github.com/WebAssembly/wasi-random/pull/52</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/pull/52\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ee5f0bd62ba1ba817a737b40ab49512816e2fca0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346538643530376663356234336139663566316135333162333835363262623861383435303032353637376530636364636666346637653765383465323765342f576562417373656d626c792f776173692d636c692f70756c6c2f3532&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/pull/52\" title=\"feat: add `wit-0.3.0-draft` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-cli\">feat: add `wit-0.3.0-draft` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Refs WebAssembly/wasi-random#52\nRefs WebAssembly/wasi-sockets#111\nRefs WebAssembly/wasi-filesystem#164</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/143\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a06920da5ad024e4936a3a975a2d2742b6da05ee/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303666343266666163353364363633666236336639626635356234313963623661313037313939386330623039373531666534323839333034396636653832382f576562417373656d626c792f776173692d687474702f70756c6c2f313433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/143\" title=\"feat(0.3): rework stream error handling/remove `wasi:io` usage by rvolosatovs Â· Pull Request #143 Â· WebAssembly/wasi-http\">feat(0.3): rework stream error handling/remove `wasi:io` usage by rvolosatovs Â· Pull Request #143 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Remove wasi:io usage in wit-0.3.0-draft\nFollowed the same stream error handling convention as currently in\n\nfeat: add wasi-0.3.0 draftÂ wasi-filesystem#164\nfeat: add wasi-0.3.0 draftÂ wasi-sockets#111</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/pull/142\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7d6799708d75681725b6037dbe47b3ae528c835d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306363613865653032663064633439313131653164316536333964353231306431653666313532626563353930623435636164386332353561303363336564622f576562417373656d626c792f776173692d687474702f70756c6c2f313432&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/pull/142\" title=\"chore(0.3.0-draft): update `wasi:{clocks,random}` to `0.3.0` by rvolosatovs Â· Pull Request #142 Â· WebAssembly/wasi-http\">chore(0.3.0-draft): update `wasi:{clocks,random}` to `0.3.0` by rvolosatovs Â· Pull Request #142 Â· WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">update wit-deps to 0.5.0 (mainly for feat: add support for subdirÂ bytecodealliance/wit-deps#254)\nverify wit-0.3.0-draft deps in CI\nupdate wasi:clocks in wit-0.3.0-draft subtree to 0.3.0\nremove redu...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-random/pull/52\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3dec95166114792d12b412f01ccdf5bfe8b0e464/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656261656437343733336262653963663737653738623965623062316236616664326236386464613937613337393131333839316366656335643738303038642f576562417373656d626c792f776173692d72616e646f6d2f70756c6c2f3532&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-random/pull/52\" title=\"chore(0.3): bump `@since` gates to `0.3.0` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-random\">chore(0.3): bump `@since` gates to `0.3.0` by rvolosatovs Â· Pull Request #52 Â· WebAssembly/wasi-random</a></div><div class=\"message_embed_description\">Refs WebAssembly/wasi-filesystem#164 (comment)</div></div></div>",
        "id": 494345064,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737115319
    },
    {
        "content": "<p>Added a draft PR for <code>stream</code> of unit: <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1978\">https://github.com/bytecodealliance/wasm-tools/pull/1978</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1978\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/242c1a8c42bf7447a0e4e32f96ef0c956c7d68ea/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316662656566373138613133663430376230366532653165366539373237333030353466383531376135633835396265376630373033613962633631343762312f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31393738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1978\" title=\"feat: add support for `stream` with no `&lt;T&gt;` by rvolosatovs Â· Pull Request #1978 Â· bytecodealliance/wasm-tools\">feat: add support for `stream` with no `&lt;T&gt;` by rvolosatovs Â· Pull Request #1978 Â· bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Add support for streams with no elements (streams of unit)\nRefs WebAssembly/component-model#440</div></div></div>",
        "id": 494353635,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1737118217
    }
]