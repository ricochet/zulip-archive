[
    {
        "content": "<p>as a followup to the W3C WASI sync today, I posted an issue to begin discussing one of the issues Lee and I mentioned</p>\n<p><a href=\"https://github.com/WebAssembly/WASI/issues/262\" title=\"https://github.com/WebAssembly/WASI/issues/262\">https://github.com/WebAssembly/WASI/issues/262</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/issues/262\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/issues/262\" title=\"Composable WASI interfaces 路 Issue #262 路 WebAssembly/WASI\">Composable WASI interfaces 路 Issue #262 路 WebAssembly/WASI</a></div><div class=\"message_embed_description\">I&#39;d like WASI function calls to be routed to an instance based on the origin of the handle. This likely requires some dynamic routing capabilities in the wasm runtime. As things currently work,...</div></div></div>",
        "id": 195112857,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1587672408
    },
    {
        "content": "<p>really excited to see what conversation comes of this</p>",
        "id": 195112876,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1587672420
    },
    {
        "content": "<p>I think a lot of this will be addressed by the linking proposal that <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> is working on</p>",
        "id": 195124758,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1587679260
    },
    {
        "content": "<p>Maybe that's grown in scope? I don't think it did when we chatted</p>",
        "id": 195125094,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1587679465
    },
    {
        "content": "<p>is there a tl;dr on that?</p>",
        "id": 195125165,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1587679514
    },
    {
        "content": "<p>Luke mentioned in the WASI call that he's currently working on an explainer, which I hope should answer this</p>",
        "id": 195126863,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1587680582
    },
    {
        "content": "<p>I'm not sure it will address all of what you mention in the issue, but I do think it should be a good part of a solution</p>",
        "id": 195126933,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1587680630
    },
    {
        "content": "<p>Yes, I think there are a couple of separable pieces here to make the end-to-end use cases Benjamin is talking about work.  <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> also has a doc on a \"proxy\" feature in wasmtime that i think addresses a different facet of this problem.  Lastly, there are some issues the have to do with apps which have multiple stores where stores can independently die with the other stores living on.</p>",
        "id": 195131474,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1587684309
    },
    {
        "content": "<p>One other thing to  get on the radar is how host/native modules are handled. We've played around with decoupling this from the engine so the host side code doesn't have to live in the codebases of wasmtime, v8 etc... We recently were experimenting with an example of a framebuffer api. On Linux we had a host module where this was implemented with SDL, loaded a .so and could be used by v8, wasmtime and our interpreter without modification. Then when we moved it to windows, we implemented the same API as dll. I thought it was quite nice that to add and use that new API, across different platforms and 3 engines required no changes to the engines themselves.</p>",
        "id": 195135028,
        "sender_full_name": "Lee Campbell",
        "timestamp": 1587687541
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/jd2JgncwXTF9Uhlg8I3DMhjJ/doom.mp4\" title=\"doom.mp4\">doom.mp4</a></p>",
        "id": 195135745,
        "sender_full_name": "Lee Campbell",
        "timestamp": 1587688313
    },
    {
        "content": "<p>In that little video thats doom running in wasmtime, but using a handle to a framebuffer api to draw to the screen. The backend of that is implemented in a host side lib and calls to it are dynamically routed based on the handle. So no changes required to the engine, and no changes required to the wasm binary when changing the display backend. Would be keen to discuss at some point how folks think about handling this host side code.</p>",
        "id": 195136055,
        "sender_full_name": "Lee Campbell",
        "timestamp": 1587688653
    }
]