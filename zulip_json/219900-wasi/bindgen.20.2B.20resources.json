[
    {
        "content": "<p>I ran into an issue where implementing <code>impl&lt;T: WasiNnView&gt; gen::tensor::HostTensor for T</code> returned the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0119</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementations</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">HostTensor</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">26</span><span class=\"p\">:</span><span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">26</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\">     </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"mi\">27</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"ml\"</span><span class=\"p\">,</span>\n<span class=\"mi\">28</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit/wasi-nn.wit\"</span><span class=\"p\">,</span>\n<span class=\"mi\">29</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"n\">trappable_imports</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"mi\">30</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">______</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">conflicting</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"err\">`</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">265</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiNnView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"p\">::</span><span class=\"n\">tensor</span><span class=\"p\">::</span><span class=\"n\">HostTensor</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"o\">-------------------------------------------------</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">bindgen</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>This is only a problem now that I started using resources in the WIT file. I noticed that <code>wasmtime-wasi-http</code> goes about this with a wrapper struct so I decided to add the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">WasiNnImpl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">WasiNnView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"p\">::</span><span class=\"n\">tensor</span><span class=\"p\">::</span><span class=\"n\">HostTensor</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasiNnImpl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Is this the right approach? I don't seem to see the same kind of wrapping in <code>wasmtime-wasi</code>â€“how come?</p>",
        "id": 444529341,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718302474
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>?</p>",
        "id": 444529593,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718302521
    },
    {
        "content": "<p>If you can avoid it I'd skip <code>WasiNnView</code> entirely</p>",
        "id": 444541685,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306059
    },
    {
        "content": "<p>For resources, if you can get away with it, I might recommend:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">WasiNnView</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">gen</span><span class=\"p\">::</span><span class=\"n\">tensor</span><span class=\"p\">::</span><span class=\"n\">HostTensor</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasiNnView</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 444541766,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306091
    },
    {
        "content": "<p>hm...</p>",
        "id": 444541796,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718306103
    },
    {
        "content": "<p>(sorry editing the message above)</p>",
        "id": 444541859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306123
    },
    {
        "content": "<p>and then <code>add_to_linker</code> would look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">WasiNnView</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 444541961,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306158
    },
    {
        "content": "<p>for <code>wasmtime-wasi</code> we can in theory do this</p>",
        "id": 444542031,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306168
    },
    {
        "content": "<p>Why do I see views in <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code>?</p>",
        "id": 444542036,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718306169
    },
    {
        "content": "<p>but <code>wasmtime-wasi-http</code> we can't do this naively because it has customization hooks via a trait</p>",
        "id": 444542076,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306185
    },
    {
        "content": "<p>so if you want customization hooks for wasi-nn eventually on the embedder size you can go the route of a <code>WasiNnView</code> trait</p>",
        "id": 444542109,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306202
    },
    {
        "content": "<p>but if you don't know of any right now it's much easier to stick with concrete types/structures</p>",
        "id": 444542130,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306212
    },
    {
        "content": "<p>what type of customization hooks does wasi-http need? where can I look at that?</p>",
        "id": 444542313,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718306284
    },
    {
        "content": "<p>oh, like each embedder of Wasmtime may want to \"do special stuff\" for each HTTP request so they provide their own implementation of <code>WasiHttpView</code>?</p>",
        "id": 444542795,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718306392
    },
    {
        "content": "<p>for wasi:http it's primarily <a href=\"https://docs.rs/wasmtime-wasi-http/latest/wasmtime_wasi_http/trait.WasiHttpView.html#method.send_request\"><code>send_request</code></a></p>",
        "id": 444543419,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306505
    },
    {
        "content": "<p>it's basically which layer of abstraction you want to work at</p>",
        "id": 444543597,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306541
    },
    {
        "content": "<p>so for example embedders can implement all the wasi traits themselves whenver they want</p>",
        "id": 444543626,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306550
    },
    {
        "content": "<p>that's a bit of a big task though so ideally you want to use wasmtime-wasi</p>",
        "id": 444543650,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306559
    },
    {
        "content": "<p>but then often embedders want to customize just a few things here and there</p>",
        "id": 444543667,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306567
    },
    {
        "content": "<p>for some requests we can do that via <code>WasiCtx</code> and various configuration variables in there</p>",
        "id": 444543703,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306577
    },
    {
        "content": "<p>but for other cases you want a full-blown host-defined callback</p>",
        "id": 444543746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306585
    },
    {
        "content": "<p>but for callbacks it's a question of how do you close over the interesting state, and threading <code>&amp;mut T</code> from <code>Store&lt;T&gt;</code> isn't viable here</p>",
        "id": 444543844,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306604
    },
    {
        "content": "<p>so the next best thing we've \"figured out\" is <code>trait FooView</code></p>",
        "id": 444543892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306614
    },
    {
        "content": "<p>where the implementation of <code>FooView</code> has whatever state it needs and the callbacks are trait methods</p>",
        "id": 444543943,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306625
    },
    {
        "content": "<p>overall it's not a great design but IMO it's the best we've got so far and it's a reflection of a tricky problem space</p>",
        "id": 444544060,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306645
    },
    {
        "content": "<p>ok, I see what you mean; it seems like the approach should be \"start with the concrete type\" and eventually--and only if needed--\"refactor with a view trait\"</p>",
        "id": 444545053,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718306849
    },
    {
        "content": "<p>Yeah if that works it's the path I'd recommend, dealing with blanket impls and extra customization generally leads to headaches</p>",
        "id": 444546473,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307274
    },
    {
        "content": "<p>Oh, I realized there might be another reason for creating a <code>WasiNnView</code> other than customizability. For <code>wasmtime run</code> and <code>wasmtime serve</code>, we end up creating a <code>struct Host</code> with a single <code>ResourceTable</code> to be shared between all the WASI proposals that are enabled at the time. In that case, we _do_ end up needing a bridge to the shared table and the current approach is via <code>*View</code> traits from each proposal. I think I do need to implement <code>WasiNnView</code> then, right?</p>",
        "id": 444582946,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718322295
    },
    {
        "content": "<p>Not necessarily, that's the <code>'a</code> in <code>WasiNnView&lt;'a&gt;</code> above, you wouldn't actually store <code>WasiNnView</code> anywhere but it'd only be created as a temporary in a closure</p>",
        "id": 444583169,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718322429
    },
    {
        "content": "<p>but it'd borrow a <code>ResourceTable</code> from elsewhere</p>",
        "id": 444583182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718322446
    },
    {
        "content": "<p>ah, ok!</p>",
        "id": 444583193,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1718322462
    }
]