[
    {
        "content": "<p>Is it possible to create a .wit file from a wasm component file rather than the typical approach of using .wit file to generate the code with wit-bindgen?</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Command)]</span><span class=\"w\"> </span><span class=\"c1\">// This derive macro would export to a `record add { amount: i64 }`</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">amount</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[command]</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;</span><span class=\"n\">Add</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Counter</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nb\">Result</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Added</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cmd</span>: <span class=\"nc\">Add</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// This function is generated from the `#[command]` attribute macro above,</span>\n<span class=\"c1\">// and exports to a `handle_add: func(state: Counter, cmd: Add) -&gt; Added`</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"c\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">handle_add</span><span class=\"p\">(</span><span class=\"n\">state</span>: <span class=\"nc\">Counter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cmd</span>: <span class=\"nc\">Add</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"n\">Added</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">&lt;</span><span class=\"n\">Counter</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Handler</span><span class=\"o\">&lt;</span><span class=\"n\">Add</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cmd</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And from this code, I can compile it to a wasm component, and extract these exported functions from a host loading the component?</p>",
        "id": 358635878,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1684219360
    },
    {
        "content": "<p>Take a look at the <a href=\"https://github.com/bytecodealliance/wasm-tools\">wasm-tools</a> <code>component wit</code> subcommand, e.g. <code>wit-tools component wit your-component.wasm</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4601afabd40c7641e0cf73936c26510a2eaaac2b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653063613134376331643534636633656232343337623231666265663065633836663530623338663266616365346137373562623430653161316366316230632f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 358716095,
        "sender_full_name": "Lann Martin",
        "timestamp": 1684240460
    },
    {
        "content": "<p>typo: <code>wit-tools</code> -&gt; <code>wasm-tools</code></p>",
        "id": 358719253,
        "sender_full_name": "Lann Martin",
        "timestamp": 1684241127
    },
    {
        "content": "<p>Currently there's no implementation of going from Rust source code annotations directly to a component without WIT. As Lann mentioned you can extract WIT from a component, but given your snippet that doesn't sound like the direction you'd like to go in (instead a more <code>#[wasm_bindgen]</code>-like-approach where you annotate Rust and a component gets generated)</p>",
        "id": 358745756,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684246364
    }
]