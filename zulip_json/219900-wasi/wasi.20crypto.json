[
    {
        "content": "<p>hey everyone, internally we have \"approval boards\" for things like crypto libraries, and someone wants to use wasm components (yay!) and the \"approval board\" asked about the crypto libs with the intention of asking to approve them.</p>",
        "id": 477674647,
        "sender_full_name": "Ralph",
        "timestamp": 1729263587
    },
    {
        "content": "<p>now we're way early for that, but <em>exactly how do we see this kind of lib appearing?</em> Do we see a standalone lib for that, or implementations to provide their own by bringing in standard C/Rust impls to the component?</p>",
        "id": 477674891,
        "sender_full_name": "Ralph",
        "timestamp": 1729263643
    },
    {
        "content": "<p>I'm not sure that there is one blanket answer to this one. For some cryptographic operations a board might not approve <em>any</em> wasm guest implementation today because wasm doesn't have constant-time operations.</p>",
        "id": 477695815,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729270702
    },
    {
        "content": "<p>yup, totes get it. The question would definitely be how are we thinking about the future of this area...</p>",
        "id": 477696020,
        "sender_full_name": "Ralph",
        "timestamp": 1729270792
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> did some great work with wasi:tls, and I'm wondering about a more general approach to that kind of thing.</p>",
        "id": 477696135,
        "sender_full_name": "Ralph",
        "timestamp": 1729270826
    },
    {
        "content": "<p>It's worth noting as well that there are some interesting isolation/sandboxing vs. crypto-properties tradeoffs here. Historically in wasmtime, wasi-crypto has had a ... checkered ... history because of memory-safety issues. Personally I'd love to see something like Alex and Jamey's work on 128-bit arithmetic performance, plus any thinking needed around constant-time ops, to allow for performant+compliant impls on the guest side</p>",
        "id": 477696171,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729270841
    },
    {
        "content": "<p>(but then I'm a VM isolation + verification person, not a crypto person, so the opposite bias might lead to the opposite answer!)</p>",
        "id": 477696205,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729270858
    },
    {
        "content": "<p>absolutely understand</p>",
        "id": 477696252,
        "sender_full_name": "Ralph",
        "timestamp": 1729270873
    },
    {
        "content": "<p>In the near term a wasi:tls-like approach would be to pick a type of cryptographic operation like \"symmetric block encryption\", define a generic interface for that operation, then use some existing (preapproved, even) implementation(s) on the host. Depending on what level of abstraction these things get evaluated at you might not even need separate approval for wasm.</p>",
        "id": 477697052,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729271182
    },
    {
        "content": "<p>I wouldn't actually get those peepz on <em>wasm</em> per se, but on a block of something, as you suggest.... that's a good path.</p>",
        "id": 477697195,
        "sender_full_name": "Ralph",
        "timestamp": 1729271247
    },
    {
        "content": "<p>i think a really great starting point is to render the webcrypto api in wit <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API\">https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/995c0c58fb542e2180e01753cfa3c88c39d0272c/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e64383933353235613466623566623166363761322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API\" title=\"Web Crypto API - Web APIs | MDN\">Web Crypto API - Web APIs | MDN</a></div><div class=\"message_embed_description\">The Web Crypto API is an interface allowing a script to use cryptographic primitives in order to build systems using cryptography.</div></div></div>",
        "id": 477697652,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1729271427
    },
    {
        "content": "<p>that takes care of the preapproved implementation for a lot of contexts (web, node.js)</p>",
        "id": 477697805,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1729271496
    },
    {
        "content": "<p>(or will, once JSPI lands <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 477698415,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729271750
    },
    {
        "content": "<p>real soon now</p>",
        "id": 477698869,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1729271938
    },
    {
        "content": "<p>Web crypto has various algorithms that absolutely should have huge warnings to never ever use them unless you need to interact with an existing system that uses them. For example encryption without authentication. Also for whatever reason the AES-GCM interface allows passing an arbitrary nonce rather than generating an appropriate one automatically. Nonce reuse trivially breaks AES-GCM. For asymetric encryption it only supports RSA-OAEP rather than something like HPKE. The latter also uses elliptic curves rather than RSA. And for encryption, signing, key derivation and key wrapping they are mixing symmetric and asymetric algorithms in a single api despite their widely different semantics.</p>",
        "id": 477709536,
        "sender_full_name": "bjorn3",
        "timestamp": 1729276376
    },
    {
        "content": "<p>Please let a proper cryptographer review whatever api you come up with to make it misuse resistant rather than blindly adopting a W3C standard: <a href=\"https://blog.cryptographyengineering.com/2012/12/28/the-anatomy-of-bad-idea/\">https://blog.cryptographyengineering.com/2012/12/28/the-anatomy-of-bad-idea/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://blog.cryptographyengineering.com/2012/12/28/the-anatomy-of-bad-idea/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4cf5b8eb241ee096d11789a72aed954eb34d649a/687474703a2f2f6661726d342e737461746963666c69636b722e636f6d2f333430342f333634363837343731325f353136373331653034342e6a7067&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://blog.cryptographyengineering.com/2012/12/28/the-anatomy-of-bad-idea/\" title=\"The anatomy of a bad idea\">The anatomy of a bad idea</a></div><div class=\"message_embed_description\">I’ve been running a fever all day and am only coming back to my senses now, thanks to a huge (and possibly toxic) dose of Motrin. Sometimes when you’re under the weather, things kind of…</div></div></div>",
        "id": 477710422,
        "sender_full_name": "bjorn3",
        "timestamp": 1729276785
    },
    {
        "content": "<p>Yeah I would maybe frame it as making the interface \"webcrypto-compatible\", e.g. perhaps use resources for secret keys</p>",
        "id": 477717019,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729279543
    },
    {
        "content": "<p>If you rename an enum variant in wit (eg digest.sha1 to digest.broken-sha1) while keeping it in the same index within the enum is that an abi break or just an api break?</p>",
        "id": 477726858,
        "sender_full_name": "bjorn3",
        "timestamp": 1729281839
    },
    {
        "content": "<p>Enum variants are encoded as ints by the ABI</p>",
        "id": 477727549,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729282183
    },
    {
        "content": "<p>but iirc the component type binary uses the labels, so it really depends what you mean by ABI</p>",
        "id": 477727698,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729282242
    },
    {
        "content": "<p>i.e. I would still expect it to break linking of existing components</p>",
        "id": 477727892,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729282333
    },
    {
        "content": "<p>Or mark them as <code>@deprecated</code></p>",
        "id": 477782039,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1729322545
    },
    {
        "content": "<p>Yeah we have the advantage of hindsight here, the web can’t ever unship something but we can mark things as deprecated. If it’s totally buggy and no reasonable application could possibly use something we could choose to never expose it at all, but that’s a high bar.</p>",
        "id": 477816236,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1729351786
    },
    {
        "content": "<p>What I’m more worried about is making wasi crypto the venue for old grudges to get resolved and to try to invent a new way to expose crypto that definitely won’t repeat any of the mistakes all those other ones made.</p>",
        "id": 477816734,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1729352120
    },
    {
        "content": "<p>I’d like to be less ambitious about being perfect, or even at improving the status quo, and just ship. There’s been a glaring need from many different users and platforms to provide crypto primitives and keep secrets opaque behind a resource for many years now.</p>",
        "id": 477816868,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1729352221
    }
]