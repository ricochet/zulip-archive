[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260875\">@Nathaniel McCallum</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Hi, I try to leverage the brand new WASI <code>sock_accept()</code> and <span class=\"user-mention\" data-user-id=\"449156\">@Harald Hoyer</span> related support in Mio to build a basic WASI HTTP server. I did that by forking and updating an existing one, see <a href=\"https://github.com/sdeleuze/mini_http\">https://github.com/sdeleuze/mini_http</a>.</p>\n<p>I have reached a point where everything works fine with a regular native build (even while benchmarking with tools like <code>hey</code>) while the WASI version fails with a <code>Bad file descriptor</code> error at (I think) the third invocation of <code>poll.poll(&amp;mut events, None)?</code> <a href=\"https://github.com/sdeleuze/mini_http/blob/master/src/lib.rs#L268\">here</a>.</p>\n<p>I am still in the process of learning Rust, and I had to remove multithreading support to make it work with WASI, so I may have missed something obvious, but since the native version works fine, I would be interested by your feedback. I am wondering if my code need some fix/special handling for WASI or if I should raise a bug somewhere (Rust, Mio, Wasmtime, Wasi ?). Logs and repro steps are described <a href=\"https://github.com/sdeleuze/mini_http#native\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/mini_http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b3e4ccbe97f45fab99e968ff8d175a627c43b706\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383837356332663632656638386133303961346362393730316665613265346465343438316461663235313635363335323837636462663636346630646537352f7364656c65757a652f6d696e695f68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/mini_http\" title=\"GitHub - sdeleuze/mini_http: mini async http server\">GitHub - sdeleuze/mini_http: mini async http server</a></div><div class=\"message_embed_description\">mini async http server. Contribute to sdeleuze/mini_http development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/mini_http/blob/master/src/lib.rs#L268\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b3e4ccbe97f45fab99e968ff8d175a627c43b706\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383837356332663632656638386133303961346362393730316665613265346465343438316461663235313635363335323837636462663636346630646537352f7364656c65757a652f6d696e695f68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/mini_http/blob/master/src/lib.rs#L268\" title=\"mini_http/lib.rs at master · sdeleuze/mini_http\">mini_http/lib.rs at master · sdeleuze/mini_http</a></div><div class=\"message_embed_description\">mini async http server. Contribute to sdeleuze/mini_http development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/mini_http#native\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b3e4ccbe97f45fab99e968ff8d175a627c43b706\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383837356332663632656638386133303961346362393730316665613265346465343438316461663235313635363335323837636462663636346630646537352f7364656c65757a652f6d696e695f68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/mini_http#native\" title=\"GitHub - sdeleuze/mini_http: mini async http server\">GitHub - sdeleuze/mini_http: mini async http server</a></div><div class=\"message_embed_description\">mini async http server. Contribute to sdeleuze/mini_http development by creating an account on GitHub.</div></div></div>",
        "id": 276152944,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1647935740
    },
    {
        "content": "<p>Sorry I haven't been following the socket-related work in WASI so I fear I may not be able to help much here</p>",
        "id": 276194085,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1647958305
    },
    {
        "content": "<p>Would you be able to run it with WASI tracing enabled, by setting the env var <code>RUST_LOG=wasi_common=trace</code>, and post the log somewhere?</p>",
        "id": 276207084,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647963204
    },
    {
        "content": "<p>Sure, and thanks for the hint. The logs are available at <a href=\"https://gist.github.com/sdeleuze/758cd2959613952c3fb1aafe80f1b42c\">https://gist.github.com/sdeleuze/758cd2959613952c3fb1aafe80f1b42c</a>. I see a message <code>Error: key not in table</code>.</p>\n<p>Another information in case that could help:  I had a similar error on a simpler example available <a href=\"https://github.com/sdeleuze/wasi-server#http-server\">here</a>, and fixed it by disabling HTTP 1.1 keep-alive. In practice, I changed HTTP headers from <code>Connection: keep-alive</code> to <code>Connection: close</code> and <a href=\"https://github.com/sdeleuze/wasi-server/blob/main/src/http/main.rs#L125-L127\">closed the connection with Mio</a> instead of the original code <a href=\"https://github.com/sergey-melnychuk/mio-tcp-server/blob/master/src/main.rs#L107-L113\">which was reusing the existing connection</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/sdeleuze/758cd2959613952c3fb1aafe80f1b42c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/sdeleuze/758cd2959613952c3fb1aafe80f1b42c\" title=\"mini_http_wasi_error.txt\">mini_http_wasi_error.txt</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/wasi-server#http-server\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/09c9f08ea038e6fe70d1c5cf12d2a2a43b5cf09b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313730646165653364666339613765383561313363326665363666303330383663613339376361393563643339303662646335383766316262626563313963392f7364656c65757a652f776173692d736572766572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/wasi-server#http-server\" title=\"GitHub - sdeleuze/wasi-server\">GitHub - sdeleuze/wasi-server</a></div><div class=\"message_embed_description\">Contribute to sdeleuze/wasi-server development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/wasi-server/blob/main/src/http/main.rs#L125-L127\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/09c9f08ea038e6fe70d1c5cf12d2a2a43b5cf09b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313730646165653364666339613765383561313363326665363666303330383663613339376361393563643339303662646335383766316262626563313963392f7364656c65757a652f776173692d736572766572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/wasi-server/blob/main/src/http/main.rs#L125-L127\" title=\"wasi-server/main.rs at main · sdeleuze/wasi-server\">wasi-server/main.rs at main · sdeleuze/wasi-server</a></div><div class=\"message_embed_description\">Contribute to sdeleuze/wasi-server development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sergey-melnychuk/mio-tcp-server/blob/master/src/main.rs#L107-L113\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9114c6c9e29e850f625230879c4c0ff2eaade9d8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346165633466333630643235306361383834363633366437393539303462393634636463613536366237633535313432373464393332303030633263356239642f7365726765792d6d656c6e796368756b2f6d696f2d7463702d736572766572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sergey-melnychuk/mio-tcp-server/blob/master/src/main.rs#L107-L113\" title=\"mio-tcp-server/main.rs at master · sergey-melnychuk/mio-tcp-server\">mio-tcp-server/main.rs at master · sergey-melnychuk/mio-tcp-server</a></div><div class=\"message_embed_description\">Code for the article \"Low-level TCP server with Rust and MIO\" - mio-tcp-server/main.rs at master · sergey-melnychuk/mio-tcp-server</div></div></div>",
        "id": 276210633,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1647964518
    },
    {
        "content": "<p>Thanks! I'll take a look in a few minutes here.</p>",
        "id": 276214641,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647965980
    },
    {
        "content": "<p>One thing that looks suspicious here is that there's a <code>fd_close</code> a little before the \"key not in table\" on Fd(3), which appears to be the socket fd. Is it intended to close the socket fd?</p>",
        "id": 276220634,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647968268
    },
    {
        "content": "<p>No, I don't think that's intended since we are in the middle of processing the HTTP request/response.</p>\n<p>Based on my 2 examples, I suspect that with WASI some Mio calls to <code>poll.registry().reregister()</code> don't prevent the socket fd to be closed, while on regular native build it keeps it opened as expected. Maybe by comparing the native logs with the WASI ones, it would give you some useful insights. Please let me know if/how I should provide similar logs for the native variant.</p>",
        "id": 276224153,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1647969639
    },
    {
        "content": "<p>When I run the mini_http hello_wasi example, it panics on <code>stdlistener.set_nonblocking(true).unwrap();</code></p>",
        "id": 276235685,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647974162
    },
    {
        "content": "<p>Ah, that was because I was building the wasi program with stable rust.</p>",
        "id": 276239602,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647975875
    },
    {
        "content": "<p>I've debugged this some more; one difference between the native and wasi versions is that the wasi accept fails with <code>EWOULDBLOCK</code>, which sends the mini_http server code down a different path</p>",
        "id": 276261186,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647986688
    },
    {
        "content": "<p>Wasmtime's poll_oneoff implementation appears to be returning spurious events, which leads mini_http to attempt to <code>accept</code> on a socket which isn't ready, which gets <code>EGAIN</code>/<code>EWOULDBLOCK</code>, which sends the server down this path.</p>",
        "id": 276268765,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1647991929
    },
    {
        "content": "<p>Thanks for digging into this. Please let me know if you would like I create a related issue on Wasmtime side, if a minimal repro would be useful, etc.</p>",
        "id": 276307630,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1648028536
    },
    {
        "content": "<p>Ok, it looks like there are multiple issues here. One appears to be that wasmtime's poll is returning spurious events; I have an experimental patch which fixes this <a href=\"https://github.com/sunfishcode/wasmtime/commit/ab045157c4e7b3094c6c32ea48e4a7917cb056b3\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/wasmtime/commit/ab045157c4e7b3094c6c32ea48e4a7917cb056b3\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/aacf63a73fe3a37df609e6bf3498c49deabcbb80\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353666373135643834653135633138646430613038363663346338646334373166366634346534656566346163653039323930313333353266343730323033362f73756e66697368636f64652f7761736d74696d652f636f6d6d69742f61623034353135376334653762333039346336633332656134386534613739313763623035366233)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/wasmtime/commit/ab045157c4e7b3094c6c32ea48e4a7917cb056b3\" title=\"Fix `poll` to avoid returning spurious events. · sunfishcode/wasmtime@ab04515\">Fix `poll` to avoid returning spurious events. · sunfishcode/wasmtime@ab04515</a></div><div class=\"message_embed_description\">Don't return events for read or write subscriptions when they\ndon't have `POLLIN` or `POLLOUT` flags in the `revents` returned from\n`poll`.</div></div></div>",
        "id": 276373804,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1648057672
    },
    {
        "content": "<p>Another is that WASI's <code>poll_oneoff</code> returns separate events for the \"read\" and \"write\" subscriptions, where in the native version, they get combined into a single event.</p>",
        "id": 276373942,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1648057717
    },
    {
        "content": "<p>That may be something that needs to be fixed in the mio code.</p>",
        "id": 276373971,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1648057729
    },
    {
        "content": "<p>I have to set this aside for now and work on other things, but I'll be around and can answer questions.</p>",
        "id": 276374131,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1648057799
    },
    {
        "content": "<p>Thanks, I will try to see if I can fix the mio code.</p>",
        "id": 276382297,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1648061230
    },
    {
        "content": "<p><a href=\"https://github.com/sdeleuze/mini_http/pull/1\">https://github.com/sdeleuze/mini_http/pull/1</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sdeleuze/mini_http/pull/1\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7adbb2123a882076ad39f2643563212206fadd2b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353266613431313165386132613030633738613631336432643138363863663765343036333435343463653938303532646366376237366330363765363838382f7364656c65757a652f6d696e695f687474702f70756c6c2f31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sdeleuze/mini_http/pull/1\" title=\"Working version by haraldh · Pull Request #1 · sdeleuze/mini_http\">Working version by haraldh · Pull Request #1 · sdeleuze/mini_http</a></div><div class=\"message_embed_description\">First commit does cargo fmt.\nSecond commit fixes the issues with the registry and bad file descriptors.\nIt also points mio to a \"fixed\" version, which combines read/write events with the same Token.</div></div></div>",
        "id": 276890426,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1648481377
    },
    {
        "content": "<p>As I wrote in email, the server should be fixed to handle <code>readable</code> and <code>writeable</code> events separately, because that can happen in real life, too.</p>",
        "id": 276890646,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1648481467
    },
    {
        "content": "<p>and so the patching of <code>mio</code> would become obsolete.</p>",
        "id": 276890730,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1648481503
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"449156\">@Harald Hoyer</span> I will update the server as suggested.</p>",
        "id": 276892080,
        "sender_full_name": "Sébastien Deleuze",
        "timestamp": 1648482079
    }
]