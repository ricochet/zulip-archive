[
    {
        "content": "<p>Hi, I'd like to implement a waker for async IO, but there's nothing similar to pipe(2) or eventfd(2) defined in preview2/wasi-io. I wonder if I missed anything.</p>",
        "id": 434246029,
        "sender_full_name": "anb",
        "timestamp": 1713478050
    },
    {
        "content": "<p>nope, no such thing exists in WASI. could you describe more what problem you are trying to solve? maybe there is another way to go about it</p>",
        "id": 434246429,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713478276
    },
    {
        "content": "<p>just to expand a little: one way of thinking about this is, there is not (yet) a way to have more than one stack of control (thread, coroutine, whatever) per store with wasi. so there are no facilities for waking another stack/thread, since there can only be one</p>",
        "id": 434247309,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713478796
    },
    {
        "content": "<p>when that restriction is lifted by landing threads and/or async (multiple stacks) in the component model in the 0.3 timeframe (roughly a year out, maybe longer), it will come with facilities for waking another thread/stack</p>",
        "id": 434247459,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713478867
    },
    {
        "content": "<p>Hi Pat, I want to make a async runtime on the guest side based on tokio/mio. The problem is that no waker is implemented for WASI at the moment, meaning tasks won't be wake up. It is often implemented via <code>eventfd(2)</code> on Linux, or <code>pipe(2)</code> in some other situations.[1] I tried to come up with something[2], but the interface is awful. I wonder if there was a discussion regarding the usefulness of the interface, as I vaguely remember the pipe interface was in wasi-io in the early days.</p>\n<p>[1]: <a href=\"https://github.com/tokio-rs/mio/blob/master/src/waker.rs\">https://github.com/tokio-rs/mio/blob/master/src/waker.rs</a><br>\n[2]: <a href=\"https://github.com/tokio-rs/mio/pull/1662\">https://github.com/tokio-rs/mio/pull/1662</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tokio-rs/mio/blob/master/src/waker.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5b1b3b745caa5017cce177024519c513193f1335\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623063653235393866633931323163636136383637656466306635633562313536306536353736623434303039363334633138663833663636343861393165632f746f6b696f2d72732f6d696f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tokio-rs/mio/blob/master/src/waker.rs\" title=\"mio/src/waker.rs at master · tokio-rs/mio\">mio/src/waker.rs at master · tokio-rs/mio</a></div><div class=\"message_embed_description\">Metal I/O library for Rust. Contribute to tokio-rs/mio development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tokio-rs/mio/pull/1662\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0e46e3c1b9fb1b5d8fd1dfe34be1a359365ddb97\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313333333965663462386661636337316636323934666131373036653130663964363636396234373333393864613465616133376533316464626430666633392f746f6b696f2d72732f6d696f2f70756c6c2f31363632)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tokio-rs/mio/pull/1662\" title=\"Add waker implementation for WASI by xofyarg · Pull Request #1662 · tokio-rs/mio\">Add waker implementation for WASI by xofyarg · Pull Request #1662 · tokio-rs/mio</a></div><div class=\"message_embed_description\">There's no standard way to do it at the moment under WASI. Instead if there are two connected socket from the host side, they can be used to emulate Linux's eventfd.</div></div></div>",
        "id": 434248191,
        "sender_full_name": "anb",
        "timestamp": 1713479167
    },
    {
        "content": "<p>I'm not sure if I fully understand the multi-stacks, but seems async tasks with single thread works for me with my mio waker implementation(with wasmtime-9).</p>",
        "id": 434248511,
        "sender_full_name": "anb",
        "timestamp": 1713479400
    },
    {
        "content": "<p>hmm. well, i havent tried to do that, but i suspect that the dependence on wakers is because tokio assumes a multi-threaded runtime, and wakers are the way to notify readiness between those</p>",
        "id": 434248583,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479419
    },
    {
        "content": "<p>oh ok, so if you're on wasmtime-9 you're using wasi preview 1 stuff</p>",
        "id": 434248634,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479450
    },
    {
        "content": "<p>have you looked at preview 2 yet?</p>",
        "id": 434248642,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479458
    },
    {
        "content": "<p>we changed a number of things to make it possible to wait on more kinds of things, but fundamentally there is still just the equivalent of <code>poll_oneoff</code> where the sole thread/stack of control is suspended until one of the arguments is ready</p>",
        "id": 434248716,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479508
    },
    {
        "content": "<p>again, im not really in touch with tokio on a deep enough level to know this for sure, but my suspicion is that <code>mio</code> is the wrong abstraction entirely for implementing a runtime on top of preview 2</p>",
        "id": 434248854,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479584
    },
    {
        "content": "<p>In case it's of interest, I created experimental forks of Rust, <code>mio</code>, <code>tokio</code>, and <code>tokio-postgres</code> based on <code>wasi:sockets@0.2.0</code>, with a demo here: <a href=\"https://github.com/dicej/wasi-sockets-tests\">https://github.com/dicej/wasi-sockets-tests</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/wasi-sockets-tests\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/befaab73e0f4a6b175d5ca15c412ef82b77d2572\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336431396136356435663235646639363461353265336434303730326661363538313930396130336534646634323836333033323966646135363266336233372f646963656a2f776173692d736f636b6574732d7465737473)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/wasi-sockets-tests\" title=\"GitHub - dicej/wasi-sockets-tests: Test harness for prototyping support for wasi-sockets in the Rust std library and wasi-libc\">GitHub - dicej/wasi-sockets-tests: Test harness for prototyping support for wasi-sockets in the Rust std library and wasi-libc</a></div><div class=\"message_embed_description\">Test harness for prototyping support for wasi-sockets in the Rust std library and wasi-libc - dicej/wasi-sockets-tests</div></div></div>",
        "id": 434248869,
        "sender_full_name": "Joel Dice",
        "timestamp": 1713479594
    },
    {
        "content": "<p>its interesting to me! i should look how you handled this stuff joel</p>",
        "id": 434248891,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479614
    },
    {
        "content": "<p>ah yeah so if you're using sockets on top of wasi-libc already then theyre back to being an fd so these mio changes make sense</p>",
        "id": 434249277,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479824
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/mio/compare/master...dicej:mio:wasi-sockets\">https://github.com/tokio-rs/mio/compare/master...dicej:mio:wasi-sockets</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tokio-rs/mio/compare/master...dicej:mio:wasi-sockets\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5b1b3b745caa5017cce177024519c513193f1335\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623063653235393866633931323163636136383637656466306635633562313536306536353736623434303039363334633138663833663636343861393165632f746f6b696f2d72732f6d696f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tokio-rs/mio/compare/master...dicej:mio:wasi-sockets\" title=\"Comparing tokio-rs:master...dicej:wasi-sockets · tokio-rs/mio\">Comparing tokio-rs:master...dicej:wasi-sockets · tokio-rs/mio</a></div><div class=\"message_embed_description\">Metal I/O library for Rust. Contribute to tokio-rs/mio development by creating an account on GitHub.</div></div></div>",
        "id": 434249284,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713479829
    },
    {
        "content": "<p>It's been a while, and I'm just picking up this project again, only walked through the wasmtime's changelog, haven't upgraded to preview2 yet. Not able to use stock tokio was a problem for us, so I wanted to try if I can improve the waker implementation if there's any chance.</p>\n<p>Even with <code>poll_oneoff</code>, the a pair of fd could be used by tasks to \"wakeup\" each other because those fd are connected on the host side.</p>",
        "id": 434249499,
        "sender_full_name": "anb",
        "timestamp": 1713479964
    },
    {
        "content": "<p>Thanks Joel, it looks interesting, I'll look into it in a while.</p>",
        "id": 434249616,
        "sender_full_name": "anb",
        "timestamp": 1713480013
    },
    {
        "content": "<p>If you just need two async tasks within a guest to talk to each other, e.g. <a href=\"https://docs.rs/futures/latest/futures/channel/index.html\">https://docs.rs/futures/latest/futures/channel/index.html</a> plus either Tokio or a bare-bones executor should work fine.  If you need multiple guests to talk to each other, a TCP connection to localhost could be an option.</p>",
        "id": 434250318,
        "sender_full_name": "Joel Dice",
        "timestamp": 1713480421
    },
    {
        "content": "<p>Yeah, with customized hostcalls, it shouldn't be a problem. But I'd like to make something that fits mio's waker interface, e.g. <code>Waker::new()</code> does some magic internally. Socket will be cumbersome for this task I'm afraid.</p>",
        "id": 434250738,
        "sender_full_name": "anb",
        "timestamp": 1713480688
    },
    {
        "content": "<p>im not sure what you mean by \"with customized hostcalls, it shouldnt be a problem\" - the suggestion joel had, using futures, doesnt rely on the host at all. the <code>futures</code> implementation is in terms of atomics and (synchronous) locks, which are implemented in <code>std</code> and would boil down to regular memory and no-ops respectively because there arent multiple threads in wasi</p>",
        "id": 434252090,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713481479
    },
    {
        "content": "<p>i think waker is a red herring here - the docs here <a href=\"https://docs.rs/mio/latest/mio/struct.Waker.html\">https://docs.rs/mio/latest/mio/struct.Waker.html</a> say waker is for cross-thread waking of Poll, and there is no such thing as cross-thread waking in this context</p>",
        "id": 434252272,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713481580
    },
    {
        "content": "<p>Sorry, I was still thinking about fitting into mio's interface, so it's easy to port \"normal\" program onto WASI, instead of changing how tasks communicate. Not sure if the single thread assumption will break by wasi-threads in the future.</p>",
        "id": 434253799,
        "sender_full_name": "anb",
        "timestamp": 1713482548
    },
    {
        "content": "<p>wasi-threads is a dead proposal, its not a design that will move forward. the folks who worked on that have changed their focus and are working on a new core wasm thread proposal that solves the problems that wasi-threads uncovered. the component model will get threads once that work is complete, and when it does this story will change. thats a year out, maybe more.</p>",
        "id": 434254404,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713482968
    },
    {
        "content": "<p>Oh that's good to know, I actually waited I could get wasi-threads working to reduce duplication with shared memory.  I'll check the new component model later. For now I'm going to assume WASI is a single threaded env, and hope it won't shoot my foot in the future.</p>",
        "id": 434254739,
        "sender_full_name": "anb",
        "timestamp": 1713483230
    },
    {
        "content": "<p>Thank you both!</p>",
        "id": 434254777,
        "sender_full_name": "anb",
        "timestamp": 1713483243
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591763\">anb</span> has marked this topic as resolved.</p>",
        "id": 434257805,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713485472
    },
    {
        "content": "<p>yep, when that assumption about wasi changes you can count on having a big effort from wasi contributors bringing the ecosystem along. so even if you do end up encountering it one day, it wont be alone!</p>",
        "id": 434403144,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1713546364
    }
]