[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> I'm looking to limit the IP pool of addresses that users of my runtime can connect to. Rather than building up a pool of allowed IpGrants, I'd love to be able to grant all access and then subtract away. For example, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">insert_ip_net_port_any</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">IpNet</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Ipv4Addr</span>::<span class=\"n\">UNSPECIFIED</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">ambient_authority</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">remove_ip_net_port_any</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.0/8\"</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">remove_ip_net_port_any</span><span class=\"p\">(</span><span class=\"s\">\"192.168.0.0/16\"</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">remove_ip_net_port_any</span><span class=\"p\">(</span><span class=\"s\">\"172.16.0.0/12\"</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">remove_ip_net_port_any</span><span class=\"p\">(</span><span class=\"s\">\"10.0.0.0/8\"</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ambient_authority</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Does something like this sound reasonable? Looking at the implementation of <code>Pool</code> this doesn't look too easy though as the pool is a simple collection of ranges that are allowed to overlap. Doing set difference doesn't seem straight forward.</p>",
        "id": 406316133,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701872488
    },
    {
        "content": "<p>Yeah, the current <code>Pool</code> logic is very simple, with the idea that it can be extended once we have a better idea what people need, and now here we are :-).</p>",
        "id": 406326592,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1701875607
    },
    {
        "content": "<p>It seems like it could be extended with a separate denylist, which would override anything granted. Then instead of <code>grants.iter().any(|grant| grant.contains(addr))</code>, the code could do <code>grants.iter().any(|grant| grant.contains(addr)) &amp;&amp; !denies.iter().any(|deny| deny.contains(addr))</code>. Does that sound like it would work?</p>",
        "id": 406327267,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1701875824
    },
    {
        "content": "<p><span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>Yea that certainly sounds simpler than adding full set algebra to <code>Pool</code>.</p>",
        "id": 406327523,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701875889
    },
    {
        "content": "<p>I can look into adding that if you would be ok with that.</p>",
        "id": 406327578,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701875905
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 406327615,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1701875917
    },
    {
        "content": "<p>Without care, this could end up being a quite confusing API:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">allow</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">deny</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">);</span>\n<span class=\"n\">pool</span><span class=\"p\">.</span><span class=\"n\">allow</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// at this point, 127.0.0.1 is _not_ allowed.</span>\n</code></pre></div>",
        "id": 406376257,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1701892690
    },
    {
        "content": "<p>Hmmm... I wonder if adding the ability to do a dynamic check to the wasmtime <code>WasiCtx</code> would be a better short term solution? Effectively I'm thinking about adding the following to <code>WasiCtx</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Add a dynamic check of whether a socket addr is allowed</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">dynamic_socket_addr_check</span><span class=\"o\">&lt;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span>\n<span class=\"w\">    </span><span class=\"k\">where</span>\n<span class=\"w\">        </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"n\">SocketAddr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 406554031,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701959325
    },
    {
        "content": "<p>This doesn't really solve the issue as originally described, but it does make it easier to describe slightly more complicated use cases.</p>",
        "id": 406554185,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701959373
    },
    {
        "content": "<p>For example, if you don't want to allow for loopback addresses:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">dynamic_socket_addr_check</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">addr</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">ip</span><span class=\"p\">().</span><span class=\"n\">is_loopback</span><span class=\"p\">())</span>\n</code></pre></div>",
        "id": 406554986,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701959600
    },
    {
        "content": "<p>This might still have confusing usage though:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">dynamic_socket_addr_check</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">addr</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">ip</span><span class=\"p\">().</span><span class=\"n\">is_loopback</span><span class=\"p\">())</span>\n<span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"s\">\"127.0.0.1\"</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n</code></pre></div>\n<p>Not sure if 127.0.0.1 should be allowed then</p>",
        "id": 406555800,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701959823
    },
    {
        "content": "<p>What about hooking the <code>start-connect</code> funcs?</p>",
        "id": 406556046,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701959892
    },
    {
        "content": "<p>We need to check more than starting a connection (e.g., 'unconnected' UDP streams). The addr check happens inside of <code>start-connect</code> but also in other places, so I'm not sure that would work?</p>",
        "id": 406556325,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701959968
    },
    {
        "content": "<p>I think if we make <code>dynamic_socket_addr_check</code> purely additive, it should work if the semantics of <code>dynamic_socket_addr_check</code> are: if true is returned, no additional checks are done, but if false, we check the underlying <code>Pool</code></p>",
        "id": 406557120,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701960163
    },
    {
        "content": "<p>Here's what the implementation would look like: <a href=\"https://github.com/rylev/wasmtime/compare/udp-perform-addr-checking...rylev:wasmtime:dynamic-socket-addr-check\">https://github.com/rylev/wasmtime/compare/udp-perform-addr-checking...rylev:wasmtime:dynamic-socket-addr-check</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/wasmtime/compare/udp-perform-addr-checking...rylev:wasmtime:dynamic-socket-addr-check\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c812f79fa87c9c9f426aced1b99e7fb78432fc38\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626261396534323961663132303261616331333930323934396466666233316231326433643737386262323936613437643234366566306335336363386463322f72796c65762f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/wasmtime/compare/udp-perform-addr-checking...rylev:wasmtime:dynamic-socket-addr-check\" title=\"Comparing udp-perform-addr-checking...dynamic-socket-addr-check · rylev/wasmtime\">Comparing udp-perform-addr-checking...dynamic-socket-addr-check · rylev/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - Comparing udp-perform-addr-checking...dynamic-socket-addr-check · rylev/wasmtime</div></div></div>",
        "id": 406560900,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1701961179
    }
]