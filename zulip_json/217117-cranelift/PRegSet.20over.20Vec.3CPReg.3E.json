[
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> and <span class=\"user-mention\" data-user-id=\"634627\">@L. Pereira</span> for your feedback on using PRegSet over Vec&lt;PReg&gt;: I completely understand Chris’ point that this will be completely undesirable if it leads to slowdowns in the allocator or if it requires unclear bit hacking to avoid that. </p>\n<p>However is was wondering if it also came (inadvertently) with extra guarantees on the allocator: namely that unlike passing Vec&lt;PReg&gt; , the same register cannot be passed twice into (un)<code>preferred_regs_by_class</code> and it causes the iteration order to always be from lowest numbered to highest numbered register as opposed to relying on the order they were passed in: unclear whether this is acc desirable or not tho?</p>",
        "id": 438662749,
        "sender_full_name": "Kirp",
        "timestamp": 1715722733
    },
    {
        "content": "<p>No, I don't think those properties are terribly important, as compared to the high-order bit of allowing random access for the randomized probe order</p>",
        "id": 438662985,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715722805
    },
    {
        "content": "<p>Good question! And I'm still working on understanding how <code>RegTraversalIter</code> is intended to work; I think we can get the current behavior efficiently while switching to <code>PRegSet</code></p>",
        "id": 438663072,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1715722837
    },
    {
        "content": "<p>IMHO, strong disagree</p>",
        "id": 438663131,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715722855
    },
    {
        "content": "<p>why so strong on moving to PRegSet?</p>",
        "id": 438663154,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715722862
    },
    {
        "content": "<p>(how traversal is intended to work: random probe to spread out the \"load\" between registers; big impact on allocation perf vs. same probe order at every inst)</p>",
        "id": 438663274,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715722898
    },
    {
        "content": "<p>(I don't want to burn a ton of time on this, I think moving to PRegSet is a bad idea, I guess I'm just curious why the arguments I've already given are not enough)</p>",
        "id": 438663539,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715722997
    },
    {
        "content": "<p>Chris and I just talked about this a little bit separately. I don't understand this part of RA2 well enough and haven't been able to spend much time on it today, which is why I haven't been able to respond to these questions. I might have answers to Chris' concerns, but he wrote most of this code so I may just be confused. I'll get back to you all as soon as I can.</p>",
        "id": 438665415,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1715723698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/PRegSet.20over.20Vec.3CPReg.3E/near/438663539\">said</a>:</p>\n<blockquote>\n<p>(I don't want to burn a ton of time on this, I think moving to PRegSet is a bad idea, I guess I'm just curious why the arguments I've already given are not enough)</p>\n</blockquote>\n<p>This wasn’t supposed to be strong in favour of, I was mostly wondering if it came along with extra restrictions that were meaningfully different to the original code that I didn’t realise initially : agree with points you made on the GitHub about why it is probably not ideal thing to do</p>",
        "id": 438668564,
        "sender_full_name": "Kirp",
        "timestamp": 1715724914
    }
]