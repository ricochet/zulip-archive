[
    {
        "content": "<p>Does Cranelift make any attempt to reuse existing stack slots/stack space? i.e. if I allocate slot A, use it for a while, then stop using it and allocate slot B, does Cranelift do anything clever to reduce stack memory usage?</p>",
        "id": 409754708,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703370860
    },
    {
        "content": "<p>If you mean the explicit stackslots in the preamble (<code>ss0 = stack_slot ...</code> then <code>stack_load</code> / <code>stack_store</code> / <code>stack_addr</code>), no, those are not coalesced. In theory we could analyze the live ranges and look for escaping of the address, and do an LLVM-like <code>mem2reg</code> pass that lifts non-escaped non-aliasing memory slots to SSA, but in general we try to avoid that kind of complexity and correctness risk; less \"magic\" with brittle cliffs, more simple canonicalization on code with explicit intentions.</p>\n<p>On the other hand, register allocator-managed spillslots <em>are</em> coalesced, because we know their exact live ranges (because the regalloc manages the moves into and out of slots). If a producer wants to benefit from that coalescing, it could lift a stackslot-stored value or struct to SSA itself (like SROA), which then makes the ranges explicit</p>",
        "id": 409756374,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703372340
    },
    {
        "content": "<p>Ah gotcha. The context here is I'm trying to see what would be needed to pass data around that's on the stack, e.g. a struct returned by a function or passed to one as an argument. Based on the above it seems I'd have to devise some sort of mechanism to reuse slots no longer in use  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409757317,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703373037
    },
    {
        "content": "<p>Makes sense -- yep, it seems like a scheme that manages and reuses slots at a layer above Cranelift would make sense. FWIW, <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> probably has thoughts/suggestions here too, from implementing rustc's ABI (presumably including struct returns?) lowered to CLIF</p>",
        "id": 409767919,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703379848
    },
    {
        "content": "<p>cg_clif reuses the abi calculation code of rustc. Using that outside rustc is non-trivial.</p>",
        "id": 409795118,
        "sender_full_name": "bjorn3",
        "timestamp": 1703404870
    }
]