[
    {
        "content": "<p>Regalloc2 is great, but I have a question. Is this a failure of the heuristics? Or have I set up my machine instruction structure incorrectly? The test machine instruction that I pass to regalloc2 has no Defs or Clobbers so there is no reason it couldn't just TEST EAX,EAX. </p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/ZLQOszJ.png\"><img src=\"https://uploads.zulipusercontent.net/544f6972d7dd81404fe3e21ef6874f80a08081bf/68747470733a2f2f692e696d6775722e636f6d2f5a4c514f737a4a2e706e67\"></a></div>",
        "id": 451656754,
        "sender_full_name": "Leaves",
        "timestamp": 1721090527
    },
    {
        "content": "<p>You’re right in this particular case that move seems extraneous; it’s hard to say more without actually running your environment and getting trace logs from RA2 to see why it’s doing that. (And to be clear I unfortunately don’t have the spare cycles for that, much as I would like to!)</p>",
        "id": 451665616,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721096005
    },
    {
        "content": "<p>I would verify that the vreg placed in rax is not clobbered elsewhere and that that there aren’t any register constraints forcing this</p>",
        "id": 451665876,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721096153
    },
    {
        "content": "<p>Could the clobber on <code>call</code> be interfering with regalloc somehow?</p>",
        "id": 451775217,
        "sender_full_name": "Amanieu",
        "timestamp": 1721141113
    },
    {
        "content": "<p>I figured out why it is happening.</p>\n<p>The test instruction is testing 32 bit EAX, prior to it, a <code>truncate</code> takes the RAX from the function call and converts it to a 32bit. Although the truncate instruction isn't actually emitted, it still creates a Def, see the below description:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">call_rel32</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v22i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p0i</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">truncate</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v22i</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"p\">),(</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v29i</span><span class=\"w\"> </span><span class=\"n\">reuse</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)),</span><span class=\"n\">Clobbers</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"mi\">12</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">test_rs_r</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v29i</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"p\">),(</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v29i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">),</span><span class=\"n\">Clobbers</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n</code></pre></div>\n<p>So regalloc thinks that the value in is being mutated(because I'm telling it it is) and creates a mov into a different register to avoid mutating RAX which is used later after the current function returns.</p>\n<p>So, not a problem with regalloc2, a problem with my own design decisions.</p>",
        "id": 451843075,
        "sender_full_name": "Leaves",
        "timestamp": 1721158127
    },
    {
        "content": "<p>Glad to see the mystery solved!</p>",
        "id": 451852078,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721160960
    }
]