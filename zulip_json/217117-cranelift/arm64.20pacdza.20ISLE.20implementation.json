[
    {
        "content": "<p>Hi, I am trying add ARM64's <code>pacdza</code> (<a href=\"https://developer.arm.com/documentation/ddi0602/2021-06/Base-Instructions/PACDA--PACDZA--Pointer-Authentication-Code-for-Data-address--using-key-A-\">https://developer.arm.com/documentation/ddi0602/2021-06/Base-Instructions/PACDA--PACDZA--Pointer-Authentication-Code-for-Data-address--using-key-A-</a>) to cranelift (for a project).<br>\n<code>pacdza</code> computes and inserts a Pointer Authentication Code (PAC) for a data address.<br>\nThe way I interpret the documentation <code>X[d] = AddPACDA(X[d], X[n]);</code> (you can ignore <code>X[n]</code> for now) is that the instruction takes one input parameter in the register <code>Xd</code>, and returns the data address that now contains the PAC also in the register <code>Xd</code>.<br>\nI am not sure how to translate the fact, that the instruction takes its input in the same register that the output is written to, to the ISLE format.</p>\n<p>Here is my current naive implementation (that does not compile) from <code>aarch64/inst.isle</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">PACDZA</span>\n<span class=\"p\">(</span><span class=\"n\">Pacdza</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rd</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Helper</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">emitting</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"n\">Pacdza</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">emit_arm64_pacdza</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit_arm64_pacdza</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"cp\">$I64</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">TODO</span>: <span class=\"nc\">move</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">since</span><span class=\"w\"> </span><span class=\"n\">rd</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"n\">Mov</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">operand_size</span><span class=\"w\"> </span><span class=\"cp\">$I64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"p\">)))</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"n\">Pacdza</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"p\">))))</span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>I thought maybe inserting a move instruction would do the job, but this results in some <code>Register allocation error for vcode</code>.<br>\nIt also doesn't seem like the right way to do this.<br>\nDoes anyone have an idea how I can solve this?<br>\nAre there maybe some other (arm64) instructions that also use the same register for input and output, on which I could base my implementation?</p>\n<p>Thanks for your time and help!</p>",
        "id": 366265722,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1686765788
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, In this case you can implement the instruction at the ISLE level as reading from one register  and returning the value in another register, they are virtual registers and then you can instruct the register allocator to make sure that they end up in the same physical register after regalloc.</p>\n<p>We have an example of this in the AArch64 Backend with the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b4a93b6a971741ee21f2e7c84ff9aa48784ab76a/cranelift/codegen/src/isa/aarch64/inst.isle#L187-L194\"><code>MovK</code> instruction</a>. To ensure that they end up as the same register, you can use <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b4a93b6a971741ee21f2e7c84ff9aa48784ab76a/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L480-L483\"><code>reg_reuse_def</code></a> when specifying the regalloc behaviour of that instruction.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/b4a93b6a971741ee21f2e7c84ff9aa48784ab76a/cranelift/codegen/src/isa/aarch64/inst.isle#L187-L194\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3396e1387be558b237e4e231fb2e2bc356dd4a0e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303235333937333062363264663135323136373866613636613561643538643837343666303566313664636133643066623630333566653266343633313934312f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b4a93b6a971741ee21f2e7c84ff9aa48784ab76a/cranelift/codegen/src/isa/aarch64/inst.isle#L187-L194\" title=\"wasmtime/cranelift/codegen/src/isa/aarch64/inst.isle at b4a93b6a971741ee21f2e7c84ff9aa48784ab76a 路 bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/aarch64/inst.isle at b4a93b6a971741ee21f2e7c84ff9aa48784ab76a 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/b4a93b6a971741ee21f2e7c84ff9aa48784ab76a/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L480-L483\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3396e1387be558b237e4e231fb2e2bc356dd4a0e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303235333937333062363264663135323136373866613636613561643538643837343666303566313664636133643066623630333566653266343633313934312f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b4a93b6a971741ee21f2e7c84ff9aa48784ab76a/cranelift/codegen/src/isa/aarch64/inst/mod.rs#L480-L483\" title=\"wasmtime/cranelift/codegen/src/isa/aarch64/inst/mod.rs at b4a93b6a971741ee21f2e7c84ff9aa48784ab76a 路 bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/aarch64/inst/mod.rs at b4a93b6a971741ee21f2e7c84ff9aa48784ab76a 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 366270309,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1686766954
    },
    {
        "content": "<p>Thank you very much, <code>MovK</code> was exactly the kind of example I was looking for!</p>",
        "id": 366279035,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1686769114
    }
]