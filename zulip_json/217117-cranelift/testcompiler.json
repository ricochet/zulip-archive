[
    {
        "content": "<p>Is there some test compiler that uses cranelift as a backend? Looking to see what it creates for what kind of instructions.</p>",
        "id": 197649451,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589520209
    },
    {
        "content": "<p>In my current case I'm trying to find out the use of vars in frontend. I'm using declare_var to create a new variable, and def_var to define it the first time, I'm using use_var's result to read it, but how to I change the value of a var ?</p>",
        "id": 197649519,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589520334
    },
    {
        "content": "<p>alternatively, can I use stackslots instead and does cranelift optimize those to ssa form?</p>",
        "id": 197649572,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589520402
    },
    {
        "content": "<p>You need to use <code>def_var</code> every time you want to set a new value.</p>",
        "id": 197672453,
        "sender_full_name": "bjorn3",
        "timestamp": 1589538295
    },
    {
        "content": "<p>Stackslots are not optimized to SSA form.</p>",
        "id": 197672473,
        "sender_full_name": "bjorn3",
        "timestamp": 1589538309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295546\">Carlo Kok</span> <a href=\"#narrow/stream/217117-cranelift/topic/testcompiler/near/197649451\">said</a>:</p>\n<blockquote>\n<p>Is there some test compiler that uses cranelift as a backend? Looking to see what it creates for what kind of instructions.</p>\n</blockquote>\n<p>You can take a look at <a href=\"https://github.com/bytecodealliance/simplejit-demo\">https://github.com/bytecodealliance/simplejit-demo</a> and <a href=\"https://github.com/CraneStation/kaleidoscope-cranelift\">https://github.com/CraneStation/kaleidoscope-cranelift</a>, which are made for learning purposes. If you want to see the wasm compilation part, you can look at <code>cranelift-wasm</code> (the <code>cranelift/wasm</code> dir of the <code>wasmtime</code> repo). <a href=\"https://github.com/jyn514/rcc\">https://github.com/jyn514/rcc</a> is a C compiler. <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">https://github.com/bjorn3/rustc_codegen_cranelift</a> is a Rust backend I made.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/simplejit-demo\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/simplejit-demo\" title=\"bytecodealliance/simplejit-demo\">bytecodealliance/simplejit-demo</a></div><div class=\"message_embed_description\">JIT compiler and runtime for a toy language, using Cranelift - bytecodealliance/simplejit-demo</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/CraneStation/kaleidoscope-cranelift\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/11573910?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/CraneStation/kaleidoscope-cranelift\" title=\"CraneStation/kaleidoscope-cranelift\">CraneStation/kaleidoscope-cranelift</a></div><div class=\"message_embed_description\">Tutorial to learn to use the cranelift compiler backend - CraneStation/kaleidoscope-cranelift</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jyn514/rcc\" style=\"background-image: url(https://repository-images.githubusercontent.com/190940981/65269b00-1884-11ea-9f37-728b9bc6973f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jyn514/rcc\" title=\"jyn514/rcc\">jyn514/rcc</a></div><div class=\"message_embed_description\">rcc: a Rust C compiler. Contribute to jyn514/rcc development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/17426603?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" title=\"bjorn3/rustc_codegen_cranelift\">bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 197672758,
        "sender_full_name": "bjorn3",
        "timestamp": 1589538537
    },
    {
        "content": "<p>so def_var is block tied? Thanks!</p>",
        "id": 197674971,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589540208
    },
    {
        "content": "<p>that helped a lot.</p>",
        "id": 197674976,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589540211
    },
    {
        "content": "<p>rcc is perfect; that will let me see what to generate (I did the same when using llvm, see what clang does)</p>",
        "id": 197675457,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589540557
    },
    {
        "content": "<p>Is there any way to dump the before optimization and after optimization ir ?</p>",
        "id": 197738367,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1589569666
    },
    {
        "content": "<p>You can use <code>println!(\"{}\", func);</code> or <code>cranelift_codegen::write::write_function</code>. For the after optimization ir, as of right now the x86 backend just transforms the clif ir in several ways, while keeping it clif ir. This means that you can just take the <code>context.func</code> after compilation and print it, preferably using <code>write_function</code>.</p>",
        "id": 197741635,
        "sender_full_name": "bjorn3",
        "timestamp": 1589570664
    },
    {
        "content": "<p>The AArch64 backend and the future x86 backend use an extra layer, for which you need to set <code>context.want_disasm</code> to true and then after compilation access <code>context.mach_compile_result</code>.</p>",
        "id": 197741721,
        "sender_full_name": "bjorn3",
        "timestamp": 1589570711
    }
]