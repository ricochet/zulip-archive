[
    {
        "content": "<p>Hello, I am trying to port MiniScript scripting language <a href=\"https://miniscript.org/files/MiniScript-QuickRef.pdf\">(reference link)</a> to rust, and use Cranelift to run it. The issue is that MiniScript is dynamically typed, and functions are first-class citizens, so I was curious, are there any articles or examples of implementing such things? I'm mostly interested in functions-as-values, and garbage collecting, as well as supporting multiple data types (lists, dictionaries, strings). All Cranelift examples I could find are overly simplified languages that only support numeric values.</p>",
        "id": 422812561,
        "sender_full_name": "juh9870",
        "timestamp": 1708607256
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"693753\">@juh9870</span>,</p>\n<p>Cranelift only supports scalars and simd; it is up to the frontend to lower structs and things into those operations (eg pass a struct via pointer and access fields via reading from offsets)</p>\n<p>as far as GC goes: there are the <code>r32</code>/<code>r64</code> types which are the same as <code>i32</code>/<code>i64</code> but for which Cranelift will spill to the stack at GC safepoints and emit stack maps that your collector can use to find all on-stack roots</p>",
        "id": 422881217,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708627131
    },
    {
        "content": "<p>so again with GC types, cranelift only ever sees/understands the pointer, and it is up to the frontend to emit code to eg read the <code>i</code>th element of a GC-managed list from the <code>r64</code> that is the GC pointer to that list</p>",
        "id": 422881510,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708627242
    },
    {
        "content": "<p>also, it is up to you to emit any GC barrier code that your collector might need, Cranelift won't do that for you automatically (it doesn't know what kind of barriers are needed)</p>",
        "id": 422881675,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708627299
    },
    {
        "content": "<p>I see. Are there any examples of some of these being implemented in some dynamically typed language?</p>",
        "id": 423061202,
        "sender_full_name": "juh9870",
        "timestamp": 1708708982
    },
    {
        "content": "<p>other than Wasmtime's reference types support, I'm not aware of any</p>\n<p>here is CLIF construction for doing <code>table.get</code>s on tables of <code>externref</code>s which are lowered to <code>r64</code>s: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/dd0364d367c579abc8f572d2a056aca6cd286887/crates/cranelift/src/func_environ.rs#L1389\">https://github.com/bytecodealliance/wasmtime/blob/dd0364d367c579abc8f572d2a056aca6cd286887/crates/cranelift/src/func_environ.rs#L1389</a></p>",
        "id": 423072971,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708713290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"693753\">@juh9870</span> your questions I think might benefit from Cranelift-orthogonal resources -- you're more or less asking how to compile a higher-level language (with lambdas/closures, an object system, etc) into something at the machine-code level. Cranelift accepts a machine-independent IR, but from the perspective of your questions, it's not much different than machine code: it has pointers and memory as a linear array of bytes, and basic arithmetic and branching, and everything else has to be built on that.</p>\n<p>There are some good books and papers on how to compile languages like Scheme (see e.g. Lisp in Small Pieces, or I think the nanopass framework is interesting to study, or Andy Wingo's blog posts on Guile) that will cover the closure bit; and for objects you can read up on how e.g. SpiderMonkey or V8 keep around objects with slots and \"shapes\". Garbage collection is also a huge topic and there are good textbooks on this (the \"Garbage Collection Handbook\" is the most common recommendation I see). There's a whole universe of literature on efficiently compiling ML (as in Ocaml and Standard ML, not the more recent \"machine learning\" meaning!) as well. \"Lambda-lifting\", \"closure conversion\", \"monomorphization\" vs. \"uniform type representation\" are some good search terms to get you started</p>",
        "id": 423076600,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708714809
    }
]