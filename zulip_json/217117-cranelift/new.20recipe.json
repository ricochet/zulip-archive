[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> I'm poking around at the stack limit issue, and I don't think that cranelift has an encoding already for something like <code>subq $8, (%rsi)</code>, so I'm trying to add one</p>",
        "id": 215353418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339167
    },
    {
        "content": "<p>as</p>",
        "id": 215353424,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339169
    },
    {
        "content": "<p>as expected I'm lost in a jungle of encodings and recipes, and was wondering if you'd be able to help out?</p>",
        "id": 215353449,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339184
    },
    {
        "content": "<p>I also have no idea how x86 encoding works, so that probably doesn't help</p>",
        "id": 215353470,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339196
    },
    {
        "content": "<p>Ah, I am not as much an expert in the old system (I grokked it enough to take the useful parts and build the redesign) but I can certainly help to dig in!</p>",
        "id": 215353537,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339227
    },
    {
        "content": "<p>One issue though is that an encoding should correspond to a single CLIF op; i.e. one can't have many-to-one matches (many CLIF ops to one machine instruction)</p>",
        "id": 215353630,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339272
    },
    {
        "content": "<p>So the above sub-from-memory is really a load-sub-store which... would be difficult to support if it arrives in that form.</p>",
        "id": 215353719,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339297
    },
    {
        "content": "<p>yeah that's fine, this is very raw so far so I'm basically generating raw instructions</p>",
        "id": 215353732,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339304
    },
    {
        "content": "<p>So I think the best option would be to invent a purpose-built CLIF op just for this, and give it the right encoding</p>",
        "id": 215353749,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339312
    },
    {
        "content": "<p>yeah that's what I've <a href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-93c7085e3c20345fbddc46dbb91c57f6b70a207132b7a6cf5ca5be10e2aedb47R722\">got so far</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-93c7085e3c20345fbddc46dbb91c57f6b70a207132b7a6cf5ca5be10e2aedb47R722\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-93c7085e3c20345fbddc46dbb91c57f6b70a207132b7a6cf5ca5be10e2aedb47R722\" title=\"wat · alexcrichton/wasmtime@3a421c3\">wat · alexcrichton/wasmtime@3a421c3</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - alexcrichton/wasmtime</div></div></div>",
        "id": 215353769,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339325
    },
    {
        "content": "<p>and I added a <a href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-749618e77328febdf7f76845b5b36eaaabb33af182bdf4f5523fe86cda17f143R249\">new format too</a> for \"has output condition codes\" (I think)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-749618e77328febdf7f76845b5b36eaaabb33af182bdf4f5523fe86cda17f143R249\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-749618e77328febdf7f76845b5b36eaaabb33af182bdf4f5523fe86cda17f143R249\" title=\"wat · alexcrichton/wasmtime@3a421c3\">wat · alexcrichton/wasmtime@3a421c3</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - alexcrichton/wasmtime</div></div></div>",
        "id": 215353838,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339348
    },
    {
        "content": "<p>stack checks just generate <a href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-11ebdbbad369ec6d7529b9290cab1355ebaba578fd571d46bbe9ca53ef4d60d0R951\">the raw instruction</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-11ebdbbad369ec6d7529b9290cab1355ebaba578fd571d46bbe9ca53ef4d60d0R951\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/commit/3a421c3a4c075ec5050e1531322db2d860408d3e#diff-11ebdbbad369ec6d7529b9290cab1355ebaba578fd571d46bbe9ca53ef4d60d0R951\" title=\"wat · alexcrichton/wasmtime@3a421c3\">wat · alexcrichton/wasmtime@3a421c3</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - alexcrichton/wasmtime</div></div></div>",
        "id": 215353901,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339370
    },
    {
        "content": "<p>what I'm stuck on is the encoding</p>",
        "id": 215353941,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339386
    },
    {
        "content": "<p>in <code>encodings.rs</code> and <code>recipes.rs</code></p>",
        "id": 215353967,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339399
    },
    {
        "content": "<p>I'm sort of just copying push/pop right now (which have x86-specific things)</p>",
        "id": 215354037,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339416
    },
    {
        "content": "<p>but I have no idea how to fill out <code>recipes.rs</code></p>",
        "id": 215354053,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339425
    },
    {
        "content": "<p>and tbh I don't know how to encode this instruction either</p>",
        "id": 215354078,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339436
    },
    {
        "content": "<p>I just know that gas gives me <code>0: 48 83 6e 04 03                subq    $3, 4(%rsi)</code></p>",
        "id": 215354101,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339451
    },
    {
        "content": "<p>OK, so in the recipe -- I don't fully grok why we have <code>EvexContext</code> and all of that or why the input and output are FP regs? But that's aside from the actual question... I'm refilling my L1 cache wrt encodings infra now :-)</p>",
        "id": 215354453,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339617
    },
    {
        "content": "<p>oh sorry that's just copy/pasted from above</p>",
        "id": 215354522,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339643
    },
    {
        "content": "<p>the above recipe that is</p>",
        "id": 215354548,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339650
    },
    {
        "content": "<p>the string should be \"TODO\":</p>",
        "id": 215354554,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339655
    },
    {
        "content": "<p>Ah yes, OK, so we'll need to add the encoding bytes in <code>opcodes.rs</code>; then follow for example how <code>iadd</code> is tied to a recipe and opcode at line 1468: <code>e.enc_i32_i64(inst, recipe.opcodes(&amp;OPCODE))</code></p>",
        "id": 215354721,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339751
    },
    {
        "content": "<p>the Rust-code-as-string in the recipe then needs to do ... things ... to emit the immediate following the opcode bytes</p>",
        "id": 215354803,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339778
    },
    {
        "content": "<p>and properly embed the register number in the ModRM (?) byte</p>",
        "id": 215354838,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604339792
    },
    {
        "content": "<p>so, maybe weird question, how do I figure out the opcode?</p>",
        "id": 215355110,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339889
    },
    {
        "content": "<p>some gas stuff gives:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"mi\">0</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">                   </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">4</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">                   </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"mi\">8</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"mi\">69</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">                </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">d</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">a9</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">       </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">300</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">15</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">a9</span><span class=\"w\"> </span><span class=\"n\">ff</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">       </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">255</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">d</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"mi\">69</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">                </span><span class=\"n\">subq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">127</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">22</span>: <span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">03</span><span class=\"w\">                      </span><span class=\"n\">subl</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">25</span>: <span class=\"nc\">c3</span><span class=\"w\">                            </span><span class=\"n\">retq</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215355126,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339898
    },
    {
        "content": "<p>does that mean  the opcode here is <code>0x83</code>?</p>",
        "id": 215355140,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339907
    },
    {
        "content": "<p>(I have no idea how x86 encoding works)</p>",
        "id": 215355170,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339927
    },
    {
        "content": "<p>according <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf\">to this</a> it claims I want <code>REX.W + 83 /5 ib</code></p>",
        "id": 215355251,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339972
    },
    {
        "content": "<p>so I guess <code>REX.W</code> is 0x48, but I don't know what <code>/5</code> or<code>ib</code> are</p>",
        "id": 215355274,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604339988
    },
    {
        "content": "<p>Oh, yes, 0x83 is the opcode there; 0x48 is the REX byte; 0x2e (in the first instruction) is the ModRM</p>",
        "id": 215355446,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604340064
    },
    {
        "content": "<p>ModRM?</p>",
        "id": 215355514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340092
    },
    {
        "content": "<p>the register number for the sub will be in the modrm and the high bit (try e.g. r12) will be in the REX byte</p>",
        "id": 215355523,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604340095
    },
    {
        "content": "<p>ModRM is... modifier, register, memory? Something like that; basically \"operands to the x86 instruction\". x86 is weird</p>",
        "id": 215355562,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604340118
    },
    {
        "content": "<p>aha ok</p>",
        "id": 215355616,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340126
    },
    {
        "content": "<p>let me know if you still run into issues and I can try to help; I had to mess with those recipes when I first started in Cranelift and it was not easy to figure out</p>",
        "id": 215355780,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604340204
    },
    {
        "content": "<p>(the /5 above is the \"modifier\" I think; and <code>ib</code> is \"immediate byte\", I am guessing)</p>",
        "id": 215355847,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604340239
    },
    {
        "content": "<p>ok yeah I';m starting to actually read the manual</p>",
        "id": 215355912,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340257
    },
    {
        "content": "<p>\"/digit — A digit between 0 and 7 indicates that the ModR/M byte of the instruction uses only the r/m (register or memory) operand. The reg field contains the digit that provides an extension to the instruction's opcode.\"</p>",
        "id": 215355920,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340259
    },
    {
        "content": "<p>\"ib, iw, id, io — A 1-byte (ib), 2-byte (iw), 4-byte (id) or 8-byte (io) immediate operand to the instruction that follows the opcode, ModR/M bytes or scale-indexing bytes. The opcode determines if the operand is a signed value. All words, doublewords and quadwords are given with the low-order byte first.\"</p>",
        "id": 215355931,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340269
    },
    {
        "content": "<p>oh man ok I'm still very lost</p>",
        "id": 215356458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340507
    },
    {
        "content": "<p>on <code>recipes.rs</code></p>",
        "id": 215356463,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604340510
    },
    {
        "content": "<p>ok I'm throwing things at the wall, filecheck errors are inscrutable to me though</p>",
        "id": 215357866,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604341206
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x86</span><span class=\"o\">/</span><span class=\"n\">prologue</span><span class=\"o\">-</span><span class=\"n\">epilogue</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">compile</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">filecheck</span><span class=\"w\"> </span><span class=\"n\">failed</span>:\n    <span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">fp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"nc\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">incoming_arg</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"nc\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span> <span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">])</span>:\n    <span class=\"err\">#</span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"nc\">x86_push</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"nc\">copy_special</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"> </span>-&gt; <span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_pop</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"err\">#</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"n\">nextln</span>: <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">empty</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">fp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"o\">^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Matched</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">0</span>: <span class=\"err\">\\</span><span class=\"n\">bfunction</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">empty</span><span class=\"err\">\\</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"err\">\\</span><span class=\"p\">]</span><span class=\"err\">\\</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"err\">\\</span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">fp</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"err\">\\</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\">     </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">incoming_arg</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"o\">^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Matched</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">1</span>: <span class=\"err\">\\</span><span class=\"n\">bss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">incoming_arg</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"err\">\\</span><span class=\"n\">b</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Missed</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">2</span>: <span class=\"err\">\\</span><span class=\"n\">bblock0</span><span class=\"err\">\\</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span> <span class=\"err\">\\</span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"err\">\\</span><span class=\"p\">]</span><span class=\"err\">\\</span><span class=\"p\">)</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\">                                 </span><span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span> <span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">])</span>:\n    <span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Op1pushq</span><span class=\"err\">#</span><span class=\"mi\">50</span><span class=\"p\">]</span><span class=\"w\">                       </span><span class=\"n\">x86_push</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">RexOp1copysp</span><span class=\"err\">#</span><span class=\"mi\">8089</span><span class=\"p\">]</span><span class=\"w\">                 </span><span class=\"n\">copy_special</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"> </span>-&gt; <span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Op1popq</span><span class=\"err\">#</span><span class=\"mi\">58</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">]</span><span class=\"w\">                   </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_pop</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Op1ret</span><span class=\"err\">#</span><span class=\"n\">c3</span><span class=\"p\">]</span><span class=\"w\">                         </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215357887,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604341217
    },
    {
        "content": "<p>what's happening there?</p>",
        "id": 215357901,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604341223
    },
    {
        "content": "<p>Hmm, so this filetest isn't expecting the stackslot (<code>ss0</code>) created to name the incoming arg</p>",
        "id": 215358454,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604341539
    },
    {
        "content": "<p>If this is part of your patch, you can just add it, or alter <code>nextln</code> to <code>check</code> to allow content between the <code>function</code> line and the start of the BB</p>",
        "id": 215358566,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604341586
    },
    {
        "content": "<p>I think the <code>ss0</code> is fine (matched), it may be a new line that cranelift-reader inserts before block headers (see the empty <code>&gt; </code>)</p>",
        "id": 215359124,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604341854
    },
    {
        "content": "<p>but I think the same thing applies: <code>check: block0...</code> will reset the matcher so that it skips the newline</p>",
        "id": 215359209,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604341914
    },
    {
        "content": "<p>oh I remember this now</p>",
        "id": 215359405,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342017
    },
    {
        "content": "<p>my editor strips trailing whitespace</p>",
        "id": 215359412,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342023
    },
    {
        "content": "<p>and that's significant here...</p>",
        "id": 215359417,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342026
    },
    {
        "content": "<p>yeah I would really like filecheck not to be trailing whitespace significant...</p>",
        "id": 215360035,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1604342347
    },
    {
        "content": "<p>ok I've thrown things at the wall</p>",
        "id": 215360105,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342400
    },
    {
        "content": "<p>and now I get </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">RexOp1umr</span><span class=\"err\">#</span><span class=\"mi\">8089</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">]</span><span class=\"w\">               </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">copy</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"p\">[</span><span class=\"n\">RexOp1sub_mem</span><span class=\"err\">#</span><span class=\"mi\">83</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rflags</span><span class=\"p\">]</span><span class=\"w\">          </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_sub_mem</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"mi\">184</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"o\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">inst2</span>: <span class=\"nc\">RexOp1sub_mem</span><span class=\"err\">#</span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">constraints</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span><span class=\"w\"> </span><span class=\"k\">in</span>: <span class=\"nc\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_sub_mem</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"mi\">184</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">stack_limit</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">stack_limit</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">fp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">fp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">fast</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">168</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">184</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">incoming_arg</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">16</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215360159,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342408
    },
    {
        "content": "<p>where are constraints configured here? is that also in <a href=\"http://recipes.rs\">recipes.rs</a>?</p>",
        "id": 215360195,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342436
    },
    {
        "content": "<p>I think the constraints originate (or at least can originate) from the <code>operands_in</code> and <code>operands_out</code> builder methods invoked in <a href=\"http://recipes.rs\">recipes.rs</a></p>",
        "id": 215360306,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604342513
    },
    {
        "content": "<p>ok cool, thanks!</p>",
        "id": 215360381,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342538
    },
    {
        "content": "<p>those are indeed garbage values, I should think on those</p>",
        "id": 215360394,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342544
    },
    {
        "content": "<p>Probably you want <code>vec![gpr]</code> for ins and <code>vec![]</code> for outs?</p>",
        "id": 215360413,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604342554
    },
    {
        "content": "<p>if I have iflags going out</p>",
        "id": 215360466,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342590
    },
    {
        "content": "<p>is it <code>vec![rflags]</code>?</p>",
        "id": 215360476,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342594
    },
    {
        "content": "<p>ok cool making progress, now have </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">x86</span><span class=\"o\">/</span><span class=\"n\">prologue</span><span class=\"o\">-</span><span class=\"n\">epilogue</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">compile</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Expected</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"mi\">29</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span><span class=\"w\"></span>\n</code></pre></div>\n<p>looks like I need to actually fill out the encoding now</p>",
        "id": 215360611,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342645
    },
    {
        "content": "<p>ah, yeah, I think you want <code>rflags</code> out for completeness (to denote that the reg is clobbered), but I don't recall exactly how the flags checker works. Though it shouldn't matter if this is only being generated explicitly in a prologue</p>",
        "id": 215360879,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604342787
    },
    {
        "content": "<p>ok so I got to the point where the test is failing for the reason I expect it to be failing, basically I need to update the clif for the new instruction</p>",
        "id": 215361291,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342978
    },
    {
        "content": "<p>before I do that though I want to actually implement the encoding</p>",
        "id": 215361309,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604342987
    },
    {
        "content": "<p>so I'm adding a <code>binemit</code> test for this?</p>",
        "id": 215361350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343004
    },
    {
        "content": "<p>yup</p>",
        "id": 215361434,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604343047
    },
    {
        "content": "<p>hm ok, so I added a simple one</p>",
        "id": 215361470,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343064
    },
    {
        "content": "<p>and I get</p>",
        "id": 215361472,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343065
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">worker</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">0</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">filetests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test_binemit</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">143</span>:<span class=\"mi\">37</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n<span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">panicked</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">worker</span><span class=\"w\"> </span><span class=\"err\">#</span><span class=\"mi\">0</span>: <span class=\"nc\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Option</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">None</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215361493,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343075
    },
    {
        "content": "<p>those pesky <code>None</code>s... hmm</p>",
        "id": 215361536,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604343103
    },
    {
        "content": "<p>where the panic is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/146a393a9aeb1a6e505caf0c5c6aeda8ff43a13d/cranelift/filetests/src/test_binemit.rs#L143\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/146a393a9aeb1a6e505caf0c5c6aeda8ff43a13d/cranelift/filetests/src/test_binemit.rs#L143\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/146a393a9aeb1a6e505caf0c5c6aeda8ff43a13d/cranelift/filetests/src/test_binemit.rs#L143\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 215361547,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343109
    },
    {
        "content": "<p>I guess I need to fill that in in the backend</p>",
        "id": 215361560,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343118
    },
    {
        "content": "<p>somewhere...</p>",
        "id": 215361567,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343121
    },
    {
        "content": "<p>Does your patch add new stackslots?</p>",
        "id": 215361701,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604343187
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 215361732,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343204
    },
    {
        "content": "<p>(I am mostly no better than <code>ripgrep</code> to help you here, though, sorry :-/ )</p>",
        "id": 215361733,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604343207
    },
    {
        "content": "<p>I just moved it to a <code>filter_map</code> temporarily</p>",
        "id": 215361740,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343209
    },
    {
        "content": "<p>nah it's ok</p>",
        "id": 215361753,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343216
    },
    {
        "content": "<p>I will soldier on</p>",
        "id": 215361762,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343221
    },
    {
        "content": "<p>fwiw I'll be happy to help bring this up in the new backend :-)</p>",
        "id": 215361951,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604343309
    },
    {
        "content": "<p>(which I imagine we'll need to do shortly if this becomes the normal translation for stack checks)</p>",
        "id": 215361988,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1604343325
    },
    {
        "content": "<p>bah it seems binemit doesn't match the prologue epilogue</p>",
        "id": 215362134,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343392
    },
    {
        "content": "<p>what does your foo.clif look like?</p>",
        "id": 215362160,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343405
    },
    {
        "content": "<p>ah but yeah I will need to implement this in the new backend before landing</p>",
        "id": 215362166,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343408
    },
    {
        "content": "<p>current the clif is </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">binemit</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">opt_level</span><span class=\"o\">=</span><span class=\"n\">speed_and_size</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">is_pic</span><span class=\"w\"></span>\n<span class=\"n\">set</span><span class=\"w\"> </span><span class=\"n\">enable_probestack</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">haswell</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">stack_limit</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">stack_limit</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">asm</span>: <span class=\"nc\">xxx</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">bin</span>: <span class=\"mi\">30</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">168</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215362211,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343432
    },
    {
        "content": "<p>but it seems to want that directive to be attached to an instruction</p>",
        "id": 215362254,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343452
    },
    {
        "content": "<p>oh I guess I can manually type in the instruction</p>",
        "id": 215362270,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343460
    },
    {
        "content": "<p>yup, that sounds right</p>",
        "id": 215362363,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343493
    },
    {
        "content": "<p>now I must learn to write clif...</p>",
        "id": 215362386,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343505
    },
    {
        "content": "<p>what is the op you need to add?</p>",
        "id": 215362444,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343536
    },
    {
        "content": "<p>I'm adding <code>sub $imm, (%r12)</code> basically</p>",
        "id": 215362489,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343561
    },
    {
        "content": "<p>I haven't even gotten to try out the encoding</p>",
        "id": 215362514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343571
    },
    {
        "content": "<p>trying to write up a test which gives me \"your encoding is weird\" so far</p>",
        "id": 215362525,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343579
    },
    {
        "content": "<p>(hm, scanning my brain to see if I remember if <code>(%r12)</code> addressing is even possible in the old backend...)</p>",
        "id": 215362725,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343665
    },
    {
        "content": "<p>I mean syntactically... if you write an encoding for a new instruction it should be possible</p>",
        "id": 215362802,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343702
    },
    {
        "content": "<p>yeah I'm just adding a whole new recipe/instruction</p>",
        "id": 215362904,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343733
    },
    {
        "content": "<p>time to acquire llvm-mc...</p>",
        "id": 215362936,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343752
    },
    {
        "content": "<p>ok so I now have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">]</span><span class=\"w\">            </span><span class=\"n\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">asm</span>: <span class=\"nc\">sub</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbx</span><span class=\"p\">]</span><span class=\"w\">            </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_sub_mem</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">bin</span>: <span class=\"mi\">30</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which yields</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FAIL</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">clif</span>: <span class=\"nc\">binemit</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">encodings</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">for</span>: <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x86_sub_mem</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">failure</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215363248,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343897
    },
    {
        "content": "<p>if you run into issues with llvm-mc I've been using XED recently and it can disassemble machine code</p>",
        "id": 215363260,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343905
    },
    {
        "content": "<p>what does your <a href=\"http://encodings.rs\">encodings.rs</a> have in it?</p>",
        "id": 215363308,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343931
    },
    {
        "content": "<p>oh that should be iconst.i64</p>",
        "id": 215363310,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343933
    },
    {
        "content": "<p>I left it as </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">recipes</span><span class=\"p\">.</span><span class=\"n\">add_template</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Template</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">EncodingRecipeBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"sub_mem\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">formats</span><span class=\"p\">.</span><span class=\"n\">store_imm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">operands_in</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">gpr</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">operands_out</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">reg_rflags</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">r</span><span class=\"err\">#</span><span class=\"s\">\"</span>\n<span class=\"s\">                    {{PUT_OP}}(bits | (in_reg0 &amp; 7), rex1(in_reg0), sink);</span>\n<span class=\"s\">                \"</span><span class=\"err\">#</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">regs</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">rex_kind</span><span class=\"p\">(</span><span class=\"n\">RecipePrefixKind</span>::<span class=\"n\">AlwaysEmitRex</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215363343,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343950
    },
    {
        "content": "<p>which should be the encoding of pushing a register I think</p>",
        "id": 215363364,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343958
    },
    {
        "content": "<p>no, I mean where you bind the CLIF to the recipe</p>",
        "id": 215363431,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604343976
    },
    {
        "content": "<p>it says <code>e.enc_x86_64(x86_sub_mem.bind(I64), rec_x86_sub_mem.opcodes(&amp;SUB_MEM));</code></p>",
        "id": 215363463,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604343992
    },
    {
        "content": "<p>like, if you didn't bind <code>x86_sub_mem</code> to the right type then that can cause the \"no encodings\" error</p>",
        "id": 215363484,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604344003
    },
    {
        "content": "<p>so you are binding to <code>I64</code> there but in foo.clif you use <code>x86_sub_mem.i32</code></p>",
        "id": 215363564,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604344041
    },
    {
        "content": "<p>oops yeah, now I get a little different</p>",
        "id": 215363593,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604344055
    },
    {
        "content": "<p>I suspect one should change to match the other</p>",
        "id": 215363594,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604344055
    },
    {
        "content": "<p><code>No matching encodings for v1 = x86_sub_mem.i64 123, v0 in [RexOp1sub_mem#83, RexOp1sub_mem#83]</code></p>",
        "id": 215363607,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604344060
    },
    {
        "content": "<p>after changing to <code>iconst.i64</code></p>",
        "id": 215363623,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604344068
    },
    {
        "content": "<p>Hm... weird that you are getting two of the same in that list</p>",
        "id": 215364055,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1604344241
    },
    {
        "content": "<p>aha got it!</p>",
        "id": 215364060,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604344244
    },
    {
        "content": "<p>I needed the output to be <code>%rflags</code></p>",
        "id": 215364075,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604344252
    },
    {
        "content": "<p>ok I think I have almost wrangled everything, thanks again for your help <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> and <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> !</p>",
        "id": 215370435,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604347119
    },
    {
        "content": "<p>ok so turns out this is all folly, the decrement of the stack limit isn't atomic but it's also being updated from other threads</p>",
        "id": 215391379,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604358391
    },
    {
        "content": "<p>back to the drawing board!</p>",
        "id": 215391383,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1604358395
    }
]