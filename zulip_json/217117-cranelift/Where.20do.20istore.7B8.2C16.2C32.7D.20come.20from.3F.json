[
    {
        "content": "<p>I've personally always been a little perplexed by the <code>istore*</code> instructions in cranelift and and I also just ran into a bug on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\">#8719</a> where I broke <code>istore8</code> for example (I thought it took an 8-bit operand but apparently it takes a 16-64-bit operand). It's well-documented so this was just me missing the docs, but where does this instruction come from? I can't actually find anywhere in Cranelift that generates the instruction...</p>\n<p>And perhaps orthogonally is this something that needs to be kept around nowadays? Or can the instructions be removed? (similar questions for uload8/sload8/friends)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6902b22641bb7b3a3ac8acfed6e9729ffde8c127/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393430623836656531613065383664376235356566346535313437353837333464396431653662656163613438643262633239313637316334343031626333662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38373139&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8719\" title=\"riscv64: Optimize storing zero to memory by using `zero_reg` by alexcrichton · Pull Request #8719 · bytecodealliance/wasmtime\">riscv64: Optimize storing zero to memory by using `zero_reg` by alexcrichton · Pull Request #8719 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit is similar to #8701 in that it adds a special case to store operations to use the zero register when applicable.</div></div></div>",
        "id": 441752703,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717173587
    },
    {
        "content": "<p>I wonder if these are artifacts of the earlier more direct approach to incremental rewriting from Wasm to machine code; they seem to correspond to Wasm's \"I only deal in 32 bits but sure I'll load/store a byte for you\" instructions</p>",
        "id": 441753328,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717173740
    },
    {
        "content": "<p>+1 to removing them if we don't use them in cranelift-wasm!</p>",
        "id": 441753373,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717173752
    },
    {
        "content": "<p>(or rewriting the latter to use extends/truncates if we do!)</p>",
        "id": 441753414,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717173761
    },
    {
        "content": "<p>I think we had an issue filed to remove them, let me see if I can find it</p>",
        "id": 441753434,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1717173765
    },
    {
        "content": "<p>Yeah that's what I figured their origins were from, but I'm still perplexed why tests broke when I broke the lowerings of the instructions because as far as I can tell nothing actually uses the instructions</p>",
        "id": 441753519,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717173790
    },
    {
        "content": "<p>oh I lied it's right there in the code translator</p>",
        "id": 441753575,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717173806
    },
    {
        "content": "<p>I was searching for \"istore8\" and turns out it's <code>Istore8</code> in the translator</p>",
        "id": 441753605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717173814
    },
    {
        "content": "<p>ok well that explains that</p>",
        "id": 441753642,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717173823
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6056\">https://github.com/bytecodealliance/wasmtime/issues/6056</a></p>\n<p>Here it is</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6056\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1e8cec870c1bf465561514af699e2128511bda19/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306131356461333937373737393931363730363934326139613632646561363866333863333062363337373531323161363736323733396262376439643736332f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36303536&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6056\" title=\"Cranelift: Simplify all our various CLIF load and store instructions · Issue #6056 · bytecodealliance/wasmtime\">Cranelift: Simplify all our various CLIF load and store instructions · Issue #6056 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">{u,s}load{8,16,32} these are all equivalent to load.i{8,16,32} followed by {u,s}extend. We should just use that larger sequence and backends that have special lowerings for uload8() that are better...</div></div></div>",
        "id": 441753812,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1717173863
    },
    {
        "content": "<p>nice thanks</p>",
        "id": 441753893,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717173887
    }
]