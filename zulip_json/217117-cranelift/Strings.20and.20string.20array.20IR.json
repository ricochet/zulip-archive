[
    {
        "content": "<p>Hi all, I have recently started playing with cranelift IR and would like to know how we transform a C++ string array to IR? I am aware of the create_data example used in simplejit_demo, is there a simpler API to create this ?</p>",
        "id": 191452633,
        "sender_full_name": "Divya Agrawal",
        "timestamp": 1584958395
    },
    {
        "content": "<p>Hello, if you mean a C++ std::string, we don't yet have a C++ frontend for Cranelift, which would be needed to do that in a reasonable way.</p>",
        "id": 191680733,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585088788
    },
    {
        "content": "<p>If you mean a string literal, then yes, create_data is what we currently have. You'll need to add a NUL to the end.</p>",
        "id": 191680780,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585088824
    },
    {
        "content": "<p>Hi, Thank you for the reply. Also how do we return a array from a cranelift function, what I could think of is use heap but am not sure how an array access in a toy language would map to that heap ?</p>",
        "id": 191701319,
        "sender_full_name": "Divya Agrawal",
        "timestamp": 1585111789
    },
    {
        "content": "<p>What I mean is modelling writing to an array?</p>",
        "id": 191703407,
        "sender_full_name": "Divya Agrawal",
        "timestamp": 1585115588
    },
    {
        "content": "<p>If the caller knows how big the array is, it can pass a pointer to a buffer the function can write to.</p>",
        "id": 191730628,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585135241
    },
    {
        "content": "<p>If not, the function can dynamically allocate a buffer and the caller can free it.</p>",
        "id": 191730659,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585135264
    }
]