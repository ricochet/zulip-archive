[
    {
        "content": "<p>Hi all -- I'm looking at how to strengthen the fuzzing story for the new CL backend. As part of this, I think we should be running the <a href=\"https://github.com/bytecodealliance/regalloc.rs/blob/main/lib/src/checker.rs\">regalloc checker</a>-based <a href=\"https://github.com/bytecodealliance/regalloc.rs/tree/main/fuzz\">fuzz targets</a> on some continuous basis. Wasmtime is already on Google's <a href=\"https://github.com/google/oss-fuzz\">oss-fuzz</a> but a targeted setup for regalloc with the specific dataflow-checker oracle would be much more powerful, I think.</p>\n<p>So, what do folks think about applying to have <a href=\"http://regalloc.rs\">regalloc.rs</a> a part of oss-fuzz? cc <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> <span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc.rs/blob/main/lib/src/checker.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc.rs/blob/main/lib/src/checker.rs\" title=\"bytecodealliance/regalloc.rs\">bytecodealliance/regalloc.rs</a></div><div class=\"message_embed_description\">Modular register allocator algorithms. Contribute to bytecodealliance/regalloc.rs development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc.rs/tree/main/fuzz\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc.rs/tree/main/fuzz\" title=\"bytecodealliance/regalloc.rs\">bytecodealliance/regalloc.rs</a></div><div class=\"message_embed_description\">Modular register allocator algorithms. Contribute to bytecodealliance/regalloc.rs development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz\" title=\"google/oss-fuzz\">google/oss-fuzz</a></div><div class=\"message_embed_description\">OSS-Fuzz - continuous fuzzing of open source software. - google/oss-fuzz</div></div></div>",
        "id": 217204265,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605737825
    },
    {
        "content": "<p>if we are already moving <a href=\"http://regalloc.rs\">regalloc.rs</a> into the same repo, I think it makes more sense to just wait for that to happen, at which point we should get the fuzzing on oss-fuzz naturally</p>",
        "id": 217204439,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605737902
    },
    {
        "content": "<p>Ah, so I think the latest story on that is that we want to keep it in a separate crate</p>",
        "id": 217204575,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605737967
    },
    {
        "content": "<p>(we will have to move the fuzz target definitions themselves into the top level <code>fuzz</code> crate. the actual fuzz target definition can simply be a function call to the \"real\" fuzz target, similar to a bunch of our existing fuzz targets work)</p>",
        "id": 217204583,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605737974
    },
    {
        "content": "<p>oh for sure, it can still be a separate crate, but are we rethinking including it in the repo?</p>",
        "id": 217204623,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605737996
    },
    {
        "content": "<p>err, sorry, s/crate/repo/</p>",
        "id": 217204682,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738008
    },
    {
        "content": "<p>I believe the main concerns were CI time and appearance of independence/reusability</p>",
        "id": 217204723,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738045
    },
    {
        "content": "<p>in that case it probably makes sense to copy what we do for the <code>wasm-tools</code> fuzz targets</p>",
        "id": 217204725,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738048
    },
    {
        "content": "<p>They shoehorn into wasmtime's oss-fuzz allocation somehow?</p>",
        "id": 217204768,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738075
    },
    {
        "content": "<ul>\n<li><a href=\"https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/Dockerfile#L20\">https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/Dockerfile#L20</a></li>\n<li><a href=\"https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/build.sh#L50\">https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/build.sh#L50</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/Dockerfile#L20\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/Dockerfile#L20\" title=\"google/oss-fuzz\">google/oss-fuzz</a></div><div class=\"message_embed_description\">OSS-Fuzz - continuous fuzzing of open source software. - google/oss-fuzz</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/build.sh#L50\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/blob/master/projects/wasmtime/build.sh#L50\" title=\"google/oss-fuzz\">google/oss-fuzz</a></div><div class=\"message_embed_description\">OSS-Fuzz - continuous fuzzing of open source software. - google/oss-fuzz</div></div></div>",
        "id": 217204853,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738120
    },
    {
        "content": "<p>Excellent, this answers many questions, thanks! (I wasn't sure whether it would be ok to piggyback on wasmtime's fuzz time within the spirit of the rules but I suppose we use it anyway so this just targets fuzzing more precisely)</p>",
        "id": 217205039,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738208
    },
    {
        "content": "<p>as an aside, while you're here -- do we have a good differential-fuzzing story for wasmtime yet? (I've just started digging through all the configs/targets)</p>",
        "id": 217205189,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738278
    },
    {
        "content": "<p>we have something set up but it hasn't really found anything</p>",
        "id": 217205224,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738296
    },
    {
        "content": "<p>I'd love to do old-backend vs. new-backend and new-backend vs. native (or at least the latter)</p>",
        "id": 217205244,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738306
    },
    {
        "content": "<p>I think it is hard to use just coverage to guide differential fuzzing, I don't know</p>",
        "id": 217205251,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738310
    },
    {
        "content": "<p>hmm, yeah, I haven't played with this too much before either</p>",
        "id": 217205282,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738329
    },
    {
        "content": "<p>anyway I'll keep digging -- thanks!</p>",
        "id": 217205293,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738333
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/fuzzing/src/oracles.rs#L119\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/fuzzing/src/oracles.rs#L119</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/fuzzing/src/oracles.rs#L119\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/fuzzing/src/oracles.rs#L119\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 217205319,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738350
    },
    {
        "content": "<p>to reuse this approach with new vs old backend, we would need a way to compile both the old and new backends and be able to choose on a per-module basis which one we were using</p>",
        "id": 217205480,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738440
    },
    {
        "content": "<p>Yes, I suppose I was envisioning something much hackier that would drive two wasmtime binaries from a shell script and compare outputs, or something like that</p>",
        "id": 217205572,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738490
    },
    {
        "content": "<p>I think one would need something similar for wasmtime vs. native</p>",
        "id": 217205597,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738509
    },
    {
        "content": "<p>iirc this is how csmith-based fuzzing works but I haven't looked at that in a long time...?</p>",
        "id": 217205666,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738549
    },
    {
        "content": "<p>yeah that would probably be better than exposing backends in our config, but it also doesn't really fit into the oss-fuzz model, which is essentially \"we give them a libfuzzer-using binary\" and doesn't really work well with external processes</p>",
        "id": 217205809,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738628
    },
    {
        "content": "<p>yeah, I don't think you can link csmith as a library, I think you have to spawn it. maybe worth doing a quick grep over oss-fuzz to see if anything is using csmith, and if so then we could probably spawn our own processes too</p>",
        "id": 217205964,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738721
    },
    {
        "content": "<p>would ideally have <em>something</em> running in-process so that libfuzzer gets that coverage feedback</p>",
        "id": 217206053,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1605738761
    },
    {
        "content": "<p>I suppose one could shell out to csmith and the compiler and then <code>dlopen</code> the result for the native half of the comparison</p>",
        "id": 217206150,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738816
    },
    {
        "content": "<p>compilation happens in toplevel process so all the coverage guidance is driven at least from that</p>",
        "id": 217206168,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738830
    },
    {
        "content": "<p>ok, I'll play with this more (and look at what other folks may be doing). thanks!</p>",
        "id": 217206255,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605738872
    },
    {
        "content": "<p>Adding regalloc to our config should be pretty easy, I'd recommend modeling after what wasm-tools is doing</p>",
        "id": 217206811,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605739241
    },
    {
        "content": "<p>for diffing the old/new backend I think that'd be pretty easy so long as they were both compiled into cranelift, we'd need some sort of <code>Config</code> option to select and you could diff the result of two <code>Instance</code>s within two stores</p>",
        "id": 217206849,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605739277
    },
    {
        "content": "<p>one store with the old backend and one with the new</p>",
        "id": 217206858,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605739284
    },
    {
        "content": "<p>Hmm, actually, I think this is the best way to go -- differential execution-backend-X on different Stores; we could diff against a wasm bytecode-level interpreter at some point, too. Would certainly give more throughput than shelling out to a compiler</p>",
        "id": 217208560,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1605740401
    },
    {
        "content": "<p>+1 for fuzzing regalloc, thanks! (Maybe disable the linear scan fuzz target first; while it appears to be working, it's still experimental and i'd like to play with it more and change core parts of the algorithm.)</p>",
        "id": 217237080,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1605771452
    },
    {
        "content": "<p>Regarding differential fuzzing, maybe there'll be some hardship if you want to compile old-x64 vs new-x64, because of the experimental_x64 feature.</p>",
        "id": 217237136,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1605771493
    },
    {
        "content": "<p>And on the same topic of using that experimental_x64 feature: has the wasmtime fuzzing been done with this feature enabled, on ossfuzz? It could probably find a few issues, if it hasn't ever been enabld.</p>",
        "id": 217237172,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1605771553
    },
    {
        "content": "<p>We don't have experimental_x64 on oss-fuzz yet, no</p>",
        "id": 217290032,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605801712
    },
    {
        "content": "<p>being a cargo feature instead of a runtime feature we'd have to build the binaries twice I believe, which would just be an edit to the oss-fuzz build script</p>",
        "id": 217290136,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1605801741
    }
]