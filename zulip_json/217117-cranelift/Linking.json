[
    {
        "content": "<p>I read the brief introduction on cranelift crates <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/index.md\">here</a></p>\n<p>I did not see anything about linking. So if I were to generate cranelift IR, and then lower for each target to module or \"object file\". In the final stage, I would want to link all objects together, and do different (link time) optimizations. Is there a distinction in cranelift, or at that point is it using the codegen crate on a massive in memory IR of all objects?</p>\n<p>(sorry just getting started here)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/index.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8d4ec5248ba8fdd04fec7f6f9a44d85e58e15540\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656266653738366234386261383238303336636139663937343538313337323535396434393739333634663535323366623466313734323734636232386666332f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/index.md\" title=\"wasmtime/index.md at main · bytecodealliance/wasmtime\">wasmtime/index.md at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 360397055,
        "sender_full_name": "Chris Clark",
        "timestamp": 1684799952
    },
    {
        "content": "<p>I also have no idea how this site works, or what it means to be in a stream, or what it said when this message was outside the arrow? sorry.</p>",
        "id": 360397089,
        "sender_full_name": "Chris Clark",
        "timestamp": 1684799990
    },
    {
        "content": "<p>oh i feel dumb. </p>\n<p>cranelift-module This crate manages compiling multiple functions and data objects together.</p>\n<p>This is called a module in cranelift world.</p>",
        "id": 360397353,
        "sender_full_name": "Chris Clark",
        "timestamp": 1684800134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619350\">Chris Clark</span> has marked this topic as resolved.</p>",
        "id": 360397359,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684800138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"619350\">@Chris Clark</span> Cranelift works purely on a function level right now, i.e., each function is compiled separately with no knowledge of other functions. (The original design motivation for this was to allow easy parallel compilation, AFAIK.) As a result, there's no LTO, and no need to have everything in memory while compiling</p>",
        "id": 360397364,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684800143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619350\">Chris Clark</span> has marked this topic as unresolved.</p>",
        "id": 360397385,
        "sender_full_name": "Notification Bot",
        "timestamp": 1684800169
    },
    {
        "content": "<p>In the future we may implement inlining though, in which case it'd be beneficial to present the IR for multiple functions to the backend; we haven't quite worked out how to update our model for that</p>",
        "id": 360397389,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684800173
    },
    {
        "content": "<p>In any case, yep, you've discovered some of the machinery for this. Note that Cranelift is factored into layers of sorts: cranelift-codegen is the core backend, and is just as described above; cranelift-module, cranelift-object, and cranelift-jit are some of the higher level surface that's been built to enable linking, storing code to disk, etc</p>",
        "id": 360397431,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684800219
    },
    {
        "content": "<p>@bjorn3 is probably the best person to ask for most questions related to that; I mostly work on the core compiler and on Wasmtime (which does its own sort of relocs / linking)</p>",
        "id": 360397500,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684800247
    },
    {
        "content": "<p>I just want to add that you're using this Zulip chat just fine, and also to say, welcome!</p>",
        "id": 360398143,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1684800718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/Linking/near/360397364\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"619350\">Chris Clark</span> have everything in memory while compiling</p>\n</blockquote>\n<p>I'm not sure how this will work with the final binary, but I'll look more into module and object, to see what I can leverage. I just don't want to work with llvm I've decided. This interface already seems leagues better. thank you for all the hard work already!</p>",
        "id": 360399335,
        "sender_full_name": "Chris Clark",
        "timestamp": 1684801473
    },
    {
        "content": "<p>Yep, and just to echo Jamey, please feel free to ask questions here! We are fairly young w.r.t. documentation and good examples (the main users now are Wasmtime and then the rustc backend cg_clif) so we're always interested in helping more small projects bootstrap and then serve as good examples in turn, and find the holes in our docs so we can improve them!</p>",
        "id": 360400330,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684802025
    },
    {
        "content": "<p>Should I provide additional follow up here, is a \"stream\" continuous, all linking type questions go here? Should my poc research results be a separate stream?</p>",
        "id": 360558006,
        "sender_full_name": "Chris Clark",
        "timestamp": 1684853799
    },
    {
        "content": "<p>A topic within a stream can continue being used for arbitrarily long, yes. I think the idea is that it gives someone the ability to focus on one line of conversation if there are multiple going on at the same time (e.g. the classic \"three simultaneous convos interwoven in an IRC channel\")</p>",
        "id": 360579415,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684858544
    },
    {
        "content": "<p>it's also somewhat useful to see the title when quickly triaging incoming messages, so if a topic drifts too far we sometimes start a new one. but there's really nothing wrong with a generic one like \"linking\" or \"beginner questions\" or \"strange crash\" or ...</p>",
        "id": 360579644,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684858603
    },
    {
        "content": "<p>at least, that's how I use Zulip, dunno if others have different thoughts :-)</p>",
        "id": 360579678,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684858613
    },
    {
        "content": "<p>Zulip allows moving messages to a new topic after the fact if it drifted too far from the original conversation.</p>",
        "id": 360607869,
        "sender_full_name": "bjorn3",
        "timestamp": 1684865841
    }
]