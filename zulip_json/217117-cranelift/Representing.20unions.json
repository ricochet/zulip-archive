[
    {
        "content": "<p>I've been trying to figure out how to most efficiently represent unions, and debating some different approaches. I'm writing off heap-allocation because stackslots can do that but better as far as I can tell. Mainly I'm wondering how unions might be represented with SSA values. Take the simple union <code>f32 | u32</code>; I don't believe either of SSA registers or cranelift_frontend variables can actually represent a union of primitive types, only one specific primitive, and there's no way to change that at runtime afaik. It seems like the only reasonable method (which it appears rustc_codegen_cranelift uses) is to allocate unions on the stack and manipulate them by reference.<br>\nIs there anything else I missed, or is that about it?</p>",
        "id": 322899235,
        "sender_full_name": "PROMETHIA",
        "timestamp": 1674416000
    },
    {
        "content": "<p>In LLVM i would stack allocate a [i8 x sizeofmafield] and cast it yes.</p>",
        "id": 322899482,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1674416211
    },
    {
        "content": "<p>You can also choose to specify variables with one type and use bitcast when you want to read or write it as the other type.</p>",
        "id": 322919654,
        "sender_full_name": "bjorn3",
        "timestamp": 1674431510
    }
]