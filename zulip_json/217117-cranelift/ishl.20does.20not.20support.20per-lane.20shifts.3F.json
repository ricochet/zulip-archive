[
    {
        "content": "<p>I was surprised to see:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v55</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v25</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v25</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">i32x4</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">satisfy</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">set</span><span class=\"w\"> </span><span class=\"n\">ValueTypeSet</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lanes</span>: <span class=\"nc\">BitSet</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">ints</span>: <span class=\"nc\">BitSet</span><span class=\"p\">(</span><span class=\"mi\">248</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">floats</span>: <span class=\"nc\">BitSet</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"err\">\\</span><span class=\"o\">|</span>\n<span class=\"n\">efs</span>: <span class=\"nc\">BitSet</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">dynamic_lanes</span>: <span class=\"nc\">BitSet</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>when both AVX2 and NEON support per-lane shift amounts.<br>\n<a href=\"https://developer.arm.com/documentation/102159/0400/Shifting-left-and-right\">https://developer.arm.com/documentation/102159/0400/Shifting-left-and-right</a><br>\n<a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=3707,3729,3724,3708,6143&amp;text=mm256_sllv\">https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=3707,3729,3724,3708,6143&amp;text=mm256_sllv</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=3707,3729,3724,3708,6143&amp;text=mm256_sllv\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ebe42eadc74599633923d6b4e58579d951fd8529/68747470733a2f2f7777772e696e74656c2e636f6d2f6574632e636c69656e746c6962732f73657474696e67732f77636d2f64657369676e732f696e74656c2f75732f656e2f696d616765732f7265736f75726365732f7072696e746c6f676f2e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#ig_expand=3707,3729,3724,3708,6143&amp;text=mm256_sllv\" title=\"Intel® Intrinsics Guide\">Intel® Intrinsics Guide</a></div><div class=\"message_embed_description\">Intel® Intrinsics Guide includes C-style functions that provide access to other instructions without writing assembly code.</div></div></div>",
        "id": 435485880,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1714090435
    },
    {
        "content": "<p>Yes Cranelift doesn't currently have support for per-lane shifts, much SIMD support comes from WebAssembly's simd instruction set which also doesn't have this instruction</p>",
        "id": 435485983,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714090499
    },
    {
        "content": "<p>that being said I don't think anyone would be opposed to adding such an instruction</p>",
        "id": 435486002,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714090514
    },
    {
        "content": "<p>Ok, I guess I have to get my hands dirty then</p>",
        "id": 435486145,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1714090623
    },
    {
        "content": "<p>One thing perhaps worth pointing out is AFAIK there's very few, if any, instructions implemented for avx2, lots of stuff for avx and a few for avx512*, but if you're getting your hands dirty a few things may need to be plumbed around for avx2</p>",
        "id": 435486198,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714090674
    },
    {
        "content": "<p>avx512 but not avx2? That's odd</p>",
        "id": 435486312,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1714090744
    },
    {
        "content": "<p>avx512 isn't exhaustively bound, only some special cases for a few instructions that have a single-instruction equivalent in avx512 but a larger fallback with older pocessors</p>",
        "id": 435486805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1714091114
    }
]