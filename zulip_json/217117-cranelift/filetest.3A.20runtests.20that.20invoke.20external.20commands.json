[
    {
        "content": "<p>I’m currently investigating what it would take to make runtests work on this <a href=\"#narrow/stream/217117-cranelift/topic/zkASM.20backend\">zkasm architecture backend</a> that we’re prototyping in cranelift. As far as I can tell currently the only supported family of runtests are the <code>cranelift_jit</code> based ones, is that correct? zkASM in particular is interesting in that runtests for it can be run on any host, but running those will require invoking an external process. Does that make sense, and would it be interesting to have this upstream (for e.g. qemu-based emulated tests for other architectures?)</p>",
        "id": 402481325,
        "sender_full_name": "nagisa",
        "timestamp": 1700144631
    },
    {
        "content": "<p>I'm not entirely sure on what's the best way to go about this, we already have qemu based tests for the reset of the architectures, but we run the whole testsuite in qemu instead of just calling out to it in cranelift run tests.</p>\n<p><code>test run</code> calls a bunch of stuff that migh not be useful for zkASM (i.e. using <code>cranelift-native</code> to figure out supported ISA flags). </p>\n<p>The closest thing that I can imagine would be <code>test interpreter</code> that, while it does not call an external process it does run on all arches regardless of the native ISA. So it might be a good way of doing things, creating a <code>test zkasm</code>. I'd like to know other peoples opinion on this is.</p>",
        "id": 402675253,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1700219969
    },
    {
        "content": "<p>Also, are you guys using <code>cranelift-jit</code>, or would that allow you to avoid adding support there?</p>",
        "id": 402675565,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1700220073
    },
    {
        "content": "<p>Getting zkasm into something that resembles a runnable state involves a couple more compilation steps from zkasm to PIL to polynomials which are then used by… an interpreter-like thing as far as I know. In that sense <code>cranelift-jit</code> which expects to produce machine code loadable into memory and immediately runnable is not a good match in multiple ways. Or perhaps my interpretation of it is wrong?</p>\n<p>(We’re currently also just targeting a nodejs-written prover, so modifying cranelift-jit to support running zkasm is not really feasible at this time)</p>",
        "id": 402709945,
        "sender_full_name": "nagisa",
        "timestamp": 1700231233
    },
    {
        "content": "<p>The interpret tests are interesting, I’ll look at those. Thank you for the pointer.</p>",
        "id": 402710191,
        "sender_full_name": "nagisa",
        "timestamp": 1700231308
    },
    {
        "content": "<p>In that case i think having a separate test runner might be the best idea. Similar to <code>test interpret</code>, doing it that way you shouldn't need to work around <code>cranelift-jit</code> or <code>cranelift-native</code> to get your tests running</p>\n<p>Note, you can still use the entire runtest suite, but just adding a different test declaration</p>",
        "id": 402710304,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1700231352
    },
    {
        "content": "<p>Thank you, that was very helpful!</p>",
        "id": 403191913,
        "sender_full_name": "nagisa",
        "timestamp": 1700493517
    }
]