[
    {
        "content": "<p>Hey !</p>\n<p>I'm implementing aarch64 comparison instructions for winch. So I've made a simple example to see what cranelift outputs, and I don't understand the use of <code>uxtb</code>. </p>\n<p>Where does it come from ?  I see some <code>uextend_maybe</code> in <code>cranelift/codegen/src/opts/icmp.isle</code>, but it seems to be used for nested comparisons.</p>\n<p>Why is it useful ? <code>cset</code> is not producing a byte</p>\n<p><a href=\"/user_uploads/15107/Qm0zmEUDKnTvfIVphoRzyDT6/Capture-d&eacute;cran-2024-07-25-&agrave;-09.58.09.png\">Capture-d&eacute;cran-2024-07-25-&agrave;-09.58.09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/Qm0zmEUDKnTvfIVphoRzyDT6/Capture-d&eacute;cran-2024-07-25-&agrave;-09.58.09.png\" title=\"Capture-d&eacute;cran-2024-07-25-&agrave;-09.58.09.png\"><img data-original-dimensions=\"2674x478\" src=\"/user_uploads/thumbnail/15107/Qm0zmEUDKnTvfIVphoRzyDT6/Capture-d&eacute;cran-2024-07-25-&agrave;-09.58.09.png/840x560.webp\"></a></div>",
        "id": 453881794,
        "sender_full_name": "Vulcain",
        "timestamp": 1721894781
    },
    {
        "content": "<p>From what I can see, there is simply no isle-pattern matching just icmp+uextend (there is one for select + uextend + icmp and brif + uextend + icmp) so it‘s lowered as two separate instructions</p>",
        "id": 453900335,
        "sender_full_name": "T0b1",
        "timestamp": 1721900568
    },
    {
        "content": "<p>It comes from this code: <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/cranelift/wasm/src/code_translator.rs#L3033\">https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/cranelift/wasm/src/code_translator.rs#L3033</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/cranelift/wasm/src/code_translator.rs#L3033\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d0da55ad8410c545fc84a9d28c9a708b54e9c5ac/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363637656337323930666565303233313435386365663035653838383739376139663762623262663231383237363865346664386636363935363334363636332f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/5d0d61602f2dfa5478ef120a86a9009d74ac56bb/cranelift/wasm/src/code_translator.rs#L3033\" title=\"wasmtime/cranelift/wasm/src/code_translator.rs at 5d0d61602f2dfa5478ef120a86a9009d74ac56bb · bytecodealliance/wasmtime\">wasmtime/cranelift/wasm/src/code_translator.rs at 5d0d61602f2dfa5478ef120a86a9009d74ac56bb · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 453907831,
        "sender_full_name": "Vulcain",
        "timestamp": 1721902166
    },
    {
        "content": "<p>Yes, because on the IR-Level, <code>icmp</code> produces an <code>i8</code><br>\n(missing in the docs for <code>icmp</code> but I assume it has the same semantics as <code>icmp_imm</code> which has a documented return type: &lt;<a href=\"https://docs.rs/cranelift-codegen/0.110.1/cranelift_codegen/ir/trait.InstBuilder.html#method.icmp_imm\">https://docs.rs/cranelift-codegen/0.110.1/cranelift_codegen/ir/trait.InstBuilder.html#method.icmp_imm</a>&gt;</p>",
        "id": 453984131,
        "sender_full_name": "T0b1",
        "timestamp": 1721922610
    },
    {
        "content": "<p>Ok, thank you <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 453984383,
        "sender_full_name": "Vulcain",
        "timestamp": 1721922699
    },
    {
        "content": "<p>Indeed, and <code>icmp</code> produces an <code>i8</code> because on x86 the SETcc instructions only set an 8-bit register (and leave the rest of the register unchanged) -- fairly frustrating but this was our compromise. In a perfect world and/or if we rework the x86 backend's lowering scheme somewhat we could probably eventually transition to i32 (or polymorphic any-int) results from icmp</p>",
        "id": 453993977,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721924534
    }
]