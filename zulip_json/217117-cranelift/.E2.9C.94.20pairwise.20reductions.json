[
    {
        "content": "<p>Hi!</p>\n<p>I'm trying to make LLVM produce wasm code that can enable lowering to FP pairwise add, the patch is here:<br>\n<a href=\"https://github.com/llvm/llvm-project/pull/93948\">https://github.com/llvm/llvm-project/pull/93948</a>. The patch would also change the shuffle patterns used to lower integer reductions, so I was wondering whether you're relying on the current LLVM behaviour for the <code>iadd_pairwise</code> operation?</p>\n<p>cheers,</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/pull/93948\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6315ded41a9f440e6cf6de64ab48a1d26a70d7c7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323231313765383235616539376636346661646338346530333361316233393533636136663966653762373961356330663137376264356332666361336539322f6c6c766d2f6c6c766d2d70726f6a6563742f70756c6c2f3933393438&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/pull/93948\" title=\"[TTI][WebAssembly] Pairwise reduction expansion by sparker-arm 路 Pull Request #93948 路 llvm/llvm-project\">[TTI][WebAssembly] Pairwise reduction expansion by sparker-arm 路 Pull Request #93948 路 llvm/llvm-project</a></div><div class=\"message_embed_description\">WebAssembly doesn't support horizontal operations nor does it have a way of expressing fast-math or reassoc flags, so runtimes are currently unable to use pairwise operations when generating code f...</div></div></div>",
        "id": 442731749,
        "sender_full_name": "Sam Parker",
        "timestamp": 1717578230
    },
    {
        "content": "<p>Given our abstraction level of wasm as opposed to llvm if llvm changes output then we should in theory still be able to run everything, the only risk we have is if a pattern changes and it falls off a \"fast path\" for a particular backend. In that case it probably depends a bit more concretely on what's changing here?</p>\n<p>For <code>iadd_pairwise</code> I don't think anything would be affected as we only use that for <code>*extadd_pairwise*</code> and <code>*dot*</code>, so I don't think it'd break that particular instruction (it's also private in the sense that it's a cranelift instruction and no wasm instruction has a directly lowering to it)</p>",
        "id": 442793142,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717595244
    },
    {
        "content": "<p>Put another way if LLVM changes output then that's mostly just more patterns for us to recognize. We don't have an overly large number of patterns so if output changes it'll probably slow down some code, but we can add more patterns to recover the speedup if necessary</p>",
        "id": 442793731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717595384
    },
    {
        "content": "<p>Good, sounds like the IR generation won't be affected then. I intend on changing the shuffle indices so they represent the combining of adjacent elements, whereas LLVM currently generates a combination of the top and bottom half of a vector. So, it may still affect backends if they currently perform pattern matching for int add reductions on the existing shuffle indices.</p>",
        "id": 442799262,
        "sender_full_name": "Sam Parker",
        "timestamp": 1717596634
    },
    {
        "content": "<p>indeed yeah!</p>\n<p>Most of our pattern-matches we currently are manually done and done on a case-by-case basis. We don't have a continuous benchmark suite we're looking at for example or source code like Rust and testing the output, all of our tests are wasm-to-clif or wasm-to-machine-code which wouldn't be affected by this</p>",
        "id": 442800455,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717596919
    },
    {
        "content": "<p>basically this probably would break something somewhere, but that's ok we can fix it as it arises!</p>",
        "id": 442800521,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1717596934
    },
    {
        "content": "<p>Ok, great. Thanks.</p>",
        "id": 442800754,
        "sender_full_name": "Sam Parker",
        "timestamp": 1717596981
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span> has marked this topic as resolved.</p>",
        "id": 468569652,
        "sender_full_name": "Notification Bot",
        "timestamp": 1725802997
    }
]