[
    {
        "content": "<p>stdsimd wants to support non power-of-two vector sizes, but Cranelift doesn't have support for this. Could this be added or is this too complex. For reference see <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1136\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/1136</a> and the pingbacks there.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1136\" style=\"background-image: url(https://avatars.githubusercontent.com/u/17426603?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/1136\" title=\"Please support non-2^N SIMD lane counts · Issue #1136 · bjorn3/rustc_codegen_cranelift\">Please support non-2^N SIMD lane counts · Issue #1136 · bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">The silicon that supports these more or less directly: GPUs handle Vec3s (f32x3 typically) all the time already. Arm SVE supports 384-bit width vector registers and is available Soon™. RISCVV will ...</div></div></div>",
        "id": 225603988,
        "sender_full_name": "bjorn3",
        "timestamp": 1612816622
    },
    {
        "content": "<p>Hmm -- this would be a nontrivial amount of work, and my first instinct is that it should be low-priority as it is still (it seems to me) a niche use-case not supported on <em>most</em> hardware we would run on today</p>",
        "id": 225637962,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1612837146
    },
    {
        "content": "<p>that said we can look at generalizing the vector types eventually (i.e. integer-parameterized types, rather than a fixed finite set of 32x4, 64x2, ...) if this need becomes more important</p>",
        "id": 225637997,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1612837196
    },
    {
        "content": "<p>This became pretty non-theoretical pretty quickly, someone else uses rustc with SPIR-V as a target and that uses and emits Vec3 types.</p>",
        "id": 227301232,
        "sender_full_name": "Jubilee",
        "timestamp": 1614013643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"356464\">@Jubilee</span> thinking about rust-gpu? If so, they're using their own rustc compiler backend implementation, which doesn't rely on cg_clif (or LLVM, for that matter). Thus there's no implied dependency on Cranelift in this particular case.</p>",
        "id": 227303360,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1614014369
    },
    {
        "content": "<p>yep, but it means that enforcing the vector length restriction in the compiler isn't really acceptable, since both have to use the same code path.</p>",
        "id": 227303590,
        "sender_full_name": "Jubilee",
        "timestamp": 1614014434
    },
    {
        "content": "<p>So it's not that cranelift has to support emitting that code, but that we can't promise that cg_clif doesn't have to cope with getting fed a f32x3 and then spitting it back in the user's face like an indignant baby during compilation.</p>",
        "id": 227304250,
        "sender_full_name": "Jubilee",
        "timestamp": 1614014674
    }
]