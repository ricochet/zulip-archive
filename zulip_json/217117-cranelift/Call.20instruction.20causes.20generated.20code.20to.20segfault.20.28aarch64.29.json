[
    {
        "content": "<p><a href=\"/user_uploads/15107/JCgB81XOtXpusbBVqY_Ae_l2/Screenshot-2023-11-29-at-03.11.50.png\">Screenshot-2023-11-29-at-03.11.50.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/JCgB81XOtXpusbBVqY_Ae_l2/Screenshot-2023-11-29-at-03.11.50.png\" title=\"Screenshot-2023-11-29-at-03.11.50.png\"><img src=\"/user_uploads/15107/JCgB81XOtXpusbBVqY_Ae_l2/Screenshot-2023-11-29-at-03.11.50.png\"></a></div><p>The minimum reproducible case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift</span>::<span class=\"n\">prelude</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">types</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Value</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ir</span>::<span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">AbiParam</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExtFuncData</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ExternalName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">InstBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">UserExternalName</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UserFuncName</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">isa</span>::<span class=\"n\">CallConv</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">settings</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Flags</span><span class=\"p\">},</span>\n<span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"p\">{</span><span class=\"n\">Linkage</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Module</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_object</span>::<span class=\"p\">{</span><span class=\"n\">ObjectBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ObjectModule</span><span class=\"p\">};</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Cranelift setup.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">object_module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cranelift_native</span>::<span class=\"n\">builder</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Error getting native ISA\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obj_builder</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">ObjectBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"program\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"n\">default_libcall_names</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">ObjectModule</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">obj_builder</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Some repeating patterns used in both fn0 and fn1.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">make_sig</span><span class=\"p\">(</span><span class=\"n\">params</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">returns</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Signature</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)).</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|&amp;</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)).</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">sig</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">init_entry_block</span><span class=\"p\">(</span><span class=\"n\">builder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Block</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">seal_block</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">block</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Function `succ(i32) -&gt; i32`.</span>\n<span class=\"w\">    </span><span class=\"c1\">// fn 0:0</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make_sig</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">object_module</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"succ\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig0</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">user</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">init_entry_block</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd_imm</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">val</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">object_module</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">define_function</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">func_id</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Function `main() -&gt; i32`.</span>\n<span class=\"w\">    </span><span class=\"c1\">// fn 0:1</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sig1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">make_sig</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">object_module</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"main\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig1</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span>::<span class=\"n\">with_name_signature</span><span class=\"p\">(</span><span class=\"n\">UserFuncName</span>::<span class=\"n\">user</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">sig1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Import fn0.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn0_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sig_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">sig0</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">func</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">declare_imported_user_function</span><span class=\"p\">(</span><span class=\"n\">UserExternalName</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">import_function</span><span class=\"p\">(</span><span class=\"n\">ExtFuncData</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">name</span>: <span class=\"nc\">ExternalName</span>::<span class=\"n\">user</span><span class=\"p\">(</span><span class=\"n\">name_ref</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">signature</span>: <span class=\"nc\">sig_ref</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">colocated</span>: <span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n\n<span class=\"w\">        </span><span class=\"n\">init_entry_block</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// This call instruction causes the generated code to segfault:</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call_inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">fn0_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">call_result</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">inst_results</span><span class=\"p\">(</span><span class=\"n\">call_inst</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">call_result</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"c1\">// Commenting the above and uncomment this line does not segfault:</span>\n<span class=\"w\">        </span><span class=\"c1\">// builder.ins().return_(&amp;[x]);</span>\n<span class=\"w\">        </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">object_module</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">define_function</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cranelift_codegen</span>::<span class=\"n\">Context</span>::<span class=\"n\">for_function</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">func_id</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obj_prod</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">object_module</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">obj_prod</span><span class=\"p\">.</span><span class=\"n\">emit</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">write_bytes_to_path</span><span class=\"p\">(</span><span class=\"s\">\"program.o\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">write_bytes_to_path</span><span class=\"p\">(</span><span class=\"n\">path</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">io</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">Write</span>::<span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Am I doing something wrong here or is this a bug?</p>",
        "id": 404768224,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701227588
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>This looks pretty much correct, I got this to run on my machine by changing the call instruction to call <code>u0:0</code> instead of <code>u0:1</code>, I think it's just recursing into <code>main</code> until the stack overflows.</p>",
        "id": 404856185,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701261701
    },
    {
        "content": "<p>Sorry, my mistake. Changing the call instruction to <code>u0:0</code> still results in segfault.<br>\n<a href=\"/user_uploads/15107/-hPfBorKWB3i1Wu336W8rSrP/Screenshot-2023-11-29-at-12.43.29.png\">Screenshot-2023-11-29-at-12.43.29.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/-hPfBorKWB3i1Wu336W8rSrP/Screenshot-2023-11-29-at-12.43.29.png\" title=\"Screenshot-2023-11-29-at-12.43.29.png\"><img src=\"/user_uploads/15107/-hPfBorKWB3i1Wu336W8rSrP/Screenshot-2023-11-29-at-12.43.29.png\"></a></div>",
        "id": 404856507,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701261814
    },
    {
        "content": "<p>Huh, weird, that works in my machine. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> Can you try disabling pointer authentication by adding a </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s\">\"sign_return_address\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"false\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 404857166,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262019
    },
    {
        "content": "<p>when building the ISA?</p>",
        "id": 404857186,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262027
    },
    {
        "content": "<p>I don't know if pointer authentication needs someting special to work</p>",
        "id": 404857274,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262064
    },
    {
        "content": "<p>I'm not sure what you meant by <code>isa.set(...)</code>, as there's no function <code>set</code> for <code>TargetIsa</code>. Could you clarify which line I'm supposed to add this in?</p>",
        "id": 404858302,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701262418
    },
    {
        "content": "<p>Right, sorry, it's in the ISABuilder, so something along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cranelift_native</span>::<span class=\"n\">builder</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Error getting native ISA\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">isa</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s\">\"sign_return_address\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"false\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">isa</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isa</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">flags</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 404858439,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262451
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/X41O36pXqBiu0UIXUS3Di8dg/Screenshot-2023-11-29-at-12.55.49.png\">Screenshot-2023-11-29-at-12.55.49.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/X41O36pXqBiu0UIXUS3Di8dg/Screenshot-2023-11-29-at-12.55.49.png\" title=\"Screenshot-2023-11-29-at-12.55.49.png\"><img src=\"/user_uploads/15107/X41O36pXqBiu0UIXUS3Di8dg/Screenshot-2023-11-29-at-12.55.49.png\"></a></div><p>It doesn't generate pointer auth anymore but it still segfaults. I suspect it's something wrong with my linking process.</p>",
        "id": 404859100,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701262603
    },
    {
        "content": "<p>could you run it under lldb/gdb to check where it's crashing?</p>",
        "id": 404859393,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262664
    },
    {
        "content": "<p>Oh, also we could test with a PIE executable, not sure if that helps</p>",
        "id": 404860257,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262845
    },
    {
        "content": "<p>Try using these flags</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">flags_builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">flags_builder</span><span class=\"p\">.</span><span class=\"n\">enable</span><span class=\"p\">(</span><span class=\"s\">\"is_pic\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">flags_builder</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 404860366,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701262871
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/jCBd4RDURPrF4FYVm4Qs8M9p/Screenshot-2023-11-29-at-13.04.35.png\">Screenshot-2023-11-29-at-13.04.35.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/jCBd4RDURPrF4FYVm4Qs8M9p/Screenshot-2023-11-29-at-13.04.35.png\" title=\"Screenshot-2023-11-29-at-13.04.35.png\"><img src=\"/user_uploads/15107/jCBd4RDURPrF4FYVm4Qs8M9p/Screenshot-2023-11-29-at-13.04.35.png\"></a></div><p>Clang crashed on linking in this case</p>",
        "id": 404861359,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701263131
    },
    {
        "content": "<p>That is weird! Could you send me that binary, or run <code>objdump -Dr</code> on it?</p>",
        "id": 404861581,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701263197
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/IPgJWW9Xech-V-vUzw3d6LwB/Screenshot-2023-11-29-at-13.07.00.png\">Screenshot-2023-11-29-at-13.07.00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/IPgJWW9Xech-V-vUzw3d6LwB/Screenshot-2023-11-29-at-13.07.00.png\" title=\"Screenshot-2023-11-29-at-13.07.00.png\"><img src=\"/user_uploads/15107/IPgJWW9Xech-V-vUzw3d6LwB/Screenshot-2023-11-29-at-13.07.00.png\"></a></div>",
        "id": 404861677,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701263225
    },
    {
        "content": "<p>(although i think that is probably unrelated to the main issue)</p>",
        "id": 404861698,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701263231
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/A4UkHr3r3aG0QZkWmw-8Bk0a/program.o\">program.o</a><br>\nthe program</p>",
        "id": 404861730,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701263243
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/HTRbLMu6Fuu0f4QJzPFMsQ_Z/program.o\">program.o</a><br>\nAlso this is the emitted object without enabling <code>is_pic</code> flag</p>",
        "id": 404861901,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701263291
    },
    {
        "content": "<p>These all look okay to me. Could you try running the non PIC version under a debugger, and check where it crashes?</p>",
        "id": 404866028,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701264630
    },
    {
        "content": "<p>I think the linker error under the PIC might be unrelated, although probably something to follow up after</p>",
        "id": 404866095,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701264654
    },
    {
        "content": "<p>Unfortunateley I don't have a Mac to be able to run these examples</p>",
        "id": 404866204,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701264688
    },
    {
        "content": "<p>It was fine on my x64 laptop, so it's probably a M-chip specific problem</p>",
        "id": 404866362,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701264734
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/snNdtNPi4Oj9bGI0Cv-GPH4i/Screenshot-2023-11-29-at-13.33.27.png\">Screenshot-2023-11-29-at-13.33.27.png</a><br>\nthis is the output on lldb</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/snNdtNPi4Oj9bGI0Cv-GPH4i/Screenshot-2023-11-29-at-13.33.27.png\" title=\"Screenshot-2023-11-29-at-13.33.27.png\"><img src=\"/user_uploads/15107/snNdtNPi4Oj9bGI0Cv-GPH4i/Screenshot-2023-11-29-at-13.33.27.png\"></a></div>",
        "id": 404866597,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701264814
    },
    {
        "content": "<p>I don't have much more time to look at this today, sorry! Would you be able to figure out where that invalid load is coming from? We have one load instruction in the main function, is it that one? Or does it happen before?</p>",
        "id": 404906549,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701275850
    },
    {
        "content": "<p>That's ok. Thanks for your help</p>",
        "id": 404975783,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701304209
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/F1r9pKQSLi_TtzZDK3rKjb1O/Screenshot-2023-11-30-at-00.29.57.png\">Screenshot-2023-11-30-at-00.29.57.png</a><br>\nThe executable seem to segfault on the instruction <code>blr x2</code>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/F1r9pKQSLi_TtzZDK3rKjb1O/Screenshot-2023-11-30-at-00.29.57.png\" title=\"Screenshot-2023-11-30-at-00.29.57.png\"><img src=\"/user_uploads/15107/F1r9pKQSLi_TtzZDK3rKjb1O/Screenshot-2023-11-30-at-00.29.57.png\"></a></div>",
        "id": 404976285,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701304435
    },
    {
        "content": "<p>Some interesting results. I borrowed a M1 Mac, it has <code>clang 14.0.3</code> instead of 15.</p>\n<p>Compiling with <code>is_pic</code> and linking with <code>clang</code> makes the executable work without issue. </p>\n<p>Compiling without <code>is_pic</code> crashes in the dynamic linker before getting to <code>main</code>. I also tried  to compile that binary with <code>clang -fno-pie ./program.o</code>, which led to the following warnings:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ld</span>: <span class=\"nc\">warning</span>: <span class=\"o\">-</span><span class=\"n\">no_pie</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">deprecated</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">targeting</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">OS</span><span class=\"w\"> </span><span class=\"n\">versions</span>\n<span class=\"n\">ld</span>: <span class=\"nc\">warning</span>: <span class=\"o\">-</span><span class=\"n\">no_pie</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">arm64</span>\n</code></pre></div>\n<p>So I'm not sure compiling without <code>is_pic</code> for Mac ARM machines is a valid configuration</p>",
        "id": 405098801,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701344352
    },
    {
        "content": "<p>I'm going to try to install clang 15 to reproduce the issue you were having with <code>is_pic</code></p>",
        "id": 405098846,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701344372
    },
    {
        "content": "<p>Hmm, compiling with clang-15 worked here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 405100314,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701344920
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/Gu49OVlBaR8ncI6rjYSSCOmv/Screenshot-2023-11-30-at-11.54.21.png\">Screenshot-2023-11-30-at-11.54.21.png</a><br>\nCan you try linking with <code>ld</code>? I think it's the problem of <code>ld</code> here not <code>clang</code>'s invocation of it.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/Gu49OVlBaR8ncI6rjYSSCOmv/Screenshot-2023-11-30-at-11.54.21.png\" title=\"Screenshot-2023-11-30-at-11.54.21.png\"><img src=\"/user_uploads/15107/Gu49OVlBaR8ncI6rjYSSCOmv/Screenshot-2023-11-30-at-11.54.21.png\"></a></div>",
        "id": 405101395,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701345303
    },
    {
        "content": "<p>It didn't seem to crash:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">m1</span><span class=\"o\">@</span><span class=\"n\">ab850359</span><span class=\"o\">-</span><span class=\"n\">a1b4</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">fa7</span><span class=\"o\">-</span><span class=\"mi\">85</span><span class=\"n\">ab</span><span class=\"o\">-</span><span class=\"n\">da6c63f0c56d</span><span class=\"w\"> </span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">ld</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"n\">arm64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">macos_version_min</span><span class=\"w\"> </span><span class=\"mf\">14.0.0</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"n\">ld</span>: <span class=\"nc\">dynamic</span><span class=\"w\"> </span><span class=\"n\">executables</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">dylibs</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">link</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">libSystem</span><span class=\"p\">.</span><span class=\"n\">dylib</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">architecture</span><span class=\"w\"> </span><span class=\"n\">arm64</span>\n</code></pre></div>",
        "id": 405101616,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701345391
    },
    {
        "content": "<p>Would you be able to try with an older xcode version?</p>",
        "id": 405101723,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701345438
    },
    {
        "content": "<p>I wonder if this an issue only on newer linkers</p>",
        "id": 405101791,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701345463
    },
    {
        "content": "<p>Also, do you have an alternate linker such as lld available? Using it also worked for me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">m1</span><span class=\"o\">@</span><span class=\"n\">ab850359</span><span class=\"o\">-</span><span class=\"n\">a1b4</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">fa7</span><span class=\"o\">-</span><span class=\"mi\">85</span><span class=\"n\">ab</span><span class=\"o\">-</span><span class=\"n\">da6c63f0c56d</span><span class=\"w\"> </span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">fuse</span><span class=\"o\">-</span><span class=\"n\">ld</span><span class=\"o\">=</span><span class=\"n\">lld</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">program</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"n\">Homebrew</span><span class=\"w\"> </span><span class=\"n\">clang</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"mf\">15.0.7</span>\n<span class=\"n\">Target</span>: <span class=\"nc\">arm64</span><span class=\"o\">-</span><span class=\"n\">apple</span><span class=\"o\">-</span><span class=\"n\">darwin23</span><span class=\"p\">.</span><span class=\"mf\">1.0</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">model</span>: <span class=\"nc\">posix</span>\n<span class=\"n\">InstalledDir</span>: <span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">homebrew</span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">llvm</span><span class=\"o\">@</span><span class=\"mi\">15</span><span class=\"o\">/</span><span class=\"n\">bin</span>\n<span class=\"w\"> </span><span class=\"s\">\"/opt/homebrew/opt/llvm@15/bin/ld64.lld\"</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">demangle</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">dynamic</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"n\">arm64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">platform_version</span><span class=\"w\"> </span><span class=\"n\">macos</span><span class=\"w\"> </span><span class=\"mf\">14.0.0</span><span class=\"w\"> </span><span class=\"mf\">14.0.0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">syslibroot</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Library</span><span class=\"o\">/</span><span class=\"n\">Developer</span><span class=\"o\">/</span><span class=\"n\">CommandLineTools</span><span class=\"o\">/</span><span class=\"n\">SDKs</span><span class=\"o\">/</span><span class=\"n\">MacOSX14</span><span class=\"p\">.</span><span class=\"n\">sdk</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">program</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">lSystem</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">homebrew</span><span class=\"o\">/</span><span class=\"n\">Cellar</span><span class=\"o\">/</span><span class=\"n\">llvm</span><span class=\"o\">@</span><span class=\"mi\">15</span><span class=\"o\">/</span><span class=\"mf\">15.0.7</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">clang</span><span class=\"o\">/</span><span class=\"mf\">15.0.7</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">darwin</span><span class=\"o\">/</span><span class=\"n\">libclang_rt</span><span class=\"p\">.</span><span class=\"n\">osx</span><span class=\"p\">.</span><span class=\"n\">a</span>\n<span class=\"n\">m1</span><span class=\"o\">@</span><span class=\"n\">ab850359</span><span class=\"o\">-</span><span class=\"n\">a1b4</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">fa7</span><span class=\"o\">-</span><span class=\"mi\">85</span><span class=\"n\">ab</span><span class=\"o\">-</span><span class=\"n\">da6c63f0c56d</span><span class=\"w\"> </span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">out</span>\n<span class=\"n\">m1</span><span class=\"o\">@</span><span class=\"n\">ab850359</span><span class=\"o\">-</span><span class=\"n\">a1b4</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"n\">fa7</span><span class=\"o\">-</span><span class=\"mi\">85</span><span class=\"n\">ab</span><span class=\"o\">-</span><span class=\"n\">da6c63f0c56d</span><span class=\"w\"> </span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"o\">%</span>\n</code></pre></div>",
        "id": 405102373,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701345650
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/4PTiYe-2u_0fKQeZN7B4tbdu/Screenshot-2023-11-30-at-12.09.06.png\">Screenshot-2023-11-30-at-12.09.06.png</a><br>\nI have this error here with both LLVM15's lld and LLVM17's</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/4PTiYe-2u_0fKQeZN7B4tbdu/Screenshot-2023-11-30-at-12.09.06.png\" title=\"Screenshot-2023-11-30-at-12.09.06.png\"><img src=\"/user_uploads/15107/4PTiYe-2u_0fKQeZN7B4tbdu/Screenshot-2023-11-30-at-12.09.06.png\"></a></div>",
        "id": 405104056,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701346164
    },
    {
        "content": "<p>Ok using ld64.lld works</p>",
        "id": 405104749,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701346409
    },
    {
        "content": "<p>Thanks a lot for the help</p>",
        "id": 405104761,
        "sender_full_name": "Leslie Kerman",
        "timestamp": 1701346418
    },
    {
        "content": "<p>hmm, i think that would point it to being an issue with the version that apple ships in the latest xcode. Or alternatively they no longer accepting something we are producing</p>",
        "id": 405104885,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1701346453
    }
]