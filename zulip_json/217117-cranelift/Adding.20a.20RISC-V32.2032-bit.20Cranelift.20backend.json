[
    {
        "content": "<p>Hi! Just to preface this, I’m a complete compiler newbie.</p>\n<p>I was wondering if there might be value in adding a RISC-V 32-bit (RISCV32) backend to Cranelift. Since a <code>Riscv64Backend</code> already exists, I’m assuming it could be adapted to generate RV32 binaries. However, I’d like to confirm whether a dedicated 32-bit backend might actually produce more efficient binaries. </p>\n<p>If so, I’ve been exploring the source code, and <a href=\"https://gist.github.com/nihalpasham/8301c865df690f5f293d93643f2efe8b\">here is my initial plan</a>. I’d appreciate it if someone could take a look and let me know if this approach seems reasonable.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/nihalpasham/8301c865df690f5f293d93643f2efe8b\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/nihalpasham/8301c865df690f5f293d93643f2efe8b\" title=\"Plan for Building a Backend in Cranelift\">Plan for Building a Backend in Cranelift</a></div><div class=\"message_embed_description\">Plan for Building a Backend in Cranelift. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 480029252,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1730456992
    },
    {
        "content": "<p>Just double-checking to avoid potential overlaps or gotchas – does it make sense to add a 32-bit RISC-V backend to Cranelift?</p>",
        "id": 480270140,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1730601567
    },
    {
        "content": "<p>I don't speak for the rest of cranelift folks by any means, but at least personally I'd love to see a 32-bit backend for Cranelift for risc-v. It's perhaps worth cautioning though that this is going to be a relatively significant undertaking since there is no preexisting 32-bit backend that's complete (there's a 32-bit \"pulley\" backend but it's not fleshed out yet).</p>\n<p>Some of the things you'll have to grapple with are:</p>\n<ul>\n<li>Lowering 64-bit operations into 32-bit operations</li>\n<li>Ideally handling deduplication with riscv64 rules since riscv32 is so similar to riscv64</li>\n<li>Tests and such for 128-bit values won't work well on a 32-bit architecture due to how the backends are written right now (the intermediate <code>ValueRegs</code> type only supports 2 registers, not the 4 needed for riscv32)</li>\n</ul>\n<p>Those are some things off the top of my head but it's probably not a complete list. We've talked in Cranelift about features to make things like this easier in the past, such as better target-specific legalization support to lower, for example, 64-bit operations to 32-bit operations in the mid-end instead of the backend. That work never finished though and has large-ish remaining open questions. I say this as an example of open-ended design work that doesn't already have an answer in Cranelift and would probably want to be fleshed out along the way.</p>\n<p>To be clear though I don't say this to dissuade you, I'd still at least personally love to see this! If you'd like to continue to pursue this though what I might recommend is to attend a Cranelift meeting (they happen weekly on Wednesdays) and we can chat more about it. For example we might want to figure out how to review your work to get it all landed as well (it's hard to get a whole backend in one go). The review part may be sort of hard since cranelift folks are stretched pretty thin right now though.</p>",
        "id": 480276425,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730607743
    },
    {
        "content": "<p>Thank you for the detailed insights! I was thinking it might be simpler to start with a 32-bit backend for Cranelift that supports only up to 32-bit types (ints, floats, atomics) and excludes Rust’s higher bit types, such as <code>u64</code>, <code>f64</code>, and <code>AtomicI64</code>, as part of an initial implementation. Unsupported types could trigger a compiler error, making the backend’s limitations clear. I hope this approach is acceptable.</p>\n<p>I’d also be interested in joining the Cranelift meeting to discuss this further. Is there a way for me to add myself to the invite?</p>\n<p>P.S. supporting types with higher bit precision at a higher level could simplify the introduction of additional backends, like <code>Arm-Thumb2</code>, without overcomplicating the backend itself.</p>",
        "id": 480280244,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1730611625
    },
    {
        "content": "<p>I'd also love to see a RISC-V 32 bit backend! I have some time to review PR's but not as much as I once had.</p>\n<p>If we can find a way to lower the 64 bit instructions to 32 bit instructions in the mid end, I think we can share a lot of rules with the RISC-V 64 backend with minimal changes. But doing that looks like its going to be hard. It would also solve the 128bit operations problem.</p>\n<p>I think we can reuse pretty much all of the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst/encode.rs\">instruction encodings</a> that I recently started moving into a separate file. That file isn't complete, but it should help out.</p>\n<p>Starting with just supporting 32bit ops in the backend seems like a good idea.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst/encode.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c471830f896403f5c73cc50ce4a2e22580d1a27c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653839373238323530636664386430333336613462623732666131613235303231626435613730653338633233373030343431306235346238313064613332342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst/encode.rs\" title=\"wasmtime/cranelift/codegen/src/isa/riscv64/inst/encode.rs at main · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/riscv64/inst/encode.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 480299848,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1730632968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/217117-cranelift/topic/Adding.20a.20RISC-V32.2032-bit.20Cranelift.20backend/near/480299848\">said</a>:</p>\n<blockquote>\n<p>I think we can reuse pretty much all of the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst/encode.rs\">instruction encodings</a> that I recently started moving into a separate file. That file isn't complete, but it should help out.</p>\n</blockquote>\n<p>My current plan is to begin with the base instruction set, RV32I, and progressively add the <code>mfac</code> extensions. Most of the <code>encode.rs</code> content should be reusable, as it already includes R, I, and S-type encodings. For RISCV32I, I guess I would only need to add the remaining types: B, U, and J.</p>\n<p>My understanding of the instruction formats is as follows:</p>\n<p><a href=\"/user_uploads/15107/O-F-AoNvy5JXcKn1QjKqs3Na/275CE856-BE94-4269-A490-55B94382A560.jpg\">275CE856-BE94-4269-A490-55B94382A560.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/O-F-AoNvy5JXcKn1QjKqs3Na/275CE856-BE94-4269-A490-55B94382A560.jpg\" title=\"275CE856-BE94-4269-A490-55B94382A560.jpg\"><img data-original-dimensions=\"733x368\" src=\"/user_uploads/thumbnail/15107/O-F-AoNvy5JXcKn1QjKqs3Na/275CE856-BE94-4269-A490-55B94382A560.jpg/840x560.webp\"></a></div><p>Quick question - I am assuming RV64I and RV32I share the same instruction formats and a very similar base instruction set architecture (ISA). Should <code>encode.rs</code> in riscv64 also include B, U, J formats when it’s complete.</p>\n<blockquote>\n<p>Starting with just supporting 32bit ops in the backend seems like a good idea.</p>\n</blockquote>\n<p>Thank you for clarifying. <span aria-label=\"folded hands\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"folded hands\">:folded_hands:</span></p>",
        "id": 480305130,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1730638186
    },
    {
        "content": "<p>Yeah, the instruction formats are the same, they just aren't present in <code>encode.rs</code> since that is a fairly recent addition, and I haven't had the time to migrate the rest of the instruction formats to that file.</p>",
        "id": 480309682,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1730642549
    },
    {
        "content": "<blockquote>\n<p>I was thinking it might be simpler to start with a 32-bit backend for Cranelift that supports only up to 32-bit types</p>\n</blockquote>\n<p>Makes sense to me!</p>\n<blockquote>\n<p>Is there a way for me to add myself to the invite?</p>\n</blockquote>\n<p>There's a bit more info <a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\">here</a> but tl;dr; is DM Chris Fallin on Zulip</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7e7f85d968dde27e024601fdb0b5bb67daa5f0b9/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396461616434656434663433626135346232336335636638633361616361323631343731303162616462393034633565343039383933613062306430386561662f62797465636f6465616c6c69616e63652f6d656574696e6773&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\" title=\"meetings/cranelift at main · bytecodealliance/meetings\">meetings/cranelift at main · bytecodealliance/meetings</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/meetings development by creating an account on GitHub.</div></div></div>",
        "id": 480312104,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730644726
    },
    {
        "content": "<p>Nick owns the calendar event now fwiw (fitzgen on zulip). And +1 to the above in general; have more thoughts I’ll try to write out later</p>",
        "id": 480328327,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730658562
    },
    {
        "content": "<p>To add a bit more: the tracking issue for this is <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8768\">#8768</a>, and last time this came up I left <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8768#issuecomment-2159475308\">a comment</a> that also links four previous times I braindumped a bit on the general state of things for adding new backends</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8768\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d8b10afd0da7a0a5aae91d206cb74d4c36dd5ed3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313636396665663736623433373132373732643438363937623864633861633135396338373837336462663738333764623466323331653731346431323333302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38373638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8768\" title=\"riscv32imac no-std support for wasmtime · Issue #8768 · bytecodealliance/wasmtime\">riscv32imac no-std support for wasmtime · Issue #8768 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">error: Wasmtime is being compiled for an architecture that it does not support. If this architecture is one you would like to see supported you may file an issue on Wasmtime's issue tracker: https:...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8768#issuecomment-2159475308\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d8b10afd0da7a0a5aae91d206cb74d4c36dd5ed3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313636396665663736623433373132373732643438363937623864633861633135396338373837336462663738333764623466323331653731346431323333302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38373638&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8768#issuecomment-2159475308\" title=\"riscv32imac no-std support for wasmtime · Issue #8768 · bytecodealliance/wasmtime\">riscv32imac no-std support for wasmtime · Issue #8768 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">error: Wasmtime is being compiled for an architecture that it does not support. If this architecture is one you would like to see supported you may file an issue on Wasmtime's issue tracker: https:...</div></div></div>",
        "id": 480333174,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730662986
    },
    {
        "content": "<p>In this case in particular I think there is a strong argument for reusing almost all of the encoding machinery. I wonder even how close we could get to \"64-bitness is a backend option\", and share the backend altogether? Then essentially we disable all rules that assume 64-bit registers under that flag (and replace them with a lowering in midend as suggested above). Might need a little more parameterization around things like constants but if we can pull it off, that'd be more maintainable than the duplication implied by separate riscv32/riscv64 backends, IMHO</p>",
        "id": 480333281,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730663077
    },
    {
        "content": "<p>I think that might be doable, I'm going to have a quick peek at our current rules to see which cases are incompatible, but I expect that as long as we don't ever see 128/64bit ops it might not be too bad</p>",
        "id": 480339746,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1730669302
    },
    {
        "content": "<p>Quick question—are <code>MInst</code> variants (defined in inst.isle) meant to strictly represent instruction formats for the target ISA, or is there more to it? I was reviewing the RV64 implementation and noticed several variants using the same instruction format along with some pseudo-instructions. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>I-type<span class=\"w\"> </span>Layout:\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"m\">0</span>-------6-7-------11-12------14-15------19-20------------------31\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>Opcode<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">   </span>rd<span class=\"w\">     </span><span class=\"p\">|</span><span class=\"w\">  </span>width<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">   </span>rs1<span class=\"w\">    </span><span class=\"p\">|</span><span class=\"w\">     </span>Offset<span class=\"o\">[</span><span class=\"m\">11</span>:0<span class=\"o\">]</span><span class=\"w\">    </span><span class=\"p\">|</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>The<span class=\"w\"> </span>I-type<span class=\"w\"> </span>Instruction<span class=\"w\"> </span>Format<span class=\"w\"> </span>i.e.<span class=\"w\"> </span>uses<span class=\"w\"> </span>one<span class=\"w\"> </span>register<span class=\"w\"> </span>source,<span class=\"w\"> </span>one<span class=\"w\"> </span>immediate<span class=\"w\"> </span>and<span class=\"w\"> </span>a<span class=\"w\"> </span>destination<span class=\"w\"> </span>register.\n<span class=\"w\">    </span><span class=\"o\">(</span>AluRRImm12\n<span class=\"w\">      </span><span class=\"o\">(</span>alu_op<span class=\"w\"> </span>AluOPRRI<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>rd<span class=\"w\"> </span>WritableReg<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>rs<span class=\"w\"> </span>Reg<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>imm12<span class=\"w\"> </span>Imm12<span class=\"o\">))</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>Loads<span class=\"w\"> </span>use<span class=\"w\"> </span>the<span class=\"w\"> </span>I-type<span class=\"w\"> </span>Instruction<span class=\"w\"> </span>Format.\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>Each<span class=\"w\"> </span>load<span class=\"w\"> </span>instruction<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>RV32I<span class=\"w\"> </span>takes<span class=\"w\"> </span>two<span class=\"w\"> </span>operands\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>-<span class=\"w\"> </span>A<span class=\"w\"> </span>destination<span class=\"w\"> </span>register<span class=\"w\"> </span><span class=\"o\">(</span>e.g.,<span class=\"w\"> </span>rd<span class=\"o\">)</span>,<span class=\"w\"> </span>where<span class=\"w\"> </span>the<span class=\"w\"> </span>data<span class=\"w\"> </span>will<span class=\"w\"> </span>be<span class=\"w\"> </span>loaded.\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>-<span class=\"w\"> </span>A<span class=\"w\"> </span>base<span class=\"w\"> </span>register<span class=\"w\"> </span><span class=\"o\">(</span>e.g.,<span class=\"w\"> </span>rs1<span class=\"o\">)</span><span class=\"w\"> </span>and<span class=\"w\"> </span>an<span class=\"w\"> </span>immediate<span class=\"w\"> </span>offset,<span class=\"w\"> </span>which<span class=\"w\"> </span>together<span class=\"w\"> </span>specify<span class=\"w\"> </span>the<span class=\"w\"> </span>memory<span class=\"w\"> </span>address<span class=\"w\"> </span>to<span class=\"w\"> </span>load<span class=\"w\"> </span>from.\n<span class=\"w\">    </span><span class=\"o\">(</span>Load\n<span class=\"w\">      </span><span class=\"o\">(</span>rd<span class=\"w\"> </span>WritableReg<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>op<span class=\"w\"> </span>LoadOP<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>flags<span class=\"w\"> </span>MemFlags<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>from<span class=\"w\"> </span>AMode<span class=\"o\">))</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>Uses<span class=\"w\"> </span>the<span class=\"w\"> </span>I-type<span class=\"w\"> </span>Instruction<span class=\"w\"> </span>Format.<span class=\"w\"> </span>In<span class=\"w\"> </span>non-immediate<span class=\"w\"> </span>CSR<span class=\"w\"> </span>instructions<span class=\"w\"> </span><span class=\"o\">(</span>CSRRW,<span class=\"w\"> </span>CSRRS,<span class=\"w\"> </span>CSRRC<span class=\"o\">)</span>,<span class=\"w\"> </span>rs1<span class=\"w\"> </span>is<span class=\"w\"> </span>used<span class=\"w\"> </span>to<span class=\"w\"> </span>specify\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>the<span class=\"w\"> </span>register<span class=\"w\"> </span>with<span class=\"w\"> </span>the<span class=\"w\"> </span>value<span class=\"w\"> </span>to<span class=\"w\"> </span>write.\n<span class=\"w\">    </span><span class=\"o\">(</span>CsrReg\n<span class=\"w\">      </span><span class=\"o\">(</span>op<span class=\"w\"> </span>CsrRegOP<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>rd<span class=\"w\"> </span>WritableReg<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>rs<span class=\"w\"> </span>Reg<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>csr<span class=\"w\"> </span>CSR<span class=\"o\">))</span>\n\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>Uses<span class=\"w\"> </span>the<span class=\"w\"> </span>I-type<span class=\"w\"> </span>Instruction<span class=\"w\"> </span>Format.<span class=\"w\"> </span>In<span class=\"w\"> </span>immediate<span class=\"w\"> </span>CSR<span class=\"w\"> </span>instructions<span class=\"w\"> </span><span class=\"o\">(</span>CSRRWI,<span class=\"w\"> </span>CSRRSI,<span class=\"w\"> </span>CSRRCI<span class=\"o\">)</span>,<span class=\"w\"> </span>rs1<span class=\"w\"> </span>is<span class=\"w\"> </span>replaced<span class=\"w\"> </span>by<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"m\">5</span>-bit\n<span class=\"w\">    </span><span class=\"p\">;;</span><span class=\"w\"> </span>immediate<span class=\"w\"> </span>value.\n<span class=\"w\">    </span><span class=\"o\">(</span>CsrImm\n<span class=\"w\">      </span><span class=\"o\">(</span>op<span class=\"w\"> </span>CsrImmOP<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>rd<span class=\"w\"> </span>WritableReg<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>imm<span class=\"w\"> </span>UImm5<span class=\"o\">)</span>\n<span class=\"w\">      </span><span class=\"o\">(</span>csr<span class=\"w\"> </span>CSR<span class=\"o\">))</span>\n</code></pre></div>\n<p>In short, how should I read <code>MInst</code> (just for my understanding)</p>\n<p>Note: I have added my comments to the above just to highlight my point.</p>",
        "id": 481107506,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1730981907
    },
    {
        "content": "<p>MInst is a bit of a mish-mash but one of the main guiding principles of it is how shapes affect register allocation. FOr example <code>AluRRImm12</code> has a destination and source register while <code>CsrImm</code> doesn't (I think?). </p>\n<p>Overall though it's sort of what works best in the ISLE code, afaik there's not a hard-and-fast rule one way or another</p>",
        "id": 481145072,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730993327
    },
    {
        "content": "<p>yes, definitely that, and also emission. Think of the base case as \"every inst is separate\" and then we group together instructions that are all the same except for details we can plumb through, like opcode bits</p>",
        "id": 481155053,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730996398
    },
    {
        "content": "<p>Quick question: The prelude_lower.isle file contains an internal extractor named has_type. I was trying to find its corresponding Rust implementation in the generated <a href=\"http://isle-riscv64.rs\">isle-riscv64.rs</a> file in the build-out directory but couldn’t locate it. Am I missing something?</p>\n<p>from prelude_lower.isle</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Extract</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"n\">along</span><span class=\"w\"> </span><span class=\"n\">the</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">well</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">provide</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">require</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">widthof</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">inst</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 482339971,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1731575095
    },
    {
        "content": "<p>If I understand correctly, internal extractors don’t actually exist (in the sense that they dont generate rust code); they simply map to external extractors. In this case, <code>has_type</code> maps to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"n\">inst</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>where <code>result_type</code> itself is an internal extractor that maps to <code>first_result</code>, which is the actual external extractor:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Extract</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">first_result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">first_result</span><span class=\"w\"> </span><span class=\"n\">first_result</span><span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Extract</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Inst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"w\">           </span><span class=\"p\">(</span><span class=\"n\">first_result</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Am I right? I’m still not sure, however, if <code>and</code> is a constructor or an ISLE keyword.</p>",
        "id": 482364088,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1731582423
    },
    {
        "content": "<p>For the <code>and</code> part, I believe it’s part of the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md#reference-isle-language-grammar\">ISLE language grammar</a> i.e. it's part of the syntax.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md#reference-isle-language-grammar\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6e521346898880e27e26280ae6ceb0782b8ea822/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383937383032383863633936326235643636613031323131666632643630653861643132346133376264663166613065356630643637626430343931663764362f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md#reference-isle-language-grammar\" title=\"wasmtime/cranelift/isle/docs/language-reference.md at main · bytecodealliance/wasmtime\">wasmtime/cranelift/isle/docs/language-reference.md at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 482401804,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1731593716
    },
    {
        "content": "<p>Did I get this right or am I way off in my understanding?</p>",
        "id": 482406581,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1731594919
    },
    {
        "content": "<p>Yep, that's all correct! internal extractors are expanded (inlined) in-place; and <code>and</code> is a language keyword. All of this results in a call to the <code>value_type</code> and <code>first_result</code> Rust function implementations</p>",
        "id": 482442468,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731604276
    },
    {
        "content": "<p>Quick question: Does it make sense to introduce a new <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d5ee2a04d9b11ed93909d6da1a8f9186780237a4/cranelift/codegen/meta/src/shared/immediates.rs#L5\">immediate type</a> (e.g., Imm32) specifically for 32-bit architectures? From my understanding, it seems like we could just use <code>Imm64</code>. I wanted to double-check if I’m overlooking anything here.</p>\n<p>For instance, could we use <code>Imm64</code> in such cases without running into any issues? The following are some examples of what I have in mind:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">u32_from_imm64</span><span class=\"w\">  </span><span class=\"c1\">// Extract a u32 from an Imm64</span>\n<span class=\"n\">u64_uextend_imm64</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">u32_uextend_imm64</span><span class=\"w\">  </span><span class=\"c1\">// Zero-extend an Imm64 to a u32</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/d5ee2a04d9b11ed93909d6da1a8f9186780237a4/cranelift/codegen/meta/src/shared/immediates.rs#L5\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7474645ff0bf7c2650885dd867e076e04f0b31d0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343836663964323036343539386238376462313337356636313066313766653632396666666131386630373132373861353238643237643832626330636465312f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d5ee2a04d9b11ed93909d6da1a8f9186780237a4/cranelift/codegen/meta/src/shared/immediates.rs#L5\" title=\"wasmtime/cranelift/codegen/meta/src/shared/immediates.rs at d5ee2a04d9b11ed93909d6da1a8f9186780237a4 · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/meta/src/shared/immediates.rs at d5ee2a04d9b11ed93909d6da1a8f9186780237a4 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 486652781,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1733564045
    },
    {
        "content": "<p>Imm64 is mostly used for iconst, which should keep accepting 64bit immediates even on 32bit platforms. If you do iconst.i64 on a 32bit target it would just store both halves of the immediate in separate registers.</p>",
        "id": 486706385,
        "sender_full_name": "bjorn3",
        "timestamp": 1733607190
    },
    {
        "content": "<p>Sorry for the delay; I got pulled into something else.</p>\n<p>My plan is to start with RV32I (just the base instruction set), without support for types or values larger than 32 bits (i.e., no 64-bit or higher). For this target, I assume it’s acceptable to explicitly error out if we encounter an <code>iconst.i64</code>, correct?</p>\n<p>As I understand it, lowering an <code>Iconst Opcode</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/4ca5174546518d20780aad72770717531c633fd3/cranelift/codegen/src/machinst/isle.rs#L417\">results in emitting</a> an 8-byte value into an in-memory constant pool. Would it make sense to add a 32-bit variant to <code>VCodeConstantData</code> (like a VCodeConstantData::U32), or is that unnecessary?</p>\n<p>P.S. Compiler engineering is quite new to me, so please let me know if I’m overlooking something obvious.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/4ca5174546518d20780aad72770717531c633fd3/cranelift/codegen/src/machinst/isle.rs#L417\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3eefadd7d0a63c80e2ec58d11a01acf615d96da7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636364666130646339356531393565356266376436663838656138626633366162626462656662626233623937346431666638613863643866303461393539392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/4ca5174546518d20780aad72770717531c633fd3/cranelift/codegen/src/machinst/isle.rs#L417\" title=\"wasmtime/cranelift/codegen/src/machinst/isle.rs at 4ca5174546518d20780aad72770717531c633fd3 · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/machinst/isle.rs at 4ca5174546518d20780aad72770717531c633fd3 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 487169492,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1733811241
    },
    {
        "content": "<p>Sure, a 32-bit constant-pool entry could make sense. It might be worth looking at how other compilers handle loading arbitrary 32-bit values too: for example, is it possible to do it with two immediate-form instructions (load high bits then OR in low bits or similar)? Usually RISC ISAs try to make this fast without going to dcache via a memory load and so have a \"somewhat canonical\" way of loading constants</p>",
        "id": 487316544,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733855402
    },
    {
        "content": "<p>(To explore that, it might be worthwhile writing some C functions like <code>uint32_t foo() { return 0x12345678; }</code> and compiling with a RISC-V 32 toolchain, or using Compiler Explorer (<a href=\"http://godbolt.org\">godbolt.org</a>, add <code>--target riscv32-unknown-linux-gnu</code> to the Clang or rustc command line))</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://godbolt.org\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4bf336f7597f851df0732b12f8d4b7b383508ec8/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://godbolt.org\" title=\"Compiler Explorer\">Compiler Explorer</a></div><div class=\"message_embed_description\">Compiler Explorer is an interactive online compiler which shows the assembly output of compiled C++, Rust, Go (and many more) code.</div></div></div>",
        "id": 487316770,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733855469
    },
    {
        "content": "<p>You might want to look at the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst.isle#L1833-L1903\">rules</a> we have for the RV64 backend, the immediate loading instructions are exactly the same ones used in RV32.</p>\n<p>This now has a lot of rules but it essentially boils down: A combination of<code>addi</code> and/or <code>lui</code> can produce all values up to 32bits, and for larger stuff we use a load from a constant pool unless we find a shorter pattern.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst.isle#L1833-L1903\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9dd2fbe1669fdd1e48117eee6d2770345a5938e3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666534643034666435613734656237396536383462383239383931323862356235366532623365616437326164303265333336353731343534366464303161342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst.isle#L1833-L1903\" title=\"wasmtime/cranelift/codegen/src/isa/riscv64/inst.isle at main · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/riscv64/inst.isle at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 487350766,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1733869340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217117-cranelift/topic/Adding.20a.20RISC-V32.2032-bit.20Cranelift.20backend/near/487316770\">said</a>:</p>\n<blockquote>\n<p>(To explore that, it might be worthwhile writing some C functions like <code>uint32_t foo() { return 0x12345678; }</code> and compiling with a RISC-V 32 toolchain, or using Compiler Explorer (<a href=\"http://godbolt.org\">godbolt.org</a>, add <code>--target riscv32-unknown-linux-gnu</code> to the Clang or rustc command line))</p>\n</blockquote>\n<p>thanks for this. I'll try this.</p>",
        "id": 488026108,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1733899364
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/channel/217117-cranelift/topic/Adding.20a.20RISC-V32.2032-bit.20Cranelift.20backend/near/487350766\">said</a>:</p>\n<blockquote>\n<p>You might want to look at the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/isa/riscv64/inst.isle#L1833-L1903\">rules</a> we have for the RV64 backend, the immediate loading instructions are exactly the same ones used in RV32.</p>\n<p>This now has a lot of rules but it essentially boils down: A combination of<code>addi</code> and/or <code>lui</code> can produce all values up to 32bits, and for larger stuff we use a load from a constant pool unless we find a shorter pattern.</p>\n</blockquote>\n<p>I am primarily reusing the RV64 backend, with the main difference being that I’m starting with support for RV32I (excluding all standard extensions). My focus is on creating a bare-minimum RV32 backend to avoid the complexity of handling the entire architecture upfront and to submit a small, manageable PR.</p>\n<p>A working implementation can be found <a href=\"https://github.com/nihalpasham/wasmtime/blob/af0547afe5bdf88da9afe995f7e6839442128c6f/cranelift/codegen/src/isa/riscv32/inst.isle#L835\">here</a>. It reuses the addi and lui rules (both part of the RV32I set) from the RV64 implementation. However, when it came to loading from a constant pool, I used a <a href=\"https://github.com/nihalpasham/wasmtime/blob/af0547afe5bdf88da9afe995f7e6839442128c6f/cranelift/codegen/src/machinst/isle.rs#L418\">workaround</a>, which I have yet to fully test.</p>\n<p>From your explanation, it looks like the RV64 approach to loading constants might be sufficient to RV32 as well.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nihalpasham/wasmtime/blob/af0547afe5bdf88da9afe995f7e6839442128c6f/cranelift/codegen/src/isa/riscv32/inst.isle#L835\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/644e3b05fad6e508defe2944d1226dc2ec1024c4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656439633430646431653631656161626237393835316161643863303562313466306565616662393964326631386265316639323131303337366566393361302f6e6968616c70617368616d2f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nihalpasham/wasmtime/blob/af0547afe5bdf88da9afe995f7e6839442128c6f/cranelift/codegen/src/isa/riscv32/inst.isle#L835\" title=\"wasmtime/cranelift/codegen/src/isa/riscv32/inst.isle at af0547afe5bdf88da9afe995f7e6839442128c6f · nihalpasham/wasmtime\">wasmtime/cranelift/codegen/src/isa/riscv32/inst.isle at af0547afe5bdf88da9afe995f7e6839442128c6f · nihalpasham/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to nihalpasham/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nihalpasham/wasmtime/blob/af0547afe5bdf88da9afe995f7e6839442128c6f/cranelift/codegen/src/machinst/isle.rs#L418\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/644e3b05fad6e508defe2944d1226dc2ec1024c4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656439633430646431653631656161626237393835316161643863303562313466306565616662393964326631386265316639323131303337366566393361302f6e6968616c70617368616d2f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nihalpasham/wasmtime/blob/af0547afe5bdf88da9afe995f7e6839442128c6f/cranelift/codegen/src/machinst/isle.rs#L418\" title=\"wasmtime/cranelift/codegen/src/machinst/isle.rs at af0547afe5bdf88da9afe995f7e6839442128c6f · nihalpasham/wasmtime\">wasmtime/cranelift/codegen/src/machinst/isle.rs at af0547afe5bdf88da9afe995f7e6839442128c6f · nihalpasham/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to nihalpasham/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 488036085,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1733903817
    }
]