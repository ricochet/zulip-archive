[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span> I couldn't review your AArch64 atomics changes when you posted them, but I could recently and I have a couple of comments.<br>\nMost of them are based on the Wasm memory model presented in the OOSPLA 2019 paper <em>Weakening WebAssembly</em> that has been <a href=\"https://github.com/WebAssembly/threads/blob/master/papers/oopsla2019.pdf\">included</a> in the threading proposal repository.<br>\nThe main point is that even though the proposal overview <a href=\"https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses\">states</a> that atomic memory accesses are sequentially consistent, what's actually meant according to my understanding is that they are sequentially consistent <strong>for data race-free programs</strong> (similar to the situation in C/C++), which is a weaker statement. As a result, most of the explicit memory barriers in the Cranelift implementation are unnecessary and should be covered by load-acquires and store-releases instead. In fact the paper suggests precisely that in the table of mappings in section 7.<br>\nIgnoring that issue for a moment, the code generated for atomic loads and particularly atomic stores seems problematic - either because the barriers are not in the right places or there isn't enough of them (cf. the table in the paper). For example, in the case of the atomic store the constituent store could be observed before another one preceding it in program order.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/threads/blob/master/papers/oopsla2019.pdf\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/threads/blob/master/papers/oopsla2019.pdf\" title=\"WebAssembly/threads\">WebAssembly/threads</a></div><div class=\"message_embed_description\">Threads and Atomics in WebAssembly. Contribute to WebAssembly/threads development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/threads/blob/master/proposals/threads/Overview.md#atomic-memory-accesses\" title=\"WebAssembly/threads\">WebAssembly/threads</a></div><div class=\"message_embed_description\">Threads and Atomics in WebAssembly. Contribute to WebAssembly/threads development by creating an account on GitHub.</div></div></div>",
        "id": 208398480,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1598651262
    },
    {
        "content": "<p>Of course, using load-acquires and store-releases will reduce the size of the generated code as well.</p>",
        "id": 208398795,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1598651512
    },
    {
        "content": "<p>There are also a couple of minor issues - one of them is that the move in the middle of the loop generated for the <code>Xchg</code> variant of <code>Inst::AtomicRMW</code> is unnecessary.</p>",
        "id": 208399455,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1598652053
    },
    {
        "content": "<p>Another, admittedly nitpick, concerns the printing of the new <code>Inst</code> variants - most of the time we try to follow the disassembly specified by the architecture (though there are things that are out of its scope, e.g. literals). I understand that for <code>Inst::AtomicRMW</code> and <code>Inst::AtomicCAS</code> that's quite inconvenient, but at least in the case of <code>Inst::AtomicLoad</code> and <code>Inst::AtomicStore</code> it shouldn't be a problem, especially if we switch to the proper instructions.</p>",
        "id": 208400967,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1598653306
    },
    {
        "content": "<p>I also have a question about the <code>Inst::AtomicCAS</code> variant - based on the comments, it was a deliberate decision to do the masking inside the loop. Why? Furthermore, I can't see the reason for the move in the 64-bit case.</p>",
        "id": 208404811,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1598656797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300050\">@Anton Kirilov</span> thanks for the info.  Sorry for delayed response; I was on vacation last week.</p>",
        "id": 209265438,
        "sender_full_name": "Julian Seward",
        "timestamp": 1599464011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300050\">@Anton Kirilov</span> ignoring for now the question of efficiency, you mention that \"the code generated for atomic loads and particularly atomic stores seems problematic - either because the barriers are not in the right places or there isn't enough of them (cf. the table in the paper).\"<br>\nI looked at the table (I assume you mean the table at the start of section 7) but fail to understand what you mean.<br>\nCan you say more precisely what the problem is, and how you think the barrier placement should be adjusted so as to fix it?</p>",
        "id": 209265600,
        "sender_full_name": "Julian Seward",
        "timestamp": 1599464154
    },
    {
        "content": "<p>Hello, since the code is using explicit memory barriers right now, it is essentially equivalent to the ARMv7 entries in the table. So, the requirement for atomic stores is to have a double barrier, i.e. a barrier both before and after the store. Right now Cranelift generates only a barrier after.</p>",
        "id": 209279682,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1599474078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span> Just checking if you've seen my reply.</p>",
        "id": 210007329,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1600091412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300050\">@Anton Kirilov</span> yes, thanks.  Doing at least a minimal fix is on my todo list.</p>",
        "id": 210044047,
        "sender_full_name": "Julian Seward",
        "timestamp": 1600107814
    },
    {
        "content": "<p>FYI, I've now picked this up.</p>",
        "id": 246084494,
        "sender_full_name": "Sam Parker",
        "timestamp": 1626350865
    }
]