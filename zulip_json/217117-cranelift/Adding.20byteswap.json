[
    {
        "content": "<p>Hey folks, I work on a networking project that currently rolls its own JIT for x64/aarch64, and am taking a look into swapping that over to use Cranelift instead. The main issue I'm seeing currently is a performance issue with the generated machine code - byteswaps are common in this space (endinaness conversion) and Cranelift <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1092\">has an open item</a> but no existing support. I was thinking of working on adding a new opcode (Bswap, and possibly also Bswap32 and Bswap16) to the IR, and adding support to the codegen backends for emitting x64 and aarch64 bswap instructions. Would that be the right way to go about this, and is the project generally accepting of that sort of pull request?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1092\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e2bc542423aca141c306b718854e2d8815ee2874\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373137343731633930383439623636636438366635396661643835346561346335376531313238656662373437363066353431393939633132316565316630652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31303932)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1092\" title=\"Add bswap instruction · Issue #1092 · bytecodealliance/wasmtime\">Add bswap instruction · Issue #1092 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">There is an x86 instruction for this.</div></div></div>",
        "id": 303937985,
        "sender_full_name": "Evan Thompson",
        "timestamp": 1665702269
    },
    {
        "content": "<p>Yeah, having a <code>bswap</code> instruction would be useful, and there are other cranelift users that need them! cg_clif a rust compiler that uses cranelift has to do some <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/87bbc2d4135b0ee8c5fd5f33db7411029b5484e5/src/intrinsics/mod.rs#L634-L715\">interesting... codegen</a> to get around this.</p>\n<p>It'd be great to have native support for that!</p>\n<p>In general we support a generic instruction and have a polymorphic type, so for example, we only have one <code>band</code> but it has an implicit type operator that we can pass, (or it can be inferred) that makes it usable for many types, (i.e. <code>band.i16</code> or <code>band.i64</code>, etc..)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/87bbc2d4135b0ee8c5fd5f33db7411029b5484e5/src/intrinsics/mod.rs#L634-L715\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bab382e22f1f2296dbeba40480649601d3613e55\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326433643063306433386562363539333933376237376561636339633763336637663863643239336533666634386438343937393936323037626437343966652f626a6f726e332f72757374635f636f646567656e5f6372616e656c696674)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/87bbc2d4135b0ee8c5fd5f33db7411029b5484e5/src/intrinsics/mod.rs#L634-L715\" title=\"rustc_codegen_cranelift/mod.rs at 87bbc2d4135b0ee8c5fd5f33db7411029b5484e5 · bjorn3/rustc_codegen_cranelift\">rustc_codegen_cranelift/mod.rs at 87bbc2d4135b0ee8c5fd5f33db7411029b5484e5 · bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 303938516,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1665702656
    },
    {
        "content": "<p>If you need any help adding that to cranelift let me know, and I can guide you through the process.</p>",
        "id": 303938830,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1665702873
    },
    {
        "content": "<p>Yeah, when trying out Cranelift I wrote some similarly-weird codegen to work around the lack of <code>bswap</code>, but it ended up being ~3x-5x slower than having a real bswap instruction at runtime, which is a real bummer in network code that's doing a bunch of host-to-network-order conversions. Thanks for the advice about the typing! I'll take a stab at this and reach out when I have questions</p>",
        "id": 303939772,
        "sender_full_name": "Evan Thompson",
        "timestamp": 1665703523
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Good luck!</p>",
        "id": 303939800,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1665703548
    },
    {
        "content": "<p>Ok, continuing this discussion from a few weeks ago, here's a PR to add bswap: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\">https://github.com/bytecodealliance/wasmtime/pull/5147</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/dda91564db363893426f0fc2f77b0f0a4ccc85a5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656330373936646161363931353964626366623836363334386361323462346137346437646233306235353162386636636530623832366462363864333661352f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35313437)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5147\" title=\"cranelift: Add Bswap instruction (#1092) by 11evan · Pull Request #5147 · bytecodealliance/wasmtime\">cranelift: Add Bswap instruction (#1092) by 11evan · Pull Request #5147 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Adds Bswap to the Cranelift IR. Implements the Bswap instruction in the x64 and aarch64 codegen backends. Cranelift users can now:\nbuilder.ins().bswap(value)\n\nto get a native byteswap instruction.\n...</div></div></div>",
        "id": 306516554,
        "sender_full_name": "Evan Thompson",
        "timestamp": 1666896827
    },
    {
        "content": "<p>This is my first time contributing to the project, please let me know who should be added as reviewers etc. I added unit tests for instruction encoding, and did some manual testing with a toy program and x86_64 and aarch64 machines to verify the bswap instruction worked. Please let me know what other test coverage might be expected</p>",
        "id": 306516801,
        "sender_full_name": "Evan Thompson",
        "timestamp": 1666896912
    },
    {
        "content": "<p>We'll take a look -- thanks a bunch for this! In general for reviews we don't really assign, we just have enough people watching the incoming PRs that someone will pick it up. One of us will get to it soon!</p>",
        "id": 306517566,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1666897163
    },
    {
        "content": "<p>Awesome, thanks!</p>",
        "id": 306517759,
        "sender_full_name": "Evan Thompson",
        "timestamp": 1666897226
    }
]