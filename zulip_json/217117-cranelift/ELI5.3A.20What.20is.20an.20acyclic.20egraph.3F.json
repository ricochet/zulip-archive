[
    {
        "content": "<p>I've been looking at the egraph RFC and the surrounding work lately; I think I have an okay understanding of most concepts involved, but one thing I'm not clear on is what acyclic-egraphs are, and how exactly they're supposed to be useful.</p>\n<p>I get the general idea (we make the graph thing acyclic somehow, do constant-folding more aggressively, and generally apply equivalences \"in-flight\" during the merging passes), but I still have trouble wrapping my head around it.</p>\n<p>Some questions I have:</p>\n<ul>\n<li>Does the \"acyclic\" part just refer to the fact there are no parent pointers, or do we forbid cycles in the enode graphs as well (eg \"a\" and \"a + 0\")?</li>\n<li>The explanation in the RFC thread says \"Basically an ægraph contains eclasses as nodes where each node contains an enode, an enode and a parent-eclass pointer, or two parent-eclass pointers\"</li>\n<li>The RFC says \"Instead, we can find all equivalent forms of an expression node right when it is created, then refer to these equivalent forms as a group. Restricting the \"union\" (equivalence-merge) operation to just node creation time allows for a much simpler data structure.\" Does that mean you're not allowed to add unions between two eclasses, after the graph has already been created?</li>\n<li>Generally speaking, in aegraphs, what data do e-classes and e-nodes store? Eg if you had to write them as simplified Rust types?</li>\n<li>How does the optimization process go through an a-egraph? Are there different passes for eg load forwarding and DCE, or is it really everything at once?</li>\n</ul>\n<p>I'm not sure whether I'm hitting the mark with those questions. The whole concept of egraphs is fascinating and I'm especially interested in the idea of solving a bunch of optimizations at once with a forward pass by structuring your data really well.</p>",
        "id": 300240371,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663878535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"354194\">@Olivier FAURE</span> I just merged the initial implementation of our egraph crate, whose toplevel doc-comment hopefully answers more of your questions: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/egraph/src/lib.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/egraph/src/lib.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/egraph/src/lib.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2dd06fcb93d5a20be2d4bcdf1540965f4558f432\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306630303931613836366432616238393661633339633439623936396466303638613937306137323635663037613935636463313133633262383634636264312f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/egraph/src/lib.rs\" title=\"wasmtime/lib.rs at main · bytecodealliance/wasmtime\">wasmtime/lib.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 300240659,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1663878649
    },
    {
        "content": "<p>Well that was fast!</p>",
        "id": 300240726,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663878681
    },
    {
        "content": "<p>the next step, i.e. building the aegraph, rewriting it with rules, and elaborating out of it, exists in the draft PR that is linked from the RFC thread, and I'm (still) working on rebasing to the latest and cleaning it up, but it will be merged soon :-)</p>",
        "id": 300240765,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1663878698
    },
    {
        "content": "<blockquote>\n<p>Well that was fast!</p>\n</blockquote>\n<p>not really, the prototype was codeveloped with the RFC in my best effort at the \"the proposed work is feasible because it's already been done\" RFC style :-)</p>",
        "id": 300240963,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1663878775
    },
    {
        "content": "<p>So, looking at the code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">EClass</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// formats:</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// 00 | unused  (31 bits)         | NodeKey (31 bits)</span>\n<span class=\"w\">    </span><span class=\"c1\">// 01 | eclass_parent   (31 bits) | NodeKey (31 bits)</span>\n<span class=\"w\">    </span><span class=\"c1\">// 10 | eclass_parent_1 (31 bits) | eclass_parent_id_2 (31 bits)</span>\n<span class=\"w\">    </span><span class=\"n\">bits</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What is a parent in that context? Also, if an eclass has more than two parents, what happens? Are they stored with the two-parents form as a binary tree?</p>",
        "id": 300248151,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663881887
    },
    {
        "content": "<p>And how does an eclass store enodes in that implementation?</p>",
        "id": 300248288,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663881957
    },
    {
        "content": "<p>(This might be explained in the documentation, sorry if it is; I'm mostly skimming the file and giving stream-of-thoughts questions)</p>",
        "id": 300248388,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663881990
    },
    {
        "content": "<blockquote>\n<p>This might be explained in the documentation, sorry if it is</p>\n</blockquote>\n<p>Yes, I believe it should be; anything that's not, please feel free to submit PRs to update docs</p>",
        "id": 300249461,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1663882484
    },
    {
        "content": "<blockquote>\n<p>Each eclass id refers to a table entry that can be one of:</p>\n<ul>\n<li>A single enode;</li>\n<li>An enode and an earlier eclass id it is appended to;</li>\n<li>A \"union node\" with two earlier eclass ids.</li>\n</ul>\n</blockquote>\n<p>So, if I understand correctly, in this format eclasses are stored as cons-lists? With special nodes to mark equivalences?</p>\n<p>I guess I'm a bit confused by the use of the word \"parent\". For instance, if you have an egraph that only consists of five unrelated constants, that egraph would be stored as</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>eclass1    node=iconst(1)\neclass2    node=iconst(2) parent=eclass1\neclass3    node=iconst(3) parent=eclass2\n</code></pre></div>\n<p>Right? But the world \"parent\" implies a hierarchy between these three eclasses, even though they're \"parallel\", they're just stored in a linked list.</p>\n<p>Actually, I'm not sure the example above is right. When the documentation says \"An enode and an earlier eclass id it is appended to;\", it's not clear if that means \"an enode being added to an eclass\" or \"a new eclass with a single enode being added to a linked list of eclasses\". If it's the first, then my example above is wrong (but the use of the word \"parent\" is still confusing).</p>",
        "id": 300252246,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663884049
    },
    {
        "content": "<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>    eclass5    iconst(2)\n    eclass6    union(iadd(eclass2, eclass5), eclass4)\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>So in this snippet, is eclass6 supposed to be the second format of enode (01) or the third (10)? If it's the second, the use of the word \"union\" seems a bit confusing given that the explanation above uses \"union node\" to refer to the third type. If it's the third type, then shouldn't the snippet as follows?</p>\n<div class=\"codehilite\" data-code-language=\"plain\"><pre><span></span><code>    eclass5    iconst(2)\n    eclass6    iadd(eclass2, eclass5)\n    eclass7    union(eclass6, eclass4)\n</code></pre></div>",
        "id": 300252606,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663884244
    },
    {
        "content": "<p>Not a cons-list but a tree. \"Parent\" comes from that view</p>",
        "id": 300256638,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1663884734
    },
    {
        "content": "<p>I unfortunately don't have a lot of time to walk you through the code in detail now; the work is still in progress and the code and RFC will have to stand as they are; but if after reading and thinking you have specific questions I'm happy to answer some</p>",
        "id": 300256718,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1663884777
    },
    {
        "content": "<p>Right, no problem. Thanks for answering my questions!</p>",
        "id": 300257489,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1663885194
    },
    {
        "content": "<p>Okay, reading the egg crate, I think I understand better. \"Parent\" in the doc above means \"parent in the unionfind structure\", not \"parent in the dataflow graph\". That makes a lot more sense. (Though it's kinda confusing if you're not familiar with unionfind)</p>",
        "id": 300741922,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1664181556
    }
]