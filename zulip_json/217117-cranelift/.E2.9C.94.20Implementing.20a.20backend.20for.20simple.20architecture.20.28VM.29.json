[
    {
        "content": "<p>Hello,</p>\n<p>I am implementing a compiler for a <a href=\"https://git.ablecorp.us/AbleOS/holey-bytes\">VM</a> that runs on a niche operating system.</p>\n<p>The instructions are similar to ARM architecture and I already wrote a single-pass compiler. Still, the resulting code is comparatively slow (since every instruction matters on the VM). I started working on the Sea-Of-Nodes backend and got stuck on register allocation. At this point, I have 3 options:</p>\n<ol>\n<li>Try harder and come up with my own register allocator</li>\n<li>Use regalloc2</li>\n<li>Implement target ISA and use Cranelift</li>\n</ol>\n<p>I am tempted by 3. and I also saw <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7124\">this issue</a> that could be resolved. This would also make compiling to native easier for me.</p>\n<p>I guess the question is:</p>\n<ol>\n<li>How hard can 3. be and is it even a good idea compared to my other options? (I heard LLVM requires 20k sloc minimum to do this. I am hoping this is not the case with Cranelift.)</li>\n<li>Where can I find some resources on how to do this? (The issue I mentioned implies the code is the only source of truth, but maybe that's outdated?)</li>\n</ol>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://git.ablecorp.us/AbleOS/holey-bytes\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/62bbe7345d401b9bcd90a415838ca0920a13fe54/68747470733a2f2f6769742e61626c65636f72702e75732f617661746172732f3764626133386161646331353665643732333737363839636134656664393739&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://git.ablecorp.us/AbleOS/holey-bytes\" title=\"holey-bytes\">holey-bytes</a></div><div class=\"message_embed_description\">holey-bytes</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7124\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e524565aff6de6a773d27eadd4bf18db6ce33a0c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396239613466646166333832633939333637326262353432663962316535656435393031666665356365343637653030646237303738316439326234333066662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37313234&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7124\" title=\"Externally maintained cranelift backends · Issue #7124 · bytecodealliance/wasmtime\">Externally maintained cranelift backends · Issue #7124 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Today cranelift has a number of backends for traditional computer architectures: x86, aarch64, riscv64 and some others as well. It would be great if we could have many more, however adding ...</div></div></div>",
        "id": 470662171,
        "sender_full_name": "Jakub Dóka",
        "timestamp": 1726503588
    },
    {
        "content": "<blockquote>\n<p>heard LLVM requires 20k sloc minimum to do this. I am hoping this is not the case with Cranelift.</p>\n</blockquote>\n<p>The x86_64 backend is 18k, the arm64 one is 18k, the riscv64 one is 11k and the s390x one is 22k. All of these are complete enough for both wasmtime and rustc_codegen_cranelift to function. This includes floats, 128bit ints, atomics, thread local storage and simd. If you don't need any of these features, you can probably write a backend in a fair bit less code. (10k maybe? just a wild guess)</p>",
        "id": 470664138,
        "sender_full_name": "bjorn3",
        "timestamp": 1726504062
    },
    {
        "content": "<blockquote>\n<p>Where can I find some resources on how to do this? (The issue I mentioned implies the code is the only source of truth, but maybe that's outdated?)</p>\n</blockquote>\n<p>cranelift/isle/docs/language-reference.md has a description of the ISLE DSL we use for defining lowerings. (Some details may no longer be correct, but the high level overview is still correct.)</p>",
        "id": 470665204,
        "sender_full_name": "bjorn3",
        "timestamp": 1726504218
    },
    {
        "content": "<p>As for the rest of the backend, reading up on what other backends do and asking questions if something is unclear is probably the best option you have right now. There are not a whole lot of docs.</p>",
        "id": 470665588,
        "sender_full_name": "bjorn3",
        "timestamp": 1726504289
    },
    {
        "content": "<p>Okay, thanks for the leads <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>, I have decided to try and copy the RISCV backend from the <code>cranelift_codegen</code> to a crate in my project and to make it compile. I managed to generate ISLE, but some modules that RISCV uses like <code>machinst</code>, <code>abi</code>, and <code>result</code> are private, so I probably won't manage that. How useful would these modules be to me if they were to be made public?</p>",
        "id": 470914249,
        "sender_full_name": "Jakub Dóka",
        "timestamp": 1726563352
    },
    {
        "content": "<p>All types in the <code>result</code> module are re-exported at the root of cranelift_codegen. I'm not sure which <code>abi</code> module you mean. There is one in <code>machinst</code> and one in the <code>arch::riscv64</code> module. As for <code>machinst</code> it should in principle be useful, however it doesn't have the same level of stability as the rest of cranelift.</p>",
        "id": 470957441,
        "sender_full_name": "bjorn3",
        "timestamp": 1726574056
    },
    {
        "content": "<p>I can't actually implement <code>TargetIsa</code> outside of the <code>cranelift_codegen</code> because it uses <code>CompiledCodeBase&lt;Stencil&gt;</code> in the <code>fn compile_function</code>. This is a hard block, I might fork the Wasmtime for the time being and make the <code>machinst</code> public...</p>",
        "id": 470963301,
        "sender_full_name": "Jakub Dóka",
        "timestamp": 1726575798
    },
    {
        "content": "<p>After some trying, I determined this is too big of a chore to implement, bigger than just using the crane lift backend in addition to my own optimizing compiler if I end up compiling to native, I also already managed to use <code>regalloc2</code> so the problem is resolved for the time being, but thanx for help anyway!</p>",
        "id": 471764618,
        "sender_full_name": "Jakub Dóka",
        "timestamp": 1726846872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"756208\">Jakub Dóka</span> has marked this topic as resolved.</p>",
        "id": 471764628,
        "sender_full_name": "Notification Bot",
        "timestamp": 1726846876
    }
]