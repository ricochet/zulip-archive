[
    {
        "content": "<p>Is there any documentation for how StructArgument/StructReturn work and should be used? I'm a little unclear about when to use multiple arguments and multiple returns vs these aggregate AbiParams. Thanks! I've been really enjoying using cranelift so far :)</p>",
        "id": 448204581,
        "sender_full_name": "Noah Lev (camelid)",
        "timestamp": 1719800177
    },
    {
        "content": "<p>You will have to look up the abi specification document for your target and see if the type in question needs to be returned using a return pointer (=&gt; use pointer<code>StructReturn</code> as first argument and write the return value there) or using multiple registers (=&gt; use multiple returns). And similar for struct arguments. You can also look at how rustc lowers your type to llvm ir and reproduce this in clif ir.</p>",
        "id": 448315965,
        "sender_full_name": "bjorn3",
        "timestamp": 1719836948
    },
    {
        "content": "<p>Or alternatively you can take the relevant file at <a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/abi/call\">https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/abi/call</a> and try to reproduce the logic in there.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/abi/call\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6319d006f0109fec668554607c65bf2e7c97b1d6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316638663938316137623435393335633364663265393135303435353263393765393161346631643432356531333639353830626234363535643739303363302f727573742d6c616e672f72757374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_target/src/abi/call\" title=\"rust/compiler/rustc_target/src/abi/call at master · rust-lang/rust\">rust/compiler/rustc_target/src/abi/call at master · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust-lang/rust</div></div></div>",
        "id": 448316103,
        "sender_full_name": "bjorn3",
        "timestamp": 1719836988
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 448440635,
        "sender_full_name": "Noah Lev (camelid)",
        "timestamp": 1719869036
    },
    {
        "content": "<p>Not fully related, but are zero-sized stack slots allowed by cranelift? If not of course I can just not emit them, but I wanted to see if I can leave my code as-is</p>",
        "id": 448440767,
        "sender_full_name": "Noah Lev (camelid)",
        "timestamp": 1719869082
    },
    {
        "content": "<p>AFAIK Cranelift doesn't have any issues with zero-sized stack slots. If it does we should either fix it or add a verifier check for it.</p>",
        "id": 448558759,
        "sender_full_name": "bjorn3",
        "timestamp": 1719913869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/docs.20for.20StructArgument.2FStructReturn/near/448315965\">said</a>:</p>\n<blockquote>\n<p>You will have to look up the abi specification document for your target and see if the type in question needs to be returned using a return pointer (=&gt; use pointer<code>StructReturn</code> as first argument and write the return value there) or using multiple registers (=&gt; use multiple returns). And similar for struct arguments. You can also look at how rustc lowers your type to llvm ir and reproduce this in clif ir.</p>\n</blockquote>\n<p>Oh following up about this: Why does StructArgument require a size but StructReturn does not? And for both of them, I should use a pointer for the AbiParam's type?</p>",
        "id": 448689660,
        "sender_full_name": "Noah Lev (camelid)",
        "timestamp": 1719949456
    },
    {
        "content": "<p>StructReturn only changes the register in which the pointer is stored. StructArgument doesn't actually pass a pointer around, instead it copies an area of the given size pointed to by the pointer you pass as user to a specific location on the stack where the callee expects it.</p>",
        "id": 448797605,
        "sender_full_name": "bjorn3",
        "timestamp": 1719998482
    },
    {
        "content": "<p>Oh, so I should put the type of the StructArgument as a pointer but then it will automatically handle the copying? Do I then access the data through a <code>load</code> on the argument?</p>",
        "id": 448934586,
        "sender_full_name": "Noah Lev (camelid)",
        "timestamp": 1720035504
    },
    {
        "content": "<p>I'm just a bit unclear where the copied data ends up</p>",
        "id": 448934861,
        "sender_full_name": "Noah Lev (camelid)",
        "timestamp": 1720035608
    },
    {
        "content": "<p>Yes, the type of a StructArgument should be a pointer. Cranelift handles the copying automatically as part of the call instruction. The copied data ends up somewhere on the stack which is kept alive until the callee returns.</p>",
        "id": 448935398,
        "sender_full_name": "bjorn3",
        "timestamp": 1720035816
    }
]