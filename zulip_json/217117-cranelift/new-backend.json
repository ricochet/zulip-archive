[
    {
        "content": "<p>Thought I'd create  a stream for the new proposed backend, to continue on from irc</p>",
        "id": 188737298,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582296323
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> (Julian is not here yet).</p>",
        "id": 188748216,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1582302487
    },
    {
        "content": "<p>Hello! Looking forward to new-backend discussions here.</p>",
        "id": 188751677,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582304556
    },
    {
        "content": "<p>does the slide deck from a month or so ago still reflect the current state of work for the new backend? interested in staying abreast of its design and thinking about how we might fit in pattern match and replace DSLs for peephole opts and legalization etc</p>",
        "id": 188759257,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582308981
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@Nick Fitzgerald</span> , you're referring to the 2020-01-06 presentation? At a high level, yes, we're still moving in that direction, though there's been a lot of implementation and refinement since then!</p>\n<p>For raw data, you can see our in-progress side-branch at <a href=\"https://github.com/cfallin/cranelift\" target=\"_blank\" title=\"https://github.com/cfallin/cranelift\">https://github.com/cfallin/cranelift</a> (the interesting bits are in cranelift-codegen/src/{machinst,isa/arm64,isa/x64}), though we could (and will) do a better job of documenting the high-level structure once we've got our MVP (integer instruction set on ARM64, running Wasm) done.</p>\n<p>I'd be happy to talk more about how this might integrate with peephole / superoptimizer-type work, though!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cfallin/cranelift\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/216148?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cfallin/cranelift\" target=\"_blank\" title=\"cfallin/cranelift\">cfallin/cranelift</a></div><div class=\"message_embed_description\">Contribute to cfallin/cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 188760177,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582309642
    },
    {
        "content": "<p>thanks for the link! I'll add a topic to the next cranelift meeting's agenda.</p>\n<p>context is I'm going to help Jubi Taneja finish her research project to create a peephole optimizer for cranelift that is seeded with optimizations from souper that she started as an intern a couple summers ago. my hope is that once the new backend gets in place we can try and merge this in / rebase it on top</p>",
        "id": 188760752,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582309959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> thanks for this nice doc comment :)</p>\n<p><a href=\"https://github.com/cfallin/cranelift/blame/new-isa-def-2/cranelift-codegen/src/machinst/mod.rs#L1\" target=\"_blank\" title=\"https://github.com/cfallin/cranelift/blame/new-isa-def-2/cranelift-codegen/src/machinst/mod.rs#L1\">https://github.com/cfallin/cranelift/blame/new-isa-def-2/cranelift-codegen/src/machinst/mod.rs#L1</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cfallin/cranelift/blame/new-isa-def-2/cranelift-codegen/src/machinst/mod.rs#L1\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/216148?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cfallin/cranelift/blame/new-isa-def-2/cranelift-codegen/src/machinst/mod.rs#L1\" target=\"_blank\" title=\"cfallin/cranelift\">cfallin/cranelift</a></div><div class=\"message_embed_description\">Contribute to cfallin/cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 188763183,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582311583
    },
    {
        "content": "<p>For reference: <span class=\"user-mention\" data-user-id=\"253990\">@Nick Fitzgerald</span> is probably talking about <a href=\"https://github.com/jubitaneja/codegen\" target=\"_blank\" title=\"https://github.com/jubitaneja/codegen\">https://github.com/jubitaneja/codegen</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jubitaneja/codegen\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/6600596?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jubitaneja/codegen\" target=\"_blank\" title=\"jubitaneja/codegen\">jubitaneja/codegen</a></div><div class=\"message_embed_description\">Automatic peephole optimizer for Cranelift JIT compiler - jubitaneja/codegen</div></div></div>",
        "id": 188763249,
        "sender_full_name": "bjorn3",
        "timestamp": 1582311606
    },
    {
        "content": "<p>yes :)</p>",
        "id": 188763283,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582311621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@Nick Fitzgerald</span>  <a href=\"https://github.com/jubitaneja/codegen/blob/master/fn.rs\" target=\"_blank\" title=\"https://github.com/jubitaneja/codegen/blob/master/fn.rs\">https://github.com/jubitaneja/codegen/blob/master/fn.rs</a> this is auto-generated?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/jubitaneja/codegen/blob/master/fn.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/6600596?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/jubitaneja/codegen/blob/master/fn.rs\" target=\"_blank\" title=\"jubitaneja/codegen\">jubitaneja/codegen</a></div><div class=\"message_embed_description\">Automatic peephole optimizer for Cranelift JIT compiler - jubitaneja/codegen</div></div></div>",
        "id": 189006400,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582625785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> has 'clif-util compile' changed behaviour? It seems to be running code from <code>cranelift-codegen/meta/src/shared/legalize.rs</code> now?</p>",
        "id": 189016191,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582634857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> yes, that's right, I've wired (some) legalization passes into the new backend's pipeline now. Is it interfering with one of the new instructions you're adding?</p>",
        "id": 189036267,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582648961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> but there seems to be a difference between clif-util test and clif-util compile?</p>",
        "id": 189036593,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582649171
    },
    {
        "content": "<p>try <code>cargo r test filetests/vcode/arm64/bitops.clif</code> (works) <code>cargo r compile --target arm64 filetests/vcode/arm64/bitops.clif</code> (fails)</p>",
        "id": 189036683,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582649252
    },
    {
        "content": "<p>oh, I see -- I'll take a look. The wiring up of the new pipeline is still very much a work-in-progress so I may have missed something :-)</p>",
        "id": 189036916,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582649400
    },
    {
        "content": "<p>you might have to implement the ihsr+imm stuff, or turn off the bitrev legalisation for now</p>",
        "id": 189037462,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582649675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> I believe so, yes</p>",
        "id": 189044292,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582653896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> also <code>--set=opt_level=speed</code> doesn't work. In <code>cranelift-codegen/src/context.rs</code> <code>opt_level</code> is still <code>None</code>.</p>",
        "id": 189126282,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582732074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> : it seems that opt_level comes through the ISA flags, which I haven't plumbed through in any real way yet... thanks for the heads-up!</p>",
        "id": 189137679,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582738825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>  It also seems like the legalisation isn't working as intended, I'm still getting GlobalValue and IcmpImm through to the lower() functions</p>",
        "id": 189139336,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582739847
    },
    {
        "content": "<p>Yes, I was debugging this yesterday afternoon as part of wasmtime bringup; I'll try to work this out today</p>",
        "id": 189139426,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582739891
    },
    {
        "content": "<p>Cool, I saw that you were working on that. Let me know when there is something testable on wasmtime. I can try on my arm64 desktop</p>",
        "id": 189139531,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582739969
    },
    {
        "content": "<p>Will do!</p>",
        "id": 189139859,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582740124
    },
    {
        "content": "<p>I've been trying to compile some wasm with <code>clif-util wasm</code>, and I'm just stubbing stuff out as I go, to see what isn't implemented (stubbing them out usually with a mov rd, 0)</p>",
        "id": 189139956,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582740186
    },
    {
        "content": "<p>I'm using a hello world compiled with wasi-sdk, so I'm jumping into the deep end with interesting libc initialization bits; so far I know that the new backend is at least missing jump tables, and probably a few more details related to global values, and I haven't written any code to interpret the arm64 relocations yet so that should come in somewhere. But it seems it's not too far off</p>",
        "id": 189140395,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582740421
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> I have a function where RA takes 460s!</p>",
        "id": 189220416,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582815426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> wow, that's... impressive. @jseward and <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> are leading work on the regalloc crate -- we'd probably be interested in a test case (or at least a general description -- very long function, deeply nested control flow, too many overlapping live ranges, ...?)</p>",
        "id": 189234233,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582823901
    },
    {
        "content": "<p>Is Julian on holiday? Seems like he doesn't want to join zulip :P I see that there's a hot function <code>SortedRangeFragIxs::check</code> function which looks like it should (?) be enabled in debug only</p>",
        "id": 189234316,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582823967
    },
    {
        "content": "<p>Just pinged both on Matrix (they're both online)!</p>",
        "id": 189234434,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582824041
    },
    {
        "content": "<p>I saw that Benjamin added a <code>EpiloguePlaceholder</code>, I guess that's the new backends <code>FallthroughReturn</code></p>",
        "id": 189234599,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582824152
    },
    {
        "content": "<p><code>SortedRangeFragIxs::del</code> and <code>SortedRangeFragIxs::can_add</code> seem to be other hot functions. I changed <code>del</code> to use <code>with_capacity</code> instead of <code>new</code> for <code>res</code>, but it didn't seem to have much of an effect</p>",
        "id": 189235129,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582824521
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265780\">Joey Gouly</span> <a href=\"#narrow/stream/217117-cranelift/topic/new-backend/near/189234599\" title=\"#narrow/stream/217117-cranelift/topic/new-backend/near/189234599\">said</a>:</p>\n<blockquote>\n<p>I saw that Benjamin added a <code>EpiloguePlaceholder</code>, I guess that's the new backends <code>FallthroughReturn</code></p>\n</blockquote>\n<p>Yep, we decided this was a less confusing name.</p>",
        "id": 189235162,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582824546
    },
    {
        "content": "<p>In this test case <code>SortedRangeFragIxs::del</code> is called 21,902,029 times</p>",
        "id": 189236272,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582825291
    },
    {
        "content": "<p>Progress: new ARM64 backend has enough working to get through wasi libc init and print \"Hello world\"!</p>\n<div class=\"codehilite\"><pre><span></span>$  qemu-aarch64  target/aarch64-unknown-linux-gnu/release/wasmtime run ~/hello-world.wasm\nhello world\n</pre></div>",
        "id": 189357262,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582928832
    },
    {
        "content": "<p>It takes quite a lot of code to print hello world with libc, so that really says something!</p>",
        "id": 189358476,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582929698
    },
    {
        "content": "<p>welcome <span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span></p>",
        "id": 189586691,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583237384
    },
    {
        "content": "<p>Hi!</p>",
        "id": 189587786,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583238293
    },
    {
        "content": "<p>That's a big bit of CLIF.  Can I ask a couple questions about it?</p>",
        "id": 189587811,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583238321
    },
    {
        "content": "<p>So did you manage to reproduce the long compile time?</p>",
        "id": 189587813,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583238324
    },
    {
        "content": "<p>sure!</p>",
        "id": 189587818,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583238331
    },
    {
        "content": "<p>Not yet.  I spent all yesterday and this morning rewriting the allocator's core allocate-evict loop so as to remove a very stupid performance problem that exists in the current version (and which I'm sure is related to what you saw).</p>",
        "id": 189587904,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583238411
    },
    {
        "content": "<p>Now I'm trying to un-break it :-/</p>",
        "id": 189587915,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583238428
    },
    {
        "content": "<p>Q: (mostly for my curiousity): (1) what is that CLIF?  Where is it from?  and (2) do the existing allocator sources create a correct allocation for it, after 70 mins?</p>",
        "id": 189587975,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583238481
    },
    {
        "content": "<p>I don't know what function it is, but it's from a benchmark I wrote using the regex crate. Im not sure if it's correct, since I didn't run it (+ some arm64 functionality was stubbed out)</p>",
        "id": 189588224,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583238659
    },
    {
        "content": "<p>Ok.  Well, let me try to get this thing back on the road.  Then I'll have a look at the test case.</p>",
        "id": 189588333,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583238744
    },
    {
        "content": "<p>Trying it now.  So far, it's spending a lot of time in calculation of dominators</p>",
        "id": 189602389,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583248746
    },
    {
        "content": "<p>Were you using a debug or release build?</p>",
        "id": 189602429,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583248776
    },
    {
        "content": "<p>Release</p>",
        "id": 189602460,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583248801
    },
    {
        "content": "<p>Er, how do I get that?  (cd cranelift &amp;&amp; cargo build release) doesn't work</p>",
        "id": 189602625,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583248876
    },
    {
        "content": "<p>--release</p>",
        "id": 189602631,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583248882
    },
    {
        "content": "<p>you can also do <code>cargo run --release</code></p>",
        "id": 189602999,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583249094
    },
    {
        "content": "<p>Running now.  Roughly how big was the original function?  I am seeing tens of thousands of virtual registers coming into regalloc.</p>",
        "id": 189605381,
        "sender_full_name": "Julian Seward",
        "timestamp": 1583250691
    },
    {
        "content": "<p>I didn't find out what the original function was, just took the CLIF that was generated</p>",
        "id": 189605474,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583250747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/new-backend/near/189357262\" title=\"#narrow/stream/217117-cranelift/topic/new-backend/near/189357262\">said</a>:</p>\n<blockquote>\n<p>Progress: new ARM64 backend has enough working to get through wasi libc init and print \"Hello world\"!</p>\n<div class=\"codehilite\"><pre><span></span>$  qemu-aarch64  target/aarch64-unknown-linux-gnu/release/wasmtime run ~/hello-world.wasm\nhello world\n</pre></div>\n\n\n</blockquote>\n<p>I reproduced this natively on my arm64 desktop!</p>",
        "id": 189609838,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583253348
    }
]