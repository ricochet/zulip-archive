[
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168</a></p>\n<p>Cross posting from <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/17426603?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168\" title=\"Compile rustc using cg_clif · Issue #743 · bjorn3/rustc_codegen_cranelift\">Compile rustc using cg_clif · Issue #743 · bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">$ cd rustc_codegen_cranelift $ cargo build --release $ git clone https://github.com/rust-lang/rust.git $ cd rust $ git apply ../patches/* $ git apply - &lt;&lt;EOF diff --git a/src/bootstrap/bin/ru...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif\" style=\"background-image: url(https://zulip-avatars.s3.amazonaws.com/4715/realm/icon.png?version=2)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif\" title=\"rust-lang\">rust-lang</a></div><div class=\"message_embed_description\">rust-lang org</div></div></div>",
        "id": 202726576,
        "sender_full_name": "bjorn3",
        "timestamp": 1593714227
    },
    {
        "content": "<p>Depends on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">https://github.com/bytecodealliance/wasmtime/pull/1559</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1939\">https://github.com/bytecodealliance/wasmtime/pull/1939</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\" title=\"SystemV struct arguments by bjorn3 · Pull Request #1559 · bytecodealliance/wasmtime\">SystemV struct arguments by bjorn3 · Pull Request #1559 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn&#39;t have any way to implement this before. This is necessary to compile proc-macros using cg_...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1939\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1939\" title=\"Fix Switch for 128bit integers by bjorn3 · Pull Request #1939 · bytecodealliance/wasmtime\">Fix Switch for 128bit integers by bjorn3 · Pull Request #1939 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Fixes bjorn3/rustc_codegen_cranelift#757\nRequired by bjorn3/rustc_codegen_cranelift#743</div></div></div>",
        "id": 202726602,
        "sender_full_name": "bjorn3",
        "timestamp": 1593714239
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 202727401,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1593714605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> on x86 I assume?</p>",
        "id": 202784850,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1593768956
    },
    {
        "content": "<p>Wondering how hard it would be to try on my arm64 machine</p>",
        "id": 202784919,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1593768989
    },
    {
        "content": "<p>Yes I used x86_64. arm64 doesn't yet work with cg_clif. The aarch64 backend doesn't yet support 128bit integers. Those are used very extensively in the const eval part of rustc. In fact the last thing I had to solve before cg_clif could bootstrap ristc was adding 128bit support to cranelift_frontend::Switch.</p>",
        "id": 202785241,
        "sender_full_name": "bjorn3",
        "timestamp": 1593769247
    },
    {
        "content": "<p>Does cranelift not have legalisation for 128 bit integers?</p>",
        "id": 202785350,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1593769331
    },
    {
        "content": "<p>We do have some of it; it might be disabled for the aarch64 backend, though, not sure.</p>",
        "id": 202785416,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1593769407
    },
    {
        "content": "<p>No new style backends have the necessary legalizations enabled. They only enable a small subset.</p>",
        "id": 202786330,
        "sender_full_name": "bjorn3",
        "timestamp": 1593770075
    },
    {
        "content": "<p>Also for function parameters and calls the necessary legalizations are part of the abi handling for the old style backends.</p>",
        "id": 202786416,
        "sender_full_name": "bjorn3",
        "timestamp": 1593770131
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/08efcbd9d5638c3d1ff2989f00e65c22ddc3c803/cranelift/codegen/src/legalizer/boundary.rs#L465-L477\">https://github.com/bytecodealliance/wasmtime/blob/08efcbd9d5638c3d1ff2989f00e65c22ddc3c803/cranelift/codegen/src/legalizer/boundary.rs#L465-L477</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/08efcbd9d5638c3d1ff2989f00e65c22ddc3c803/cranelift/codegen/src/legalizer/boundary.rs#L465-L477\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/08efcbd9d5638c3d1ff2989f00e65c22ddc3c803/cranelift/codegen/src/legalizer/boundary.rs#L465-L477\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 202786498,
        "sender_full_name": "bjorn3",
        "timestamp": 1593770183
    },
    {
        "content": "<p>Can somebody please review <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1939\">https://github.com/bytecodealliance/wasmtime/pull/1939</a>? It should be easy to do.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1939\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1939\" title=\"Fix Switch for 128bit integers by bjorn3 · Pull Request #1939 · bytecodealliance/wasmtime\">Fix Switch for 128bit integers by bjorn3 · Pull Request #1939 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Fixes bjorn3/rustc_codegen_cranelift#757\nRequired by bjorn3/rustc_codegen_cranelift#743</div></div></div>",
        "id": 203700143,
        "sender_full_name": "bjorn3",
        "timestamp": 1594637135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> On <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">https://github.com/bytecodealliance/wasmtime/pull/1559</a> the macOS builder failed without log. Can you restart it?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\" title=\"SystemV struct arguments by bjorn3 · Pull Request #1559 · bytecodealliance/wasmtime\">SystemV struct arguments by bjorn3 · Pull Request #1559 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn&#39;t have any way to implement this before. This is necessary to compile proc-macros using cg_...</div></div></div>",
        "id": 204127012,
        "sender_full_name": "bjorn3",
        "timestamp": 1594925783
    },
    {
        "content": "<p>eh I wouldn't worry about it, unfortunately we can't restart just one builder</p>",
        "id": 204127061,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594925816
    },
    {
        "content": "<p>and it passed debug tests on macos so it's unlikely to fail in release anyway</p>",
        "id": 204127072,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594925823
    },
    {
        "content": "<p>okay</p>",
        "id": 204127313,
        "sender_full_name": "bjorn3",
        "timestamp": 1594925914
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">https://github.com/bytecodealliance/wasmtime/pull/1559</a> has been merged, so it is no longer necessary to patch cg_clif to bootstrap rustc. Only rustc needs to be patched to integrate with cg_clif. <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-660046919\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-660046919</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\" title=\"SystemV struct arguments by bjorn3 · Pull Request #1559 · bytecodealliance/wasmtime\">SystemV struct arguments by bjorn3 · Pull Request #1559 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">According to the SystemV abi, struct arguments must be passed at a fixed stack offset. Cranelift didn&#39;t have any way to implement this before. This is necessary to compile proc-macros using cg_...</div></div></div>",
        "id": 204197035,
        "sender_full_name": "bjorn3",
        "timestamp": 1594986936
    },
    {
        "content": "<p>Great work <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> !</p>",
        "id": 204197128,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1594987030
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 204197140,
        "sender_full_name": "bjorn3",
        "timestamp": 1594987045
    }
]