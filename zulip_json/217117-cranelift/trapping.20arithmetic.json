[
    {
        "content": "<p>Hi, just came across Issue #5908 (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a>) regarding blockers for optimisations on trapping arithmetic, but couldn’t find any linked stream here: what’s the current status of the plan to include them for opts?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b9388ca78587e32e73bba1177f9d8002566c8001/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393839353833656535636362353362313332646464643563643834323331613537623965316365653430346561616465653762643637326331393231623032382f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35393038&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\" title=\"cranelift/egraphs: allow simplifying trapping arithmetic · Issue #5908 · bytecodealliance/wasmtime\">cranelift/egraphs: allow simplifying trapping arithmetic · Issue #5908 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature We currently have simplification rules in opts/algebraic.isle to rewrite x/1 to x, and in opts/cprop.isle to constant-fold division when both operands are constant. But these rules can't fi...</div></div></div>",
        "id": 435458860,
        "sender_full_name": "Kirp",
        "timestamp": 1714075338
    },
    {
        "content": "<p>we will GVN instructions that have idempotent side effects, like trapping, but we don't support rewriting them in ISLE yet</p>",
        "id": 435472056,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714081243
    },
    {
        "content": "<p>What would be needed to allow isle to rewrite them: is it a semantics thing (as in what way should isle be allowed to do the rewrites?) or an implementation thing?</p>",
        "id": 435476237,
        "sender_full_name": "Kirp",
        "timestamp": 1714083542
    },
    {
        "content": "<p>some combo of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\">https://github.com/bytecodealliance/wasmtime/issues/6106</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/09985c50dd4c9466d1fe74ca28c3aa5b4c7b893c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626632316564393661663733616530623231376462666432616137306662343732373535653661613264353532626538346434616331663966316634306537342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36313036&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6106\" title=\"cranelift/egraphs: Optimize instructions without results · Issue #6106 · bytecodealliance/wasmtime\">cranelift/egraphs: Optimize instructions without results · Issue #6106 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature We should allow the egraph pass to rewrite instructions which have no result values. This resembles #5908, in that no-result instructions have side effects and that currently prevents us fr...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b9388ca78587e32e73bba1177f9d8002566c8001/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393839353833656535636362353362313332646464643563643834323331613537623965316365653430346561616465653762643637326331393231623032382f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35393038&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\" title=\"cranelift/egraphs: allow simplifying trapping arithmetic · Issue #5908 · bytecodealliance/wasmtime\">cranelift/egraphs: allow simplifying trapping arithmetic · Issue #5908 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature We currently have simplification rules in opts/algebraic.isle to rewrite x/1 to x, and in opts/cprop.isle to constant-fold division when both operands are constant. But these rules can't fi...</div></div></div>",
        "id": 435482344,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714087665
    },
    {
        "content": "<p>I realize this is a bit circular, but I guess the most precise answer to \"what's the current status?\" is that not too much has changed since those issues were filed</p>",
        "id": 435482452,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1714087733
    },
    {
        "content": "<p>What would the conditions need to be to simplify the operations? Looking at the list of idempotent ops, there’s div/rem (where I think it’s sufficient that the denominator is known at comp time), addition that traps on overflow where both operands would need to be known (or at least have some bounds on them) and FcvtToSint / Uint (I presume floating point conversions to integers?) (this is from side_effects_idempotent impl)</p>",
        "id": 436005684,
        "sender_full_name": "Kirp",
        "timestamp": 1714385760
    },
    {
        "content": "<blockquote>\n<p>I presume floating point conversions to integers?</p>\n</blockquote>\n<p>Correct: <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fcvt_to_uint\">https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.fcvt_to_uint</a></p>",
        "id": 436016833,
        "sender_full_name": "bjorn3",
        "timestamp": 1714389401
    }
]