[
    {
        "content": "<p>I would like to use Cranelift as baseline JIT and instead of placing VM registers on heap allocated stack I would like to use real registers and machine stack, but I can't find any information/tutorial/documentation on how to use stackmaps in cranelift, is there any information?</p>",
        "id": 200227356,
        "sender_full_name": "playX",
        "timestamp": 1591709627
    },
    {
        "content": "<p>P.S My languge is dynamically typed and uses nan-boxing so I need to place all values to stackmap and VM Value can be stored in just I64 on both 32 bit and 64 bit machines</p>",
        "id": 200227584,
        "sender_full_name": "playX",
        "timestamp": 1591709722
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general/topic/Stackmap.20and.20GC.20roots\">#general &gt; Stackmap and GC roots</a> by <span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span></p>",
        "id": 200228448,
        "sender_full_name": "Notification Bot",
        "timestamp": 1591710057
    },
    {
        "content": "<p>(I moved this for more visibility to Cranelift folks)</p>",
        "id": 200228506,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1591710088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295416\">@playX</span> does <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1832\">https://github.com/bytecodealliance/wasmtime/pull/1832</a> help, by any chance?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1832\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1832\" title=\"externref: implement stack map-based garbage collection by fitzgen · Pull Request #1832 · bytecodealliance/wasmtime\">externref: implement stack map-based garbage collection by fitzgen · Pull Request #1832 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">For host VM code, we use plain reference counting, where cloning increments the reference count, and dropping decrements it. We can avoid many of the on-stack increment/decrement operations that ty...</div></div></div>",
        "id": 200228562,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1591710109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> helps a litte, but there is no good explanation on how to use these stackmaps, how to get them e.g with SimpleJITBackend and Idk where and when I should use reference type vs just i32/i64</p>",
        "id": 200229495,
        "sender_full_name": "playX",
        "timestamp": 1591710511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> might be able to answer some of this, but it seems plausible that for now using this does require digging into the code quite a bit</p>",
        "id": 200233425,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1591711929
    },
    {
        "content": "<p>@playX, I recently landed a PR that improved the docs for <code>Stackmap</code> a bit and cleared up questions that I had when implementing their integration into Wasmtime: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1824/files#diff-97dbc08ed429dd9faefe70055a6c2009\">https://github.com/bytecodealliance/wasmtime/pull/1824/files#diff-97dbc08ed429dd9faefe70055a6c2009</a></p>\n<p>Note that Cranelift's stack map support assumes that references are pointer-sized, so using <code>r64</code> on 32-bit architectures won't work right now.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1824/files#diff-97dbc08ed429dd9faefe70055a6c2009\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/74571?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1824/files#diff-97dbc08ed429dd9faefe70055a6c2009\" title=\"cranelift: Better document and test stack maps by fitzgen · Pull Request #1824 · bytecodealliance/wasmtime\">cranelift: Better document and test stack maps by fitzgen · Pull Request #1824 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">One of the new tests introduced here is not passing yet, because it looks like Cranelift is generating incorrect stack frames / stack maps, but I&#39;d like to get a second set of eyes on whether t...</div></div></div>",
        "id": 200257534,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591720845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295416\">@playX</span> ^</p>",
        "id": 200257570,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591720859
    },
    {
        "content": "<p>This documentation is cool but still does not show any example code, maybe it's worth adding some examples on how to use it and how to get frame pointers etc.</p>",
        "id": 200259452,
        "sender_full_name": "playX",
        "timestamp": 1591721735
    },
    {
        "content": "<p>to get the stack pointers, you need to use something like <code>libunwind</code> to walk the stack, or your own stack walker</p>\n<p>there is a WIP pr to add SP support to the <code>backtrace</code> crate here: <a href=\"https://github.com/rust-lang/backtrace-rs/pull/341\">https://github.com/rust-lang/backtrace-rs/pull/341</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/backtrace-rs/pull/341\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/backtrace-rs/pull/341\" title=\"Add the `Frame::sp` method to get the frame's stack pointer by fitzgen · Pull Request #341 · rust-lang/backtrace-rs\">Add the `Frame::sp` method to get the frame's stack pointer by fitzgen · Pull Request #341 · rust-lang/backtrace-rs</a></div><div class=\"message_embed_description\">r? @alexcrichton</div></div></div>",
        "id": 200286344,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591734863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> I'll probably go with conservative on stack GC right now because in my project roots might be located anywhere, but for JITed functions when I'll learn more about stackmaps I'll use them :)</p>",
        "id": 200842680,
        "sender_full_name": "playX",
        "timestamp": 1592185033
    }
]