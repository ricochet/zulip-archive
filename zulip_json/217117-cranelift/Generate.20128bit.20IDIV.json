[
    {
        "content": "<p>Hello, I'm trying to generate an x64 IDIV instruction. I have 2 64bit input values and a 64bit divisor. I tried to <code>iconcat</code> the inputs and <code>sextend</code> the divisor to 128 bit values and then use <code>sdiv</code> and <code>srem</code> to calculate the results. The problem is that 128bit division seems unimplemented and <code>isle.rs/put_in_reg</code> panics when trying to assign a 128bit value to a 64bit register. Is there any way to do this cleanly? Or do I have to manually calculate everything? Would that then simplify to a single x64 IDIV in the end?</p>",
        "id": 471242584,
        "sender_full_name": "Andrix",
        "timestamp": 1726661268
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general/topic/Generate.20128bit.20IDIV\">#general &gt; Generate 128bit IDIV</a> by <span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span>.</p>",
        "id": 471279757,
        "sender_full_name": "Notification Bot",
        "timestamp": 1726671432
    },
    {
        "content": "<p>I believe you're right that Cranelift doesn't have support for this. Other compilers I've seen implemente 128-bit division with a libcall (e.g. <code>__udivti3</code>) and that would most likely be Cranelift's own fallback libcall as well. </p>\n<p>I don't think that x64 <code>idiv</code> matches CLIF semantics though because I believe the instruction itself semantically divides a 128-bit integer by a 64-bit integer producing a 64-bit division result and a 64-bit remainer. That doesn't cleanly map to CLIF <code>sdiv</code> or <code>udiv</code> because you'd also need an <code>ireduce</code> on the outside explicitly discarding the upper bits</p>",
        "id": 471280780,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726671687
    },
    {
        "content": "<p>we could consider adding an ISLE rule to match that case, fwiw</p>",
        "id": 471281125,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726671774
    },
    {
        "content": "<p>I think it'd look something like </p>\n<p><code>(has_type $I64 (ireduce (sdiv x (has_type $I64 (sextend y)))))</code></p>\n<p>for a pattern here (which may or may not be what you're looking for</p>",
        "id": 471281405,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726671849
    },
    {
        "content": "<p>it may also require edits to the <code>MInst</code> enum to support the full generality here, I haven't looked at div myself in a while</p>",
        "id": 471281485,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726671874
    },
    {
        "content": "<p>So it's not really possible at the moment without modifying Cranelift, right? Maybe I'll try to insert it somehow after Cranelift has finished running.</p>",
        "id": 471685431,
        "sender_full_name": "Andrix",
        "timestamp": 1726827136
    },
    {
        "content": "<p>Right yeah, there's no lowering rules in Cranelift where the upper bits of the division operation are customized. They're always zero or sign-extended from the lower 64-bits</p>",
        "id": 471779975,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726851145
    }
]