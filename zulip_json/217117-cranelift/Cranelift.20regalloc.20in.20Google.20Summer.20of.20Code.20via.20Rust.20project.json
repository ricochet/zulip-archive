[
    {
        "content": "<p>For anyone interested here, a heads-up: via the Rust project's participation in Google Summer of Code, there is a project idea described <a href=\"https://github.com/rust-lang/google-summer-of-code?tab=readme-ov-file#Faster-register-allocator-for-Cranelift\">here</a> that would involve building a fast (very simple, non-backtracking, single-pass) register allocator behind the regalloc2 API to plug into Cranelift for a fast build mode. <span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> and I both volunteered to mentor anyone who wants to take on the project; see the Rust project's <a href=\"https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html\">blog post</a> for the process to apply / get involved.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/google-summer-of-code?tab=readme-ov-file#Faster-register-allocator-for-Cranelift\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1f8bb5cef95f2e2aeca70af6ca69e794bd8cc108\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333365363934353239316635633031616637376565346530353730626638386366663863636134333233656266643333356362316437303933323630666566662f727573742d6c616e672f676f6f676c652d73756d6d65722d6f662d636f6465)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/google-summer-of-code?tab=readme-ov-file#Faster-register-allocator-for-Cranelift\" title=\"GitHub - rust-lang/google-summer-of-code: Rust project ideas for Google Summer of Code\">GitHub - rust-lang/google-summer-of-code: Rust project ideas for Google Summer of Code</a></div><div class=\"message_embed_description\">Rust project ideas for Google Summer of Code. Contribute to rust-lang/google-summer-of-code development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/147ecc3caab69e5abda8478c67ed1c5c29a30233\\/68747470733a2f2f7777772e727573742d6c616e672e6f72672f7374617469632f696d616765732f727573742d736f6369616c2d776964652e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://blog.rust-lang.org/2024/02/21/Rust-participates-in-GSoC-2024.html\" title=\"Rust participates in Google Summer of Code 2024 | Rust Blog\">Rust participates in Google Summer of Code 2024 | Rust Blog</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software.</div></div></div>",
        "id": 422762455,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708587545
    },
    {
        "content": "<p>Hi, I'm interested in this project. To understand this project, are there any issues that I can work on at the beginning? Thank you.</p>",
        "id": 423308929,
        "sender_full_name": "long_long_float",
        "timestamp": 1708911982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"694593\">@long_long_float</span> we unfortunately don't really have any starter issues for this; in theory working on the existing (more complex, backtracking/liverange-splitting) allocator would give you a lot of background but it would also likely be a very painful ramp-up when the goal is to replace it with something simpler :-) It might be best to study the public API of the regalloc2 crate, as a starting point, along with various papers on regalloc (e.g. the classical <a href=\"https://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf\">linear scan</a> paper, though at least I'm envisioning something even a little simpler still, without a pre-analysis to find liveranges but rather a single forward pass)</p>",
        "id": 423313883,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708916145
    },
    {
        "content": "<p>Thank you! I will read the API of regalloc2 and papers about it first.</p>",
        "id": 423315269,
        "sender_full_name": "long_long_float",
        "timestamp": 1708917204
    },
    {
        "content": "<p>I have a question about the <code>VReg</code> in VCode. Can it express registers for float or SIMD other than integer?<br>\nI'm planning to implement the first allocator for only integers. I want to know whether it is easy to extend the allocator for floats.</p>",
        "id": 424904839,
        "sender_full_name": "long_long_float",
        "timestamp": 1709655063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"694593\">@long_long_float</span> yes it can; VCode must represent any code that Cranelift can generate. Two things though: (i) it’s totally fine to start during development with an allocator that just panics in cases it doesn’t handle yet; but also (ii) you can think of the regalloc problem as mostly N separate problems for N register classes, as they don’t really interact.</p>",
        "id": 424910744,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1709656582
    },
    {
        "content": "<p>(That's not 100% true; spillslot allocation needs to be shared, but that can be as simple as \"all classes ask the same allocator for space\", and in fact I wouldn't recommend trying to share spillslots between classes)</p>",
        "id": 424913831,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1709657334
    },
    {
        "content": "<p>Thank you! In my understanding, spillslot means memory region to place spilled registers. Is it right?<br>\nAnd does \"all classes ask the same allocator for space\" mean that the allocator prepares spillslots for each classes?</p>",
        "id": 425034961,
        "sender_full_name": "long_long_float",
        "timestamp": 1709715566
    },
    {
        "content": "<p>Yes to both!</p>",
        "id": 425094781,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1709734149
    },
    {
        "content": "<p>Hi, I have a question. We decided to use SSRA with Reverse Linear Scan Allocation. My understanding is that the allocation requires the instruction to be SSA. However VCode doesn't seem to be SSA form. Is it possible to make the output value of a VCode instruction a single definition?</p>",
        "id": 425762287,
        "sender_full_name": "long_long_float",
        "timestamp": 1710066466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"694593\">@long_long_float</span> VCode is actually SSA; a single instruction may have multiple defs, but any given register only has one def. (Various people might have different definitions of SSA, but the salient property for us at least is one-def-per-register.)</p>",
        "id": 425785393,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710087570
    },
    {
        "content": "<p>I don't think that should be problematic for an algorithm that wants to see defs/uses though -- you can iterate over the defs in the instruction when you scan it (as if there were multiple instructions)?</p>",
        "id": 425785464,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710087612
    },
    {
        "content": "<p>In the past couple of days I've thrown together a simple implementation of SSRA with support for branching across multiple basic blocks. Right now, the project is directly substituted in place of regalloc2's current allocator, and supports just enough features for evaluation of a toy expression language (w/ conditionals) and the sample long script provided in <a href=\"https://www.mattkeeter.com/blog/2022-10-04-ssra/\">Matt's blog</a>, recreating the register pressure graph at the bottom.</p>\n<p>Now I'm focusing on testing and guaranteeing correctness of the allocator. The ion_checker fuzzer appears to pass everything, even when I intentionally introduce known bugs. It does, however, catch known bugs I introduce into regalloc2. I'm clearly not understanding the tool here. Can you give me an overview of what guarantees the fuzzer should provide, and if there is any existing tooling around for testing and eventually benchmarking the project?</p>",
        "id": 425802939,
        "sender_full_name": "Squaaawk",
        "timestamp": 1710102286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"699719\">@Squaaawk</span> that's great you've gotten so far!</p>\n<p>The <code>ion_checker</code> fuzz target is checking that the dataflow of the allocation result is equivalent to the dataflow of the pre-allocation program with virtual registers. Are you seeing oracle validation even when there is an allocation result you know to be incorrect (manually verified)? I'd check the basics too just to be sure, e.g. that the fuzz target is running your new allocator rather than ion.</p>\n<p>The next testing + benchmarking step beyond fuzzing is use in the main (only public?) embedding of regalloc2, namely Cranelift. If you have a branch of RA2 that uses your allocator by default instead, and it is correct, dropping it in (by editing the cargo dep in a wasmtime tree to a local path, for example) should give you a <code>wasmtime</code> that can compile and run Wasms. We generally use Sightglass to benchmark that, but for compilation speed, any large wasm file will do.</p>\n<p>(The final state of things will be that we release regalloc2 with the new allocator merged in and available as an option in <code>RegallocOptions</code>, and then add a Cranelift flag to set it, so this manual setup won't be necessary in the end.)</p>",
        "id": 425803456,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710102726
    },
    {
        "content": "<p>oh, and of course the <code>cg_clif</code> benchmarking side -- the other major use of Cranelift aside from Wasmtime -- <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> can say more about what is idiomatic to do that, I think</p>",
        "id": 425803505,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710102795
    },
    {
        "content": "<p>For cg_clif, you can use <code>./y.sh bench</code> in the cg_clif repo as quick benchmark. For anything serious you will need to use <a href=\"https://github.com/rust-lang/rustc-perf/\">https://github.com/rust-lang/rustc-perf/</a> though to run the benchmark suite of rustc itself. Make sure to skip the opt benchmarks though as those don't make much sense for cg_clif and you probably want to skip the check benchmarks too as they should have identical performance independent of how fast the codegen backend is.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rustc-perf/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4b416ea22e2e6bbadfe1535565c74c2cbd3cdb71\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623561353733323563383763643430336639643039326362326536303230633731363965333961393465643264653132396130306564626239336338346337332f727573742d6c616e672f72757374632d70657266)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rustc-perf/\" title=\"GitHub - rust-lang/rustc-perf: Website for graphing performance of rustc\">GitHub - rust-lang/rustc-perf: Website for graphing performance of rustc</a></div><div class=\"message_embed_description\">Website for graphing performance of rustc. Contribute to rust-lang/rustc-perf development by creating an account on GitHub.</div></div></div>",
        "id": 425882807,
        "sender_full_name": "bjorn3",
        "timestamp": 1710154481
    },
    {
        "content": "<p>I have a number of <code>todo!()</code> statements that were never triggered in a successful overnight of fuzz testing. How feature complete is the ion_checker fuzzer expected to be — should I expect it to do a \"pretty good job\" of testing pretty much every case for my allocator, or is there more work to do here? Additionally, is an overnight of fuzzing reasonable, or would it take significantly longer to stumble across every case?</p>",
        "id": 426629144,
        "sender_full_name": "Squaaawk",
        "timestamp": 1710450427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"699719\">@Squaaawk</span> <code>ion_fuzzer</code> is meant to exercise nearly every feature of RA2. I have found fuzzbugs after several days of fuzzing on 32 cores, especially after things have already settled down (easy fuzzbugs fixed). Can you say what your <code>todo!()</code>'d cases are more specifically?</p>",
        "id": 426636964,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710453721
    },
    {
        "content": "<p>Alright, it sounds like for the most part just more time fuzzing is needed. I'm not too woried about tracking down individual missed cases at the moment, as the code is going to go through a fair bit of refactoring and for some cases not yet supported I'm auto-passing them for the fuzzer. The <code>todo!()</code>s missed so far are specific combinations of reading instruction arguments from various locations (stack/register/first-time-encountering vreg).</p>",
        "id": 426643124,
        "sender_full_name": "Squaaawk",
        "timestamp": 1710456826
    },
    {
        "content": "<p>When I was developing the existing algorithm the fuzzer was impressively effective at finding weird combinations of operands; so hopefully that sort of thing will become apparent with enough fuzzing time!</p>",
        "id": 426648293,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710459768
    },
    {
        "content": "<p>Oh, one random tip: I usually fuzz with <code>-s none</code> (turns off sanitizers), since in safe Rust asan doesn't really have any point and we're only concerned with the logical/algorithmic correctness. It buys a decent speedup in fuzz-rate. Also <code>-j N</code> for N multicore fuzzing</p>",
        "id": 426648352,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710459809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"699719\">@Squaaawk</span>  I have a toy c compiler based on regalloc2, I can help you test over your new allocator if necessary</p>",
        "id": 428103991,
        "sender_full_name": "lengyijun",
        "timestamp": 1711019576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"694611\">@lengyijun</span> That would be useful! Is it publically available? If not, don't worry about it — I have sufficient tooling in place to make forward progress at the moment</p>",
        "id": 428241117,
        "sender_full_name": "Squaaawk",
        "timestamp": 1711068044
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699719\">Squaaawk</span> <a href=\"#narrow/stream/217117-cranelift/topic/Cranelift.20regalloc.20in.20Google.20Summer.20of.20Code.20via.20Rust.20project/near/428241117\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"694611\">lengyijun</span> That would be useful! Is it publically available? If not, don't worry about it — I have sufficient tooling in place to make forward progress at the moment</p>\n</blockquote>\n<p><a href=\"https://github.com/lengyijun/kecc/tree/regalloc2\">https://github.com/lengyijun/kecc/tree/regalloc2</a></p>\n<p>Try <code>RUST_MIN_STACK=33554432 cargo nextest run</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lengyijun/kecc/tree/regalloc2\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/055ef381303a8fbc375d4177dd3929562425d6cf\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303331323763326435663938333331353038366438313832333632386563326364663634316365636265373139623662346136393838633362353938396438312f6c656e6779696a756e2f6b656363)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lengyijun/kecc/tree/regalloc2\" title=\"GitHub - lengyijun/kecc\">GitHub - lengyijun/kecc</a></div><div class=\"message_embed_description\">Contribute to lengyijun/kecc development by creating an account on GitHub.</div></div></div>",
        "id": 428241760,
        "sender_full_name": "lengyijun",
        "timestamp": 1711068381
    },
    {
        "content": "<p>I had to comment out <code>#![deny(unused_qualifications)]</code> in order to compile, and several tests fail using that command (with a fresh clone). Is this expected?</p>",
        "id": 428243537,
        "sender_full_name": "Squaaawk",
        "timestamp": 1711069662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"699719\">Squaaawk</span> <a href=\"#narrow/stream/217117-cranelift/topic/Cranelift.20regalloc.20in.20Google.20Summer.20of.20Code.20via.20Rust.20project/near/428243537\">said</a>:</p>\n<blockquote>\n<p>I had to comment out <code>#![deny(unused_qualifications)]</code> in order to compile, and several tests fail using that command (with a fresh clone). Is this expected?</p>\n</blockquote>\n<p>I tested on d1877a15f9d575c275977fc9724b2f8ed166209d<br>\nSome timeout warning is expected</p>",
        "id": 428243888,
        "sender_full_name": "lengyijun",
        "timestamp": 1711069909
    },
    {
        "content": "<p>hash <code>d1877a15f9d575c275977fc9724b2f8ed166209d</code><br>\ntests: 9 passed (2 slow), 4 failed, 0 skipped</p>",
        "id": 428244017,
        "sender_full_name": "Squaaawk",
        "timestamp": 1711069990
    },
    {
        "content": "<p>hello, is this project still on-going? i saw theres a contributor on the gsoc paper but i'm not sure about new on-going work <a href=\"https://summerofcode.withgoogle.com/programs/2024/projects/zxxeGZMt\">https://summerofcode.withgoogle.com/programs/2024/projects/zxxeGZMt</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://summerofcode.withgoogle.com/programs/2024/projects/zxxeGZMt\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/17aec411a6cb1470bf8585fb62b84dbb91f2e67a/68747470733a2f2f73756d6d65726f66636f64652e77697468676f6f676c652e636f6d2f7374617469632f696d672f6f672d696d6167652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://summerofcode.withgoogle.com/programs/2024/projects/zxxeGZMt\" title=\"Google Summer of Code\">Google Summer of Code</a></div><div class=\"message_embed_description\">Google Summer of Code is a global program focused on bringing more developers into open source software development.</div></div></div>",
        "id": 470465032,
        "sender_full_name": "badumbatish",
        "timestamp": 1726466798
    },
    {
        "content": "<p>Yes, Demilade is still working on it!</p>",
        "id": 470636894,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726498493
    },
    {
        "content": "<p>See ongoing PR to merge his implementation <a href=\"https://github.com/bytecodealliance/regalloc2/pull/181\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc2/pull/181\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4c01b19798499bae853855a7b5eca57f8ed34d54/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393065646464323561373537303561613364636165306664353836396136326338666264643035343661373232346539383437623938356634303838613762652f62797465636f6465616c6c69616e63652f726567616c6c6f63322f70756c6c2f313831&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc2/pull/181\" title=\"Fastalloc1 by d-sonuga · Pull Request #181 · bytecodealliance/regalloc2\">Fastalloc1 by d-sonuga · Pull Request #181 · bytecodealliance/regalloc2</a></div><div class=\"message_embed_description\">This is the initial implementation of the fast register allocator in src/fastalloc.\nIt&#39;s still a work in progress and I haven&#39;t done any kind of optimizations on it. Still using less-than-o...</div></div></div>",
        "id": 470636994,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726498514
    },
    {
        "content": "<p>most discussion happens over in the rust-lang Zulip</p>",
        "id": 470637035,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726498521
    },
    {
        "content": "<p>ah ok i see it now, tysm</p>",
        "id": 470872274,
        "sender_full_name": "badumbatish",
        "timestamp": 1726550456
    }
]