[
    {
        "content": "<p>Hey I am developing a little operating system. Is there some usage of cranelift/JIT in no_std and in kernel mode possible?</p>",
        "id": 345049380,
        "sender_full_name": "Robin Lindner",
        "timestamp": 1679988836
    },
    {
        "content": "<p>hey Robin! As a policy, we don't support no_std in either Cranelift or Wasmtime: <a href=\"https://docs.wasmtime.dev/stability-platform-support.html?highlight=no_std#what-about-no_std\">https://docs.wasmtime.dev/stability-platform-support.html?highlight=no_std#what-about-no_std</a> You'll have to support enough of an environment for std to work, at least for the time being</p>",
        "id": 345161438,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1680015954
    },
    {
        "content": "<p>I'm not sure if cranelift works in no-std these days, it did at one point in time, but it is a pretty large burden on developers for miniscule gain</p>\n<p>fwiw, you will probably get further implementing <code>std</code> for your OS, stubbing things out with panics as necessary, than by trying to make everything in your dep tree no-std</p>\n<p>for context, this wasmtime doc describes some of the issues with no-std and burden on the developers: <a href=\"https://docs.wasmtime.dev/stability-platform-support.html#what-about-no_std\">https://docs.wasmtime.dev/stability-platform-support.html#what-about-no_std</a></p>",
        "id": 345161698,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1680016005
    },
    {
        "content": "<p>Give that cranelift_codegen still uses <code>#![no_std]</code>, rust-analyzer actually prefers auto importing from core and alloc instead of std. Other than using the std re-exports in many places, and hashmaps (for which we should probably use the no_std compatible FxHashMap type alias anyway), cranelift-codegen only uses libstd in a handful of places. As such I don't think there is any burden in supporting no_std for cranelift-codegen apart from a single refactor to stop using the std re-exports. For wasmtime and cranelift-module (and dependent crates) I do agree that it is a burden.</p>",
        "id": 345200167,
        "sender_full_name": "bjorn3",
        "timestamp": 1680025181
    },
    {
        "content": "<p>Heya (gonna revive this channel a bit hehe) I've been updating my cranelift fork today and thought I'd give the old upstreaming attempt another go if y'all are interested. This time around (I have a lot of practice in porting cranlift nowadays lol) I've broken up the <code>no_std</code> support into a bunch of smaller and hopefully easier to review PRs (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/9977\">9977</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9976\">9976</a>, and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9975\">9975</a>)</p>",
        "id": 492944162,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736513577
    },
    {
        "content": "<p>(that I've been spamming y'all with sorry for that)</p>",
        "id": 492944216,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736513596
    },
    {
        "content": "<p>the big blocker is still <code>std::sync::OnceLock</code> though :/</p>",
        "id": 492944513,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736513695
    },
    {
        "content": "<p>I might have already mentioned this but one tactic I did for wasmtime was to add a <code>no_std</code> version which basically panics on contention. So still safe in <code>no_std</code> and functional but non-functional in multi-threaded cases, which at leat for wasmtime's purposes is fine in that <code>no_std</code> typically doesn't have threads</p>",
        "id": 492973278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1736522978
    },
    {
        "content": "<p>(and thanks for this PRs!)</p>",
        "id": 492973300,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1736522986
    },
    {
        "content": "<p>yeah that’s a fine approach for embedded sadly it doesn’t help my case where I plan on supporting multiple cores</p>",
        "id": 493074960,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736581807
    },
    {
        "content": "<p>but it might be a first step before removing the need for those oncelocks all together as someone mentioned in that pr way back</p>",
        "id": 493075017,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736581858
    },
    {
        "content": "<p>if you're putting in efforts to port and want to \"do it right\" slightly more, pushing on removing <code>OnceLock</code>s might be reasonable: they are only used to lazily initialize register configurations in ABI code; the configurations are nominally static, and are only created dynamically because they include <code>Vec</code>s; <code>&amp;'static</code> slices (and hence letting the register environments be fully static data) would be reasonable alternatives I think. This does imply a change to regalloc2's <code>MachineEnv</code> type but that should be trivial I think</p>",
        "id": 493078060,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1736584728
    },
    {
        "content": "<p>yeah going to try to do that next week actually, right now my cranelift fork uses <code>spin</code> but that has always really bothered me since i do have my own sync library</p>",
        "id": 493129667,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736631654
    },
    {
        "content": "<p>and having two of them just doesn’t feel right</p>",
        "id": 493129677,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736631669
    },
    {
        "content": "<p>Maybe you can use the once-cell crate? With the critical-section feature enabled it allows you to provide your own synchronization primitive.</p>",
        "id": 493164698,
        "sender_full_name": "bjorn3",
        "timestamp": 1736666640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217117-cranelift/topic/Use.20in.20no_std/near/493078060\">said</a>:</p>\n<blockquote>\n<p>if you're putting in efforts to port and want to \"do it right\" slightly more, pushing on removing <code>OnceLock</code>s might be reasonable: they are only used to lazily initialize register configurations in ABI code; the configurations are nominally static, and are only created dynamically because they include <code>Vec</code>s; <code>&amp;'static</code> slices (and hence letting the register environments be fully static data) would be reasonable alternatives I think. This does imply a change to regalloc2's <code>MachineEnv</code> type but that should be trivial I think</p>\n</blockquote>\n<p>making <code>MachineEnv</code> take static slices and the necessary work on regalloc2s side indeed was quite easy, but I'm not quite sure what to do on the cranelift side</p>",
        "id": 493271576,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736750946
    },
    {
        "content": "<p>putting the whole <code>MachineEnv</code> into a <code>static</code> doesn't really work bc of the way they are constructed, and replacing all the non-const functions with const ones would mean readability = 0</p>",
        "id": 493271858,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736751063
    },
    {
        "content": "<p>on the other hand <code>MachineEnv</code> is 120 bytes in size, idk if cloning that around is the best idea either</p>",
        "id": 493271947,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736751110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"769939\">Jonas Kruckenberg</span> <a href=\"#narrow/channel/217117-cranelift/topic/Use.20in.20no_std/near/493271858\">said</a>:</p>\n<blockquote>\n<p>putting the whole <code>MachineEnv</code> into a <code>static</code> doesn't really work bc of the way they are constructed, and replacing all the non-const functions with const ones would mean readability = 0</p>\n</blockquote>\n<p>well plus it the construction kind of depends on runtime configuration</p>",
        "id": 493272112,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736751164
    },
    {
        "content": "<blockquote>\n<p>putting the whole <code>MachineEnv</code> into a <code>static</code> doesn't really work bc of the way they are constructed, and replacing all the non-const functions with const ones would mean readability = 0</p>\n</blockquote>\n<p>Well, yes, but there are a small number of configs (two!) so we can create both statically and return the right one -- e.g. <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/x64/abi.rs#L900\">here</a> for x64, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/aarch64/abi.rs#L1117\">here</a> for aarch64, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/s390x/abi.rs#L883\">here</a> for s390x. And riscv64 has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/riscv64/abi.rs#L637\">only one</a>. This should be very readable IMHO: <code>if flag { &amp;PINNED_REG_ENV } else { &amp;DEFAULT_REG_ENV }</code> or thereabouts.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/x64/abi.rs#L900\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f6035feac09f8f83229d498aee3bff8801766b75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336136316264323330663266353239386432313464336531313830363163353664303433326536373963653032313566313838346131306639303535373735342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/x64/abi.rs#L900\" title=\"wasmtime/cranelift/codegen/src/isa/x64/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/x64/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/aarch64/abi.rs#L1117\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f6035feac09f8f83229d498aee3bff8801766b75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336136316264323330663266353239386432313464336531313830363163353664303433326536373963653032313566313838346131306639303535373735342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/aarch64/abi.rs#L1117\" title=\"wasmtime/cranelift/codegen/src/isa/aarch64/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/aarch64/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/s390x/abi.rs#L883\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f6035feac09f8f83229d498aee3bff8801766b75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336136316264323330663266353239386432313464336531313830363163353664303433326536373963653032313566313838346131306639303535373735342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/s390x/abi.rs#L883\" title=\"wasmtime/cranelift/codegen/src/isa/s390x/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/s390x/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/riscv64/abi.rs#L637\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f6035feac09f8f83229d498aee3bff8801766b75/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336136316264323330663266353239386432313464336531313830363163353664303433326536373963653032313566313838346131306639303535373735342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a1511a096970341266f88702e2a90b79cfa8914a/cranelift/codegen/src/isa/riscv64/abi.rs#L637\" title=\"wasmtime/cranelift/codegen/src/isa/riscv64/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/isa/riscv64/abi.rs at a1511a096970341266f88702e2a90b79cfa8914a · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 493278254,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1736753368
    },
    {
        "content": "<p>aye alright yeah so the job is to make the machineenvs const constructible in a nice way</p>",
        "id": 493278501,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736753444
    },
    {
        "content": "<p>i can work with that</p>",
        "id": 493278531,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736753452
    },
    {
        "content": "<p>yeah, and in particular there's really just one level of helper (<code>create_reg_env</code> or equiv) and then some register newtype converters that should either already be const or can be trivially made so (hopefully!). You'd turn the helper's body into a static struct initializer more or less</p>",
        "id": 493279055,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1736753610
    },
    {
        "content": "<p>yeah that's the plan!</p>",
        "id": 493290534,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1736757386
    }
]