[
    {
        "content": "<p>I am encountering a lot of this obscure error:<br>\n<code>thread 'main' panicked at 'function must be compiled before it can be finalized', /home/johnd/.cargo/registry/src/github.com-1ecc6299db9ec823/cranelift-jit-0.78.0/src/backend.rs:356:14</code><br>\nIt sure would be nice why exactly the function doesn't compile. As far as I explored, one thing that causes this is type mismatch between signature and actual params, but there's a bunch of more subtle things that cause this that i am yet to figure out</p>",
        "id": 262434802,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637662196
    },
    {
        "content": "<p>Here is the CLIF for a function that fails to compile:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"n\">r64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">r64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">r64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"nc\">r64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v19</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">brz</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n\n<span class=\"n\">block1</span>:\n    <span class=\"nc\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">(</span><span class=\"n\">v10</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">block2</span>:\n    <span class=\"nc\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">(</span><span class=\"n\">v14</span><span class=\"p\">)</span><span class=\"w\"></span>\n\n<span class=\"n\">block3</span><span class=\"p\">(</span><span class=\"n\">v7</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262438049,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637664082
    },
    {
        "content": "<p>Did you define all functions you declared with a linkage other than <code>Linkage::Import</code> before you called <code>.finalize_definitions()</code>?</p>",
        "id": 262438208,
        "sender_full_name": "bjorn3",
        "timestamp": 1637664190
    },
    {
        "content": "<p>Yes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">lookup_symbol</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"problem declaring function\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Note that in this case the function is recursive. I suspect that there is something wrong with how I translate if condition, since non-recursive calls without if condition work, but break when wrapped in an if</p>",
        "id": 262438495,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637664380
    },
    {
        "content": "<p>For reference, here is the translation function for if: <a href=\"https://github.com/JohnDowson/CraneLisp/blob/struct-values/src/jit.rs#L367-L397\">https://github.com/JohnDowson/CraneLisp/blob/struct-values/src/jit.rs#L367-L397</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/CraneLisp/blob/struct-values/src/jit.rs#L367-L397\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a49b5957087aae52a486aa6c269ddaae205a8d29\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373438636361333932323234616333633862316237306234366233633361356439663666343635623662393336393561356230366364373437393938666161362f4a6f686e446f77736f6e2f4372616e654c697370)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/CraneLisp/blob/struct-values/src/jit.rs#L367-L397\" title=\"CraneLisp/jit.rs at struct-values · JohnDowson/CraneLisp\">CraneLisp/jit.rs at struct-values · JohnDowson/CraneLisp</a></div><div class=\"message_embed_description\">Lisp in rust using cranelift as compiler backend. Contribute to JohnDowson/CraneLisp development by creating an account on GitHub.</div></div></div>",
        "id": 262438653,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637664494
    },
    {
        "content": "<p>One unrelated nit. You can unconditionally call <code>prepare_for_function_redefine</code> at <a href=\"https://github.com/JohnDowson/CraneLisp/blob/aec9b9710b31f32e53634c3f4b81416cbd412b75/src/jit.rs#L119\">https://github.com/JohnDowson/CraneLisp/blob/aec9b9710b31f32e53634c3f4b81416cbd412b75/src/jit.rs#L119</a> I believe. Even if it hasn't been defined previously.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/CraneLisp/blob/aec9b9710b31f32e53634c3f4b81416cbd412b75/src/jit.rs#L119\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a49b5957087aae52a486aa6c269ddaae205a8d29\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373438636361333932323234616333633862316237306234366233633361356439663666343635623662393336393561356230366364373437393938666161362f4a6f686e446f77736f6e2f4372616e654c697370)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/CraneLisp/blob/aec9b9710b31f32e53634c3f4b81416cbd412b75/src/jit.rs#L119\" title=\"CraneLisp/jit.rs at aec9b9710b31f32e53634c3f4b81416cbd412b75 · JohnDowson/CraneLisp\">CraneLisp/jit.rs at aec9b9710b31f32e53634c3f4b81416cbd412b75 · JohnDowson/CraneLisp</a></div><div class=\"message_embed_description\">Lisp in rust using cranelift as compiler backend. Contribute to JohnDowson/CraneLisp development by creating an account on GitHub.</div></div></div>",
        "id": 262439791,
        "sender_full_name": "bjorn3",
        "timestamp": 1637665187
    },
    {
        "content": "<p>I don't see anything wrong with your code.</p>",
        "id": 262440387,
        "sender_full_name": "bjorn3",
        "timestamp": 1637665481
    },
    {
        "content": "<p>I guess I should file an issue then.</p>",
        "id": 262440475,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637665521
    },
    {
        "content": "<p>Linking the issue just in case <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3559\">https://github.com/bytecodealliance/wasmtime/issues/3559</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3559\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/45083d3d4a12a4c28ad318cab2c7833f619e9242\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336662633139303531376330386330613564353964306263343764323730346136303033326331643861656538326466623361613735613636633666346266312f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33353539)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3559\" title=\"Cranelift:  · Issue #3559 · bytecodealliance/wasmtime\">Cranelift:  · Issue #3559 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">.clif Test Case function u0:0(r64, r64) system_v { ss0 = explicit_slot 31 ss1 = explicit_slot 16 ss2 = explicit_slot 16 ss3 = explicit_slot 16 sig0 = (r64, r64, r64) system_v fn0 = u0:0 sig0 block0...</div></div></div>",
        "id": 262449015,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637670752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> <code>ifjit.crl</code> is missing in the struct-values branch.</p>",
        "id": 262453049,
        "sender_full_name": "bjorn3",
        "timestamp": 1637673205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/thread.20'main'.20panicked.20at.20function.20must.20be.20compiled.2E.2E.2E/near/262453049\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> <code>ifjit.crl</code> is missing in the struct-values branch.</p>\n</blockquote>\n<p>Thank you for pointing this out, I forgot to push the file.</p>",
        "id": 262468729,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637680430
    },
    {
        "content": "<p>I can reproduce the issue now.</p>",
        "id": 262472682,
        "sender_full_name": "bjorn3",
        "timestamp": 1637682116
    },
    {
        "content": "<p>The problem was that <code>module.declare_function</code> returned an error other than <code>DuplicateDefinition</code>. This is completely ignored by your code. When adding an <code>unwrap()</code> I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Verifier</span><span class=\"p\">(</span><span class=\"n\">VerifierErrors</span><span class=\"p\">([</span><span class=\"n\">VerifierError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">inst17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"jump block3(v10)\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"arg 0 (v10) has type r64, expected f64\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">VerifierError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">inst24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"jump block3(v14)\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"arg 0 (v14) has type r64, expected f64\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">VerifierError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">inst25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"v17 = load.i64 aligned v7\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"arg 0 (v7) with type f64 failed to satisfy type set ValueTypeSet { lanes: BitSet(1), ints: BitSet(96), floats: BitSet(0), bools: BitSet(0), refs: BitSet(96) }\"</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">VerifierError</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">inst26</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"v18 = load.i64 aligned v7+8\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"arg 0 (v7) with type f64 failed to satisfy type set ValueTypeSet { lanes: BitSet(1), ints: BitSet(96), floats: BitSet(0), bools: BitSet(0), refs: BitSet(96) }\"</span><span class=\"w\"> </span><span class=\"p\">}]))</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">bjorn</span><span class=\"o\">/</span><span class=\"n\">Projects</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">jit</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">backend</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">659</span>:<span class=\"mi\">37</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262474179,
        "sender_full_name": "bjorn3",
        "timestamp": 1637682746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span></p>",
        "id": 262474199,
        "sender_full_name": "bjorn3",
        "timestamp": 1637682760
    },
    {
        "content": "<p>You are confusing <code>r64</code> and <code>f64</code>.</p>",
        "id": 262474264,
        "sender_full_name": "bjorn3",
        "timestamp": 1637682794
    },
    {
        "content": "<p>Oh god, this is embarrassing, I've stared at my code for many hours and did not notice that.</p>",
        "id": 262481215,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637686019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> has marked this topic as resolved.</p>",
        "id": 262890941,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638044199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> has marked this topic as unresolved.</p>",
        "id": 262891767,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638045456
    },
    {
        "content": "<p>Okay, this time I didn't ignore any errors:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">vlr_env</span><span class=\"p\">[</span><span class=\"n\">cand_vlrix</span><span class=\"p\">].</span><span class=\"n\">is_ref</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">is_ref</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">johnd</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">registry</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">github</span><span class=\"p\">.</span><span class=\"n\">com</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"n\">ecc6299db9ec823</span><span class=\"o\">/</span><span class=\"n\">regalloc</span><span class=\"o\">-</span><span class=\"mf\">0.0.32</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bt_spillslot_allocator</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">295</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n</code></pre></div>\n<p>clif: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"n\">r64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">r64</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ss4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">r64</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">r64</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">r64</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">sig1</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">r64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mh\">0x55a4_6e04_70f0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">raw_bitcast</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v5</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v6</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v9</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v11</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v12</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v14</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"n\">r64</span><span class=\"w\"> </span><span class=\"n\">ss4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v17</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v17</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v19</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v21</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn1</span><span class=\"p\">(</span><span class=\"n\">v20</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v22</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call_indirect</span><span class=\"w\"> </span><span class=\"n\">sig2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"p\">(</span><span class=\"n\">v19</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v21</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What I am trying to do: call malloc and pass the resulting pointer to a callee:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// malloc</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">m_sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m_sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">m_sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">R64</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">malloc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"malloc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">m_sig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_malloc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">malloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">R64</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">R64</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[allow(clippy::fn_to_numeric_cast)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">import_signature</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">raw_bitcast</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">R64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">arg_values</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">exprs</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">a</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">translate_expr</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"c1\">// call malloc</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">count_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">local_malloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">count_bytes</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">heap_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">inst_results</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">memflags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">memflags</span><span class=\"p\">.</span><span class=\"n\">set_aligned</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">memflags</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">heap_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">arg_values</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">arg_values</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">heap_addr</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call_indirect</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">arg_values</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">inst_results</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"n\">okay</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262891913,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638045632
    },
    {
        "content": "<p>The <code>raw_bitcast.r64</code> may be the problem. The register allocator has some problems with dealing with this kind of construct. <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> regalloc2 fixes this once it gets merged, right?</p>",
        "id": 262895157,
        "sender_full_name": "bjorn3",
        "timestamp": 1638050494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> Please <code>@</code> mention me if you respond so I get a notification.</p>",
        "id": 262895221,
        "sender_full_name": "bjorn3",
        "timestamp": 1638050556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> so if it is invalid to use R64 with iconst, and it is invalid to bitcast I64 to R64, how am I supposed to get a R64 value from an external pointer?</p>",
        "id": 262895528,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638050954
    },
    {
        "content": "<p>I guess storing on the stack as i64 and loading as r64 may work around this bug.</p>",
        "id": 262895694,
        "sender_full_name": "bjorn3",
        "timestamp": 1638051197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> oh, yeah, that works.</p>",
        "id": 262896195,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638051975
    },
    {
        "content": "<p>Oh, I think I could've just used <code>const_addr</code>.</p>",
        "id": 262926514,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638102870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> is there some way to insert comments into generated function clif? I see that there is something like that in rustc_cranelift_codegen but it seems to be fairly intertwined with abstractions you've built over the cranelift.</p>",
        "id": 262940479,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638122539
    },
    {
        "content": "<p>CommentWriter from rustc_codegen_cranelift doesn't depend on any abstractions at all. All functions that depend on abstractions in cg_clif are convenience functions only.</p>",
        "id": 262940756,
        "sender_full_name": "bjorn3",
        "timestamp": 1638122972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> Maybe I should upstream CommentWriter one day.</p>",
        "id": 262940806,
        "sender_full_name": "bjorn3",
        "timestamp": 1638123012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> that would be supremely useful!</p>\n<p>On a side note, do you know if call_indirect supposed to use half-width register for callq and then jump into non-executable memory?</p>",
        "id": 262944444,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638128074
    },
    {
        "content": "<p>No, call_indirect should directly call into executable memory. For cranelift-jit it will jump to a stub that calls the actual function. This is how redefining functions can work without having to make all executable memory writable again and relocating everything.</p>",
        "id": 262945776,
        "sender_full_name": "bjorn3",
        "timestamp": 1638130062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> Can you show a disassembly?</p>",
        "id": 262945782,
        "sender_full_name": "bjorn3",
        "timestamp": 1638130077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> I did some rubber duck debugging on people in the rust community discord and found out that i'm either processing or passing arguments incorrectly. I'm basically doing variadics via a heap array.</p>",
        "id": 262946382,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638130925
    },
    {
        "content": "<p>Either here <a href=\"https://github.com/JohnDowson/CraneLisp/blob/main/src/jit.rs#L571-L625\">https://github.com/JohnDowson/CraneLisp/blob/main/src/jit.rs#L571-L625</a><br>\nor here <a href=\"https://github.com/JohnDowson/CraneLisp/blob/main/src/function.rs#L26-L30\">https://github.com/JohnDowson/CraneLisp/blob/main/src/function.rs#L26-L30</a><br>\nrespectively</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/CraneLisp/blob/main/src/jit.rs#L571-L625\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f27c92c03af72edbe37329342c6de9b1f86cb546\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396365616464646539373033326166323232353439626435653666653635663462353165366633656531323330643363613737636164363437313834643638642f4a6f686e446f77736f6e2f4372616e654c697370)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/CraneLisp/blob/main/src/jit.rs#L571-L625\" title=\"CraneLisp/jit.rs at main · JohnDowson/CraneLisp\">CraneLisp/jit.rs at main · JohnDowson/CraneLisp</a></div><div class=\"message_embed_description\">Lisp in rust using cranelift as compiler backend. Contribute to JohnDowson/CraneLisp development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/CraneLisp/blob/main/src/function.rs#L26-L30\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f27c92c03af72edbe37329342c6de9b1f86cb546\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396365616464646539373033326166323232353439626435653666653635663462353165366633656531323330643363613737636164363437313834643638642f4a6f686e446f77736f6e2f4372616e654c697370)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/CraneLisp/blob/main/src/function.rs#L26-L30\" title=\"CraneLisp/function.rs at main · JohnDowson/CraneLisp\">CraneLisp/function.rs at main · JohnDowson/CraneLisp</a></div><div class=\"message_embed_description\">Lisp in rust using cranelift as compiler backend. Contribute to JohnDowson/CraneLisp development by creating an account on GitHub.</div></div></div>",
        "id": 262946482,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638131092
    },
    {
        "content": "<p>I hope you don't mind being poked by my footshooting questions.</p>",
        "id": 262946501,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638131155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> The jitted code expects an array of <code>*mut Atom</code>, right? You are passing a  reference to an array of <code>Atom</code>s.</p>",
        "id": 262946718,
        "sender_full_name": "bjorn3",
        "timestamp": 1638131475
    },
    {
        "content": "<p>Also one thing i'm wondering, is to how to do pointer arithmetic without the load/store trick, cause iadd_imm doesn't work on R types</p>",
        "id": 262946775,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638131542
    },
    {
        "content": "<p>Cranelift reference types are currently pretty much only used for wasm reference types, which are opaque.</p>",
        "id": 262946846,
        "sender_full_name": "bjorn3",
        "timestamp": 1638131657
    },
    {
        "content": "<p>I think adding support for pointer arithmetic to reference types makes sense though.</p>",
        "id": 262946855,
        "sender_full_name": "bjorn3",
        "timestamp": 1638131690
    },
    {
        "content": "<p>That's super counter-intuitive. And also wouldn't you have to cast either way to use I64 with store/load?</p>",
        "id": 262947012,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638131890
    },
    {
        "content": "<p>Also yes, that one mistake in <code>call</code> cost me at 4-5 hours today, seems to work fine now.</p>",
        "id": 262947030,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638131944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> although for some reason only first two arguments work, trying to use a third one still causes a segfault.</p>",
        "id": 262947110,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638132088
    },
    {
        "content": "<p>store and load work just fine with i64. cranelift ir uses i64 as pointer type on 64bit systems. r64 exists for when you have a garbage collector that needs to know where on the stack it can find roots. Every r64 value is considered a root.</p>",
        "id": 262947518,
        "sender_full_name": "bjorn3",
        "timestamp": 1638132730
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> although for some reason only first two arguments work, trying to use a third one still causes a segfault.</p>\n</blockquote>\n<p>did you push your changes?</p>",
        "id": 262947528,
        "sender_full_name": "bjorn3",
        "timestamp": 1638132770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/thread.20'main'.20panicked.20at.20function.20must.20be.20compiled.2E.2E.2E/near/262947518\">said</a>:</p>\n<blockquote>\n<p>store and load work just fine with i64. cranelift ir uses i64 as pointer type on 64bit systems. r64 exists for when you have a garbage collector that needs to know where on the stack it can find roots. Every r64 value is considered a root.</p>\n</blockquote>\n<p>That's certainly nice to know.</p>",
        "id": 262947730,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638133099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/thread.20'main'.20panicked.20at.20function.20must.20be.20compiled.2E.2E.2E/near/262947528\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> although for some reason only first two arguments work, trying to use a third one still causes a segfault.</p>\n</blockquote>\n<p>did you push your changes?</p>\n</blockquote>\n<p>I have now, although that shouldn't affect anything.</p>",
        "id": 262947748,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638133161
    },
    {
        "content": "<p>The code to call into the jitted code looks correct now. I can't find anything obviously wrong with the argument handling in the  jitted code either right now.</p>",
        "id": 262948142,
        "sender_full_name": "bjorn3",
        "timestamp": 1638133556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  Another thing, am I using memflags right?</p>",
        "id": 262948259,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638133678
    },
    {
        "content": "<p>As in, everything should be aligned, right?</p>",
        "id": 262948426,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1638133901
    },
    {
        "content": "<p>Yeah, the stackslot should be 16 bytes aligned and the array 8 bytes aligned. All loads only need 8 bytes alignment and load at a multiple of 8 offset from the start of the array, so everything should be aligned just fine.</p>",
        "id": 262949101,
        "sender_full_name": "bjorn3",
        "timestamp": 1638134719
    },
    {
        "content": "<p>If it isn't aligned, you won't notice anything going wrong on x86 by the way unless you try to load or store floats or vectors. Cranelift itself doesn't have any optimization that will cause unaligned accesses to misbehave if the underlying CPU allows them.</p>",
        "id": 262949182,
        "sender_full_name": "bjorn3",
        "timestamp": 1638134829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/thread.20'main'.20panicked.20at.20function.20must.20be.20compiled.2E.2E.2E/near/262895157\">said</a>:</p>\n<blockquote>\n<p>The <code>raw_bitcast.r64</code> may be the problem. The register allocator has some problems with dealing with this kind of construct. <span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> regalloc2 fixes this once it gets merged, right?</p>\n</blockquote>\n<p>Not directly but at least puts us in a better place to fix this. <code>raw_bitcast</code> in general is a hack and I'd prefer to have real ref-to-int and int-to-ref operators; but right now, you're right (and apologies <span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> ) the way that reference-typed values work is mostly filled out just enough to support Wasm reference types, which are completely opaque and never cast to/from ints or pointers within the Cranelift-compiled code, only carried through and passed back out.</p>",
        "id": 262965405,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1638159028
    }
]