[
    {
        "content": "<p>o/<br>\nI'm very new here &amp; to Cranelift, so sorry if I misunderstand some things or struggle alot. I'm just gonna cut to the chase with my questions.</p>\n<ol>\n<li>How would I go about interacting with heap memory &amp; stack memory? I'm aware of the <code>load</code> and <code>store</code> methods on <code>InstBuilder</code>, but I always get an access violation.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">process</span><span class=\"w\"> </span><span class=\"n\">didn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">successfully</span>: <span class=\"err\">`</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">debug</span><span class=\"err\">\\</span><span class=\"n\">jitmemtest</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mh\">0xc0000005</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">STATUS_ACCESS_VIOLATION</span><span class=\"p\">)</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>I remember seeing that you can interact with libc in the jit demo program. How does one do this?</li>\n<li>Not really a question, but more of an observation &amp; idea. I feel like Cranelift doesn't have much documentation. Or that it does, but it's hard to find your way around due to how many crates there are. I think this concept of a \"Cranelift Book\" akin to the Rust Book but for Cranelift would be really interesting. It could walk you through from, say, making your first function, to advanced higher-level concepts like arrays and strings.</li>\n<li>Also, does anyone know if there's a bytecode alliance discord? I'm a lot more familiar with discord than zulip, but if not that's fine.</li>\n</ol>",
        "id": 375300208,
        "sender_full_name": "Endistic",
        "timestamp": 1689347408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631155\">@Endistic</span></p>\n<ol>\n<li>What address do you pass to them?</li>\n<li>You can use declare_function with Linkage::Import and skip a define_function. Then dlsym will be used to look it up.</li>\n<li>Yeah, we could use a lot more docs.</li>\n<li>AFAIK there is only this zulip.</li>\n</ol>",
        "id": 375352079,
        "sender_full_name": "bjorn3",
        "timestamp": 1689358860
    },
    {
        "content": "<p>For the address I passed zero, because I wasn't really sure what else to pass. I couldn't find anything address-related besides the reference types in the docs. It was something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">builder</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Offset32</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Offset32</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">got</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I think the zero is probably what caused the access violation, but I don't know how I coul0d get a valid address the function could write to into the function.</p>\n<p>Also, for the Cranelift Book, I might give making that a try once I learn how to do those things - I've wrote my fair share of documentation before and have a fair bit in C and other low-level things.</p>",
        "id": 375353564,
        "sender_full_name": "Endistic",
        "timestamp": 1689359216
    },
    {
        "content": "<p>Right, you have to pass the address you want to load/store. 0 is never a valid address.</p>",
        "id": 375353892,
        "sender_full_name": "bjorn3",
        "timestamp": 1689359307
    },
    {
        "content": "<p>Do you want to access a stack variable?</p>",
        "id": 375353976,
        "sender_full_name": "bjorn3",
        "timestamp": 1689359329
    },
    {
        "content": "<p>Then you can create a stackslot using <code>builder.func.create_sized_stack_slot()</code> and get the address using <code>builder.ins().stack_addr()</code>.</p>",
        "id": 375354216,
        "sender_full_name": "bjorn3",
        "timestamp": 1689359391
    },
    {
        "content": "<p>That did the trick, thank you!!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">create_sized_stack_slot</span><span class=\"p\">(</span><span class=\"n\">StackSlotData</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">StackSlotKind</span>::<span class=\"n\">ExplicitSlot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_addr</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Offset32</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"n\">builder</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Offset32</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Offset32</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">return_</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">got</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>And for future reference while you're here, what about memory on the heap? How would I allocate &amp; do stuff with that?</p>",
        "id": 375357263,
        "sender_full_name": "Endistic",
        "timestamp": 1689360221
    },
    {
        "content": "<p>You could use malloc like you would do in C. load and store will work with the returned address too. Just make sure to free() it again once you are done to avoid a memory leak.</p>",
        "id": 375359255,
        "sender_full_name": "bjorn3",
        "timestamp": 1689360742
    },
    {
        "content": "<p>Ah ok, thank you so much for your help!</p>",
        "id": 375360271,
        "sender_full_name": "Endistic",
        "timestamp": 1689361015
    },
    {
        "content": "<p>4 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"217117\" href=\"/#narrow/stream/217117-cranelift/topic/new.20documentation.20book\">#cranelift &gt; new documentation book</a> by <span class=\"user-mention silent\" data-user-id=\"504918\">Jamey Sharp</span>.</p>",
        "id": 376473552,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689714285
    }
]