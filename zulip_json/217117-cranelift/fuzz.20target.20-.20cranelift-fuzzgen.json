[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>  and hello everyone.<br>\nI'm working on my bachelor thesis together with <span class=\"user-mention\" data-user-id=\"554293\">@Remo Senekowitsch</span>  <span class=\"user-mention\" data-user-id=\"561797\">@Falk Zwimpfer</span> </p>\n<p>While digging into the code base of cranelift, I executed the the fuzz target <code>cranelift-fuzzgen</code> on our new branch (named poc) (in a fork).<br>\nAnd it quickly returned me an error.<br>\nThe crash file: crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7<br>\nbase64 encoded content: <code>BwAAAAAAAAAAAACeugAHADAAuEB1dXV1df///xm6//8AAP//ego=</code></p>\n<p>First, I thought there was an error with my setup.<br>\nWhen I run it on it the main branch, <code>RUST_BACKTRACE=1 cargo fuzz run --no-default-features cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7</code> printed this:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>➜  wasmtime git:(052115589) &gt; RUST_BACKTRACE=1 cargo fuzz run --no-default-features cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\n    Finished release [optimized] target(s) in 0.65s\n    Finished release [optimized] target(s) in 0.47s\n     Running `target/x86_64-apple-darwin/release/cranelift-fuzzgen '-artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/' fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7`\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 149780969\nINFO: Loaded 1 modules   (1658484 inline 8-bit counters): 1658484 [0x10c0c12c8, 0x10c25613c),\nINFO: Loaded 1 PC tables (1658484 PCs): 1658484 [0x10c256140,0x10dba4880),\ntarget/x86_64-apple-darwin/release/cranelift-fuzzgen: Running 1 inputs 1 time(s) each.\nRunning: fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\nExecuted fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7 in 2 ms\n***\n*** NOTE: fuzzing was not performed, you have only\n***       executed the target code on a fixed set of inputs.\n***\n</code></pre></div>\n<p>Digging further I found out that the <code>fuzz_target!(|testcase: TestCase| { ... }</code> in <a href=\"http://cranelift-fuzzgen.rs\">cranelift-fuzzgen.rs</a> was actually never called on the main branch.<br>\nIt turns out the the <code>Arbitrary</code>-impl for <code>TestCase</code> returns a Err-Result.</p>\n<p>So the only relevant difference to our poc branch was the version of the arbitrary crate.<br>\nmain branch uses \"1.0.0\"<br>\npoc branch uses \"1.2.3\"</p>\n<p>Updating the version in cranelift/fuzzgen/Cargo.toml finally allowed me to reproduce this on the main branch. Here's the output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>➜  wasmtime git:(052115589) ✗ RUST_BACKTRACE=1 cargo fuzz run --no-default-features cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\n    Finished release [optimized] target(s) in 0.72s\n    Finished release [optimized] target(s) in 0.47s\n     Running `target/x86_64-apple-darwin/release/cranelift-fuzzgen '-artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/' fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7`\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 824376443\nINFO: Loaded 1 modules   (1658758 inline 8-bit counters): 1658758 [0x10e03c848, 0x10e1d17ce),\nINFO: Loaded 1 PC tables (1658758 PCs): 1658758 [0x10e1d17d0,0x10fb21030),\ntarget/x86_64-apple-darwin/release/cranelift-fuzzgen: Running 1 inputs 1 time(s) each.\nRunning: fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\nthread '&lt;unnamed&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: TryFromIntError(())', cranelift/jit/src/compiled_blob.rs:51:80\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library/std/src/panicking.rs:579:5\n   1: core::panicking::panic_fmt\n             at /rustc/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library/core/src/panicking.rs:64:14\n   2: core::result::unwrap_failed\n             at /rustc/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library/core/src/result.rs:1750:5\n   3: cranelift_jit::compiled_blob::CompiledBlob::perform_relocations\n   4: cranelift_jit::backend::JITModule::finalize_definitions\n   5: cranelift_filetests::function_runner::TestFileCompiler::compile\n   6: cranelift_fuzzgen::_::run\n   7: _rust_fuzzer_test_input\n   8: std::panicking::try::do_call\n   9: ___rust_try\n  10: _LLVMFuzzerTestOneInput\n  11: __ZN6fuzzer6Fuzzer15ExecuteCallbackEPKhm\n  12: __ZN6fuzzer10RunOneTestEPNS_6FuzzerEPKcm\n  13: __ZN6fuzzer12FuzzerDriverEPiPPPcPFiPKhmE\n  14: _main\n  15: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n==69068== ERROR: libFuzzer: deadly signal\n    #0 0x111208185 in __sanitizer_print_stack_trace+0x35 (librustc-nightly_rt.asan.dylib:x86_64h+0x53185) (BuildId: d21cf6fbe4db36c3a2772a5990be16c5240000001000000000070a0000030c00)\n    #1 0x10cd6a82a in fuzzer::PrintStackTrace()+0x2a (cranelift-fuzzgen:x86_64+0x104e2c82a) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #2 0x10cd5d4f3 in fuzzer::Fuzzer::CrashCallback()+0x43 (cranelift-fuzzgen:x86_64+0x104e1f4f3) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #3 0x7ff801402c1c in _sigtramp+0x1c (libsystem_platform.dylib:x86_64+0x3c1c) (BuildId: f314b62b98f43a7c82968739f8b6855a240000001000000000010d0000010d00)\n    #4 0x7ff8010d775c in invocation function for block in dyld4::APIs::dlsym(void*, char const*)+0x7c (dyld:x86_64+0xfffffffffffa475c) (BuildId: bb7a09708c623dcea7a25cec9c501f1132000000200000000100000000010d00)\n    #5 0x7ff801321ca4 in abort+0x7a (libsystem_c.dylib:x86_64+0x81ca4) (BuildId: 376f7cb76dd23e00976f77dd755bdb0d32000000200000000100000000010d00)\n    #6 0x10ce1ca28 in std::sys::unix::abort_internal::h0bc47dd64a160659+0x8 (cranelift-fuzzgen:x86_64+0x104edea28) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #7 0x10d0243f8 in std::process::abort::h25c584e2701866f2+0x8 (cranelift-fuzzgen:x86_64+0x1050e63f8) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #8 0x10cd5c4bb in libfuzzer_sys::initialize::_$u7b$$u7b$closure$u7d$$u7d$::h10ee930a6387ab24+0xab (cranelift-fuzzgen:x86_64+0x104e1e4bb) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #9 0x10ce12f0b in std::panicking::rust_panic_with_hook::h3da33b5c881860c3+0x24b (cranelift-fuzzgen:x86_64+0x104ed4f0b) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #10 0x10ce12ca3 in std::panicking::begin_panic_handler::_$u7b$$u7b$closure$u7d$$u7d$::h85aa2f2668cf394b+0xc3 (cranelift-fuzzgen:x86_64+0x104ed4ca3) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #11 0x10ce0fab8 in std::sys_common::backtrace::__rust_end_short_backtrace::he4c57c0787d4f563+0x8 (cranelift-fuzzgen:x86_64+0x104ed1ab8) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #12 0x10ce1296c in rust_begin_unwind+0x6c (cranelift-fuzzgen:x86_64+0x104ed496c) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #13 0x10d027142 in core::panicking::panic_fmt::h485ba1360a5b9d54+0x32 (cranelift-fuzzgen:x86_64+0x1050e9142) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #14 0x10d0275d4 in core::result::unwrap_failed::hfa2c76314834bbf0+0x74 (cranelift-fuzzgen:x86_64+0x1050e95d4) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #15 0x10a04d802 in cranelift_jit::compiled_blob::CompiledBlob::perform_relocations::h8856c1569729ccd9+0xbc2 (cranelift-fuzzgen:x86_64+0x10210f802) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #16 0x10a03d459 in cranelift_jit::backend::JITModule::finalize_definitions::hb4fba36453194359+0x539 (cranelift-fuzzgen:x86_64+0x1020ff459) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #17 0x1087993f5 in cranelift_filetests::function_runner::TestFileCompiler::compile::h5f3773f305f7373d+0x1b5 (cranelift-fuzzgen:x86_64+0x10085b3f5) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #18 0x107fd8ade in cranelift_fuzzgen::_::run::hcd37998cabf702ce+0x5ce (cranelift-fuzzgen:x86_64+0x10009aade) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #19 0x107fd79c5 in rust_fuzzer_test_input+0x835 (cranelift-fuzzgen:x86_64+0x1000999c5) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #20 0x10cd578f2 in std::panicking::try::do_call::h3a14e111a10954b4+0xd2 (cranelift-fuzzgen:x86_64+0x104e198f2) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #21 0x10cd5c693 in __rust_try+0x13 (cranelift-fuzzgen:x86_64+0x104e1e693) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n\n... shortened because of the limit\n\nNOTE: libFuzzer has rudimentary signal handlers.\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\nSUMMARY: libFuzzer: deadly signal\n────────────────────────────────────────────────────────────────────────────────\n\nError: Fuzz target exited with exit status: 77\n</code></pre></div>",
        "id": 342351502,
        "sender_full_name": "Moritz Waser",
        "timestamp": 1678981148
    },
    {
        "content": "<p>Could you also paste the output of <code>cargo fuzz fmt</code> with the same arguments as <code>cargo fuzz run</code>?</p>",
        "id": 342352124,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678981274
    },
    {
        "content": "<p>Sure, here's the output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>cargo fuzz fmt --no-default-features cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\n\nOutput of `std::fmt::Debug`:\n\n;; Fuzzgen test case\n\ntest interpret\ntest run\nset opt_level=speed\nset regalloc_checker=true\nset enable_alias_analysis=false\nset use_egraphs=false\nset enable_simd=true\nset enable_llvm_abi_extensions=true\nset unwind_info=false\nset machine_code_cfg_info=true\nset enable_jump_tables=false\nset enable_heap_access_spectre_mitigation=false\nset enable_table_access_spectre_mitigation=false\ntarget x86_64\nfunction u1:0(f64, i8 uext, i16 sext, f32, f32, f32, f32) system_v {\n    sig0 = (f32) -&gt; f32 system_v\n    sig1 = (f64) -&gt; f64 system_v\n    sig2 = (f32) -&gt; f32 system_v\n    sig3 = (f64) -&gt; f64 system_v\n    sig4 = (f32) -&gt; f32 system_v\n    sig5 = (f64) -&gt; f64 system_v\n    fn0 = colocated %CeilF32 sig0\n    fn1 = colocated %CeilF64 sig1\n    fn2 = colocated %FloorF32 sig2\n    fn3 = %FloorF64 sig3\n    fn4 = colocated %TruncF32 sig4\n    fn5 = colocated %TruncF64 sig5\n\nblock0(v0: f64, v1: i8, v2: i16, v3: f32, v4: f32, v5: f32, v6: f32):\n    v7 = iconst.i8 0\n    v8 = iconst.i16 0\n    v9 = iconst.i32 0\n    v10 = iconst.i64 0\n    v11 = uextend.i128 v10  ; v10 = 0\n    v12 = call fn4(v3)\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    nop\n    return\n}\n\n; Note: the results in the below test cases are simply a placeholder and probably will be wrong\n\n; run: u1:0(0.0, 0, 0, 0.0, 0.0, 0.0, 0.0)\n</code></pre></div>",
        "id": 342352674,
        "sender_full_name": "Moritz Waser",
        "timestamp": 1678981379
    },
    {
        "content": "<p>Interesting. I'm not immediately sure what's going on there. It's also worth trying <code>cargo fuzz tmin</code> to see if it can produce a smaller input that still fails.</p>",
        "id": 342353361,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678981515
    },
    {
        "content": "<p>I think this might be the Page Allocator issues that we have in cranelift-jit:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/issues/4000\">https://github.com/bytecodealliance/wasmtime/issues/4000</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4000\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4d40d1c1c0ac9779f6bb8d3acea19cf8089a0d30\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306137326432303362346262663262656566373461306532656566663533613964313865643962613239663730613639383461306439323734633733626430612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34303030)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4000\" title=\"Cranelift: JIT relocations depend on system allocator behaviour · Issue #4000 · bytecodealliance/wasmtime\">Cranelift: JIT relocations depend on system allocator behaviour · Issue #4000 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey, I&#39;m seeing crashes during finalize_definitions calls related to x86_64 call relocations: thread &#39;main&#39; panicked at &#39;called `Result::unwrap()` on an `Err` value: TryFromIntError...</div></div></div>",
        "id": 342353906,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1678981624
    },
    {
        "content": "<blockquote>\n<p>Digging further I found out that the fuzz_target!(|testcase: TestCase| { ... } in <a href=\"http://cranelift-fuzzgen.rs\">cranelift-fuzzgen.rs</a> was actually never called on the main branch.</p>\n</blockquote>\n<p>Can you explain? Looking at the code myself, it seemed like <code>fuzz_target!</code> is exporting a function calling the block you pass it</p>",
        "id": 342354204,
        "sender_full_name": "ghostway",
        "timestamp": 1678981682
    },
    {
        "content": "<p>Somewhat long shot, but does this reproduce with <code>--feature=selinux-fix</code>? I think that changes some behaviour wrt our allocator</p>",
        "id": 342354324,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1678981699
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>➜  wasmtime git:(052115589) ✗ RUST_BACKTRACE=1 cargo fuzz tmin --no-default-features cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\n    Finished release [optimized] target(s) in 0.50s\n    Finished release [optimized] target(s) in 0.48s\n     Running `target/x86_64-apple-darwin/release/cranelift-fuzzgen '-artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/' -minimize_crash=1 -runs=255 fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7`\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1527089668\nINFO: Loaded 1 modules   (1658758 inline 8-bit counters): 1658758 [0x10c601848, 0x10c7967ce),\nINFO: Loaded 1 PC tables (1658758 PCs): 1658758 [0x10c7967d0,0x10e0e6030),\nCRASH_MIN: minimizing crash input: 'fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7' (38 bytes)\nCRASH_MIN: executing: target/x86_64-apple-darwin/release/cranelift-fuzzgen -artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/ -runs=255 fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7 2&gt;&amp;1\nCRASH_MIN: 'fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7' (38 bytes) caused a crash. Will try to minimize it further\nCRASH_MIN: executing: target/x86_64-apple-darwin/release/cranelift-fuzzgen -artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/ -runs=255 fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7 -minimize_crash_internal_step=1 -exact_artifact_path=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/minimized-from-7ea007a1e42a044d3b2276afdc93befcdac5fca7 2&gt;&amp;1\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 1527432807\nINFO: Loaded 1 modules   (1658758 inline 8-bit counters): 1658758 [0x10a500848, 0x10a6957ce),\nINFO: Loaded 1 PC tables (1658758 PCs): 1658758 [0x10a6957d0,0x10bfe5030),\nAssertion failed: (Inputs-&gt;size() == 1), function MinimizeCrashInputInternalStep, file FuzzerDriver.cpp, line 491.\n==69520== ERROR: libFuzzer: deadly signal\n    #0 0x10d6cc185 in __sanitizer_print_stack_trace+0x35 (librustc-nightly_rt.asan.dylib:x86_64h+0x53185) (BuildId: d21cf6fbe4db36c3a2772a5990be16c5240000001000000000070a0000030c00)\n    #1 0x10922e82a in fuzzer::PrintStackTrace()+0x2a (cranelift-fuzzgen:x86_64+0x104e2c82a) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #2 0x1092214f3 in fuzzer::Fuzzer::CrashCallback()+0x43 (cranelift-fuzzgen:x86_64+0x104e1f4f3) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #3 0x7ff801402c1c in _sigtramp+0x1c (libsystem_platform.dylib:x86_64+0x3c1c) (BuildId: f314b62b98f43a7c82968739f8b6855a240000001000000000010d0000010d00)\n    #4 0x7ff8010b1d09 in dyld4::RuntimeState::_instantiateTLVs(unsigned long)+0xfb (dyld:x86_64+0xfffffffffff7ed09) (BuildId: bb7a09708c623dcea7a25cec9c501f1132000000200000000100000000010d00)\n    #5 0x7ff801321ca4 in abort+0x7a (libsystem_c.dylib:x86_64+0x81ca4) (BuildId: 376f7cb76dd23e00976f77dd755bdb0d32000000200000000100000000010d00)\n    #6 0x7ff801320fbd in __assert_rtn+0x139 (libsystem_c.dylib:x86_64+0x80fbd) (BuildId: 376f7cb76dd23e00976f77dd755bdb0d32000000200000000100000000010d00)\n    #7 0x109242d7c in fuzzer::MinimizeCrashInputInternalStep(fuzzer::Fuzzer*, fuzzer::InputCorpus*)+0xec (cranelift-fuzzgen:x86_64+0x104e40d7c) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #8 0x10924624e in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long))+0x19ae (cranelift-fuzzgen:x86_64+0x104e4424e) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #9 0x109254dc2 in main+0x22 (cranelift-fuzzgen:x86_64+0x104e52dc2) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #10 0x7ff8010a530f in start+0x97f (dyld:x86_64+0xfffffffffff7230f) (BuildId: bb7a09708c623dcea7a25cec9c501f1132000000200000000100000000010d00)\n\nNOTE: libFuzzer has rudimentary signal handlers.\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\nSUMMARY: libFuzzer: deadly signal\n*********************************\nNo such directory: /Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/minimized-from-7ea007a1e42a044d3b2276afdc93befcdac5fca7; exiting\n\n────────────────────────────────────────────────────────────────────────────────\n\nError: Test case minimization failed.\n\nUsually this isn't a hard error, and just means that libfuzzer\ndoesn't know how to minimize the test case any further while\nstill reproducing the original crash.\n\nSee the logs above for details.\n\nCaused by:\n    Command `\"cargo\" \"run\" \"--manifest-path\" \"/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/Cargo.toml\" \"--target\" \"x86_64-apple-darwin\" \"--release\" \"--no-default-features\" \"--bin\" \"cranelift-fuzzgen\" \"--\" \"-artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/\" \"-minimize_crash=1\" \"-runs=255\" \"fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\"` exited with exit status: 1\n</code></pre></div>",
        "id": 342354483,
        "sender_full_name": "Moritz Waser",
        "timestamp": 1678981726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span> I can explain that: changing the version of <code>arbitrary</code> changed the way that the fuzz input was interpreted, and caused us to reject it as an invalid format. So we couldn't construct the structured <code>TestCase</code> from it, and the actual fuzz target function didn't get called.</p>",
        "id": 342354853,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678981798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"561798\">@Moritz Waser</span>, based on the \"No such directory\" error message, I'm guessing that libFuzzer isn't correctly handling the space in the directory named \"Semester 8\"</p>",
        "id": 342355312,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678981895
    },
    {
        "content": "<p>Interesting, so you mean he compiled it after and used a dump that was created before? Or am I just misunderstanding</p>",
        "id": 342355402,
        "sender_full_name": "ghostway",
        "timestamp": 1678981913
    },
    {
        "content": "<p>Yeah, that's right: they were trying to check whether the failure occurred on <code>main</code> or if it was just introduced by their changes.</p>",
        "id": 342355679,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678981967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"561798\">@Moritz Waser</span> I'm curious about Afonso's question too: does building with <code>--feature=selinux-fix</code> make the error go away?</p>",
        "id": 342356116,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678982075
    },
    {
        "content": "<p>I'm trying to get the <code>cargo fuzz tmin</code>working  ... I'll check it in a minute</p>",
        "id": 342356365,
        "sender_full_name": "Moritz Waser",
        "timestamp": 1678982138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504918\">Jamey Sharp</span> <a href=\"#narrow/stream/217117-cranelift/topic/fuzz.20target.20-.20cranelift-fuzzgen/near/342356116\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"561798\">Moritz Waser</span> I'm curious about Afonso's question too: does building with <code>--feature=selinux-fix</code> make the error go away?</p>\n</blockquote>\n<p>Moritz is on macOS, in case <code>--feature=selinux-fix</code> doesn't apply to that</p>",
        "id": 342357820,
        "sender_full_name": "Remo Senekowitsch",
        "timestamp": 1678982448
    },
    {
        "content": "<p><code>--feature=selinux-fix</code> is on the cranelift-jit crate, rather than on the fuzz target!?<br>\nI activated it by including it into <code>default = [\"selinux-fix\"]</code> in the cranelift-jit crate, please let me know if that's the way to go.</p>\n<p>After making this change, the error still seems to be present:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>➜  wasmtime git:(052115589) ✗ RUST_BACKTRACE=1 cargo fuzz run --no-default-features  cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\n    Finished release [optimized] target(s) in 0.91s\n    Finished release [optimized] target(s) in 0.55s\n     Running `target/x86_64-apple-darwin/release/cranelift-fuzzgen '-artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/' fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7`\ncranelift-fuzzgen(72930,0x7ff844d088c0) malloc: nano zone abandoned due to inability to preallocate reserved vm space.\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 3006862256\nINFO: Loaded 1 modules   (1658758 inline 8-bit counters): 1658758 [0x10f783848, 0x10f9187ce),\nINFO: Loaded 1 PC tables (1658758 PCs): 1658758 [0x10f9187d0,0x111268030),\ntarget/x86_64-apple-darwin/release/cranelift-fuzzgen: Running 1 inputs 1 time(s) each.\nRunning: fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\nthread '&lt;unnamed&gt;' panicked at 'called `Result::unwrap()` on an `Err` value: TryFromIntError(())', cranelift/jit/src/compiled_blob.rs:51:80\nstack backtrace:\n   0: rust_begin_unwind\n             at /rustc/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library/std/src/panicking.rs:579:5\n   1: core::panicking::panic_fmt\n             at /rustc/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library/core/src/panicking.rs:64:14\n   2: core::result::unwrap_failed\n             at /rustc/f77bfb7336f21bfe6a5fb5f7358d4406e2597289/library/core/src/result.rs:1750:5\n   3: cranelift_jit::compiled_blob::CompiledBlob::perform_relocations\n   4: cranelift_jit::backend::JITModule::finalize_definitions\n   5: cranelift_filetests::function_runner::TestFileCompiler::compile\n   6: cranelift_fuzzgen::_::run\n   7: _rust_fuzzer_test_input\n   8: std::panicking::try::do_call\n   9: ___rust_try\n  10: _LLVMFuzzerTestOneInput\n  11: __ZN6fuzzer6Fuzzer15ExecuteCallbackEPKhm\n  12: __ZN6fuzzer10RunOneTestEPNS_6FuzzerEPKcm\n  13: __ZN6fuzzer12FuzzerDriverEPiPPPcPFiPKhmE\n  14: _main\n  15: &lt;unknown&gt;\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n==72930== ERROR: libFuzzer: deadly signal\n    #0 0x11294f185 in __sanitizer_print_stack_trace+0x35 (librustc-nightly_rt.asan.dylib:x86_64h+0x53185) (BuildId: d21cf6fbe4db36c3a2772a5990be16c5240000001000000000070a0000030c00)\n    #1 0x10e4b182a in fuzzer::PrintStackTrace()+0x2a (cranelift-fuzzgen:x86_64+0x104e2c82a) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #2 0x10e4a44f3 in fuzzer::Fuzzer::CrashCallback()+0x43 (cranelift-fuzzgen:x86_64+0x104e1f4f3) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #3 0x7ff801402c1c in _sigtramp+0x1c (libsystem_platform.dylib:x86_64+0x3c1c) (BuildId: f314b62b98f43a7c82968739f8b6855a240000001000000000010d0000010d00)\n    #4 0x7ff8010d775c in invocation function for block in dyld4::APIs::dlsym(void*, char const*)+0x7c (dyld:x86_64+0xfffffffffffa475c) (BuildId: bb7a09708c623dcea7a25cec9c501f1132000000200000000100000000010d00)\n    #5 0x7ff801321ca4 in abort+0x7a (libsystem_c.dylib:x86_64+0x81ca4) (BuildId: 376f7cb76dd23e00976f77dd755bdb0d32000000200000000100000000010d00)\n    #6 0x10e563a28 in std::sys::unix::abort_internal::h0bc47dd64a160659+0x8 (cranelift-fuzzgen:x86_64+0x104edea28) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #7 0x10e76b3f8 in std::process::abort::h25c584e2701866f2+0x8 (cranelift-fuzzgen:x86_64+0x1050e63f8) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #8 0x10e4a34bb in libfuzzer_sys::initialize::_$u7b$$u7b$closure$u7d$$u7d$::h10ee930a6387ab24+0xab (cranelift-fuzzgen:x86_64+0x104e1e4bb) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #9 0x10e559f0b in std::panicking::rust_panic_with_hook::h3da33b5c881860c3+0x24b (cranelift-fuzzgen:x86_64+0x104ed4f0b) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #10 0x10e559ca3 in std::panicking::begin_panic_handler::_$u7b$$u7b$closure$u7d$$u7d$::h85aa2f2668cf394b+0xc3 (cranelift-fuzzgen:x86_64+0x104ed4ca3) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #11 0x10e556ab8 in std::sys_common::backtrace::__rust_end_short_backtrace::he4c57c0787d4f563+0x8 (cranelift-fuzzgen:x86_64+0x104ed1ab8) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #12 0x10e55996c in rust_begin_unwind+0x6c (cranelift-fuzzgen:x86_64+0x104ed496c) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #13 0x10e76e142 in core::panicking::panic_fmt::h485ba1360a5b9d54+0x32 (cranelift-fuzzgen:x86_64+0x1050e9142) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #14 0x10e76e5d4 in core::result::unwrap_failed::hfa2c76314834bbf0+0x74 (cranelift-fuzzgen:x86_64+0x1050e95d4) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #15 0x10b794802 in cranelift_jit::compiled_blob::CompiledBlob::perform_relocations::h8856c1569729ccd9+0xbc2 (cranelift-fuzzgen:x86_64+0x10210f802) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #16 0x10b784459 in cranelift_jit::backend::JITModule::finalize_definitions::hb4fba36453194359+0x539 (cranelift-fuzzgen:x86_64+0x1020ff459) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #17 0x109ee03f5 in cranelift_filetests::function_runner::TestFileCompiler::compile::h5f3773f305f7373d+0x1b5 (cranelift-fuzzgen:x86_64+0x10085b3f5) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #18 0x10971fade in cranelift_fuzzgen::_::run::hcd37998cabf702ce+0x5ce (cranelift-fuzzgen:x86_64+0x10009aade) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #19 0x10971e9c5 in rust_fuzzer_test_input+0x835 (cranelift-fuzzgen:x86_64+0x1000999c5) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #20 0x10e49e8f2 in std::panicking::try::do_call::h3a14e111a10954b4+0xd2 (cranelift-fuzzgen:x86_64+0x104e198f2) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #21 0x10e4a3693 in __rust_try+0x13 (cranelift-fuzzgen:x86_64+0x104e1e693) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #22 0x10e4a29ad in LLVMFuzzerTestOneInput+0x1ed (cranelift-fuzzgen:x86_64+0x104e1d9ad) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #23 0x10e4a5e6e in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long)+0x12e (cranelift-fuzzgen:x86_64+0x104e20e6e) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #24 0x10e4c3bab in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)+0xdb (cranelift-fuzzgen:x86_64+0x104e3ebab) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #25 0x10e4c99d8 in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long))+0x2138 (cranelift-fuzzgen:x86_64+0x104e449d8) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #26 0x10e4d7dc2 in main+0x22 (cranelift-fuzzgen:x86_64+0x104e52dc2) (BuildId: 0638d55c9ac83add940a33799dde180332000000200000000100000000000d00)\n    #27 0x7ff8010a530f in start+0x97f (dyld:x86_64+0xfffffffffff7230f) (BuildId: bb7a09708c623dcea7a25cec9c501f1132000000200000000100000000010d00)\n\nNOTE: libFuzzer has rudimentary signal handlers.\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\nSUMMARY: libFuzzer: deadly signal\n────────────────────────────────────────────────────────────────────────────────\n\nError: Fuzz target exited with exit status: 77\n</code></pre></div>",
        "id": 342360645,
        "sender_full_name": "Moritz Waser",
        "timestamp": 1678983047
    },
    {
        "content": "<p>About <code>cargo fuzz tmin ...</code>:<br>\nIt seems to not be that easy to just create a symlink from /tmp/wasmtime to my wasmtime path that includes a space.</p>\n<p>I therefore extracted the following command from the output of <code>RUST_BACKTRACE=1 cargo fuzz tmin --no-default-features cranelift-fuzzgen fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7</code><br>\nand added the necessary quotes myself.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>➜  wasmtime git:(052115589) ✗ target/x86_64-apple-darwin/release/cranelift-fuzzgen \"-artifact_prefix=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/\" -runs=255 \"fuzz/artifacts/cranelift-fuzzgen/crash-7ea007a1e42a044d3b2276afdc93befcdac5fca7\" -minimize_crash_internal_step=1 \"-exact_artifact_path=/Users/mo_priv/Desktop/Studium/Semester 8/BA/wasmtime/fuzz/artifacts/cranelift-fuzzgen/minimized-from-7ea007a1e42a044d3b2276afdc93befcdac5fca7\"\ncranelift-fuzzgen(73599,0x7ff844d088c0) malloc: nano zone abandoned due to inability to preallocate reserved vm space.\nINFO: Running with entropic power schedule (0xFF, 100).\nINFO: Seed: 3368144992\nINFO: Loaded 1 modules   (1658758 inline 8-bit counters): 1658758 [0x112dbf848, 0x112f547ce),\nINFO: Loaded 1 PC tables (1658758 PCs): 1658758 [0x112f547d0,0x1148a4030),\nINFO: Starting MinimizeCrashInputInternalStep: 38\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 38 bytes\nINFO: Done MinimizeCrashInputInternalStep, no crashes found\n</code></pre></div>",
        "id": 342363033,
        "sender_full_name": "Moritz Waser",
        "timestamp": 1678983644
    },
    {
        "content": "<p>Would you be able to try the following test case via clif-util?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span>\n<span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">uext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">sext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">sig4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"nc\">system_v</span>\n<span class=\"w\">    </span><span class=\"n\">fn4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">colocated</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">TruncF32</span><span class=\"w\"> </span><span class=\"n\">sig4</span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>: <span class=\"kt\">i8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span>: <span class=\"kt\">i16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v4</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v5</span>: <span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span>: <span class=\"kt\">f32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"n\">v12</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn4</span><span class=\"p\">(</span><span class=\"n\">v3</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v7</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>I think this runs essentially what the fuzzer is seeing, but outside the fuzzer. You can run this with: <code>cd cranelift &amp;&amp; cargo run test ./the-above.clif</code></p>",
        "id": 342364684,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1678983996
    },
    {
        "content": "<p>you could also try disabling ASan and see if that gets you any further</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sanitizer</span><span class=\"o\">=</span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>",
        "id": 342366827,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1678984505
    }
]