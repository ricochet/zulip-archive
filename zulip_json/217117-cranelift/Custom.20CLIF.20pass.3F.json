[
    {
        "content": "<p>Is it possible to plug in a custom CLIF pass? I'm coming into cranelift from an assembly like language and don't have a nice SSA representation, but there are a few domain specific lowerings and transforms that I'd like to do. Ideally, there'd be a way to run a pass after initial conversion to SSA, copy prop and dead code elimination...?</p>",
        "id": 365652416,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1686596019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"468750\">@Kristian H. Kristensen</span> we don't have a \"pass manager\" a la LLVM, but there's nothing stopping you from mutating the function body before invoking final code generation. The <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/struct.Context.html\"><code>Context</code></a> exposes <code>func</code> publicly and so you could write a pass that traverses and transforms that prior to calling <code>compile_and_emit</code></p>",
        "id": 365653696,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1686596355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> nice, I'll take a look.  I like the more manual approach better anyway, I'm always fighting the LLVM pass manager to find the right place to plug in.</p>",
        "id": 365654915,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1686596666
    },
    {
        "content": "<p>You can't modify the function in between existing passes though, so if you want some of our existing passes to fix up your input for you that's a bit of a pain. But you could call <code>Context::optimize</code> yourself, although the documentation says it's \"Public only for testing purposes.\" If you want that, you'd call <code>optimize</code>, then do your modifications, then let <code>compile_and_emit</code> run optimizations again.</p>",
        "id": 365655216,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1686596755
    },
    {
        "content": "<p>Hi Jamey! Ok, noted.</p>",
        "id": 365655878,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1686596924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"468750\">@Kristian H. Kristensen</span> Oh hey, I didn't recognize your last name, hi! I don't suppose you're starting from some IR in Mesa, are you? I would certainly enjoy seeing Cranelift used there <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 365658032,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1686597579
    },
    {
        "content": "<p>No, this isn't mesa related, but I think there's also a lot of overlap between the mesa internal IR (nir) and what cranelift does... and nir is a very nice IR, although it's not written in rust!</p>",
        "id": 365663976,
        "sender_full_name": "Kristian H. Kristensen",
        "timestamp": 1686598195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"468750\">Kristian H. Kristensen</span> <a href=\"#narrow/stream/217117-cranelift/topic/Custom.20CLIF.20pass.3F/near/365652416\">said</a>:</p>\n<blockquote>\n<p>Is it possible to plug in a custom CLIF pass? I'm coming into cranelift from an assembly like language and don't have a nice SSA representation, but there are a few domain specific lowerings and transforms that I'd like to do. Ideally, there'd be a way to run a pass after initial conversion to SSA, copy prop and dead code elimination...?</p>\n</blockquote>\n<p>If there is some optimizations you think could be added, is this something cranelift could benefit from if included in their project?</p>",
        "id": 367255895,
        "sender_full_name": "Chris Clark",
        "timestamp": 1687038806
    }
]