[
    {
        "content": "<p>Does anyone know more about how rust &lt;-&gt; JIT'd CLIF interop works?<br>\nI know it's possible to return values from CLIF to rust, but:</p>\n<ul>\n<li>How does multiple returns map to rust? That is, how can I call a CLIF function with a casted fnptr and extract multiple returns as the return value? Tuples sorta work but seem to have weird alignment issues depending on the setup</li>\n<li>Is it possible to return a very large struct on the stack to rust?</li>\n<li>What <em>exactly</em> are the semantics of the special return types? I've seen another discussion of them here but I still don't understand what their purpose is, particularly the struct returns</li>\n<li>Is it possible to call rust functions from CLIF by passing in fnptrs?</li>\n</ul>\n<p>Slightly unrelated question: will excessive <code>Variable</code>s from cranelift_frontend be allocated on the stack when necessary? </p>\n<p>I may have a lot more questions, I've been trying to answer them myself but it's difficult to get much information in some places.</p>",
        "id": 321412183,
        "sender_full_name": "PROMETHIA",
        "timestamp": 1673733261
    },
    {
        "content": "<ol>\n<li>This depends on the abi. I would not recommend using multiple return values on an FFI boundary.</li>\n<li>You can pass a pointer as argument where the return value should be written. This also what most ABI's internally do.</li>\n<li>Each one has different semantics. For the StructReturn one specificially, when applied to a return pointer (like in my answer number 2) it makes it match the C ABI for returning structs.</li>\n<li>Yes, but you have to use <code>extern \"C\"</code> like all interaction with the jitted code. The default rust abi is unstable. You can use the call_indirect clif instruction.</li>\n</ol>\n<p>For the last question, the register allocator will spill values to the stack if necessary.</p>",
        "id": 321422402,
        "sender_full_name": "bjorn3",
        "timestamp": 1673742250
    },
    {
        "content": "<p>Ah, great. That mostly lines up with what I was thinking. I'm still confused about the StructReturn/StructArgument ones though, what do you mean by \"matches the C ABI for returning structs\"? I thought it's just passing around a pointer, are they somehow passing it around in a more complex way or have some kind of further restrictions on what they can do with the pointer?</p>",
        "id": 321423417,
        "sender_full_name": "PROMETHIA",
        "timestamp": 1673742957
    },
    {
        "content": "<p>For returning structs, most ABI's pass in a pointer. Some ABI's however don't pass it in a regular argument register, but pass it in one dedicated for this purpose. StructReturn ensures that this register is used on targets that have a dedicated return pointer register.</p>\n<p>For passing in structs, ABI's generally either expand it into multiple register values (you have to do this yourself) or if that isn't possible due to for example the size they often pass it on a specific place on the stack. StructArgument copies the value pointed to by the pointer argument to the right place on the stack. (or just passes it as pointer on ABI's that pass using pointers rather than specific stack offsets) On the callee side the StructArgument pointer will point to the stack location where the argument was copied rather than the original pointer that was pass to the call instruction on the callers side.</p>",
        "id": 321462473,
        "sender_full_name": "bjorn3",
        "timestamp": 1673777058
    }
]