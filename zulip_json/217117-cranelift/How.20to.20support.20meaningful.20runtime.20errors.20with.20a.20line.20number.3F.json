[
    {
        "content": "<p>Hello there,</p>\n<p>I'm implementing a toy programming language similar to javascript. being dynamically typed means more errors can only be detected during runtime. I want to be able to support meaningful error messages, including line number, token position, call stacks etc. But looking at the jit example, I don't know how this should be implemented. </p>\n<p>I have 2 naive ideas. The first is defining a global function in rust and exposing it to my language. The purpose of the function is to report the current line number and token position. When generating the IR code, as soon as line number has changed, I insert a call to the above function to report such change to my runtime. In my runtime, I maintain a storage for these meta data. When an issue happens, I pull and print out the current line number.</p>\n<p>But this must be very inefficient. </p>\n<p>Another idea I have is when I generate the IR code, if the builder.ins().xxx functions could generate a location id, I can then maintain a mapping from the location id to line number. When IR code fails, I can know the location id and use it to look for the line number? like symbol files. </p>\n<p>I'm not sure how this is implemented in a real programming language?</p>\n<p>on a side note, I'm also interested in knowing how to implement break point.</p>",
        "id": 224076010,
        "sender_full_name": "Shi Yan",
        "timestamp": 1611683191
    },
    {
        "content": "<p>Hi! There's actually a way to do this more efficiently, as you've guessed. The location id already exists, it's called <code>SourceLoc</code> in Cranelift (you can also grep for <code>srcloc</code>, which is the recurring variable name for those): you basically feed it with an index (which can be an index into a map with more metadata, like token pos, line number; or it can be a straightforward line number, for instance). Then, I don't quite know how it is passed in the JIT crate, but the CodeSink impls get information about source location + the event to which they're associated (trap =&gt; trap code, for instance), and when recovering on error, you can map from the trap code offset to the source location. (Since my understanding of the JIT crate is a bit limited, there might be other ways to do this in a simpler way!)</p>",
        "id": 224216339,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1611768549
    },
    {
        "content": "<p>When using <code>cranelift-module</code> for <code>SourceLoc</code> you will need to access the <code>context</code> after being passed into <code>define_function</code> like so: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/ae6daf77ba9762f4f118b2342298ce5fa2e32a7a/src/debuginfo/line_info.rs#L205-L240\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/ae6daf77ba9762f4f118b2342298ce5fa2e32a7a/src/debuginfo/line_info.rs#L205-L240</a> For <code>TrapCode</code> the last argument of <code>define_function</code> is an implementor of the <code>TrapSink</code> trait.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/ae6daf77ba9762f4f118b2342298ce5fa2e32a7a/src/debuginfo/line_info.rs#L205-L240\" style=\"background-image: url(https://avatars.githubusercontent.com/u/17426603?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/ae6daf77ba9762f4f118b2342298ce5fa2e32a7a/src/debuginfo/line_info.rs#L205-L240\" title=\"bjorn3/rustc_codegen_cranelift\">bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 224216902,
        "sender_full_name": "bjorn3",
        "timestamp": 1611768743
    },
    {
        "content": "<p>Thank you very much!</p>",
        "id": 224371280,
        "sender_full_name": "Shi Yan",
        "timestamp": 1611858662
    }
]