[
    {
        "content": "<p>Hi,<br>\nI've been re-implementing my flexible vector hacks using isle, and I'm enjoying the DSL, but I'm wondering if there's any technical obstacle to organising the isle files by architecture features, so for aarch64: (1) scalar (2) Neon (3) SVE? I'm assuming it would be possible but would it be pretty? I'd like to have a logic separation but avoid duplicating much code.</p>",
        "id": 262457424,
        "sender_full_name": "Sam Parker",
        "timestamp": 1637675325
    },
    {
        "content": "<p>AFAIK this would be quite easy to do, it'd basically just be an edit to cranelift's build script to add in one more <code>*.isle</code> file and then you'd add contents as usual. I believe there's just one \"namespace\" right now so the division into files is purely for humans</p>",
        "id": 262467783,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1637680049
    },
    {
        "content": "<p>Okay, thanks, I'll give it a go.</p>",
        "id": 262469649,
        "sender_full_name": "Sam Parker",
        "timestamp": 1637680768
    },
    {
        "content": "<p>Yep, that worked nicely! Thanks again</p>",
        "id": 262470631,
        "sender_full_name": "Sam Parker",
        "timestamp": 1637681227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421408\">@Sam Parker</span> happy to hear things are working out for you with the DSL! We're working on documenting stuff now, so if there are any non-obvious or confusing bits, feedback is especially useful :-)</p>",
        "id": 262493886,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1637691511
    },
    {
        "content": "<p>It seems fairly intuitive so far, especially with the existing work in the aarch64 and x64 backends to look at. I'm feeling much more productive than when I first used tablegen for sure :)</p>",
        "id": 262560044,
        "sender_full_name": "Sam Parker",
        "timestamp": 1637743847
    },
    {
        "content": "<p>And my only gripe so far is that the DSL makes the encoding and register mapping process feel even more laborious and clumsy than before! I get to write some concise pattern matching and then have to revert to copy-paste some rust code in different places. Do you think there's a possible route to extend isle to handle some of the details of the instruction descriptions..?</p>",
        "id": 262566432,
        "sender_full_name": "Sam Parker",
        "timestamp": 1637747479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421408\">@Sam Parker</span> yes, the plan is to cover those with some automated codegen as well; <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> is planning on doing something with some yaml/toml-to-Rust magic so we can say \"inst X with these fields, reads this reg, writes this reg\"</p>",
        "id": 262611091,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1637771501
    },
    {
        "content": "<p>not a full DSL but more like a schema description with metadata</p>",
        "id": 262611174,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1637771527
    },
    {
        "content": "<p>Ah, wonderful!</p>",
        "id": 262612084,
        "sender_full_name": "Sam Parker",
        "timestamp": 1637771924
    }
]