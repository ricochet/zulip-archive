[
    {
        "content": "<p>Hi all, I'm having some trouble figuring out how to combine <code>bint + iconst + icmp + brnz</code> properly and would appreciate some help.</p>\n<p>I have a function that looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">block0</span>:\n        <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bconst</span><span class=\"p\">.</span><span class=\"n\">b64</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bint</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">brnz</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block1</span>:\n        <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">30</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">block2</span>:\n        <span class=\"nc\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and my issue is that <code>block0</code> never branches to <code>block1</code> despite the condition being essentially <code>true == 1</code> I assume that the <code>icmp_imm eq</code> returned value would use <code>b1</code> set as <code>true</code> so that the following <code>brnz</code> would branch correctly but since it isn't I can assume that either:</p>\n<ul>\n<li>it does not do that and <code>0 as b1</code> means true here or</li>\n<li>the result really is false which is weird since I'd expect casting a <code>b64</code> <code>true</code> to <code>i64</code> would have a value of <code>1</code> .</li>\n</ul>\n<p>Am I misunderstanding anything here? I can't tell where the error is.</p>",
        "id": 236711476,
        "sender_full_name": "mental",
        "timestamp": 1619716654
    },
    {
        "content": "<p>True is represented as 1. does it work with bconst.b1? What does the function you currently have dosassemble to? In either case I think there is a bug in Cranelift.</p>",
        "id": 236729311,
        "sender_full_name": "bjorn3",
        "timestamp": 1619723706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274433\">@mental</span></p>",
        "id": 236729332,
        "sender_full_name": "bjorn3",
        "timestamp": 1619723718
    },
    {
        "content": "<p>Can you open an issue?</p>",
        "id": 236729372,
        "sender_full_name": "bjorn3",
        "timestamp": 1619723736
    },
    {
        "content": "<p>It's a <code>b64</code> in the code that I posted but I first got the issue when I was using <code>b8</code> and assume it was some sort of casting-related-UB, I'll try it with <code>b1</code> and let you know.</p>\n<p>I'm currently using cranelift-object + cranelift-module to produce the object files which are later linked using the system<code>cc</code>. that particular function there is a C main.</p>",
        "id": 236729653,
        "sender_full_name": "mental",
        "timestamp": 1619723852
    },
    {
        "content": "<p>Will open an issue later on <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 236729760,
        "sender_full_name": "mental",
        "timestamp": 1619723886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274433\">@mental</span> I'm not sure what's going on with <code>bint</code> here, but fwiw, <code>b64</code> is not commonly used -- <code>b1</code> is more common for scalar booleans. Could you try with that? Also, the <code>icmp</code> should not be necessary -- you can just <code>brnz</code> directly on the <code>bint</code> result</p>",
        "id": 236731822,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619724727
    }
]