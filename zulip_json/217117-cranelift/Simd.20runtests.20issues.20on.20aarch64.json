[
    {
        "content": "<p>Hello, I am trying to create some \"runtests\" for simd comparisons on aarch64. At the moment I am getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"></span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">simd_icmp_eq_i32</span><span class=\"p\">(</span><span class=\"n\">i32x4</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">b32x4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"nc\">i32x4</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">splat</span><span class=\"p\">.</span><span class=\"n\">i32x4</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">simd_icmp_eq_i32</span><span class=\"p\">([</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"err\">`</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">right</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">left</span>: <span class=\"err\">`</span><span class=\"n\">V128</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">right</span>: <span class=\"err\">`</span><span class=\"n\">I64</span><span class=\"err\">`</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift</span><span class=\"o\">/</span><span class=\"n\">codegen</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">isa</span><span class=\"o\">/</span><span class=\"n\">aarch64</span><span class=\"o\">/</span><span class=\"n\">inst</span><span class=\"o\">/</span><span class=\"n\">emit</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">101</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is there a way around this error?<br>\n(Also the \"simd-comparison.clif\" file runs tests just by using \";  run\", what does this mean?)</p>",
        "id": 273515090,
        "sender_full_name": "Freddie Liardet",
        "timestamp": 1646065455
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"465607\">@Freddie Liardet</span> that's quite odd that we wouldn't have seen that before. I'm not actually able to reproduce -- tested just now with latest <code>main</code> of <code>2a6969d2bd9652d4c0f4992dc78664d6ff840fcd</code>, on an aarch64 machine and with your exact <code>temp.clif</code>, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfallin</span><span class=\"o\">@</span><span class=\"n\">arm2</span><span class=\"o\">-</span><span class=\"n\">ci</span>:<span class=\"o\">~/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">clif</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">cfallin</span><span class=\"o\">/</span><span class=\"n\">temp</span><span class=\"p\">.</span><span class=\"n\">clif</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"></span>\n<span class=\"n\">cfallin</span><span class=\"o\">@</span><span class=\"n\">arm2</span><span class=\"o\">-</span><span class=\"n\">ci</span>:<span class=\"o\">~/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"cp\">$</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'll note too that usually we execute tests with <code>clif-util test file.clif</code> (<code>run</code> just executes functions, it doesn't handle test directives); if I do <code>clif-util test temp.clif</code> and add a <code>target aarch64</code> under <code>test run</code> (the test harness needs to know which target(s) a test is meant for), it passes successfully</p>",
        "id": 273525719,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646069811
    },
    {
        "content": "<p>On a similar note, how many SIMD runtests do we have for comparisons? From my quick browsing it looks like all but one test are for the interpreter only. The test which does run for a target doesn't check the results of the functions... any ideas why?</p>",
        "id": 273602996,
        "sender_full_name": "Sam Parker",
        "timestamp": 1646122345
    },
    {
        "content": "<p>So, I've just run this on two different aarch64 machines and found the same bug. as <span class=\"user-mention\" data-user-id=\"465607\">@Freddie Liardet</span> . I've tracked it down to the lowering of Bint, which doesn't support vectors but the type check fails as it looks as the output, rather than the input. So I can only assume that bint hasn't been tested for aarch64..? But I think I'm more concerned that you're not seeing the same problem <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> , any ideas of the divergence?</p>",
        "id": 273622148,
        "sender_full_name": "Sam Parker",
        "timestamp": 1646132169
    },
    {
        "content": "<p>Also, from what I can tell bint only supports vector types, so I'm so confused about what is going on in the aarch64 backend :)</p>",
        "id": 273623571,
        "sender_full_name": "Sam Parker",
        "timestamp": 1646132790
    },
    {
        "content": "<p><code>bint</code> supports any bool type as input.</p>",
        "id": 273630273,
        "sender_full_name": "bjorn3",
        "timestamp": 1646136495
    },
    {
        "content": "<p>Ah, I was missing the last <code>; run...</code> directive, sorry about that. Yes, I see the same assert</p>",
        "id": 273685722,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646158469
    },
    {
        "content": "<p><code>bint</code> should support scalars and vectors, as bjorn3 says; it appears it only supports vectors in aarch64 right now</p>",
        "id": 273685768,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646158492
    },
    {
        "content": "<p>bools aren't used at all by the cranelift-wasm frontend, so I'm not surprised this hasn't been adequately exercised</p>",
        "id": 273685807,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646158513
    },
    {
        "content": "<p>at some point when we are able to extend CLIF-level fuzzing to cover all the CLIF opcodes, we should have better coverage for issues like this</p>",
        "id": 273685856,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646158532
    },
    {
        "content": "<p>Ah, sorry, the instruction description was a bit misleading. Do we know what forms of vector bools other frontends use? And if they not used, and not really tested, do we need them..? I know boolean representation is being tracked in #3205 but that doesn't seem to have progressed recently.</p>",
        "id": 273771646,
        "sender_full_name": "Sam Parker",
        "timestamp": 1646209888
    },
    {
        "content": "<p>Yeah, that's definitely a good question, I'm not as familiar with what is used by other frontends; <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  do you use greater-than-1-bit bools in cg_clif?</p>\n<p>I'm hoping to get around to regularizing and cleaning up which opcodes take which types eventually; possibly when the current push with ISLE and ra2 integration ends I can give it a closer look. In any case all of this should be better-documented, sorry :-)</p>",
        "id": 273855433,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646246117
    },
    {
        "content": "<p>I don't use them for scalar code. I may use them in the future for simd masks.</p>",
        "id": 273855659,
        "sender_full_name": "bjorn3",
        "timestamp": 1646246217
    },
    {
        "content": "<p>I think that issues with <code>bint</code> on AArch64 have been encountered before, e.g. check issue <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3335\">#3335</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3335\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2351c7c807d00ab91c8a517a300770414b216635\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613761303934306634663264363838356562613161353163363964346261363433646364353034386132613365396239356162363665383134303463393930662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33333335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3335\" title=\"Cranelift: SIMD `icmp` fails to compile on aarch64 backend · Issue #3335 · bytecodealliance/wasmtime\">Cranelift: SIMD `icmp` fails to compile on aarch64 backend · Issue #3335 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey, It looks like SIMD icmp is failing to compile on aarch64. We have a similar situation on #3334 for x64, but for different reasons. The test below is only for icmp eq, but this fails for any co...</div></div></div>",
        "id": 273860086,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1646247881
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 273904529,
        "sender_full_name": "uwu",
        "timestamp": 1646268795
    }
]