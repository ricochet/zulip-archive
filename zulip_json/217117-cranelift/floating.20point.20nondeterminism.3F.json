[
    {
        "content": "<p>How much nondeterminism do we expect from wasm / in cranelift with regards to floating point numbers? I know there is some, but I'm not actually familiar with where it comes from. <a href=\"https://webassembly.org/docs/nondeterminism/\" target=\"_blank\" title=\"https://webassembly.org/docs/nondeterminism/\">https://webassembly.org/docs/nondeterminism/</a> suggests that this should just be the sign bit of NaNs.</p>\n<p>Asking because the fuzzers have found a Wasm test case that returns different floating point values when compiled with and without optimizations, and I'd like to know whether to investigate further or to disable differential fuzzing on wasm that contains floating point numbers. Or just ignore NaNs? FWIW, for this test case, neither returned value is a NaN.</p>\n<p>+cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span></p>",
        "id": 190763563,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1584383906
    },
    {
        "content": "<p>We expect floating-point numeric results to be fully deterministic.</p>",
        "id": 190771971,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584388603
    },
    {
        "content": "<p>I'd be very interested in a case where disabling optimization changes a numeric (non-NaN) result.</p>",
        "id": 190772000,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584388621
    },
    {
        "content": "<p>FWIW, Cranelift also has a <code>canonicalize_nans</code> flag which causes it to generate fully deterministic NaNs too, which may be useful for fuzzing.</p>",
        "id": 190772199,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584388714
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1331\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1331\">https://github.com/bytecodealliance/wasmtime/issues/1331</a> for the differential fuzzing issue. Still working on reducing the test case further.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1331\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1331\" target=\"_blank\" title=\"Cranelift: different results when Wasm module is compiled without optimizations vs with speed-and-size optimizations · Issue #1331 · bytecodealliance/wasmtime\">Cranelift: different results when Wasm module is compiled without optimizations vs with speed-and-size optimizations · Issue #1331 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This test case, produced by wasm-opt -ttf, produces different results for function 5 when compiled with speed-and-size optimizations vs without any optimizations: WAT test case (module (type (;0;) ...</div></div></div>",
        "id": 190787722,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1584397552
    },
    {
        "content": "<p>And filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1332\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1332\">https://github.com/bytecodealliance/wasmtime/issues/1332</a> for canonicalizing NaNs when fuzzing</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1332\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1332\" target=\"_blank\" title=\"Canonicalize NaNs when fuzzing · Issue #1332 · bytecodealliance/wasmtime\">Canonicalize NaNs when fuzzing · Issue #1332 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In Config::new in crates/api/src/runtime.rs, we should conditionally enable the canonicalize_nans cranelift option when we&#39;re being built for fuzzing: #[cfg(fuzzing)] flags.set(&quot;enable_nan...</div></div></div>",
        "id": 190788546,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1584398105
    },
    {
        "content": "<p>When I run the .wat file manually with wasmtime --invoke func_5, in a build with debug-assertions enabled, I get a cranelift IR verifier error, in what looks like a regalloc problem</p>",
        "id": 190788604,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584398150
    },
    {
        "content": "<p>tracked down why the fuzz targets weren't failing in the verifier: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1333\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1333\">https://github.com/bytecodealliance/wasmtime/pull/1333</a></p>\n<p>care to review that <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1333\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1333\" target=\"_blank\" title=\"fuzzing: Enable Cranelift's IR verifier for differential fuzzing by fitzgen · Pull Request #1333 · bytecodealliance/wasmtime\">fuzzing: Enable Cranelift's IR verifier for differential fuzzing by fitzgen · Pull Request #1333 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">The reason we weren&#39;t seeing the verifier errors in the fuzz targers in #1331 but were seeing them via wasmtime --invoke was because the differential fuzzing configs forgot to enable the IR ver...</div></div></div>",
        "id": 190792406,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1584401081
    },
    {
        "content": "<p>r+</p>",
        "id": 190792434,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584401119
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/217117-cranelift/topic/floating.20point.20nondeterminism.3F/near/190772000\">said</a>:</p>\n<blockquote>\n<p>I'd be very interested in a case where disabling optimization changes a numeric (non-NaN) result.</p>\n</blockquote>\n<p>I assume this means wasm spec disallows opts like gcc does with fast-math (eg a*b+c to fma(a, b, c)) and so they’re not (and will not) be implemented</p>",
        "id": 435388517,
        "sender_full_name": "Kirp",
        "timestamp": 1714051393
    }
]