[
    {
        "content": "<p>I can't find how to generate and use stack maps. Does anyone have any examples?</p>",
        "id": 197794752,
        "sender_full_name": "osa1",
        "timestamp": 1589634079
    },
    {
        "content": "<p>You first need to set the <code>enable_safepoints</code> flag when creating the <code>TargetIsa</code>. To then get the stackmap you can't use cranelift-simplejit, cranelift-faerie or cranelift-object, as they don't have support for it. Instead you have manually call <code>context.compile_and_emit</code>and pass a <code>StackmapSink</code>. This does mean that you will have to do everything from allocating memory (for a jit) / writing an object file (for aot compilation) to handling all relocations. It is probably easier to add stackmap support to cranelift-simplejit, cranelift-faerie or cranelift-object.</p>",
        "id": 197795638,
        "sender_full_name": "bjorn3",
        "timestamp": 1589635513
    },
    {
        "content": "<p>Hmm, this is unfortunate.. Is there an open issue about adding stack maps to <code>cranelift-object</code>? Perhaps I can help with that.</p>",
        "id": 197800594,
        "sender_full_name": "osa1",
        "timestamp": 1589642536
    },
    {
        "content": "<p>Is there any other way (even if hacky) to get live variables from cranelift backend somehow?</p>",
        "id": 197800691,
        "sender_full_name": "osa1",
        "timestamp": 1589642675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Generating.20stack.20maps.3F/near/197800594\">said</a>:</p>\n<blockquote>\n<p>Hmm, this is unfortunate.. Is there an open issue about adding stack maps to <code>cranelift-object</code>? Perhaps I can help with that.</p>\n</blockquote>\n<p>Not that I know.</p>",
        "id": 197803444,
        "sender_full_name": "bjorn3",
        "timestamp": 1589646701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Generating.20stack.20maps.3F/near/197800691\">said</a>:</p>\n<blockquote>\n<p>Is there any other way (even if hacky) to get live variables from cranelift backend somehow?</p>\n</blockquote>\n<p>What do you need it for?</p>",
        "id": 197803447,
        "sender_full_name": "bjorn3",
        "timestamp": 1589646710
    },
    {
        "content": "<p>Garbage collection</p>",
        "id": 197803584,
        "sender_full_name": "osa1",
        "timestamp": 1589646924
    },
    {
        "content": "<p>Does any of the backends have stack map support currently? Which one(s)?</p>",
        "id": 197806936,
        "sender_full_name": "osa1",
        "timestamp": 1589651592
    },
    {
        "content": "<p>How do wasm people do GC?</p>",
        "id": 197807192,
        "sender_full_name": "osa1",
        "timestamp": 1589651898
    },
    {
        "content": "<p>Wasmtime doesn't use the <code>cranelift-module</code> interface at all. Instead it uses <code>context.compile_and_emit</code>. Also Wasmtime doesn't have GC support yet. The current stackmap implementation is basically only used by the (disabled by default) Cranelift based WASM backend for Spidermonkey (js engine of firefox)</p>",
        "id": 197809043,
        "sender_full_name": "bjorn3",
        "timestamp": 1589654817
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> . How hard do you think it would be to implement stackmap support to cranelift-module/cranelift-object? Also, do you think it would be merged if implemented?</p>",
        "id": 197809061,
        "sender_full_name": "osa1",
        "timestamp": 1589654871
    },
    {
        "content": "<p>I'm only a user now, but I may have some time next week to work on this</p>",
        "id": 197809108,
        "sender_full_name": "osa1",
        "timestamp": 1589654896
    },
    {
        "content": "<p><code>module.define_function</code> already takes a <code>TrapSink</code> argument. A new <code>StackmapSink</code> would work, but maybe both should be bundled together into one argument to avoid having many arguments. (others may have another opinion about this) I think this will likely be merged given that <code>TrapSink</code> is already an argument.</p>",
        "id": 197809200,
        "sender_full_name": "bjorn3",
        "timestamp": 1589655027
    },
    {
        "content": "<p>I have no idea what <code>TrapSink</code> is ... where do I start reading if I wanted to implement this?</p>",
        "id": 197809230,
        "sender_full_name": "osa1",
        "timestamp": 1589655100
    },
    {
        "content": "<p>Both <code>TrapSink</code> and <code>StackmapSink</code> are defined in <a href=\"https://docs.rs/cranelift-codegen/0.63.0/cranelift_codegen/binemit/index.html\"><code>cranelift_codegen::binemit</code></a>. <code>TrapSink</code> basically records for every instruction that can trap the position and what the trap code is.</p>",
        "id": 197809344,
        "sender_full_name": "bjorn3",
        "timestamp": 1589655266
    },
    {
        "content": "<p>So just to make sure I get this right, currently cranlift correctly calls <code>add_stackmap</code>, but we don't have a <code>StackmapSink</code> implementation other than the null one for the object code backend?</p>",
        "id": 197809683,
        "sender_full_name": "osa1",
        "timestamp": 1589655745
    },
    {
        "content": "<p>Yes</p>",
        "id": 197814165,
        "sender_full_name": "bjorn3",
        "timestamp": 1589661622
    }
]