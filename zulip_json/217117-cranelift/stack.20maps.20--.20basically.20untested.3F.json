[
    {
        "content": "<p>Am I understanding right that cranelift's support for generating stack maps is basically untested right now? I see that we have some <code>test safepoint</code> filetests for exercising the insertion of safepoints, but nothing that exercises the actual generated stack maps. Am I overlooking some tests somewhere?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git ls-files cranelift | grep test | xargs grep -rni -E &#39;stack.?map&#39;\ncranelift/codegen/src/isa/test_utils.rs:85:    fn add_stackmap(&amp;mut self, _val_list: &amp;[Value], _func: &amp;Function, _isa: &amp;dyn TargetIsa) {}\ncranelift/filetests/src/function_runner.rs:3:use cranelift_codegen::binemit::{NullRelocSink, NullStackmapSink, NullTrapSink};\ncranelift/filetests/src/function_runner.rs:270:    let stackmaps = &amp;mut NullStackmapSink {};\ncranelift/filetests/src/function_runner.rs:275:        context.emit_to_memory(isa, code_page.as_mut_ptr(), relocs, traps, stackmaps);\ncranelift/filetests/src/test_binemit.rs:111:    fn add_stackmap(\ncranelift/filetests/src/test_compile.rs:132:    fn add_stackmap(\ncranelift/filetests/src/test_rodata.rs:135:    fn add_stackmap(&amp;mut self, _: &amp;[Value], _: &amp;Function, _: &amp;dyn TargetIsa) {}\n</code></pre></div>",
        "id": 199565613,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591140529
    },
    {
        "content": "<p>Could they be in <code>mod test</code> sections in the Rust code?</p>",
        "id": 199567282,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591142348
    },
    {
        "content": "<p>It's effectively used in Spidermonkey when using Cranelift on x86; there might not be any direct testing in Cranelift, though.</p>",
        "id": 199641583,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1591201360
    },
    {
        "content": "<p>yeah, that only tests the baldrmonkey calling convention, so I think it is worth adding a <code>test stackmaps</code> mode to make it easier to exercise with sys v and windows fastcall etc.</p>\n<p>I'll look into doing this</p>",
        "id": 199645092,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591202914
    },
    {
        "content": "<p>Can we use stackmaps for other values besides references?</p>",
        "id": 199938816,
        "sender_full_name": "Techcable",
        "timestamp": 1591394384
    },
    {
        "content": "<p>I have a JIT that uses integers for its internal pointers and I'd like to use stackmaps to make deoptimizing back to the interpreter more efficient.</p>",
        "id": 199940044,
        "sender_full_name": "Techcable",
        "timestamp": 1591395376
    },
    {
        "content": "<p>That may be difficult to support. If you give Cranelift integers, it may assume it fully understands them and can do things like change the values of intermediate computations.</p>",
        "id": 199940842,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591395979
    },
    {
        "content": "<p>Also, if Cranelift doesn't know what's a regular integer versus an integer holding a reference, stack maps would have to hold all integers, which could make them much bigger.</p>",
        "id": 199940962,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591396087
    },
    {
        "content": "<p>Would it be possible to add an instruction to explicitly create custom stackmaps? My frontend has enough info to handle recovering the interpreter's state.</p>",
        "id": 199986053,
        "sender_full_name": "Techcable",
        "timestamp": 1591465984
    },
    {
        "content": "<p>Right now I'd have to do an explicit branch + call before every trap. This would horribly bloat the code (and presumably ruin register allocation).</p>",
        "id": 199986114,
        "sender_full_name": "Techcable",
        "timestamp": 1591466074
    },
    {
        "content": "<p>If there explicitly requested it wouldn't penalize other uses of cranelift. Also we could refactor the implicit safepoints to use the more general stackmap system.</p>",
        "id": 199986145,
        "sender_full_name": "Techcable",
        "timestamp": 1591466161
    },
    {
        "content": "<p>I would be open to writing a PR for this (eventually)</p>",
        "id": 199986201,
        "sender_full_name": "Techcable",
        "timestamp": 1591466227
    }
]