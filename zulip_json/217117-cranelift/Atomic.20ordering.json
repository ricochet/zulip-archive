[
    {
        "content": "<p>Cranelift's documentation states that the various atomic operations it has are sequentially consistent. Is there a way to use e.g. relaxed ordering instead?</p>",
        "id": 409597031,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703257433
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b583c54fda13b53dea362861125dd1e2ced1381d/cranelift/codegen/src/isa/x64/lower.isle#L3213-L3223\">https://github.com/bytecodealliance/wasmtime/blob/b583c54fda13b53dea362861125dd1e2ced1381d/cranelift/codegen/src/isa/x64/lower.isle#L3213-L3223</a> suggests that on x86-64 it's at least a regular MOV, but it would be nice to have precise control over that; unless Cranelift always uses the equivalent of acquire/release</p>",
        "id": 409598242,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703257957
    },
    {
        "content": "<p>this is part of the wasm threads specification unfortunately; it would be nice if wasm had support for some or all of the modes used by modern memory models (montonic/opaque/relaxed, acquire, release, sequentiually-consistent)</p>",
        "id": 409600021,
        "sender_full_name": "David Lloyd",
        "timestamp": 1703258674
    },
    {
        "content": "<p>right now it's just plain or full-blown sequential consistency</p>",
        "id": 409600089,
        "sender_full_name": "David Lloyd",
        "timestamp": 1703258694
    },
    {
        "content": "<p>and, of course none of these modes at all can interoperate with the host GC specification...</p>",
        "id": 409600183,
        "sender_full_name": "David Lloyd",
        "timestamp": 1703258729
    },
    {
        "content": "<p>Yikes <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 409600263,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703258756
    },
    {
        "content": "<p>I created <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7722\">https://github.com/bytecodealliance/wasmtime/issues/7722</a> to further discuss this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7722\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/32511d9ceec0794598ee940e231c5de85341724e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303530323734323765333233636366323061383134623466633666316338653836626637636235636637353464306239333065333932343333313364653862392f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37373232)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7722\" title=\"Support different atomic ordering guarantees in Cranelift 路 Issue #7722 路 bytecodealliance/wasmtime\">Support different atomic ordering guarantees in Cranelift 路 Issue #7722 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Cranelift has instructions for atomic operations such as atomic_load and atomic_store. These instructions don't give control over the ordering guarantees of the atomic operations. Instead, ...</div></div></div>",
        "id": 409607827,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703261775
    }
]