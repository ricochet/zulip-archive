[
    {
        "content": "<p>Hey folks!</p>\n<p>I've been experimenting with <code>wasmtime compile</code> to AOT-compile WASM modules for the RISC-V target.</p>\n<p>Specifically, I'm interested in <code>riscv64-ima</code> (note no \"C\" extension for compressed instructions).</p>\n<p>I was able to successfully compile code with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bin</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Unfortunately it does contain compressed (16 bit) instructions in some functions, e.g. ones related to <code>type_id</code>: <a href=\"https://gist.github.com/aborg-dev/55e5d6999122763be79d2957374524b2\">gist</a>.</p>\n<p>I tried some hackery to disable the compressed instructions on the backend level by removing <code>try_emit_compressed</code> in riscv64/inst/emit.rs but that didn't have any effect on the generated bytecode for the functions above.</p>\n<p>Is there any hope I can achieve this with low effort (I'm contemplating an alternative of implementing +C extension in our RISC-V interpreter which will probably take a week or two)? I'm fine with hacky one-off solutions as only need this to do some prototype measurements.</p>\n<p>Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/aborg-dev/55e5d6999122763be79d2957374524b2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/aborg-dev/55e5d6999122763be79d2957374524b2\" title=\"Cranelift Compile result\">Cranelift Compile result</a></div><div class=\"message_embed_description\">Cranelift Compile result. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 483642712,
        "sender_full_name": "Andrew Borg (aborg-dev)",
        "timestamp": 1732178821
    },
    {
        "content": "<p>Hey, by default we target <code>riscv64gc</code>, but you should be able to disable compressed extensions by specifying the <code>has_c=false</code> flag</p>",
        "id": 483642990,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1732178928
    },
    {
        "content": "<p>I don't know exactly the wasmtime flag for that, I rememeber it used to be something along the lines of <code>--cranelift-flag ...</code>, but not quite sure</p>",
        "id": 483643118,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1732178991
    },
    {
        "content": "<p>Okay, looking at the code you should be using <code>-Ccranelift-has_zca=false -Ccranelift-has_zcd=false</code>. We do have <code>has_c</code> which is defined as a combination of those two flags, but for some reason the wasmtime cli isn't recognizing that</p>",
        "id": 483644006,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1732179308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> , thank you! I was trying to tweak these flags in the code, bug passing them through CLI is much nicer.</p>\n<p>As it stands though, I don't see any effect when disabling them, they seemed to be off already. Specifically, here is the experiment that I've tried:</p>\n<ol>\n<li>Patch this code <a href=\"https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0\">https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0</a> to make sure we are not generating compressed instructions in the riscv64 backend.</li>\n<li>Compile without <code>has_*</code> flags:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bin</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dd5a06834687e5af0c8f7d01e5cef81c</span><span class=\"w\">  </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n</code></pre></div>\n<p>The <code>panic</code> in the code did not fire.</p>\n<ol start=\"3\">\n<li>Compile with <code>has_*</code> flags:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rm</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bin</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccranelift</span><span class=\"o\">-</span><span class=\"n\">has_zca</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccranelift</span><span class=\"o\">-</span><span class=\"n\">has_zcd</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">dd5a06834687e5af0c8f7d01e5cef81c</span><span class=\"w\">  </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n</code></pre></div>\n<p>Again, the same checksum and the <code>panic</code> didn't fire</p>\n<ol start=\"4\">\n<li>Compile for <code>imac</code> target</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rm</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bin</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64imac</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">md5sum</span><span class=\"w\"> </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"mf\">38e8</span><span class=\"n\">a91b709a5ae8f2fdfc4dee91fb9d</span><span class=\"w\">  </span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n</code></pre></div>\n<p>The checksum changed (I suspect just because the target is encoded in the ELF file), the <code>panic</code> didn't fire</p>\n<ol start=\"5\">\n<li>Finally, manually enable <code>has_*</code> flags:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bin</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">arch</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Ccranelift</span><span class=\"o\">-</span><span class=\"n\">has_zca</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ccranelift</span><span class=\"o\">-</span><span class=\"n\">has_zcd</span><span class=\"o\">=</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">fibonacci</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Now the panic actually triggers.</p>\n<p>I've included the <code>data/fibonacci.wasm</code> in the <a href=\"https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0#diff-ff642caab8a0305914ad5c4ffe2acdb13d016564530b39966a9f136549fb36a2\">commit</a> if anyone wants to try to reproduce this. It has been generated using <code>rustc</code>.</p>\n<p>Overall, it seems that these compressed instructions are generated somewhere outside of riscv64 codegen? I've tracked their source to <code>array_to_wasm_trampoline</code> function, but couldn't find anything suspicious there.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0#diff-ff642caab8a0305914ad5c4ffe2acdb13d016564530b39966a9f136549fb36a2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a2f5a10c55b27065cf4e6336e50bd23b98292575/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353630336235306135393964326332393430313633346361633532313531313661393736636335616239666536636331306639366130353766646534396431662f61626f72672d6465762f7761736d74696d652f636f6d6d69742f30633163326636313262623733613563353665616539386665653839653035663866313866346130&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0#diff-ff642caab8a0305914ad5c4ffe2acdb13d016564530b39966a9f136549fb36a2\" title=\"Experiment with compressed instructinos · aborg-dev/wasmtime@0c1c2f6\">Experiment with compressed instructinos · aborg-dev/wasmtime@0c1c2f6</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to aborg-dev/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a2f5a10c55b27065cf4e6336e50bd23b98292575/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353630336235306135393964326332393430313633346361633532313531313661393736636335616239666536636331306639366130353766646534396431662f61626f72672d6465762f7761736d74696d652f636f6d6d69742f30633163326636313262623733613563353665616539386665653839653035663866313866346130&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/aborg-dev/wasmtime/commit/0c1c2f612bb73a5c56eae98fee89e05f8f18f4a0\" title=\"Experiment with compressed instructinos · aborg-dev/wasmtime@0c1c2f6\">Experiment with compressed instructinos · aborg-dev/wasmtime@0c1c2f6</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to aborg-dev/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 483653885,
        "sender_full_name": "Andrew Borg (aborg-dev)",
        "timestamp": 1732182525
    },
    {
        "content": "<p>Oh right, if those functions are generated in the trampoline then we don't compile them using cranelift. I think they get compiled at wasmtime compile time and then copied to the final binary. But <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> might be able to explain this better.</p>",
        "id": 483657569,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1732183791
    },
    {
        "content": "<p>From the gist in the OP of this thread, I don't think those are actually compressed instructions. I think that's data after the final <code>ret</code> which happens to disassemble as compressed instructions but I don't believe they're actually executed at runtime (or at least they shouldn't be).</p>\n<p>Otherwise I think this all makes sense:</p>\n<ul>\n<li>I don't think we actually enable the compressed extension by default? </li>\n<li>That would explain why <code>--target riscv64</code> doesn't trigger the panic</li>\n<li>If <code>--target riscv64</code> doesn't trigger the panic then manually disabling extensions also won't change much</li>\n<li>With <code>--target riscv64imac</code> that's parsed by <code>target-lexicon</code> and we don't actually infer target features from that, just the target architecture. Arguably a bug in Wasmtime but that won't actually enable the <code>c</code> extension</li>\n<li>With <code>-Ccranelift-has_zca=true -Ccranelift-has_zcd=true</code> that's the first time things were enabled, so that would explain things.</li>\n</ul>\n<blockquote>\n<p>Overall, it seems that these compressed instructions are generated somewhere outside of riscv64 codegen? I've tracked their source to <code>array_to_wasm_trampoline</code> function, but couldn't find anything suspicious there.</p>\n</blockquote>\n<p>I'm not sure I fully understand this? When you say you've tracked it down to there, is this in a debugger for example (e.g. you ran something and got SIGILL?) Or are you inspecting codegen manually?</p>\n<blockquote>\n<p>I think they get compiled at wasmtime compile time and then copied to the final binary</p>\n</blockquote>\n<p>Oh I don't believe that this should be happening, all compiled code is generated by Cranelift</p>",
        "id": 483721469,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732201985
    },
    {
        "content": "<p>Oh right, I thought we had some pieces that were compiled outside of cranelift.</p>\n<p>IIRC, by default we use riscv64gc (even if the target is riscv64) that has compressed instructions enabled by default </p>\n<p>The extra data being interpreted as instructions seems very likely, I've run into that a lot with our internal disassembly tests as well</p>",
        "id": 483723466,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1732202505
    },
    {
        "content": "<p>I thought as well we had c enabled by default, but given that <code>--target</code> isn't emitting compressed instructions I think that we don't? (perhaps due to a bug?)</p>",
        "id": 483723695,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732202558
    },
    {
        "content": "<p>Yeah that's strange, I'll try to look into it</p>",
        "id": 483724118,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1732202658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> , ahhh, very good catch, that explains a lot!</p>\n<p>For a bit more context, I'm prototyping an ahead-of-time binary translator from RISC-V bytecode into a custom ISA and it sounds like I need to disambiguate between the actual bytecode and some sort of \"payload\" that Cranelift codegen stores after the function bytecode? What is this payload? I tried to look at the disasm/vcode of the function, but it ends on the <code>ret</code> statement and actually does not include these additional few bytes that I see in the objdump.</p>\n<p>Assuming my understanding is correct, I see two ways to accomplish this:</p>\n<ol>\n<li>Have a way to find the boundary between the bytecode and Cranelift \"payload\", e.g. a length of functions stored somewhere, or some special market at the end of a function. Can I rely on \"ret\" instruction for this?</li>\n<li>Have a way to disable the \"payload\" generation - but I haven't found the place in code where it is added</li>\n</ol>",
        "id": 483916320,
        "sender_full_name": "Andrew Borg (aborg-dev)",
        "timestamp": 1732283738
    },
    {
        "content": "<p>We have <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9402\">an issue</a> about moving these data bits out of the <code>.text</code> section but otherwise AFAIK there's no great way to detect this right now with our current object files</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9402\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f8a59c154128f55f1d4be3d3c510fe9dba228540/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656562336530343435383036663537376162613630333337343766373133633466386238336536643437616336343836623262646531663731616535313035642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39343032&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9402\" title=\"Move constant pools in compiled code out of the .text section · Issue #9402 · bytecodealliance/wasmtime\">Move constant pools in compiled code out of the .text section · Issue #9402 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Today Cranelift's constant-pools are located in the .text section of the executable, typically located after the function itself. While convenient for code generation this exposes a possible attack...</div></div></div>",
        "id": 483959429,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732297092
    },
    {
        "content": "<p>we could perhaps update our object files with new symbols or such to help outline these sections though</p>",
        "id": 483959479,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732297110
    }
]