[
    {
        "content": "<p>I'm currently using <code>cranelift-isle</code> for a project of my own. However, unlike Cranelift, the types that I use with ISLE cannot be cheaply cloned like Cranelift types used in the ISLE context, so I must use a reference for them.</p>\n<p>As long as I'm aware of, ISLE doesn't emit a lifetime parameter on the context, so ISLE can't generate code like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// ISLE generated Context</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">FooRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>... and let me implement that like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">FooRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#[derive(Debug)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">FooCtx</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span> <span class=\"nc\">Foo</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FooCtx</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">FooRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">foo</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm thinking of patching ISLE so that it can emit a lifetime parameter for the context type and defined primitive types. Is this a good idea, or is there any workaround I haven't yet discovered?</p>",
        "id": 329148081,
        "sender_full_name": "Rynco Maekawa",
        "timestamp": 1676974005
    },
    {
        "content": "<p>You could pass indices into a table to ISLE generated code.</p>",
        "id": 329232302,
        "sender_full_name": "bjorn3",
        "timestamp": 1676996199
    },
    {
        "content": "<p>I don't think references will work as <code>FooRef</code> presumably is still needed when you mutate the IR, which invalidates all outstanding references.</p>",
        "id": 329232474,
        "sender_full_name": "bjorn3",
        "timestamp": 1676996247
    },
    {
        "content": "<p>Happy to think about options here, and if you have a working solution to start with, that's even better! The issue I ran into before with this is that all external calls are on a mut Context, so outstanding borrows cause lifetime-overlap errors. In the end it was simpler to use value semantics everywhere</p>",
        "id": 329239464,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1676998182
    },
    {
        "content": "<p>I'd echo the suggestions to perhaps use entity indices as an alternative, unless there's a strong reason that won't work (e.g. the borrowed thing is deep in a data structure that can't be easily indexed)</p>",
        "id": 329239615,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1676998220
    },
    {
        "content": "<p>Thanks for the reply! The reason why I think <code>FooRef&lt;'a&gt;</code> would work is that it has the same lifetime as the whole context (<code>Context&lt;'a&gt;</code>), so it is not constrained by the <code>&amp;mut Context</code> borrow lifetime (I'm not mutating existing data structures; The whole input to ISLE is immutably borrowed and I'm generating new code (LLVM IR) based on that).</p>\n<p>I think using entity indices is a good idea to test out with, but doing so would require changing many other parts of my codebase. So for now I'm going to try to add a type parameter to the context and see how well it goes.</p>",
        "id": 329335581,
        "sender_full_name": "Rynco Maekawa",
        "timestamp": 1677036885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435070\">Rynco Maekawa</span> <a href=\"#narrow/stream/217117-cranelift/topic/ISLE.20support.20for.20references.20with.20context.20lifetime/near/329335581\">said</a>:</p>\n<blockquote>\n<p>The whole input to ISLE is immutably borrowed and I'm generating new code (LLVM IR) based on that).</p>\n</blockquote>\n<p>In that case keeping references around should indeed be fine. Adding support for it to ISLE makes sense.</p>",
        "id": 329379669,
        "sender_full_name": "bjorn3",
        "timestamp": 1677059194
    },
    {
        "content": "<p>I'm now digging into the code. My plan on changing the language is the following:</p>\n<div class=\"codehilite\" data-code-language=\"BNF\"><pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nc\">def</span><span class=\"p\">&gt;</span> <span class=\"o\">::=</span> ...\n        | \"(\" \"pragma\" <span class=\"p\">&lt;</span><span class=\"nc\">pragma</span><span class=\"p\">&gt;</span> \")\"  ;; Seems there's already a pragma parser in the code!\n\n;; Adds the lifetime pragma. Lifetimes are always bound to the context.\n<span class=\"p\">&lt;</span><span class=\"nc\">pragma</span><span class=\"p\">&gt;</span> <span class=\"o\">::=</span> \"context_lifetime\" <span class=\"p\">&lt;</span><span class=\"nc\">lifetime-ident</span><span class=\"p\">&gt;</span>*\n\n;; Lifetime identifiers start with quotes (`'`)\n<span class=\"p\">&lt;</span><span class=\"nc\">lifetime-ident</span><span class=\"p\">&gt;</span> <span class=\"o\">::=</span> \"'\" ( \"A\"..\"Z\" | \"a\"..\"z\" | \"_\" | \"$\" | \"0\"..\"9\" | \".\" )*\n\n;; Primitive types can now have a lifetime parameter.\n<span class=\"p\">&lt;</span><span class=\"nc\">typevalue</span><span class=\"p\">&gt;</span> <span class=\"o\">::=</span> \"(\" \"primitive\" <span class=\"p\">&lt;</span><span class=\"nc\">primitivetype</span><span class=\"p\">&gt;</span> \")\" ;; &lt;-\n              | ...\n\n<span class=\"p\">&lt;</span><span class=\"nc\">primitivetype</span><span class=\"p\">&gt;</span> <span class=\"o\">::=</span> <span class=\"p\">&lt;</span><span class=\"nc\">ident</span><span class=\"p\">&gt;</span>\n                  | \"(\" <span class=\"p\">&lt;</span><span class=\"nc\">ident</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nc\">lifetime-ident</span><span class=\"p\">&gt;</span>* \")\"\n</code></pre></div>\n<p>And by the way, since I already have a plan, should I open up an issue in the wasmtime repo now?</p>",
        "id": 329621690,
        "sender_full_name": "Rynco Maekawa",
        "timestamp": 1677122701
    },
    {
        "content": "<p>Sure, please feel free to create an issue and all of us can discuss further there!</p>",
        "id": 329762779,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1677169432
    },
    {
        "content": "<p>Ah, I see you already did here: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5862\">https://github.com/bytecodealliance/wasmtime/issues/5862</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5862\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2b0cece5b2bead050daaacc954d19ff5d13f10a7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363966643237626236356665376661393139623062333833333833643462623832373935633038383735363439653939333065323438386266336262346264632f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35383632)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5862\" title=\"Support lifetimes in context in ISLE 路 Issue #5862 路 bytecodealliance/wasmtime\">Support lifetimes in context in ISLE 路 Issue #5862 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Add lifetime parameters in ISLE-generated Context, so that it can return values with lifetime parameters (not &#39;static lifetime). // ISLE generated Context trait Context&lt;&#39;a&gt; { ...</div></div></div>",
        "id": 329763068,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1677169500
    }
]