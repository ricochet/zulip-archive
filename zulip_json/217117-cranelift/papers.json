[
    {
        "content": "<p>The abstract of <a href=\"https://arxiv.org/abs/2011.13127\">https://arxiv.org/abs/2011.13127</a> seems interesting:</p>\n<blockquote>\n<p>Copy-and-Patch Compilation: A fast compilation algorithm for high-level languages and bytecode</p>\n<p>[...]</p>\n<p>The generated code runs an order of magnitude faster than interpretation and 14% faster than LLVM -O0. Our WebAssembly compiler generates code 4.9X-6.5X faster than Liftoff, the WebAssembly baseline compiler in Google Chrome. The generated code also outperforms Liftoff's by 39%-63% on the Coremark and PolyBenchC WebAssembly benchmarks.</p>\n</blockquote>",
        "id": 279670637,
        "sender_full_name": "bjorn3",
        "timestamp": 1650542846
    },
    {
        "content": "<p>i came here to share that too!  i think cranelift could be useful to generate a stencil library.  could be a nice improvement for baseline compilation in wasmtime</p>",
        "id": 280039592,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1650876115
    },
    {
        "content": "<p>It's a really interesting technique, thanks!</p>",
        "id": 280093385,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1650903738
    },
    {
        "content": "<p>is the full text available anywhere?</p>",
        "id": 280093517,
        "sender_full_name": "David Lloyd",
        "timestamp": 1650903821
    },
    {
        "content": "<p>At the arxiv link above, I think! \"PDF\" in the right bar</p>",
        "id": 280093760,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1650903955
    },
    {
        "content": "<p>oh, I missed it. thanks</p>",
        "id": 280093861,
        "sender_full_name": "David Lloyd",
        "timestamp": 1650903989
    },
    {
        "content": "<p>in the same area, there's the classic \"multi-level quickening\" <a href=\"https://arxiv.org/abs/2109.02958\">https://arxiv.org/abs/2109.02958</a></p>",
        "id": 280119283,
        "sender_full_name": "lqd",
        "timestamp": 1650915931
    },
    {
        "content": "<p>better link: <a href=\"http://fredrikbk.com/publications/copy-and-patch.pdf\">http://fredrikbk.com/publications/copy-and-patch.pdf</a></p>",
        "id": 280168711,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1650956660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span> <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> continuing this thread, but not quite a paper, there's been some interesting work verification work on the LLVM side of things for aarch64: <a href=\"https://blog.regehr.org/archives/2265\">https://blog.regehr.org/archives/2265</a></p>",
        "id": 285232303,
        "sender_full_name": "Sam Parker",
        "timestamp": 1654599095
    },
    {
        "content": "<p>Super cool, thank you!</p>",
        "id": 285271916,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1654616983
    },
    {
        "content": "<p><a href=\"https://drops.dagstuhl.de/opus/volltexte/2022/15933/pdf/dagrep_v011_i010_p173_21481.pdf\">https://drops.dagstuhl.de/opus/volltexte/2022/15933/pdf/dagrep_v011_i010_p173_21481.pdf</a></p>\n<blockquote>\n<p>Secure compilation is an emerging field that puts together advances in security, programming languages, compilers, verification, systems, and hardware architectures in order to devise more secure compilation chains that eliminate many of today’s security vulnerabilities and that allow sound reasoning about security properties in the source language. For a concrete example, all modern languages provide a notion of structured control flow and an invoked procedure is expected to return to the right place. However, today’s compilation chains (compilers, linkers, loaders, runtime systems, hardware) cannot efficiently enforce this abstraction against linked low-level code, which can call and return to arbitrary instructions or smash the stack, blatantly violating the high-level abstraction. Other problems arise because today’s languages fail to specify security policies, such as data confidentiality, and the compilation chains thus fail to enforce them, especially against powerful side-channel attacks. The emerging secure compilation community aims to address such problems by identifying precise security goals and attacker models, designing more secure languages, devising efficient enforcement and mitigation mechanisms, and developing effective verification techniques for secure compilation chains.<br>\nThis seminar strived to take a broad and inclusive view of secure compilation and to provide a forum for discussion on the topic. The goal was to identify interesting research directions and open challenges by bringing together people working on building secure compilation chains, on designing security enforcement and attack-mitigation mechanisms in both software and hardware, and on developing formal verification techniques for secure compilation.</p>\n</blockquote>",
        "id": 298531796,
        "sender_full_name": "bjorn3",
        "timestamp": 1663056028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span> <a href=\"https://stefanheule.com/s/projects/strata/\">https://stefanheule.com/s/projects/strata/</a> seems relevant for your work on verifying ISLE lowering rules. It has formal semantics for a lot of x86_64 instructions that were semi-automatically discovered. In all cases where the discovered semantics didn't match hand-written semantics, the hand-written semantics were in fact incorrect.</p>",
        "id": 299175339,
        "sender_full_name": "bjorn3",
        "timestamp": 1663339559
    },
    {
        "content": "<p>Not exactly a paper and possibly not all that practical, but <a href=\"https://www.mattkeeter.com/blog/2022-10-04-ssra/\">https://www.mattkeeter.com/blog/2022-10-04-ssra/</a> shows a register allocator that is supposedly very fast, but does have some limitations.</p>",
        "id": 302327459,
        "sender_full_name": "bjorn3",
        "timestamp": 1664909951
    },
    {
        "content": "<p>Interesting write-up for sure; have seen this in LuaJIT before (as they mention) and it's a very effective technique for trace compilers. I don't see any mention of control-flow in the post, and that's one of the confounders for any single-pass algorithm; curious if they have more thoughts on it</p>",
        "id": 302328493,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1664910281
    },
    {
        "content": "<p>It explicitly mentions that it doesn't work with control-flow. Of course you can always spill everything on any kind of control-flow, but that is probably very flow at runtime.</p>",
        "id": 302328650,
        "sender_full_name": "bjorn3",
        "timestamp": 1664910337
    },
    {
        "content": "<p>It also produces sub-optimal results if you have fixed-reg constraints since you only have one pass through the code.</p>",
        "id": 302351809,
        "sender_full_name": "Amanieu",
        "timestamp": 1664919639
    },
    {
        "content": "<p>But I guess you could remedy that by adding a pre-processing pass that gathers register hints for each vreg.</p>",
        "id": 302352407,
        "sender_full_name": "Amanieu",
        "timestamp": 1664919955
    },
    {
        "content": "<p>It's somewhat like what I had in mind for <a href=\"https://github.com/bytecodealliance/regalloc2/issues/81\">https://github.com/bytecodealliance/regalloc2/issues/81</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc2/issues/81\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d6c5b6387f3e34ffba73cb0fb0216ec64c6a261d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393265396361623230623634636562326431653431656332613631313533613336343966646363386564376131323965303239303163363532633931366630302f62797465636f6465616c6c69616e63652f726567616c6c6f63322f6973737565732f3831)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc2/issues/81\" title=\"Alternative regalloc backends · Issue #81 · bytecodealliance/regalloc2\">Alternative regalloc backends · Issue #81 · bytecodealliance/regalloc2</a></div><div class=\"message_embed_description\">The regalloc2 crate provides a good API (VReg, PReg, Operand, Function, etc) for interacting with a register allocator. It would be nice if other register allocator backends could be made available...</div></div></div>",
        "id": 302352517,
        "sender_full_name": "Amanieu",
        "timestamp": 1664919998
    },
    {
        "content": "<p><a href=\"https://www.cs.cmu.edu/~dkoes/research/CGO08-NOLTIS.pdf\">https://www.cs.cmu.edu/~dkoes/research/CGO08-NOLTIS.pdf</a> looks interesting. It is a near-optimal instruction selector running in linear time.</p>",
        "id": 369258946,
        "sender_full_name": "bjorn3",
        "timestamp": 1687638023
    },
    {
        "content": "<p>(linked from <a href=\"https://lobste.rs/s/p93jau/e_graph_extraction_problem_is_np_complete\">https://lobste.rs/s/p93jau/e_graph_extraction_problem_is_np_complete</a>)</p>",
        "id": 369258992,
        "sender_full_name": "bjorn3",
        "timestamp": 1687638068
    },
    {
        "content": "<p>Hydra: Generalizing Peephole Optimizations with Program Synthesis</p>\n<p><a href=\"https://users.cs.utah.edu/~regehr/generalization-oopsla24.pdf\">https://users.cs.utah.edu/~regehr/generalization-oopsla24.pdf</a></p>\n<p>Pretty cool! Bolting this onto souper/souper-harvest would be neat.</p>",
        "id": 444913683,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1718488096
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/217117-cranelift/topic/papers/near/444913683\">said</a>:</p>\n<blockquote>\n<p>Hydra: Generalizing Peephole Optimizations with Program Synthesis</p>\n<p><a href=\"https://users.cs.utah.edu/~regehr/generalization-oopsla24.pdf\">https://users.cs.utah.edu/~regehr/generalization-oopsla24.pdf</a></p>\n</blockquote>\n<p>See also <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\">https://github.com/bytecodealliance/wasmtime/issues/5783</a> -- would be great to land those already-generalized-for-us rules as a first step!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ccdaab11be09dacf808a4f07e71ed29a0e5df3d2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313638653365643933366433363334396161373064643739313739626662646365636265366335633465353266393961646530646438666338316336343733642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35373833&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5783\" title=\"Souper-synthesized optimizations that we should investigate generalizing and adding to the mid-end · Issue #5783 · bytecodealliance/wasmtime\">Souper-synthesized optimizations that we should investigate generalizing and adding to the mid-end · Issue #5783 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Here are some synthesized optimizations for CLIF harvested from spidermonkey.wasm with explicit bounds checks enabled. I won't have time to investigate, generalize, or implement them before I go on...</div></div></div>",
        "id": 445458094,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1718743626
    }
]