[
    {
        "content": "<p>I'd like to better understand what optimizations cranelift is capable of doing. I've figured out how to print the unoptimized IR of a function via <code>Function::display</code>, but I can't seem to find a way to inspect the generated optimized assembly. I'm assuming optimization happens while lowering IR to machine code and thus there's no way to inspect optimized IR? If that was possible, it would be even better :)</p>",
        "id": 351139408,
        "sender_full_name": "Setzer22",
        "timestamp": 1681933276
    },
    {
        "content": "<p>There are several ways you can do this. It sounds like you specifically want to print the optimized code that results from some frontend you're writing, yeah? (If you're using Wasmtime rather than your own Cranelift frontend, try <code>wasmtime explore</code>.)</p>\n<p>If you want to see the result of optimization on the Cranelift intermediate representation (CLIF), you can call <code>cranelift_codegen::Context::for_function</code> to get a compilation context, then call the <code>optimize</code> method on that, and finally look at the <code>func</code> field in the context for the optimized function. (See <code>cranelift/filetests/src/test_optimize.rs</code> for an example.)</p>\n<p>If you want to see the generated assembly instead, see the \"precise output\" mode of <code>cranelift/filetests/src/test_compile.rs</code> for an example of how to do that.</p>",
        "id": 351140385,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681933683
    },
    {
        "content": "<p>Part of the optimizations happen on clif ir, while other parts happen during lowering or code emission.</p>",
        "id": 351142965,
        "sender_full_name": "bjorn3",
        "timestamp": 1681934600
    },
    {
        "content": "<blockquote>\n<p>It sounds like you specifically want to print the optimized code that results from some frontend you're writing, yeah?</p>\n</blockquote>\n<p>Yup, that's correct <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<blockquote>\n<p>If you want to see the result of optimization on the Cranelift intermediate representation (CLIF), you can call cranelift_codegen::Context::for_function</p>\n</blockquote>\n<p>Oops, looks like I was already looking at optimized output. I'm still not fully familiar with the API. Was using cranelift-jit and apparently this was calling <code>ctx.compile()</code> for me, which will optimize the code (since I was setting opt_level speed in the flags). <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 351144281,
        "sender_full_name": "Setzer22",
        "timestamp": 1681935036
    },
    {
        "content": "<p>Oh yeah, that's a good point bjorn3! All the optimizations that can move code around or make other big changes work at the level of the IR, but when lowering to machine code we can sometimes select a target instruction that implements several IR instructions at once, and after that there are some local cleanups to eliminate branch instructions. For the branch optimizations see Chris' excellent blog post: <a href=\"https://cfallin.org/blog/2021/01/22/cranelift-isel-2/\">https://cfallin.org/blog/2021/01/22/cranelift-isel-2/</a></p>",
        "id": 351144377,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681935066
    },
    {
        "content": "<p>The context after calling <code>compile</code> will contain the compiled code and if requested the vcode (arch specific ir which looks a lot like assembly, but doesn't have jump threading applied and contains block labels)</p>",
        "id": 351145227,
        "sender_full_name": "bjorn3",
        "timestamp": 1681935390
    },
    {
        "content": "<p>I'd like to have a look at the vcode, but I'm not sure how to request / access it? I tried grepping the codebase but didn't get far. I don't think there's anything in Context that refers to vcode <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 351146834,
        "sender_full_name": "Setzer22",
        "timestamp": 1681936047
    },
    {
        "content": "<p>Ahh, nevermind, figured it out <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  You have to call ctx.set_disasm(true), and then find the vcode by finding it inside the CompiledCoe (obtainable via ctx.compiled_code())</p>",
        "id": 351147728,
        "sender_full_name": "Setzer22",
        "timestamp": 1681936384
    }
]