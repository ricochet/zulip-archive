[
    {
        "content": "<p>Is there an up to date document with the current features of cranelift? Like how can I find which targets are currently supported, which cpus, if seh (win32, win64, and landingpads on posix), arm etc are all working?</p>",
        "id": 266905031,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1641367404
    },
    {
        "content": "<p>I don't think there is. For architectures x86_64, AArch64 and s390x are supported. For unwinding info dwarf and seh are supported. For calling conventions on x86_64 windows fastcall and systemv are supported. On aarch64 the apple and I believe aapc (or whatever the default on most unixes is on aarch64) are supported. For supported OSes it is the responsibility of the user of cranelift to handle this. cranelift-codegen doesn't care beyond the calling comvention. cranelift-object supports emitting elf, macho and coff object files.</p>",
        "id": 266918532,
        "sender_full_name": "bjorn3",
        "timestamp": 1641378274
    },
    {
        "content": "<p>So no arm(32 bits) and i386. and unwinding only, no catching?</p>",
        "id": 266926353,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1641383875
    },
    {
        "content": "<p>(either way, cool)</p>",
        "id": 266926355,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1641383879
    },
    {
        "content": "<p>Correct. There is an issue for adding 32bit x86 support and an issue for adding landingpad support for exceptions (i need the latter for cg_clif to implement panics).</p>",
        "id": 266926474,
        "sender_full_name": "bjorn3",
        "timestamp": 1641383969
    },
    {
        "content": "<p>I was reading through the EH proposal but has any decision been made on the approach yet?</p>",
        "id": 267723647,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1641994187
    },
    {
        "content": "<p>(both IR and \"output\")</p>",
        "id": 267727507,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1641995978
    },
    {
        "content": "<p>there was some discussion in a meeting a few months back (this one: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/meetings/wasmtime/2021/wasmtime-10-28.md\">https://github.com/bytecodealliance/wasmtime/blob/main/meetings/wasmtime/2021/wasmtime-10-28.md</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/meetings/wasmtime/2021/wasmtime-10-28.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5b38ae80b5a0ca704e7b020d17a279d2d5c15de1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323438643466373361353532333139396531656333356239646435396330316438653564633561396632356332393838376466366665306566346138633732382f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/meetings/wasmtime/2021/wasmtime-10-28.md\" title=\"wasmtime/wasmtime-10-28.md at main · bytecodealliance/wasmtime\">wasmtime/wasmtime-10-28.md at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/wasmtime-10-28.md at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 267754337,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1642007170
    },
    {
        "content": "<p>the outcome of that is that I think we want to build out DWARF-style unwinding and use that</p>",
        "id": 267754407,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1642007200
    },
    {
        "content": "<p>IR will probably look something like LLVM's landingpads, but there are undoubtedly a lot of details still to specify</p>",
        "id": 267754450,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1642007220
    },
    {
        "content": "<p>That sounds perfect and would probably allow for both Win32/64 SEH and posix landingpads.</p>",
        "id": 268005508,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1642162314
    },
    {
        "content": "<p>SEH uses funclets which need to be represented in a fundamentally different way in the IR. However what could be done is emulating DWARF on top of SEH like GCC does for x86_64-windows.</p>",
        "id": 268009409,
        "sender_full_name": "Amanieu",
        "timestamp": 1642164952
    },
    {
        "content": "<p>To be able to catch <em>any</em> win32 exception (like so, overflows etc) seh exceptions have to be catchable though. I do think it should be possible to allow an ir level format that can capture both.</p>",
        "id": 268013522,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1642167188
    },
    {
        "content": "<p>Only exceptions from wasm code (in case of wasmtime) and C++ exceptions (in case of cg_clif) are necessary to be catchable. The rest is just a nice to have I think.</p>",
        "id": 268013864,
        "sender_full_name": "bjorn3",
        "timestamp": 1642167371
    },
    {
        "content": "<p>DWARF-style unwinding is easy to model in an IR because it's just about making a function call return to more than one place depending on whether it unwinds. On the other hand SEH requires invokes landing pads as their own function, with a pointer to the stack frame of the original function so that any needed locals can be accessed. This is much harder to model in the IR.</p>",
        "id": 268020726,
        "sender_full_name": "Amanieu",
        "timestamp": 1642170653
    },
    {
        "content": "<p>Would it be wild to suggest to model exceptions with funclets that get \"inlined\" when emitting landingpads then?</p>",
        "id": 268241883,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1642409217
    },
    {
        "content": "<p>I would recommend reading <a href=\"https://llvm.org/docs/ExceptionHandling.html#wineh\">this document</a> which explains why LLVM has 2 separate IR constructions to represent exception handling.</p>",
        "id": 268268024,
        "sender_full_name": "Amanieu",
        "timestamp": 1642424972
    },
    {
        "content": "<p>I have actually; I've also used llvm. The landingpad logic in llvm predates the SEH code by quite some time. I do think it should be possible to combine them. The only \"real\" usecase I can think of is to represent try/catch/finally for both after all.</p>",
        "id": 268311981,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1642450719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295546\">@Carlo Kok</span> such a thing strikes me as somewhat more complex than we need; an abstraction with subtle semantics (activation frame within an activation frame) that we then \"undo\" via a particular transform. But possibly I'm missing some important reason why this SEH-specific behavior needs to be accessible from CLIF</p>",
        "id": 268338807,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1642476351
    },
    {
        "content": "<p>I see your point now that that might be a bit trickier than I thought. The reason I'm bringing it up is that to emit a try/catch, you have to take vastly different paths depending on if you are on Windows or something else. Even though you really only use this construct to emit a try/catch. So I guess from my pov it's a where do you put the complexity; in the compilers that call Cranelift or in cranelift.</p>",
        "id": 268352039,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1642490661
    }
]