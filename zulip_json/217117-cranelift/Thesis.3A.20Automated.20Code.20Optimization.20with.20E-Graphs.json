[
    {
        "content": "<p>This thesis was just linked on hacker news: <a href=\"https://arxiv.org/abs/2112.14714\">https://arxiv.org/abs/2112.14714</a> Would it be possible to apply it to cranelift once the rewrite to isle is done?</p>",
        "id": 266693295,
        "sender_full_name": "bjorn3",
        "timestamp": 1641220956
    },
    {
        "content": "<p>@bjorn3 there's been a little discussion around e-graphs, e.g. as they're used (via the <code>egg</code> implementation) in wasm-mutate. I think it's a really cool data structure and could be useful; my main concern when I looked at it most recently was whether there was an efficient way to drive rule application beyond \"try all rewrite rules in turn\"</p>",
        "id": 266712390,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641230716
    },
    {
        "content": "<p>in principle if one could build a framework/compiler that makes use of ISLE-style rewrite rules to generate an efficient rewrite pass, I think it could be useful</p>",
        "id": 266712628,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641230774
    },
    {
        "content": "<p>in particular there's a nice alignment between ISLE's idea of an input graph with multiple possible matches per value (via programmable extractors) and an e-graph's idea of multiple nodes in an equivalence class</p>",
        "id": 266712742,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641230839
    },
    {
        "content": "<p>Maybe it could be used only when runtime performance is more important than compile times like I would guess it is for Fastly?</p>",
        "id": 266712773,
        "sender_full_name": "bjorn3",
        "timestamp": 1641230855
    },
    {
        "content": "<p>right, it could be a good way to build a more optimizing middle-end</p>",
        "id": 266712854,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641230884
    },
    {
        "content": "<p>in Julia land, I think this sort of rewrite-driven optimization stuff is aimed at middle layer opts -- not necessarily register allocation.</p>",
        "id": 266717107,
        "sender_full_name": "McCoy",
        "timestamp": 1641232880
    },
    {
        "content": "<p>I don't quite understand the scope of ISLE tho, so maybe this is right in the ballpark</p>",
        "id": 266717485,
        "sender_full_name": "McCoy",
        "timestamp": 1641233059
    },
    {
        "content": "<p>ISLE happens just before register allocation. It basically translates from clif ir to machine specific vcode which has a roughly 1-to-1 correspondence with machine instructions. This vcode is then register allocated and finally emitted to raw bytes (and performing jump threading in the process of emitting).</p>",
        "id": 266717710,
        "sender_full_name": "bjorn3",
        "timestamp": 1641233182
    },
    {
        "content": "<p>Most peephole optimizations happen in a single pass during lowering from clif ir to vcode.</p>",
        "id": 266717845,
        "sender_full_name": "bjorn3",
        "timestamp": 1641233268
    },
    {
        "content": "<p>This is the list of all optimizations that are performed: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L135-L176\">https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L135-L176</a> All architecture dependent things happen during the <code>backend.compile_function()</code> call at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L172\">https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L172</a>. That is everything starting from the clif ir to vcode lowering through ISLE.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L135-L176\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7ccce5c0c3163ac49ffebd53c9249f57044f7ea3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343935316266316662323939353037653938653164313534373133386330333636643466396163633332323132633536663630306665316163653530653236642f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L135-L176\" title=\"wasmtime/context.rs at 3eb82f1d8ee95c3c372d8b119d09c1560fcef307 · bytecodealliance/wasmtime\">wasmtime/context.rs at 3eb82f1d8ee95c3c372d8b119d09c1560fcef307 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/context.rs at 3eb82f1d8ee95c3c372d8b119d09c1560fcef307 · bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L172\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7ccce5c0c3163ac49ffebd53c9249f57044f7ea3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343935316266316662323939353037653938653164313534373133386330333636643466396163633332323132633536663630306665316163653530653236642f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3eb82f1d8ee95c3c372d8b119d09c1560fcef307/cranelift/codegen/src/context.rs#L172\" title=\"wasmtime/context.rs at 3eb82f1d8ee95c3c372d8b119d09c1560fcef307 · bytecodealliance/wasmtime\">wasmtime/context.rs at 3eb82f1d8ee95c3c372d8b119d09c1560fcef307 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/context.rs at 3eb82f1d8ee95c3c372d8b119d09c1560fcef307 · bytecodealliance/wasmtime</div></div></div>",
        "id": 266718055,
        "sender_full_name": "bjorn3",
        "timestamp": 1641233386
    }
]