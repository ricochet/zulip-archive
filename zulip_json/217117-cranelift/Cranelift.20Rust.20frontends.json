[
    {
        "content": "<p>Does cranelift have any rust frontends with enabled compiler optimizations? I found only this one <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">https://github.com/bjorn3/rustc_codegen_cranelift</a> but, as I understand it supports only debug mode.<br>\nMaybe some community ones?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4df36b793cabc90094ff4820f28415aa8652a599\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353533613336646339616165613536626434383239383964656264663365316265306533633839633938303630373461373836353436363461363162643639392f626a6f726e332f72757374635f636f646567656e5f6372616e656c696674)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" title=\"GitHub - bjorn3/rustc_codegen_cranelift: Cranelift based backend for rustc\">GitHub - bjorn3/rustc_codegen_cranelift: Cranelift based backend for rustc</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 397082710,
        "sender_full_name": "Viktar Makouski",
        "timestamp": 1697540186
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey, As far as I understand cg_clif should support release mode, did you find any issue with it?</p>",
        "id": 397083161,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1697540367
    },
    {
        "content": "<p>Oh, it really works, sorry for that</p>",
        "id": 397084145,
        "sender_full_name": "Viktar Makouski",
        "timestamp": 1697540720
    },
    {
        "content": "<p>As a follow up here, we ran a few benchmarks comparing the execution performance of Rust code compiled with <code>rustc_codegen_cranelift</code> in release mode vs using <code>rustc</code> to compile to WASM target and then using <code>wasmtime</code> to execute that WASM and we're seeing &gt;20x difference on benchmark that computes number <code>pi</code>.<br>\nIs this expected? What could explain such massive difference in performance?</p>\n<p>You can find the exact steps we took in the benchmark <a href=\"https://github.com/MCJOHN974/bench/blob/main/README.md\">here</a><br>\nas well as <a href=\"https://github.com/MCJOHN974/bench#results\">full comparison table</a> and the <a href=\"https://github.com/MCJOHN974/bench/blob/main/src/main.rs\">code of the benchmark</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/MCJOHN974/bench#results\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/92a6df8f31d937974e5f90a96410766a1f8a8370\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363932386338346661383735326165393036316364646462306633353931373335663962356330643063616536333938653461376664656234323734306634322f4d434a4f484e3937342f62656e6368)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/MCJOHN974/bench#results\" title=\"GitHub - MCJOHN974/bench\">GitHub - MCJOHN974/bench</a></div><div class=\"message_embed_description\">Contribute to MCJOHN974/bench development by creating an account on GitHub.</div></div></div>",
        "id": 402705657,
        "sender_full_name": "Andrei Kashin (akashin)",
        "timestamp": 1700229859
    },
    {
        "content": "<p>My guess as to what you're seeing is the difference that an optimizing compiler makes. Cranelift doesn't perform the same degree of optimization that LLVM does, so by taking it out of the picture you're missing out on things like inlining for example.</p>",
        "id": 402728648,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700236857
    }
]