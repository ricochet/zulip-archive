[
    {
        "content": "<p>I'm trying to define a simple recursive AST structure within ISLE, along these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">SimpleAst</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">Constant</span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">Add</span><span class=\"p\">([</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">SimpleAst</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]),</span>\n<span class=\"w\">    </span><span class=\"n\">Mul</span><span class=\"p\">([</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">SimpleAst</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]),</span>\n<span class=\"w\">    </span><span class=\"n\">Symbol</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Naively transliterating this struct definition to ISLE yields </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"kt\">u64</span> <span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"kt\">str</span> <span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">SimpleAst</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n  <span class=\"p\">(</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n</code></pre></div>\n<p>, which is not valid because of the lack of indirection in the generated struct definition. What's the correct way to define a recursive structure like this within ISLE?</p>",
        "id": 409076620,
        "sender_full_name": "Colton",
        "timestamp": 1703042448
    },
    {
        "content": "<p>One option is to flatten it into a single large list with indices instead of <code>Box&lt;SimpleAst&gt;</code>.</p>",
        "id": 409195083,
        "sender_full_name": "bjorn3",
        "timestamp": 1703081837
    },
    {
        "content": "<p>ISLE likely doesn't support native recursive structures as Cranelift IR does this flattening too.</p>",
        "id": 409195198,
        "sender_full_name": "bjorn3",
        "timestamp": 1703081877
    },
    {
        "content": "<p>You would have to declare an external <code>BoxSimpleAst</code> type in ISLE and then define it as an alias for <code>Box&lt;SimpleAst&gt;</code> in the rust glue code that pulls in the generated ISLE code</p>\n<p>but in general, yeah, it is better to work with indices/ids than actual boxes for these things</p>",
        "id": 409242709,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1703098351
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"675578\">@Colton</span> it may be useful to look at our <code>def_inst</code> extractor in the lowering prelude as well -- this is how we go from an index (<code>Inst</code>) to the <code>InstructionData</code> (the actual enum). ISLE is also not super-flexible about non-<code>Copy</code> enums (<code>def_inst</code> returns a copy of <code>InstructionData</code>) which sort of fits a lot better with the index-arena-based design</p>",
        "id": 409248038,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703100731
    },
    {
        "content": "<p>or rather, <code>inst_data</code> I mean; <code>def_inst</code> goes from a <code>Value</code> to <code>Inst</code>, sorry</p>",
        "id": 409248166,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703100794
    },
    {
        "content": "<p>Thanks for the pointers here. I have a prototype working now.</p>\n<p>One more thing I'm wondering about is commutativity and associativity. Currently I have the following rewrite rule: <code>((x&amp;y)+(~(y&amp;x)))</code> =&gt; <code>-1</code>. In ISLE I defined the rule like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">opaque</span><span class=\"o\">-</span><span class=\"n\">constant</span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"mi\">18446744073709551615</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>If I want to extend this to support <code>((y&amp;x)+(~(x&amp;y)))</code>, should I just redefine the rewrite for each possible commutative / associative variant?</p>",
        "id": 423823930,
        "sender_full_name": "Colton",
        "timestamp": 1709128800
    },
    {
        "content": "<p>Hmm, one other thing I just ran into:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"kt\">u64</span> <span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"kt\">str</span> <span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">index</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">primitive</span><span class=\"w\"> </span><span class=\"n\">AstIdx</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nc\">SimpleAst</span><span class=\"w\"> </span><span class=\"k\">extern</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">enum</span>\n  <span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Arithmetic</span><span class=\"w\"> </span><span class=\"n\">operators</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Pow</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Bitwise</span><span class=\"w\"> </span><span class=\"n\">operators</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Xor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Special</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Below</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">wrappers</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">constructing</span><span class=\"w\"> </span><span class=\"n\">instances</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">AST</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Arithmetic</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Mul</span><span class=\"w\"> </span><span class=\"n\">mul</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Pow</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Pow</span><span class=\"w\"> </span><span class=\"n\">pow</span><span class=\"p\">)</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Bitwise</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Xor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Xor</span><span class=\"w\"> </span><span class=\"n\">xor</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Neg</span><span class=\"w\"> </span><span class=\"n\">neg</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">put_value_in_reg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">extractor</span><span class=\"w\"> </span><span class=\"n\">put_value_in_reg</span><span class=\"w\"> </span><span class=\"n\">put_value_in_reg</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">put_value_in_reg</span><span class=\"w\"> </span><span class=\"n\">put_value_in_reg_ctor</span><span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Special</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"n\">constructor</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">Declare</span><span class=\"w\"> </span><span class=\"n\">our</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">attach</span><span class=\"w\"> </span><span class=\"n\">rules</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">this</span>\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">declaration</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">lowering</span><span class=\"w\"> </span><span class=\"n\">various</span><span class=\"w\"> </span><span class=\"n\">patterns</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">SimpleAst</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">partial</span><span class=\"w\"> </span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">zero</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">itself</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"p\">(</span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">SimpleAst</span><span class=\"w\"> </span><span class=\"n\">index</span>\n<span class=\"n\">put_value_in_reg</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Given this ISLE file, <code>islec</code> errors out due to these two overlapping rules:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">zero</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Constant</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">itself</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">SimpleAst</span><span class=\"p\">.</span><span class=\"n\">Or</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Ideally I'd like to search for both of these patterns within the same matching routine(picking whichever rule matches first). Is there a way to do this?</p>",
        "id": 423823931,
        "sender_full_name": "Colton",
        "timestamp": 1709128800
    },
    {
        "content": "<blockquote>\n<p>If I want to extend this to support ((y&amp;x)+(~(x&amp;y))), should I just redefine the rewrite for each possible commutative / associative variant?</p>\n</blockquote>\n<p>for now, yes. there is <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6128\">https://github.com/bytecodealliance/wasmtime/issues/6128</a> for tracking ISLE doing this automatically in the future</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6128\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/890efc3bfe18f3c2fccab69a6316a3df5730c25a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663432386461356466376262623262656161383135633630393363623664313532383338316661393339303431616636646531656330663163636165666362352f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36313238)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6128\" title=\"ISLE: Support commutative matches · Issue #6128 · bytecodealliance/wasmtime\">ISLE: Support commutative matches · Issue #6128 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature An ISLE pattern like (iadd (pattern_a) (pattern_b)) should also match if (iadd (pattern_b) (pattern_a)) would match, because iadd is a commutative operation. Benefit We currently have many ...</div></div></div>",
        "id": 423833397,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1709131566
    },
    {
        "content": "<blockquote>\n<p>Ideally I'd like to search for both of these patterns within the same matching routine(picking whichever rule matches first). Is there a way to do this?</p>\n</blockquote>\n<p>You can add a rule priority to make ISLE prefer the more-specific rule. We went back and forth on implicit priorities defined by which rule has more-specific matching structure, but that path is filled with ambiguities, so we ultimately decided on explicit rule priorities to resolve things here.</p>",
        "id": 423833763,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1709131666
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md#rules\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md#rules</a> has some docs on priorities</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/isle/isle_examples/pass/prio_trie_bug.isle#L76\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/isle/isle_examples/pass/prio_trie_bug.isle#L76</a> is an example rule with a priority</p>",
        "id": 423834239,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1709131776
    }
]