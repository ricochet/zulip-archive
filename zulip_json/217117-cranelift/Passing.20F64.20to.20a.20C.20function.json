[
    {
        "content": "<p>I'm generating a function call where the function's sig is</p>\n<div class=\"codehilite\"><pre><span></span><code>Signature { params: [AbiParam { value_type: types::I64, purpose: Normal, extension: None, location: Unassigned }, AbiParam { value_type: types::F64, purpose: Normal, extension: None, location: Unassigned }], returns: [AbiParam { value_type: types::I64, purpose: Normal, extension: None, location: Unassigned }], call_conv: SystemV }\n</code></pre></div>\n\n\n<p>or simply, <code>(I64, F64) -&gt; I64</code>. The function is defined like this in C:</p>\n<div class=\"codehilite\"><pre><span></span><code>int64_t mc_int_of_float_f(FunctionClosure *self, double d) {\n    printf(&quot;%lf\\n&quot;, (float)d);\n    return (int64_t)llround(d);\n}\n</code></pre></div>\n\n\n<p>I checked and <code>double</code> is 8-bytes on my system.</p>\n<p>For some reason when I pass 1.23 to this function the print line prints <code>123.000000</code>. Any ideas what I'm doing wrong?</p>\n<p>Relevant code that does the call:</p>\n<div class=\"codehilite\"><pre><span></span><code>    v0 = f64const 0x1.ec00000000000p6\n    v1 = global_value.i64 gv0\n    v2 = load.i64 v1\n    v3 = global_value.i64 gv1\n    v4 = call_indirect sig1, v2(v3, v0)\n</code></pre></div>",
        "id": 197760601,
        "sender_full_name": "osa1",
        "timestamp": 1589582629
    },
    {
        "content": "<p>To printf a double, use plain <code>%f</code></p>",
        "id": 197760794,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1589582806
    },
    {
        "content": "<p>(printf is varargs, and in varargs, floats are always promoted to double, so C uses the same format specifiers for float and double)</p>",
        "id": 197760825,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1589582842
    },
    {
        "content": "<p>OK thanks. That doesn't solve the issue though, it still prints 123.000000</p>",
        "id": 197760852,
        "sender_full_name": "osa1",
        "timestamp": 1589582874
    },
    {
        "content": "<p>I don't really care about the printf line, that's for debugging. The real problem is that the return value is not correct.</p>",
        "id": 197760905,
        "sender_full_name": "osa1",
        "timestamp": 1589582889
    },
    {
        "content": "<p>0x1.ec00000000000p6 is 123.000000</p>",
        "id": 197760967,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1589582978
    },
    {
        "content": "<p>Ahh.. hmm... I'm using <code>f64const</code> with a Rust <code>f64</code> value which has the correct value. Out of curiosity how did you check that?</p>",
        "id": 197761103,
        "sender_full_name": "osa1",
        "timestamp": 1589583062
    },
    {
        "content": "<p>the <code>p6</code> means \"times 2**6\" or \"times 64\", and <a href=\"http://1.ec\">1.ec</a> is somewhere between 1 and 2, closer to 2</p>",
        "id": 197761213,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1589583154
    },
    {
        "content": "<p>On Linux, you can use the printf command at the command-line too; <code>printf \"%f\" 0x1.ec00000000000p</code> prints the result</p>",
        "id": 197761279,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1589583215
    },
    {
        "content": "<p>or you can write a C program that does that</p>",
        "id": 197761286,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1589583221
    },
    {
        "content": "<p>Thanks for the help. I think I found the problem.</p>",
        "id": 197761291,
        "sender_full_name": "osa1",
        "timestamp": 1589583232
    }
]