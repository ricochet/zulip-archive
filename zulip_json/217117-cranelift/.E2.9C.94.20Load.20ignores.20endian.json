[
    {
        "content": "<p>The 'load' instruction always loads a value in native endian regardless of the endianness I set in the memory flags. If this feature isn't implemented in the backend, isn't it better to abort compilation than to generate code that reads the wrong value? Now I'm looking for a workaround, and I can't even find an instruction to swap the byte order of a value.</p>\n<p><a href=\"https://docs.rs/cranelift-codegen/0.79.0/cranelift_codegen/ir/struct.MemFlags.html\">MemFlags</a> says:</p>\n<blockquote>\n<p>In addition, the flags determine the endianness of the memory access. By default, any memory access uses the native endianness determined by the target ISA. This can be overridden for individual accesses by explicitly specifying little- or big-endian semantics via the flags.</p>\n</blockquote>\n<p>The IR clearly indicates the endianness which is ignored:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i16</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">big</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 265406285,
        "sender_full_name": "Veverak",
        "timestamp": 1639816598
    },
    {
        "content": "<p>The s390x backend is the only backend currently implementing it. This is big endian architecture, so it was necessary to implement wasm little endian memory operations. IMO the othet backends should gain support for it too. Can you open an issue if there isn't one already?</p>",
        "id": 265412858,
        "sender_full_name": "bjorn3",
        "timestamp": 1639826229
    },
    {
        "content": "<p>Sorry I can't open an issue because I don't have a Github account.</p>",
        "id": 265428981,
        "sender_full_name": "Veverak",
        "timestamp": 1639847481
    },
    {
        "content": "<p>Forgot about that. Opened <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3625\">https://github.com/bytecodealliance/wasmtime/issues/3625</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3625\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a604f68b1e801c0a56f4ccd707e515e27d01694a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396336373333363138636336653837663836656264373735343663646431396561393832646630326436383365663838323166663566663862326639333035612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33363235)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3625\" title=\"Cranelift: Big endian flag on memory operations ignored by x86 and aarch64 backends 路 Issue #3625 路 bytecodealliance/wasmtime\">Cranelift: Big endian flag on memory operations ignored by x86 and aarch64 backends 路 Issue #3625 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Reported by Veverak at https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/Load.20ignores.20endian/near/265406285</div></div></div>",
        "id": 265435352,
        "sender_full_name": "bjorn3",
        "timestamp": 1639853140
    },
    {
        "content": "<p>Thanks for raising this; yes, it's an implementation hole at the moment, and we need to fill it out. This sort of thing is what we're hoping to do under the \"polish and project maturity\" item on the roadmap for next year -- it's just a matter of folks having time</p>",
        "id": 265435934,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639853670
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"451107\">Veverak</span> has marked this topic as resolved.</p>",
        "id": 265462010,
        "sender_full_name": "Notification Bot",
        "timestamp": 1639890369
    }
]