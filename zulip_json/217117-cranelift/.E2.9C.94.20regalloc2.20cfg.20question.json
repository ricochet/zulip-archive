[
    {
        "content": "<p>Hi, I have one more question/dilemma that  i would like to present, its more of an issue on my end so dont worry if suggestions or thoughts arent perfect. </p>\n<p>We are building a binary transformation framework and one of the things our framework does to ensure we dont break code when we move it is that for each basic block of a function, if there exists bytes above the basic block that we havent disassembled then we assume its code that <em>could</em> fallthrough into the basic block we are going to move.</p>\n<p>To solve this we insert a thunk to jmp to the basic block. However this is a big problem because it creates multiple potential entrypoints into the function. This is going to cause issues in general with compiler theory since most algorithms are based upon the fact there exists only 1 entry into a function.</p>\n<p>Regalloc2 states the following:</p>\n<blockquote>\n<p>The CFG must have no critical edges. A critical edge is an edge from block A to block B such that A has more than one successor and B has more than one predecessor. For this definition, the entry block has an implicit predecessor, and any block that ends in a return has an implicit successor.</p>\n</blockquote>\n<p>Will our framework break regalloc2/prevent register allocation? if so how do you suggest we handle such situations? Its an interesting problem but without these thunks its not safe to move code.</p>",
        "id": 431392087,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712260751
    },
    {
        "content": "<p>here is a visual example of the problem just for reference purposes:</p>\n<p><a href=\"/user_uploads/15107/N6PKhdhqGlK-_lAOIAwN0HKi/image.png\">image.png</a><br>\n<a href=\"/user_uploads/15107/jSD26rFgX79Jlsp48KHjO50G/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/N6PKhdhqGlK-_lAOIAwN0HKi/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/N6PKhdhqGlK-_lAOIAwN0HKi/image.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/15107/jSD26rFgX79Jlsp48KHjO50G/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/jSD26rFgX79Jlsp48KHjO50G/image.png\"></a></div><p>As you can see there is a jump into the middle of another functions basic block which our framework is unable to safetly uncover. We will insert a thunk at 0x1826F2D20 since the bytes above it arent disassembled by our framework.</p>\n<p>Sidebar: ida knows its  call but ida can be wrong sometimes,  we cannot be wrong when we disassemble things to be lifted and moved.</p>",
        "id": 431392496,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712260887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707645\">CompilerSmith</span> has marked this topic as unresolved.</p>",
        "id": 431394257,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712261638
    },
    {
        "content": "<p>regalloc2 definitely needs a single entry-point; you're correct that this is an important invariant, and many many compiler-algorithm details break without it.</p>\n<p>however I think you can recover this property in a function with multiple entry points by having a \"virtual entry block\" that has N successors, each of the \"real\" entry blocks? You can even split those edges and put pseudoinsts in the edge blocks with various constraints if you need inputs to come in in different registers/locations</p>",
        "id": 431396513,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712262531
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/regalloc2.20cfg.20question/near/431396513\">said</a>:</p>\n<blockquote>\n<p>regalloc2 definitely needs a single entry-point; you're correct that this is an important invariant, and many many compiler-algorithm details break without it.</p>\n<p>however I think you can recover this property in a function with multiple entry points by having a \"virtual entry block\" that has N successors, each of the \"real\" entry blocks? You can even split those edges and put pseudoinsts in the edge blocks with various constraints if you need inputs to come in in different registers/locations</p>\n</blockquote>\n<p>Thank you for the response :) </p>\n<p>Its rare that functions ever share basic blocks. The only time ive ever seen this happen is within the deep end of chrome.dll. We added code to check to see if the bytes above the basic block were padding (int3 or ud2) and that helped us reduce the number of thunks required. Right now we are able to rewrite over 95.6% of chrome.dll in about 40 seconds. We recreate all exception information as well. </p>\n<p>However we are restricted by the frameworks thunk requirements. We might have to lose coverage to completely remove  all functions which require multiple entrypoints...</p>\n<p>I am in favor of the virtual entry block where we preserve the entire processors context and then dispatch to the basic block that its actually  meaning to go into. We plan to do obfuscation and this might be the trick. Our obfuscated function will therefore have 1 entry point.</p>",
        "id": 431397924,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712263100
    },
    {
        "content": "<p>I've actually implement this virtual entry point mechanism in a compiler that uses regalloc2. Basically you have an entry block that only contains 2 instructions:</p>\n<ul>\n<li><code>Entry</code> which defines all of the incoming arguments (must be the same for all entry points).</li>\n<li><code>EntrySwitch</code> which is a terminator with multiple successor blocks, one for each actual entry point.</li>\n</ul>\n<p>Then, after register allocation, you instantiate a copy of the entry block (including any moves emitted by the register allocator) as a prefix to each real entry point.</p>",
        "id": 431406152,
        "sender_full_name": "Amanieu",
        "timestamp": 1712266483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301625\">Amanieu</span> <a href=\"#narrow/stream/217117-cranelift/topic/regalloc2.20cfg.20question/near/431406152\">said</a>:</p>\n<blockquote>\n<p>I've actually implement this virtual entry point mechanism in a compiler that uses regalloc2. Basically you have an entry block that only contains 2 instructions:</p>\n<ul>\n<li><code>Entry</code> which defines all of the incoming arguments (must be the same for all entry points).</li>\n<li><code>EntrySwitch</code> which is a terminator with multiple successor blocks, one for each actual entry point.</li>\n</ul>\n<p>Then, after register allocation, you instantiate a copy of the entry block (including any moves emitted by the register allocator) as a prefix to each real entry point.</p>\n</blockquote>\n<p>Thank you for the response and interest in this topic. I agree with your solution to this problem. From a lower level x86 lifting perspective i think we will use the return address to determine which basic block the dispatcher (vm enter block) will dispatch to. Essentially we will make a call into some code which will save all GPR registers and the value of RSP at the point before the vm enter.</p>\n<p>This <em>should</em> make all compiler theory algorithms happy!</p>",
        "id": 431411214,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712268741
    },
    {
        "content": "<p>Another interesting thing to note is that on windows exception handling can produce functions which have multiple entry points. </p>\n<p>If you make this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__try</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">// something</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">__except</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">// code here</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">// more code here</span>\n</code></pre></div>\n<p>the except block will look like another entry into the function. No blocks directly reference it. The except block will execute then continue execution into the \"more code here\".</p>",
        "id": 431412847,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712269648
    },
    {
        "content": "<p>Right, the usual approach to exceptions wrt CFGs is to model the edges out of excepting instructions (e.g. <code>invoke</code> in LLVM terminology) to the catch blocks (<code>landingpad</code>s in LLVM terminology); at the regalloc2 level this is mostly an ordinary edge I think (possibly with some fiddly details re: fixed-reg defs on the invoke to get state set by unwinder, which are technically path-dependent defs; folks are thinking through this, we don't have it in Cranelift yet)</p>",
        "id": 431428426,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712280288
    },
    {
        "content": "<p>notably this would <em>not</em> be a case of a separate function entry; just like the \"virtual entry block\" we have a virtual edge to keep the IR-level semantics reasonable</p>",
        "id": 431428468,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712280321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/regalloc2.20cfg.20question/near/431428426\">said</a>:</p>\n<blockquote>\n<p>Right, the usual approach to exceptions wrt CFGs is to model the edges out of excepting instructions (e.g. <code>invoke</code> in LLVM terminology) to the catch blocks (<code>landingpad</code>s in LLVM terminology); at the regalloc2 level this is mostly an ordinary edge I think (possibly with some fiddly details re: fixed-reg defs on the invoke to get state set by unwinder, which are technically path-dependent defs; folks are thinking through this, we don't have it in Cranelift yet)</p>\n</blockquote>\n<p>Thank you for the response, I spoke with my team  and they came to the same conclusion which is we can implicitly mark except blocks as a successor to the try blocks. It might get a little messy in the CFG by marking every block which is described by the \"try\" range (C_SCOPE_TABLE) but we will experiment and see what works best. </p>\n<p>One more question i have about regalloc2 thats been brewing:</p>\n<p>So block terminators in regalloc2 can only be \"ret\" and \"branch\". The terminators of a basic block in the framework we are building has things like fastfail and int3. When I hook up our framework to regalloc2 should i just set these terminators (fastfail/int3/etc) to \"ret\"?</p>\n<p><a href=\"https://docs.rs/regalloc2/latest/regalloc2/trait.Function.html#tymethod.is_ret\">https://docs.rs/regalloc2/latest/regalloc2/trait.Function.html#tymethod.is_ret</a></p>",
        "id": 431430414,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712281686
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/iRYb8XopPRTmIL5Yz_Y1Vlms/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/iRYb8XopPRTmIL5Yz_Y1Vlms/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/iRYb8XopPRTmIL5Yz_Y1Vlms/image.png\"></a></div><p>Something like this is what we are thinking, each block which is described by the C_SCOPE_TABLE (or any other language specific exception information) will have an implicit successor of the <em>first</em> basic block in the except  basic blocks. </p>\n<p>Ignoring <code>__finally</code> because finally blocks are actually functions all to themselves. (crazy)</p>",
        "id": 431430940,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712282132
    },
    {
        "content": "<p>yes, <code>ret</code> in this context means \"terminator that leaves the function\" (as opposed to a transfer to some other block); it's reasonable to use that for e.g. <code>int3</code> if you don't resume after (i.e. a terminating/unwinding trap rather than a resumable breakpoint)</p>",
        "id": 431548320,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712330055
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707645\">CompilerSmith</span> has marked this topic as resolved.</p>",
        "id": 431806352,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712516400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707645\">CompilerSmith</span> has marked this topic as unresolved.</p>",
        "id": 431806397,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712516404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"707645\">CompilerSmith</span> has marked this topic as resolved.</p>",
        "id": 431806406,
        "sender_full_name": "Notification Bot",
        "timestamp": 1712516409
    }
]