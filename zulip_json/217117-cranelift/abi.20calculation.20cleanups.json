[
    {
        "content": "<p>While trying to fix <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9250\">https://github.com/bytecodealliance/wasmtime/issues/9250</a>, I've found that the abi calculation code is fairly messy with multiple call conv rules being bolted on top in hacky ways. I've done some cleanups in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9253\">https://github.com/bytecodealliance/wasmtime/pull/9253</a>, but I've got a question:</p>\n<ul>\n<li>Should we remove StructArgument support on s390x? cg_clif doesn't use it there as all arguments passed in-memory are passed using explicit pointer arguments instead. Currently StructArgument on s390x emulates this, but it makes the code messier. Also there is not really a need to support it given that the current way StructArgument is lowered on s390x can be done by the user too, while for other architectures it can't.</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9250\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/79c0023c27471b56253a5b7de73eb3549a2fa33d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376431653964346433306330616665636138333539393563663162656338653866356437623035623361626239646565613765633131333238653933303964632f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39323530&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9250\" title=\"Cranelift: Incorrect abi for i128, i128 return value on x86_64 sysv · Issue #9250 · bytecodealliance/wasmtime\">Cranelift: Incorrect abi for i128, i128 return value on x86_64 sysv · Issue #9250 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Expected Results All return values are returned using a single return pointer. Actual Results Return values are put into registers where possible and on the stack for the rest. Versions and Environ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9253\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d00e5c10bca98d9c1123bf07b7ccf7fb11bb9d80/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333537656234313233313161386264323162396530613263623462363639626634333161323036373962353265316135623364396465636438373362343164662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39323533&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9253\" title=\"Couple of cleanups to the ABI computation by bjorn3 · Pull Request #9253 · bytecodealliance/wasmtime\">Couple of cleanups to the ABI computation by bjorn3 · Pull Request #9253 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This also removes the WasmtimeSystemV call conv as it is no longer used anywhere.</div></div></div>",
        "id": 470684651,
        "sender_full_name": "bjorn3",
        "timestamp": 1726507660
    },
    {
        "content": "<p>I'd be happy to see StructArgument go away -- we don't use it in Wasmtime either, so with no major users, there's no reason to keep it IMHO</p>",
        "id": 470686683,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726508145
    },
    {
        "content": "<p>Upon closer inspection of the code, it turns out that StructArgument on s390x actually behaves the same as on other architectures, yet the abi document clearly states that pointers should be used for passing large struct arguments. In other words any use of StructArgument is actually incorrect already on s390x.</p>",
        "id": 470692978,
        "sender_full_name": "bjorn3",
        "timestamp": 1726509160
    },
    {
        "content": "<p>Back when I implemented this, it was certainly required to get cg_clif to work correctly, or else I wouldn't have done it.  I had written up my finding back then in this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4565\">https://github.com/bytecodealliance/wasmtime/issues/4565</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4565\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ffcb73ba34c492299376f4ad80477640cec359d7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653066363334306231396534626533636230646334393337366339623261383931616433313861303434316636656239393937373836663933306332393965632f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34353635&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4565\" title=\"Missing ABI features required for struct-args and i128 on s390x · Issue #4565 · bytecodealliance/wasmtime\">Missing ABI features required for struct-args and i128 on s390x · Issue #4565 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In implementing support for struct-args and i128 to enable rustc_codegen_cranelift on s390x, I ran into two features that are not currently available with the common abi_impl implementation. Struct...</div></div></div>",
        "id": 470695712,
        "sender_full_name": "Ulrich Weigand",
        "timestamp": 1726509559
    },
    {
        "content": "<p>In rustc I'm only finding make_indirect() for s390x, not make_indirect_byval(). The former lowers to a pointer argument, while the latter lowers to StructArgument.</p>",
        "id": 470696871,
        "sender_full_name": "bjorn3",
        "timestamp": 1726509758
    },
    {
        "content": "<p>Notice how in <a href=\"https://rust.godbolt.org/z/7rc6To46s\">https://rust.godbolt.org/z/7rc6To46s</a> there is no <code>byval([1024 x i8])</code> for the argument, unlike on x86_64.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://rust.godbolt.org/z/7rc6To46s\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4bf336f7597f851df0732b12f8d4b7b383508ec8/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://rust.godbolt.org/z/7rc6To46s\" title=\"Compiler Explorer - Rust (rustc nightly)\">Compiler Explorer - Rust (rustc nightly)</a></div><div class=\"message_embed_description\">struct Foo([u8; 1024]); #[no_mangle] extern \"C\" fn foo(a: Foo) {}</div></div></div>",
        "id": 470697034,
        "sender_full_name": "bjorn3",
        "timestamp": 1726509795
    },
    {
        "content": "<p>As far as I can tell the only archs that need StructArgument are x86, x86_64, m68k and xtensa: <a href=\"https://github.com/search?q=repo%3Arust-lang%2Frust%20make_indirect_byval&amp;type=code\">https://github.com/search?q=repo%3Arust-lang%2Frust%20make_indirect_byval&amp;type=code</a></p>",
        "id": 470698992,
        "sender_full_name": "bjorn3",
        "timestamp": 1726510189
    },
    {
        "content": "<p>This also means that the arm64 and riscv64 backends are incorrect in the exact same way.</p>",
        "id": 470699893,
        "sender_full_name": "bjorn3",
        "timestamp": 1726510329
    },
    {
        "content": "<p>Yes, we never use the LLVM IR byval attribute with the s390x ABI.  If that is indeed the only place where StructArgument is used, we don't need to support that in the backend.   (I'm still pretty sure something must have been broken back in 2022 when I implemented StructArgument; this all was part of an effort to get cg_clif working back then - but I don't now recall what exactly that was.  Maybe something else changed in between ...)</p>",
        "id": 470700681,
        "sender_full_name": "Ulrich Weigand",
        "timestamp": 1726510502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/abi.20calculation.20cleanups/near/470692978\">said</a>:</p>\n<blockquote>\n<p>Upon closer inspection of the code, it turns out that StructArgument on s390x actually behaves the same as on other architectures, yet the abi document clearly states that pointers should be used for passing large struct arguments. In other words any use of StructArgument is actually incorrect already on s390x.</p>\n</blockquote>\n<p>Never mind, the <code>pointer</code> field on <code>ABIArg::StructArg</code> changes the semantics to make it pass the value using a pointer argument. Still the arm64 and riscv64 backends don't do this. Opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9258\">https://github.com/bytecodealliance/wasmtime/pull/9258</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9258\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/06e9bdf7e201c3bcb61c6b8ddd7a16ae7c21ce87/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323834663431326339653866343264613934303236363339333133373930346361333739373533373134316331386463313131366430353931306433626365312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39323538&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9258\" title=\"Remove StructArgument support from the arm64, riscv64 and s390x backends by bjorn3 · Pull Request #9258 · bytecodealliance/wasmtime\">Remove StructArgument support from the arm64, riscv64 and s390x backends by bjorn3 · Pull Request #9258 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Unlike x86_64 and some other architectures where large structs are passed at fixed stack offsets, necessitating special Cranelift support, arm64, riscv64 and s390x pass them using regular pointer a...</div></div></div>",
        "id": 470715072,
        "sender_full_name": "bjorn3",
        "timestamp": 1726513768
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3785\">https://github.com/bytecodealliance/wasmtime/pull/3785</a> moved s390x to use ISLE for emitting calls rather than using CallSite like all other backends. Why was this done? It makes it harder for me to make changes to all backends at once.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3785\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2625b687741c10154ac2af646bec8adffc5f6ddd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393833306535393032303031633536313165323430363234373835653235356539396433393438373030666462396637636561636633353338636362353735632f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f33373835&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3785\" title=\"[RFC] ISLE: Migrate call and return instructions by uweigand · Pull Request #3785 · bytecodealliance/wasmtime\">[RFC] ISLE: Migrate call and return instructions by uweigand · Pull Request #3785 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This adds infrastructure to allow implementing call and return\ninstructions in ISLE, and migrates the s390x back-end.\nNot intended to be committed as-is, this will not even compile\nas it depends on...</div></div></div>",
        "id": 471044016,
        "sender_full_name": "bjorn3",
        "timestamp": 1726593625
    },
    {
        "content": "<p>if I remember right, s390x was the first backend to move completely to ISLE, and it was mostly an artifact of our early experimentation -- we weren't sure which parts we should encode as term rewriting and which we should leave as helper code in Rust</p>",
        "id": 471050908,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726595669
    },
    {
        "content": "<p>there are some nice ergonomic bits around zero/sign extend pattern matching that are done in ISLE, but that's not essential</p>",
        "id": 471051019,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726595700
    },
    {
        "content": "<p>I see. Would a move back to CallSite be ok?</p>",
        "id": 471051094,
        "sender_full_name": "bjorn3",
        "timestamp": 1726595719
    },
    {
        "content": "<p>at this point, it remains that way because it would be a lot of work to transition it to use the common ABI code, but as far as I'm concerned it's not impossible to switch back; <span class=\"user-mention\" data-user-id=\"268749\">@Ulrich Weigand</span> could say more probably</p>",
        "id": 471051230,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726595756
    },
    {
        "content": "<p>Opened another PR <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9267\">https://github.com/bytecodealliance/wasmtime/pull/9267</a> which includes a partial fix for the struct return ABI.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9267\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8eba847d1c2e199d80cf8e75b18355f9cd0d8921/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643764326432303463666562636263393030396564333438633163643736386334626632633230646164663065393065393532303137343736353733376235332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39323637&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9267\" title=\"Couple of improvements to the abi handling code (part 3) by bjorn3 · Pull Request #9267 · bytecodealliance/wasmtime\">Couple of improvements to the abi handling code (part 3) by bjorn3 · Pull Request #9267 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">The first commit adds a couple of assertions against misuse of StructReturn. The next two commits are minor cleanups. And the last commit is a partial ABI fix for multi-value returns.\nHelps with #9250</div></div></div>",
        "id": 471071335,
        "sender_full_name": "bjorn3",
        "timestamp": 1726600606
    },
    {
        "content": "<p>Does wasmtime depend on the exact abi of the tail call conv or am I free to change it in Cranelift? And for the winch call conv do I only need to change Cranelift and Winch?</p>",
        "id": 471480777,
        "sender_full_name": "bjorn3",
        "timestamp": 1726750683
    },
    {
        "content": "<p>Exact details of <code>tail</code>: not really, but it is nice to somewhat \"look like\" the system ABI in general just to make it so that system tools like <code>perf</code> tend to work okay by default</p>\n<p>Winch: I believe so, since the trampolines between the host and wasm are all implemented by Cranelift, so Rust code isn't relying on any particulars here</p>",
        "id": 471507437,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726758385
    },
    {
        "content": "<blockquote>\n<p>Exact details of <code>tail</code>: not really, but it is nice to somewhat \"look like\" the system ABI in general just to make it so that system tools like <code>perf</code> tend to work okay by default</p>\n</blockquote>\n<p>Great! We currently botch up the abi for multi val returns when they don't all fit in registers. Return values are supposed to either all fit in registers or all be passed using a return area pointer. Currently Cranelift mixes the two. Making it behave differently on the tail/winch call conv vs the system call conv would be awkward. Great to know that I can unify the behavior.</p>",
        "id": 471508090,
        "sender_full_name": "bjorn3",
        "timestamp": 1726758578
    },
    {
        "content": "<p>PR up for just the tail and winch return area ptr register change: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9287\">https://github.com/bytecodealliance/wasmtime/pull/9287</a> Still working on the rest of the changes for another PR.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9287\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/65b7ac0036f554b89f11e7e7b65710a4915014f6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333462656365333061623139663865633439636234326438346237363731313332633665323961663461323135623664366536316262373362396530356162652f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39323837&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9287\" title=\"Make the Tail call conv follow the system call conv for the return area ptr by bjorn3 · Pull Request #9287 · bytecodealliance/wasmtime\">Make the Tail call conv follow the system call conv for the return area ptr by bjorn3 · Pull Request #9287 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 471553024,
        "sender_full_name": "bjorn3",
        "timestamp": 1726775135
    }
]