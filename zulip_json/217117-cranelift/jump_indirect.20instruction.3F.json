[
    {
        "content": "<p>Why is there not a <code>jump_indirect</code> instruction, similar to <code>call_indirect</code>? How do I currently generate something like <code>jmp *%rax</code>?</p>",
        "id": 197809590,
        "sender_full_name": "osa1",
        "timestamp": 1589655627
    },
    {
        "content": "<p>What do you want to use it for? Do you want a tail call, or a switch?</p>",
        "id": 197814219,
        "sender_full_name": "bjorn3",
        "timestamp": 1589661671
    },
    {
        "content": "<p>Tail call</p>",
        "id": 197814294,
        "sender_full_name": "osa1",
        "timestamp": 1589661734
    },
    {
        "content": "<p>I'm guessing this is not easily possible today: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\">https://github.com/bytecodealliance/wasmtime/issues/1065</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1065\" title=\"Is there any support for tail call eliminations? Are there any plans about it? 路 Issue #1065 路 bytecodealliance/wasmtime\">Is there any support for tail call eliminations? Are there any plans about it? 路 Issue #1065 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">To write a functional language compiler using this IR, tail call eliminations would be desirable. Are there any plans to support this? I couldn't find any details in the docs.</div></div></div>",
        "id": 197815411,
        "sender_full_name": "osa1",
        "timestamp": 1589663483
    },
    {
        "content": "<p>Just to make sure I'm not missing something: it's really not possible today to do an indirect jump in cranelift, right? The x64 I want to generate is something like <code>jmp *%rax</code>.</p>",
        "id": 198573573,
        "sender_full_name": "osa1",
        "timestamp": 1590310064
    },
    {
        "content": "<p>Yes, it is currently not possible. There is no instruction for it, nor does regalloc have any support for it.</p>",
        "id": 198576296,
        "sender_full_name": "bjorn3",
        "timestamp": 1590314796
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 198576299,
        "sender_full_name": "osa1",
        "timestamp": 1590314820
    },
    {
        "content": "<p>I'm curious, is this really not needed all that much in general? Or maybe the main user is wasmtime and it's not needed there?</p>",
        "id": 198576308,
        "sender_full_name": "osa1",
        "timestamp": 1590314852
    },
    {
        "content": "<p>So far none of the users required tail calls. WASM doesn't support it, C and Rust don't require it. Only some functional languages guarantee tail call optimization.</p>",
        "id": 198576419,
        "sender_full_name": "bjorn3",
        "timestamp": 1590315032
    },
    {
        "content": "<p>Though note that <a href=\"https://github.com/WebAssembly/proposals/#phase-3---implementation-phase-cg--wg\">a tails calls proposal is at stage 3 in the standardization process</a>, which means it's ready for implementation</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/proposals/#phase-3---implementation-phase-cg--wg\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/proposals/#phase-3---implementation-phase-cg--wg\" title=\"WebAssembly/proposals\">WebAssembly/proposals</a></div><div class=\"message_embed_description\">Tracking WebAssembly proposals. Contribute to WebAssembly/proposals development by creating an account on GitHub.</div></div></div>",
        "id": 198584570,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1590328782
    }
]