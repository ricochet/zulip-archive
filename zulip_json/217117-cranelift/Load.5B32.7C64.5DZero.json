[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span>, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span>: Hey! I'm looking at the translation for Load[32|64]Zero and it currently takes two CLIF instructions: a <code>load</code> and then <code>scalar_to_vector</code>. The appropriate lowering for x64 will be a single instruction, MOVSS or MOVSD, so I to either: 1) tell CLIF that scalar_to_vector can accept a memory address as input (or the equivalent in a new CLIF instruction), which implies that the aarch64 lowering might have to change a bit, or 2) figure out how to make load coalescing work for this case. What opinions do you all have? And if option 2 is preferable, can someone point me to an example?</p>",
        "id": 219134614,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607373255
    },
    {
        "content": "<p>(2) is the plan going forwards.  I can't point you at any example but I'm sure Chris can.</p>",
        "id": 219134755,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607373341
    },
    {
        "content": "<p>The latter is preferable, yep, and <code>LoadSplat</code> matching in the aarch64 backend is a good example</p>",
        "id": 219135923,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607373892
    },
    {
        "content": "<p>basically you just query the lowering context for \"source instruction or constant for this arg\", and if it's the load that you can merge, then do so</p>",
        "id": 219135953,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607373909
    },
    {
        "content": "<p>(my PR for x64 load-op merging would be a backend-specific example of this for x64)</p>",
        "id": 219135984,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607373928
    },
    {
        "content": "<p>Ok, I tried the load merging but I'm running into the following issue: MOVSS is considered a move by <code>MachInst::is_move</code> and this is correct when the input is a register. I am load merging a <code>load</code> into a <code>scalar_to_vector</code> using <code>MOVSS</code> and the <code>load</code> is sunk by <code>input_to_reg_mem</code>--this <code>MOVSS</code>, when the input is an address, should be considered a load, not a move. But <code>input_to_reg_mem</code> is returning a <code>RegMem::Reg</code> not a <code>RegMem::Mem</code> so <code>MOVSS</code> is being considered a move and being elided...</p>",
        "id": 219149588,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607381286
    },
    {
        "content": "<p>Now I'm looking at <code>get_value_as_source_or_const</code> and trying to understand what is going on.</p>",
        "id": 219149658,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607381349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, I can put up a draft PR if that will help... perhaps I'm doing something else wrong</p>",
        "id": 219151573,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607382598
    },
    {
        "content": "<p>Sure, happy to look</p>",
        "id": 219152523,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607383290
    },
    {
        "content": "<p>(sorry, was deep in the weeds)</p>",
        "id": 219152528,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607383296
    },
    {
        "content": "<p>I thought <code>is_move</code> was related only to register allocation.  Kinda surprised it plays any role in insn selection.  But maybe I misunderstand?</p>",
        "id": 219175069,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607408217
    },
    {
        "content": "<p>Ok, I opened a draft PR for this and added a comment reproducing the error: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\">https://github.com/bytecodealliance/wasmtime/pull/2489</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2489\" title=\"[machinst x64]: implement load*_zero for x64 by abrown 路 Pull Request #2489 路 bytecodealliance/wasmtime\">[machinst x64]: implement load*_zero for x64 by abrown 路 Pull Request #2489 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Like #2480, this should not be merged until #2432 is resolved and x64 Wasm SIMD spec tests are turned back on. The simd_load_zero.wast test is now in-tree since #2481 but will have to be enabled in...</div></div></div>",
        "id": 219232189,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607446831
    }
]