[
    {
        "content": "<p>This may be a silly question but I am struggling to figure out how to store nontrivial values(basically anything not an integer) on the stack? I feel like I understand it conceptually but I am really lost on how to actually achieve this? For example how could I store a simple array of integers on the stack?</p>",
        "id": 441523959,
        "sender_full_name": "Cregg",
        "timestamp": 1717092950
    },
    {
        "content": "<p>You'd have to make an explicit stack slot that is the size of your compound structure and then store/load to it piece-wise for each scalar that ultimately make up that compound structure</p>",
        "id": 441527845,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1717094310
    },
    {
        "content": "<p><a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/stackslot/enum.StackSlotKind.html#variant.ExplicitSlot\">https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/stackslot/enum.StackSlotKind.html#variant.ExplicitSlot</a></p>\n<p><a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/stackslot/struct.StackSlotData.html\">https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/stackslot/struct.StackSlotData.html</a></p>",
        "id": 441527991,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1717094363
    },
    {
        "content": "<p>Is there anywhere I could see an example of something like this? Specifically storing it in multiple pieces</p>",
        "id": 441536526,
        "sender_full_name": "Cregg",
        "timestamp": 1717097093
    },
    {
        "content": "<p>I'm sure <code>cg_clif</code> has an example somewhere</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span></p>",
        "id": 441537657,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1717097462
    },
    {
        "content": "<p>If you have a struct you did calculate a layout for this struct which contains the size of the struct and the offsets of all fields. Then you create a stack slot big enough to fit the struct and when you want to access a field you offset a pointer to the stack slot by the offset of the field.</p>",
        "id": 441540029,
        "sender_full_name": "bjorn3",
        "timestamp": 1717098209
    },
    {
        "content": "<p>For an array the size would be the size of the element type times the amount of elements. And calculating the offset would be multiplying the size of the element by the index of the element you want to access.</p>",
        "id": 441540214,
        "sender_full_name": "bjorn3",
        "timestamp": 1717098258
    },
    {
        "content": "<p>Thanks for the information. It seems that I must determine the offset at compile time for the stack functions in InstBuilder, how would I deal with this if I want my array to be indexable by a runtime value?</p>",
        "id": 441540980,
        "sender_full_name": "Cregg",
        "timestamp": 1717098503
    },
    {
        "content": "<p>You use the <code>stack_addr</code> instruction, then <code>iadd</code> and <code>imul</code> for computing the pointer to the element you want to access and finally use plain <code>load</code> and <code>store</code> for accessing the target.</p>",
        "id": 441544137,
        "sender_full_name": "bjorn3",
        "timestamp": 1717099364
    },
    {
        "content": "<p><code>stack_load</code>/<code>stack_store</code> get desugared to <code>stack_addr</code>+<code>load</code>/<code>store</code> anyway.</p>",
        "id": 441544244,
        "sender_full_name": "bjorn3",
        "timestamp": 1717099392
    },
    {
        "content": "<p>Thanks! This has been very helpful</p>",
        "id": 441555762,
        "sender_full_name": "Cregg",
        "timestamp": 1717102609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span> has marked this topic as resolved.</p>",
        "id": 468569863,
        "sender_full_name": "Notification Bot",
        "timestamp": 1725803126
    }
]