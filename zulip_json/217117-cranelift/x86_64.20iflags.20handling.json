[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> continuing from <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922574641\">https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922574641</a>, I'm not sure how well Cranelift's processor flag handling maps to my current use-case. I'm open to any thoughts if you think this is feasible, but afaik it's not quite there yet at least.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922574641\" style=\"background-image: url(https://opengraph.githubassets.com/ce26cac6ad8b06a79870a2590520f654f2dedc0b7ee3c71388bcf5adf619cee7/bytecodealliance/wasmtime/issues/2860)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2860#issuecomment-922574641\" title=\"Cranelift: Panic compiling iadd_carry on x86_64 路 Issue #2860 路 bytecodealliance/wasmtime\">Cranelift: Panic compiling iadd_carry on x86_64 路 Issue #2860 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hi! While using Cranelift as a backend for a project, I ran into a panic compiling iadd_carry instructions on x86_64. Please let me know if there is any other information I can provide that would b...</div></div></div>",
        "id": 254063314,
        "sender_full_name": "chc4",
        "timestamp": 1632149850
    },
    {
        "content": "<p>@chc4 it sounds like what you need is basically \"let me use the native processor status flags and track them individually\"?</p>",
        "id": 254063643,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632149977
    },
    {
        "content": "<p>i.e., something like what <code>iflags</code> does (with the restriction that only one is live at a time and the clobbering tracking), but split by flag?</p>",
        "id": 254063767,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150012
    },
    {
        "content": "<p>Essentially. How I sketched it out currently is I have a Context.flags array while I'm doing codegen, and populate with the iflags value from the iadd_ifcout for all the flags that the instruction actually sets. Then a <code>jz</code> gets Context.flags[Flags::ZF] and does an <code>br eq zf ...</code>, so the zf value is actual currently live iflags producer from the assembly. Notable I don't actually need discrete CF, ZF, OF, PF output from cranelift, just a bundle iflags value that I can use...but on the instruction selection side, it would probably have to be implemented as keeping track of the split flags, because CF and ZF could come from two seperate instructions, but the second one only setting ZF and keeping CF intact.</p>",
        "id": 254065013,
        "sender_full_name": "chc4",
        "timestamp": 1632150521
    },
    {
        "content": "<p>Unless it's something like adding an x86add_cout_zout_oout_pout which gives B1 for all the flags, with tracking they are from iflags ranges, I'm not sure how this could map to the B1 design.</p>",
        "id": 254065294,
        "sender_full_name": "chc4",
        "timestamp": 1632150630
    },
    {
        "content": "<p>it gets a little tricky when one starts to consider how to preserve certain flags, based on a knowledge of what every instruction clobbers, because that's platform-dependent and we'd prefer not to make the IR too platform-dependent, I think</p>",
        "id": 254065357,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150662
    },
    {
        "content": "<p>(that matters if one also sticks to a \"only one live copy of each flag\" constraint, at least)</p>",
        "id": 254065396,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150678
    },
    {
        "content": "<p>I can sort of see an alternative where we have the bundled flags value but track which values are actually live, and allow overlapping of disjoint sets</p>",
        "id": 254065493,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150715
    },
    {
        "content": "<p>Yeah, it's difficult for an ISA agnostic IR like Cranelift, which is the root of my problem I think. The assembly I'm lifting is dependant on exact processor flags behavior, including live ranges of specific flags, which Cranelift doesn't really expose.</p>",
        "id": 254065815,
        "sender_full_name": "chc4",
        "timestamp": 1632150839
    },
    {
        "content": "<p>but at this point it's starting to get quite complex and one of the top-level goals in the new backend design, simplification of IR, etc in general is to consume an IR with easily-understandable semantics and that is able to be compiled/processed with minimal complexity; this is why we are looking at iflags with some suspicion (or at least I am)</p>",
        "id": 254065918,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150875
    },
    {
        "content": "<p>I think the most straightforward, in some sense, is actually exactly what you said above: an <code>add</code> that produces N flags outputs</p>",
        "id": 254065954,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150899
    },
    {
        "content": "<p>on x86, that maps to exactly the add instruction</p>",
        "id": 254065976,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150908
    },
    {
        "content": "<p>on e.g. aarch64 we may have to synthesize some values</p>",
        "id": 254065985,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150914
    },
    {
        "content": "<p>in principle I'm not opposed to it -- something like <code>iadd_flags</code></p>",
        "id": 254066059,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632150951
    },
    {
        "content": "<p>This is for an x86 meta-JIT framework so I'm actually only doing x86-&gt;Cranelift-&gt;x86, if that helps any</p>",
        "id": 254066073,
        "sender_full_name": "chc4",
        "timestamp": 1632150955
    },
    {
        "content": "<p>right, that makes sense and is a really interesting application. I can see how it's desirable to tightly control the assembly here when one knows what it came from</p>",
        "id": 254066210,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632151009
    },
    {
        "content": "<p>it might be instructive to see what Valgrind does in this case? (cc <span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span> , he's sometimes hanging around here too)</p>",
        "id": 254066240,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632151026
    },
    {
        "content": "<p>Yeah, one of the main problems is also that Cranelift instruction selection isn't currently the best, so if I emit e.g. the <code>icmp_imm zf, 0</code> snippet I mentioned earlier and that is emitted as <em>worse</em> assembly than I started with in &gt;50% of the cases, that's also a pretty big downside.</p>",
        "id": 254066499,
        "sender_full_name": "chc4",
        "timestamp": 1632151115
    },
    {
        "content": "<p>we're working on a pattern-matching framework to help us handle a lot of these cases better, but yeah, it's sometimes suboptimal :-)</p>",
        "id": 254066907,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632151257
    },
    {
        "content": "<p>re: Valgrind, it looks like it computes flags as needed -- at the platform-independent IR level it stores some metadata needed to compute rflags (all or just e.g. carry)</p>",
        "id": 254067027,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632151305
    },
    {
        "content": "<p>e.g. grep for rflags or carry in: <a href=\"https://sourceware.org/git/?p=valgrind.git;a=blob;f=VEX/priv/guest_amd64_toIR.c;h=c6296f3987d0a0f6e49cd3245461d3565e5c9d30;hb=HEAD\">https://sourceware.org/git/?p=valgrind.git;a=blob;f=VEX/priv/guest_amd64_toIR.c;h=c6296f3987d0a0f6e49cd3245461d3565e5c9d30;hb=HEAD</a></p>",
        "id": 254067051,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632151311
    },
    {
        "content": "<p>I'm not sure if \"compute the flag\" can lower into \"nop\" if it's known to already be in rflags though; more reading needed</p>",
        "id": 254067200,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632151361
    },
    {
        "content": "<p>valgrind represents flags entirely in generic IR, with no special x86-specific compute-all-flags operations, or any such -- that's way too expensive.</p>",
        "id": 254070273,
        "sender_full_name": "Julian Seward",
        "timestamp": 1632152406
    },
    {
        "content": "<p>the OSZACP state is has a delayed representation, using 3 words; so they are only computed on demand.  Also it's subject to standard dead-code elimination and to a transformation that recovers the actual condition tested (eg, unsigned &lt;=) when there's a flag set and flag use in the same block.</p>",
        "id": 254070637,
        "sender_full_name": "Julian Seward",
        "timestamp": 1632152516
    },
    {
        "content": "<p>my question then is basically, is this something cranelift even wants to support? and if so, how much of it would I have to write myself as a seperate set of intrinsics, or would it just inform the proposed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3249\">https://github.com/bytecodealliance/wasmtime/issues/3249</a> design?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3249\" style=\"background-image: url(https://opengraph.githubassets.com/40fd90d77b1babbdcde1dc9fc1f21bb1171f6b1b826b35d3022118ad27ee4c8f/bytecodealliance/wasmtime/issues/3249)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3249\" title=\"Cranelift: simplify opcode set by removing &quot;flags&quot; values and producers/consumers 路 Issue #3249 路 bytecodealliance/wasmtime\">Cranelift: simplify opcode set by removing \"flags\" values and producers/consumers 路 Issue #3249 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In #3233 we discussed various simplifications we could perform to reduce the number of CLIF opcodes that exist. In general, we should strive for simplicity -- fewer opcodes mean less cost for every...</div></div></div>",
        "id": 254087854,
        "sender_full_name": "chc4",
        "timestamp": 1632159364
    },
    {
        "content": "<p>Possibly, yes, we can consider how to support this. I'd need to set aside a bit more time to think through the implications. You're welcome to leave a comment on that issue detailing the needs of your application -- basically a way to wire flags straight through</p>",
        "id": 254094894,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1632162114
    },
    {
        "content": "<p>Hi folks!  I got here as it's basically the only search result for <code>iadd_carry</code>; let me know if elsewhere would be better.</p>\n<p>I've been pondering a rustc PR to lower Rust's new <code>fn carrying_add(self, rhs: u64, carry: bool) -&gt; (u64, bool)</code> <a href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html#method.carrying_add\">functions</a> to <code>iadd_carry</code> in the cranelift backend, since it seemed like a perfect match.</p>\n<p>Is that a bad idea, if you're planning on removing it?  It's unclear what the optimal lowering <em>should</em> be, otherwise -- it feels like a shame to lower to multiple <code>iadd_cout</code>s and bitops to combine the output flags, as it currently does.</p>",
        "id": 262026837,
        "sender_full_name": "scottmcm",
        "timestamp": 1637297295
    },
    {
        "content": "<p>iadd_carry isn't implemented in cranelift right now AFAICT.</p>",
        "id": 262096870,
        "sender_full_name": "bjorn3",
        "timestamp": 1637341884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"458696\">@scottmcm</span> in principle the approach I think we want to aim for here is to take in <code>bool</code>s, and produce <code>bool</code>s, for carry flags; I'm advocating for removing <code>iflags</code> values but not flags. So eventually we should have a single CLIF opcode that does this, IMHO.</p>\n<p>Right now there's no implemented opcode that takes a carry-in, so you'll have to synthesize something, but hopefully that will change soon (the only reason this hasn't progressed further is because our TODO list is massive but at some point I want to spend time burning down my backlog, this issue included!).</p>",
        "id": 262098752,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1637342684
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> -- taking and returning <code>bool</code>s is exactly what the (unstable) library API wants, so that sounds great.  TBH I couldn't guess what the <code>Value</code>s for <code>iadd_ifcarry</code> would be, not that I put material looking into it.</p>\n<p>And I completely get being busy; no worries.  I'm in no hurry here.</p>",
        "id": 262158531,
        "sender_full_name": "scottmcm",
        "timestamp": 1637377638
    }
]