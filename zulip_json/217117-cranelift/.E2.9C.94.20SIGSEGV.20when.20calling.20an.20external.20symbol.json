[
    {
        "content": "<p>With this <a href=\"https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/jit.rs\">https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/jit.rs</a><br>\ncode generating following function, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sig0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"nc\">system_v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fn0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">sig0</span><span class=\"w\"></span>\n\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">f64const</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"p\">.</span><span class=\"mi\">0000000000000</span><span class=\"n\">p0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">fn0</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and external symbol being</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">cl_print</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mf\">0.0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>defined in the same binary as JIT engine.<br>\nStepping through with the debugger yields following picture one step before segfault</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">Symbol</span><span class=\"w\"> </span><span class=\"n\">Info</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Source</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">unknown</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">E0</span>: <span class=\"mi\">55</span><span class=\"w\">                         </span><span class=\"n\">pushq</span><span class=\"w\">  </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">E1</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">E5</span><span class=\"w\">                   </span><span class=\"n\">movq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">E4</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"n\">BE</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"n\">movabsq</span><span class=\"w\"> </span><span class=\"cp\">$</span><span class=\"mh\">0x3ff0000000000000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"w\">  </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x3FF0000000000000</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">EE</span>: <span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">F</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"n\">C6</span><span class=\"w\">             </span><span class=\"n\">movq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">xmm0</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">F3</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"mi\">35</span><span class=\"w\"> </span><span class=\"mi\">66</span><span class=\"w\"> </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"w\"> </span><span class=\"n\">FF</span><span class=\"w\">       </span><span class=\"n\">movq</span><span class=\"w\">   </span><span class=\"o\">-</span><span class=\"mh\">0x209a</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rip</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"w\">  </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">cursor</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">FA</span>: <span class=\"nc\">FF</span><span class=\"w\"> </span><span class=\"n\">D6</span><span class=\"w\">                      </span><span class=\"n\">callq</span><span class=\"w\">  </span><span class=\"o\">*%</span><span class=\"n\">rsi</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">FC</span>: <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">EC</span><span class=\"w\">                   </span><span class=\"n\">movq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E10</span><span class=\"n\">FF</span>: <span class=\"mi\">5</span><span class=\"n\">D</span><span class=\"w\">                         </span><span class=\"n\">popq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E1100</span>: <span class=\"nc\">C3</span><span class=\"w\">                         </span><span class=\"n\">retq</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E1101</span>: <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                      </span><span class=\"n\">addb</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"mf\">5555562E1103</span>: <span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                      </span><span class=\"n\">addb</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">al</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/jit.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5ce1e750c2e7c4118595115ed8a9f9cf7d46e50a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323538643564346562376438356139323631623563343161316163643666613634636134333732393330353662313135336362623839626563363665313064332f4a6f686e446f77736f6e2f4372616e654c697370)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/jit.rs\" title=\"CraneLisp/jit.rs at jit-primary · JohnDowson/CraneLisp\">CraneLisp/jit.rs at jit-primary · JohnDowson/CraneLisp</a></div><div class=\"message_embed_description\">Lisp in rust using cranelift as compiler backend. Contribute to JohnDowson/CraneLisp development by creating an account on GitHub.</div></div></div>",
        "id": 261269065,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636731259
    },
    {
        "content": "<p>And then we end up in <code>std::sys::unix::stack_overflow::imp::signal_handler</code></p>",
        "id": 261273294,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636733062
    },
    {
        "content": "<p>Tagging <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> as that seems to be the only person known to google to run into segfaults with JIT</p>",
        "id": 261276335,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636734367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"455945\">@Ivan Chinenov</span> What is the value of rsi? (You can use <code>p $rsi</code> in your debugger I think)</p>",
        "id": 261278233,
        "sender_full_name": "bjorn3",
        "timestamp": 1636735217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  <code>0x0000000000000000</code>.</p>",
        "id": 261279520,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636735753
    },
    {
        "content": "<p>Where is <code>cl_print</code> defined? It seems like it failed to look it up using <code>dlsym</code>.</p>",
        "id": 261279739,
        "sender_full_name": "bjorn3",
        "timestamp": 1636735845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/SIGSEGV.20when.20calling.20an.20external.20symbol/near/261279739\">said</a>:</p>\n<blockquote>\n<p>Where is <code>cl_print</code> defined? It seems like it failed to look it up using <code>dlsym</code>.</p>\n</blockquote>\n<p>In the same binary, <a href=\"https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/main.rs#L35-L39\">https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/main.rs#L35-L39</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/main.rs#L35-L39\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5ce1e750c2e7c4118595115ed8a9f9cf7d46e50a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323538643564346562376438356139323631623563343161316163643666613634636134333732393330353662313135336362623839626563363665313064332f4a6f686e446f77736f6e2f4372616e654c697370)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/CraneLisp/blob/jit-primary/src/main.rs#L35-L39\" title=\"CraneLisp/main.rs at jit-primary · JohnDowson/CraneLisp\">CraneLisp/main.rs at jit-primary · JohnDowson/CraneLisp</a></div><div class=\"message_embed_description\">Lisp in rust using cranelift as compiler backend. Contribute to JohnDowson/CraneLisp development by creating an account on GitHub.</div></div></div>",
        "id": 261279834,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636735900
    },
    {
        "content": "<p>There must be a way to define a symbol manually, at least it seems that there was a method for that in SimpleJIT which isn't a thing anymore.</p>",
        "id": 261280085,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636736005
    },
    {
        "content": "<p>Does <code>cranelift_jit::backend::lookup_with_dlsym</code> get run if you place a breakpoint on it? And does it run with <code>\"cl_print\"</code> as argument at least once?</p>",
        "id": 261280146,
        "sender_full_name": "bjorn3",
        "timestamp": 1636736035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> <a href=\"#narrow/stream/217117-cranelift/topic/SIGSEGV.20when.20calling.20an.20external.20symbol/near/261280085\">said</a>:</p>\n<blockquote>\n<p>There must be a way to define a symbol manually, at least it seems that there was a method for that in SimpleJIT which isn't a thing anymore.</p>\n</blockquote>\n<p>The <code>JITBuilder</code> has a method called <code>.symbol()</code>.</p>",
        "id": 261280241,
        "sender_full_name": "bjorn3",
        "timestamp": 1636736063
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/SIGSEGV.20when.20calling.20an.20external.20symbol/near/261280146\">said</a>:</p>\n<blockquote>\n<p>Does <code>cranelift_jit::backend::lookup_with_dlsym</code> get run if you place a breakpoint on it? And does it run with <code>\"cl_print\"</code> as argument at least once?</p>\n</blockquote>\n<p>It does in fact run with \"cl_print\", exactly once</p>",
        "id": 261281071,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636736438
    },
    {
        "content": "<p>Are you on linux? If so does <code>nm -D /path/to/executable | grep cl_print</code> show <code>cl_print</code> for you?</p>",
        "id": 261281214,
        "sender_full_name": "bjorn3",
        "timestamp": 1636736506
    },
    {
        "content": "<p>Using <code>.symbol()</code> may be the easiest way to fix the problem.</p>",
        "id": 261281413,
        "sender_full_name": "bjorn3",
        "timestamp": 1636736600
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec/cranelift/jit/src/backend.rs#L96\">https://github.com/bytecodealliance/wasmtime/blob/f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec/cranelift/jit/src/backend.rs#L96</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec/cranelift/jit/src/backend.rs#L96\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/81b5fdc69a2f4273566f3159cd8d7541267e7833\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343734336634666364623263303731613332373530303039633936346536326566656337353461336532313034633865633839353939656166373438616432632f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec/cranelift/jit/src/backend.rs#L96\" title=\"wasmtime/backend.rs at f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec · bytecodealliance/wasmtime\">wasmtime/backend.rs at f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/backend.rs at f2939111d9b892e5f92a1e8c52b4f4b1e0e1e6ec · bytecodealliance/wasmtime</div></div></div>",
        "id": 261281445,
        "sender_full_name": "bjorn3",
        "timestamp": 1636736619
    },
    {
        "content": "<p>Yes, I am on linux. <code>nm -D</code>does not output \"cl_print\". Could it be that it is removed by compiler even in debug mode despite being <code>extern \"C\"</code> and <code>no_mangle</code>?</p>",
        "id": 261281658,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636736714
    },
    {
        "content": "<p>Right, executables don't generally export any symbols other than a specific whitelist inside the linker (or linker script).</p>",
        "id": 261281897,
        "sender_full_name": "bjorn3",
        "timestamp": 1636736835
    },
    {
        "content": "<p>Weird then that putting <code>cl_print</code> into a <code>lib.rs</code> doesn't do anything either. Using <code>.symbol()</code> does fix the issue though, although it is not very ergonomic at all</p>",
        "id": 261283353,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636737515
    },
    {
        "content": "<p>Rust normally statically links libraries. The linker treats object files from statically linked libraries pretty much identical to those from the main executable. Only if you were to make a dynamic library would <code>cl_print</code> be exported.</p>",
        "id": 261283666,
        "sender_full_name": "bjorn3",
        "timestamp": 1636737642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> has marked this topic as resolved.</p>",
        "id": 261284383,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636737960
    },
    {
        "content": "<p>I see. Thanks for helping out.</p>",
        "id": 261284459,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636737979
    },
    {
        "content": "<p>I remember hitting this problem before -- it's an oddity of the way that symbol lookup works at the system level, as <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> says, and not something that we can really do anything about at the library level (since if the symbol is already invisible from <code>dlsym()</code>, there's not any other way to look it up).</p>\n<p>There is a hack used in Lucet to make <em>all</em> symbols visible to <code>dlsym()</code> -- in Lucet the symbol lookup is actually done by <code>dlopen()</code> when loading a precompiled .so, but I think that this might solve the issue here too: <a href=\"https://github.com/bytecodealliance/lucet/blob/main/.cargo/config\">this .cargo/config</a> file adds <code>-C link-args=-rdynamic</code> to the build when the runtime binary (which exports the symbols) is built.</p>\n<p>Maybe the above would help?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/lucet/blob/main/.cargo/config\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ebf69c42b999952718c2187b29e53190f6ebc583\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653163306165306533323338313436616538663236353034313439646633633439333434383565336235643132613434363130303136663435363733643435652f62797465636f6465616c6c69616e63652f6c75636574)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/lucet/blob/main/.cargo/config\" title=\"lucet/config at main · bytecodealliance/lucet\">lucet/config at main · bytecodealliance/lucet</a></div><div class=\"message_embed_description\">Lucet, the Sandboxing WebAssembly Compiler. Contribute to bytecodealliance/lucet development by creating an account on GitHub.</div></div></div>",
        "id": 261307412,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1636749338
    },
    {
        "content": "<p>It would be nice to make <code>finalize_definitions</code> panic for unresolved symbols again like it used to before I implemented hot swap functionality.</p>",
        "id": 261309441,
        "sender_full_name": "bjorn3",
        "timestamp": 1636750570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/.E2.9C.94.20SIGSEGV.20when.20calling.20an.20external.20symbol/near/261309441\">said</a>:</p>\n<blockquote>\n<p>It would be nice to make <code>finalize_definitions</code> panic for unresolved symbols again like it used to before I implemented hot swap functionality.</p>\n</blockquote>\n<p>Maybe if it were to be a fallible operation, it should return a result?<br>\nI'd rather avoid those sorts of hidden errors</p>",
        "id": 261349744,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636794064
    },
    {
        "content": "<p>With <code>JITBuilder.symbol()</code> method I can ever do a wildly unsound thing: define a lambda as a symbol by casting it first to fn pointer then to *const u8</p>",
        "id": 261350822,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1636795609
    }
]