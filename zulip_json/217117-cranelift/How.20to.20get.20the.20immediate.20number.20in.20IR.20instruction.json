[
    {
        "content": "<p>I'm working with Cranelift IR for the first time, and I want to make some modifications to the existing IR. I referred to <code>cranelift-fuzzgen</code> and wrote the following code to traverse each IR instruction in a function. This code can retrieve the opcode of the instruction as well as its <code>args</code> and <code>results</code>. However, I found that <code>args</code> and <code>results</code> seem to pertain to variables. For an instruction like <code>v2 = iconst.i32 32</code>, the <code>args</code> is empty, so how can I retrieve the immediate value <code>32</code> in this instruction? Additionally, are there any codes or tutorials related to modifying Cranelift IR that I can refer to?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">traverse_instrs</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncCursor</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_block</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">next_block</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">next_inst</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instr_data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">insts</span><span class=\"p\">[</span><span class=\"n\">inst</span><span class=\"p\">];</span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instr_data</span><span class=\"p\">.</span><span class=\"n\">opcode</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instr_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">inst_args</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instr_results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pos</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">inst_results</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 464009747,
        "sender_full_name": "ping ping",
        "timestamp": 1724236298
    },
    {
        "content": "<p>In general all of the special information for a given opcode is going to be in the <a href=\"https://docs.rs/cranelift-codegen/0.111.0/cranelift_codegen/ir/instructions/enum.InstructionData.html\">InstructionData</a> struct. We have some functions there to simplify feching values from some instructions, but we don't have anything for fetching the constant value from a const.</p>\n<p>So you might have to destructure it. <code>iconst</code> is of type <code>InstructionData::UnaryImm</code> so you can probably do something along these lines.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">instr_data</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">InstructionData</span><span class=\"p\">::</span><span class=\"n\">UnaryImm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">imm</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"unrecognized instr\"</span><span class=\"p\">),</span>\n<span class=\"p\">};</span>\n</code></pre></div>",
        "id": 464010712,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1724236663
    },
    {
        "content": "<blockquote>\n<p>Additionally, are there any codes or tutorials related to modifying Cranelift IR that I can refer to?</p>\n</blockquote>\n<p>Unfortunately I don't think so</p>",
        "id": 464010819,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1724236694
    },
    {
        "content": "<p>For doing more complicated changes in the IR you might want to use <a href=\"https://docs.rs/cranelift-codegen/0.111.0/cranelift_codegen/cursor/struct.FuncCursor.html\">FuncCursor</a> that lets you replace whole instructions at certain points</p>",
        "id": 464011061,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1724236808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/217117-cranelift/topic/How.20to.20get.20the.20immediate.20number.20in.20IR.20instruction/near/464011061\">said</a>:</p>\n<blockquote>\n<p>For doing more complicated changes in the IR you might want to use <a href=\"https://docs.rs/cranelift-codegen/0.111.0/cranelift_codegen/cursor/struct.FuncCursor.html\">FuncCursor</a> that lets you replace whole instructions at certain points</p>\n</blockquote>\n<p>Thank you very much for your answer <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 464290441,
        "sender_full_name": "ping ping",
        "timestamp": 1724313200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> <br>\nHi, I encountered a strange control flow behavior with the following piece of code. The control flow generated seems unusual and not as expected.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Function</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">make_block</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">append_block_param</span><span class=\"p\">(</span><span class=\"n\">block0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">I32</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">make_block</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">make_block</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">br_block1_block0_block2</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncCursor</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">insert_block</span><span class=\"p\">(</span><span class=\"n\">block0</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">insert_block</span><span class=\"p\">(</span><span class=\"n\">block1</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">br_block1_block0_block2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">brif</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">block2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n<span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">insert_block</span><span class=\"p\">(</span><span class=\"n\">block2</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">make_block</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">remove_block</span><span class=\"p\">(</span><span class=\"n\">block2</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FuncCursor</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">at_last_inst</span><span class=\"p\">(</span><span class=\"n\">block1</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"c1\">// let removed_instr = cur.remove_inst();</span>\n<span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">brif</span><span class=\"p\">(</span><span class=\"n\">cond</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">block3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]);</span>\n<span class=\"w\">            </span><span class=\"n\">cur</span><span class=\"p\">.</span><span class=\"n\">insert_block</span><span class=\"p\">(</span><span class=\"n\">block3</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>The control flow graph generated by this code is as follows:<br>\n<a href=\"/user_uploads/15107/OV2ZWijTJmwG_lo0UYws9SGr/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/OV2ZWijTJmwG_lo0UYws9SGr/image.png\" title=\"image.png\"><img data-original-dimensions=\"509x457\" src=\"/user_uploads/thumbnail/15107/OV2ZWijTJmwG_lo0UYws9SGr/image.png/840x560.webp\"></a></div><p>In the code, I didn&rsquo;t add any instructions to block3, but the generated control flow graph shows that block3 contains the br_if instruction, and these instructions were originally in block1. Only when I uncomment the lines in the code can the correct control flow graph be generated.</p>",
        "id": 467707748,
        "sender_full_name": "ping ping",
        "timestamp": 1725506364
    },
    {
        "content": "<p>I'm not entirely sure why that br_if gets placed there, but when inserting the first br_if the cursor is not explicitly placed anywhere, so I'm not sure what the behaviour is there</p>",
        "id": 467715909,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1725510642
    }
]