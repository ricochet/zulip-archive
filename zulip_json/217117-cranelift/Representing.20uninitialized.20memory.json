[
    {
        "content": "<p>I'm wondering what the Cranelift IR would look like for this source code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">do_something2</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">do_something3</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">inner_value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_something4</span><span class=\"p\">(</span><span class=\"n\">inner_value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">do_something5</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Conceptually, <code>Option</code> is a struct with two fields. The first field is the the discriminant, which is 0 for <code>Some</code> and 1 for <code>None</code>. The second field is the inner value, which can be left uninitialized if the discriminant is <code>None</code>.</p>\n<p>Implementing this using loads and stores, it's obvious how this would work. The <code>Option</code> would have a layout somewhere in memory. The branch creating the <code>Some</code> value would store 0 at the memory location of the discriminant and the return value of <code>do_something2</code> at the memory location of the inner value. The branch creating the <code>None</code> value would store 1 at the memory location of the discriminant, and do nothing to the memory location of the inner value, leaving it uninitialized.</p>\n<p>I've got the feeling that using loads and stores wouldn't be a good approach. Better would be to use SSA values that can be optimized. I guess the <code>Some</code> value could be created as <code>(iconst(ty, 0), iconst(ty, inner_value))</code>. But how do I then create the <code>None</code> value, where the inner value is supposed to be uninitialized? Is this the right approach at all?</p>",
        "id": 259097867,
        "sender_full_name": "Veverak",
        "timestamp": 1635255794
    },
    {
        "content": "<p>Here's another example.</p>\n<p>I enter the following code on <a href=\"http://godbolt.org\">godbolt.org</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The following comes out:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">example</span>::<span class=\"n\">example</span>:\n        <span class=\"nc\">mov</span><span class=\"w\">     </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mov</span><span class=\"w\">     </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The discriminant is assigned to <em>eax</em> and the inner value to <em>edx</em>.</p>\n<p>Then I enter the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And this comes out:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">example</span>::<span class=\"n\">example</span>:\n        <span class=\"nc\">xor</span><span class=\"w\">     </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ret</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The discriminant is assigned to <em>eax</em> and <em>edx</em> is left uninitialized.</p>\n<p>How can I do that with Cranelift?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://godbolt.org\" style=\"background-image: url(https://github.com/compiler-explorer/infra/blob/main/logo/favicon.png?raw=true)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://godbolt.org\" title=\"Compiler Explorer\">Compiler Explorer</a></div><div class=\"message_embed_description\">Compiler Explorer is an interactive online compiler which shows the assembly output of compiled C++, Rust, Go (and many more) code.</div></div></div>",
        "id": 259116400,
        "sender_full_name": "Veverak",
        "timestamp": 1635262918
    },
    {
        "content": "<p>clif doesn't have <code>undef</code> values or anything like that, so probably the best thing to do would be to use zeros</p>\n<p>you could also look at what <code>cg_clif</code>, the cranelift backend for rustc, does</p>",
        "id": 259119228,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1635264081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451107\">@Veverak</span> adding onto what <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> says above, the reason we don't have undef is because there is a focus on determinism in our IR -- in practice there have been a lot of bugs in e.g. LLVM related to its handling of undef values</p>",
        "id": 259119443,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1635264171
    },
    {
        "content": "<p>Thanks for the answers. I had a brief look at cg_clif and got the impression that it implements enums through pointer writes, which I guess leads to memory accesses that won't be optimized away. The LLVM backend seems to implement enums through stack stores and loads, as evidenced by running the compiler without optimizations, and then LLVM optimizes the stack slots away. Cranelift doesn't seems to do the same optimization, and I guess it never will. I would have liked if I could do this optimization myself by constructing enums as SSA values when I know that it doesn't need an address on the stack.</p>\n<p>I guess I'll make my frontend optimize the case when a block that constructs an enum is immediately followed by a block that matches on that enum, by skipping the match block and jumping directly into the match arm that takes this variant, passing the inner value in SSA form. For any other case, I'll store the enum in a stack slot.</p>",
        "id": 259122327,
        "sender_full_name": "Veverak",
        "timestamp": 1635265417
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451107\">@Veverak</span> it sounds like what you're looking for is something like LLVM's mem2reg pass? In other words, something that recognizes a memory location is never aliased and does not escape, so can lift loads and stores into SSA? I think that is unlikely to happen in the short term, but it's conceivable that CL could have something like that someday</p>",
        "id": 259122766,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1635265587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> That sounds like the pass I was thinking of. But I wasn't expecting CL to have this pass. Since my frontend already knows that the value should go into registers, not memory, it could directly generate code without memory accesses instead of relying on this pass. But I can't generate the SSA-equivalent of the relevant memory accesses without a way to express uninitialized values.</p>\n<p>Zero-initializing values that will never be read may be costly depend on what function I'm compiling. Maybe there's a loop that constructs many values of one variant and will have to zero-initialize all the fields of all the other variants that it doesn't create.</p>",
        "id": 259125507,
        "sender_full_name": "Veverak",
        "timestamp": 1635266678
    }
]