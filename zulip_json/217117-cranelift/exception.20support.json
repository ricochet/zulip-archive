[
    {
        "content": "<p>I've been trying to implement exception support over at <a href=\"https://github.com/bjorn3/wasmtime/tree/eh_cleanup\">https://github.com/bjorn3/wasmtime/tree/eh_cleanup</a> I'm not sure how to handle callee saved registers though. They are trashed in case of the cleanup path AFAIK, but for good performance shouldn't need to be restored in case of a regular return. Caller saved registers are also somewhat annoying, but should be doable. The basic design I'm trying to implement is:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>function %foo(i32) system_v {\n    ; eh_personality rust_eh_personality\n\n    ; list of alternative targets for the invoke outside of the control of Cranelift.\n    jt0 = jump_table [block2]\n\n    sig0 = () system_v\n    sig1 = (i64) system_v\n\n    fn0 = %bar sig0\n    fn1 = %_Unwind_Resume sig1\n\nblock0(v0: i32):\n    invoke fn0, block1, jt0\n\nblock1:\n    return\n\n; All registers specified as callee-saved by the base ABI are restored, as well as scratch registers\n; %rdi,%rsi,%rdx,%rcx(see below). Except for those exceptions, scratch (or caller-saved) registers\n; are not preserved, and their contents are undefined on transfer.\n\n; up to four args passed in %rdi, %rsi, %rdx, %rcx\n; panic_unwind passes the exception_object pointer as the first arg and no additional arguments\nblock2(v1: i64) eh_landing_pad: ; eh_landing_pad is the \"block entry abi\"\n    ; do cleanup work. all values accessible at the invoke are also accessible here\n    tail_call fn1(v1)\n}\n</code></pre></div>\n<p>This should work fine for DWARF unwinding, while also being flexible enough to enable non-exception usecases like maybe on stack replacement in the future.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/wasmtime/tree/eh_cleanup\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d62a5186a3b4341f0a14fd41cc2de591520456f2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326561346138643862333265636432346132653830353537306164343131366334333139373331383230386463343861383666633865376361353633346162312f626a6f726e332f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/wasmtime/tree/eh_cleanup\" title=\"GitHub - bjorn3/wasmtime at eh_cleanup\">GitHub - bjorn3/wasmtime at eh_cleanup</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - GitHub - bjorn3/wasmtime at eh_cleanup</div></div></div>",
        "id": 282523996,
        "sender_full_name": "bjorn3",
        "timestamp": 1652719829
    },
    {
        "content": "<p>cc <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\">https://github.com/bytecodealliance/wasmtime/issues/1677</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2049\">https://github.com/bytecodealliance/wasmtime/issues/2049</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3427\">https://github.com/bytecodealliance/wasmtime/issues/3427</a></p>\n<p><a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html\">https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/41ddd7181cb63424b1c7f787e3be4db4dfc20753\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306161303238316135663333336237316131626337656233666438316366626331343036633636336231306434313932343132393030383639316134363134662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31363737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\" title=\"Support cleanup during unwinding · Issue #1677 · bytecodealliance/wasmtime\">Support cleanup during unwinding · Issue #1677 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Currently the generated unwinding information only restores registers. This issue proposes to make it possible to also run cleanup actions like running destructors during unwinding. Benefit...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2049\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0176966dfd310e4e1875d0d038ae4ccc1b57b570\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363264613861646664353739633137353663636238623439353764643462636366343333316336373836343537633361333565656635363766616638356638652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f32303439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2049\" title=\"Exception support · Issue #2049 · bytecodealliance/wasmtime\">Exception support · Issue #2049 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Cranelift currently doesn&#39;t support SEH (but has some support for finally I think). This is a feature request to support properly exception (landingpads on Posix, SEH on windows, maybe ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3427\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4c10c4a502ad3e85e402c7d891dee4095d3c0f01\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373165376131623534343430393666343637363564316662306563376439343365336265343263636338353931326238313032343531616166666134636238612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33343237)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3427\" title=\"Implementation strategy for the Exception Handling proposal · Issue #3427 · bytecodealliance/wasmtime\">Implementation strategy for the Exception Handling proposal · Issue #3427 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I&#39;ve been interested in having the Exception Handling proposal supported in Wasmtime, so I looked into possible ways to implement it. There&#39;s been some prior discussion in issues #2049 and ...</div></div></div>",
        "id": 282524040,
        "sender_full_name": "bjorn3",
        "timestamp": 1652719859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> This was my question during the cranelift bi-weekly.</p>",
        "id": 282529397,
        "sender_full_name": "bjorn3",
        "timestamp": 1652721162
    },
    {
        "content": "<p>Ah, I <em>think</em> this should \"just work\" in the way you're hoping for, if I understand correctly. Basically the regalloc implicitly reloads caller-saved values when needed, but this is a consequence of spill/reload mechanisms and the regalloc-metadata model of the call instruction (clobbers all caller-saves) rather than some explicitly-coded behavior</p>",
        "id": 282530166,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652721521
    },
    {
        "content": "<p>so if values in caller-saves are not needed on the landingpad path then they simply won't be reloaded</p>",
        "id": 282530199,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652721539
    },
    {
        "content": "<p>the \"some additional registers are <em>also</em> preserved\" part is interesting, and right now we don't have a way of representing \"conditional clobbers\" like this; in principle it might be possible to model but it's a lot more complex, so I'd prefer not to if it's not clearly needed for adequate performance</p>",
        "id": 282530297,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652721584
    },
    {
        "content": "<p>Forgot about that comment that callee-saved registers are restored. I wrote that file months ago.</p>",
        "id": 282530512,
        "sender_full_name": "bjorn3",
        "timestamp": 1652721678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/exception.20support/near/282530297\">said</a>:</p>\n<blockquote>\n<p>the \"some additional registers are <em>also</em> preserved\" part is interesting, and right now we don't have a way of representing \"conditional clobbers\" like this; in principle it might be possible to model but it's a lot more complex, so I'd prefer not to if it's not clearly needed for adequate performance</p>\n</blockquote>\n<p>If you are refering to %rdi, %rsi, %rdx and %rcx, they are set by the personality function as kind of extra arguments. I modeled them as block parameters.</p>",
        "id": 282530625,
        "sender_full_name": "bjorn3",
        "timestamp": 1652721724
    },
    {
        "content": "<p>In any case I think it would work once implementing the right exception tables to restore callee saved registers, thanks!</p>",
        "id": 282530780,
        "sender_full_name": "bjorn3",
        "timestamp": 1652721807
    },
    {
        "content": "<p>ah ok cool -- so if you need access to those then the right way to do it is I think to put a pseudoinstruction at the top of the unwind path that defs parameters with fixed-reg constraints (e.g. def v123 fixed in %rdi); then it will pick up the values automatically</p>",
        "id": 282530960,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652721889
    },
    {
        "content": "<p>That was basically what I wanted to do.</p>",
        "id": 282530996,
        "sender_full_name": "bjorn3",
        "timestamp": 1652721912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> Is there a way to introduce an extra block during lowering to machinst's? Basically I need to turn <code>invoke</code> into a sequence of load inputs, call function, jump to temp block, and then in the temp block store the return values and jump to whichever the destination of the invoke is. I believe the call needs to be a terminator at machinst level and not just clif ir level as it can return to more than one place.</p>",
        "id": 282541502,
        "sender_full_name": "bjorn3",
        "timestamp": 1652726057
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> not currently, no; the invariant is that lowering does not introduce additional control flow that is visible to the register allocator</p>",
        "id": 282542148,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652726362
    },
    {
        "content": "<p>though various sequences do emit local branches within a single pseudoinstruction; that's fine as long as it's single-in, single-out (e.g. trap-if)</p>",
        "id": 282542194,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652726384
    },
    {
        "content": "<p>it's somewhat surprising to me that we would need additional control-flow expansion during lowering (i.e. that the <code>invoke</code> with landingpad edge is not enough to capture the control flow) but I'm happy think more about this if that's really the case</p>",
        "id": 282542336,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652726441
    },
    {
        "content": "<p>The problem is that <code>invoke</code> needs to lower to argument stores after the call, but the landingpad edge is right after the call instruction.</p>",
        "id": 282542403,
        "sender_full_name": "bjorn3",
        "timestamp": 1652726480
    },
    {
        "content": "<p>OK, perhaps something could be done in the landingpad itself then? I'm not entirely sure, and I don't have cycles to think deeply about this right now, but there should be a way to work around the invariant; we really really do not want to introduce the complexity of patching in new blocks here if we can help it</p>",
        "id": 282542654,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652726565
    },
    {
        "content": "<p>Basically I need:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">emit_stack_pre_adjust</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">num_args</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">get_copy_to_arg_order</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_regs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">put_input_in_regs</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">emit_copy_regs_to_arg</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg_regs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">emit_invoke</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">temp_block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">alternatives</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">// Switch to temp_block</span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">outputs</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">retval_regs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_output_reg</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">output</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">emit_copy_retval_to_regs</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">retval_regs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">abi</span><span class=\"p\">.</span><span class=\"n\">emit_stack_post_adjust</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 282542729,
        "sender_full_name": "bjorn3",
        "timestamp": 1652726599
    },
    {
        "content": "<blockquote>\n<p>OK, perhaps something could be done in the landingpad itself then?</p>\n</blockquote>\n<p>No, those stores are for when the landingpad is <strong>not</strong> hit.</p>",
        "id": 282542768,
        "sender_full_name": "bjorn3",
        "timestamp": 1652726619
    },
    {
        "content": "<p>OK, we'll need to find another way then; not possible to introduce a block in that context</p>",
        "id": 282542917,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652726682
    },
    {
        "content": "<p>By the way how do I tell everything what successors <code>invoke</code> has?</p>",
        "id": 282543212,
        "sender_full_name": "bjorn3",
        "timestamp": 1652726843
    },
    {
        "content": "<p>Which function needs an extra branch?</p>",
        "id": 282543230,
        "sender_full_name": "bjorn3",
        "timestamp": 1652726852
    },
    {
        "content": "<p>Found it: <code>analyze_branch</code>.</p>",
        "id": 282543992,
        "sender_full_name": "bjorn3",
        "timestamp": 1652727196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> Would it be possible to require that the successor block for a normal return of the invoke instruction has a single predecessor and then during lowering of the invoke instruction add the return value store instructions to the successor block? Or is it not possible to partially fill a block from the start either?</p>",
        "id": 282908025,
        "sender_full_name": "bjorn3",
        "timestamp": 1652955498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> no, I don't think so, it breaks a number of assumptions for an instruction in one block to put lowered instructions in another.</p>\n<p>Can we put a pseudoinstruction in the successor that does these stores? Both at the CLIF level, and then when lowered as well; at the MachInst level the call (or invoke specifically) writes whatever RealRegs, and the instruction at the head of the successor reads them, and regalloc will do the right thing reserving those liveranges</p>",
        "id": 282941155,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652972330
    },
    {
        "content": "<p>Those stores must not be performed for the case where it unwinds and the respective output values likely shouldn't be considered defined either.</p>",
        "id": 282941594,
        "sender_full_name": "bjorn3",
        "timestamp": 1652972466
    },
    {
        "content": "<p>OK, but a \"conditional definition\" is not possible with current regalloc, and in general that's really difficult and error-prone; my suggestion above will work properly, I think</p>",
        "id": 282942551,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652972836
    },
    {
        "content": "<p>if the stores occur as part of the successor inst, then this makes at least those conditional</p>",
        "id": 282942588,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1652972854
    },
    {
        "content": "<p>I guess I will try to put the store instructions in the invoke machinst pseudoinstruction after the call and before the jump.</p>",
        "id": 282942784,
        "sender_full_name": "bjorn3",
        "timestamp": 1652972936
    }
]